void sub_190FCD9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FCE58C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FCE868(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FCEB58(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FCEB58(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FCE3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FCE58C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FCE7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FCE868(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FCE58C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FCEAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FCEB58(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FCE868(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FCEDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FCF978((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FCFC54(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FCFF44(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FCFF44(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FCF78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FCF978(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FCFBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FCFC54(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FCF978(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FCFED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FCFF44(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FCFC54(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FD01BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FD0D64((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FD1040(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FD1330(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FD1330(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FD0B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FD0D64(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FD0FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FD1040(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FD0D64(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FD12BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FD1330(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FD1040(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FD15A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FD2150((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FD242C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FD271C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FD271C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FD1F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FD2150(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FD23B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FD242C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FD2150(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FD26A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FD271C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FD242C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FD2994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_tEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FD353C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FD3818(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FD3B08(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FD3B08(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FD3350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FD353C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FD37A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FD3818(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FD353C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FD3A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FD3B08(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FD3818(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FD3D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FD4928((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FD4C04(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FD4EF4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FD4EF4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FD473C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FD4928(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FD4B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FD4C04(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FD4928(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FD4E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FD4EF4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FD4C04(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FD516C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FD5D14((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FD5FF0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FD62E0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FD62E0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FD5B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FD5D14(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FD5F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FD5FF0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FD5D14(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FD626C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FD62E0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FD5FF0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FD6558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  char *DataSpan;
  char *v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  _QWORD *v69;
  char *v70;
  void *v71;
  uint64_t v72;
  void *exception;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t NumElements;
  _QWORD *v104;
  unsigned int NumComponents;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  E5RT::TensorDataType::Impl *v111[2];
  _QWORD v112[3];
  _QWORD v113[3];
  _QWORD v114[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  ElementSize = E5RT::TensorDataType::GetElementSize(v111);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v107 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_35;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_37;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_36;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        v60 = v20[v19];
        v61 = v23[v19];
        v62 = 2 * NumComponents * v26;
        if (NumElements / v26 <= 1)
          v63 = 1;
        else
          v63 = NumElements / v26;
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    v52 = *(_QWORD *)(v25 + 8 * v19);
    v53 = v52 * v28;
    v54 = v30 * v52;
    v55 = Rank - 3;
    while (1)
    {
      v56 = v20[v55];
      v57 = v56 - v53;
      v58 = v23[v55];
      if (v57 != v58 - v54)
        break;
      v59 = *(_QWORD *)(v25 + 8 * v55);
      v54 = v58 * v59;
      v53 = v59 * v56;
      v33 = v55-- <= 0;
      if (v33)
        goto LABEL_27;
    }
    if (v21 < 1)
      goto LABEL_36;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_37:
    v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_36;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v23[v35];
      v50 = 2 * NumComponents * v47;
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_35:
  if (Rank)
    goto LABEL_36;
  v64 = 0;
LABEL_41:
  v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v67 = *(const void **)v65;
  v66 = *(_QWORD *)(v65 + 8);
  v68 = v66 - *(_QWORD *)v65;
  if (v66 == *(_QWORD *)v65)
  {
    v104 = 0;
    v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = operator new(v66 - *(_QWORD *)v65);
    v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    v109 = v70;
  }
  v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      v72 = *(_QWORD *)(a5 + 24);
      if (!v72)
        goto LABEL_89;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104)
        break;
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      if (v104[v75])
      {
        v76 = 0;
        v77 = *(_QWORD *)(*TensorStrides + 8 * v75);
        v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          v79 = *(_QWORD *)(a5 + 24);
          if (!v79)
            goto LABEL_89;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75])
            goto LABEL_53;
        }
      }
      break;
    case 2uLL:
      sub_190FD702C((_QWORD *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_190FD7308(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_190FD75F8(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      v81 = (_QWORD *)*TensorStrides;
      v82 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
LABEL_82:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        v84 = v80 >> 3;
        v85 = (v80 >> 3) - 5;
        v86 = (v80 >> 3) - 1;
        v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            v88 = 0;
            v89 = v86;
            v90 = v81[v89];
            v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              v92 = *(_QWORD *)(a5 + 24);
              if (!v92)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85])
                goto LABEL_53;
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v101 = v85;
          v102 = v104[v85];
          v95 = v81[v85];
          v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            v97 = v87;
            v98 = NumElements / v87;
            do
            {
              sub_190FD75F8(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_190FD6E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a16;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FD702C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FD7294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FD7308(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FD702C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FD7584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FD75F8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FD7308(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FD7870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FD8418((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FD86F4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FD89E4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FD89E4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FD822C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FD8418(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FD8680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FD86F4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FD8418(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FD8970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FD89E4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FD86F4(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FD8C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FD9804((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FD9AE0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FD9DD0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FD9DD0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FD9618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FD9804(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FD9A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FD9AE0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FD9804(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FD9D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FD9DD0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FD9AE0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FDA048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FDABF0((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FDAECC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FDB1BC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FDB1BC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FDAA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FDABF0(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FDAE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FDAECC(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FDABF0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FDB148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FDB1BC(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FDAECC(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FDB434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FDBFDC((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FDC2B8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FDC5A8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FDC5A8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FDBDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FDBFDC(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FDC244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FDC2B8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FDBFDC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FDC534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FDC5A8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FDC2B8(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FDC820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_sEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FDD3C8((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FDD6A4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FDD994(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FDD994(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FDD1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FDD3C8(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FDD630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FDD6A4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FDD3C8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FDD920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FDD994(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FDD6A4(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FDDC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FDE7B4((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FDEA90(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FDED80(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FDED80(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FDE5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FDE7B4(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FDEA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FDEA90(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FDE7B4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FDED0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FDED80(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FDEA90(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FDEFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FDFBA0((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FDFE7C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FE016C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FE016C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FDF9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FDFBA0(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FDFE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FDFE7C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FDFBA0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE00F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE016C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FDFE7C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FE03E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FE0F8C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FE1268(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FE1558(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FE1558(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FE0DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FE0F8C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FE11F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FE1268(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FE0F8C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE14E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE1558(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FE1268(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FE17D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  char *DataSpan;
  char *v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  _QWORD *v69;
  char *v70;
  void *v71;
  uint64_t v72;
  void *exception;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t NumElements;
  _QWORD *v104;
  unsigned int NumComponents;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  E5RT::TensorDataType::Impl *v111[2];
  _QWORD v112[3];
  _QWORD v113[3];
  _QWORD v114[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  ElementSize = E5RT::TensorDataType::GetElementSize(v111);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v107 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_35;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_37;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_36;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        v60 = v20[v19];
        v61 = v23[v19];
        v62 = 2 * NumComponents * v26;
        if (NumElements / v26 <= 1)
          v63 = 1;
        else
          v63 = NumElements / v26;
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    v52 = *(_QWORD *)(v25 + 8 * v19);
    v53 = v52 * v28;
    v54 = v30 * v52;
    v55 = Rank - 3;
    while (1)
    {
      v56 = v20[v55];
      v57 = v56 - v53;
      v58 = v23[v55];
      if (v57 != v58 - v54)
        break;
      v59 = *(_QWORD *)(v25 + 8 * v55);
      v54 = v58 * v59;
      v53 = v59 * v56;
      v33 = v55-- <= 0;
      if (v33)
        goto LABEL_27;
    }
    if (v21 < 1)
      goto LABEL_36;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_37:
    v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_36;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v23[v35];
      v50 = 2 * NumComponents * v47;
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_35:
  if (Rank)
    goto LABEL_36;
  v64 = 0;
LABEL_41:
  v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v67 = *(const void **)v65;
  v66 = *(_QWORD *)(v65 + 8);
  v68 = v66 - *(_QWORD *)v65;
  if (v66 == *(_QWORD *)v65)
  {
    v104 = 0;
    v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = operator new(v66 - *(_QWORD *)v65);
    v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    v109 = v70;
  }
  v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      v72 = *(_QWORD *)(a5 + 24);
      if (!v72)
        goto LABEL_89;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104)
        break;
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
        goto LABEL_82;
      }
      if (v104[v75])
      {
        v76 = 0;
        v77 = *(_QWORD *)(*TensorStrides + 8 * v75);
        v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          v79 = *(_QWORD *)(a5 + 24);
          if (!v79)
            goto LABEL_89;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75])
            goto LABEL_53;
        }
      }
      break;
    case 2uLL:
      sub_190FE22A4((_QWORD *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_190FE2580(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_190FE2870(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      v81 = (_QWORD *)*TensorStrides;
      v82 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        v93 = *(_QWORD *)(a5 + 24);
        if (!v93)
          goto LABEL_89;
LABEL_82:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        v84 = v80 >> 3;
        v85 = (v80 >> 3) - 5;
        v86 = (v80 >> 3) - 1;
        v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            v88 = 0;
            v89 = v86;
            v90 = v81[v89];
            v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              v92 = *(_QWORD *)(a5 + 24);
              if (!v92)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85])
                goto LABEL_53;
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v101 = v85;
          v102 = v104[v85];
          v95 = v81[v85];
          v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            v97 = v87;
            v98 = NumElements / v87;
            do
            {
              sub_190FE2870(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_190FE2114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a16;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FE22A4(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FE250C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FE2580(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FE22A4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE27FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE2870(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FE2580(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FE2AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FE3690((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FE396C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FE3C5C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FE3C5C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FE34A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FE3690(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FE38F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FE396C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FE3690(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE3BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE3C5C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FE396C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FE3ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FE4A7C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FE4D58(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FE5048(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FE5048(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FE4890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FE4A7C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FE4CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FE4D58(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FE4A7C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE4FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE5048(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FE4D58(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FE52C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FE5E68((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FE6144(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FE6434(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FE6434(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FE5C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FE5E68(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FE60D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FE6144(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FE5E68(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE63C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE6434(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FE6144(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FE66AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_hEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FE7254((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FE7530(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FE7820(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FE7820(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FE7068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FE7254(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FE74BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FE7530(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FE7254(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE77AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE7820(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FE7530(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FE7A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FE8640((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FE891C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FE8C0C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FE8C0C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FE8454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FE8640(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FE88A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FE891C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FE8640(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE8B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE8C0C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FE891C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FE8E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FE9A2C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FE9D08(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FE9FF8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FE9FF8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FE9840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FE9A2C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FE9C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FE9D08(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FE9A2C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FE9F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FE9FF8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FE9D08(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FEA270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FEAE18((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FEB0F4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FEB3E4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FEB3E4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FEAC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FEAE18(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FEB080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FEB0F4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FEAE18(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FEB370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FEB3E4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FEB0F4(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FEB65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FEC204((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FEC4E0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FEC7D0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FEC7D0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FEC018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FEC204(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FEC46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FEC4E0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FEC204(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FEC75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FEC7D0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FEC4E0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FECA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  char *DataSpan;
  char *v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void *exception;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v105;
  char *__p;
  char *v107;
  char *v108;
  char *v109;
  E5RT::TensorDataType::Impl *v110[2];
  _QWORD v111[3];
  _QWORD v112[3];
  _QWORD v113[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v110, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v110);
  ElementSize = E5RT::TensorDataType::GetElementSize(v110);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v105 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_35;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_37;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_36;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        v60 = v20[v19];
        v61 = v26 * NumComponents;
        v62 = v23[v19];
        if (NumElements / v26 <= 1)
          v63 = 1;
        else
          v63 = NumElements / v26;
        do
        {
          memcpy(v12, DataSpan, v61);
          DataSpan += v60;
          v12 += v62;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    v52 = *(_QWORD *)(v25 + 8 * v19);
    v53 = v52 * v28;
    v54 = v30 * v52;
    v55 = Rank - 3;
    while (1)
    {
      v56 = v20[v55];
      v57 = v56 - v53;
      v58 = v23[v55];
      if (v57 != v58 - v54)
        break;
      v59 = *(_QWORD *)(v25 + 8 * v55);
      v54 = v58 * v59;
      v53 = v59 * v56;
      v33 = v55-- <= 0;
      if (v33)
        goto LABEL_27;
    }
    if (v21 < 1)
      goto LABEL_36;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_37:
    v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_36;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        memcpy(v12, DataSpan, v49);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_35:
  if (Rank)
    goto LABEL_36;
  v64 = 0;
LABEL_41:
  v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v67 = *(const void **)v65;
  v66 = *(_QWORD *)(v65 + 8);
  v68 = v66 - *(_QWORD *)v65;
  if (v66 == *(_QWORD *)v65)
  {
    __p = 0;
    v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v113, 2, v111);
      E5RT::E5RTError::E5RTError(exception, v112, v113);
    }
  }
  else
  {
    if (v68 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = (char *)operator new(v66 - *(_QWORD *)v65);
    v70 = &v69[8 * (v68 >> 3)];
    __p = v69;
    v107 = v69;
    v109 = v70;
    memcpy(v69, v67, v68);
    v108 = v70;
  }
  switch(Rank)
  {
    case 0uLL:
      v112[0] = v12;
      v111[0] = DataSpan;
      v113[0] = NumComponents;
      v71 = *(_QWORD *)(a5 + 24);
      if (!v71)
        goto LABEL_89;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v71 + 48))(v71, v112, v111, v113);
LABEL_52:
      if (__p)
        break;
      goto LABEL_54;
    case 1uLL:
      if (v70 - __p <= 7)
      {
        v98 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v113, 1, v111);
        E5RT::E5RTError::E5RTError(v98, v112, v113);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v105 == **v18 * *(_QWORD *)__p)
      {
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = NumElements * NumComponents;
        v92 = *(_QWORD *)(a5 + 24);
        if (!v92)
          goto LABEL_89;
        goto LABEL_82;
      }
      v74 = ((v70 - __p) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        v93 = *(_QWORD *)&__p[8 * v74] * NumComponents;
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = v93;
        v92 = *(_QWORD *)(a5 + 24);
        if (!v92)
          goto LABEL_89;
        goto LABEL_82;
      }
      if (*(_QWORD *)&__p[8 * v74])
      {
        v75 = 0;
        v76 = *(_QWORD *)(*TensorStrides + 8 * v74);
        v77 = (*v18)[v74];
        while (1)
        {
          v112[0] = v12;
          v111[0] = DataSpan;
          v113[0] = NumComponents;
          v78 = *(_QWORD *)(a5 + 24);
          if (!v78)
            goto LABEL_89;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v78 + 48))(v78, v112, v111, v113);
          DataSpan += v76;
          v12 += v77;
          if ((unint64_t)++v75 >= *(_QWORD *)&__p[8 * v74])
            goto LABEL_53;
        }
      }
      break;
    case 2uLL:
      sub_190FED528((_QWORD *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_190FED804(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_190FEDAF4(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      v79 = v70 - __p;
      if (v70 - __p <= 39)
      {
        v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v113, 1, v111);
        E5RT::E5RTError::E5RTError(v99, v112, v113);
      }
      v80 = (_QWORD *)*TensorStrides;
      v81 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v105 == **v18 * *(_QWORD *)__p)
      {
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = NumElements * NumComponents;
        v92 = *(_QWORD *)(a5 + 24);
        if (!v92)
          goto LABEL_89;
LABEL_82:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v92 + 48))(v92, v112, v111, v113);
      }
      else
      {
        v83 = v79 >> 3;
        v84 = (v79 >> 3) - 5;
        v85 = (v79 >> 3) - 1;
        v86 = *(_QWORD *)&__p[8 * v84];
        if (*(_QWORD *)&__p[8 * v83 - 24]
           * *(_QWORD *)&__p[8 * v83 - 32]
           * *(_QWORD *)&__p[8 * v83 - 16]
           * *(_QWORD *)&__p[8 * v85] == 1)
        {
          if (v86)
          {
            v87 = 0;
            v88 = v85;
            v89 = v80[v88];
            v90 = v81[v88];
            while (1)
            {
              v112[0] = v12;
              v111[0] = DataSpan;
              v113[0] = NumComponents;
              v91 = *(_QWORD *)(a5 + 24);
              if (!v91)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v91 + 48))(v91, v112, v111, v113);
              DataSpan += v89;
              v12 += v90;
              if ((unint64_t)++v87 >= *(_QWORD *)&__p[8 * v84])
                goto LABEL_53;
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v100 = v84;
          v101 = *(_QWORD *)&__p[8 * v84];
          v94 = v80[v84];
          v95 = v81[v84];
          *(_QWORD *)&__p[8 * v84] = 1;
          if (v86)
          {
            v96 = v86;
            v97 = NumElements / v86;
            do
            {
              sub_190FEDAF4(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, v97, v64, a5);
              DataSpan += v94;
              v12 += v95;
              --v96;
            }
            while (v96);
          }
          *(_QWORD *)&__p[8 * v100] = v101;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(__p);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v110);
}

void sub_190FED38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a19;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a19;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FED528(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FED790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FED804(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FED528(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FEDA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FEDAF4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FED804(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FEDD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FEE914((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FEEBF0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FEEEE0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FEEEE0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FEE728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FEE914(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FEEB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FEEBF0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FEE914(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FEEE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FEEEE0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FEEBF0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FEF158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FEFD00((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FEFFDC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FF02CC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FF02CC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FEFB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FEFD00(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FEFF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FEFFDC(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FEFD00(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FF0258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FF02CC(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FEFFDC(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FF0544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_aEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FF10EC((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FF13C8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FF16B8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FF16B8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FF0F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FF10EC(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FF1354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FF13C8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FF10EC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FF1644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FF16B8(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FF13C8(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FF1930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FF24D8((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FF27B4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FF2AA4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FF2AA4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FF22EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FF24D8(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FF2740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FF27B4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FF24D8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FF2A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FF2AA4(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FF27B4(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FF2D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FF38C4((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FF3BA0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FF3E90(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FF3E90(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FF36D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FF38C4(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FF3B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FF3BA0(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FF38C4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FF3E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FF3E90(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FF3BA0(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FF4108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FF4CB0((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FF4F8C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FF527C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FF527C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FF4AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FF4CB0(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FF4F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FF4F8C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FF4CB0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FF5208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FF527C(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FF4F8C(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FF54F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FF609C((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FF6378(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FF6668(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FF6668(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FF5EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FF609C(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FF6304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FF6378(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FF609C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FF65F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FF6668(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FF6378(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FF68E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  uint64_t DataSpan;
  uint64_t v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *exception;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v106;
  char *__p;
  _QWORD *v109;
  char *v110;
  char *v111;
  E5RT::TensorDataType::Impl *v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v106 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_37;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_39;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_38;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        v61 = v20[v19];
        v62 = v26 * NumComponents;
        v63 = v23[v19];
        if (NumElements / v26 <= 1)
          v64 = 1;
        else
          v64 = NumElements / v26;
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (_QWORD *)v62;
          v65 = *(_QWORD *)(a5 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    v53 = *(_QWORD *)(v25 + 8 * v19);
    v54 = v53 * v28;
    v55 = v30 * v53;
    v56 = Rank - 3;
    while (1)
    {
      v57 = v20[v56];
      v58 = v57 - v54;
      v59 = v23[v56];
      if (v58 != v59 - v55)
        break;
      v60 = *(_QWORD *)(v25 + 8 * v56);
      v55 = v59 * v60;
      v54 = v60 * v57;
      v33 = v56-- <= 0;
      if (v33)
        goto LABEL_28;
    }
    if (v21 < 1)
      goto LABEL_38;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_39:
    v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_38;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (_QWORD *)v49;
        v52 = *(_QWORD *)(a5 + 24);
        if (!v52)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_37:
  if (Rank)
    goto LABEL_38;
  v66 = 0;
LABEL_43:
  v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  v68 = *(_QWORD *)(v67 + 8);
  v70 = v68 - *(_QWORD *)v67;
  if (v68 == *(_QWORD *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v71 = operator new(v68 - *(_QWORD *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      v73 = *(_QWORD *)(a5 + 24);
      if (!v73)
        goto LABEL_91;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p)
        break;
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        v95 = *(_QWORD *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
        goto LABEL_84;
      }
      if (*(_QWORD *)&__p[8 * v76])
      {
        v77 = 0;
        v78 = *(_QWORD *)(*TensorStrides + 8 * v76);
        v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          v80 = *(_QWORD *)(a5 + 24);
          if (!v80)
            goto LABEL_91;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(_QWORD *)&__p[8 * v76])
            goto LABEL_55;
        }
      }
      break;
    case 2uLL:
      sub_190FF7488((_QWORD *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_190FF7764(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_190FF7A54(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (_QWORD *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v106 == **v18 * *(_QWORD *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        v94 = *(_QWORD *)(a5 + 24);
        if (!v94)
          goto LABEL_91;
LABEL_84:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        v85 = v81 >> 3;
        v86 = (v81 >> 3) - 5;
        v87 = (v81 >> 3) - 1;
        v88 = *(_QWORD *)&__p[8 * v86];
        if (*(_QWORD *)&__p[8 * v85 - 24]
           * *(_QWORD *)&__p[8 * v85 - 32]
           * *(_QWORD *)&__p[8 * v85 - 16]
           * *(_QWORD *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            v89 = 0;
            v90 = v87;
            v91 = v82[v90];
            v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              v93 = *(_QWORD *)(a5 + 24);
              if (!v93)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(_QWORD *)&__p[8 * v86])
                goto LABEL_55;
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v102 = v86;
          v103 = *(_QWORD *)&__p[8 * v86];
          v96 = v82[v86];
          v97 = v83[v86];
          *(_QWORD *)&__p[8 * v86] = 1;
          if (v88)
          {
            v98 = v88;
            v99 = NumElements / v88;
            do
            {
              sub_190FF7A54(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(_QWORD *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_190FF729C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a18;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FF7488(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FF76F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FF7764(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FF7488(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FF79E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FF7A54(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FF7764(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FF7CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank;
  uint64_t *TensorShape;
  char *DataSpan;
  char *v12;
  const E5RT::TensorDataType *TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v15;
  unsigned int v16;
  _QWORD *TensorStrides;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void *exception;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t NumElements;
  unsigned int NumComponents;
  uint64_t v105;
  char *__p;
  char *v107;
  char *v108;
  char *v109;
  E5RT::TensorDataType::Impl *v110[2];
  _QWORD v111[3];
  _QWORD v112[3];
  _QWORD v113[2];

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v110, TensorDataTypeRef);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v110);
  ElementSize = E5RT::TensorDataType::GetElementSize(v110);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  v18 = (_QWORD **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  v105 = v16;
  v19 = Rank - 2;
  if (Rank < 2)
    goto LABEL_35;
  v20 = (_QWORD *)*TensorStrides;
  v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0)
    goto LABEL_37;
  v22 = v20[v21];
  v23 = *v18;
  v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16)
    goto LABEL_36;
  v25 = *TensorShape;
  v26 = *(_QWORD *)(*TensorShape + 8 * v21);
  v27 = v26 * v22;
  v28 = v20[v19];
  v29 = v24 * v26;
  v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        v60 = v20[v19];
        v61 = v26 * NumComponents;
        v62 = v23[v19];
        if (NumElements / v26 <= 1)
          v63 = 1;
        else
          v63 = NumElements / v26;
        do
        {
          memcpy(v12, DataSpan, v61);
          DataSpan += v60;
          v12 += v62;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    v52 = *(_QWORD *)(v25 + 8 * v19);
    v53 = v52 * v28;
    v54 = v30 * v52;
    v55 = Rank - 3;
    while (1)
    {
      v56 = v20[v55];
      v57 = v56 - v53;
      v58 = v23[v55];
      if (v57 != v58 - v54)
        break;
      v59 = *(_QWORD *)(v25 + 8 * v55);
      v54 = v58 * v59;
      v53 = v59 * v56;
      v33 = v55-- <= 0;
      if (v33)
        goto LABEL_27;
    }
    if (v21 < 1)
      goto LABEL_36;
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (_QWORD *)*TensorStrides;
    v21 = Rank - 1;
LABEL_37:
    v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  v31 = v20[v19];
  v32 = v23[v19];
  v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v25 + 8 * v19);
  v35 = Rank - 3;
  v36 = v20[v35];
  v37 = v36 - v34 * v31;
  v38 = v23[v35];
  if (v37 == v38 - v32 * v34)
    goto LABEL_36;
  if (Rank == 3)
  {
LABEL_16:
    v47 = *(_QWORD *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      v48 = v20[v35];
      v49 = v47 * NumComponents;
      v50 = v23[v35];
      if (NumElements / v47 <= 1)
        v51 = 1;
      else
        v51 = NumElements / v47;
      do
      {
        memcpy(v12, DataSpan, v49);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  v39 = *(_QWORD *)(v25 + v35 * 8);
  v40 = v39 * v36;
  v41 = v38 * v39;
  v42 = Rank - 4;
  while (1)
  {
    v43 = v20[v42];
    v44 = v43 - v40;
    v45 = v23[v42];
    if (v44 != v45 - v41)
      break;
    v46 = *(_QWORD *)(v25 + 8 * v42);
    v41 = v45 * v46;
    v40 = v46 * v43;
    v33 = v42-- <= 0;
    if (v33)
      goto LABEL_16;
  }
LABEL_35:
  if (Rank)
    goto LABEL_36;
  v64 = 0;
LABEL_41:
  v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v67 = *(const void **)v65;
  v66 = *(_QWORD *)(v65 + 8);
  v68 = v66 - *(_QWORD *)v65;
  if (v66 == *(_QWORD *)v65)
  {
    __p = 0;
    v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v113, 2, v111);
      E5RT::E5RTError::E5RTError(exception, v112, v113);
    }
  }
  else
  {
    if (v68 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = (char *)operator new(v66 - *(_QWORD *)v65);
    v70 = &v69[8 * (v68 >> 3)];
    __p = v69;
    v107 = v69;
    v109 = v70;
    memcpy(v69, v67, v68);
    v108 = v70;
  }
  switch(Rank)
  {
    case 0uLL:
      v112[0] = v12;
      v111[0] = DataSpan;
      v113[0] = NumComponents;
      v71 = *(_QWORD *)(a5 + 24);
      if (!v71)
        goto LABEL_89;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v71 + 48))(v71, v112, v111, v113);
LABEL_52:
      if (__p)
        break;
      goto LABEL_54;
    case 1uLL:
      if (v70 - __p <= 7)
      {
        v98 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v113, 1, v111);
        E5RT::E5RTError::E5RTError(v98, v112, v113);
      }
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v105 == **v18 * *(_QWORD *)__p)
      {
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = NumElements * NumComponents;
        v92 = *(_QWORD *)(a5 + 24);
        if (!v92)
          goto LABEL_89;
        goto LABEL_82;
      }
      v74 = ((v70 - __p) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        v93 = *(_QWORD *)&__p[8 * v74] * NumComponents;
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = v93;
        v92 = *(_QWORD *)(a5 + 24);
        if (!v92)
          goto LABEL_89;
        goto LABEL_82;
      }
      if (*(_QWORD *)&__p[8 * v74])
      {
        v75 = 0;
        v76 = *(_QWORD *)(*TensorStrides + 8 * v74);
        v77 = (*v18)[v74];
        while (1)
        {
          v112[0] = v12;
          v111[0] = DataSpan;
          v113[0] = NumComponents;
          v78 = *(_QWORD *)(a5 + 24);
          if (!v78)
            goto LABEL_89;
          (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v78 + 48))(v78, v112, v111, v113);
          DataSpan += v76;
          v12 += v77;
          if ((unint64_t)++v75 >= *(_QWORD *)&__p[8 * v74])
            goto LABEL_53;
        }
      }
      break;
    case 2uLL:
      sub_190FF87AC((_QWORD *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_190FF8A88(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_190FF8D78(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      v79 = v70 - __p;
      if (v70 - __p <= 39)
      {
        v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v113, 1, v111);
        E5RT::E5RTError::E5RTError(v99, v112, v113);
      }
      v80 = (_QWORD *)*TensorStrides;
      v81 = *v18;
      if (NumElements * ElementSize == *(_QWORD *)*TensorStrides * *(_QWORD *)__p
        && NumElements * v105 == **v18 * *(_QWORD *)__p)
      {
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = NumElements * NumComponents;
        v92 = *(_QWORD *)(a5 + 24);
        if (!v92)
          goto LABEL_89;
LABEL_82:
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v92 + 48))(v92, v112, v111, v113);
      }
      else
      {
        v83 = v79 >> 3;
        v84 = (v79 >> 3) - 5;
        v85 = (v79 >> 3) - 1;
        v86 = *(_QWORD *)&__p[8 * v84];
        if (*(_QWORD *)&__p[8 * v83 - 24]
           * *(_QWORD *)&__p[8 * v83 - 32]
           * *(_QWORD *)&__p[8 * v83 - 16]
           * *(_QWORD *)&__p[8 * v85] == 1)
        {
          if (v86)
          {
            v87 = 0;
            v88 = v85;
            v89 = v80[v88];
            v90 = v81[v88];
            while (1)
            {
              v112[0] = v12;
              v111[0] = DataSpan;
              v113[0] = NumComponents;
              v91 = *(_QWORD *)(a5 + 24);
              if (!v91)
                break;
              (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v91 + 48))(v91, v112, v111, v113);
              DataSpan += v89;
              v12 += v90;
              if ((unint64_t)++v87 >= *(_QWORD *)&__p[8 * v84])
                goto LABEL_53;
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          v100 = v84;
          v101 = *(_QWORD *)&__p[8 * v84];
          v94 = v80[v84];
          v95 = v81[v84];
          *(_QWORD *)&__p[8 * v84] = 1;
          if (v86)
          {
            v96 = v86;
            v97 = NumElements / v86;
            do
            {
              sub_190FF8D78(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, v97, v64, a5);
              DataSpan += v94;
              v12 += v95;
              --v96;
            }
            while (v96);
          }
          *(_QWORD *)&__p[8 * v100] = v101;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(__p);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v110);
}

void sub_190FF8610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a19;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34)
        operator delete(v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a19;
    if (!v31)
      goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

_QWORD *sub_190FF87AC(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *exception;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;

  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  v13 = a4;
  v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    v41 = a6 * a9;
    v29 = *(_QWORD *)(a11 + 24);
    if (v29)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v40, v39, &v41);
    goto LABEL_24;
  }
  v16 = v12 >> 3;
  v17 = v16 - 1;
  v18 = v16 - 2;
  v38 = result[v18];
  v37 = a3[v18];
  v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19)
      return result;
    v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      v41 = v30;
      v31 = *(_QWORD *)(a11 + 24);
      if (!v31)
        break;
      v32 = v19;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      v19 = v32 - 1;
      if (v32 == 1)
        return result;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    v21 = 0;
    v22 = result[v17];
    v23 = a3[v17];
    v24 = a6;
    v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        v25 = 0;
        v26 = v13 + v21 * v37;
        v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          v41 = v24;
          v28 = *(_QWORD *)(a11 + 24);
          if (!v28)
            goto LABEL_24;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(_QWORD **)a5;
        }
        while (v25 < *(_QWORD *)(*(_QWORD *)a5 + 8 * v17));
        v14 = a2;
        v13 = a4;
        v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_190FF8A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

_QWORD *sub_190FF8A88(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  void *exception;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD v46[3];
  _QWORD v47[3];
  uint64_t v48;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  v14 = a4;
  v16 = a2;
  v17 = a11;
  v18 = (_QWORD *)*result;
  v19 = (uint64_t)*a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    v48 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    v21 = a5;
    v22 = v12 >> 3;
    v23 = (v12 >> 3) - 3;
    v24 = (v12 >> 3) - 1;
    v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        v26 = 0;
        v27 = v18[v24];
        v28 = *(_QWORD *)(v19 + 8 * v24);
        v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          v48 = v29;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(_QWORD *)(*v21 + 8 * v23))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v43 = v23;
      v32 = v23;
      v33 = v18[v23];
      v34 = *(_QWORD *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        v35 = v25;
        v42 = v25;
        v44 = a9 / v25;
        v45 = (_QWORD **)result;
        do
        {
          v41 = v17;
          v36 = (uint64_t)v21;
          v37 = a6;
          v38 = (_QWORD **)v21;
          v39 = a8;
          result = sub_190FF87AC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          v21 = v38;
          a6 = v37;
          v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_190FF8D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

_QWORD *sub_190FF8D78(_QWORD *result, uint64_t a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *exception;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;

  v11 = (_QWORD *)*a5;
  v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v45, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v47, 1, v45);
    E5RT::E5RTError::E5RTError(exception, v46, &v47);
  }
  v15 = a4;
  v16 = a2;
  v17 = result;
  v18 = a11;
  v19 = (_QWORD *)*result;
  v20 = *a3;
  if (a9 * a7 == *(_QWORD *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v46[0] = a4;
    v45[0] = a2;
    v47 = a6 * a9;
    v31 = *(_QWORD *)(a11 + 24);
    if (!v31)
      goto LABEL_21;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, v46, v45, &v47);
  }
  else
  {
    v22 = a5;
    v23 = v12 >> 3;
    v24 = (v12 >> 3) - 4;
    v25 = (v12 >> 3) - 1;
    v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        v27 = 0;
        v28 = v19[v25];
        v29 = v20[v25];
        while (1)
        {
          v46[0] = v15;
          v45[0] = v16;
          v47 = a6;
          v30 = *(_QWORD *)(a11 + 24);
          if (!v30)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v46, v45, &v47);
          v16 += v28;
          v15 += v29;
          if ((unint64_t)++v27 >= *(_QWORD *)(*v22 + 8 * v24))
            return result;
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      v42 = v24;
      v32 = v24;
      v33 = v19[v24];
      v34 = v20[v32];
      v11[v32] = 1;
      if (v26)
      {
        v35 = v26;
        v41 = v26;
        v43 = a9 / v26;
        do
        {
          v40 = v18;
          v36 = a3;
          v37 = v22;
          v38 = a8;
          result = sub_190FF8A88(v17, v16, a3, v15, v37, a6, a7, a8, v43, a10, v40);
          a3 = v36;
          a8 = v38;
          v22 = a5;
          v18 = a11;
          v16 += v33;
          v15 += v34;
          --v35;
        }
        while (v35);
        v11 = (_QWORD *)*a5;
        v26 = v41;
      }
      v11[v42] = v26;
    }
  }
  return result;
}

void sub_190FF8FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

unint64_t E5RT::TensorElementAt<float>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan;
  uint64_t ByteOffset;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  DataSpan = E5RT::BufferObject::GetDataSpan(this);
  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_190FF914C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

float E5RT::TensorElementAt<float>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(float *)E5RT::TensorElementAt<float>(a1, a2, a3, a4);
}

unint64_t _ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan;
  uint64_t ByteOffset;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  DataSpan = E5RT::BufferObject::GetDataSpan(this);
  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_190FF92C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

__int16 _ZN4E5RT15TensorElementAtIDF16_EET_RKNS_16TensorDescriptorERKNSt3__16vectorImNS5_9allocatorImEEEEhRKNS_12BufferObjectE@<H0>(E5RT::TensorDescriptor *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, E5RT::BufferObject *a4@<X3>)
{
  return *(_WORD *)_ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<unsigned char>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan;
  uint64_t ByteOffset;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  DataSpan = E5RT::BufferObject::GetDataSpan(this);
  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_190FF9434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<unsigned char>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(unsigned __int8 *)E5RT::TensorElementAt<unsigned char>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<signed char>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan;
  uint64_t ByteOffset;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  DataSpan = E5RT::BufferObject::GetDataSpan(this);
  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_190FF95A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<signed char>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(char *)E5RT::TensorElementAt<signed char>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<unsigned short>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan;
  uint64_t ByteOffset;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  DataSpan = E5RT::BufferObject::GetDataSpan(this);
  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_190FF971C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<unsigned short>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(unsigned __int16 *)E5RT::TensorElementAt<unsigned short>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<short>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan;
  uint64_t ByteOffset;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  DataSpan = E5RT::BufferObject::GetDataSpan(this);
  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_190FF9890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<short>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(__int16 *)E5RT::TensorElementAt<short>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<unsigned int>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan;
  uint64_t ByteOffset;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  DataSpan = E5RT::BufferObject::GetDataSpan(this);
  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_190FF9A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<unsigned int>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(unsigned int *)E5RT::TensorElementAt<unsigned int>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<int>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan;
  uint64_t ByteOffset;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  DataSpan = E5RT::BufferObject::GetDataSpan(this);
  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_190FF9B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<int>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(unsigned int *)E5RT::TensorElementAt<int>(a1, a2, a3, a4);
}

void E5RT::CopyTensorFromSrcToDest(E5RT *this, const E5RT::TensorDescriptor *a2, const E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, E5RT::BufferObject *a5)
{
  uint64_t TensorShape;
  uint64_t v10;
  size_t v11;
  uint64_t TensorDataTypeRef;
  uint64_t v13;
  unint64_t Rank;
  unint64_t v15;
  char *v16;
  char *v17;
  size_t Size;
  int64_t v19;
  unint64_t v20;
  _QWORD *TensorStrides;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  void *v27;
  char *v28;
  unint64_t v29;
  E5RT::TensorDimension *v30;
  uint64_t Length;
  E5RT::TensorDimension *v32;
  uint64_t Stride;
  void *exception;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  char *v39;
  char *v40;
  _QWORD v41[3];
  char v42[8];
  void *__p;
  void *v44;
  uint64_t v45;

  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v10 = E5RT::TensorDescriptor::GetTensorShape(a3);
  v11 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v11 != *(_QWORD *)(v10 + 8) - *(_QWORD *)v10 || memcmp(*(const void **)TensorShape, *(const void **)v10, v11))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CopyTensorFromSrcToDest");
    std::string::basic_string[abi:ne180100]<0>(v41, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(&v38, 1, v41);
    E5RT::E5RTError::E5RTError(exception, &__p, &v38);
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::operator!=(TensorDataTypeRef, v13))
  {
    v35 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CopyTensorFromSrcToDest");
    std::string::basic_string[abi:ne180100]<0>(v41, "Src and Dst tensor data types must be identical.");
    E5RT::Status::Status(&v38, 1, v41);
    E5RT::E5RTError::E5RTError(v35, &__p, &v38);
  }
  Rank = E5RT::TensorDescriptor::GetRank(this);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  if (Rank)
  {
    v15 = Rank;
    if (Rank >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v16 = (char *)operator new(8 * Rank);
    v17 = &v16[8 * v15];
    v38 = v16;
    v40 = v17;
    bzero(v16, 8 * v15);
    v39 = v17;
    switch(v15)
    {
      case 1uLL:
        sub_190FFA3C4(this, a2, a3, a4, (uint64_t *)&v38);
        goto LABEL_20;
      case 2uLL:
        sub_190FFA698(this, a2, a3, a4, (uint64_t *)&v38);
        goto LABEL_20;
      case 3uLL:
        sub_190FFA95C(this, a2, a3, a4, (uint64_t *)&v38);
        goto LABEL_20;
      case 4uLL:
        sub_190FFAC20(this, a2, a3, a4, (uint64_t *)&v38);
        goto LABEL_20;
      case 5uLL:
        v19 = E5RT::TensorDescriptor::GetRank(this) - 5;
        if (v19 < 0)
        {
          v36 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "CopyTensorFromSrcToDestRecursive");
          std::string::basic_string[abi:ne180100]<0>(v41, "Tensor rank is less than dimension provided.");
          E5RT::Status::Status(v42, 1, v41);
          E5RT::E5RTError::E5RTError(v36, &__p, v42);
        }
        v20 = E5RT::TensorDescriptor::GetRank(this);
        if (v20 == E5RT::TensorDescriptor::GetRank(a3))
        {
          TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(this);
          v22 = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a3);
          if (!memcmp((const void *)(*TensorStrides + 8 * v19), (const void *)(*v22 + 8 * v19), 8 * (v20 - v19)))
          {
            v30 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)this, v19);
            Length = E5RT::TensorDimension::GetLength(v30);
            v32 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)this, v19);
            Stride = E5RT::TensorDimension::GetStride(v32);
            sub_190FFA2AC((uint64_t)this, a2, (uint64_t)a3, a4, (uint64_t *)&v38, Stride * Length);
            goto LABEL_20;
          }
        }
        v23 = E5RT::TensorDescriptor::GetTensorShape(this);
        __p = 0;
        v44 = 0;
        v45 = 0;
        v25 = *(const void **)v23;
        v24 = *(_QWORD *)(v23 + 8);
        v26 = v24 - *(_QWORD *)v23;
        if (v24 == *(_QWORD *)v23)
        {
          v27 = 0;
          if (!*(_QWORD *)(8 * v19))
            goto LABEL_26;
        }
        else
        {
          if ((v26 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v27 = operator new(v24 - *(_QWORD *)v23);
          memcpy(v27, v25, v26);
          if (!*((_QWORD *)v27 + v19))
          {
LABEL_26:
            operator delete(v27);
            v28 = (char *)v38;
            if (v38)
              goto LABEL_21;
            return;
          }
        }
        v29 = 0;
        do
        {
          *((_QWORD *)v38 + v19) = v29;
          sub_190FFAC20(this, a2, a3, a4, (uint64_t *)&v38);
          ++v29;
        }
        while (v29 < *((_QWORD *)v27 + v19));
        goto LABEL_26;
      default:
        v37 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "CopyTensorFromSrcToDest");
        std::string::basic_string[abi:ne180100]<0>(v41, "Tensor rank must be betweeen 0 and 5.");
        E5RT::Status::Status(v42, 2, v41);
        E5RT::E5RTError::E5RTError(v37, &__p, v42);
    }
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  Size = E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)this);
  sub_190FFA2AC((uint64_t)this, a2, (uint64_t)a3, a4, (uint64_t *)&__p, Size);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  else
  {
LABEL_20:
    v28 = (char *)v38;
    if (v38)
    {
LABEL_21:
      v39 = v28;
      operator delete(v28);
    }
  }
}

void sub_190FFA0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v25)
  {
LABEL_8:
    if (a9)
    {
      operator delete(a9);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void sub_190FFA25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v21);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_190FFA284(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_190FFA2AC(uint64_t a1, E5RT::BufferObject *a2, uint64_t a3, E5RT::BufferObject *a4, uint64_t *a5, size_t a6)
{
  unint64_t ByteOffset;
  unint64_t v12;
  uint64_t DataSpan;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::runtime_error *exception;

  ByteOffset = E5RT::TensorDescriptor::GetByteOffset(a1, a5);
  v12 = E5RT::TensorDescriptor::GetByteOffset(a3, a5);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  if (!a6
    || v14 <= ByteOffset
    || ByteOffset + a6 > v14
    || (v15 = DataSpan, v16 = E5RT::BufferObject::GetDataSpan(a4), v17 <= v12)
    || v12 + a6 > v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
  }
  return memmove((void *)(v16 + v12), (const void *)(v15 + ByteOffset), a6);
}

void sub_190FFA39C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_190FFA3B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_190FFA3C4(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5)
{
  int64_t v10;
  unint64_t Rank;
  unint64_t v12;
  _QWORD *TensorStrides;
  _QWORD *v14;
  uint64_t TensorShape;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDimension *v23;
  uint64_t Length;
  E5RT::TensorDimension *v25;
  uint64_t Stride;
  void *exception;
  _QWORD v28[3];
  _BYTE v29[8];
  _QWORD v30[3];

  v10 = E5RT::TensorDescriptor::GetRank(a1) - 1;
  if (v10 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "CopyTensorFromSrcToDestRecursive");
    std::string::basic_string[abi:ne180100]<0>(v28, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(exception, v30, v29);
  }
  Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank != E5RT::TensorDescriptor::GetRank(a3)
    || (v12 = Rank - v10,
        TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        v14 = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        memcmp((const void *)(*TensorStrides + 8 * v10), (const void *)(*v14 + 8 * v10), 8 * v12)))
  {
    TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
    memset(v30, 0, sizeof(v30));
    v17 = *(const void **)TensorShape;
    v16 = *(_QWORD *)(TensorShape + 8);
    v18 = v16 - *(_QWORD *)TensorShape;
    if (v16 == *(_QWORD *)TensorShape)
    {
      v19 = 0;
      if (!*(_QWORD *)(8 * v10))
      {
LABEL_11:
        operator delete(v19);
        return;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v19 = operator new(v16 - *(_QWORD *)TensorShape);
      memcpy(v19, v17, v18);
      if (!*((_QWORD *)v19 + v10))
        goto LABEL_11;
    }
    v20 = 0;
    do
    {
      *(_QWORD *)(*a5 + 8 * v10) = v20;
      TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
      ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
      sub_190FFA2AC((uint64_t)a1, a2, (uint64_t)a3, a4, a5, ElementSize);
      ++v20;
    }
    while (v20 < *((_QWORD *)v19 + v10));
    goto LABEL_11;
  }
  v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  Length = E5RT::TensorDimension::GetLength(v23);
  v25 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  Stride = E5RT::TensorDimension::GetStride(v25);
  sub_190FFA2AC((uint64_t)a1, a2, (uint64_t)a3, a4, a5, Stride * Length);
}

void sub_190FFA5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190FFA660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_190FFA698(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5)
{
  int64_t v10;
  unint64_t Rank;
  unint64_t v12;
  _QWORD *TensorStrides;
  _QWORD *v14;
  uint64_t TensorShape;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  E5RT::TensorDimension *v21;
  uint64_t Length;
  E5RT::TensorDimension *v23;
  uint64_t Stride;
  void *exception;
  _QWORD v26[3];
  _BYTE v27[8];
  _QWORD v28[3];

  v10 = E5RT::TensorDescriptor::GetRank(a1) - 2;
  if (v10 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, "CopyTensorFromSrcToDestRecursive");
    std::string::basic_string[abi:ne180100]<0>(v26, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(v27, 1, v26);
    E5RT::E5RTError::E5RTError(exception, v28, v27);
  }
  Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank != E5RT::TensorDescriptor::GetRank(a3)
    || (v12 = Rank - v10,
        TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        v14 = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        memcmp((const void *)(*TensorStrides + 8 * v10), (const void *)(*v14 + 8 * v10), 8 * v12)))
  {
    TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
    memset(v28, 0, sizeof(v28));
    v17 = *(const void **)TensorShape;
    v16 = *(_QWORD *)(TensorShape + 8);
    v18 = v16 - *(_QWORD *)TensorShape;
    if (v16 == *(_QWORD *)TensorShape)
    {
      v19 = 0;
      if (!*(_QWORD *)(8 * v10))
      {
LABEL_11:
        operator delete(v19);
        return;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v19 = operator new(v16 - *(_QWORD *)TensorShape);
      memcpy(v19, v17, v18);
      if (!*((_QWORD *)v19 + v10))
        goto LABEL_11;
    }
    v20 = 0;
    do
    {
      *(_QWORD *)(*a5 + 8 * v10) = v20;
      sub_190FFA3C4(a1, a2, a3, a4, a5);
      ++v20;
    }
    while (v20 < *((_QWORD *)v19 + v10));
    goto LABEL_11;
  }
  v21 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  Length = E5RT::TensorDimension::GetLength(v21);
  v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  Stride = E5RT::TensorDimension::GetStride(v23);
  sub_190FFA2AC((uint64_t)a1, a2, (uint64_t)a3, a4, a5, Stride * Length);
}

void sub_190FFA8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190FFA924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_190FFA95C(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5)
{
  int64_t v10;
  unint64_t Rank;
  unint64_t v12;
  _QWORD *TensorStrides;
  _QWORD *v14;
  uint64_t TensorShape;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  E5RT::TensorDimension *v21;
  uint64_t Length;
  E5RT::TensorDimension *v23;
  uint64_t Stride;
  void *exception;
  _QWORD v26[3];
  _BYTE v27[8];
  _QWORD v28[3];

  v10 = E5RT::TensorDescriptor::GetRank(a1) - 3;
  if (v10 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, "CopyTensorFromSrcToDestRecursive");
    std::string::basic_string[abi:ne180100]<0>(v26, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(v27, 1, v26);
    E5RT::E5RTError::E5RTError(exception, v28, v27);
  }
  Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank != E5RT::TensorDescriptor::GetRank(a3)
    || (v12 = Rank - v10,
        TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        v14 = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        memcmp((const void *)(*TensorStrides + 8 * v10), (const void *)(*v14 + 8 * v10), 8 * v12)))
  {
    TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
    memset(v28, 0, sizeof(v28));
    v17 = *(const void **)TensorShape;
    v16 = *(_QWORD *)(TensorShape + 8);
    v18 = v16 - *(_QWORD *)TensorShape;
    if (v16 == *(_QWORD *)TensorShape)
    {
      v19 = 0;
      if (!*(_QWORD *)(8 * v10))
      {
LABEL_11:
        operator delete(v19);
        return;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v19 = operator new(v16 - *(_QWORD *)TensorShape);
      memcpy(v19, v17, v18);
      if (!*((_QWORD *)v19 + v10))
        goto LABEL_11;
    }
    v20 = 0;
    do
    {
      *(_QWORD *)(*a5 + 8 * v10) = v20;
      sub_190FFA698(a1, a2, a3, a4, a5);
      ++v20;
    }
    while (v20 < *((_QWORD *)v19 + v10));
    goto LABEL_11;
  }
  v21 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  Length = E5RT::TensorDimension::GetLength(v21);
  v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  Stride = E5RT::TensorDimension::GetStride(v23);
  sub_190FFA2AC((uint64_t)a1, a2, (uint64_t)a3, a4, a5, Stride * Length);
}

void sub_190FFAB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190FFABE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_190FFAC20(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5)
{
  int64_t v10;
  unint64_t Rank;
  unint64_t v12;
  _QWORD *TensorStrides;
  _QWORD *v14;
  uint64_t TensorShape;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  E5RT::TensorDimension *v21;
  uint64_t Length;
  E5RT::TensorDimension *v23;
  uint64_t Stride;
  void *exception;
  _QWORD v26[3];
  _BYTE v27[8];
  _QWORD v28[3];

  v10 = E5RT::TensorDescriptor::GetRank(a1) - 4;
  if (v10 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, "CopyTensorFromSrcToDestRecursive");
    std::string::basic_string[abi:ne180100]<0>(v26, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(v27, 1, v26);
    E5RT::E5RTError::E5RTError(exception, v28, v27);
  }
  Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank != E5RT::TensorDescriptor::GetRank(a3)
    || (v12 = Rank - v10,
        TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        v14 = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        memcmp((const void *)(*TensorStrides + 8 * v10), (const void *)(*v14 + 8 * v10), 8 * v12)))
  {
    TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
    memset(v28, 0, sizeof(v28));
    v17 = *(const void **)TensorShape;
    v16 = *(_QWORD *)(TensorShape + 8);
    v18 = v16 - *(_QWORD *)TensorShape;
    if (v16 == *(_QWORD *)TensorShape)
    {
      v19 = 0;
      if (!*(_QWORD *)(8 * v10))
      {
LABEL_11:
        operator delete(v19);
        return;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v19 = operator new(v16 - *(_QWORD *)TensorShape);
      memcpy(v19, v17, v18);
      if (!*((_QWORD *)v19 + v10))
        goto LABEL_11;
    }
    v20 = 0;
    do
    {
      *(_QWORD *)(*a5 + 8 * v10) = v20;
      sub_190FFA95C(a1, a2, a3, a4, a5);
      ++v20;
    }
    while (v20 < *((_QWORD *)v19 + v10));
    goto LABEL_11;
  }
  v21 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  Length = E5RT::TensorDimension::GetLength(v21);
  v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  Stride = E5RT::TensorDimension::GetStride(v23);
  sub_190FFA2AC((uint64_t)a1, a2, (uint64_t)a3, a4, a5, Stride * Length);
}

void sub_190FFAE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190FFAEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t E5RT::AreTensorsEqual(E5RT *this, const E5RT::TensorDescriptor *a2, const E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, const E5RT::BufferObject *a5)
{
  uint64_t TensorShape;
  uint64_t v10;
  size_t v11;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  uint64_t v13;
  uint64_t v14;
  unint64_t Rank;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  unsigned int ElementSize;
  void *__p;
  void *v22;
  char *v23;

  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v10 = E5RT::TensorDescriptor::GetTensorShape(a3);
  v11 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v11 != *(_QWORD *)(v10 + 8) - *(_QWORD *)v10)
    return 0;
  if (memcmp(*(const void **)TensorShape, *(const void **)v10, v11))
    return 0;
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::operator!=((uint64_t)TensorDataTypeRef, v13))
    return 0;
  Rank = E5RT::TensorDescriptor::GetRank(this);
  if (Rank)
  {
    v17 = Rank;
    __p = 0;
    v22 = 0;
    v23 = 0;
    if (Rank >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v18 = 8 * Rank;
    __p = operator new(8 * Rank);
    v23 = (char *)__p + 8 * v17;
    bzero(__p, v18);
    v22 = v23;
    v19 = sub_190FFB630(this, a2, a3, a4, (uint64_t *)&__p, 0);
  }
  else
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
    v19 = sub_190FFB05C(this, a2, (uint64_t)a3, a4, (uint64_t *)&__p, ElementSize);
  }
  v14 = v19;
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_190FFB038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_190FFB05C(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, uint64_t a3, E5RT::BufferObject *a4, uint64_t *a5, unint64_t a6)
{
  unint64_t ByteOffset;
  unint64_t v13;
  uint64_t DataSpan;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int16 *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  _BOOL8 v31;
  char *v33;
  unint64_t v34;
  unsigned int v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v42;
  __int16 v43;
  __int16 v49;
  float v52;
  float v53;
  float v54;
  float v55;
  BOOL v56;
  unint64_t v57;
  int v58;
  float v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  char *v69;
  uint64_t v70;
  unsigned int v71;
  float v72;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  char *v78;
  uint64_t v79;
  int v80;
  float v81;
  int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  BOOL v89;
  unsigned int *v90;
  uint64_t v91;
  unsigned int v92;
  float v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  BOOL v98;
  int *v99;
  uint64_t v100;
  int v101;
  float v102;
  int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  BOOL v108;
  std::runtime_error *exception;
  void *v110;
  _BYTE v111[16];
  _QWORD v112[3];
  char v113[8];
  _QWORD v114[3];

  ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a5);
  v13 = E5RT::TensorDescriptor::GetByteOffset(a3, a5);
  DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  if (!a6
    || v15 <= ByteOffset
    || ByteOffset + a6 > v15
    || (v16 = DataSpan, v17 = E5RT::BufferObject::GetDataSpan(a4), v18 <= v13)
    || v13 + a6 > v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
  }
  v19 = v17;
  E5RT::TensorDescriptor::GetTensorDataType(a1, (E5RT::TensorDataType *)v111);
  v20 = (char *)(v16 + ByteOffset);
  v21 = (__int16 *)(v19 + v13);
  if (E5RT::TensorDataType::IsType<float>((uint64_t)v111))
  {
    if (a6 >= 4)
      v22 = (float *)v20;
    else
      v22 = 0;
    if (a6 >= 4)
    {
      v23 = 4 * (a6 >> 2) - 4;
      do
      {
        v24 = *v22++;
        v25 = v24;
        v26 = *(float *)v21;
        v21 += 2;
        v27 = vabds_f32(v25, v26);
        v28 = fabsf(v25);
        v29 = fabsf(v26);
        if (v28 < v29)
          v28 = v29;
        v30 = v28 * 0.001;
        if (v30 < 0.001)
          v30 = 0.001;
        v31 = v27 <= v30;
        _ZF = v27 > v30 || v23 == 0;
        v23 -= 4;
      }
      while (!_ZF);
      goto LABEL_63;
    }
LABEL_27:
    v31 = 1;
    goto LABEL_63;
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v111))
  {
    if (a6 >= 2)
      v33 = v20;
    else
      v33 = 0;
    if (a6 < 2)
      goto LABEL_27;
    v42 = 2 * (a6 >> 1) - 2;
    do
    {
      v43 = *(_WORD *)v33;
      v33 += 2;
      _H0 = v43;
      __asm { FCVT            S0, H0 }
      v49 = *v21++;
      _H1 = v49;
      __asm { FCVT            S1, H1 }
      v52 = vabds_f32(_S0, _S1);
      v53 = fabsf(_S0);
      v54 = fabsf(_S1);
      if (v53 < v54)
        v53 = v54;
      v55 = v53 * 0.001;
      if (v55 < 0.001)
        v55 = 0.001;
      v31 = v52 <= v55;
      v56 = v52 > v55 || v42 == 0;
      v42 -= 2;
    }
    while (!v56);
  }
  else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v111))
  {
    v34 = a6 - 1;
    do
    {
      v35 = *v20++;
      v36 = (float)v35;
      v37 = *(unsigned __int8 *)v21;
      v21 = (__int16 *)((char *)v21 + 1);
      v38 = (float)v37;
      v39 = vabds_f32(v36, (float)v37);
      if (v36 < (float)v37)
        v36 = v38;
      v40 = v36 * 0.001;
      if (v40 < 0.001)
        v40 = 0.001;
      v31 = v39 <= v40;
    }
    while (v39 <= v40 && v34-- != 0);
  }
  else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v111))
  {
    v57 = a6 - 1;
    do
    {
      v58 = *v20++;
      v59 = (float)v58;
      v60 = *(char *)v21;
      v21 = (__int16 *)((char *)v21 + 1);
      v61 = (float)v60;
      v62 = fabsf(v59);
      v63 = fabsf((float)v60);
      if (v62 < v63)
        v62 = v63;
      v64 = v62 * 0.001;
      v65 = vabds_f32(v59, v61);
      if (v64 >= 0.001)
        v66 = v64;
      else
        v66 = 0.001;
      v31 = v65 <= v66;
    }
    while (v65 <= v66 && v57-- != 0);
  }
  else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v111))
  {
    if (a6 >= 2)
      v69 = v20;
    else
      v69 = 0;
    if (a6 < 2)
      goto LABEL_27;
    v70 = 2 * (a6 >> 1) - 2;
    do
    {
      v71 = *(unsigned __int16 *)v69;
      v69 += 2;
      v72 = (float)v71;
      v73 = (unsigned __int16)*v21++;
      v74 = (float)v73;
      v75 = vabds_f32(v72, (float)v73);
      if (v72 < (float)v73)
        v72 = v74;
      v76 = v72 * 0.001;
      if (v76 < 0.001)
        v76 = 0.001;
      v31 = v75 <= v76;
      v77 = v75 > v76 || v70 == 0;
      v70 -= 2;
    }
    while (!v77);
  }
  else if (E5RT::TensorDataType::IsType<short>((uint64_t)v111))
  {
    if (a6 >= 2)
      v78 = v20;
    else
      v78 = 0;
    if (a6 < 2)
      goto LABEL_27;
    v79 = 2 * (a6 >> 1) - 2;
    do
    {
      v80 = *(__int16 *)v78;
      v78 += 2;
      v81 = (float)v80;
      v82 = *v21++;
      v83 = (float)v82;
      v84 = fabsf(v81);
      v85 = fabsf((float)v82);
      if (v84 < v85)
        v84 = v85;
      v86 = v84 * 0.001;
      v87 = vabds_f32(v81, v83);
      if (v86 >= 0.001)
        v88 = v86;
      else
        v88 = 0.001;
      v31 = v87 <= v88;
      v89 = v87 > v88 || v79 == 0;
      v79 -= 2;
    }
    while (!v89);
  }
  else if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v111))
  {
    if (a6 >= 4)
      v90 = (unsigned int *)v20;
    else
      v90 = 0;
    if (a6 < 4)
      goto LABEL_27;
    v91 = 4 * (a6 >> 2) - 4;
    do
    {
      v92 = *v90++;
      v93 = (float)v92;
      v94 = *(_DWORD *)v21;
      v21 += 2;
      v95 = (float)v94;
      v96 = vabds_f32(v93, (float)v94);
      if (v93 < (float)v94)
        v93 = v95;
      v97 = v93 * 0.001;
      if (v97 < 0.001)
        v97 = 0.001;
      v31 = v96 <= v97;
      v98 = v96 > v97 || v91 == 0;
      v91 -= 4;
    }
    while (!v98);
  }
  else
  {
    if (!E5RT::TensorDataType::IsType<int>((uint64_t)v111))
    {
      v110 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "AreEqual");
      std::string::basic_string[abi:ne180100]<0>(v112, "Unsupported dtype.");
      E5RT::Status::Status(v113, 1, v112);
      E5RT::E5RTError::E5RTError(v110, v114, v113);
    }
    if (a6 >= 4)
      v99 = (int *)v20;
    else
      v99 = 0;
    if (a6 < 4)
      goto LABEL_27;
    v100 = 4 * (a6 >> 2) - 4;
    do
    {
      v101 = *v99++;
      v102 = (float)v101;
      v103 = *(_DWORD *)v21;
      v21 += 2;
      v104 = vabds_f32(v102, (float)v103);
      v105 = fabsf(v102);
      v106 = fabsf((float)v103);
      if (v105 < v106)
        v105 = v106;
      v107 = v105 * 0.001;
      if (v107 < 0.001)
        v107 = 0.001;
      v31 = v104 <= v107;
      v108 = v104 > v107 || v100 == 0;
      v100 -= 4;
    }
    while (!v108);
  }
LABEL_63:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
  return v31;
}

void sub_190FFB564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  _Unwind_Resume(a1);
}

void sub_190FFB608(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_190FFB61C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190FFB630(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5, unint64_t a6)
{
  unint64_t Rank;
  unint64_t v13;
  _QWORD *TensorStrides;
  _QWORD *v15;
  E5RT::TensorDimension *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t result;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDimension *v23;
  uint64_t Length;
  E5RT::TensorDimension *v25;
  unint64_t v26;

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank == E5RT::TensorDescriptor::GetRank(a3)
    && (v13 = Rank - a6,
        TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        v15 = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        !memcmp((const void *)(*TensorStrides + 8 * a6), (const void *)(*v15 + 8 * a6), 8 * v13)))
  {
    v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, a6);
    Length = E5RT::TensorDimension::GetLength(v23);
    v25 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, a6);
    v26 = E5RT::TensorDimension::GetStride(v25) * Length;
    return sub_190FFB05C(a1, a2, (uint64_t)a3, a4, a5, v26);
  }
  else
  {
    v16 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, a6);
    v17 = E5RT::TensorDimension::GetLength(v16);
    if (v17)
    {
      v18 = v17;
      for (i = 0; v18 != i; ++i)
      {
        *(_QWORD *)(*a5 + 8 * a6) = i;
        if (E5RT::TensorDescriptor::GetRank(a1) - 1 == a6)
        {
          TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
          ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
          if (!sub_190FFB05C(a1, a2, (uint64_t)a3, a4, a5, ElementSize))
            return 0;
        }
        else
        {
          result = sub_190FFB630(a1, a2, a3, a4, a5, a6 + 1);
          if (!(_DWORD)result)
            return result;
        }
      }
    }
    return 1;
  }
}

uint64_t _ZN4E5RT10TensorCastIfDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD880;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIfDF16_EEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIfDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFBB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned int>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DADA38;
  v22[1] = E5RT::ElementwiseOpCast<float,unsigned int>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<float,unsigned int>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFC028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<int>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD9E0;
  v22[1] = E5RT::ElementwiseOpCast<float,int>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<float,int>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFC4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned short>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DADAE8;
  v22[1] = E5RT::ElementwiseOpCast<float,unsigned short>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<float,unsigned short>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFC980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<short>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DADA90;
  v22[1] = E5RT::ElementwiseOpCast<float,short>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<float,short>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFCE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD988;
  v22[1] = E5RT::ElementwiseOpCast<float,unsigned char>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<float,unsigned char>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFD2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD8D8;
  v22[1] = E5RT::ElementwiseOpCast<float,signed char>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<float,signed char>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFD784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_fEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD3B0;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIDF16_fEEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_fEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFDC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<unsigned int,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAE170;
  v22[1] = E5RT::ElementwiseOpCast<unsigned int,float>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<unsigned int,float>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFE0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<int,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<int>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DADEB0;
  v22[1] = E5RT::ElementwiseOpCast<int,float>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<int,float>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFE588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<unsigned short,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAE6F0;
  v22[1] = E5RT::ElementwiseOpCast<unsigned short,float>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<unsigned short,float>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFEA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<short,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<short>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAE430;
  v22[1] = E5RT::ElementwiseOpCast<short,float>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<short,float>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFEEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<unsigned char,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DADBF0;
  v22[1] = E5RT::ElementwiseOpCast<unsigned char,float>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<unsigned char,float>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFF38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<signed char,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<signed char>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD670;
  v22[1] = E5RT::ElementwiseOpCast<signed char,float>;
  v23 = v22;
  E5RT::ElementwiseOperationImplementation<signed char,float>(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFF838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_jEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned int>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD4B8;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIDF16_jEEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_jEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_190FFFCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_iEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<int>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD460;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIDF16_iEEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_iEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_191000190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_tEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned short>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD568;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIDF16_tEEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_tEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_19100063C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_sEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<short>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD510;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIDF16_sEEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_sEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_191000AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_hEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD408;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIDF16_hEEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_hEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_191000F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_aEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD358;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIDF16_aEEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_aEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_191001440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIjDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAE0C0;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIjDF16_EEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIjDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_1910018EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIiDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<int>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DADE00;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIiDF16_EEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIiDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_191001D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastItDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAE640;
  v22[1] = _ZN4E5RT17ElementwiseOpCastItDF16_EEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationItDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_191002244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIsDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<short>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAE380;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIsDF16_EEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIsDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_1910026F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIhDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DADB40;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIhDF16_EEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIhDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_191002B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIaDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v9;
  uint64_t TensorShape;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<signed char>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x50uLL);
    v20 = xmmword_191A81280;
    strcpy(v19, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A6FF90;
    strcpy(v19, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v17, v22, v21);
  }
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v12 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v12 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v22[2]) = 16;
    strcpy((char *)v22, "TensorCastHelper");
    v19 = (char *)operator new(0x30uLL);
    v20 = xmmword_191A71380;
    strcpy(v19, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v21, 1, &v19);
    E5RT::E5RTError::E5RTError(v18, v22, v21);
  }
  v22[0] = &unk_1E2DAD5C0;
  v22[1] = _ZN4E5RT17ElementwiseOpCastIaDF16_EEvPT_PKT0_m;
  v23 = v22;
  _ZN4E5RT34ElementwiseOperationImplementationIaDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v22);
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return kdebug_trace();
}

void sub_191003048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorQuantize(E5RT *this, const E5RT::TensorDescriptor *a2, E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, const E5RT::BufferObject *a5, float a6)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v12;
  E5RT::TensorDataType::Impl **v13;
  E5RT::TensorDataType::Impl **v14;
  _QWORD *TensorShape;
  uint64_t v16;
  unint64_t v17;
  E5RT::TensorDataType::Impl **v18;
  E5RT::TensorDataType::Impl **v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  E5RT::TensorDataType::Impl **v23;
  E5RT::TensorDataType::Impl **v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  E5RT::TensorDataType::Impl **v28;
  E5RT::TensorDataType::Impl **v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  float *v40;
  float *v41;
  uint64_t v42;
  void *v44;
  void *exception;
  void *v46;
  void *v47;
  void *v48;
  void *__p;
  void *v50;
  char *v51;
  char v52[8];
  _QWORD v53[3];
  float *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v12 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentDataType(v12);
  E5RT::TensorDataType::GetComponentPack(v12);
  kdebug_trace();
  if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef)
    && E5RT::TensorDataType::IsType<float>((uint64_t)v12))
  {
    v13 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
    v14 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
    if (E5RT::TensorDataType::GetNumComponents(v13) != 1
      || E5RT::TensorDataType::GetNumComponents(v14) != 1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v53, "TensorQuantizeHelper");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
      E5RT::Status::Status(v52, 1, &__p);
      E5RT::E5RTError::E5RTError(exception, v53, v52);
    }
    TensorShape = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(a3);
    v16 = TensorShape[1];
    if (v16 == *TensorShape)
    {
      __p = 0;
      v50 = 0;
      v17 = 1;
      v51 = 0;
    }
    else
    {
      v17 = *(_QWORD *)(v16 - 8);
      __p = 0;
      v50 = 0;
      v51 = 0;
      if (!v17)
      {
LABEL_38:
        v38 = (float *)operator new(0x20uLL);
        *(_QWORD *)v38 = &off_1E2DCF5E8;
        v38[2] = a6;
        *((_QWORD *)v38 + 2) = v17;
        *((_QWORD *)v38 + 3) = &__p;
        v54 = v38;
        E5RT::ElementwiseOperationImplementation<unsigned char,float>(a3, a4, this, a2, (uint64_t)v53);
        goto LABEL_45;
      }
      if (v17 >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    __p = operator new(4 * v17);
    v51 = (char *)__p + 4 * v17;
    bzero(__p, 4 * v17);
    v50 = v51;
    goto LABEL_38;
  }
  if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef)
    && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v12))
  {
    v18 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
    v19 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
    if (E5RT::TensorDataType::GetNumComponents(v18) != 1
      || E5RT::TensorDataType::GetNumComponents(v19) != 1)
    {
      v46 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v53, "TensorQuantizeHelper");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
      E5RT::Status::Status(v52, 1, &__p);
      E5RT::E5RTError::E5RTError(v46, v53, v52);
    }
    v20 = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(a3);
    v21 = v20[1];
    if (v21 == *v20)
    {
      __p = 0;
      v50 = 0;
      v22 = 1;
      v51 = 0;
    }
    else
    {
      v22 = *(_QWORD *)(v21 - 8);
      __p = 0;
      v50 = 0;
      v51 = 0;
      if (!v22)
      {
LABEL_41:
        v39 = (float *)operator new(0x20uLL);
        *(_QWORD *)v39 = &off_1E2DCF668;
        v39[2] = a6;
        *((_QWORD *)v39 + 2) = v22;
        *((_QWORD *)v39 + 3) = &__p;
        v54 = v39;
        _ZN4E5RT34ElementwiseOperationImplementationIhDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a3, a4, this, a2, (uint64_t)v53);
        goto LABEL_45;
      }
      if (v22 >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    __p = operator new(4 * v22);
    v51 = (char *)__p + 4 * v22;
    bzero(__p, 4 * v22);
    v50 = v51;
    goto LABEL_41;
  }
  if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v12))
  {
    if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef)
      || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v12))
    {
      v48 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v53, "TensorQuantize");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and Dst tensor data types are not compatible for a quantization operation.");
      E5RT::Status::Status(v52, 1, &__p);
      E5RT::E5RTError::E5RTError(v48, v53, v52);
    }
    v28 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
    v29 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
    if (E5RT::TensorDataType::GetNumComponents(v28) != 1
      || E5RT::TensorDataType::GetNumComponents(v29) != 1)
    {
      v44 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v53, "TensorQuantizeHelper");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
      E5RT::Status::Status(v52, 1, &__p);
      E5RT::E5RTError::E5RTError(v44, v53, v52);
    }
    v30 = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(a3);
    v31 = v30[1];
    if (v31 == *v30)
    {
      __p = 0;
      v50 = 0;
      v32 = 1;
      v51 = 0;
    }
    else
    {
      v32 = *(_QWORD *)(v31 - 8);
      __p = 0;
      v50 = 0;
      v51 = 0;
      if (!v32)
      {
LABEL_35:
        v33 = (float *)operator new(0x20uLL);
        *(_QWORD *)v33 = &off_1E2DCF768;
        v33[2] = a6;
        *((_QWORD *)v33 + 2) = v32;
        *((_QWORD *)v33 + 3) = &__p;
        v54 = v33;
        _ZN4E5RT34ElementwiseOperationImplementationIaDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a3, a4, this, a2, (uint64_t)v53);
        goto LABEL_45;
      }
      if (v32 >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    __p = operator new(4 * v32);
    v51 = (char *)__p + 4 * v32;
    bzero(__p, 4 * v32);
    v50 = v51;
    goto LABEL_35;
  }
  v23 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v24 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  if (E5RT::TensorDataType::GetNumComponents(v23) != 1
    || E5RT::TensorDataType::GetNumComponents(v24) != 1)
  {
    v47 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v53, "TensorQuantizeHelper");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
    E5RT::Status::Status(v52, 1, &__p);
    E5RT::E5RTError::E5RTError(v47, v53, v52);
  }
  v25 = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(a3);
  v26 = v25[1];
  if (v26 == *v25)
  {
    __p = 0;
    v50 = 0;
    v27 = 1;
    v51 = 0;
LABEL_43:
    __p = operator new(4 * v27);
    v51 = (char *)__p + 4 * v27;
    bzero(__p, 4 * v27);
    v50 = v51;
    goto LABEL_44;
  }
  v27 = *(_QWORD *)(v26 - 8);
  __p = 0;
  v50 = 0;
  v51 = 0;
  if (v27)
  {
    if (v27 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    goto LABEL_43;
  }
LABEL_44:
  v40 = (float *)operator new(0x20uLL);
  *(_QWORD *)v40 = &off_1E2DCF6E8;
  v40[2] = a6;
  *((_QWORD *)v40 + 2) = v27;
  *((_QWORD *)v40 + 3) = &__p;
  v54 = v40;
  E5RT::ElementwiseOperationImplementation<signed char,float>(a3, a4, this, a2, (uint64_t)v53);
LABEL_45:
  v41 = v54;
  if (v54 == (float *)v53)
  {
    v42 = 4;
    v41 = (float *)v53;
  }
  else
  {
    if (!v54)
      goto LABEL_50;
    v42 = 5;
  }
  (*(void (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 8 * v42))(v41, v34, v35, v36, v37);
LABEL_50:
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
  return kdebug_trace();
}

void sub_1910038D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  void *v27;
  int v28;

  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t E5RT::TensorDequantize(E5RT *this, const E5RT::TensorDescriptor *a2, E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, const E5RT::BufferObject *a5, float a6)
{
  E5RT::TensorDataType *TensorDataTypeRef;
  E5RT::TensorDataType *v12;
  E5RT::TensorDataType::Impl **v13;
  E5RT::TensorDataType::Impl **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (***v19)();
  uint64_t v20;
  E5RT::TensorDataType::Impl **v21;
  E5RT::TensorDataType::Impl **v22;
  E5RT::TensorDataType::Impl **v23;
  E5RT::TensorDataType::Impl **v24;
  unint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (***v31)();
  uint64_t v32;
  E5RT::TensorDataType::Impl **v33;
  E5RT::TensorDataType::Impl **v34;
  unint64_t v35;
  float *v36;
  void *v38;
  void *exception;
  void *v40;
  void *v41;
  void *v42;
  void *__p;
  void *v44;
  char *v45;
  _BYTE v46[8];
  uint64_t (**v47)();
  float v48;
  uint64_t (***v49)();
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v12 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentDataType(v12);
  E5RT::TensorDataType::GetComponentPack(v12);
  kdebug_trace();
  if (E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    && E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v12))
  {
    v13 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
    v14 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
    if (E5RT::TensorDataType::GetNumComponents(v13) != 1
      || E5RT::TensorDataType::GetNumComponents(v14) != 1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v47, "TensorDequantizeHelper");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
      E5RT::Status::Status(v46, 1, &__p);
      E5RT::E5RTError::E5RTError(exception, &v47, v46);
    }
    v47 = &off_1E2DCF7E8;
    v48 = 1.0 / a6;
    v49 = &v47;
    E5RT::ElementwiseOperationImplementation<float,unsigned char>(a3, a4, this, a2, (uint64_t)&v47);
    v19 = v49;
    if (v49 != &v47)
      goto LABEL_6;
LABEL_13:
    v20 = 4;
    v19 = &v47;
    goto LABEL_14;
  }
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<signed char>((uint64_t)v12))
  {
    if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
      && E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v12))
    {
      v23 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
      v24 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
      if (E5RT::TensorDataType::GetNumComponents(v23) != 1
        || E5RT::TensorDataType::GetNumComponents(v24) != 1)
      {
        v41 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v47, "TensorDequantizeHelper");
        std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
        E5RT::Status::Status(v46, 1, &__p);
        E5RT::E5RTError::E5RTError(v41, &v47, v46);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(E5RT::TensorDescriptor::GetTensorShape(a3) + 8) - 8);
      __p = 0;
      v44 = 0;
      v45 = 0;
      if (v25)
      {
        if (v25 >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        __p = operator new(4 * v25);
        v45 = (char *)__p + 4 * v25;
        bzero(__p, 4 * v25);
        v44 = v45;
      }
      v26 = (float *)operator new(0x28uLL);
      *(_QWORD *)v26 = &off_1E2DCF8E8;
      v26[2] = a6;
      *((_QWORD *)v26 + 2) = v25;
      v26[6] = 1.0 / a6;
      *((_QWORD *)v26 + 4) = &__p;
      v49 = (uint64_t (***)())v26;
      _ZN4E5RT34ElementwiseOperationImplementationIDF16_hEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a3, a4, this, a2, (uint64_t)&v47);
      v31 = v49;
      if (v49 == &v47)
      {
LABEL_23:
        v32 = 4;
        v31 = &v47;
        goto LABEL_34;
      }
    }
    else
    {
      if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
        || !E5RT::TensorDataType::IsType<signed char>((uint64_t)v12))
      {
        v42 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v47, "TensorDequantize");
        std::string::basic_string[abi:ne180100]<0>(&__p, "Src and Dst tensor data types are not compatible for a de-quantization operation.");
        E5RT::Status::Status(v46, 1, &__p);
        E5RT::E5RTError::E5RTError(v42, &v47, v46);
      }
      v33 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
      v34 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
      if (E5RT::TensorDataType::GetNumComponents(v33) != 1
        || E5RT::TensorDataType::GetNumComponents(v34) != 1)
      {
        v38 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v47, "TensorDequantizeHelper");
        std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
        E5RT::Status::Status(v46, 1, &__p);
        E5RT::E5RTError::E5RTError(v38, &v47, v46);
      }
      v35 = *(_QWORD *)(*(_QWORD *)(E5RT::TensorDescriptor::GetTensorShape(a3) + 8) - 8);
      __p = 0;
      v44 = 0;
      v45 = 0;
      if (v35)
      {
        if (v35 >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        __p = operator new(4 * v35);
        v45 = (char *)__p + 4 * v35;
        bzero(__p, 4 * v35);
        v44 = v45;
      }
      v36 = (float *)operator new(0x28uLL);
      *(_QWORD *)v36 = &off_1E2DCF968;
      v36[2] = a6;
      *((_QWORD *)v36 + 2) = v35;
      v36[6] = 1.0 / a6;
      *((_QWORD *)v36 + 4) = &__p;
      v49 = (uint64_t (***)())v36;
      _ZN4E5RT34ElementwiseOperationImplementationIDF16_aEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a3, a4, this, a2, (uint64_t)&v47);
      v31 = v49;
      if (v49 == &v47)
        goto LABEL_23;
    }
    if (!v31)
      goto LABEL_35;
    v32 = 5;
LABEL_34:
    ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t, uint64_t))(*v31)[v32])(v31, v27, v28, v29, v30);
LABEL_35:
    if (__p)
    {
      v44 = __p;
      operator delete(__p);
    }
    return kdebug_trace();
  }
  v21 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  v22 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  if (E5RT::TensorDataType::GetNumComponents(v21) != 1
    || E5RT::TensorDataType::GetNumComponents(v22) != 1)
  {
    v40 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v47, "TensorDequantizeHelper");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
    E5RT::Status::Status(v46, 1, &__p);
    E5RT::E5RTError::E5RTError(v40, &v47, v46);
  }
  v47 = &off_1E2DCF868;
  v48 = 1.0 / a6;
  v49 = &v47;
  E5RT::ElementwiseOperationImplementation<float,signed char>(a3, a4, this, a2, (uint64_t)&v47);
  v19 = v49;
  if (v49 == &v47)
    goto LABEL_13;
LABEL_6:
  if (v19)
  {
    v20 = 5;
LABEL_14:
    ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t, uint64_t))(*v19)[v20])(v19, v15, v16, v17, v18);
  }
  return kdebug_trace();
}

void sub_19100414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  void *v27;
  int v28;

  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void E5RT::InitializeTensorRandomly(E5RT *this, const E5RT::TensorDescriptor *a2, E5RT::BufferObject *a3, uint64_t a4)
{
  unint64_t Rank;
  unint64_t v9;
  size_t v10;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  void *__p;
  void *v15;
  char *v16;

  if (a4 < a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "InitializeTensorRandomly");
    std::string::basic_string[abi:ne180100]<0>(v12, "Max should be >= min.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, &__p, v13);
  }
  Rank = E5RT::TensorDescriptor::GetRank(this);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (Rank)
  {
    v9 = Rank;
    if (Rank >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = 8 * Rank;
    __p = operator new(8 * Rank);
    v16 = (char *)__p + 8 * v9;
    bzero(__p, v10);
    v15 = v16;
  }
  sub_1910044D0(this, a2, (uint64_t *)&__p, 0, (uint64_t)a3, a4);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_19100442C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_191004498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_1910044D0(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t Rank;
  E5RT::TensorDimension *v13;
  uint64_t result;
  unint64_t v15;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t i;
  int v23;
  unsigned __int8 v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  unsigned __int8 v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint32_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint32_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint32_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  std::random_device v66;
  std::random_device v67;
  std::random_device v68;

  Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank)
  {
    v13 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, a4);
    result = E5RT::TensorDimension::GetLength(v13);
    v15 = result;
    if (Rank - 1 != a4)
    {
      if (result)
      {
        v56 = a4;
        v57 = 0;
        do
        {
          *(_QWORD *)(*a3 + 8 * v56) = v57;
          result = sub_1910044D0(a1, a2, a3, v56 + 1, a5, a6);
          ++v57;
        }
        while (v15 != v57);
      }
      return result;
    }
    v63 = a4;
    v64 = Rank;
    TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
    result = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
    if (!v15)
      return result;
  }
  else
  {
    v63 = a4;
    v64 = 0;
    v15 = 1;
    TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
    result = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
  }
  v62 = v15;
  if ((_DWORD)result)
  {
    v17 = 0;
    v18 = result;
    v19 = (float)a5;
    v20 = (float)a6;
    v21 = (float)a6 - (float)a5;
    while (1)
    {
      v65 = v17;
      if (v64)
        *(_QWORD *)(*a3 + 8 * v63) = v17;
      else
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a3, 0, 0, 0);
      for (i = 0; i != v18; ++i)
      {
        if (E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef))
        {
          v24 = atomic_load((unsigned __int8 *)&qword_1EE215C70);
          if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1EE215C70))
          {
            std::random_device::random_device[abi:ne180100](&v66);
            v44 = arc4random();
            dword_1EE215C78[0] = v44;
            v45 = 3;
            v46 = 1;
            do
            {
              v47 = 1812433253 * (v44 ^ (v44 >> 30));
              v44 = v47 + v46;
              *((_DWORD *)&qword_1EE215C70 + v45) = v45 + v47 - 2;
              ++v46;
              ++v45;
            }
            while (v45 != 626);
            qword_1EE216638 = 0;
            std::random_device::~random_device(&v66);
            __cxa_guard_release(&qword_1EE215C70);
          }
          v25 = (qword_1EE216638 + 1) % 0x270uLL;
          v26 = dword_1EE215C78[(qword_1EE216638 + 397) % 0x270uLL] ^ ((dword_1EE215C78[v25] & 0x7FFFFFFE | dword_1EE215C78[qword_1EE216638] & 0x80000000) >> 1) ^ (dword_1EE215C78[v25] << 31 >> 31) & 0x9908B0DF;
          dword_1EE215C78[qword_1EE216638] = v26;
          qword_1EE216638 = v25;
          v27 = ((v26 ^ (v26 >> 11)) << 7) & 0x9D2C5680 ^ v26 ^ (v26 >> 11);
          v28 = v19
              + (float)(v21
                      * (float)((float)((v27 << 15) & 0xEFC60000 ^ v27 ^ (((v27 << 15) & 0xEFC60000 ^ v27) >> 18))
                              * 2.3283e-10));
          result = E5RT::TensorElementAt<float>(a1, a3, i, a2);
          *(float *)result = v28;
        }
        else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef))
        {
          v29 = atomic_load((unsigned __int8 *)&qword_1EE215C70);
          if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1EE215C70))
          {
            std::random_device::random_device[abi:ne180100](&v67);
            v48 = arc4random();
            dword_1EE215C78[0] = v48;
            v49 = 3;
            v50 = 1;
            do
            {
              v51 = 1812433253 * (v48 ^ (v48 >> 30));
              v48 = v51 + v50;
              *((_DWORD *)&qword_1EE215C70 + v49) = v49 + v51 - 2;
              ++v50;
              ++v49;
            }
            while (v49 != 626);
            qword_1EE216638 = 0;
            std::random_device::~random_device(&v67);
            __cxa_guard_release(&qword_1EE215C70);
          }
          v30 = (qword_1EE216638 + 1) % 0x270uLL;
          v31 = dword_1EE215C78[(qword_1EE216638 + 397) % 0x270uLL] ^ ((dword_1EE215C78[v30] & 0x7FFFFFFE | dword_1EE215C78[qword_1EE216638] & 0x80000000) >> 1) ^ (dword_1EE215C78[v30] << 31 >> 31) & 0x9908B0DF;
          dword_1EE215C78[qword_1EE216638] = v31;
          qword_1EE216638 = v30;
          v32 = ((v31 ^ (v31 >> 11)) << 7) & 0x9D2C5680 ^ v31 ^ (v31 >> 11);
          _S0 = v19
              + (float)(v21
                      * (float)((float)((v32 << 15) & 0xEFC60000 ^ v32 ^ (((v32 << 15) & 0xEFC60000 ^ v32) >> 18))
                              * 2.3283e-10));
          __asm { FCVT            H11, S0 }
          result = _ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(a1, a3, i, a2);
          *(_WORD *)result = _H11;
        }
        else
        {
          if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef))
          {
            v39 = atomic_load((unsigned __int8 *)&qword_1EE215C70);
            if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1EE215C70))
            {
              std::random_device::random_device[abi:ne180100](&v68);
              v52 = arc4random();
              dword_1EE215C78[0] = v52;
              v53 = 3;
              v54 = 1;
              do
              {
                v55 = 1812433253 * (v52 ^ (v52 >> 30));
                v52 = v55 + v54;
                *((_DWORD *)&qword_1EE215C70 + v53) = v53 + v55 - 2;
                ++v54;
                ++v53;
              }
              while (v53 != 626);
              qword_1EE216638 = 0;
              std::random_device::~random_device(&v68);
              __cxa_guard_release(&qword_1EE215C70);
            }
            v40 = (qword_1EE216638 + 1) % 0x270uLL;
            v41 = dword_1EE215C78[(qword_1EE216638 + 397) % 0x270uLL] ^ ((dword_1EE215C78[v40] & 0x7FFFFFFE | dword_1EE215C78[qword_1EE216638] & 0x80000000) >> 1) ^ (dword_1EE215C78[v40] << 31 >> 31) & 0x9908B0DF;
            dword_1EE215C78[qword_1EE216638] = v41;
            v42 = ((v41 ^ (v41 >> 11)) << 7) & 0x9D2C5680 ^ v41 ^ (v41 >> 11);
            qword_1EE216638 = v40;
            v23 = (int)(float)(v19
                             + (float)(v21
                                     * (float)((float)((v42 << 15) & 0xEFC60000 ^ v42 ^ (((v42 << 15) & 0xEFC60000 ^ v42) >> 18))
                                             * 2.3283e-10)));
            result = E5RT::TensorElementAt<unsigned char>(a1, a3, i, a2);
            goto LABEL_13;
          }
          if (E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef))
          {
            v23 = (int)sub_191004E24(v19, v20);
            result = E5RT::TensorElementAt<signed char>(a1, a3, i, a2);
LABEL_13:
            *(_BYTE *)result = v23;
            continue;
          }
          if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)TensorDataTypeRef))
          {
            v43 = (int)sub_191004E24(v19, v20);
            result = E5RT::TensorElementAt<unsigned short>(a1, a3, i, a2);
LABEL_29:
            *(_WORD *)result = v43;
            continue;
          }
          if (E5RT::TensorDataType::IsType<short>((uint64_t)TensorDataTypeRef))
          {
            v43 = (int)sub_191004E24(v19, v20);
            result = E5RT::TensorElementAt<short>(a1, a3, i, a2);
            goto LABEL_29;
          }
          if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)TensorDataTypeRef))
          {
            v61 = sub_191004E24(v19, v20);
            result = E5RT::TensorElementAt<unsigned int>(a1, a3, i, a2);
          }
          else
          {
            result = E5RT::TensorDataType::IsType<int>((uint64_t)TensorDataTypeRef);
            if (!(_DWORD)result)
              continue;
            v61 = (int)sub_191004E24(v19, v20);
            result = E5RT::TensorElementAt<int>(a1, a3, i, a2);
          }
          *(_DWORD *)result = v61;
        }
      }
      v17 = v65 + 1;
      if (v65 + 1 == v62)
        return result;
    }
  }
  if (v64)
  {
    if (v15 >= 2)
    {
      v58 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v59 = v15 & 0xFFFFFFFFFFFFFFFELL;
      do
        v59 -= 2;
      while (v59);
      goto LABEL_62;
    }
    v58 = 0;
    do
    {
      ++v58;
LABEL_62:
      ;
    }
    while (v15 != v58);
    *(_QWORD *)(*a3 + 8 * v63) = v58 - 1;
  }
  else
  {
    v60 = v15;
    do
    {
      result = (uint64_t)std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a3, 0, 0, 0);
      --v60;
    }
    while (v60);
  }
  return result;
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

_QWORD *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

float sub_191004E24(float a1, float a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint32_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  std::random_device v13;

  v4 = atomic_load((unsigned __int8 *)&qword_1EE215C70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EE215C70))
  {
    std::random_device::random_device[abi:ne180100](&v13);
    v9 = arc4random();
    dword_1EE215C78[0] = v9;
    v10 = 1;
    for (i = 3; i != 626; ++i)
    {
      v12 = 1812433253 * (v9 ^ (v9 >> 30));
      v9 = v12 + v10;
      *((_DWORD *)&qword_1EE215C70 + i) = i + v12 - 2;
      ++v10;
    }
    qword_1EE216638 = 0;
    std::random_device::~random_device(&v13);
    __cxa_guard_release(&qword_1EE215C70);
  }
  v5 = (qword_1EE216638 + 1) % 0x270uLL;
  v6 = dword_1EE215C78[(qword_1EE216638 + 397) % 0x270uLL] ^ ((dword_1EE215C78[v5] & 0x7FFFFFFE | dword_1EE215C78[qword_1EE216638] & 0x80000000) >> 1) ^ (dword_1EE215C78[v5] << 31 >> 31) & 0x9908B0DF;
  dword_1EE215C78[qword_1EE216638] = v6;
  v7 = ((v6 ^ (v6 >> 11)) << 7) & 0x9D2C5680 ^ v6 ^ (v6 >> 11);
  qword_1EE216638 = v5;
  return a1
       + (float)((float)(a2 - a1)
               * (float)((float)((v7 << 15) & 0xEFC60000 ^ v7 ^ (((v7 << 15) & 0xEFC60000 ^ v7) >> 18)) * 2.3283e-10));
}

void sub_191004FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  __cxa_guard_abort(&qword_1EE215C70);
  _Unwind_Resume(a1);
}

void sub_191004FC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE215C70);
  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  *((_BYTE *)&__token.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_191005054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191005074()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191005088(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCF5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1910050C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCF5E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1910050F0(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  const float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float **v13;
  uint64_t v14;
  unint64_t v15;
  vDSP_Length v16;
  float __C;
  float __B;

  v4 = *a4;
  v5 = (*a4 - 1) / *(_QWORD *)(a1 + 16);
  if (v5 != -1)
  {
    v7 = 0;
    v8 = (const float *)(a1 + 8);
    v9 = *a2;
    v10 = *a3;
    v11 = v5 + 1;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(float ***)(a1 + 24);
      v14 = v12 * v7++;
      v15 = v12 * v7;
      if (v15 >= v4)
        v15 = v4;
      __C = 255.0;
      __B = 0.0;
      v16 = v15 - v14;
      vDSP_vsmul((const float *)(v10 + 4 * v14), 1, v8, *v13, 1, v15 - v14);
      vDSP_vclip(**(const float ***)(a1 + 24), 1, &__B, &__C, **(float ***)(a1 + 24), 1, v16);
      vDSP_vfixru8(**(const float ***)(a1 + 24), 1, (unsigned __int8 *)(v9 + v14), 1, v16);
    }
    while (v11 != v7);
  }
}

uint64_t sub_1910051E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_120TensorQuantizeHelperIhfEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKfmE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIhfEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObje"
                                "ctES4_RKS5_fEUlPhPKfmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_120TensorQuantizeHelperIhfEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKfmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIhfEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKfmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191005254()
{
  return &unk_1E2DCF648;
}

void sub_191005264()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191005278(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCF668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1910052B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCF668;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1910052E0(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  float32x4_t **v13;
  uint64_t v14;
  unint64_t v15;
  float32x4_t *v16;
  vDSP_Length v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float16x4_t *v21;
  float32x4_t *v22;
  float16x4_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float16x4_t *v28;
  float32x4_t *v29;
  float16x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  unint64_t v34;
  __int32 *v35;
  __int16 *v36;
  __int16 v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *__B;
  float __C;
  float v48;

  v4 = *a4;
  v5 = (*a4 - 1) / *(_QWORD *)(a1 + 16);
  if (v5 != -1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v45 = *a2;
    __B = (float *)(a1 + 8);
    v44 = *a3;
    v43 = *a3 + 16;
    v10 = 1;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(float32x4_t ***)(a1 + 24);
      v14 = v12 * v9;
      v15 = v12 * (v9 + 1);
      if (v15 >= v4)
        v15 = v4;
      __C = 255.0;
      v48 = 0.0;
      v16 = *v13;
      v17 = v15 - v14;
      if (v15 - v14 >= 4)
      {
        v19 = v12 * v10;
        if (v4 < v12 * v10)
          v19 = v4;
        v20 = (unint64_t)(v19 + v12 * v8) >> 2;
        v21 = (float16x4_t *)(v44 + v12 * v7);
        v22 = v16;
        do
        {
          v23 = *v21++;
          *v22++ = vcvtq_f32_f16(v23);
          --v20;
        }
        while (v20);
        v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v17 & 0xFFFFFFFFFFFFFFFCLL) >= v17)
          goto LABEL_3;
      }
      else
      {
        v18 = 0;
        if (!v17)
          goto LABEL_3;
      }
      v24 = v15 - (v14 + v18);
      if (v24 >= 0x10)
      {
        v25 = v18 + (v24 & 0xFFFFFFFFFFFFFFF0);
        v26 = v12 * v10;
        if (v4 < v12 * v10)
          v26 = v4;
        v27 = (v26 - (v18 + v12 * v9)) & 0xFFFFFFFFFFFFFFF0;
        v28 = (float16x4_t *)(v43 + v12 * v7 + 2 * v18);
        v29 = (float32x4_t *)((char *)v16 + 4 * v18 + 32);
        do
        {
          v30 = *(float16x8_t *)v28[-2].i8;
          v31 = vcvtq_f32_f16(*v28);
          v32 = vcvt_hight_f32_f16(*(float16x8_t *)v28->i8);
          v29[-2] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
          v29[-1] = vcvt_hight_f32_f16(v30);
          *v29 = v31;
          v29[1] = v32;
          v29 += 4;
          v28 += 4;
          v27 -= 16;
        }
        while (v27);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_3;
      }
      else
      {
        v25 = v18;
      }
      v33 = v12 * v10;
      if (v4 < v12 * v10)
        v33 = v4;
      v34 = v33 + v12 * v8 - v25;
      v35 = &v16->i32[v25];
      v36 = (__int16 *)(v44 + v12 * v7 + 2 * v25);
      do
      {
        v37 = *v36++;
        _H0 = v37;
        __asm { FCVT            S0, H0 }
        *v35++ = _S0;
        --v34;
      }
      while (v34);
LABEL_3:
      vDSP_vsmul(**(const float ***)(a1 + 24), 1, __B, **(float ***)(a1 + 24), 1, v17);
      vDSP_vclip(**(const float ***)(a1 + 24), 1, &v48, &__C, **(float ***)(a1 + 24), 1, v17);
      vDSP_vfixru8(**(const float ***)(a1 + 24), 1, (unsigned __int8 *)(v45 + v14), 1, v17);
      ++v10;
      --v8;
      v7 += 2;
    }
    while (v9++ != v5);
  }
}

uint64_t sub_191005528(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_120TensorQuantizeHelperIhDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_R"
                     "KS5_fEUlPhPKDF16_mE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIhDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12Buffer"
                                "ObjectES4_RKS5_fEUlPhPKDF16_mE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_120TensorQuantizeHelperIhDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKDF16_mE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIhDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKDF16_mE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191005594()
{
  return &unk_1E2DCF6C8;
}

void sub_1910055A4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_1910055B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCF6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1910055F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCF6E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_191005620(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  const float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float **v13;
  uint64_t v14;
  unint64_t v15;
  vDSP_Length v16;
  float __C;
  float __B;

  v4 = *a4;
  v5 = (*a4 - 1) / *(_QWORD *)(a1 + 16);
  if (v5 != -1)
  {
    v7 = 0;
    v8 = (const float *)(a1 + 8);
    v9 = *a2;
    v10 = *a3;
    v11 = v5 + 1;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(float ***)(a1 + 24);
      v14 = v12 * v7++;
      v15 = v12 * v7;
      if (v15 >= v4)
        v15 = v4;
      __C = 127.0;
      __B = -128.0;
      v16 = v15 - v14;
      vDSP_vsmul((const float *)(v10 + 4 * v14), 1, v8, *v13, 1, v15 - v14);
      vDSP_vclip(**(const float ***)(a1 + 24), 1, &__B, &__C, **(float ***)(a1 + 24), 1, v16);
      vDSP_vfixr8(**(const float ***)(a1 + 24), 1, (char *)(v9 + v14), 1, v16);
    }
    while (v11 != v7);
  }
}

uint64_t sub_19100571C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_120TensorQuantizeHelperIafEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKfmE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIafEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObje"
                                "ctES4_RKS5_fEUlPaPKfmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_120TensorQuantizeHelperIafEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKfmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIafEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKfmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191005788()
{
  return &unk_1E2DCF748;
}

void sub_191005798()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_1910057AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCF768;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1910057EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCF768;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_191005814(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  float32x4_t **v13;
  uint64_t v14;
  unint64_t v15;
  float32x4_t *v16;
  vDSP_Length v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float16x4_t *v21;
  float32x4_t *v22;
  float16x4_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float16x4_t *v28;
  float32x4_t *v29;
  float16x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  unint64_t v34;
  __int32 *v35;
  __int16 *v36;
  __int16 v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *__B;
  float __C;
  float v48;

  v4 = *a4;
  v5 = (*a4 - 1) / *(_QWORD *)(a1 + 16);
  if (v5 != -1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v45 = *a2;
    __B = (float *)(a1 + 8);
    v44 = *a3;
    v43 = *a3 + 16;
    v10 = 1;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(float32x4_t ***)(a1 + 24);
      v14 = v12 * v9;
      v15 = v12 * (v9 + 1);
      if (v15 >= v4)
        v15 = v4;
      v48 = -128.0;
      __C = 127.0;
      v16 = *v13;
      v17 = v15 - v14;
      if (v15 - v14 >= 4)
      {
        v19 = v12 * v10;
        if (v4 < v12 * v10)
          v19 = v4;
        v20 = (unint64_t)(v19 + v12 * v8) >> 2;
        v21 = (float16x4_t *)(v44 + v12 * v7);
        v22 = v16;
        do
        {
          v23 = *v21++;
          *v22++ = vcvtq_f32_f16(v23);
          --v20;
        }
        while (v20);
        v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v17 & 0xFFFFFFFFFFFFFFFCLL) >= v17)
          goto LABEL_3;
      }
      else
      {
        v18 = 0;
        if (!v17)
          goto LABEL_3;
      }
      v24 = v15 - (v14 + v18);
      if (v24 >= 0x10)
      {
        v25 = v18 + (v24 & 0xFFFFFFFFFFFFFFF0);
        v26 = v12 * v10;
        if (v4 < v12 * v10)
          v26 = v4;
        v27 = (v26 - (v18 + v12 * v9)) & 0xFFFFFFFFFFFFFFF0;
        v28 = (float16x4_t *)(v43 + v12 * v7 + 2 * v18);
        v29 = (float32x4_t *)((char *)v16 + 4 * v18 + 32);
        do
        {
          v30 = *(float16x8_t *)v28[-2].i8;
          v31 = vcvtq_f32_f16(*v28);
          v32 = vcvt_hight_f32_f16(*(float16x8_t *)v28->i8);
          v29[-2] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
          v29[-1] = vcvt_hight_f32_f16(v30);
          *v29 = v31;
          v29[1] = v32;
          v29 += 4;
          v28 += 4;
          v27 -= 16;
        }
        while (v27);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_3;
      }
      else
      {
        v25 = v18;
      }
      v33 = v12 * v10;
      if (v4 < v12 * v10)
        v33 = v4;
      v34 = v33 + v12 * v8 - v25;
      v35 = &v16->i32[v25];
      v36 = (__int16 *)(v44 + v12 * v7 + 2 * v25);
      do
      {
        v37 = *v36++;
        _H0 = v37;
        __asm { FCVT            S0, H0 }
        *v35++ = _S0;
        --v34;
      }
      while (v34);
LABEL_3:
      vDSP_vsmul(**(const float ***)(a1 + 24), 1, __B, **(float ***)(a1 + 24), 1, v17);
      vDSP_vclip(**(const float ***)(a1 + 24), 1, &v48, &__C, **(float ***)(a1 + 24), 1, v17);
      vDSP_vfixr8(**(const float ***)(a1 + 24), 1, (char *)(v45 + v14), 1, v17);
      ++v10;
      --v8;
      v7 += 2;
    }
    while (v9++ != v5);
  }
}

uint64_t sub_191005A64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_120TensorQuantizeHelperIaDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_R"
                     "KS5_fEUlPaPKDF16_mE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIaDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12Buffer"
                                "ObjectES4_RKS5_fEUlPaPKDF16_mE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_120TensorQuantizeHelperIaDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKDF16_mE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIaDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKDF16_mE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191005AD0()
{
  return &unk_1E2DCF7C8;
}

void sub_191005AE0()
{
  JUMPOUT(0x19401CD90);
}

_DWORD *sub_191005AF4(uint64_t a1)
{
  _DWORD *result;
  int v3;

  result = operator new(0x10uLL);
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E2DCF7E8;
  result[2] = v3;
  return result;
}

uint64_t sub_191005B2C(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E2DCF7E8;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

void sub_191005B4C(uint64_t a1, float **a2, const unsigned __int8 **a3, vDSP_Length *a4)
{
  const float *v4;
  float *v5;
  vDSP_Length v6;

  v4 = (const float *)(a1 + 8);
  v5 = *a2;
  v6 = *a4;
  vDSP_vfltu8(*a3, 1, *a2, 1, *a4);
  vDSP_vsmul(v5, 1, v4, v5, 1, v6);
}

uint64_t sub_191005BA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_122TensorDequantizeHelperIfhEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKhmE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIfhEEvRKN4E5RT16TensorDescriptorERNS1_12BufferOb"
                                "jectES4_RKS5_fEUlPfPKhmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_122TensorDequantizeHelperIfhEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKhmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIfhEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKhmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191005C14()
{
  return &unk_1E2DCF848;
}

void sub_191005C24()
{
  JUMPOUT(0x19401CD90);
}

_DWORD *sub_191005C38(uint64_t a1)
{
  _DWORD *result;
  int v3;

  result = operator new(0x10uLL);
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E2DCF868;
  result[2] = v3;
  return result;
}

uint64_t sub_191005C70(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E2DCF868;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

void sub_191005C90(uint64_t a1, float **a2, const char **a3, vDSP_Length *a4)
{
  const float *v4;
  float *v5;
  vDSP_Length v6;

  v4 = (const float *)(a1 + 8);
  v5 = *a2;
  v6 = *a4;
  vDSP_vflt8(*a3, 1, *a2, 1, *a4);
  vDSP_vsmul(v5, 1, v4, v5, 1, v6);
}

uint64_t sub_191005CEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_122TensorDequantizeHelperIfaEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKamE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIfaEEvRKN4E5RT16TensorDescriptorERNS1_12BufferOb"
                                "jectES4_RKS5_fEUlPfPKamE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_122TensorDequantizeHelperIfaEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKamE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIfaEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKamE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191005D58()
{
  return &unk_1E2DCF8C8;
}

void sub_191005D68()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191005D7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCF8E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_191005DBC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCF8E8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_191005DE4(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float16x4_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float32x4_t *v26;
  float16x8_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  int *v35;
  int v36;
  uint64_t v41;
  uint64_t v42;
  float *__B;
  uint64_t v44;
  unint64_t v45;

  v4 = *a4;
  v45 = (*a4 - 1) / *(_QWORD *)(a1 + 16);
  if (v45 != -1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    __B = (float *)(a1 + 24);
    v44 = *a3;
    v42 = *a2;
    v41 = *a2 + 16;
    v8 = 1;
    do
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = v10 * v7;
      if (v10 * (v7 + 1) >= v4)
        v12 = v4;
      else
        v12 = v10 * (v7 + 1);
      v13 = v12 - v11;
      vDSP_vfltu8((const unsigned __int8 *)(v44 + v11), 1, **(float ***)(a1 + 32), 1, v12 - v11);
      vDSP_vsmul(**(const float ***)(a1 + 32), 1, __B, **(float ***)(a1 + 32), 1, v12 - v11);
      v14 = **(_QWORD **)(a1 + 32);
      if ((unint64_t)(v12 - v11) >= 4)
      {
        v17 = v10 * v8;
        if (v4 < v10 * v8)
          v17 = v4;
        v18 = (v17 + v10 * v6) >> 2;
        v19 = (float16x4_t *)(v42 + v10 * v5);
        v20 = **(float32x4_t ***)(a1 + 32);
        do
        {
          v21 = *v20++;
          *v19++ = vcvt_f16_f32(v21);
          --v18;
        }
        while (v18);
        v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        v16 = v7 + 1;
        if ((v13 & 0xFFFFFFFFFFFFFFFCLL) >= v13)
          goto LABEL_3;
      }
      else
      {
        v15 = 0;
        v16 = v7 + 1;
        if (!v13)
          goto LABEL_3;
      }
      v22 = v12 - (v11 + v15);
      if (v22 >= 0x10)
      {
        v23 = v15 + (v22 & 0xFFFFFFFFFFFFFFF0);
        v24 = v10 * v8;
        if (v4 < v10 * v8)
          v24 = v4;
        v25 = (v24 - (v15 + v10 * v7)) & 0xFFFFFFFFFFFFFFF0;
        v26 = (float32x4_t *)(v14 + 4 * v15 + 32);
        v27 = (float16x8_t *)(v41 + v10 * v5 + 2 * v15);
        do
        {
          v29 = v26[-2];
          v28 = v26[-1];
          v31 = *v26;
          v30 = v26[1];
          v26 += 4;
          v27[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v29), v28);
          *v27 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v31), v30);
          v27 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_3;
      }
      else
      {
        v23 = v15;
      }
      v32 = v10 * v8;
      if (v4 < v10 * v8)
        v32 = v4;
      v33 = v32 + v10 * v6 - v23;
      v34 = (_WORD *)(v42 + v10 * v5 + 2 * v23);
      v35 = (int *)(v14 + 4 * v23);
      do
      {
        v36 = *v35++;
        _S0 = v36;
        __asm { FCVT            H0, S0 }
        *v34++ = _S0;
        --v33;
      }
      while (v33);
LABEL_3:
      ++v8;
      --v6;
      v5 += 2;
      _ZF = v7 == v45;
      v7 = v16;
    }
    while (!_ZF);
  }
}

uint64_t sub_19100601C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_hEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4"
                     "_RKS5_fEUlPDF16_PKhmE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_hEEvRKN4E5RT16TensorDescriptorERNS1_12Buff"
                                "erObjectES4_RKS5_fEUlPDF16_PKhmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_hEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPDF16_PKhmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_hEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPDF16_PKhmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191006088()
{
  return &unk_1E2DCF948;
}

void sub_191006098()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_1910060AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DCF968;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1910060EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCF968;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_191006114(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float16x4_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float32x4_t *v26;
  float16x8_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  int *v35;
  int v36;
  uint64_t v41;
  uint64_t v42;
  float *__B;
  uint64_t v44;
  unint64_t v45;

  v4 = *a4;
  v45 = (*a4 - 1) / *(_QWORD *)(a1 + 16);
  if (v45 != -1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    __B = (float *)(a1 + 24);
    v44 = *a3;
    v42 = *a2;
    v41 = *a2 + 16;
    v8 = 1;
    do
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = v10 * v7;
      if (v10 * (v7 + 1) >= v4)
        v12 = v4;
      else
        v12 = v10 * (v7 + 1);
      v13 = v12 - v11;
      vDSP_vflt8((const char *)(v44 + v11), 1, **(float ***)(a1 + 32), 1, v12 - v11);
      vDSP_vsmul(**(const float ***)(a1 + 32), 1, __B, **(float ***)(a1 + 32), 1, v12 - v11);
      v14 = **(_QWORD **)(a1 + 32);
      if ((unint64_t)(v12 - v11) >= 4)
      {
        v17 = v10 * v8;
        if (v4 < v10 * v8)
          v17 = v4;
        v18 = (v17 + v10 * v6) >> 2;
        v19 = (float16x4_t *)(v42 + v10 * v5);
        v20 = **(float32x4_t ***)(a1 + 32);
        do
        {
          v21 = *v20++;
          *v19++ = vcvt_f16_f32(v21);
          --v18;
        }
        while (v18);
        v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        v16 = v7 + 1;
        if ((v13 & 0xFFFFFFFFFFFFFFFCLL) >= v13)
          goto LABEL_3;
      }
      else
      {
        v15 = 0;
        v16 = v7 + 1;
        if (!v13)
          goto LABEL_3;
      }
      v22 = v12 - (v11 + v15);
      if (v22 >= 0x10)
      {
        v23 = v15 + (v22 & 0xFFFFFFFFFFFFFFF0);
        v24 = v10 * v8;
        if (v4 < v10 * v8)
          v24 = v4;
        v25 = (v24 - (v15 + v10 * v7)) & 0xFFFFFFFFFFFFFFF0;
        v26 = (float32x4_t *)(v14 + 4 * v15 + 32);
        v27 = (float16x8_t *)(v41 + v10 * v5 + 2 * v15);
        do
        {
          v29 = v26[-2];
          v28 = v26[-1];
          v31 = *v26;
          v30 = v26[1];
          v26 += 4;
          v27[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v29), v28);
          *v27 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v31), v30);
          v27 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_3;
      }
      else
      {
        v23 = v15;
      }
      v32 = v10 * v8;
      if (v4 < v10 * v8)
        v32 = v4;
      v33 = v32 + v10 * v6 - v23;
      v34 = (_WORD *)(v42 + v10 * v5 + 2 * v23);
      v35 = (int *)(v14 + 4 * v23);
      do
      {
        v36 = *v35++;
        _S0 = v36;
        __asm { FCVT            H0, S0 }
        *v34++ = _S0;
        --v33;
      }
      while (v33);
LABEL_3:
      ++v8;
      --v6;
      v5 += 2;
      _ZF = v7 == v45;
      v7 = v16;
    }
    while (!_ZF);
  }
}

uint64_t sub_19100634C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_aEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4"
                     "_RKS5_fEUlPDF16_PKamE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_aEEvRKN4E5RT16TensorDescriptorERNS1_12Buff"
                                "erObjectES4_RKS5_fEUlPDF16_PKamE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_aEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPDF16_PKamE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_aEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPDF16_PKamE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1910063B8()
{
  return &unk_1E2DCF9C8;
}

uint64_t E5Common::BnnsTargetSystemFromString(E5Common *this, const char *a2)
{
  size_t v3;
  size_t v4;
  void *exception;
  void *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  _BYTE v14[8];
  __int128 v15;
  std::string::size_type v16;
  _QWORD v17[3];
  uint64_t __dst;

  __dst = 0;
  v3 = strlen((const char *)this);
  if (v3 >= 8)
    v4 = 8;
  else
    v4 = v3;
  if (!v4)
    goto LABEL_98;
  memcpy(&__dst, this, v4);
  if (__dst > 1144336711)
  {
    if (__dst <= 1345532231)
    {
      if (__dst <= 1194668359)
      {
        if (__dst <= 1194406215)
        {
          if (__dst == 1144336712)
          {
            return 2011;
          }
          else
          {
            if (__dst != 1144402248)
              goto LABEL_98;
            return 2015;
          }
        }
        else
        {
          switch(__dst)
          {
            case 1194406216:
              return 1008;
            case 1194537288:
              return 2000;
            case 1194602824:
              return 2006;
            default:
              goto LABEL_98;
          }
        }
      }
      if (__dst <= 1345335623)
      {
        if (__dst == 1194668360)
          return 2008;
        if (__dst != 1194733896)
        {
          if (__dst != 1295331656)
            goto LABEL_98;
          return 2010;
        }
        return 2012;
      }
      if (__dst != 1345335624)
      {
        if (__dst != 1345401160)
        {
          if (__dst != 1345466696)
            goto LABEL_98;
          return 1009;
        }
        return 1007;
      }
      return 1006;
    }
    if (__dst > 1395863879)
    {
      if (__dst <= 0x6C65746E68)
      {
        if (__dst == 1395863880)
          return 2001;
        if (__dst == 1395929416)
          return 2005;
        if (__dst != 1395994952)
          goto LABEL_98;
        return 2009;
      }
      switch(__dst)
      {
        case 0x6C65746E69:
          return 1;
        case 0x6378452E47363148:
          return 4000;
        case 0x6173726576696E75:
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v17, "BnnsTargetSystemFromString");
          std::string::basic_string[abi:ne180100]<0>(&v15, "Compilation for universal target is not available in the BNNS backend.");
          E5RT::Status::Status(&v13, 2, &v15);
          E5RT::E5RTError::E5RTError(exception, v17, &v13);
      }
LABEL_98:
      v7 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "BnnsTargetSystemFromString");
      std::string::basic_string[abi:ne180100]<0>(&v12, "Unsupported platform identifier '");
      v8 = std::string::append(&v12, (const std::string::value_type *)this);
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v13.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v13, "' encountered in the E5 BNNS backend. This could be because the SDK used to perform BNNS compilation is not new enough to support the platform, an unsupported value was passed to --bnns-experimental-target-override, or there is a defect in the E5 BNNS backend. Please file a radar on SIML Espresso | E5ML if this message appears for a valid target.");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v16 = v10->__r_.__value_.__r.__words[2];
      v15 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v14, 2, &v15);
      E5RT::E5RTError::E5RTError(v7, v17, v14);
    }
    if (__dst > 1345663303)
    {
      if (__dst != 1345663304)
      {
        if (__dst != 1345728840)
        {
          if (__dst != 1345794376)
            goto LABEL_98;
          return 2016;
        }
        return 1014;
      }
      return 1013;
    }
    if (__dst != 1345532232)
    {
      if (__dst != 1345597768)
        goto LABEL_98;
      return 1012;
    }
    return 1010;
  }
  if (__dst <= 3486023)
  {
    if (__dst > 3223879)
    {
      if (__dst <= 3289415)
      {
        if (__dst != 3223880)
        {
          if (__dst != 3223885)
            goto LABEL_98;
          return 3006;
        }
        return 1007;
      }
      if (__dst == 3289416)
        return 1009;
      if (__dst != 3354952)
      {
        if (__dst != 3420488)
          goto LABEL_98;
        return 1012;
      }
      return 1010;
    }
    if (__dst > 14668)
    {
      if (__dst == 14669)
        return 3002;
      if (__dst != 3158344)
      {
        if (__dst != 3158349)
          goto LABEL_98;
        return 3005;
      }
      return 1006;
    }
    if (__dst != 14152)
    {
      if (__dst != 14664)
        goto LABEL_98;
      return 1004;
    }
    return 1000;
  }
  if (__dst <= 5257543)
  {
    if (__dst <= 3617095)
    {
      if (__dst != 3486024)
      {
        if (__dst != 3551560)
          goto LABEL_98;
        return 1014;
      }
      return 1013;
    }
    if (__dst == 3617096)
      return 2016;
    if (__dst == 4667720)
      return 1005;
    if (__dst != 5257032)
      goto LABEL_98;
    return 1000;
  }
  if (__dst <= 1127559495)
  {
    if (__dst != 5257544)
    {
      if (__dst == 1127428424)
        return 2002;
      if (__dst != 1127493960)
        goto LABEL_98;
      return 2004;
    }
    return 1004;
  }
  if (__dst == 1127559496)
    return 2010;
  if (__dst == 1144205640)
    return 2003;
  if (__dst != 1144271176)
    goto LABEL_98;
  return 2007;
}

void sub_191006BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  char v29;
  uint64_t v30;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a28 < 0)
  {
    operator delete(__p);
    if (*(char *)(v30 - 41) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v30 - 64));
      if ((v29 & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if (*(char *)(v30 - 41) < 0)
  {
    goto LABEL_7;
  }
  if ((v29 & 1) == 0)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_8:
  __cxa_free_exception(v28);
  goto LABEL_9;
}

void E5Common::CreateBnnsGraphProgramFromMIL(void *a1@<X2>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  void *v7;
  id v8;
  E5Common *v9;
  const char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  std::string::size_type v17;
  std::string *p_dst;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  void **v34;
  void *v35;
  void *exception;
  std::runtime_error *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string __dst;
  char v41[8];
  std::string __p;
  uint64_t v43;
  void **v44;
  void *v45;
  void **v46;
  uint64_t v47;

  v3 = a1;
  BNNSGraphCompileOptionsMakeDefault();
  objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kBnnsGraphOutputPathStrKey[0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kBnnsGraphOutputPathStrKey[0]);
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v6 = (const char *)objc_msgSend(v5, "UTF8String");

    BNNSGraphCompileOptionsSetOutputPathWithPermissionsAndProtectionClass();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kBnnsGraphTargetStrKey[0]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kBnnsGraphTargetStrKey[0]);
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v9 = (E5Common *)objc_msgSend(v8, "UTF8String");

    E5Common::BnnsTargetSystemFromString(v9, v10);
    BNNSGraphCompileOptionsSetTarget();
  }
  objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kBnnsGraphGenerateDebugInfoKey);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", E5Common::kBnnsGraphGenerateDebugInfoKey);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "isEqual:", MEMORY[0x1E0C9AAB0]);

    BNNSGraphCompileOptionsSetGenerateDebugInfo();
  }
  BNNSGraphCompileOptionsSetFileWriteFSyncBarrier();
  BNNSGraphCompileOptionsSetMessageLogMask();
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v43 = 24;
  v44 = &v45;
  BNNSGraphCompileOptionsSetMessageLogCallback();
  v13 = bnns::GraphCompile();
  v15 = v14;
  BNNSGraphCompileOptionsDestroy();
  if (!v13)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CreateBnnsGraphProgramFromMIL");
    E5Common::StringUtils::SummarizeBNNSErrorMessages("Error(s) occurred compiling MIL to BNNS graph:\n", (uint64_t *)&v45, &__dst);
    E5RT::Status::Status(v41, 9, &__dst);
    E5RT::E5RTError::E5RTError(exception, &__p, v41);
  }
  if (v6)
  {
    v16 = strlen(v6);
    if (v16 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = v16;
    if (v16 >= 0x17)
    {
      v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v19 = v16 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v17;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
      p_dst = &__dst;
      if (!v16)
        goto LABEL_18;
    }
    memmove(p_dst, v6, v17);
LABEL_18:
    p_dst->__r_.__value_.__s.__data_[v17] = 0;
    E5RT::PathWrapper::PathWrapper(&__p, (uint64_t)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (!E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&__p))
    {
      v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, "Failed in serializing BNNS IR program on disk.");
      __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v21 = (_QWORD *)operator new();
  v22 = (uint64_t)v21;
  if (v15)
    v23 = v13;
  else
    v23 = 0;
  *v21 = v23;
  v21[1] = v15;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  v24 = operator new();
  *(_QWORD *)(v24 + 8) = 0;
  v25 = (unint64_t *)(v24 + 8);
  *(_QWORD *)v24 = &off_1E2DCF9E8;
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = v22;
  *(_BYTE *)(v24 + 32) = v4 != 0;
  __p.__r_.__value_.__l.__size_ = v24;
  v38 = v22;
  v39 = (std::__shared_weak_count *)v24;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  E5Common::AutoResourcePtr::MakeFromSharedData(&v38, a2);
  v27 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v31 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v33 = (void **)v45;
  if (v45)
  {
    v34 = v46;
    v35 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v34 - 1) < 0)
          operator delete(*(v34 - 3));
        v34 -= 3;
      }
      while (v34 != v33);
      v35 = v45;
    }
    v46 = v33;
    operator delete(v35);
  }

}

void sub_1910071A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;

  __cxa_free_exception(v27);
  if (a23 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a26);

    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a26);

  _Unwind_Resume(a1);
}

void sub_191007230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_191007248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::vector<std::string>::~vector[abi:ne180100](&a20);

  _Unwind_Resume(a1);
}

void sub_191007270(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  __cxa_begin_catch(a1);
  v3 = *(void **)v2;
  if (v1)
    munmap(v3, *(_QWORD *)(v2 + 8));
  else
    free(v3);
  MEMORY[0x19401CD90](v2, 0x1050C40717B85FCLL);
  __cxa_rethrow();
}

void sub_1910072AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  __cxa_end_catch();
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_1910072BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_1910072D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_1910072EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1910072FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19100730C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19100731C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19100732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_191007344(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191007354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  int v28;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      std::vector<std::string>::~vector[abi:ne180100](&a26);

      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void E5Common::CreateBnnsGraphProgramFromMILFile(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, _QWORD *a4@<X8>)
{
  id v7;
  std::string::size_type v8;
  MIL::ParserOptions *v9;
  std::string::size_type v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  std::string::size_type v14;
  std::string *p_dst;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string __p;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::string __dst;
  std::string v34;
  uint64_t v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;

  v7 = a3;
  E5Common::AutoResourcePtr::MakeFromFile(a2, (uint64_t *)&__dst);
  v8 = __dst.__r_.__value_.__r.__words[0];
  v36 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    v9 = (MIL::ParserOptions *)operator new();
    v10 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)v9 = &off_1E2DC3628;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = v10;
  }
  else
  {
    v9 = 0;
  }
  v37 = (std::__shared_weak_count *)v9;
  MIL::ParserOptions::Make(v9);
  v11 = v35;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v34 = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v11 + 32))(v11, &v34, 1);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v12 = (const void *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v8 + 24))(v8);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v8 + 24))(v8);
  v14 = v13;
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_17:
    memmove(p_dst, v12, v14);
    p_dst->__r_.__value_.__s.__data_[v14] = 0;
    v16 = (std::__shared_weak_count *)a1[1];
    v30 = *a1;
    v31 = v16;
    if (!v16)
      goto LABEL_20;
LABEL_18:
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    goto LABEL_20;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13)
    goto LABEL_17;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  v16 = (std::__shared_weak_count *)a1[1];
  v30 = *a1;
  v31 = v16;
  if (v16)
    goto LABEL_18;
LABEL_20:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  MIL::Text::ParseProgram();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  E5Common::CreateBnnsGraphProgramFromMIL(v7, a4);
  v24 = v32;
  v32 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v25 = v35;
  v35 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

}

void sub_1910076B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;
  uint64_t v33;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a24 < 0)
    operator delete(__p);
  v33 = *(_QWORD *)(v31 - 88);
  *(_QWORD *)(v31 - 88) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v31 - 80);

  _Unwind_Resume(a1);
}

void sub_191007794(int a1, const std::string::value_type *a2, const std::string::value_type *a3, uint64_t a4)
{
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  std::string v17;
  std::string v18;
  std::string v19;

  if (a1 == 8 && a2 && a4 && *(_QWORD *)(a4 + 8))
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v18.__r_.__value_.__r.__words[1] = xmmword_191A7A8C0;
    strcpy(v18.__r_.__value_.__l.__data_, "[CreateBnnsGraphProgramFromMIL]: ");
    v7 = std::string::append(&v18, a2);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if (!a3)
        goto LABEL_17;
    }
    else if (!a3)
    {
LABEL_17:
      v13 = *(_QWORD *)(a4 + 8);
      v14 = *(_QWORD *)(v13 + 8);
      if (v14 < *(_QWORD *)(v13 + 16))
      {
LABEL_18:
        v15 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
        *(_QWORD *)(v14 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
        *(_OWORD *)v14 = v15;
        memset(&v19, 0, sizeof(v19));
        v16 = (char *)(v14 + 24);
        goto LABEL_22;
      }
LABEL_21:
      v16 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v13, (uint64_t)&v19);
LABEL_22:
      *(_QWORD *)(v13 + 8) = v16;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      return;
    }
    *((_BYTE *)&v17.__r_.__value_.__s + 23) = 13;
    strcpy((char *)&v17, " at location ");
    v9 = std::string::append(&v17, a3);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v18;
    else
      v11 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    std::string::append(&v19, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
    else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v17.__r_.__value_.__l.__data_);
    v13 = *(_QWORD *)(a4 + 8);
    v14 = *(_QWORD *)(v13 + 8);
    if (v14 < *(_QWORD *)(v13 + 16))
      goto LABEL_18;
    goto LABEL_21;
  }
}

void sub_191007958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1910079E0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void sub_191007A04(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(void **)v1;
  if (v2)
    munmap(v3, *(_QWORD *)(v1 + 8));
  else
    free(v3);
  JUMPOUT(0x19401CD90);
}

uint64_t sub_191007A54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8E5Common29CreateBnnsGraphProgramFromMILERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS4_11char_tr"
                     "aitsIcEENS4_9allocatorIcEEEEP12NSDictionaryE3$_1")
    return a1 + 32;
  if (((v3 & (unint64_t)"ZN8E5Common29CreateBnnsGraphProgramFromMILERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS"
                                "4_11char_traitsIcEENS4_9allocatorIcEEEEP12NSDictionaryE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8E5Common29CreateBnnsGraphProgramFromMILERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEP12NSDictionaryE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8E5Common29CreateBnnsGraphProgramFromMILERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEP12NSDictionaryE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

void std::__shared_ptr_pointer<E5Common::AutoResourcePtr  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5Common::AutoResourcePtr  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5Common::AutoResourcePtr  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN8E5Common15AutoResourcePtrEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN8E5Common15AutoResourcePtrEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN8E5Common15AutoResourcePtrEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN8E5Common15AutoResourcePtrEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::ComputeProgramHeaderPriv::GetIdentifier(E5RT::ComputeProgramHeaderPriv *this)
{
  return **((unsigned __int16 **)this + 1);
}

E5RT::E5BlockImpl *E5RT::E5BlockBuilder::Create@<X0>(_QWORD *a1@<X8>)
{
  E5RT::E5BlockImpl *v3;
  E5RT::E5BlockImpl *result;

  v3 = (E5RT::E5BlockImpl *)operator new();
  result = E5RT::E5BlockImpl::E5BlockImpl(v3);
  *a1 = (char *)v3 + 8;
  return result;
}

void sub_191007C24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10A1C4023DA19C4);
  _Unwind_Resume(a1);
}

void *E5RT::E5BlockBuilder::Finish@<X0>(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  void *result;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Block");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_191007D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::PathWrapper::FindFilesWithExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  const std::__fs::filesystem::directory_entry *v15;
  std::__fs::filesystem::path::__string_view v16;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  std::basic_string_view<_CharT, _Traits>::size_type v19;
  uint64_t v20;
  std::string *v21;
  std::__fs::filesystem::path::__string_view v22;
  int v23;
  std::__fs::filesystem::path::__string_view v24;
  std::string *v25;
  std::basic_string_view<_CharT, _Traits>::size_type v26;
  std::basic_string_view<_CharT, _Traits>::size_type v27;
  std::string::size_type v28;
  int v29;
  unint64_t v30;
  char *v31;
  int v32;
  void *v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *cntrl;
  uint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v48;
  std::__fs::filesystem::path v49;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v50;
  std::__shared_weak_count *v51;
  std::__fs::filesystem::directory_iterator v52;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v53;
  std::__shared_weak_count *v54;
  std::__fs::filesystem::directory_entry::_Path __dst;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  MEMORY[0x19401CB5C](&v53, a1, 0, 0);
  v6 = v53;
  v7 = v54;
  if (!v54)
  {
    v52.__imp_.__ptr_ = v53;
    v52.__imp_.__cntrl_ = 0;
LABEL_12:
    v50 = 0;
    v51 = 0;
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v54->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = v54;
  v52.__imp_.__ptr_ = v6;
  v52.__imp_.__cntrl_ = v7;
  if (!v54)
    goto LABEL_12;
  v11 = (unint64_t *)&v54->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v50 = 0;
  v51 = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_16:
  while (v52.__imp_.__ptr_ != v50)
  {
    v15 = std::__fs::filesystem::directory_iterator::__dereference(&v52);
    v16 = std::__fs::filesystem::path::__extension(&v15->__p_);
    if (v16.__size_ > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16.__size_ >= 0x17)
    {
      v18 = (v16.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16.__size_ | 7) != 0x17)
        v18 = v16.__size_ | 7;
      v19 = v18 + 1;
      p_dst = (std::string *)operator new(v18 + 1);
      __dst.__pn_.__r_.__value_.__l.__size_ = v16.__size_;
      __dst.__pn_.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
      __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_24:
      memmove(p_dst, v16.__data_, v16.__size_);
      goto LABEL_25;
    }
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v16.__size_;
    p_dst = (std::string *)&__dst;
    if (v16.__size_)
      goto LABEL_24;
LABEL_25:
    p_dst->__r_.__value_.__s.__data_[v16.__size_] = 0;
    v49 = __dst;
    memset(&__dst, 0, sizeof(__dst));
    v20 = *(unsigned __int8 *)(a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = (std::string *)a2;
    else
      v21 = *(std::string **)a2;
    if ((v20 & 0x80u) != 0)
      v20 = *(_QWORD *)(a2 + 8);
    std::string::append[abi:ne180100]<char const*,0>(&__dst.__pn_, v21, (std::string *)((char *)v21 + v20));
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22.__data_ = (const std::string_view::value_type *)&__dst;
    else
      v22.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    else
      v22.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
    v23 = std::__fs::filesystem::path::__compare(&v49, v22);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_38:
        if (v23)
          goto LABEL_15;
        goto LABEL_42;
      }
    }
    else if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(v49.__pn_.__r_.__value_.__l.__data_);
    if (v23)
      goto LABEL_15;
LABEL_42:
    if (a3)
    {
      if (SHIBYTE(v15->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__dst.__pn_, v15->__p_.__pn_.__r_.__value_.__l.__data_, v15->__p_.__pn_.__r_.__value_.__l.__size_);
      else
        __dst.__pn_ = (std::__fs::filesystem::path::string_type)v15->__p_;
      v30 = *(_QWORD *)(a4 + 8);
      if (v30 < *(_QWORD *)(a4 + 16))
      {
        v14 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
        *(_QWORD *)(v30 + 16) = *((_QWORD *)&__dst.__pn_.__r_.__value_.__l + 2);
        *(_OWORD *)v30 = v14;
        *(_QWORD *)(a4 + 8) = v30 + 24;
        goto LABEL_15;
      }
      v31 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a4, (uint64_t)&__dst);
      v32 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a4 + 8) = v31;
      if (v32 < 0)
      {
        v33 = (void *)__dst.__pn_.__r_.__value_.__r.__words[0];
LABEL_66:
        operator delete(v33);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    v24 = std::__fs::filesystem::path::__filename(&v15->__p_);
    if (v24.__size_ > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v24.__size_ >= 0x17)
    {
      v26 = (v24.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24.__size_ | 7) != 0x17)
        v26 = v24.__size_ | 7;
      v27 = v26 + 1;
      v25 = (std::string *)operator new(v26 + 1);
      __dst.__pn_.__r_.__value_.__l.__size_ = v24.__size_;
      __dst.__pn_.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
      __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    }
    else
    {
      *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v24.__size_;
      v25 = (std::string *)&__dst;
      if (!v24.__size_)
        goto LABEL_53;
    }
    memmove(v25, v24.__data_, v24.__size_);
LABEL_53:
    v25->__r_.__value_.__s.__data_[v24.__size_] = 0;
    v28 = __dst.__pn_.__r_.__value_.__r.__words[0];
    v48 = __dst.__pn_.__r_.__value_.__r.__words[2];
    HIBYTE(v48) = __dst.__pn_.__r_.__value_.__s.__data_[19];
    v29 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v49.__pn_, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v49.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
      LODWORD(v49.__pn_.__r_.__value_.__r.__words[2]) = v48;
      *(_DWORD *)((char *)&v49.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2]
                                                                                   + 3);
      *((_BYTE *)&v49.__pn_.__r_.__value_.__s + 23) = *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23);
    }
    v34 = *(_QWORD *)(a4 + 8);
    if (v34 < *(_QWORD *)(a4 + 16))
    {
      v35 = *(_OWORD *)&v49.__pn_.__r_.__value_.__l.__data_;
      *(_QWORD *)(v34 + 16) = *((_QWORD *)&v49.__pn_.__r_.__value_.__l + 2);
      *(_OWORD *)v34 = v35;
      memset(&v49, 0, sizeof(v49));
      *(_QWORD *)(a4 + 8) = v34 + 24;
      if ((v29 & 0x80000000) == 0)
        goto LABEL_15;
LABEL_65:
      v33 = (void *)v28;
      goto LABEL_66;
    }
    v36 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a4, (uint64_t)&v49);
    v37 = SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a4 + 8) = v36;
    if ((v37 & 0x80000000) == 0)
    {
      if ((v29 & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_65;
    }
    operator delete(v49.__pn_.__r_.__value_.__l.__data_);
    if (v29 < 0)
      goto LABEL_65;
LABEL_15:
    std::__fs::filesystem::directory_iterator::__increment(&v52, 0);
  }
  v38 = v51;
  if (v51)
  {
    v39 = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  cntrl = v52.__imp_.__cntrl_;
  if (v52.__imp_.__cntrl_)
  {
    v42 = &v52.__imp_.__cntrl_->__shared_owners_;
    do
      v43 = __ldaxr((unint64_t *)v42);
    while (__stlxr(v43 - 1, (unint64_t *)v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v44 = v54;
  if (v54)
  {
    v45 = (unint64_t *)&v54->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_191008208(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19100821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void **v31;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::vector<std::string>::~vector[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

BOOL E5Common::PlatformIdentifier::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

{
  return *(_QWORD *)a1 == a2 && *(_DWORD *)(a1 + 8) == 0;
}

BOOL E5Common::PlatformIdentifier::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t std::hash<E5Common::PlatformIdentifier>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2 ^ (2 * *(unsigned int *)(a2 + 8));
}

void `non-virtual thunk to'E5RT::E5BlockImpl::~E5BlockImpl(void **this)
{
  E5RT::E5BlockImpl::~E5BlockImpl(this - 1);
}

{
  E5RT::E5BlockImpl::~E5BlockImpl(this - 1);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::E5BlockImpl::GetInputs(E5RT::E5BlockImpl *this)
{
  return (uint64_t)this + 40;
}

uint64_t E5RT::E5BlockImpl::GetOutputs(E5RT::E5BlockImpl *this)
{
  return (uint64_t)this + 144;
}

uint64_t E5RT::E5BlockImpl::GetInOuts(E5RT::E5BlockImpl *this)
{
  return (uint64_t)this + 248;
}

_OWORD *`non-virtual thunk to'E5RT::E5BlockImpl::AddOperation(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _OWORD *result;

  v3 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 24))
  {
    result = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>(a1 + 8, (__int128 *)a2);
    *(_QWORD *)(a1 + 16) = result;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    *v3 = *(_QWORD *)a2;
    v3[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    result = v3 + 2;
    *(_QWORD *)(a1 + 16) = v3 + 2;
  }
  return result;
}

void `non-virtual thunk to'E5RT::E5BlockImpl::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 32, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5BlockImpl::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 136, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5BlockImpl::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 248, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5BlockImpl::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 240, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

E5RT::E5BuildInfoImpl *E5RT::E5BuildInfoBuilder::Create@<X0>(_QWORD *a1@<X8>)
{
  E5RT::E5BuildInfoImpl *v3;
  E5RT::E5BuildInfoImpl *result;

  v3 = (E5RT::E5BuildInfoImpl *)operator new();
  result = E5RT::E5BuildInfoImpl::E5BuildInfoImpl(v3);
  *a1 = (char *)v3 + 8;
  return result;
}

void sub_191008694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10A1C40912BD604);
  _Unwind_Resume(a1);
}

void *E5RT::E5BuildInfoBuilder::Finish@<X0>(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  void *result;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5BuildInfo");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_191008784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void `non-virtual thunk to'E5RT::E5BuildInfoImpl::~E5BuildInfoImpl(E5RT::E5BuildInfoImpl *this)
{
  E5RT::E5BuildInfoImpl::~E5BuildInfoImpl((E5RT::E5BuildInfoImpl *)((char *)this - 8));
}

{
  E5RT::E5BuildInfoImpl::~E5BuildInfoImpl((E5RT::E5BuildInfoImpl *)((char *)this - 8));
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::E5BuildInfoImpl::GetBuildInfoEntries(E5RT::E5BuildInfoImpl *this)
{
  return (uint64_t)this + 16;
}

void E5RT::E5BuildInfoImpl::SetBuildInfoEntries(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 16);
  if (v3 != (_QWORD *)a2)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v3, *(uint64_t **)(a2 + 16), 0);
  }
}

void `non-virtual thunk to'E5RT::E5BuildInfoImpl::SetBuildInfoEntries(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 8);
  if (v3 != (_QWORD *)a2)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v3, *(uint64_t **)(a2 + 16), 0);
  }
}

void `non-virtual thunk to'E5RT::E5BuildInfoImpl::SetBuildInfoEntries(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a1 + 8, a2);
}

std::exception_ptr *sub_1910088AC(std::exception_ptr *a1, const std::exception_ptr *a2)
{
  return std::exception_ptr::exception_ptr(a1 + 5, a2 + 5);
}

void sub_1910088B8(std::exception_ptr *a1)
{
  std::exception_ptr::~exception_ptr(a1 + 5);
}

uint64_t sub_1910088C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1910088F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  std::exception_ptr v15[5];

  __cxa_begin_catch(a1);
  std::current_exception();
  std::exception_ptr::operator=((std::exception_ptr *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 40), v15);
  std::exception_ptr::~exception_ptr(v15);
  __cxa_end_catch();
}

void E5Common::AutoResourcePtr::MakeFromSharedData(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (_QWORD *)operator new();
  v5 = v4;
  v6 = a1[1];
  v12 = *a1;
  v13 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  E5Common::AutoSharedDataPtr::AutoSharedDataPtr(v4, &v12);
  v9 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *a2 = v5;
  }
  else
  {
LABEL_8:
    *a2 = v5;
  }
}

void sub_1910089F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  if (a10)
    std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(a10);
  MEMORY[0x19401CD90](v10, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

E5RT::E5FunctionImpl *E5RT::E5FunctionBuilder::Create@<X0>(_QWORD *a1@<X8>)
{
  E5RT::E5FunctionImpl *v3;
  E5RT::E5FunctionImpl *result;

  v3 = (E5RT::E5FunctionImpl *)operator new();
  result = E5RT::E5FunctionImpl::E5FunctionImpl(v3);
  *a1 = (char *)v3 + 8;
  return result;
}

void sub_191008A7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10B3C4031B97F05);
  _Unwind_Resume(a1);
}

void *E5RT::E5FunctionBuilder::Finish@<X0>(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  void *result;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Function");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_191008B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void `non-virtual thunk to'E5RT::E5FunctionImpl::~E5FunctionImpl(E5RT::E5FunctionImpl *this)
{
  E5RT::E5FunctionImpl::~E5FunctionImpl((E5RT::E5FunctionImpl *)((char *)this - 8));
}

{
  E5RT::E5FunctionImpl::~E5FunctionImpl((E5RT::E5FunctionImpl *)((char *)this - 8));
  JUMPOUT(0x19401CD90);
}

char *`non-virtual thunk to'E5RT::E5FunctionImpl::AddBlock(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  char *result;

  v3 = *(_OWORD **)(a1 + 72);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 80))
  {
    result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 64), a2);
  }
  else
  {
    *v3 = *(_OWORD *)a2;
    result = (char *)(v3 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

uint64_t `non-virtual thunk to'E5RT::E5FunctionImpl::SetIntermediateBufferSize(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

std::string *`non-virtual thunk to'E5RT::E5FunctionImpl::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void `non-virtual thunk to'E5RT::E5FunctionImpl::AddInput(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 88, a2);
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)v4 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void `non-virtual thunk to'E5RT::E5FunctionImpl::AddOutput(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 192, a2);
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)v4 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void E5RT::E5FunctionImpl::AddInOut(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 304, a2);
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)v4 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void `non-virtual thunk to'E5RT::E5FunctionImpl::AddInOut(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 296, a2);
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)v4 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void E5RT::E5FunctionImpl::MapOperand(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 *v9;

  v9 = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 408, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v9);
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)v4[6];
  *(_OWORD *)(v4 + 5) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void `non-virtual thunk to'E5RT::E5FunctionImpl::MapOperand(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 *v9;

  v9 = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 400, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v9);
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)v4[6];
  *(_OWORD *)(v4 + 5) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t E5RT::E5FunctionImpl::GetUserVersion(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 48;
}

std::string *`non-virtual thunk to'E5RT::E5FunctionImpl::SetUserVersion(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 40), a2);
}

void sub_191008F90(std::string *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[2];
  void *__p[2];
  void *v41[2];
  int v42;
  __int128 v43;

  v3 = a3;
  v6 = *(_QWORD *)a2;
  v7 = *(_OWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8))
                 + 16 * a3);
  v43 = v7;
  v8 = *((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v41 = 0u;
  v42 = 1065353216;
  v11 = *(_QWORD **)(a2 + 16);
  v12 = v11[1];
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] <= 1uLL)
    {
      v14 = ((_DWORD)v12 - 1) & v3;
      v15 = *(uint64_t ***)(*v11 + 8 * v14);
      if (!v15)
        goto LABEL_28;
      goto LABEL_11;
    }
    v14 = v3 % v12;
    if (v12 > v3)
      v14 = v3;
    v15 = *(uint64_t ***)(*v11 + 8 * v14);
    if (v15)
    {
LABEL_11:
      v16 = *v15;
      if (!v16)
        goto LABEL_28;
      if (v13.u32[0] < 2uLL)
      {
        v17 = v12 - 1;
        while (1)
        {
          v19 = v16[1];
          if (v19 == v3)
          {
            if (*((_DWORD *)v16 + 4) == v3)
              goto LABEL_26;
          }
          else if ((v19 & v17) != v14)
          {
            goto LABEL_28;
          }
          v16 = (uint64_t *)*v16;
          if (!v16)
            goto LABEL_28;
        }
      }
      do
      {
        v18 = v16[1];
        if (v18 == v3)
        {
          if (*((_DWORD *)v16 + 4) == v3)
          {
LABEL_26:
            if (__p != (void **)(v16 + 3))
            {
              v42 = *((_DWORD *)v16 + 14);
              v37 = v7;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(__p, (uint64_t *)v16[5], 0);
              v7 = v37;
            }
            break;
          }
        }
        else
        {
          if (v18 >= v12)
            v18 %= v12;
          if (v18 != v14)
            break;
        }
        v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
  }
LABEL_28:
  v38 = v7;
  if (v8)
  {
    v20 = (unint64_t *)(v8 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  E5RT::E5FunctionImpl::LoadOperandInfo(v6, &v38, *(_QWORD *)(a2 + 24), (uint64_t)__p, v39);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v43 + 16))(v43);
  if (*(char *)(v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
  }
  else
  {
    v26 = *(_OWORD *)v25;
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 16);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v26;
  }
  v27 = (std::__shared_weak_count *)v39[1];
  a1[1].__r_.__value_.__r.__words[0] = v39[0];
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v31 = (void **)v41[0];
  if (v41[0])
  {
    do
    {
      v36 = (void **)*v31;
      if (*((char *)v31 + 39) < 0)
        operator delete(v31[2]);
      operator delete(v31);
      v31 = v36;
    }
    while (v36);
  }
  v32 = __p[0];
  __p[0] = 0;
  if (v32)
    operator delete(v32);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1910092A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v7 - 64);
  _Unwind_Resume(a1);
}

void sub_1910092C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v3 - 64);
  _Unwind_Resume(a1);
}

void sub_1910092E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5 - 64);
  _Unwind_Resume(a1);
}

void sub_191009308(std::string *a1, std::string *a2, uint64_t a3)
{
  const std::string::value_type *v4;
  std::string::size_type v6;
  std::string::size_type size;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  void *exception;
  std::string v18;
  std::string __p;
  std::string v20;
  std::__fs::filesystem::path v21;

  v4 = (const std::string::value_type *)a2;
  memset(&v20, 0, sizeof(v20));
  v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v6 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v6 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v20, a2, (std::string *)((char *)a2 + v6));
  memset(&__p, 0, sizeof(__p));
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (std::string *)a3;
  else
    v9 = *(std::string **)a3;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__p, v9, (std::string *)((char *)v9 + v8));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v20, &v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_16:
    operator delete(v20.__r_.__value_.__l.__data_);
    goto LABEL_10;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_16;
LABEL_10:
  std::__fs::filesystem::__status(&v21, 0);
  if (v20.__r_.__value_.__s.__data_[0] == 255 || !v20.__r_.__value_.__s.__data_[0])
  {
    std::operator+<char>();
    v10 = std::string::append(&v18, " in bundle = ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = v4[23];
    if (v12 >= 0)
      v13 = v4;
    else
      v13 = *(const std::string::value_type **)v4;
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)v4 + 23);
    else
      v14 = *((_QWORD *)v4 + 1);
    v15 = std::string::append(&__p, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "FindPathForResource");
    E5RT::Status::Status(&v18, 8, &v20);
    E5RT::E5RTError::E5RTError(exception, &__p, &v18);
  }
  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a1, v21.__pn_.__r_.__value_.__l.__data_, v21.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::__fs::filesystem::path *)a1 = v21;
  }
}

void sub_19100952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
        operator delete(a23);
      if (*(char *)(v30 - 33) < 0)
        operator delete(*(void **)(v30 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

BnnsCpuInferenceOpT **std::unique_ptr<BnnsCpuInferenceOpT>::~unique_ptr[abi:ne180100](BnnsCpuInferenceOpT **a1)
{
  BnnsCpuInferenceOpT *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    BnnsCpuInferenceOpT::~BnnsCpuInferenceOpT(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

uint64_t *std::unique_ptr<CpuInferenceOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 47) < 0)
    {
      operator delete(*(void **)(v2 + 24));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
LABEL_4:
      MEMORY[0x19401CD90](v2, 0x1012C403467C318);
      return a1;
    }
    operator delete(*(void **)v2);
    goto LABEL_4;
  }
  return a1;
}

uint64_t *std::unique_ptr<EirInferenceOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 56);
    if (v3)
    {
      *(_QWORD *)(v2 + 64) = v3;
      operator delete(v3);
    }
    if (*(char *)(v2 + 55) < 0)
    {
      operator delete(*(void **)(v2 + 32));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
LABEL_6:
      MEMORY[0x19401CD90](v2, 0x1092C403B4DE647);
      return a1;
    }
    operator delete(*(void **)v2);
    goto LABEL_6;
  }
  return a1;
}

uint64_t *std::unique_ptr<CastOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x19401CD90](v2, 0x1010C402EF3923FLL);
  }
  return a1;
}

uint64_t *std::unique_ptr<QuantOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x19401CD90](v2, 0x1080C406BDE4C18);
  }
  return a1;
}

uint64_t *std::unique_ptr<MlcCpuInferenceOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x19401CD90](v2, 0x1012C40EC159624);
  }
  return a1;
}

JitCallOpT **std::unique_ptr<JitCallOpT>::~unique_ptr[abi:ne180100](JitCallOpT **a1)
{
  JitCallOpT *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    JitCallOpT::~JitCallOpT(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

unsigned __int8 **std::unique_ptr<E5RT_FB::OperandDescT>::~unique_ptr[abi:ne180100](unsigned __int8 **a1)
{
  unsigned __int8 *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT_FB::OperandUnion::Reset(v2);
    MEMORY[0x19401CD90](v2, 0x1080C403DA8C3A5);
  }
  return a1;
}

uint64_t BnnsProgramUrlUnion::UnPack(unsigned int *a1, int a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v11;

  if (a2 == 2)
  {
    v3 = operator new();
    v8 = *a1;
    v4 = a1 + 1;
    v5 = v8;
    if (v8 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      goto LABEL_13;
    }
LABEL_8:
    *(_BYTE *)(v3 + 23) = v5;
    v9 = (void *)v3;
    if (!(_DWORD)v5)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (a2 != 1)
    return 0;
  v3 = operator new();
  v6 = *a1;
  v4 = a1 + 1;
  v5 = v6;
  if (v6 < 0x17)
    goto LABEL_8;
  v7 = (v5 & 0xFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v7 = v5 | 7;
LABEL_13:
  v11 = v7 + 1;
  v9 = operator new(v7 + 1);
  *(_QWORD *)(v3 + 8) = v5;
  *(_QWORD *)(v3 + 16) = v11 | 0x8000000000000000;
  *(_QWORD *)v3 = v9;
LABEL_14:
  memcpy(v9, v4, v5);
LABEL_15:
  *((_BYTE *)v9 + v5) = 0;
  return v3;
}

void sub_1910099F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

__n128 EirInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  __int128 *p_dst;
  __n128 result;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  __int128 *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  __n128 *v40;
  __n128 *v41;
  uint64_t v42;
  __n128 v43;
  __int128 __dst;
  uint64_t v45;

  v4 = *a1;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    v7 = v6[2];
    if (v7)
    {
      v8 = (char *)a1 + v7;
      v9 = *(unsigned int *)((char *)a1 + v7);
      v11 = &v8[v9 + 4];
      v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17)
          v29 = (v10 & 0xFFFFFFF8) + 8;
        else
          v29 = v10 | 7;
        p_dst = (__int128 *)operator new(v29 + 1);
        *((_QWORD *)&__dst + 1) = v10;
        v45 = v29 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v45) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!(_DWORD)v10)
        {
          *((_BYTE *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            result.n128_u64[0] = __dst;
            *(_OWORD *)a2 = __dst;
            *(_QWORD *)(a2 + 16) = v45;
            v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_25:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((_BYTE *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_25;
    }
  }
LABEL_7:
  v14 = (char *)a1 + v5;
  v15 = *(unsigned __int16 *)((char *)a1 + v5);
  if (v15 <= 6)
  {
    *(_DWORD *)(a2 + 24) = 0;
  }
  else
  {
    v16 = *((unsigned __int16 *)v14 + 3);
    if (*((_WORD *)v14 + 3))
      LODWORD(v16) = *(int *)((char *)a1 + v16);
    *(_DWORD *)(a2 + 24) = v16;
    if (v15 >= 9)
    {
      v17 = *((unsigned __int16 *)v14 + 4);
      if (v17)
      {
        v18 = (char *)a1 + v17;
        v19 = *(unsigned int *)((char *)a1 + v17);
        v21 = &v18[v19 + 4];
        v20 = *(unsigned int *)&v18[v19];
        if (v20 >= 0x17)
        {
          if ((v20 | 7) == 0x17)
            v37 = (v20 & 0xFFFFFFF8) + 8;
          else
            v37 = v20 | 7;
          v22 = (__int128 *)operator new(v37 + 1);
          *((_QWORD *)&__dst + 1) = v20;
          v45 = v37 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)&__dst = v22;
        }
        else
        {
          HIBYTE(v45) = *(_DWORD *)&v18[v19];
          v22 = &__dst;
          if (!(_DWORD)v20)
          {
LABEL_40:
            *((_BYTE *)v22 + v20) = 0;
            v38 = (void **)(a2 + 32);
            if (*(char *)(a2 + 55) < 0)
              operator delete(*v38);
            result.n128_u64[0] = __dst;
            *(_OWORD *)v38 = __dst;
            *(_QWORD *)(a2 + 48) = v45;
            v23 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v23 < 0xBu)
              goto LABEL_43;
            goto LABEL_17;
          }
        }
        memcpy(v22, v21, v20);
        goto LABEL_40;
      }
    }
  }
  v23 = (unsigned __int16 *)((char *)a1 + v5);
  if (*v23 < 0xBu)
    goto LABEL_43;
LABEL_17:
  v24 = v23[5];
  if (!v23[5])
  {
LABEL_43:
    v39 = *(_QWORD *)(a2 + 56);
    if (*(_QWORD *)(a2 + 64) != v39)
      *(_QWORD *)(a2 + 64) = v39;
    return result;
  }
  v25 = *(unsigned int *)((char *)a1 + v24);
  v26 = *(_QWORD *)(a2 + 56);
  v27 = *(unsigned int *)((char *)a1 + v24 + v25);
  v28 = (*(_QWORD *)(a2 + 64) - v26) >> 2;
  if (v27 <= v28)
  {
    if (v27 < v28)
      *(_QWORD *)(a2 + 64) = v26 + 4 * v27;
  }
  else
  {
    std::vector<Device>::__append((std::vector<int> *)(a2 + 56), v27 - v28);
    LODWORD(v27) = *(int *)((char *)a1 + v24 + v25);
  }
  if ((_DWORD)v27)
  {
    v30 = *(__n128 **)(a2 + 56);
    v31 = v27;
    if (v27 < 0xC || (unint64_t)((char *)v30 - ((char *)a1 + v24) - v25 - 4) < 0x20)
    {
      v32 = 0;
LABEL_32:
      v33 = (int *)((char *)&a1[v32 + 1] + v25 + v24);
      v34 = (_DWORD *)v30 + v32;
      v35 = v31 - v32;
      do
      {
        v36 = *v33++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
      return result;
    }
    v32 = v27 & 0xFFFFFFF8;
    v40 = (__n128 *)((char *)a1 + v25 + v24 + 20);
    v41 = v30 + 1;
    v42 = v31 & 0xFFFFFFF8;
    do
    {
      result = v40[-1];
      v43 = *v40;
      v41[-1] = result;
      *v41 = v43;
      v40 += 2;
      v41 += 2;
      v42 -= 8;
    }
    while (v42);
    if (v32 != v31)
      goto LABEL_32;
  }
  return result;
}

double MpsGraphInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  __int128 *p_dst;
  double result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  unsigned int v41;
  char *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 __dst;
  uint64_t v48;

  v4 = *a1;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    v7 = v6[2];
    if (v7)
    {
      v8 = (char *)a1 + v7;
      v9 = *(unsigned int *)((char *)a1 + v7);
      v11 = &v8[v9 + 4];
      v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17)
          v34 = (v10 & 0xFFFFFFF8) + 8;
        else
          v34 = v10 | 7;
        p_dst = (__int128 *)operator new(v34 + 1);
        *((_QWORD *)&__dst + 1) = v10;
        v48 = v34 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v48) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!(_DWORD)v10)
        {
          *((_BYTE *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            result = *(double *)&__dst;
            *(_OWORD *)a2 = __dst;
            *(_QWORD *)(a2 + 16) = v48;
            v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_37:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((_BYTE *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_37;
    }
  }
LABEL_7:
  if (*(unsigned __int16 *)((char *)a1 + v5) >= 7u)
  {
    v14 = *(unsigned __int16 *)((char *)a1 + v5 + 6);
    if (*(_WORD *)((char *)a1 + v5 + 6))
    {
      v15 = (char *)a1 + v14;
      v16 = *(unsigned int *)((char *)a1 + v14);
      v18 = &v15[v16 + 4];
      v17 = *(unsigned int *)&v15[v16];
      if (v17 >= 0x17)
      {
        if ((v17 | 7) == 0x17)
          v35 = (v17 & 0xFFFFFFF8) + 8;
        else
          v35 = v17 | 7;
        v19 = (__int128 *)operator new(v35 + 1);
        *((_QWORD *)&__dst + 1) = v17;
        v48 = v35 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v19;
      }
      else
      {
        HIBYTE(v48) = *(_DWORD *)&v15[v16];
        v19 = &__dst;
        if (!(_DWORD)v17)
        {
          *((_BYTE *)&__dst + v17) = 0;
          v20 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0)
          {
LABEL_12:
            result = *(double *)&__dst;
            *(_OWORD *)v20 = __dst;
            *(_QWORD *)(v20 + 16) = v48;
            v5 = -(uint64_t)*a1;
            goto LABEL_13;
          }
LABEL_43:
          operator delete(*(void **)v20);
          goto LABEL_12;
        }
      }
      memcpy(v19, v18, v17);
      *((_BYTE *)v19 + v17) = 0;
      v20 = a2 + 24;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_43;
    }
  }
LABEL_13:
  v21 = (unsigned __int16 *)((char *)a1 + v5);
  v22 = *v21;
  if (v22 <= 8)
  {
    *(_QWORD *)(a2 + 48) = 0;
LABEL_24:
    *(_BYTE *)(a2 + 56) = 0;
LABEL_25:
    v32 = *(_QWORD *)(a2 + 64);
    v33 = *(_QWORD *)(a2 + 72);
    if (v33 != v32)
    {
      do
      {
        if (*(char *)(v33 - 1) < 0)
          operator delete(*(void **)(v33 - 24));
        v33 -= 24;
      }
      while (v33 != v32);
      *(_QWORD *)(a2 + 72) = v32;
    }
    return result;
  }
  v23 = v21[4];
  if (v21[4])
    v23 = *(_QWORD *)((char *)a1 + v23);
  *(_QWORD *)(a2 + 48) = v23;
  if (v22 < 0xB)
    goto LABEL_24;
  v24 = v21[5];
  if (v21[5])
    LOBYTE(v24) = *((_BYTE *)a1 + v24) != 0;
  *(_BYTE *)(a2 + 56) = v24;
  if (v22 < 0xD)
    goto LABEL_25;
  v25 = v21[6];
  if (!v25)
    goto LABEL_25;
  v26 = (int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
  v27 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 72);
  v28 = (_QWORD *)(a2 + 64);
  v30 = *v26;
  v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v27) >> 3);
  if (v30 <= v31)
  {
    if (v30 < v31)
    {
      v36 = v27 + 24 * v30;
      while (v29 != v36)
      {
        if (*(char *)(v29 - 1) < 0)
          operator delete(*(void **)(v29 - 24));
        v29 -= 24;
      }
      *(_QWORD *)(a2 + 72) = v36;
    }
  }
  else
  {
    std::vector<std::string>::__append((std::vector<std::string> *)(a2 + 64), v30 - v31);
  }
  if (*v26)
  {
    v37 = 0;
    v38 = 0;
    v39 = v26;
    v40 = v26;
    do
    {
      v41 = v40[1];
      ++v40;
      v42 = (char *)v39 + v41;
      v43 = *((unsigned int *)v42 + 1);
      if (v43 >= 0x17)
      {
        if ((v43 | 7) == 0x17)
          v46 = (v43 & 0xFFFFFFF8) + 8;
        else
          v46 = v43 | 7;
        v44 = (__int128 *)operator new(v46 + 1);
        *((_QWORD *)&__dst + 1) = v43;
        v48 = v46 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v44;
      }
      else
      {
        HIBYTE(v48) = *((_DWORD *)v42 + 1);
        v44 = &__dst;
        if (!(_DWORD)v43)
        {
          *((_BYTE *)&__dst + v43) = 0;
          v45 = *v28 + v37;
          if (*(char *)(v45 + 23) < 0)
            goto LABEL_63;
          goto LABEL_53;
        }
      }
      memcpy(v44, v42 + 8, v43);
      *((_BYTE *)v44 + v43) = 0;
      v45 = *v28 + v37;
      if (*(char *)(v45 + 23) < 0)
LABEL_63:
        operator delete(*(void **)v45);
LABEL_53:
      result = *(double *)&__dst;
      *(_OWORD *)v45 = __dst;
      *(_QWORD *)(v45 + 16) = v48;
      ++v38;
      v37 += 24;
      v39 = v40;
    }
    while (v38 < *v26);
  }
  return result;
}

double JitCallOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  __int128 *p_dst;
  double result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  unsigned int v38;
  char *v39;
  size_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  _DWORD *v46;
  std::vector<std::string>::pointer begin;
  std::vector<std::string> *v48;
  std::vector<std::string>::pointer end;
  unint64_t v50;
  unint64_t v51;
  std::string *v52;
  std::vector<std::string>::pointer v53;
  std::string *v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  unsigned int v59;
  char *v60;
  size_t v61;
  __int128 *v62;
  std::string *v63;
  uint64_t v64;
  std::vector<std::string> *v65;
  __int128 __dst;
  uint64_t v67;

  v4 = *a1;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    v7 = v6[2];
    if (v7)
    {
      v8 = (char *)a1 + v7;
      v9 = *(unsigned int *)((char *)a1 + v7);
      v11 = &v8[v9 + 4];
      v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17)
          v31 = (v10 & 0xFFFFFFF8) + 8;
        else
          v31 = v10 | 7;
        p_dst = (__int128 *)operator new(v31 + 1);
        *((_QWORD *)&__dst + 1) = v10;
        v67 = v31 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v67) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!(_DWORD)v10)
        {
          *((_BYTE *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            result = *(double *)&__dst;
            *(_OWORD *)a2 = __dst;
            *(_QWORD *)(a2 + 16) = v67;
            v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_28:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((_BYTE *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_28;
    }
  }
LABEL_7:
  if (*(unsigned __int16 *)((char *)a1 + v5) >= 7u)
  {
    v14 = *(unsigned __int16 *)((char *)a1 + v5 + 6);
    if (*(_WORD *)((char *)a1 + v5 + 6))
    {
      v15 = (char *)a1 + v14;
      v16 = *(unsigned int *)((char *)a1 + v14);
      v18 = &v15[v16 + 4];
      v17 = *(unsigned int *)&v15[v16];
      if (v17 >= 0x17)
      {
        if ((v17 | 7) == 0x17)
          v32 = (v17 & 0xFFFFFFF8) + 8;
        else
          v32 = v17 | 7;
        v19 = (__int128 *)operator new(v32 + 1);
        *((_QWORD *)&__dst + 1) = v17;
        v67 = v32 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v19;
      }
      else
      {
        HIBYTE(v67) = *(_DWORD *)&v15[v16];
        v19 = &__dst;
        if (!(_DWORD)v17)
        {
          *((_BYTE *)&__dst + v17) = 0;
          v20 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0)
          {
LABEL_12:
            result = *(double *)&__dst;
            *(_OWORD *)v20 = __dst;
            *(_QWORD *)(v20 + 16) = v67;
            v5 = -(uint64_t)*a1;
            goto LABEL_13;
          }
LABEL_34:
          operator delete(*(void **)v20);
          goto LABEL_12;
        }
      }
      memcpy(v19, v18, v17);
      *((_BYTE *)v19 + v17) = 0;
      v20 = a2 + 24;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_34;
    }
  }
LABEL_13:
  v21 = (unsigned __int16 *)((char *)a1 + v5);
  v65 = (std::vector<std::string> *)a2;
  if (*v21 >= 9u && (v22 = v21[4]) != 0)
  {
    v23 = (int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    v24 = *(_QWORD *)(a2 + 48);
    v26 = *(_QWORD *)(a2 + 56);
    v25 = (_QWORD *)(a2 + 48);
    v27 = *v23;
    v28 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v24) >> 3);
    if (v27 <= v28)
    {
      if (v27 < v28)
      {
        v33 = v24 + 24 * v27;
        while (v26 != v33)
        {
          if (*(char *)(v26 - 1) < 0)
            operator delete(*(void **)(v26 - 24));
          v26 -= 24;
        }
        *(_QWORD *)(a2 + 56) = v33;
      }
    }
    else
    {
      std::vector<std::string>::__append((std::vector<std::string> *)(a2 + 48), v27 - v28);
    }
    if (*v23)
    {
      v34 = 0;
      v35 = 0;
      v36 = v23;
      v37 = v23;
      do
      {
        v38 = v37[1];
        ++v37;
        v39 = (char *)v36 + v38;
        v40 = *((unsigned int *)v39 + 1);
        if (v40 >= 0x17)
        {
          if ((v40 | 7) == 0x17)
            v43 = (v40 & 0xFFFFFFF8) + 8;
          else
            v43 = v40 | 7;
          v41 = (__int128 *)operator new(v43 + 1);
          *((_QWORD *)&__dst + 1) = v40;
          v67 = v43 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)&__dst = v41;
        }
        else
        {
          HIBYTE(v67) = *((_DWORD *)v39 + 1);
          v41 = &__dst;
          if (!(_DWORD)v40)
          {
            *((_BYTE *)&__dst + v40) = 0;
            v42 = *v25 + v34;
            if (*(char *)(v42 + 23) < 0)
              goto LABEL_54;
            goto LABEL_44;
          }
        }
        memcpy(v41, v39 + 8, v40);
        *((_BYTE *)v41 + v40) = 0;
        v42 = *v25 + v34;
        if (*(char *)(v42 + 23) < 0)
LABEL_54:
          operator delete(*(void **)v42);
LABEL_44:
        result = *(double *)&__dst;
        *(_OWORD *)v42 = __dst;
        *(_QWORD *)(v42 + 16) = v67;
        ++v35;
        v34 += 24;
        v36 = v37;
      }
      while (v35 < *v23);
    }
  }
  else
  {
    v29 = *(_QWORD *)(a2 + 48);
    v30 = *(_QWORD *)(a2 + 56);
    if (v30 != v29)
    {
      do
      {
        if (*(char *)(v30 - 1) < 0)
          operator delete(*(void **)(v30 - 24));
        v30 -= 24;
      }
      while (v30 != v29);
      *(_QWORD *)(a2 + 56) = v29;
    }
  }
  v44 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v44 >= 0xBu && (v45 = v44[5]) != 0)
  {
    v46 = (int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
    begin = v65[3].__begin_;
    end = v65[3].__end_;
    v48 = v65 + 3;
    v50 = *v46;
    v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
    if (v50 <= v51)
    {
      if (v50 < v51)
      {
        v54 = &begin[v50];
        while (end != v54)
        {
          if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(end[-1].__r_.__value_.__l.__data_);
          --end;
        }
        v65[3].__end_ = v54;
      }
    }
    else
    {
      std::vector<std::string>::__append(v65 + 3, v50 - v51);
    }
    if (*v46)
    {
      v55 = 0;
      v56 = 0;
      v57 = v46;
      v58 = v46;
      do
      {
        v59 = v58[1];
        ++v58;
        v60 = (char *)v57 + v59;
        v61 = *((unsigned int *)v60 + 1);
        if (v61 >= 0x17)
        {
          if ((v61 | 7) == 0x17)
            v64 = (v61 & 0xFFFFFFF8) + 8;
          else
            v64 = v61 | 7;
          v62 = (__int128 *)operator new(v64 + 1);
          *((_QWORD *)&__dst + 1) = v61;
          v67 = v64 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)&__dst = v62;
        }
        else
        {
          HIBYTE(v67) = *((_DWORD *)v60 + 1);
          v62 = &__dst;
          if (!(_DWORD)v61)
          {
            *((_BYTE *)&__dst + v61) = 0;
            v63 = &v48->__begin_[v55];
            if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_84;
            goto LABEL_74;
          }
        }
        memcpy(v62, v60 + 8, v61);
        *((_BYTE *)v62 + v61) = 0;
        v63 = &v48->__begin_[v55];
        if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0)
LABEL_84:
          operator delete(v63->__r_.__value_.__l.__data_);
LABEL_74:
        result = *(double *)&__dst;
        *(_OWORD *)&v63->__r_.__value_.__l.__data_ = __dst;
        v63->__r_.__value_.__r.__words[2] = v67;
        ++v56;
        ++v55;
        v57 = v58;
      }
      while (v56 < *v46);
    }
  }
  else
  {
    v52 = v65[3].__begin_;
    v53 = v65[3].__end_;
    if (v53 != v52)
    {
      do
      {
        if (SHIBYTE(v53[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53[-1].__r_.__value_.__l.__data_);
        --v53;
      }
      while (v53 != v52);
      v65[3].__end_ = v52;
    }
  }
  return result;
}

void std::default_delete<KernelInfoT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a2)
  {
    v2 = *(_QWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v2)
    {
      v3 = (void *)v2[11];
      if (v3)
      {
        v2[12] = v3;
        operator delete(v3);
      }
      v4 = (void *)v2[7];
      if (v4)
      {
        v2[8] = v4;
        operator delete(v4);
      }
      v5 = (void *)v2[4];
      if (v5)
      {
        v2[5] = v5;
        operator delete(v5);
      }
      v6 = (void *)v2[1];
      if (v6)
      {
        v2[2] = v6;
        operator delete(v6);
      }
      MEMORY[0x19401CD90](v2, 0x1010C40FAD225F3);
    }
    JUMPOUT(0x19401CD90);
  }
}

unsigned __int8 *E5RT_FB::OperandUnion::Reset(unsigned __int8 *this)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;

  v1 = (uint64_t)this;
  v2 = *this;
  if (v2 == 2)
  {
    v10 = (_QWORD *)*((_QWORD *)this + 1);
    if (v10)
    {
      v11 = (void *)v10[3];
      if (v11)
      {
        v10[4] = v11;
        operator delete(v11);
      }
      v8 = v10;
      v9 = 0x1010C40AD2CAC56;
      goto LABEL_17;
    }
  }
  else if (v2 == 1)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    if (v3)
    {
      v4 = (void *)v3[9];
      if (v4)
      {
        v3[10] = v4;
        operator delete(v4);
      }
      v5 = (void *)v3[4];
      if (v5)
      {
        v3[5] = v5;
        operator delete(v5);
      }
      v6 = (void *)v3[1];
      if (v6)
      {
        v3[2] = v6;
        operator delete(v6);
      }
      v7 = *v3;
      *v3 = 0;
      if (v7)
        MEMORY[0x19401CD90](v7, 0x1000C404A09149ALL);
      v8 = v3;
      v9 = 0x1030C406E9DCED3;
LABEL_17:
      this = (unsigned __int8 *)MEMORY[0x19401CD90](v8, v9);
    }
  }
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)v1 = 0;
  return this;
}

void std::default_delete<AneInferenceOpT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 56);
    if (v3)
    {
      v4 = *(_QWORD *)(a2 + 64);
      v5 = *(void **)(a2 + 56);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0)
            operator delete(*(void **)(v4 - 24));
          v4 -= 24;
        }
        while (v4 != v3);
        v5 = *(void **)(a2 + 56);
      }
      *(_QWORD *)(a2 + 64) = v3;
      operator delete(v5);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*(void **)(a2 + 24));
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
LABEL_16:
        JUMPOUT(0x19401CD90);
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(*(void **)a2);
    goto LABEL_16;
  }
}

void std::default_delete<MpsGraphInferenceOpT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 64);
    if (v3)
    {
      v4 = *(_QWORD *)(a2 + 72);
      v5 = *(void **)(a2 + 64);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0)
            operator delete(*(void **)(v4 - 24));
          v4 -= 24;
        }
        while (v4 != v3);
        v5 = *(void **)(a2 + 64);
      }
      *(_QWORD *)(a2 + 72) = v3;
      operator delete(v5);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*(void **)(a2 + 24));
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
LABEL_16:
        JUMPOUT(0x19401CD90);
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(*(void **)a2);
    goto LABEL_16;
  }
}

void BnnsCpuInferenceOpT::~BnnsCpuInferenceOpT(BnnsCpuInferenceOpT *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 39) < 0)
  {
    operator delete(*((void **)this + 2));
    v5 = *(unsigned __int8 *)this;
    if (v5 == 2)
      goto LABEL_14;
LABEL_13:
    if (v5 != 1)
      goto LABEL_18;
    goto LABEL_14;
  }
  v5 = *(unsigned __int8 *)this;
  if (v5 != 2)
    goto LABEL_13;
LABEL_14:
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x19401CD90](v6, 0x1012C40EC159624);
  }
LABEL_18:
  *((_QWORD *)this + 1) = 0;
  *(_BYTE *)this = 0;
}

void JitCallOpT::~JitCallOpT(JitCallOpT *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *((_QWORD *)this + 10);
    v4 = (void *)*((_QWORD *)this + 9);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    v7 = (void *)*((_QWORD *)this + 6);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v5;
    operator delete(v7);
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    goto LABEL_21;
}

uint64_t E5MinimalCpuOp::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int *v25;
  char *v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;

  v2 = *a2;
  v3 = (char *)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5))
    return 0;
  v13 = (unint64_t)&v3[-v9];
  if ((((_DWORD)v3 - (_DWORD)v9) & 1) != 0)
  {
    v14 = 0;
    if (v4 || v6 - 2 < v13)
      return v14;
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1)
    return 0;
  v8 = v6 >= v15;
  v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u)
    goto LABEL_57;
  v20 = v19[2];
  if (!v19[2])
    goto LABEL_57;
  v14 = 0;
  v21 = (unint64_t)&v3[v20];
  v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24)
      return 0;
    v14 = 0;
    v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    v26 = (char *)v25 - v2;
    v27 = (((unint64_t)v25 - v2) & 3) == 0 || v4 == 0;
    v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      v29 = *v25;
      if (v29 > 0x7FFFFFFE)
        return 0;
      v30 = v29 + 4;
      v31 = (unint64_t)&v26[v29 + 4];
      v32 = v6 - 1 >= v31 && v6 > v30;
      v33 = v32 && v6 - v30 >= (unint64_t)v26;
      if (!v33 || *(_BYTE *)(v2 + v31))
        return 0;
LABEL_57:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v14;
}

void std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAD1A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAD1A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFbRN11flatbuffers8VerifierEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFbRN11flatbuffers8VerifierEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFbRN11flatbuffers8VerifierEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFbRN11flatbuffers8VerifierEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::target_type()
{
}

void std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACD80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACD80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrI11KernelInfoTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrI11KernelInfoTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrI11KernelInfoTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrI11KernelInfoTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<AneInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<AneInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<AneInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2978;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<AneInferenceOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100AEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<AneInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<AneInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5D98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_pointer<AneInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<AneInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI15AneInferenceOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI15AneInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI15AneInferenceOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI15AneInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<AneInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<AneInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<AneInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<AneInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<AneInferenceOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<AneInferenceOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<BnnsCpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2A90;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100B5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<BnnsCpuInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

BnnsCpuInferenceOpT *std::__shared_ptr_pointer<BnnsCpuInferenceOpT  *>::__on_zero_shared(uint64_t a1)
{
  BnnsCpuInferenceOpT *result;

  result = *(BnnsCpuInferenceOpT **)(a1 + 24);
  if (result)
  {
    BnnsCpuInferenceOpT::~BnnsCpuInferenceOpT(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<BnnsCpuInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI19BnnsCpuInferenceOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI19BnnsCpuInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI19BnnsCpuInferenceOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI19BnnsCpuInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A810;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A8A0;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<CpuInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<CpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<CpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC29B0;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<CpuInferenceOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100BE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<CpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<CpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<CpuInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<CpuInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<CpuInferenceOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 47) < 0)
    {
      operator delete(*(void **)(v1 + 24));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_8:
        JUMPOUT(0x19401CD90);
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)v1);
    goto LABEL_8;
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CpuInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI15CpuInferenceOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI15CpuInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI15CpuInferenceOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI15CpuInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A470;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A500;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<CpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<CpuInferenceOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

BOOL EirInferenceOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _BOOL8 result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t v40;
  unint64_t v41;
  _BOOL4 v43;
  uint64_t v44;
  unsigned int *v45;
  char *v46;
  BOOL v47;
  _BOOL4 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned int *v54;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20))
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  v21 = *v20;
  if (v21 < 5)
    goto LABEL_95;
  v22 = v20[2];
  if (v20[2])
  {
    result = 0;
    v23 = &v3[v22];
    v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25)
      return result;
    v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26])
      return 0;
    result = 0;
    v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    v28 = (char *)v27 - v2;
    v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    v30 = v29;
    if (v8 < (unint64_t)v28 || !v30)
      return result;
    v31 = *v27;
    if (v31 > 0x7FFFFFFE)
      return 0;
    v32 = v31 + 4;
    v33 = (unint64_t)&v28[v31 + 4];
    v34 = v7 - 1 >= v33 && v7 > v32;
    v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(_BYTE *)(v2 + v33))
      return 0;
  }
  if (v21 < 7)
    goto LABEL_95;
  v36 = v20[3];
  if (v20[3])
  {
    result = 0;
    v37 = &v3[v36];
    v38 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
    v39 = v38;
    if (v8 < (unint64_t)v37 || !v39)
      return result;
  }
  if (v21 < 9)
    goto LABEL_95;
  v40 = v20[4];
  if (!v40)
    goto LABEL_95;
  result = 0;
  v41 = (unint64_t)&v3[v40];
  v43 = (v41 & 3) == 0 || v4 == 0;
  if (v8 >= v41 && v43)
  {
    v44 = *(unsigned int *)(v2 + v41);
    if ((int)v44 < 1 || v7 - 1 < v41 + v44)
      return 0;
    result = 0;
    v45 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
    v46 = (char *)v45 - v2;
    v47 = (((unint64_t)v45 - v2) & 3) == 0 || v4 == 0;
    v48 = v47;
    if (v8 >= (unint64_t)v46 && v48)
    {
      v49 = *v45;
      if (v49 > 0x7FFFFFFE)
        return 0;
      result = 0;
      v50 = v49 + 4;
      v51 = (unint64_t)&v46[v49 + 4];
      if (v7 - 1 < v51 || v7 <= v50 || v7 - v50 < (unint64_t)v46)
        return result;
      if (*(_BYTE *)(v2 + v51))
        return 0;
LABEL_95:
      result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
      if (result)
      {
        v52 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v52 >= 0xBu && (v53 = v52[5]) != 0)
          v54 = (unsigned int *)((char *)a1 + v53 + *(unsigned int *)((char *)a1 + v53));
        else
          v54 = 0;
        result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v54);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
  }
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<EirInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<EirInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<EirInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2A20;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<EirInferenceOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100C960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<EirInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<EirInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<EirInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<EirInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<EirInferenceOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 56);
    if (v2)
    {
      *(_QWORD *)(v1 + 64) = v2;
      operator delete(v2);
    }
    if (*(char *)(v1 + 55) < 0)
    {
      operator delete(*(void **)(v1 + 32));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_10:
        JUMPOUT(0x19401CD90);
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)v1);
    goto LABEL_10;
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EirInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI15EirInferenceOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI15EirInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI15EirInferenceOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI15EirInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A640;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A6D0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_19100CC38(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19100CC54(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A640;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A6D0;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<EirInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<EirInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<EirInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<EirInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<EirInferenceOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<EirInferenceOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<CastOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<CastOpT>,std::string const&,OpCode &,std::unique_ptr<CastOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2B00;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<CastOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100D40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<CastOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<CastOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_pointer<CastOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<CastOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI7CastOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI7CastOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI7CastOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI7CastOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<CastOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<CastOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<CastOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<CastOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<CastOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<CastOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<CastOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

uint64_t QuantOp::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  unsigned int *v30;
  char *v31;
  BOOL v32;
  _BOOL4 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v2 = *a2;
  v3 = (char *)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12)
    return 0;
  v13 = (unint64_t)&v3[-v9];
  if ((((_DWORD)v3 - (_DWORD)v9) & 1) != 0)
  {
    v14 = 0;
    if (v4 || v6 - 2 < v13)
      return v14;
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1)
    return 0;
  v8 = v6 >= v15;
  v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  v20 = *v19;
  if (v20 < 5)
    goto LABEL_61;
  v21 = v19[2];
  if (!v19[2]
    || ((v14 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (v23 = v4 == 0) : (v23 = 1),
        !v23 ? (v24 = 0) : (v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7)
      goto LABEL_61;
    v25 = v19[3];
    if (!v25)
      goto LABEL_61;
    v14 = 0;
    v26 = (unint64_t)&v3[v25];
    v27 = (v26 & 3) == 0 || v4 == 0;
    v28 = v27;
    if (v7 >= v26 && v28)
    {
      v29 = *(unsigned int *)(v2 + v26);
      if ((int)v29 < 1 || v6 - 1 < v26 + v29)
        return 0;
      v14 = 0;
      v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
      v31 = (char *)v30 - v2;
      v32 = (v31 & 3) == 0 || v4 == 0;
      v33 = v32;
      if (v7 >= (unint64_t)v31 && v33)
      {
        v34 = *v30;
        if (v34 > 0x1FFFFFFE)
          return 0;
        v14 = 0;
        v35 = 4 * v34 + 4;
        v12 = v6 > v35;
        v36 = v6 - v35;
        if (v12 && v36 >= (unint64_t)v31)
        {
LABEL_61:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return v14;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<QuantOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<QuantOpT>,std::string const&,OpCode &,std::unique_ptr<QuantOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2B38;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<QuantOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100DCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<QuantOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<QuantOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5F58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<QuantOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<QuantOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<QuantOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(_QWORD *)(v1 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QuantOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI8QuantOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI8QuantOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI8QuantOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI8QuantOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5AAC8;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5AB58;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_19100DF7C(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19100DF98(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5AAC8;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5AB58;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<QuantOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<QuantOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<QuantOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<QuantOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<QuantOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<QuantOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<DequantOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<DequantOpT>,std::string const&,OpCode &,std::unique_ptr<DequantOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2908;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<DequantOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100E750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<DequantOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<DequantOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5D28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<DequantOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<DequantOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<DequantOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(_QWORD *)(v1 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DequantOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI10DequantOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI10DequantOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI10DequantOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI10DequantOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A1B8;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A248;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_19100E9FC(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19100EA18(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A1B8;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A248;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<DequantOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<DequantOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<DequantOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<DequantOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<DequantOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<DequantOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<MlcCpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<MlcCpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2A58;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<MlcCpuInferenceOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100F1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<MlcCpuInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<MlcCpuInferenceOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MlcCpuInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI18MlcCpuInferenceOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI18MlcCpuInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI18MlcCpuInferenceOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI18MlcCpuInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A728;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A7B8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_19100F47C(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19100F498(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A728;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A7B8;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<MlcCpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

uint64_t MpsGraphInferenceOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int *v41;
  char *v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned int *v54;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20))
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  v21 = *v20;
  if (v21 < 5)
    goto LABEL_92;
  v22 = v20[2];
  if (v20[2])
  {
    result = 0;
    v23 = &v3[v22];
    v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25)
      return result;
    v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26])
      return 0;
    result = 0;
    v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    v28 = (char *)v27 - v2;
    v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    v30 = v29;
    if (v8 < (unint64_t)v28 || !v30)
      return result;
    v31 = *v27;
    if (v31 > 0x7FFFFFFE)
      return 0;
    v32 = v31 + 4;
    v33 = (unint64_t)&v28[v31 + 4];
    v34 = v7 - 1 >= v33 && v7 > v32;
    v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(_BYTE *)(v2 + v33))
      return 0;
  }
  if (v21 < 7)
    goto LABEL_92;
  v36 = v20[3];
  if (v20[3])
  {
    result = 0;
    v37 = &v3[v36];
    v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v37 || !v39)
      return result;
    v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40])
      return 0;
    result = 0;
    v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    v42 = (char *)v41 - v2;
    v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    v44 = v43;
    if (v8 < (unint64_t)v42 || !v44)
      return result;
    v45 = *v41;
    if (v45 > 0x7FFFFFFE)
      return 0;
    result = 0;
    v46 = v45 + 4;
    v47 = (unint64_t)&v42[v45 + 4];
    if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42)
      return result;
    if (*(_BYTE *)(v2 + v47))
      return 0;
  }
  if (v21 < 9)
  {
LABEL_92:
    result = flatbuffers::Table::VerifyOffset(a1, a2, 0xCu);
    if ((_DWORD)result)
    {
      v49 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v49 >= 0xDu && (v50 = v49[6]) != 0)
        v51 = (unsigned int *)((char *)a1 + v50 + *(unsigned int *)((char *)a1 + v50));
      else
        v51 = 0;
      result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v51);
      if ((_DWORD)result)
      {
        v52 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v52 >= 0xDu && (v53 = v52[6]) != 0)
          v54 = (unsigned int *)((char *)a1 + v53 + *(unsigned int *)((char *)a1 + v53));
        else
          v54 = 0;
        result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v54);
        if ((_DWORD)result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
    return result;
  }
  if (!v20[4])
    goto LABEL_91;
  v48 = (unint64_t)&v3[v20[4]];
  if ((v48 & 7) != 0 && v4)
    return 0;
  result = 0;
  if (v7 >= 9 && v7 - 8 >= v48)
  {
LABEL_91:
    if (v21 >= 0xB && v20[5] && v7 - 1 < (unint64_t)&v3[v20[5]])
      return 0;
    goto LABEL_92;
  }
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<MpsGraphInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<MpsGraphInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2AC8;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<MpsGraphInferenceOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19100FF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<MpsGraphInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_pointer<MpsGraphInferenceOpT  *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<MpsGraphInferenceOpT>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<MpsGraphInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI20MpsGraphInferenceOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI20MpsGraphInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI20MpsGraphInferenceOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI20MpsGraphInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A8F8;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A988;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_191010200(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19101021C(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A8F8;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A988;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<MpsGraphInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

uint64_t JitCallOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int *v41;
  char *v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BOOL4 v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned __int16 *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int *v62;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v12 = *a1;
  v13 = *(_DWORD *)(a2 + 40) + 1;
  v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20))
    return 0;
  v16 = (unint64_t)&v3[-v12];
  if ((v16 & 1) != 0)
  {
    result = 0;
    if (v4 || v7 - 2 < v16)
      return result;
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1)
    return 0;
  v9 = v7 >= v17;
  v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16)
    return 0;
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  v21 = *v20;
  if (v21 < 5)
    goto LABEL_96;
  v22 = v20[2];
  if (v20[2])
  {
    result = 0;
    v23 = &v3[v22];
    v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25)
      return result;
    v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26])
      return 0;
    result = 0;
    v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    v28 = (char *)v27 - v2;
    v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    v30 = v29;
    if (v8 < (unint64_t)v28 || !v30)
      return result;
    v31 = *v27;
    if (v31 > 0x7FFFFFFE)
      return 0;
    v32 = v31 + 4;
    v33 = (unint64_t)&v28[v31 + 4];
    v34 = v7 - 1 >= v33 && v7 > v32;
    v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(_BYTE *)(v2 + v33))
      return 0;
  }
  if (v21 < 7)
    goto LABEL_96;
  v36 = v20[3];
  if (!v20[3])
  {
LABEL_83:
    if (v21 >= 9)
    {
      v48 = v20[4];
      if (v48)
      {
        result = 0;
        v49 = (unint64_t)&v3[v48];
        v51 = (v49 & 3) == 0 || v4 == 0;
        if (v8 < v49 || !v51)
          return result;
        v52 = *(unsigned int *)(v2 + v49);
        if ((int)v52 < 1 || v7 - 1 < v49 + v52)
          return 0;
        v53 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        goto LABEL_97;
      }
    }
LABEL_96:
    v53 = 0;
LABEL_97:
    result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v53);
    if ((_DWORD)result)
    {
      v54 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v54 >= 9u && (v55 = v54[4]) != 0)
        v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
      else
        v56 = 0;
      result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v56);
      if ((_DWORD)result)
      {
        result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
        if ((_DWORD)result)
        {
          v57 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v57 >= 0xBu && (v58 = v57[5]) != 0)
            v59 = (unsigned int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
          else
            v59 = 0;
          result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v59);
          if ((_DWORD)result)
          {
            v60 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v60 >= 0xBu && (v61 = v60[5]) != 0)
              v62 = (unsigned int *)((char *)a1 + v61 + *(unsigned int *)((char *)a1 + v61));
            else
              v62 = 0;
            result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v62);
            if ((_DWORD)result)
            {
              --*(_DWORD *)(a2 + 40);
              return 1;
            }
          }
        }
      }
    }
    return result;
  }
  result = 0;
  v37 = &v3[v36];
  v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40])
      return 0;
    result = 0;
    v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    v42 = (char *)v41 - v2;
    v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      v45 = *v41;
      if (v45 > 0x7FFFFFFE)
        return 0;
      result = 0;
      v46 = v45 + 4;
      v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42)
        return result;
      if (*(_BYTE *)(v2 + v47))
        return 0;
      goto LABEL_83;
    }
  }
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<JitCallOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<JitCallOpT>,std::string const&,OpCode &,std::unique_ptr<JitCallOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2940;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<JitCallOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_191010D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<JitCallOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<JitCallOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<JitCallOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<JitCallOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

JitCallOpT *std::__shared_ptr_pointer<JitCallOpT  *>::__on_zero_shared(uint64_t a1)
{
  JitCallOpT *result;

  result = *(JitCallOpT **)(a1 + 24);
  if (result)
  {
    JitCallOpT::~JitCallOpT(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<JitCallOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI10JitCallOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI10JitCallOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI10JitCallOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI10JitCallOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A2A0;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A330;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_191011000(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19101101C(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A2A0;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A330;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<JitCallOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<JitCallOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<JitCallOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<JitCallOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<JitCallOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<JitCallOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

void std::allocator_traits<std::allocator<E5RT::E5OperationImpl<E5MinimalCpuOpT>>>::construct[abi:ne180100]<E5RT::E5OperationImpl<E5MinimalCpuOpT>,std::string const&,OpCode &,std::unique_ptr<E5MinimalCpuOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &,void>(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v16 = *a4;
  v22 = *a5;
  if (v22)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = *a5;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC29E8;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v18;
  }
  else
  {
    v17 = 0;
  }
  v23 = v17;
  *a5 = 0;
  E5RT::E5OperationImpl<E5MinimalCpuOpT>::E5OperationImpl(a2, a3, v16, &v22, a6, a7, a8, a9, *a10, a10[1]);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1910117D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_19101249C();
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<E5MinimalCpuOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<E5MinimalCpuOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5E08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<E5MinimalCpuOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<E5MinimalCpuOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5MinimalCpuOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5MinimalCpuOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI15E5MinimalCpuOpTEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI15E5MinimalCpuOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI15E5MinimalCpuOpTEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI15E5MinimalCpuOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::E5OperationImpl(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;

  v18 = E5RT::E5Operation::E5Operation((_QWORD *)a1);
  E5RT::E5OperationBuilder::E5OperationBuilder(v18 + 1);
  *(_QWORD *)a1 = &off_1E2D5A558;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A5E8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  v20 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((_QWORD *)(a1 + 272), a7);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v23 = *(const void **)a8;
  v24 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v24)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 376) = v25;
    *(_QWORD *)(a1 + 384) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 392) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 384) = v26;
  }
  *(_QWORD *)(a1 + 400) = a9;
  *(_QWORD *)(a1 + 408) = a10;
  return a1;
}

void sub_191011A80(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_191011A9C(_Unwind_Exception *a1)
{
  char *v1;
  E5RT::AsyncEventImpl *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0)
    operator delete(*v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E2D5A558;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A5E8;
  v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 39) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<E5MinimalCpuOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

void std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACF38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACF38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrIN7E5RT_FB12OperandDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB12OperandDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrIN7E5RT_FB12OperandDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB12OperandDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

void std::__shared_ptr_emplace<E5RT::E5OperandImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperandImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::allocator<E5RT::E5OperandImpl>::construct[abi:ne180100]<E5RT::E5OperandImpl,std::string &,std::shared_ptr<E5RT::ComputeProgramSymbol const>,E5RT::AllocType &,unsigned long &,std::shared_ptr<E5RT::OperandDescriptor> &,std::unordered_set<std::string> const&>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, unsigned int *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;

  v21 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v8 = *a5;
  v9 = *a6;
  v10 = (std::__shared_weak_count *)a7[1];
  v19 = *a7;
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  E5RT::E5OperandImpl::E5OperandImpl(a2, a3, &v21, v8, v9, &v19, a8);
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_191012354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19101237C()
{
  __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
}

void sub_1910123A4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  else
  {
    OUTLINED_FUNCTION_2();
  }
}

void sub_1910123F4(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 16) && *((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
  OUTLINED_FUNCTION_2();
}

void sub_19101242C(uint64_t *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x1000C404A09149ALL);
  JUMPOUT(0x19401CD90);
}

void sub_19101249C()
{
  unint64_t *v0;
  uint64_t v1;
  int v2;

  sub_191012370();
  do
    OUTLINED_FUNCTION_8(v0);
  while (v2);
  if (!v1)
  {
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_9();
  }
  OUTLINED_FUNCTION_2();
}

void sub_1910124C8(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
  OUTLINED_FUNCTION_2();
}

const char *E5RT::GetComputeUnitName(unsigned int a1)
{
  void *exception;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1)
    return "cpu";
  if (a1 == 2)
    return "ane";
  if (a1 != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetComputeUnitName");
    std::to_string(&v6, a1);
    v4 = std::string::insert(&v6, 0, "Invalid compute unit identifier: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v8 = v4->__r_.__value_.__r.__words[2];
    v7 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v9, 1, &v7);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  return "gpu";
}

void sub_191012628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if (*(char *)(v25 - 33) < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if (*(char *)(v25 - 33) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v25 - 56));
    if ((v24 & 1) != 0)
    {
LABEL_10:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  if (v24)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t E5RT::GetComputeUnitType(uint64_t a1, uint64_t a2)
{
  void *exception;
  std::string *v7;
  __int128 v8;
  std::string __dst;
  __int128 v10;
  std::string::size_type v11;
  _BYTE v12[8];
  _QWORD v13[3];
  _QWORD v14[2];

  v14[0] = a1;
  v14[1] = a2;
  if (a2 != 3)
    goto LABEL_18;
  if (*(_WORD *)a1 == 28771 && *(_BYTE *)(a1 + 2) == 117)
    return 0;
  if (*(_WORD *)a1 == 28775 && *(_BYTE *)(a1 + 2) == 117)
    return 1;
  if (*(_WORD *)a1 != 28257 || *(_BYTE *)(a1 + 2) != 101)
  {
LABEL_18:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "GetComputeUnitType");
    std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v14);
    v7 = std::string::insert(&__dst, 0, "Invalid compute unit name: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v11 = v7->__r_.__value_.__r.__words[2];
    v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v12, 1, &v10);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  return 2;
}

void sub_191012830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if (a29 < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if (a29 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v30 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    __cxa_free_exception(v29);
    goto LABEL_10;
  }
LABEL_8:
  if (!v30)
    goto LABEL_10;
  goto LABEL_9;
}

void E5RT::ParseComputeUnits(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int ComputeUnitType;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  void *v28;
  uint64_t *v29;
  void *__p;
  char v31;
  void *v32;
  uint64_t *v33;

  v31 = 1;
  LOWORD(__p) = 44;
  E5Common::StringUtils::Split(a1, (char *)&__p, (uint64_t)&v32);
  if (v31 < 0)
  {
    operator delete(__p);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v4 = (uint64_t *)v32;
    v3 = v33;
    if (v32 == v33)
    {
LABEL_3:
      if (v4)
        goto LABEL_41;
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v4 = (uint64_t *)v32;
    v3 = v33;
    if (v32 == v33)
      goto LABEL_3;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v29 = v3;
  do
  {
    while (1)
    {
      if (*((char *)v4 + 23) < 0)
      {
        v9 = *v4;
        v8 = v4[1];
      }
      else
      {
        v8 = *((unsigned __int8 *)v4 + 23);
        v9 = (uint64_t)v4;
      }
      ComputeUnitType = E5RT::GetComputeUnitType(v9, v8);
      v11 = ComputeUnitType;
      if (v7 >= v6)
        break;
      *(_DWORD *)v7 = ComputeUnitType;
      v7 += 4;
      a2[1] = v7;
      v4 += 3;
      if (v4 == v3)
        goto LABEL_40;
    }
    v12 = (v7 - v5) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    if ((v6 - v5) >> 1 > v13)
      v13 = (v6 - v5) >> 1;
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(4 * v14);
      v16 = &v15[4 * v12];
      *(_DWORD *)v16 = v11;
      v17 = (uint64_t)(v16 + 4);
      if (v7 == v5)
        goto LABEL_26;
    }
    else
    {
      v15 = 0;
      v16 = (char *)(4 * v12);
      *(_DWORD *)(4 * v12) = v11;
      v17 = 4 * v12 + 4;
      if (v7 == v5)
        goto LABEL_26;
    }
    v18 = v7 - 4 - v5;
    if (v18 < 0xBC)
    {
      v19 = v7;
      goto LABEL_25;
    }
    if (&v15[v7 - v5 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v7 - v5 - 4])
    {
      v19 = v7;
      do
      {
LABEL_25:
        v20 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v16 - 1) = v20;
        v16 -= 4;
      }
      while (v19 != v5);
      goto LABEL_26;
    }
    if (&v7[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
    {
      v19 = v7;
      goto LABEL_25;
    }
    if ((unint64_t)(v5 - v15) < 0x20)
    {
      v19 = v7;
      goto LABEL_25;
    }
    v21 = (v18 >> 2) + 1;
    v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    v19 = &v7[-v22];
    v16 -= v22;
    v23 = &v15[4 * v12 - 16];
    v24 = v7 - 16;
    v25 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_25;
LABEL_26:
    v6 = &v15[4 * v14];
    *a2 = v16;
    a2[1] = (char *)v17;
    a2[2] = v6;
    if (v5)
      operator delete(v5);
    v5 = v16;
    v3 = v29;
    a2[1] = (char *)v17;
    v4 += 3;
    v7 = (char *)v17;
  }
  while (v4 != v29);
LABEL_40:
  v4 = (uint64_t *)v32;
  if (v32)
  {
LABEL_41:
    v27 = v33;
    v28 = v4;
    if (v33 != v4)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete((void *)*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v4);
      v28 = v32;
    }
    v33 = v4;
    operator delete(v28);
  }
}

void sub_191012B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::AOT::Utils::DoesPlatformHaveANE(uint64_t a1)
{
  return ((unint64_t)(a1 - 32784) > 5 || ((1 << (a1 - 16)) & 0x27) == 0)
      && a1 != 0
      && a1 != 28672;
}

BOOL Espresso::AOT::Utils::IsPlatformMixANE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v10;
  char *v12;
  uint64_t v13;
  _QWORD v14[11];

  v10 = (unint64_t)(a1 - 32784) <= 5 && ((1 << (a1 - 16)) & 0x27) != 0 || a1 == 0;
  if (v10 || a1 == 28672)
    return 0;
  v12 = (char *)&a9;
  if (a1 <= 32806)
  {
    if (a1 == 32774)
    {
      v13 = 2;
      goto LABEL_22;
    }
    if (a1 == 32800)
    {
      v13 = 4;
      goto LABEL_22;
    }
  }
  else
  {
    switch(a1)
    {
      case 32807:
        v13 = 5;
        goto LABEL_22;
      case 32816:
        v13 = 6;
        goto LABEL_22;
      case 33537:
        v13 = 7;
LABEL_22:
        v12 = (char *)&v14[v13];
        break;
    }
  }
  return v12 - (char *)v14 != 88;
}

BOOL Espresso::AOT::Utils::IsPlatformHThirteenANE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  uint64_t v10;
  _QWORD v12[5];

  v9 = (char *)&a9;
  if (a1 <= 24577)
  {
    if (a1 == 24576)
    {
      v10 = 0;
      goto LABEL_12;
    }
    if (a1 == 24577)
    {
      v10 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(a1)
    {
      case 24578:
        v10 = 2;
        goto LABEL_12;
      case 33025:
        v10 = 3;
        goto LABEL_12;
      case 33027:
        v10 = 4;
LABEL_12:
        v9 = (char *)&v12[v10];
        break;
    }
  }
  return v9 - (char *)v12 != 40;
}

uint64_t Espresso::AOT::Utils::HasMPSGraphAvailable(uint64_t a1)
{
  uint64_t result;

  result = 0;
  if (a1 <= 32773)
  {
    if (a1 && a1 != 28672)
      return 1;
  }
  else if (((unint64_t)(a1 - 32774) > 0xF || ((1 << (a1 - 6)) & 0x8C01) == 0)
         && a1 != 33537
         && a1 != 33552)
  {
    return 1;
  }
  return result;
}

void Espresso::AOT::Utils::GetSupportedPlatformsStr(Espresso::AOT::Utils *this)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v4;
  void *__p;
  void **v6;
  void *v7;
  char v8;

  v8 = 3;
  LODWORD(v7) = 2128928;
  v1 = E5Common::E5PlatformManager::Instance(this);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v1 + 72))(&__p);
  E5Common::StringUtils::Join((uint64_t)&v7, (uint64_t *)&__p);
  v2 = (void **)__p;
  if (__p)
  {
    v3 = v6;
    v4 = __p;
    if (v6 != __p)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = __p;
    }
    v6 = v2;
    operator delete(v4);
  }
  if (v8 < 0)
    operator delete(v7);
}

void sub_191012EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Utils::GetSupportedPlatformFamiliesStr(Espresso::AOT::Utils *this)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v4;
  void *__p;
  void **v6;
  void *v7;
  char v8;

  v8 = 3;
  LODWORD(v7) = 2128928;
  v1 = E5Common::E5PlatformManager::Instance(this);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v1 + 80))(&__p);
  E5Common::StringUtils::Join((uint64_t)&v7, (uint64_t *)&__p);
  v2 = (void **)__p;
  if (__p)
  {
    v3 = v6;
    v4 = __p;
    if (v6 != __p)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = __p;
    }
    v6 = v2;
    operator delete(v4);
  }
  if (v8 < 0)
    operator delete(v7);
}

void sub_191012F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

E5RT::E5OperandImpl *E5RT::E5OperandBuilder::Create@<X0>(_QWORD *a1@<X8>)
{
  E5RT::E5OperandImpl *v3;
  E5RT::E5OperandImpl *result;

  v3 = (E5RT::E5OperandImpl *)operator new();
  result = E5RT::E5OperandImpl::E5OperandImpl(v3);
  *a1 = (char *)v3 + 8;
  return result;
}

void sub_191013010(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10F3C40D85C1E88);
  _Unwind_Resume(a1);
}

void *E5RT::E5OperandBuilder::Finish@<X0>(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  void *result;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Operand");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_191013100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::E5OperandImpl *E5RT::E5OperandImpl::E5OperandImpl(E5RT::E5OperandImpl *this)
{
  _QWORD *v2;

  v2 = E5RT::E5Operand::E5Operand(this);
  E5RT::E5OperandBuilder::E5OperandBuilder(v2 + 1);
  *(_QWORD *)this = &off_1E2D59C88;
  *((_QWORD *)this + 1) = &unk_1E2D59D00;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  return this;
}

void sub_1910131D4(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'E5RT::E5OperandImpl::~E5OperandImpl(E5RT::E5OperandImpl *this)
{
  E5RT::E5OperandImpl::~E5OperandImpl((E5RT::E5OperandImpl *)((char *)this - 8));
}

{
  E5RT::E5OperandImpl::~E5OperandImpl((E5RT::E5OperandImpl *)((char *)this - 8));
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::E5OperandImpl::GetOperandName(E5RT::E5OperandImpl *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::E5OperandImpl::GetAllocationType(E5RT::E5OperandImpl *this)
{
  return *((unsigned int *)this + 10);
}

void E5RT::E5OperandImpl::SetOperandDesc(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperandImpl::SetOperandDesc(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

std::string *E5RT::E5OperandImpl::SetOperandName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

std::string *`non-virtual thunk to'E5RT::E5OperandImpl::SetOperandName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

uint64_t E5RT::E5OperandImpl::SetAllocationType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t `non-virtual thunk to'E5RT::E5OperandImpl::SetAllocationType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t E5RT::E5OperandImpl::SetAddr(uint64_t this, uint64_t a2)
{
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (*(_DWORD *)(this + 40) == 2)
  {
    *(_QWORD *)(this + 48) = 0;
  }
  else
  {
    if ((a2 & 0x3FFF) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v5, "SetAddr");
      std::string::basic_string[abi:ne180100]<0>(v3, "Allocation offsets should always be 16KB aligned.");
      E5RT::Status::Status(v4, 1, v3);
      E5RT::E5RTError::E5RTError(exception, v5, v4);
    }
    *(_QWORD *)(this + 48) = a2;
  }
  return this;
}

void sub_191013400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t `non-virtual thunk to'E5RT::E5OperandImpl::SetAddr(E5RT::E5OperandImpl *this, uint64_t a2)
{
  return E5RT::E5OperandImpl::SetAddr((uint64_t)this - 8, a2);
}

uint64_t *E5RT::E5OperandImpl::AddAlias(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *result;
  char v4;
  void *exception;
  void *v6;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "AddAlias");
    std::string::basic_string[abi:ne180100]<0>(v7, "Alias cannot be an empty string.");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 72, a2, a2);
  if ((v4 & 1) == 0)
  {
    v6 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "AddAlias");
    std::string::basic_string[abi:ne180100]<0>(v7, "Adding an operand alias more than once is not allowed.");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(v6, v9, v8);
  }
  return result;
}

void sub_1910135AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t *`non-virtual thunk to'E5RT::E5OperandImpl::AddAlias(uint64_t a1, uint64_t a2)
{
  return E5RT::E5OperandImpl::AddAlias(a1 - 8, a2);
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<QuantOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_191013748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<DequantOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_191013898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<MlcCpuInferenceOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_1910139E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_191013B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<EirInferenceOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_191013C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<JitCallOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_191013DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<BarrierOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_191013F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::E5Operation::GetOperationAttributes<E5MinimalCpuOpT>@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_191014078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5Common::StringUtils::Join(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22[8];
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v26[0] = MEMORY[0x1E0DE4FE0] + 64;
  v21 = v7;
  *(uint64_t *)((char *)&v22[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
  std::ios_base::init(v9, v22);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v21 = v4 + 24;
  v26[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v22[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v24 = 0u;
  v25 = 16;
  v12 = *a2;
  v11 = a2[1];
  if (v12 != v11)
  {
    v13 = *(char *)(v12 + 23);
    if (v13 >= 0)
      v14 = v12;
    else
      v14 = *(_QWORD *)v12;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v12 + 23);
    else
      v15 = *(_QWORD *)(v12 + 8);
    while (1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, v14, v15);
      v12 += 24;
      if (v12 == v11)
        break;
      v16 = *(char *)(a1 + 23);
      if (v16 >= 0)
        v17 = a1;
      else
        v17 = *(_QWORD *)a1;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(a1 + 23);
      else
        v18 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, v17, v18);
      v19 = *(char *)(v12 + 23);
      if (v19 >= 0)
        v14 = v12;
      else
        v14 = *(_QWORD *)v12;
      if (v19 >= 0)
        v15 = *(unsigned __int8 *)(v12 + 23);
      else
        v15 = *(_QWORD *)(v12 + 8);
    }
  }
  std::stringbuf::str();
  v21 = *v6;
  *(uint64_t *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24)) = v6[3];
  v22[0] = v10 + 16;
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401CCD0](v26);
}

void sub_191014298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1910142AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1910142C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1);
  _Unwind_Resume(a1);
}

void E5Common::StringUtils::Split(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  int64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  std::string::size_type v24;
  std::string *p_dst;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  std::string __dst;
  uint64_t v35;

  v3 = a1;
  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2[23];
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    v7 = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v33 = a3;
    while (1)
    {
      v8 = *((unsigned __int8 *)v3 + 23);
      v10 = (uint64_t *)*v3;
      v9 = v3[1];
      if ((v8 & 0x80u) == 0)
        v11 = (uint64_t)v3;
      else
        v11 = *v3;
      if ((v8 & 0x80u) == 0)
        v12 = *((unsigned __int8 *)v3 + 23);
      else
        v12 = v3[1];
      v13 = a2[23];
      if (v13 >= 0)
        v14 = a2;
      else
        v14 = *(char **)a2;
      if (v13 >= 0)
        v15 = a2[23];
      else
        v15 = *((_QWORD *)a2 + 1);
      if (v12 >= v7)
      {
        v16 = v7;
        if (v15)
        {
          v17 = (void *)(v11 + v7);
          v18 = (char *)(v11 + v12);
          v19 = v12 - v7;
          if (v19 >= v15)
          {
            v31 = v11;
            v21 = *v14;
            do
            {
              v22 = v19 - v15;
              if (v22 == -1)
                break;
              v23 = (char *)memchr(v17, v21, v22 + 1);
              if (!v23)
                break;
              v20 = v23;
              if (!memcmp(v23, v14, v15))
                goto LABEL_29;
              v17 = v20 + 1;
              v19 = v18 - (v20 + 1);
            }
            while (v19 >= v15);
            v20 = v18;
LABEL_29:
            a3 = v33;
            v11 = v31;
          }
          else
          {
            v20 = v18;
          }
          if (v20 == v18)
            v16 = -1;
          else
            v16 = (uint64_t)&v20[-v11];
          v3 = a1;
        }
      }
      else
      {
        v16 = -1;
      }
      if ((v8 & 0x80) != 0)
      {
        if (v9 < v7)
LABEL_67:
          std::string::__throw_out_of_range[abi:ne180100]();
        v8 = v9;
      }
      else
      {
        v10 = v3;
        if (v7 > v8)
          goto LABEL_67;
      }
      if (v8 - v7 >= v16 - v7)
        v24 = v16 - v7;
      else
        v24 = v8 - v7;
      if (v24 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v24 >= 0x17)
      {
        v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v28 = v24 | 7;
        v29 = v28 + 1;
        p_dst = (std::string *)operator new(v28 + 1);
        __dst.__r_.__value_.__l.__size_ = v24;
        __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        a3 = v33;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
        p_dst = &__dst;
        if (!v24)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          v26 = *(std::string **)(a3 + 8);
          if ((unint64_t)v26 >= *(_QWORD *)(a3 + 16))
            goto LABEL_52;
          goto LABEL_46;
        }
      }
      memmove(p_dst, (char *)v10 + v7, v24);
      p_dst->__r_.__value_.__s.__data_[v24] = 0;
      v26 = *(std::string **)(a3 + 8);
      if ((unint64_t)v26 >= *(_QWORD *)(a3 + 16))
      {
LABEL_52:
        *(_QWORD *)(a3 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)&__dst);
        if (v16 != -1)
          goto LABEL_53;
        goto LABEL_56;
      }
LABEL_46:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v26, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else
      {
        v27 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        v26->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      }
      *(_QWORD *)(a3 + 8) = v26 + 1;
      *(_QWORD *)(a3 + 8) = v26 + 1;
      if (v16 != -1)
      {
LABEL_53:
        v30 = a2[23];
        if ((v30 & 0x80u) != 0)
          v30 = *((_QWORD *)a2 + 1);
        v7 = v30 + v16;
      }
LABEL_56:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (v16 == -1)
        return;
    }
  }
  if (*((char *)a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)*a1, a1[1]);
  else
    __dst = *(std::string *)a1;
  std::vector<std::string>::vector[abi:ne180100]((_QWORD *)a3, (uint64_t)&__dst, 1uLL);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_191014614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::StringUtils::ToLower(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  unsigned __int8 *v7;

  v2 = a1;
  v4 = (char)a1[23];
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
    if ((char)v2[23] < 0)
    {
      v7 = v2;
      v2 = *(unsigned __int8 **)v2;
      v5 = *((_QWORD *)v7 + 1);
      if (!v5)
        return;
    }
    else
    {
      v5 = v2[23];
      if (!v2[23])
        return;
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)a1 + 2);
    v5 = v4;
    if (!(_BYTE)v4)
      return;
  }
  if (*(char *)(a2 + 23) >= 0)
    v6 = (_BYTE *)a2;
  else
    v6 = *(_BYTE **)a2;
  do
  {
    *v6++ = __tolower(*v2++);
    --v5;
  }
  while (v5);
}

void sub_191014708(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t E5Common::StringUtils::IsInteger(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::sub_match<std::__wrap_iter<const char *>> *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::locale v13[6];
  std::__shared_weak_count *v14;
  std::vector<std::ssub_match> __p[2];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  std::vector<std::csub_match> v24[2];
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = a1;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v13, "[+-]?[0-9]+", 0);
  v3 = *(unsigned __int8 *)(v2 + 23);
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) != 0)
  {
    v2 = *(_QWORD *)v2;
    v3 = v4;
  }
  v5 = (std::sub_match<std::__wrap_iter<const char *>> *)(v2 + v3);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  memset(__p, 0, 41);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  memset(v24, 0, 41);
  v6 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v13, (std::sub_match<const char *> *)v2, (std::sub_match<const char *> *)(v2 + v3), v24, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(__p, v2, v5, (uint64_t *)v24, 0);
  if (v24[0].__begin_)
  {
    v24[0].__end_ = v24[0].__begin_;
    operator delete(v24[0].__begin_);
  }
  v7 = (v21 == 0) | ~v6;
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
  v8 = v7 & v6;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::locale::~locale(v13);
  return v8;
}

void sub_1910148A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  v20 = *(void **)(v18 - 144);
  if (v20)
  {
    *(_QWORD *)(v18 - 136) = v20;
    operator delete(v20);
    v21 = __p;
    if (!__p)
    {
LABEL_3:
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v21 = __p;
    if (!__p)
      goto LABEL_3;
  }
  a18 = (uint64_t)v21;
  operator delete(v21);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  locale = this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  v3 = (unint64_t *)((char *)locale + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

std::string *E5Common::StringUtils::SummarizeBNNSErrorMessages@<X0>(const char *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *result;

  v6 = strlen(a1);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v8 = operator new(v11 + 1);
    a3->__r_.__value_.__l.__size_ = v7;
    a3->__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  else
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = v6;
    v8 = a3;
    if (!v6)
    {
      a3->__r_.__value_.__s.__data_[0] = 0;
      v9 = *a2;
      v10 = a2[1];
      if (*a2 == v10)
        return std::string::append(a3, "(No messages were received from the BNNS graph context log callback. Please file a radar on BasicNeuralNetworkSubroutines with your model and E5 bundle attached.)");
      goto LABEL_10;
    }
  }
  memcpy(v8, a1, v7);
  *((_BYTE *)v8 + v7) = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
    return std::string::append(a3, "(No messages were received from the BNNS graph context log callback. Please file a radar on BasicNeuralNetworkSubroutines with your model and E5 bundle attached.)");
  do
  {
LABEL_10:
    v13 = *(char *)(v9 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v9;
    else
      v14 = *(const std::string::value_type **)v9;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v9 + 23);
    else
      v15 = *(_QWORD *)(v9 + 8);
    std::string::append(a3, v14, v15);
    result = std::string::append(a3, "\n");
    v9 += 24;
  }
  while (v9 != v10);
  if (*a2 == a2[1])
    return std::string::append(a3, "(No messages were received from the BNNS graph context log callback. Please file a radar on BasicNeuralNetworkSubroutines with your model and E5 bundle attached.)");
  return result;
}

void sub_191014A7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *E5Common::StringUtils::IntsVectorToString<long>@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v3;
  std::string::__raw *v4;
  unint64_t v5;
  std::string *v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string *v9;
  std::string v10;

  v3 = result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0] == result->__r_.__value_.__l.__size_)
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 2;
    strcpy((char *)a2, "[]");
  }
  else
  {
    v4 = (std::string::__raw *)result;
    v5 = 0;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 1;
    LOWORD(a2->__r_.__value_.__l.__data_) = 91;
    do
    {
      std::to_string(&v10, *(_QWORD *)(v3 + 8 * v5));
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v10;
      else
        v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      else
        size = v10.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      result = std::string::append(a2, ",");
      ++v5;
      v3 = v4->__words[0];
    }
    while (v5 < (uint64_t)(v4->__words[1] - v4->__words[0]) >> 3);
    v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v8 & 0x80u) == 0)
      v9 = a2;
    else
      v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((v8 & 0x80u) != 0)
      v8 = a2->__r_.__value_.__l.__size_;
    v9->__r_.__value_.__s.__data_[v8 - 1] = 93;
  }
  return result;
}

void sub_191014BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

std::string *E5Common::StringUtils::IntsVectorToString<unsigned long long>@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v3;
  std::string::__raw *v4;
  unint64_t v5;
  std::string *v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string *v9;
  std::string v10;

  v3 = result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0] == result->__r_.__value_.__l.__size_)
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 2;
    strcpy((char *)a2, "[]");
  }
  else
  {
    v4 = (std::string::__raw *)result;
    v5 = 0;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 1;
    LOWORD(a2->__r_.__value_.__l.__data_) = 91;
    do
    {
      std::to_string(&v10, *(_QWORD *)(v3 + 8 * v5));
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v10;
      else
        v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      else
        size = v10.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      result = std::string::append(a2, ",");
      ++v5;
      v3 = v4->__words[0];
    }
    while (v5 < (uint64_t)(v4->__words[1] - v4->__words[0]) >> 3);
    v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v8 & 0x80u) == 0)
      v9 = a2;
    else
      v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((v8 & 0x80u) != 0)
      v8 = a2->__r_.__value_.__l.__size_;
    v9->__r_.__value_.__s.__data_[v8 - 1] = 93;
  }
  return result;
}

void sub_191014D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x19401CC70]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_191014DF8(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_191014E14(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  std::basic_regex<char> *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::basic_regex<char> *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E2DB3E70;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &unk_1E2DC3778;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v12;
    v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v13 <= 0x3F)
    {
LABEL_6:
      if (v13)
      {
        if (v13 != 16)
        {
          if (v13 != 32)
LABEL_28:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2, a3);
        }
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (char *)a3);
      }
      else
      {
        v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<char const*>((std::basic_regex<char> *)a1, (char *)a2, (char *)a3);
        if (v15 == a2)
        {
          v16 = (_QWORD *)operator new();
          v17 = *(_QWORD *)(a1 + 56);
          v18 = *(_QWORD *)(v17 + 8);
          v16[1] = v18;
          *(_QWORD *)(v17 + 8) = v16;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        if (v15 != a3)
        {
          while (LOBYTE(v15->__traits_.__loc_.__locale_) == 124)
          {
            v25 = *(_QWORD *)(a1 + 56);
            v26 = (std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1);
            v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<char const*>((std::basic_regex<char> *)a1, (char *)&v15->__traits_.__loc_.__locale_ + 1, (char *)a3);
            if (v15 == v26)
            {
              v27 = (_QWORD *)operator new();
              v28 = *(_QWORD *)(a1 + 56);
              v29 = *(_QWORD *)(v28 + 8);
              v27[1] = v29;
              *(_QWORD *)(v28 + 8) = v27;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            v19 = (_QWORD *)operator new();
            v20 = *(_QWORD *)(v25 + 8);
            v19[1] = *(_QWORD *)(v12 + 8);
            v19[2] = v20;
            *v19 = &unk_1E2DB3E40;
            *(_QWORD *)(v12 + 8) = v19;
            *(_QWORD *)(v25 + 8) = 0;
            v21 = (_QWORD *)operator new();
            v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v21[1] = v22;
            *(_QWORD *)(v25 + 8) = v21;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v23 = (_QWORD *)operator new();
            v24 = *(_QWORD *)(v25 + 8);
            *v23 = &unk_1E2DC3970;
            v23[1] = v24;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v23;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v25 + 8);
            if (v15 == a3)
              return a3;
          }
          return v15;
        }
        return a3;
      }
    }
  }
  else
  {
LABEL_5:
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v12;
    v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v13 <= 0x3F)
      goto LABEL_6;
  }
  if (v13 == 64)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2, a3);
  if (v13 == 128)
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, (char *)a2, (char *)a3);
  if (v13 != 256)
    goto LABEL_28;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, a2, a3);
}

void sub_1910151B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1910151E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_191015238(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  char *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__node<char> *v12;
  std::__node<char> *v13;
  std::__node<char> *v14;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  char *v19;
  char *v20;
  std::__node<char> *v21;
  std::__owns_one_state<char> *v22;
  std::__node<char> *v23;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != a3)
  {
    while (*v8 == 124)
    {
      v18 = a1->__end_;
      v19 = v8 + 1;
      v20 = v8 + 1;
      do
      {
        v8 = v20;
        v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v20, a3);
      }
      while (v20 != v8);
      if (v8 == v19)
      {
        v21 = (std::__node<char> *)operator new();
        v22 = a1->__end_;
        v23 = v22->__first_;
        v21[1].__vftable = (std::__node<char>_vtbl *)v23;
        v22->__first_ = v21;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      v12 = (std::__node<char> *)operator new();
      v13 = v18->__first_;
      v12[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
      v12[2].__vftable = (std::__node<char>_vtbl *)v13;
      v12->__vftable = (std::__node<char>_vtbl *)&unk_1E2DB3E40;
      end->__first_ = v12;
      v18->__first_ = 0;
      v14 = (std::__node<char> *)operator new();
      v15 = a1->__end_->__first_;
      v14[1].__vftable = (std::__node<char>_vtbl *)v15;
      v18->__first_ = v14;
      a1->__end_->__first_ = 0;
      v16 = (std::__node<char> *)operator new();
      v17 = v18->__first_;
      v16->__vftable = (std::__node<char>_vtbl *)&unk_1E2DC3970;
      v16[1].__vftable = (std::__node<char>_vtbl *)v17;
      a1->__end_->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)v18->__first_;
      if (v8 == a3)
        return a3;
    }
    return v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  if (a2 == (unsigned __int8 *)a3)
    return (char *)a2;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E2DB4108;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)a3)
  {
    while (v3 != (unsigned __int8 *)a3)
    {
      v10 = v3;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v13, (unsigned __int8 *)a3, v11, v12 + 1, *(_DWORD *)(a1 + 28) + 1);
        if (v3 != v10)
          continue;
      }
      if (v10 + 1 != (unsigned __int8 *)a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new();
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v14 = &unk_1E2DB4168;
      *(_QWORD *)(v14 + 8) = v17;
      *(_BYTE *)(v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == (char *)a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v7, v3);
  }
  while (v7 != v8);
  if (v8 == (char *)a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != (char *)v3)
  {
    while (*v8 == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = v8 + 1;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)(v8 + 1), v3);
      if (v11 == v8 + 1)
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = (_QWORD *)operator new();
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_1E2DB3E40;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = (_QWORD *)operator new();
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_1E2DC3970;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == (char *)v3)
        return v3;
    }
    return (std::basic_regex<char> *)v8;
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(v11 + 8);
    v10[1] = v12;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)__s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v13 = *(_QWORD *)(a1 + 56);
  do
  {
    v23 = (char *)memchr(v9, 10, a3 - v9);
    if (v23)
      v24 = v23;
    else
      v24 = a3;
    if (v24 == v9)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)v9, v24);
    }
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(v13 + 8);
    v17[1] = *(_QWORD *)(v6 + 8);
    v17[2] = v18;
    *v17 = &unk_1E2DB3E40;
    *(_QWORD *)(v6 + 8) = v17;
    *(_QWORD *)(v13 + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v19[1] = v20;
    *(_QWORD *)(v13 + 8) = v19;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v21 = (_QWORD *)operator new();
    v22 = *(_QWORD *)(v13 + 8);
    *v21 = &unk_1E2DC3970;
    v21[1] = v22;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v21;
    v13 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(a1 + 56) = v13;
    if (v24 == a3)
      v9 = v24;
    else
      v9 = v24 + 1;
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::basic_regex<char> *v23;
  std::basic_regex<char> *v24;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(v11 + 8);
    v10[1] = v12;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  v13 = *(_QWORD *)(a1 + 56);
  do
  {
    v23 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v23)
      v24 = v23;
    else
      v24 = a3;
    if (v24 == v9)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v24);
    }
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(v13 + 8);
    v17[1] = *(_QWORD *)(v6 + 8);
    v17[2] = v18;
    *v17 = &unk_1E2DB3E40;
    *(_QWORD *)(v6 + 8) = v17;
    *(_QWORD *)(v13 + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v19[1] = v20;
    *(_QWORD *)(v13 + 8) = v19;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v21 = (_QWORD *)operator new();
    v22 = *(_QWORD *)(v13 + 8);
    *v21 = &unk_1E2DC3970;
    v21[1] = v22;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v21;
    v13 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(a1 + 56) = v13;
    if (v24 == a3)
      v9 = v24;
    else
      v9 = (std::basic_regex<char> *)((char *)&v24->__traits_.__loc_.__locale_ + 1);
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_191015BC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x19401CD90);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A88AD2)
    return a1 + 24;
  if (((v3 & 0x8000000191A88AD2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A88AD2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A88AD2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x19401CD90);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::basic_regex<char> *v5;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  char *v8;

  do
  {
    v5 = (std::basic_regex<char> *)a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, a2, a3);
    if (a2 != (char *)v5)
      continue;
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v5, (std::basic_regex<char> *)a3);
    if (v8 == (char *)v5)
      break;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (a2 != (char *)v5);
  return v5;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  char *v9;

  result = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, a2, a3);
  if (result == a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (std::basic_regex<char> *)a2);
    result = a2;
    if (v9 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int marked_count;
  std::basic_regex<char> v25;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = operator new();
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E2DB3F60;
          *(_QWORD *)(v16 + 8) = v23;
          std::locale::locale((std::locale *)(v16 + 16), (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v16 + 40) = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = operator new();
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E2DB3F60;
          *(_QWORD *)(v16 + 8) = v17;
          std::locale::locale((std::locale *)(v16 + 16), (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v16 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *(_QWORD *)v10 = v14 + 16;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v25);
    v25.__flags_ = *(_DWORD *)(a1 + 24);
    v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v25, a2 + 3, a3);
    marked_count = v25.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v25, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v21 == a3 || *v21 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v25);
  v25.__flags_ = *(_DWORD *)(a1 + 24);
  v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v25, a2 + 3, a3);
  v22 = v25.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v25, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v25.__traits_.__loc_);
  return v21 + 1;
}

void sub_191016264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_191016278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_19101628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1910162A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int *p_open_count;
  char *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  uint64_t v12;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v16;
  uint64_t v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_26;
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3)
            goto LABEL_26;
          v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v12 = operator new();
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            *(_QWORD *)v12 = &unk_1E2DC3A00;
            *(_QWORD *)(v12 + 8) = first;
            *(_DWORD *)(v12 + 16) = marked_count;
            end->__first_ = (std::__node<char> *)v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (v3 = (std::basic_regex<char> *)v16, *v16 != 41))
LABEL_26:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            v17 = operator new();
            v18 = this->__end_;
            v19 = v18->__first_;
            *(_QWORD *)v17 = &unk_1E2DC39D0;
            *(_QWORD *)(v17 + 8) = v19;
            *(_DWORD *)(v17 + 16) = marked_count;
            v18->__first_ = (std::__node<char> *)v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_23:
        v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (std::__node<char> *)operator new();
        v9 = this->__end_;
        v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1E2DC39A0;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_23;
      case '[':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(std::basic_regex<char> *this, char *a2, char *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  int v7;
  int v8;
  unsigned __int32 v11;
  int v12;
  char *v13;
  _QWORD *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  uint64_t v17;
  unsigned int v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  size_t v27;
  size_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__owns_one_state<char> *v31;
  std::__node<char> *v32;
  unsigned int v33;
  std::__node<char> *v34;
  BOOL v35;
  _QWORD *v36;
  std::__owns_one_state<char> *v37;
  std::__node<char> *v38;
  unsigned int v39;
  std::__node<char> *v40;
  _QWORD *v41;
  std::__owns_one_state<char> *v42;
  std::__node<char> *v43;
  unsigned int v44;
  std::__node<char> *v45;
  _QWORD *v46;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  unsigned int loop_count;
  std::__node<char> *v50;
  _QWORD *v51;
  std::__owns_one_state<char> *v52;
  std::__node<char> *v53;
  unsigned int v54;
  std::__node<char> *v55;
  char *v56;
  int v57;
  _QWORD *v58;
  std::__owns_one_state<char> *v59;
  std::__node<char> *v60;
  unsigned int v61;
  std::__node<char> *v62;
  int v63;
  char *v64;
  int v65;
  _QWORD *v66;
  std::__owns_one_state<char> *v67;
  std::__node<char> *v68;
  unsigned int v69;
  std::__node<char> *v70;
  _QWORD *v71;
  std::__owns_one_state<char> *v72;
  std::__node<char> *v73;
  unsigned int v74;
  std::__node<char> *v75;

  if (a2 == a3)
    return a2;
  v7 = __mexp_end;
  v8 = __mexp_begin;
  v11 = this->__flags_ & 0x1F0;
  v12 = *a2;
  if (v12 <= 62)
  {
    if (v12 == 42)
    {
      v13 = a2 + 1;
      if (v11)
        v29 = 1;
      else
        v29 = v13 == a3;
      if (v29 || *v13 != 63)
      {
        v46 = (_QWORD *)operator new();
        end = this->__end_;
        first = end->__first_;
        v46[1] = first;
        end->__first_ = 0;
        v17 = operator new();
        loop_count = this->__loop_count_;
        v50 = __s->__first_;
        *(_QWORD *)(v17 + 16) = v46;
        *(_QWORD *)v17 = &unk_1E2DC3A30;
        *(_QWORD *)(v17 + 8) = v50;
        *(_OWORD *)(v17 + 24) = xmmword_191A82AA0;
        *(_DWORD *)(v17 + 40) = loop_count;
        *(_DWORD *)(v17 + 44) = v8;
        *(_DWORD *)(v17 + 48) = v7;
        *(_BYTE *)(v17 + 52) = 1;
        __s->__first_ = 0;
        v20 = (std::__node<char> *)operator new();
        goto LABEL_71;
      }
      v30 = (_QWORD *)operator new();
      v31 = this->__end_;
      v32 = v31->__first_;
      v30[1] = v32;
      v31->__first_ = 0;
      v17 = operator new();
      v33 = this->__loop_count_;
      *(_QWORD *)(v17 + 16) = v30;
      v34 = __s->__first_;
      *(_QWORD *)v17 = &unk_1E2DC3A30;
      *(_QWORD *)(v17 + 8) = v34;
      *(_OWORD *)(v17 + 24) = xmmword_191A82AA0;
      *(_DWORD *)(v17 + 40) = v33;
      *(_DWORD *)(v17 + 44) = v8;
      *(_DWORD *)(v17 + 48) = v7;
      *(_BYTE *)(v17 + 52) = 0;
      __s->__first_ = 0;
      v20 = (std::__node<char> *)operator new();
      goto LABEL_41;
    }
    if (v12 == 43)
    {
      v13 = a2 + 1;
      if (v11 || v13 == a3 || *v13 != 63)
      {
        v41 = (_QWORD *)operator new();
        v42 = this->__end_;
        v43 = v42->__first_;
        v41[1] = v43;
        v42->__first_ = 0;
        v17 = operator new();
        v44 = this->__loop_count_;
        v45 = __s->__first_;
        *(_QWORD *)(v17 + 16) = v41;
        *(_QWORD *)v17 = &unk_1E2DC3A30;
        *(_QWORD *)(v17 + 8) = v45;
        *(_OWORD *)(v17 + 24) = xmmword_191A82A90;
        *(_DWORD *)(v17 + 40) = v44;
        *(_DWORD *)(v17 + 44) = v8;
        *(_DWORD *)(v17 + 48) = v7;
        *(_BYTE *)(v17 + 52) = 1;
        __s->__first_ = 0;
        v20 = (std::__node<char> *)operator new();
        goto LABEL_71;
      }
      v14 = (_QWORD *)operator new();
      v15 = this->__end_;
      v16 = v15->__first_;
      v14[1] = v16;
      v15->__first_ = 0;
      v17 = operator new();
      v18 = this->__loop_count_;
      *(_QWORD *)(v17 + 16) = v14;
      v19 = __s->__first_;
      *(_QWORD *)v17 = &unk_1E2DC3A30;
      *(_QWORD *)(v17 + 8) = v19;
      *(_OWORD *)(v17 + 24) = xmmword_191A82A90;
      *(_DWORD *)(v17 + 40) = v18;
      *(_DWORD *)(v17 + 44) = v8;
      *(_DWORD *)(v17 + 48) = v7;
      *(_BYTE *)(v17 + 52) = 0;
      __s->__first_ = 0;
      v20 = (std::__node<char> *)operator new();
LABEL_41:
      v13 = a2 + 2;
LABEL_71:
      v20->__vftable = (std::__node<char>_vtbl *)&unk_1E2DB4020;
      v20[1].__vftable = (std::__node<char>_vtbl *)v17;
      this->__end_->__first_ = v20;
      this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
      __s->__first_ = (std::__node<char> *)v17;
      ++this->__loop_count_;
      return v13;
    }
    return a2;
  }
  if (v12 == 63)
  {
    v13 = a2 + 1;
    if (v11)
      v35 = 1;
    else
      v35 = v13 == a3;
    if (v35 || *v13 != 63)
    {
      v51 = (_QWORD *)operator new();
      v52 = this->__end_;
      v53 = v52->__first_;
      v51[1] = v53;
      v52->__first_ = 0;
      v17 = operator new();
      v54 = this->__loop_count_;
      v55 = __s->__first_;
      *(_QWORD *)(v17 + 16) = v51;
      *(_QWORD *)v17 = &unk_1E2DC3A30;
      *(_QWORD *)(v17 + 8) = v55;
      *(_OWORD *)(v17 + 24) = xmmword_191A82A80;
      *(_DWORD *)(v17 + 40) = v54;
      *(_DWORD *)(v17 + 44) = v8;
      *(_DWORD *)(v17 + 48) = v7;
      *(_BYTE *)(v17 + 52) = 1;
      __s->__first_ = 0;
      v20 = (std::__node<char> *)operator new();
      goto LABEL_71;
    }
    v36 = (_QWORD *)operator new();
    v37 = this->__end_;
    v38 = v37->__first_;
    v36[1] = v38;
    v37->__first_ = 0;
    v17 = operator new();
    v39 = this->__loop_count_;
    *(_QWORD *)(v17 + 16) = v36;
    v40 = __s->__first_;
    *(_QWORD *)v17 = &unk_1E2DC3A30;
    *(_QWORD *)(v17 + 8) = v40;
    *(_OWORD *)(v17 + 24) = xmmword_191A82A80;
    *(_DWORD *)(v17 + 40) = v39;
    *(_DWORD *)(v17 + 44) = v8;
    *(_DWORD *)(v17 + 48) = v7;
    *(_BYTE *)(v17 + 52) = 0;
    __s->__first_ = 0;
    v20 = (std::__node<char> *)operator new();
    goto LABEL_41;
  }
  if (v12 != 123)
    return a2;
  v21 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_73;
  v22 = *v21;
  if ((v22 & 0xF8) != 0x30 && (v22 & 0xFE) != 0x38)
    goto LABEL_73;
  v23 = v22 - 48;
  v24 = a2 + 2;
  if (a2 + 2 == a3)
  {
LABEL_19:
    v24 = a3;
  }
  else
  {
    while (1)
    {
      v25 = *v24;
      if ((v25 & 0xF8) != 0x30 && (v25 & 0xFE) != 0x38)
        break;
      if (v23 >= 214748364)
        goto LABEL_73;
      v23 = v25 + 10 * v23 - 48;
      if (++v24 == a3)
        goto LABEL_19;
    }
  }
  if (v24 == v21)
    goto LABEL_73;
  if (v24 == a3)
    goto LABEL_74;
  v26 = *v24;
  if (v26 != 44)
  {
    if (v26 == 125)
    {
      v13 = v24 + 1;
      if (v11 || v13 == a3 || *v13 != 63)
      {
        v58 = (_QWORD *)operator new();
        v59 = this->__end_;
        v60 = v59->__first_;
        v58[1] = v60;
        v59->__first_ = 0;
        v17 = operator new();
        v61 = this->__loop_count_;
        v62 = __s->__first_;
        *(_QWORD *)v17 = &unk_1E2DC3A30;
        *(_QWORD *)(v17 + 8) = v62;
        *(_QWORD *)(v17 + 16) = v58;
        *(_QWORD *)(v17 + 24) = v23;
        *(_QWORD *)(v17 + 32) = v23;
        *(_DWORD *)(v17 + 40) = v61;
        *(_DWORD *)(v17 + 44) = v8;
        *(_DWORD *)(v17 + 48) = v7;
        *(_BYTE *)(v17 + 52) = 1;
        __s->__first_ = 0;
        v20 = (std::__node<char> *)operator new();
        goto LABEL_71;
      }
      v27 = v23;
      v13 = v24 + 2;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v28 = v23;
      goto LABEL_68;
    }
    goto LABEL_73;
  }
  v56 = v24 + 1;
  if (v24 + 1 == a3)
    goto LABEL_73;
  v57 = *v56;
  if (v57 != 125)
  {
    if ((v57 & 0xF8) == 0x30 || (v57 & 0xFE) == 0x38)
    {
      v63 = v57 - 48;
      v64 = v24 + 2;
      if (v64 == a3)
      {
LABEL_59:
        v64 = a3;
      }
      else
      {
        while (1)
        {
          v65 = *v64;
          if ((v65 & 0xF8) != 0x30 && (v65 & 0xFE) != 0x38)
            break;
          if (v63 >= 214748364)
            goto LABEL_73;
          v63 = v65 + 10 * v63 - 48;
          if (++v64 == a3)
            goto LABEL_59;
        }
      }
      if (v64 != v56 && v64 != a3 && *v64 == 125)
      {
        if (v63 >= v23)
        {
          v13 = v64 + 1;
          if (v11 || v13 == a3 || *v13 != 63)
          {
            v71 = (_QWORD *)operator new();
            v72 = this->__end_;
            v73 = v72->__first_;
            v71[1] = v73;
            v72->__first_ = 0;
            v17 = operator new();
            v74 = this->__loop_count_;
            v75 = __s->__first_;
            *(_QWORD *)v17 = &unk_1E2DC3A30;
            *(_QWORD *)(v17 + 8) = v75;
            *(_QWORD *)(v17 + 16) = v71;
            *(_QWORD *)(v17 + 24) = v23;
            *(_QWORD *)(v17 + 32) = v63;
            *(_DWORD *)(v17 + 40) = v74;
            *(_DWORD *)(v17 + 44) = v8;
            *(_DWORD *)(v17 + 48) = v7;
            *(_BYTE *)(v17 + 52) = 1;
            __s->__first_ = 0;
            v20 = (std::__node<char> *)operator new();
            goto LABEL_71;
          }
          v27 = v23;
          v28 = v63;
          v13 = v64 + 2;
          __mexp_begin = __mexp_begin;
          __mexp_end = __mexp_end;
LABEL_68:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, v27, v28, __s, __mexp_begin, __mexp_end, 0);
          return v13;
        }
LABEL_73:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      }
    }
LABEL_74:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v13 = v24 + 2;
  if (v11 || v13 == a3 || *v13 != 63)
  {
    v66 = (_QWORD *)operator new();
    v67 = this->__end_;
    v68 = v67->__first_;
    v66[1] = v68;
    v67->__first_ = 0;
    v17 = operator new();
    v69 = this->__loop_count_;
    v70 = __s->__first_;
    *(_QWORD *)v17 = &unk_1E2DC3A30;
    *(_QWORD *)(v17 + 8) = v70;
    *(_QWORD *)(v17 + 16) = v66;
    *(_QWORD *)(v17 + 24) = v23;
    *(_QWORD *)(v17 + 32) = -1;
    *(_DWORD *)(v17 + 40) = v69;
    *(_DWORD *)(v17 + 44) = v8;
    *(_DWORD *)(v17 + 48) = v7;
    *(_BYTE *)(v17 + 52) = 1;
    __s->__first_ = 0;
    v20 = (std::__node<char> *)operator new();
    goto LABEL_71;
  }
  v13 = v24 + 3;
  std::basic_regex<char,std::regex_traits<char>>::__push_nongreedy_inf_repeat[abi:ne180100]((uint64_t)this, v23, (uint64_t)__s, __mexp_begin, __mexp_end);
  return v13;
}

void sub_191016E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x19401CC70]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_191016F4C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_1E2DB3EA0;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_191017060(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB3F60;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB3F60;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E2DB3EA0;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E2DB3EA0;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  JUMPOUT(0x19401CD90);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::sub_match<const char *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_191017720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  _BYTE v44[56];
  void *__p[2];
  _QWORD v46[3];
  std::vector<std::csub_match>::value_type __x;
  char *v48;
  char *v49;
  unint64_t v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v44 = 0;
    memset(&v44[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v46, 0, 21);
    v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v44);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v44[32])
    {
      *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
      operator delete(*(void **)&v44[32]);
    }
    v13 = v49;
    *((_DWORD *)v49 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v49;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v49;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v35 = *a4;
          *(_QWORD *)v35 = a2;
          *(_QWORD *)(v35 + 8) = v23;
          *(_BYTE *)(v35 + 16) = 1;
          v36 = *((_QWORD *)v13 - 8);
          v37 = *((_QWORD *)v13 - 7) - v36;
          if (v37)
          {
            v38 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
            v39 = (_BYTE *)(v36 + 16);
            v40 = 1;
            do
            {
              v41 = v35 + 24 * v40;
              *(_OWORD *)v41 = *((_OWORD *)v39 - 1);
              v42 = *v39;
              v39 += 24;
              *(_BYTE *)(v41 + 16) = v42;
            }
            while (v38 > v40++);
          }
          v6 = 1;
          v21 = v48;
          if (!v48)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v49;
          v25 = (void *)*((_QWORD *)v49 - 5);
          if (v25)
          {
            *((_QWORD *)v49 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v49 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          std::__state<char>::__state((uint64_t)v44, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v46[1] + 24))(v46[1], 0, v44);
          v27 = v49;
          if ((unint64_t)v49 >= v50)
          {
            v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v44);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v28 = *(_OWORD *)&v44[16];
            *(_OWORD *)v49 = *(_OWORD *)v44;
            *((_OWORD *)v27 + 1) = v28;
            *((_QWORD *)v27 + 4) = 0;
            *((_QWORD *)v27 + 5) = 0;
            *((_QWORD *)v27 + 6) = 0;
            *((_QWORD *)v27 + 7) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)&v44[32];
            *((_QWORD *)v27 + 6) = *(_QWORD *)&v44[48];
            memset(&v44[32], 0, 24);
            *((_QWORD *)v27 + 8) = 0;
            *((_QWORD *)v27 + 9) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v27 + 9) = v46[0];
            __p[0] = 0;
            __p[1] = 0;
            v46[0] = 0;
            v29 = v46[1];
            *(_QWORD *)(v27 + 85) = *(_QWORD *)((char *)&v46[1] + 5);
            *((_QWORD *)v27 + 10) = v29;
            v49 = v27 + 96;
          }
          if (*(_QWORD *)&v44[32])
          {
            *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
            operator delete(*(void **)&v44[32]);
          }
LABEL_16:
          v21 = v48;
          v13 = v49;
          ++v20;
          if (v48 != v49)
            continue;
          v6 = 0;
          if (v48)
          {
LABEL_37:
            v30 = v49;
            v31 = v21;
            if (v49 != v21)
            {
              do
              {
                v32 = (void *)*((_QWORD *)v30 - 5);
                if (v32)
                {
                  *((_QWORD *)v30 - 4) = v32;
                  operator delete(v32);
                }
                v33 = (void *)*((_QWORD *)v30 - 8);
                if (v33)
                {
                  *((_QWORD *)v30 - 7) = v33;
                  operator delete(v33);
                }
                v30 -= 96;
              }
              while (v30 != v21);
              v31 = v48;
            }
            v49 = v21;
            operator delete(v31);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_191017B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_191017B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_191017B8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_191017BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_191017DC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_191017E10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v15)
      return v13;
    goto LABEL_23;
  }
  v16 = 0;
  do
  {
    v17 = &v9[v16];
    v18 = &v15[v16];
    v19 = *(_OWORD *)&v15[v16 - 80];
    *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
    *((_OWORD *)v17 - 5) = v19;
    *((_QWORD *)v17 - 7) = 0;
    *((_QWORD *)v17 - 6) = 0;
    *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
    *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
    *((_QWORD *)v18 - 8) = 0;
    *((_QWORD *)v18 - 7) = 0;
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v17 - 4) = 0;
    *((_QWORD *)v17 - 3) = 0;
    *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
    *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
    *((_QWORD *)v18 - 5) = 0;
    *((_QWORD *)v18 - 4) = 0;
    *((_QWORD *)v18 - 3) = 0;
    v20 = *(_QWORD *)&v15[v16 - 16];
    *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
    *((_QWORD *)v17 - 2) = v20;
    v16 -= 96;
  }
  while (&v15[v16] != v14);
  v21 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  if (v15 != v21)
  {
    do
    {
      v22 = (void *)*((_QWORD *)v15 - 5);
      if (v22)
      {
        *((_QWORD *)v15 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v15 - 8);
      if (v23)
      {
        *((_QWORD *)v15 - 7) = v23;
        operator delete(v23);
      }
      v15 -= 96;
    }
    while (v15 != v21);
    v15 = v21;
  }
  if (v15)
LABEL_23:
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_191018494(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!v8)
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_)
    goto LABEL_23;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new();
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_19101878C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1910187E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19101893C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new();
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new();
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new();
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new();
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = *(_DWORD *)(v5 + 160) | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new();
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = *(_DWORD *)(v5 + 160) | 0x4000;
LABEL_12:
        *(_DWORD *)(v5 + 160) = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new();
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        *(_DWORD *)(v6 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_191018B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  unsigned __int8 *v4;
  char v5;
  unsigned __int8 *result;
  uint64_t v7;
  std::basic_regex<char>::value_type v8;
  unsigned __int8 v9;
  std::string::value_type v10;
  int v11;
  int v12;
  char v13;
  int v14;
  char v15;
  int v16;
  char v17;
  std::string::value_type v18;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = 0;
  switch(*a2)
  {
    case '0':
      if (this)
      {
        std::string::operator=(this, 0);
        return v4 + 1;
      }
      else
      {
        v8 = 0;
LABEL_55:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
        return v4 + 1;
      }
    case 'c':
      if (a2 + 1 == a3)
        goto LABEL_62;
      v9 = a2[1];
      if (((v9 & 0xDF) - 65) > 0x19u)
        goto LABEL_62;
      v10 = v9 & 0x1F;
      if (this)
      {
        std::string::operator=(this, v10);
        v4 += 2;
        return v4;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
      result = v4 + 2;
      break;
    case 'f':
      if (this)
        std::string::operator=(this, 12);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      return v4 + 1;
    case 'n':
      if (this)
        std::string::operator=(this, 10);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      return v4 + 1;
    case 'r':
      if (this)
        std::string::operator=(this, 13);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      return v4 + 1;
    case 't':
      if (this)
        std::string::operator=(this, 9);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      return v4 + 1;
    case 'u':
      if (a2 + 1 == a3)
        goto LABEL_62;
      v11 = a2[1];
      if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38 && (v11 | 0x20u) - 97 >= 6)
        goto LABEL_62;
      v4 = a2 + 2;
      if (a2 + 2 == a3)
        goto LABEL_62;
      v12 = *v4;
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_36;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6)
        goto LABEL_62;
      v13 = -87;
LABEL_36:
      v5 = 16 * (v13 + v12);
LABEL_37:
      if (v4 + 1 == a3)
        goto LABEL_62;
      v14 = v4[1];
      v15 = -48;
      if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
        goto LABEL_42;
      v14 |= 0x20u;
      if ((v14 - 97) >= 6)
        goto LABEL_62;
      v15 = -87;
LABEL_42:
      if (v4 + 2 == a3)
        goto LABEL_62;
      v16 = v4[2];
      v17 = -48;
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
      {
        v16 |= 0x20u;
        if ((v16 - 97) >= 6)
LABEL_62:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v17 = -87;
      }
      v18 = v17 + v16 + 16 * (v15 + v14 + v5);
      if (this)
        std::string::operator=(this, v18);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
      return v4 + 3;
    case 'v':
      if (this)
        std::string::operator=(this, 11);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      return v4 + 1;
    case 'x':
      goto LABEL_37;
    default:
      v7 = *a2;
      if (*a2 == 95 || (v7 & 0x80) == 0 && (a1->__traits_.__ct_->__tab_[v7] & 0x500) != 0)
        goto LABEL_62;
      v8 = *a2;
      if (!this)
        goto LABEL_55;
      std::string::operator=(this, v7);
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E2DB40A8;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E2DB4138;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E2DB3F00;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1910190BC(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x19401CD90](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_191019144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E2DAC8D8;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB40A8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB40A8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB4138;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB4138;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB3F90;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB3F90;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB4078;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E2DB4078;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = *(unsigned __int8 **)(a2 + 16);
    v9 = v6;
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v8++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v9);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_191019F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x19401CD90);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  std::string::size_type size;
  std::vector<std::pair<std::string, std::string>>::pointer v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  std::string::size_type v30;
  std::string *data;
  size_t v32;
  int v33;
  BOOL v34;
  _BOOL4 negate;
  int v36;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  std::vector<char>::pointer v40;
  unint64_t v41;
  int v42;
  std::regex_traits<char>::char_class_type v43;
  int v44;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v46;
  char *v47;
  std::vector<std::pair<std::string, std::string>>::pointer v48;
  std::vector<std::pair<std::string, std::string>>::pointer v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  void **v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  size_t v59;
  std::vector<std::pair<std::string, std::string>>::pointer v60;
  size_t v61;
  int v62;
  _BOOL4 v63;
  int v64;
  size_t v65;
  std::string *v66;
  size_t v67;
  int v68;
  BOOL v69;
  std::vector<std::string>::pointer v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  size_t v75;
  void *v76;
  size_t v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  std::string *v81;
  std::string::size_type v82;
  int v83;
  std::string *v84;
  void **v85;
  uint64_t v86;
  std::regex_traits<char>::char_class_type v87;
  int v88;
  std::vector<std::string>::pointer v89;
  int64_t v90;
  unint64_t v91;
  size_t v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  std::string *v97;
  std::string::size_type v98;
  int v99;
  void **v100;
  uint64_t v101;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v104;
  std::regex_traits<char>::char_class_type neg_mask;
  int v106;
  std::__node<char> *first;
  int v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  std::string::size_type v112;
  int v113;
  std::vector<std::string>::pointer v114;
  std::string::size_type v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::string::value_type *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v125;
  std::string *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  _BOOL4 v130;
  _BOOL4 v131;
  _BOOL4 v132;
  void *__src[2];
  unsigned __int8 v134;
  unsigned __int8 v135;
  void *__p;
  size_t __n;
  char v138;

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v37 = 0;
    negate = this->__negate_;
    goto LABEL_215;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  LOBYTE(__src[0]) = *current;
  v7 = current[1];
  BYTE1(__src[0]) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src[0]) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    BYTE1(__src[0]) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(__src, (uint64_t)&this->__traits_, (_BYTE *)__src + 2, (uint64_t)&__p);
  if ((v138 & 0x80000000) == 0)
  {
    if (v138)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v37 = 1;
    v39 = *v2->__current_;
    v135 = v39;
    if (!this->__icase_)
      goto LABEL_60;
    goto LABEL_59;
  }
  v38 = __n;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (LOBYTE(__src[0]) != *(p_second - 1) || BYTE1(__src[0]) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_212;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_166;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, __src, (_BYTE *)__src + 2);
  v14 = this->__ranges_.__begin_;
  v15 = v138;
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (v16)
  {
    v17 = 0;
    v18 = v16 / 48;
    v124 = v138;
    if (v138 >= 0)
      v19 = v138;
    else
      v19 = __n;
    if (v138 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v18 <= 1)
      v21 = 1;
    else
      v21 = v16 / 48;
    v22 = 1;
    do
    {
      v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
      if (v23 >= 0)
        size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
      else
        size = v14->first.__r_.__value_.__l.__size_;
      if (v23 >= 0)
        v25 = v14;
      else
        v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
      if (size >= v19)
        v26 = v19;
      else
        v26 = size;
      v27 = memcmp(p_p, v25, v26);
      v28 = v19 >= size;
      if (v27)
        v28 = v27 >= 0;
      if (v28)
      {
        v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
        if (v29 >= 0)
          v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
        else
          v30 = v14->second.__r_.__value_.__l.__size_;
        if (v29 >= 0)
          data = &v14->second;
        else
          data = (std::string *)v14->second.__r_.__value_.__l.__data_;
        if (v19 >= v30)
          v32 = v30;
        else
          v32 = v19;
        v33 = memcmp(data, p_p, v32);
        v34 = v30 >= v19;
        if (v33)
          v34 = v33 >= 0;
        if (v34)
        {
          negate = 1;
          v36 = 5;
          goto LABEL_161;
        }
      }
      v22 = ++v17 < v18;
      ++v14;
    }
    while (v21 != v17);
    v36 = 0;
    negate = 0;
LABEL_161:
    p_traits = &this->__traits_;
    v15 = v124;
  }
  else
  {
    v22 = 0;
    v36 = 0;
    negate = 0;
  }
  if (v15 < 0)
    operator delete(__p);
  if (!v22)
  {
LABEL_166:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
      goto LABEL_194;
    v132 = negate;
    std::regex_traits<char>::__transform_primary<char *>(__src, (uint64_t)p_traits, (_BYTE *)__src + 2, (uint64_t)&__p);
    v89 = this->__equivalences_.__begin_;
    v90 = (char *)this->__equivalences_.__end_ - (char *)v89;
    if (v90)
    {
      v91 = v90 / 24;
      v92 = __n;
      if (v138 >= 0)
        v93 = v138;
      else
        v93 = __n;
      if (v138 < 0)
      {
        v129 = v138;
        v109 = 0;
        v110 = __p;
        if (v91 <= 1)
          v111 = 1;
        else
          v111 = v90 / 24;
        v96 = 1;
        do
        {
          v112 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
          v113 = (char)v112;
          if ((v112 & 0x80u) != 0)
            v112 = v89->__r_.__value_.__l.__size_;
          if (v93 == v112)
          {
            v114 = v113 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
            if (!memcmp(v110, v114, v92))
            {
              negate = 1;
              v36 = 5;
              if ((v129 & 0x80000000) == 0)
                goto LABEL_190;
              goto LABEL_189;
            }
          }
          v96 = ++v109 < v91;
          ++v89;
        }
        while (v111 != v109);
        v36 = 0;
        negate = v132;
        if ((v129 & 0x80000000) == 0)
          goto LABEL_190;
LABEL_189:
        operator delete(__p);
        goto LABEL_190;
      }
      if (!v138)
      {
        v115 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
        if ((v115 & 0x80u) != 0)
          v115 = v89->__r_.__value_.__l.__size_;
        if (v115 == v138)
        {
          negate = 1;
          goto LABEL_214;
        }
        v116 = 0;
        if (v91 <= 1)
          v117 = 1;
        else
          v117 = v91;
        v118 = v117 - 1;
        v119 = &v89[1].__r_.__value_.__s.__data_[8];
        while (v118 != v116)
        {
          ++v116;
          v120 = v119[15];
          v122 = *(_QWORD *)v119;
          v119 += 24;
          v121 = v122;
          if ((v120 & 0x80u) != 0)
            v120 = v121;
          if (v93 == v120)
          {
            v96 = v116 < v91;
            negate = 1;
            v36 = 5;
            goto LABEL_190;
          }
        }
        v96 = 0;
        v36 = 0;
LABEL_190:
        if (v96)
          goto LABEL_191;
LABEL_194:
        if (SLOBYTE(__src[0]) < 0)
        {
          neg_mask = this->__neg_mask_;
        }
        else
        {
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v104 = tab[LOBYTE(__src[0])];
          if (((v104 & mask) != 0 || LOBYTE(__src[0]) == 95 && (mask & 0x80) != 0)
            && (SBYTE1(__src[0]) & 0x80000000) == 0
            && ((tab[BYTE1(__src[0])] & mask) != 0 || (mask & 0x80) != 0 && BYTE1(__src[0]) == 95))
          {
            goto LABEL_212;
          }
          neg_mask = this->__neg_mask_;
          if ((v104 & neg_mask) != 0 || LOBYTE(__src[0]) == 95 && (neg_mask & 0x80) != 0)
          {
LABEL_211:
            v106 = negate;
LABEL_213:
            negate = v106;
            goto LABEL_214;
          }
        }
        if ((SBYTE1(__src[0]) & 0x80000000) == 0)
        {
          if ((this->__traits_.__ct_->__tab_[BYTE1(__src[0])] & neg_mask) == 0)
          {
            v106 = 1;
            if (BYTE1(__src[0]) != 95 || (neg_mask & 0x80) == 0)
              goto LABEL_213;
          }
          goto LABEL_211;
        }
LABEL_212:
        v106 = 1;
        goto LABEL_213;
      }
      v94 = 0;
      if (v91 <= 1)
        v95 = 1;
      else
        v95 = v90 / 24;
      v96 = 1;
      do
      {
        v97 = &v89[v94];
        v98 = HIBYTE(v97->__r_.__value_.__r.__words[2]);
        v99 = (char)v98;
        if ((v98 & 0x80u) != 0)
          v98 = v97->__r_.__value_.__l.__size_;
        if (v93 == v98)
        {
          if (v99 < 0)
            v97 = (std::string *)v97->__r_.__value_.__r.__words[0];
          v100 = &__p;
          v101 = v138;
          while (*(unsigned __int8 *)v100 == v97->__r_.__value_.__s.__data_[0])
          {
            v100 = (void **)((char *)v100 + 1);
            v97 = (std::string *)((char *)v97 + 1);
            if (!--v101)
            {
              negate = 1;
              v36 = 5;
              if ((v138 & 0x80000000) == 0)
                goto LABEL_190;
              goto LABEL_189;
            }
          }
        }
        v96 = ++v94 < v91;
      }
      while (v94 != v95);
    }
    v96 = 0;
    v36 = 0;
    if ((v138 & 0x80000000) == 0)
      goto LABEL_190;
    goto LABEL_189;
  }
LABEL_191:
  if (v36)
  {
LABEL_214:
    v37 = 2;
    goto LABEL_215;
  }
  v37 = 2;
  v39 = *v2->__current_;
  v135 = v39;
  if (this->__icase_)
  {
LABEL_59:
    v39 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    v135 = v39;
  }
LABEL_60:
  v40 = this->__chars_.__begin_;
  v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_65;
    }
LABEL_76:
    negate = 1;
    goto LABEL_215;
  }
LABEL_65:
  v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    end = this->__neg_chars_.__end_;
    v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end)
      goto LABEL_76;
  }
  v49 = this->__ranges_.__begin_;
  v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      v138 = 1;
      LOWORD(__p) = v39;
      (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                               + 32))(__src, this->__traits_.__col_, &__p, (char *)&__p + 1);
      if (v138 < 0)
        operator delete(__p);
      v49 = this->__ranges_.__begin_;
      v50 = v134;
      v51 = (char *)this->__ranges_.__end_ - (char *)v49;
      if (v51)
      {
LABEL_82:
        v125 = v2;
        v127 = v37;
        v130 = negate;
        v52 = 0;
        v53 = v51 / 48;
        v123 = v50;
        if ((v50 & 0x80u) == 0)
          v54 = (void *)v50;
        else
          v54 = __src[1];
        if ((v50 & 0x80u) == 0)
          v55 = __src;
        else
          v55 = (void **)__src[0];
        if (v53 <= 1)
          v56 = 1;
        else
          v56 = v51 / 48;
        v57 = 1;
        do
        {
          v58 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
          if (v58 >= 0)
            v59 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
          else
            v59 = v49->first.__r_.__value_.__l.__size_;
          if (v58 >= 0)
            v60 = v49;
          else
            v60 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
          if (v59 >= (unint64_t)v54)
            v61 = (size_t)v54;
          else
            v61 = v59;
          v62 = memcmp(v55, v60, v61);
          v63 = (unint64_t)v54 >= v59;
          if (v62)
            v63 = v62 >= 0;
          if (v63)
          {
            v64 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
            if (v64 >= 0)
              v65 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
            else
              v65 = v49->second.__r_.__value_.__l.__size_;
            if (v64 >= 0)
              v66 = &v49->second;
            else
              v66 = (std::string *)v49->second.__r_.__value_.__l.__data_;
            if ((unint64_t)v54 >= v65)
              v67 = v65;
            else
              v67 = (size_t)v54;
            v68 = memcmp(v66, v55, v67);
            v69 = v65 >= (unint64_t)v54;
            if (v68)
              v69 = v68 >= 0;
            if (v69)
            {
              negate = 1;
              v2 = v125;
              v37 = v127;
              if ((v123 & 0x80) == 0)
                goto LABEL_122;
              goto LABEL_121;
            }
          }
          v57 = ++v52 < v53;
          ++v49;
        }
        while (v56 != v52);
        v2 = v125;
        v37 = v127;
        negate = v130;
        if ((v123 & 0x80) == 0)
          goto LABEL_122;
        goto LABEL_121;
      }
    }
    else
    {
      v134 = 1;
      LOWORD(__src[0]) = v39;
      v50 = 1;
      v51 = (char *)v48 - (char *)v49;
      if (v51)
        goto LABEL_82;
    }
    v57 = 0;
    if ((v50 & 0x80) == 0)
    {
LABEL_122:
      if (v57)
        goto LABEL_215;
      goto LABEL_123;
    }
LABEL_121:
    operator delete(__src[0]);
    goto LABEL_122;
  }
LABEL_123:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_154:
    if ((v39 & 0x80) != 0)
      goto LABEL_215;
    v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v39] & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v39 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_215;
    }
    goto LABEL_76;
  }
  std::regex_traits<char>::__transform_primary<char *>(&v135, (uint64_t)&this->__traits_, &__p, (uint64_t)&__p);
  v70 = this->__equivalences_.__begin_;
  v71 = v138;
  v72 = (char *)this->__equivalences_.__end_ - (char *)v70;
  if (v72)
  {
    v128 = v37;
    v131 = negate;
    v73 = 0;
    v74 = v72 / 24;
    v76 = __p;
    v75 = __n;
    if (v138 >= 0)
      v77 = v138;
    else
      v77 = __n;
    if (v74 <= 1)
      v78 = 1;
    else
      v78 = v72 / 24;
    v79 = 1;
    while (1)
    {
      v81 = &v70[v73];
      v82 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
      v83 = (char)v82;
      if ((v82 & 0x80u) != 0)
        v82 = v81->__r_.__value_.__l.__size_;
      if (v77 == v82)
      {
        if (v83 >= 0)
          v84 = &v70[v73];
        else
          v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
        if ((v71 & 0x80) != 0)
        {
          v126 = v70;
          v80 = memcmp(v76, v84, v75);
          v70 = v126;
          if (!v80)
          {
            negate = 1;
            v37 = v128;
            goto LABEL_151;
          }
        }
        else
        {
          if (!(_DWORD)v71)
          {
            negate = 1;
            v37 = v128;
            if (!v79)
              goto LABEL_153;
            goto LABEL_215;
          }
          v85 = &__p;
          v86 = v71;
          while (*(unsigned __int8 *)v85 == v84->__r_.__value_.__s.__data_[0])
          {
            v85 = (void **)((char *)v85 + 1);
            v84 = (std::string *)((char *)v84 + 1);
            if (!--v86)
            {
              negate = 1;
              v37 = v128;
              if ((v71 & 0x80) == 0)
                goto LABEL_152;
              goto LABEL_151;
            }
          }
        }
      }
      v79 = ++v73 < v74;
      if (v73 == v78)
      {
        negate = v131;
        v37 = v128;
        if ((v71 & 0x80) == 0)
          goto LABEL_152;
        goto LABEL_151;
      }
    }
  }
  v79 = 0;
  if (v138 < 0)
LABEL_151:
    operator delete(__p);
LABEL_152:
  if (!v79)
  {
LABEL_153:
    v39 = v135;
    goto LABEL_154;
  }
LABEL_215:
  if (negate == this->__negate_)
  {
    first = 0;
    v108 = -993;
  }
  else
  {
    v2->__current_ += v37;
    first = this->__first_;
    v108 = -995;
  }
  v2->__do_ = v108;
  v2->__node_ = first;
}

void sub_19101AADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, _BYTE *__src, _BYTE *a3)
{
  size_t v3;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  void **__dst;
  size_t v13;
  int64_t v14;

  v3 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 <= 0x16)
  {
    HIBYTE(v14) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v3);
    p_dst = (void **)((char *)p_dst + v3);
    goto LABEL_9;
  }
  v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v3 | 7) != 0x17)
    v8 = v3 | 7;
  v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  v13 = v3;
  v14 = v9 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v10 = HIBYTE(v14);
  if (v14 >= 0)
    v11 = (void **)&__dst;
  else
    v11 = __dst;
  if (v14 < 0)
    v10 = v13;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v11, (char *)v11 + v10);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_19101AD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  uint64_t v18;
  std::string v19;
  std::string __dst;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_)
      goto LABEL_17;
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
      return;
    v12 = &__dst;
  }
  std::__get_collation_name(&v19, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  v13 = v19.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_17;
    v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v16 = &__dst;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v19, *(_QWORD *)(a2 + 16), v16, (char *)v16 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v19;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v17 = *(unsigned __int8 *)(a4 + 23);
    if (v17 != 12 && v17 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(a4 + 8);
  if (v18 == 1 || v18 == 12)
  {
LABEL_33:
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_17;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19101AF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (void **)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v5;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, (char *)v13 + v12);
  v14 = *(unsigned __int8 *)(a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = (_BYTE *)a4;
    else
      v16 = *(_BYTE **)a4;
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
    goto LABEL_25;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (SHIBYTE(v19) < 0)
LABEL_26:
    operator delete(__dst);
}

void sub_19101B118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19101B16C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  char v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  std::string *v16;
  _BYTE *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  std::string::size_type size;
  std::string __p;
  std::string v32;
  std::string v33;
  std::string v34;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  memset(&v33, 0, sizeof(v33));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_10:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_11;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 != 58)
    {
      if (v9 == 61)
      {
        v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        v10 = 0;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_61;
      }
      goto LABEL_10;
    }
    v19 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v20 = 0;
      v21 = (unsigned __int8 *)v4;
      if (v4[2] != 58)
        goto LABEL_37;
LABEL_36:
      if (v21[3] == 93)
      {
        v27 = &v4[v20 + 2];
        if (v27 != a3)
        {
          v28 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v19, v27, *(_DWORD *)(a1 + 24) & 1);
          if (!v28)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          v10 = 0;
          *((_DWORD *)v6 + 40) |= v28;
          v6 = &v4[v20 + 4];
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_61;
          goto LABEL_62;
        }
      }
      else
      {
LABEL_37:
        while (a3 - v4 - 4 != v20)
        {
          v21 = (unsigned __int8 *)&v4[++v20];
          if (v4[v20 + 2] == 58)
            goto LABEL_36;
        }
      }
    }
LABEL_83:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  v22 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_83;
  v23 = a3 - v4 - 4;
  v24 = v4 + 2;
  v25 = v22 + 1;
  if (*v22 != 46)
    goto LABEL_43;
LABEL_42:
  if (*v25 != 93)
  {
LABEL_43:
    while (v23)
    {
      --v23;
      v24 = v25;
      v26 = *v25++;
      if (v26 == 46)
        goto LABEL_42;
    }
    goto LABEL_83;
  }
  if (v24 == a3)
    goto LABEL_83;
  std::regex_traits<char>::__lookup_collatename<char const*>(v22, a1, v24, (uint64_t)&v34);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v33 = v34;
  size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v33.__r_.__value_.__l.__size_;
  if (size - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = v24 + 2;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v14 = v4;
  if (!size)
  {
LABEL_11:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v33);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v13, (unsigned __int8 *)a3, &v33, (uint64_t)v6);
          v11 = 0;
        }
        goto LABEL_17;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v33, v12);
    v14 = v4 + 1;
  }
LABEL_17:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v33.__r_.__value_.__l.__size_)
        goto LABEL_60;
      if (v33.__r_.__value_.__l.__size_ != 1)
      {
        v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
LABEL_59:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
LABEL_60:
        v10 = 1;
        v4 = v14;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_61;
      }
      v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v33.__r_.__value_.__s + 23))
        goto LABEL_60;
      v16 = &v33;
      if (HIBYTE(v33.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_59;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, v16->__r_.__value_.__s.__data_[0]);
    goto LABEL_60;
  }
  memset(&v34, 0, sizeof(v34));
  v4 = v14 + 2;
  if (v14 + 2 == a3 || *v17 != 91 || *v4 != 46)
  {
    if ((v11 | 0x40) == 0x40)
    {
      LODWORD(v17) = *v17;
      if ((_DWORD)v17 == 92)
      {
        if (v11)
          v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v34);
        else
          v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v14 + 2, (unsigned __int8 *)a3, &v34, (uint64_t)v6);
        goto LABEL_73;
      }
    }
    else
    {
      LOBYTE(v17) = *v17;
    }
    std::string::operator=(&v34, (std::string::value_type)v17);
    goto LABEL_74;
  }
  v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v34);
LABEL_73:
  v4 = v18;
LABEL_74:
  v32 = v33;
  memset(&v33, 0, sizeof(v33));
  __p = v34;
  memset(&v34, 0, sizeof(v34));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)&v32, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_77;
LABEL_81:
      operator delete(v34.__r_.__value_.__l.__data_);
      v10 = 1;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_61;
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_81;
LABEL_77:
  v10 = 1;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_61:
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_62:
  if ((v10 & 1) != 0)
    return v4;
  return v6;
}

void sub_19101B628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 49) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 - 49) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(v28 - 72));
  if ((a28 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *p_p;
  std::string::value_type *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  std::string::value_type *__s[2];
  uint64_t v19;
  void *__p;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v7], (uint64_t)&__p);
  if (((char)v22 & 0x80000000) == 0)
  {
    v9 = v22;
    if (v22)
    {
      p_p = (char *)&__p;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v9 = v21;
  if (!v21)
    goto LABEL_40;
  p_p = (char *)__p;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)p_p, &p_p[v9], (uint64_t)__s);
  v11 = (std::string::value_type *)HIBYTE(v19);
  if (v19 < 0)
    v11 = __s[1];
  if (v11)
  {
    v12 = *(_QWORD *)(a4 + 144);
    if (v12 >= *(_QWORD *)(a4 + 152))
    {
      *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__s);
      if (SHIBYTE(v19) < 0)
        goto LABEL_37;
    }
    else
    {
      if (SHIBYTE(v19) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        v13 = *(_OWORD *)__s;
        *(_QWORD *)(v12 + 16) = v19;
        *(_OWORD *)v12 = v13;
      }
      *(_QWORD *)(a4 + 144) = v12 + 24;
      *(_QWORD *)(a4 + 144) = v12 + 24;
      if (SHIBYTE(v19) < 0)
        goto LABEL_37;
    }
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&__p;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)__p;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v15 = (char *)&__p;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)__p;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *v15);
    }
    if (SHIBYTE(v19) < 0)
    {
LABEL_37:
      operator delete(__s[0]);
      if ((char)v22 < 0)
        goto LABEL_38;
      return &__src[v7 + 2];
    }
  }
  if ((char)v22 < 0)
LABEL_38:
    operator delete(__p);
  return &__src[v7 + 2];
}

void sub_19101B8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      std::string::operator=(this, 8);
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_6:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        result = a2 + 1;
      }
      break;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  char *v7;
  std::string::value_type v8;
  char v9;
  int v10;
  std::string::value_type v11;
  std::string::value_type v12;

  if (a2 == a3)
LABEL_51:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(v5)
  {
    case '"':
    case '/':
    case '\\':
      if (this)
        std::string::operator=(this, v5);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    case 'a':
      if (this)
        std::string::operator=(this, 7);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
      return a2 + 1;
    case 'b':
      if (this)
        std::string::operator=(this, 8);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
      return a2 + 1;
    case 'f':
      if (this)
        std::string::operator=(this, 12);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      return a2 + 1;
    case 'n':
      if (this)
        std::string::operator=(this, 10);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      return a2 + 1;
    case 'r':
      if (this)
        std::string::operator=(this, 13);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      return a2 + 1;
    case 't':
      if (this)
        std::string::operator=(this, 9);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      return a2 + 1;
    case 'v':
      if (this)
        std::string::operator=(this, 11);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30)
        goto LABEL_51;
      v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v7 = a3;
LABEL_40:
        v12 = v5 - 48;
        if (this)
          goto LABEL_41;
        goto LABEL_50;
      }
      if ((*v7 & 0xF8) != 0x30)
        goto LABEL_40;
      v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 != a3)
      {
        v9 = a2[2];
        v10 = v9 & 0xF8;
        v11 = v9 + 8 * v8 - 48;
        if (v10 == 48)
          v7 = a2 + 3;
        else
          v7 = a2 + 2;
        if (v10 == 48)
          v8 = v11;
        v12 = v8;
        if (!this)
          goto LABEL_50;
LABEL_41:
        std::string::operator=(this, v12);
        return v7;
      }
      v7 = a3;
      v12 = v8;
      if (this)
        goto LABEL_41;
LABEL_50:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
      return v7;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_19101C344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19101C358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string const,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19101C794(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  uint64_t v18;
  std::string v19;
  std::string __dst;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_)
      goto LABEL_17;
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
      return;
    v12 = &__dst;
  }
  std::__get_collation_name(&v19, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  v13 = v19.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_17;
    v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v16 = &__dst;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v19, *(_QWORD *)(a2 + 16), v16, (char *)v16 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v19;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v17 = *(unsigned __int8 *)(a4 + 23);
    if (v17 != 12 && v17 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(a4 + 8);
  if (v18 == 1 || v18 == 12)
  {
LABEL_33:
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_17;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19101C9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  _OWORD *p_p;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  void *__p;
  unint64_t v25;
  int64_t v26;

  v5 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v25 = v5;
    v26 = v17 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v26) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v10 = p_p;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)p_p + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = p_p + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = HIBYTE(v26);
  if (v26 >= 0)
    v20 = (char *)&__p;
  else
    v20 = (char *)__p;
  if (v26 < 0)
    v19 = v25;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v20[v19]);
  v21 = *(unsigned __int8 *)(a4 + 23);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21 == 1)
    goto LABEL_32;
  if (v21 != 12)
  {
    if (v22 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p);
      return;
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = (_BYTE *)a4;
  else
    v23 = *(_BYTE **)a4;
  v23[11] = v23[3];
  if (SHIBYTE(v26) < 0)
    goto LABEL_35;
}

void sub_19101CBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19101CC10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void **__dst;
  size_t v18;
  int64_t v19;

  v4 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v4;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, (char *)v13 + v12);
  if (v19 >= 0)
    v14 = (const char *)&__dst;
  else
    v14 = (const char *)__dst;
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  return classname;
}

void sub_19101CD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *p_p;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char *v18;
  void *__p;
  unint64_t v20;
  int64_t v21;

  v3 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    p_p = operator new(v14 + 1);
    v20 = v3;
    v21 = v15 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v21) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v8 = p_p;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)p_p + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = p_p + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = HIBYTE(v21);
  if (v21 >= 0)
    v18 = (char *)&__p;
  else
    v18 = (char *)__p;
  if (v21 < 0)
    v17 = v20;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v18[v17]);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_19101D358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19101D3AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_23;
  }
  do
  {
    v14 = *((_OWORD *)v13 - 3);
    *((_QWORD *)v8 - 4) = *((_QWORD *)v13 - 4);
    *((_OWORD *)v8 - 3) = v14;
    *((_QWORD *)v13 - 5) = 0;
    *((_QWORD *)v13 - 4) = 0;
    *((_QWORD *)v13 - 6) = 0;
    v15 = *(_OWORD *)(v13 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v13 - 1);
    *(_OWORD *)(v8 - 24) = v15;
    v8 -= 48;
    *((_QWORD *)v13 - 2) = 0;
    *((_QWORD *)v13 - 1) = 0;
    *((_QWORD *)v13 - 3) = 0;
    v13 -= 48;
  }
  while (v13 != v12);
  v16 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v16)
  {
    while (1)
    {
      if (*(v13 - 1) < 0)
      {
        operator delete(*((void **)v13 - 3));
        if (*(v13 - 25) < 0)
LABEL_20:
          operator delete(*((void **)v13 - 6));
      }
      else if (*(v13 - 25) < 0)
      {
        goto LABEL_20;
      }
      v13 -= 48;
      if (v13 == v16)
      {
        v13 = v16;
        break;
      }
    }
  }
  if (v13)
LABEL_23:
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::basic_regex<char,std::regex_traits<char>>::__push_nongreedy_inf_repeat[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 8);
  v10[1] = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = operator new();
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v13 = &unk_1E2DC3A30;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 40) = v14;
  *(_DWORD *)(v13 + 44) = a4;
  *(_DWORD *)(v13 + 48) = a5;
  *(_BYTE *)(v13 + 52) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &unk_1E2DB4020;
  result[1] = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(a3 + 8) = v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_19101D81C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19101D838(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E2DC3A30;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_1E2DB4020;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_19101D978(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19101D994(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19101D9EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19101DA38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E2DB3FF0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E2DB3FF0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E2DB3FF0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E2DB3FF0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x19401CD90);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x19401CD90);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E2DB3FF0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E2DB3FF0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x19401CD90);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x19401CD90);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19401C7C0](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19101E058(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (unsigned __int8 *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new();
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v10 = &unk_1E2DC3A00;
      *(_QWORD *)(v10 + 8) = v13;
      *(_DWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (unsigned __int8 *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v18, (unsigned __int8 *)a3, v16, v17 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    while (v9 != v15);
    if (v15 + 1 == (unsigned __int8 *)a3 || *v15 != 92 || v15[1] != 41)
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    v7 = (char *)&v15[2 * (v15[1] == 41)];
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new();
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)v19 = &unk_1E2DC39D0;
      *(_QWORD *)(v19 + 8) = v21;
      *(_DWORD *)(v19 + 16) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _BOOL4 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v6 = a2;
  if (a2 != a3)
  {
    v11 = *a2;
    if (v11 == 42)
    {
      v12 = (_QWORD *)operator new();
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      v12[1] = v14;
      *(_QWORD *)(v13 + 8) = 0;
      v15 = operator new();
      v16 = *(_DWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v15 + 16) = v12;
      *(_QWORD *)v15 = &unk_1E2DC3A30;
      *(_QWORD *)(v15 + 8) = v17;
      *(_OWORD *)(v15 + 24) = xmmword_191A82AA0;
      *(_DWORD *)(v15 + 40) = v16;
      *(_DWORD *)(v15 + 44) = a5;
      *(_DWORD *)(v15 + 48) = a6;
      *(_BYTE *)(v15 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v18 = (_QWORD *)operator new();
      *v18 = &unk_1E2DB4020;
      v18[1] = v15;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(a4 + 8) = v15;
      ++*(_DWORD *)(a1 + 32);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v19 = &a2[2 * (a2[1] == 123)];
      if (v19 == a3)
        goto LABEL_44;
      v20 = *v19;
      if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38)
        goto LABEL_44;
      v21 = v20 - 48;
      v22 = v19 + 1;
      if (v19 + 1 == a3)
      {
LABEL_15:
        v22 = a3;
      }
      else
      {
        while (1)
        {
          v23 = *v22;
          if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38)
            break;
          if (v21 >= 214748364)
            goto LABEL_44;
          v21 = v23 + 10 * v21 - 48;
          if (++v22 == a3)
            goto LABEL_15;
        }
      }
      if (v22 == v19)
        goto LABEL_44;
      if (v22 != a3)
      {
        v24 = v22 + 1;
        v25 = *v22;
        if (v25 == 44)
        {
          if (v24 == a3)
            goto LABEL_40;
          v26 = *v24;
          if ((v26 & 0xF8) == 0x30 || (v26 & 0xFE) == 0x38)
          {
            v24 = v22 + 2;
            if (v22 + 2 == a3)
              goto LABEL_40;
            v27 = v26 - 48;
            while (1)
            {
              v42 = *v24;
              if ((v42 & 0xF8) != 0x30 && (v42 & 0xFE) != 0x38)
                break;
              if (v27 >= 214748364)
                goto LABEL_44;
              v27 = v42 + 10 * v27 - 48;
              if (++v24 == a3)
                goto LABEL_40;
            }
          }
          else
          {
            v27 = -1;
          }
          if (v24 != a3 && v24 + 1 != a3 && *v24 == 92 && v24[1] == 125)
          {
            v6 = &v24[2 * (v24[1] == 125)];
            if (v27 == -1)
            {
              v43 = (_QWORD *)operator new();
              v44 = *(_QWORD *)(a1 + 56);
              v45 = *(_QWORD *)(v44 + 8);
              v43[1] = v45;
              *(_QWORD *)(v44 + 8) = 0;
              v31 = operator new();
              v46 = *(_DWORD *)(a1 + 32);
              v47 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v31 = &unk_1E2DC3A30;
              *(_QWORD *)(v31 + 8) = v47;
              *(_QWORD *)(v31 + 16) = v43;
              *(_QWORD *)(v31 + 24) = v21;
              *(_QWORD *)(v31 + 32) = -1;
              *(_DWORD *)(v31 + 40) = v46;
              *(_DWORD *)(v31 + 44) = a5;
              *(_DWORD *)(v31 + 48) = a6;
              *(_BYTE *)(v31 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v34 = (_QWORD *)operator new();
              goto LABEL_42;
            }
            if (v27 >= v21)
            {
              v28 = (_QWORD *)operator new();
              v29 = *(_QWORD *)(a1 + 56);
              v30 = *(_QWORD *)(v29 + 8);
              v28[1] = v30;
              *(_QWORD *)(v29 + 8) = 0;
              v31 = operator new();
              v32 = *(_DWORD *)(a1 + 32);
              v33 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v31 = &unk_1E2DC3A30;
              *(_QWORD *)(v31 + 8) = v33;
              *(_QWORD *)(v31 + 16) = v28;
              *(_QWORD *)(v31 + 24) = v21;
              *(_QWORD *)(v31 + 32) = v27;
              *(_DWORD *)(v31 + 40) = v32;
              *(_DWORD *)(v31 + 44) = a5;
              *(_DWORD *)(v31 + 48) = a6;
              *(_BYTE *)(v31 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v34 = (_QWORD *)operator new();
LABEL_42:
              *v34 = &unk_1E2DB4020;
              v34[1] = v31;
              *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v34;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(v31 + 16);
              *(_QWORD *)(a4 + 8) = v31;
              ++*(_DWORD *)(a1 + 32);
              return v6;
            }
LABEL_44:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
        }
        else if (v24 != a3 && v25 == 92)
        {
          v35 = v22[1];
          v36 = v35 == 125;
          if (v35 == 125)
          {
            v37 = (_QWORD *)operator new();
            v38 = *(_QWORD *)(a1 + 56);
            v39 = *(_QWORD *)(v38 + 8);
            v37[1] = v39;
            *(_QWORD *)(v38 + 8) = 0;
            v31 = operator new();
            v40 = *(_DWORD *)(a1 + 32);
            v41 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v31 = &unk_1E2DC3A30;
            *(_QWORD *)(v31 + 8) = v41;
            *(_QWORD *)(v31 + 16) = v37;
            *(_QWORD *)(v31 + 24) = v21;
            *(_QWORD *)(v31 + 32) = v21;
            *(_DWORD *)(v31 + 40) = v40;
            *(_DWORD *)(v31 + 44) = a5;
            *(_DWORD *)(v31 + 48) = a6;
            *(_BYTE *)(v31 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v34 = (_QWORD *)operator new();
            v6 = &v22[2 * v36];
            goto LABEL_42;
          }
        }
      }
LABEL_40:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

void sub_19101E7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E2DB3ED0;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  int locale_low;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == (char *)a2
    && (v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, (char *)a2, (char *)a3), v8 == (char *)a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_1E2DB3ED0;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (char *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v8, (char *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != (char *)a2)
      goto LABEL_25;
  }
  else if (v8 != (char *)a2)
  {
    goto LABEL_25;
  }
  if (v8 == (char *)a3)
  {
LABEL_25:
    if (v8 != (char *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v8, (char *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return (char *)a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v10 = operator new();
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new();
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)v18 = &unk_1E2DC3A00;
        *(_QWORD *)(v18 + 8) = v21;
        *(_DWORD *)(v18 + 16) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new();
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)v24 = &unk_1E2DC39D0;
        *(_QWORD *)(v24 + 8) = v26;
        *(_DWORD *)(v24 + 16) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (char *)&v23->__traits_.__loc_.__locale_ + 1;
      goto LABEL_25;
    case '^':
      v10 = operator new();
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v10 = v13 + 16;
      *(_QWORD *)(v10 + 8) = v17;
      *(_BYTE *)(v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return (char *)a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  std::basic_regex<char>::value_type v5;
  char *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  _BYTE v96[56];
  void *__p[2];
  _QWORD v98[3];
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v84 = (void **)*((_QWORD *)&v99 + 1);
    v85 = (void **)v100;
    *((_QWORD *)&v101 + 1) = 0;
    v86 = v100 - *((_QWORD *)&v99 + 1);
    if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v84);
      v85 = (void **)v100;
      v84 = (void **)(*((_QWORD *)&v99 + 1) + 8);
      *((_QWORD *)&v99 + 1) = v84;
      v86 = v100 - (_QWORD)v84;
    }
    while ((_QWORD)v100 - (_QWORD)v84 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v96 = 0;
  memset(&v96[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v98, 0, 21);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  v11 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) / 0x2AuLL))
      + 96 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) % 0x2AuLL);
  v12 = *(_OWORD *)&v96[16];
  *(_OWORD *)v11 = *(_OWORD *)v96;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v96[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v98[0] = 0;
  v13 = v98[1];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v101 + 1);
  v14 = v101;
  v16 = ++*((_QWORD *)&v101 + 1);
  v17 = *((_QWORD *)&v99 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v15 + v101;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v91 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v101 + 1);
    v14 = v101;
    v17 = *((_QWORD *)&v99 + 1);
  }
  v93 = 0;
  v28 = 0;
  v92 = 0;
  v29 = v16 + v14 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v101 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v64 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v65 = v92;
        if ((v93 & (v92 >= v64)) == 0)
          v65 = v64;
        if (v65 == v32)
        {
          v66 = (void **)*((_QWORD *)&v99 + 1);
          v67 = v100;
          if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          {
            *((_QWORD *)&v101 + 1) = 0;
            v81 = 0;
          }
          else
          {
            v68 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            v69 = (_QWORD *)(*v68 + 96 * ((unint64_t)v101 % 0x2A));
            v70 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) % 0x2AuLL);
            if (v69 != (_QWORD *)v70)
            {
              do
              {
                v71 = (void *)v69[7];
                if (v71)
                {
                  v69[8] = v71;
                  operator delete(v71);
                }
                v72 = (void *)v69[4];
                if (v72)
                {
                  v69[5] = v72;
                  operator delete(v72);
                }
                v69 += 12;
                if ((_QWORD *)((char *)v69 - *v68) == (_QWORD *)4032)
                {
                  v73 = (_QWORD *)v68[1];
                  ++v68;
                  v69 = v73;
                }
              }
              while (v69 != (_QWORD *)v70);
              v66 = (void **)*((_QWORD *)&v99 + 1);
              v67 = v100;
            }
            *((_QWORD *)&v101 + 1) = 0;
            v81 = v67 - (_QWORD)v66;
            if (v81 >= 0x11)
            {
              do
              {
                operator delete(*v66);
                v66 = (void **)(*((_QWORD *)&v99 + 1) + 8);
                *((_QWORD *)&v99 + 1) = v66;
                v81 = v100 - (_QWORD)v66;
              }
              while ((_QWORD)v100 - (_QWORD)v66 > 0x10uLL);
            }
          }
          if (v81 >> 3 == 1)
          {
            v82 = 21;
          }
          else
          {
            if (v81 >> 3 != 2)
            {
LABEL_76:
              v93 = 1;
              v92 = a3 - a2;
              goto LABEL_8;
            }
            v82 = 42;
          }
          *(_QWORD *)&v101 = v82;
          goto LABEL_76;
        }
        v92 = v65;
        v74 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v75 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v74 / 0x2A));
        v76 = v74 % 0x2A;
        v77 = *(void **)(v75 + 96 * (v74 % 0x2A) + 56);
        if (v77)
        {
          *(_QWORD *)(v75 + 96 * v76 + 64) = v77;
          operator delete(v77);
        }
        v78 = *(void **)(v75 + 96 * v76 + 32);
        if (v78)
        {
          *(_QWORD *)(v75 + 96 * v76 + 40) = v78;
          operator delete(v78);
        }
        v79 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v80 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v79 = 0;
        if ((unint64_t)(v79 - (*((_QWORD *)&v80 + 1) + v80) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        v93 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
          continue;
        if ((v93 & 1) != 0)
        {
          v83 = *v91;
          *(_QWORD *)v83 = a2;
          *(_QWORD *)(v83 + 8) = a2 + v92;
          v6 = 1;
          *(_BYTE *)(v83 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v84 = (void **)*((_QWORD *)&v99 + 1);
        v85 = (void **)v100;
        *((_QWORD *)&v101 + 1) = 0;
        v86 = v100 - *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v87 = v86 >> 3;
        if (v87 == 1)
        {
          v88 = 21;
LABEL_85:
          *(_QWORD *)&v101 = v88;
        }
        else if (v87 == 2)
        {
          v88 = 42;
          goto LABEL_85;
        }
        if (v84 != v85)
        {
          do
          {
            v89 = *v84++;
            operator delete(v89);
          }
          while (v84 != v85);
          if ((_QWORD)v100 != *((_QWORD *)&v99 + 1))
            *(_QWORD *)&v100 = v100 + ((*((_QWORD *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v99)
          operator delete((void *)v99);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v101;
        if (!(_QWORD)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          v49 = v101;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v101 + 1);
        *(_QWORD *)&v101 = v101 - 1;
        ++*((_QWORD *)&v101 + 1);
        v56 = v55 + v101;
        v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v48 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v96, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v98[1] + 24))(v98[1], 0, v96);
        v58 = *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v59 = 0;
        else
          v59 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v60 = *((_QWORD *)&v101 + 1) + v101;
        if (v59 == *((_QWORD *)&v101 + 1) + (_QWORD)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          v58 = *((_QWORD *)&v99 + 1);
          v60 = *((_QWORD *)&v101 + 1) + v101;
        }
        v61 = *(_QWORD *)(v58 + 8 * (v60 / 0x2A)) + 96 * (v60 % 0x2A);
        v62 = *(_OWORD *)&v96[16];
        *(_OWORD *)v61 = *(_OWORD *)v96;
        *(_OWORD *)(v61 + 16) = v62;
        *(_QWORD *)(v61 + 40) = 0;
        *(_QWORD *)(v61 + 48) = 0;
        *(_QWORD *)(v61 + 32) = 0;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)&v96[32];
        *(_QWORD *)(v61 + 48) = *(_QWORD *)&v96[48];
        memset(&v96[32], 0, 24);
        *(_QWORD *)(v61 + 56) = 0;
        *(_QWORD *)(v61 + 64) = 0;
        *(_QWORD *)(v61 + 72) = 0;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
        *(_QWORD *)(v61 + 72) = v98[0];
        __p[0] = 0;
        __p[1] = 0;
        v98[0] = 0;
        v63 = v98[1];
        *(_QWORD *)(v61 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
        *(_QWORD *)(v61 + 80) = v63;
        ++*((_QWORD *)&v101 + 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(_QWORD *)&v96[32])
        {
          *(_QWORD *)&v96[40] = *(_QWORD *)&v96[32];
          operator delete(*(void **)&v96[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_19101FC2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_19101FC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_19101FC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_19101FC9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  unsigned int v20;
  const char *v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const char *v26;
  char *v27;
  void *v28;
  void *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  void *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  char v59;
  _BYTE v61[56];
  void *__p[2];
  _QWORD v63[3];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v65[40];
  __int128 v66;
  void *v67[6];
  char *v68;
  char *v69;
  unint64_t v70;

  v68 = 0;
  v69 = 0;
  v70 = 0;
  *(_DWORD *)v65 = 0;
  memset(&v65[8], 0, 32);
  v66 = 0u;
  memset(v67, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v61 = 0;
  memset(&v61[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v63, 0, 21);
  v69 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v68, (uint64_t)v61);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v61[32])
  {
    *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
    operator delete(*(void **)&v61[32]);
  }
  v12 = v69;
  *((_DWORD *)v69 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v69;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v69;
  }
  v19 = 0;
  v59 = 0;
  v20 = 0;
  v21 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v58 = a3;
  *(v12 - 4) = a6;
  do
  {
    v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v24 = v12 - 16;
    v23 = *((_QWORD *)v12 - 2);
    v25 = v12 - 96;
    if (v23)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v12 - 96);
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        v26 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v58)
          goto LABEL_29;
        v33 = v19;
        v34 = &v26[-*((_QWORD *)v12 - 11)];
        if ((v59 & ((uint64_t)v33 >= (uint64_t)v34)) == 0)
        {
          v35 = *(_OWORD *)v25;
          *(_OWORD *)&v65[16] = *((_OWORD *)v12 - 5);
          *(_OWORD *)v65 = v35;
          if (v65 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v65[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v67, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(void **)v24;
          *(void **)((char *)&v67[3] + 5) = *(void **)(v12 - 11);
          v67[3] = v36;
          v33 = v34;
        }
        v37 = v69;
        if (v33 == v21)
        {
          v38 = v68;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v69 = v38;
          v59 = 1;
          v19 = v21;
        }
        else
        {
          v19 = v33;
          v41 = (void *)*((_QWORD *)v69 - 5);
          if (v41)
          {
            *((_QWORD *)v69 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v69 = v37 - 96;
          v59 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v27 = v69;
        v28 = (void *)*((_QWORD *)v69 - 5);
        if (v28)
        {
          *((_QWORD *)v69 - 4) = v28;
          operator delete(v28);
        }
        v29 = (void *)*((_QWORD *)v27 - 8);
        if (v29)
        {
          *((_QWORD *)v27 - 7) = v29;
          operator delete(v29);
        }
        v69 = v27 - 96;
        break;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v61, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v63[1] + 24))(v63[1], 0, v61);
        v30 = v69;
        if ((unint64_t)v69 >= v70)
        {
          v69 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v68, (uint64_t)v61);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v61[16];
          *(_OWORD *)v69 = *(_OWORD *)v61;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v61[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v61[48];
          memset(&v61[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v30 + 9) = v63[0];
          __p[0] = 0;
          __p[1] = 0;
          v63[0] = 0;
          v32 = v63[1];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)((char *)&v63[1] + 5);
          *((_QWORD *)v30 + 10) = v32;
          v69 = v30 + 96;
        }
        if (*(_QWORD *)&v61[32])
        {
          *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
          operator delete(*(void **)&v61[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v69;
  }
  while (v68 != v69);
  if ((v59 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = v67[0];
    if (!v67[0])
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v19[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if ((_QWORD)v66 != *(_QWORD *)&v65[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *(_QWORD *)&v65[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v65[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v22 = v44 > v46++;
    }
    while (v22);
  }
  v49 = 1;
  v50 = v67[0];
  if (v67[0])
  {
LABEL_64:
    v67[1] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v65[32])
  {
    *(_QWORD *)&v66 = *(_QWORD *)&v65[32];
    operator delete(*(void **)&v65[32]);
  }
  v51 = v68;
  if (v68)
  {
    v52 = v69;
    v53 = v68;
    if (v69 != v68)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v68;
    }
    v69 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_191020240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 < 0x11)
      goto LABEL_14;
    goto LABEL_13;
  }
  v4 = a1[4];
  v5 = &v2[v4 / 0x2A];
  v6 = (char *)*v5 + 96 * (v4 % 0x2A);
  v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
  if (v6 != (char *)v7)
  {
    do
    {
      v8 = (void *)*((_QWORD *)v6 + 7);
      if (v8)
      {
        *((_QWORD *)v6 + 8) = v8;
        operator delete(v8);
      }
      v9 = (void *)*((_QWORD *)v6 + 4);
      if (v9)
      {
        *((_QWORD *)v6 + 5) = v9;
        operator delete(v9);
      }
      v6 += 96;
      if (v6 - (_BYTE *)*v5 == 4032)
      {
        v10 = (char *)v5[1];
        ++v5;
        v6 = v10;
      }
    }
    while (v6 != (char *)v7);
    v2 = (void **)a1[1];
    v3 = (void **)a1[2];
  }
  a1[5] = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v2);
      v12 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = v12 - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
LABEL_14:
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1910209B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1910209D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1910209E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_191020A00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  void *v48;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v48 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v48);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v48 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v48);
      v18 = *(_QWORD *)(a1 + 16);
      v48 = *(void **)(v18 - 8);
      *(_QWORD *)(a1 + 16) = v18 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v48 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_19:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_19;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    v17 = v12;
    if (v3 != v2)
      goto LABEL_27;
    goto LABEL_21;
  }
  v19 = (char *)operator new(8uLL);
  v15 = v19 + 8;
  operator delete(v12);
  v3 = *(uint64_t **)(a1 + 8);
  v20 = *(uint64_t **)(a1 + 16);
  v12 = v19;
  *(_QWORD *)v19 = v14;
  v16 = v19 + 8;
  v17 = v19;
  if (v3 != v20)
  {
    while (1)
    {
LABEL_27:
      if (v16 == v15)
      {
        if (v12 <= v17)
        {
          if (v16 == v17)
            v32 = 1;
          else
            v32 = (v16 - v17) >> 2;
          if (v32 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v33 = (char *)operator new(8 * v32);
          v34 = v33;
          v35 = v32 >> 2;
          v21 = &v33[8 * (v32 >> 2)];
          v24 = v21;
          v36 = v16 - v12;
          if (v16 != v12)
          {
            v24 = &v21[v36 & 0xFFFFFFFFFFFFFFF8];
            v37 = v36 - 8;
            if (v37 < 0x38 || (v38 = 8 * v35, (unint64_t)(&v33[8 * v35] - v12) < 0x20))
            {
              v39 = &v33[8 * (v32 >> 2)];
              v40 = v12;
              goto LABEL_43;
            }
            v42 = (v37 >> 3) + 1;
            v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v21[v43];
            v40 = &v12[v43];
            v44 = (__int128 *)(v12 + 16);
            v45 = &v33[v38 + 16];
            v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *v44;
              *((_OWORD *)v45 - 1) = *(v44 - 1);
              *(_OWORD *)v45 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_43:
                v41 = *(_QWORD *)v40;
                v40 += 8;
                *(_QWORD *)v39 = v41;
                v39 += 8;
              }
              while (v39 != v24);
            }
          }
          v16 = &v33[8 * v32];
          if (v17)
            operator delete(v17);
          v17 = v34;
          goto LABEL_26;
        }
        v26 = (v12 - v17) >> 3;
        if (v26 >= -1)
          v27 = v26 + 1;
        else
          v27 = v26 + 2;
        v28 = v27 >> 1;
        v29 = &v12[-8 * (v27 >> 1)];
        v30 = v16;
        if (v16 != v12)
        {
          memmove(v29, v12, v16 - v12);
          v30 = v12;
        }
        v31 = -v28;
        v24 = &v29[v16 - v12];
        v21 = &v30[8 * v31];
      }
      else
      {
        v21 = v12;
        v24 = v16;
        v16 = v15;
      }
LABEL_26:
      v15 = v16;
      v25 = *v3++;
      *(_QWORD *)v24 = v25;
      v22 = v24 + 8;
      v16 = v22;
      v12 = v21;
      if (v3 == *(uint64_t **)(a1 + 16))
        goto LABEL_22;
    }
  }
LABEL_21:
  v21 = v12;
  v22 = v16;
LABEL_22:
  v23 = *(void **)a1;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v15;
  if (v22 - v21 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v23)
LABEL_24:
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v23)
      goto LABEL_24;
  }
}

void sub_1910210B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

double E5RT::E5OperationBuilder::Create@<D0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t (**v4)();
  double result;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  switch(a1)
  {
    case 1:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A388;
      break;
    case 2:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A470;
      break;
    case 3:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A9E0;
      break;
    case 4:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5AAC8;
      break;
    case 5:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A1B8;
      break;
    case 7:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A728;
      break;
    case 8:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A8F8;
      break;
    case 9:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A0D0;
      break;
    case 11:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A640;
      break;
    case 12:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A810;
      break;
    case 13:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A2A0;
      break;
    case 14:
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      E5RT::E5Operation::E5Operation((_QWORD *)v3);
      v4 = &off_1E2D5A558;
      break;
    default:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v9, "Create");
      std::string::basic_string[abi:ne180100]<0>(v7, "Invalid OpCode.");
      E5RT::Status::Status(v8, 1, v7);
      E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *(_QWORD *)(v3 + 8) = v4 + 18;
  *(_QWORD *)v3 = v4;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + 120) = 1065353216;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_DWORD *)(v3 + 160) = 1065353216;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_QWORD *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 224) = 1065353216;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 264) = 1065353216;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_QWORD *)(v3 + 320) = 0;
  *(_DWORD *)(v3 + 328) = 1065353216;
  *(_DWORD *)(v3 + 368) = 1065353216;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_BYTE *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 384) = 0;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_BYTE *)(v3 + 400) = 0;
  *a2 = v3 + 8;
  return result;
}

void sub_191021D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_191021DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10F3C40CE7A3A92);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<AneInferenceOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191021F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<BnnsCpuInferenceOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191022180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<CpuInferenceOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191022368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<CastOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191022550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<QuantOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191022738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<DequantOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191022920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<MlcCpuInferenceOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191022B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<MpsGraphInferenceOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191022CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<EirInferenceOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191022ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<JitCallOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1910230C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<E5MinimalCpuOpT>(const void *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];

  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v14, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v15, 2, v14);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 6) = v4;
  *((_QWORD *)v3 + 7) = v5;
  if (!v8)
    goto LABEL_10;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return;
  }
  else
  {
LABEL_10:
    if (!v5)
      return;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1910232A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void *E5RT::E5OperationBuilder::Finish@<X0>(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  void *result;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Operation");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_1910233F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(a1);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E2D5A0D0;
  *(_QWORD *)(a1 + 8) = &unk_1E2D5A160;
  v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(_QWORD *)(a1 + 384) = v2;
    operator delete(v2);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        goto LABEL_8;
LABEL_11:
      operator delete(*(void **)(a1 + 16));
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
      return;
    }
  }
  if (*(char *)(a1 + 39) < 0)
    goto LABEL_11;
LABEL_8:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<BarrierOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<BarrierOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<BarrierOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void E5RT::E5OperationImpl<BarrierOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 400) = a2;
  *(_BYTE *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<BarrierOpT>::AddDependentEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)a1[48];
  v4 = a1[49];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)a1[47];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[48] = v7;
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(a1 - 8);
}

{
  E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(a1 - 8);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *`non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)v4[1];
  *v4 = v6;
  v4[1] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void `non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
  E5RT::E5OperationImpl<BarrierOpT>::AddDependentEvent((_QWORD *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 392) = a2;
  *(_BYTE *)(result + 400) = 1;
  return result;
}

void E5Common::AutoSharedDataPtr::~AutoSharedDataPtr(E5Common::AutoSharedDataPtr *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2D5CD18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    E5RT::AsyncEventImpl::~AsyncEventImpl(this);
  }
  else
  {
LABEL_5:
    E5RT::AsyncEventImpl::~AsyncEventImpl(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2D5CD18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *E5Common::AutoSharedDataPtr::AutoSharedDataPtr(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_1E2D5CD18;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t E5Common::AutoSharedDataPtr::GetLength(E5Common::AutoSharedDataPtr *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8);
}

uint64_t E5Common::AutoSharedDataPtr::GetSpan(E5Common::AutoSharedDataPtr *this)
{
  return **((_QWORD **)this + 1);
}

unint64_t E5Common::AutoSharedDataPtr::GetSpan(E5Common::AutoSharedDataPtr *this, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  std::runtime_error *exception;

  if (!a3 || ((v3 = (_QWORD *)*((_QWORD *)this + 1), v4 = v3[1], v4 > a2) ? (v5 = a3 + a2 > v4) : (v5 = 1), v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
  }
  return *v3 + a2;
}

void sub_191023C28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id E5Common::GetANEFModel(std::string::size_type a1, uint64_t *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  void *v14;
  std::string *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string *v32;
  const char *v33;
  int v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  id v38;
  void *v40;
  const char *v41;
  size_t v42;
  void *v43;
  void *exception;
  _BYTE v45[24];
  _BYTE v46[8];
  id v47;
  std::string v48;
  std::string v49;
  std::string __p[11];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 8;
  strcpy((char *)__p, ".anehash");
  v6 = (id)E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v5)
    v7 = objc_msgSend(v5, "mutableCopy");
  else
    v7 = objc_opt_new();
  v8 = (void *)v7;
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
      goto LABEL_11;
    a2 = (uint64_t *)*a2;
    goto LABEL_10;
  }
  if (*((_BYTE *)a2 + 23))
  {
LABEL_10:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, *MEMORY[0x1E0CFE020]);

  }
LABEL_11:
  memset(&v49, 0, sizeof(v49));
  if ((_DWORD)v6)
  {
    memset(__p, 0, 24);
    v10 = *(unsigned __int8 *)(a1 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = (std::string *)a1;
    else
      v11 = *(std::string **)a1;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a1 + 8);
    std::string::append[abi:ne180100]<char const*,0>(__p, v11, (std::string *)((char *)v11 + v10));
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v48.__r_.__value_.__s.__data_[0] == 255 || !v48.__r_.__value_.__s.__data_[0])
    {
      std::operator+<char>();
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v48, "GetANEFModel");
      E5RT::Status::Status(v45, 13, __p);
      E5RT::E5RTError::E5RTError(exception, &v48, v45);
    }
    memset(&v48, 0, sizeof(v48));
    v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (std::string *)a1;
    else
      v13 = *(std::string **)a1;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a1 + 8);
    std::string::append[abi:ne180100]<char const*,0>(&v48, v13, (std::string *)((char *)v13 + v12));
    E5RT::ReadAneCacheUrlIdentifier((const std::__fs::filesystem::path *)&v48, __p);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    v49 = __p[0];
    *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    v14 = (void *)MEMORY[0x1E0CFDF68];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v49;
    else
      v15 = (std::string *)v49.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "modelWithCacheURLIdentifier:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CFE018]);
  }
  else
  {
    if (*(char *)(a1 + 23) >= 0)
      v18 = a1;
    else
      v18 = *(_QWORD *)a1;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "URLPathAllowedCharacterSet");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "stringByAddingPercentEncodingWithAllowedCharacters:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CFDF68], "modelAtURL:key:", v22, CFSTR("ANE_model"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", *MEMORY[0x1E0CFE068], *MEMORY[0x1E0CFE090]);

  }
  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = 0;
  v24 = objc_msgSend(v23, "loadModel:options:qos:error:", v17, v8, 21, &v47);
  v25 = v47;

  if ((v24 & 1) == 0)
  {
    if ((_DWORD)v6)
    {
      v40 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "GetANEFModel");
      std::string::basic_string[abi:ne180100]<0>(&v48, "ANE model load has failed for on-device compiled macho. Must re-compile the E5 bundle.");
      E5RT::Status::Status(v45, 13, &v48);
      E5RT::E5RTError::E5RTError(v40, __p, v45);
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ANE model load failure: ", 24);
    if (v25)
    {
      objc_msgSend(v25, "localizedDescription");
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v41 = (const char *)objc_msgSend(v6, "UTF8String");
    }
    else
    {
      v41 = "unknown error";
    }
    v42 = strlen(v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v41, v42);
    if (v25)

    v43 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v48, "GetANEFModel");
    std::stringbuf::str();
    E5RT::Status::Status(v46, 9, v45);
    E5RT::E5RTError::E5RTError(v43, &v48, v46);
  }
  if ((_DWORD)v6)
  {
    *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 4;
    strcpy((char *)__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = v26;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        goto LABEL_56;
    }
    else if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      goto LABEL_56;
    }
    v29 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    v30 = v49.__r_.__value_.__r.__words[0];
    v31 = objc_msgSend(v17, "programHandle");
    v32 = &v49;
    if (v29 < 0)
      v32 = (std::string *)v30;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = v31;
    v33 = "Loaded ANE Model with cacheURLIdentifier = %s with programHandle = 0x%llx\n";
LABEL_55:
    _os_log_impl(&dword_190DAF000, v27, OS_LOG_TYPE_INFO, v33, (uint8_t *)__p, 0x16u);
    goto LABEL_56;
  }
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v28 = objc_claimAutoreleasedReturnValue();
  v27 = v28;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      goto LABEL_56;
    goto LABEL_51;
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
LABEL_51:
    v34 = *(char *)(a1 + 23);
    v35 = *(_QWORD *)a1;
    v36 = objc_msgSend(v17, "programHandle");
    if (v34 >= 0)
      v37 = a1;
    else
      v37 = v35;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v37;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = v36;
    v33 = "Loaded ANE Model at path = %s with programHandle = 0x%llx\n";
    goto LABEL_55;
  }
LABEL_56:

  v38 = v17;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);

  return v38;
}

void sub_1910242F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  int v38;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (a35 < 0)
        operator delete(a30);
      if (a28 < 0)
        operator delete(a23);

      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

id E5Common::GetANEFAdaptedModel(void *a1, uint64_t a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t *i;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  const char *v31;
  size_t v32;
  void *v33;
  std::runtime_error *exception;
  id v35;
  void *v36;
  void *v37;
  uint64_t *v38;
  _BYTE v39[24];
  _BYTE v40[8];
  _QWORD v41[3];
  _QWORD v42[33];
  id v43;
  _QWORD v44[2];
  _QWORD v45[4];

  v45[2] = *MEMORY[0x1E0C80C00];
  v35 = a1;
  objc_msgSend(v35, "getCacheURLIdentifier");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v36)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MILCompilerForANE error: ANEF returned cacheURLIdentifier as nil for base model.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v37 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  v3 = *(uint64_t **)(a2 + 16);
  if (v3)
  {
    do
    {
      v4 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
      v38 = v3;
      for (i = (uint64_t *)v3[7]; i; i = (uint64_t *)*i)
      {
        v6 = i + 2;
        if (*((char *)i + 39) < 0)
          v6 = (_QWORD *)*v6;
        v7 = (void *)MEMORY[0x1E0CFDFB0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = i + 5;
        if (*((char *)i + 63) < 0)
          v9 = (_QWORD *)*v9;
        v10 = (void *)MEMORY[0x1E0C99E98];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "fileURLWithPath:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "weightWithSymbolAndURL:weightURL:", v8, v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v4, "addObject:", v13);
      }
      v14 = v38 + 2;
      if (*((char *)v38 + 39) < 0)
        v14 = (_QWORD *)*v14;
      v15 = (void *)MEMORY[0x1E0CFDF80];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "procedureDataWithSymbol:weightArray:", v16, v4);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v37, "addObject:", v17);
      v3 = (uint64_t *)*v38;
    }
    while (*v38);
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Adapting ANE model."));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFDF70], "withProcedureData:procedureArray:", v18, v37);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = *MEMORY[0x1E0CFE090];
  v44[0] = *MEMORY[0x1E0CFDFC0];
  v44[1] = v20;
  v21 = *MEMORY[0x1E0CFE068];
  v45[0] = v36;
  v45[1] = v21;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, v44, 2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "UUIDString");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@:%@"), v36, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFDF68], "modelWithCacheURLIdentifier:", v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0;
  v28 = objc_msgSend(v27, "loadModelNewInstance:options:modelInstParams:qos:error:", v26, v22, v19, 21, &v43);
  v29 = v43;

  if ((v28 & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ANE adapted model load failure: ", 32);
    if (v29)
    {
      objc_msgSend(v29, "localizedDescription");
      v28 = (uint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v31 = (const char *)objc_msgSend((id)v28, "UTF8String");
    }
    else
    {
      v31 = "unknown error";
    }
    v32 = strlen(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v31, v32);
    if (v29)

    v33 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v41, "GetANEFAdaptedModel");
    std::stringbuf::str();
    E5RT::Status::Status(v40, 9, v39);
    E5RT::E5RTError::E5RTError(v33, v41, v40);
  }

  return v26;
}

void sub_1910249D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{

  _Unwind_Resume(a1);
}

void E5RT::GetDeviceBundleNamesCompatibleWithPlatform(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v3;
  _OWORD v4[2];
  char __p[17];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4[0] = xmmword_191A82BE8;
  v4[1] = unk_191A82BF8;
  v2 = __p;
  if (a1 > 33039)
  {
    if (a1 == 33040)
    {
      v3 = 0;
    }
    else
    {
      if (a1 != 33042)
        goto LABEL_11;
      v3 = 1;
    }
  }
  else if (a1 == 24608)
  {
    v3 = 2;
  }
  else
  {
    if (a1 != 24609)
      goto LABEL_11;
    v3 = 3;
  }
  v2 = (char *)v4 + 8 * v3;
LABEL_11:
  if (v2 - (char *)v4 == 32)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v6 = 16;
    strcpy(__p, "H14G.N301.bundle");
    std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)__p, 1uLL);
    if (v6 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_191024CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  std::string *end;
  std::vector<std::string>::pointer begin;
  int64_t v7;
  std::vector<std::string>::pointer first;
  std::string *value;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::vector<std::string>::pointer v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  __int128 v19;
  std::__split_buffer<std::string>::pointer v20;
  std::vector<std::string>::pointer v21;
  std::string *v22;
  std::__split_buffer<std::string>::pointer v23;
  std::string *v24;
  __int128 v25;
  std::vector<std::string>::pointer v26;
  std::__split_buffer<std::string>::pointer v27;
  __int128 v28;
  std::string *v29;
  std::string *v30;
  std::__split_buffer<std::string>::pointer v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  std::__split_buffer<std::string> v37;

  begin = this->__begin_;
  end = this->__end_;
  v7 = __position.__i_ - this->__begin_;
  first = &this->__begin_[v7];
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v15;
    v37.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = (std::string *)operator new(24 * v17);
    }
    else
    {
      v18 = 0;
    }
    v37.__first_ = v18;
    v37.__begin_ = &v18[v7];
    v37.__end_ = v37.__begin_;
    v37.__end_cap_.__value_ = &v18[v17];
    std::__split_buffer<std::string>::push_back(&v37, __x);
    v20 = v37.__begin_;
    v21 = this->__begin_;
    v22 = v37.__begin_;
    if (this->__begin_ != first)
    {
      v23 = v37.__begin_;
      v24 = first;
      do
      {
        v22 = v23 - 1;
        v25 = *(_OWORD *)&v24[-1].__r_.__value_.__l.__data_;
        v23[-1].__r_.__value_.__r.__words[2] = v24[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23[-1].__r_.__value_.__l.__data_ = v25;
        v24[-1].__r_.__value_.__l.__size_ = 0;
        v24[-1].__r_.__value_.__r.__words[2] = 0;
        v24[-1].__r_.__value_.__r.__words[0] = 0;
        --v23;
        --v24;
      }
      while (v24 != v21);
    }
    v37.__begin_ = v22;
    v26 = this->__end_;
    v27 = v37.__end_;
    if (v26 != first)
    {
      do
      {
        v28 = *(_OWORD *)&first->__r_.__value_.__l.__data_;
        v27->__r_.__value_.__r.__words[2] = first->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        ++v27;
        first->__r_.__value_.__l.__size_ = 0;
        first->__r_.__value_.__r.__words[2] = 0;
        first->__r_.__value_.__r.__words[0] = 0;
        ++first;
      }
      while (first != v26);
      v22 = v37.__begin_;
      first = this->__end_;
    }
    v29 = this->__begin_;
    this->__begin_ = v22;
    this->__end_ = v27;
    v30 = this->__end_cap_.__value_;
    this->__end_cap_.__value_ = v37.__end_cap_.__value_;
    v37.__end_ = first;
    v37.__end_cap_.__value_ = v30;
    v37.__first_ = v29;
    v37.__begin_ = v29;
    if (first == v29)
    {
      if (!first)
        return (std::vector<std::string>::iterator)v20;
    }
    else
    {
      do
      {
        v31 = first - 1;
        v37.__end_ = first - 1;
        if (SHIBYTE(first[-1].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v31->__r_.__value_.__l.__data_);
          v31 = v37.__end_;
        }
        first = v31;
      }
      while (v31 != v29);
      first = v37.__first_;
      if (!v37.__first_)
        return (std::vector<std::string>::iterator)v20;
    }
    operator delete(first);
    return (std::vector<std::string>::iterator)v20;
  }
  if (first == end)
  {
    v19 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    first->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&first->__r_.__value_.__l.__data_ = v19;
    *(_OWORD *)&__x->__r_.__value_.__r.__words[1] = 0uLL;
    __x->__r_.__value_.__r.__words[0] = 0;
    this->__end_ = first + 1;
    return (std::vector<std::string>::iterator)first;
  }
  v10 = first + 1;
  v11 = end - 1;
  if ((unint64_t)end >= 0x18)
  {
    v12 = end - 1;
    v13 = this->__end_;
    do
    {
      v14 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v13->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      ++v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      ++v12;
    }
    while (v12 < end);
    this->__end_ = v13;
    if (end == v10)
      goto LABEL_39;
LABEL_35:
    v32 = 8 * (((char *)end - (char *)v10) >> 3);
    do
    {
      if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11->__r_.__value_.__l.__data_);
      v33 = (__int128 *)((char *)&first[-1] + v32);
      v34 = *v33;
      v11->__r_.__value_.__r.__words[2] = first->__r_.__value_.__r.__words[(unint64_t)v32 / 8 - 1];
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v34;
      --v11;
      first->__r_.__value_.__s.__data_[v32 - 1] = 0;
      *(_BYTE *)v33 = 0;
      v32 -= 24;
    }
    while (v32);
    goto LABEL_39;
  }
  this->__end_ = end;
  if (end != v10)
    goto LABEL_35;
LABEL_39:
  if (SHIBYTE(first->__r_.__value_.__r.__words[2]) < 0)
    operator delete(first->__r_.__value_.__l.__data_);
  v35 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  first->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
  *(_OWORD *)&first->__r_.__value_.__l.__data_ = v35;
  *((_BYTE *)&__x->__r_.__value_.__s + 23) = 0;
  __x->__r_.__value_.__s.__data_[0] = 0;
  return (std::vector<std::string>::iterator)first;
}

void sub_191024FD4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void sub_191024FE8(std::string *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  size_t v6;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *exception;
  std::string *v13;
  __int128 v14;
  std::string v15;
  __int128 v16;
  std::string::size_type v17;
  _BYTE v18[8];
  std::string __dst;
  std::string __p;
  void *v21[2];
  unsigned __int8 v22;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, ".bundle");
  E5Common::StringUtils::GetSubstringBeforeSuffix(a3, (uint64_t)&__p, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = (char)v22;
  if ((v22 & 0x80u) == 0)
    v6 = v22;
  else
    v6 = (size_t)v21[1];
  v7 = v6 + 3;
  if (v6 + 3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 3;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6 + 3;
    if (!v6)
      goto LABEL_17;
  }
  if (v5 >= 0)
    v11 = v21;
  else
    v11 = (void **)v21[0];
  memmove(p_dst, v11, v6);
LABEL_17:
  *(_DWORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v6) = 3499310;
  E5RT::PathWrapper::Append(a2, &__dst, &__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&__p))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__dst, "GetE5FileFromFolderPath");
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v15 = *(std::string *)a2;
    v13 = std::string::insert(&v15, 0, "Unable to find E5 file in folder ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v17 = v13->__r_.__value_.__r.__words[2];
    v16 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v18, 8, &v16);
    E5RT::E5RTError::E5RTError(exception, &__dst, v18);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *a1 = __p;
    if (((char)v22 & 0x80000000) == 0)
      return;
    goto LABEL_25;
  }
  std::string::__init_copy_ctor_external(a1, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (((char)v22 & 0x80000000) == 0)
      return;
    goto LABEL_25;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v22 < 0)
LABEL_25:
    operator delete(v21[0]);
}

void sub_191025250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 65) < 0)
    operator delete(*(void **)(v35 - 88));
  _Unwind_Resume(exception_object);
}

const void **std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **result@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  int v4;
  size_t v5;
  int v6;
  size_t v7;
  unint64_t v8;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char *v14;
  const void *v15;

  v3 = (_QWORD *)a3;
  v4 = *((char *)result + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)result + 23);
  else
    v5 = (size_t)result[1];
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  v8 = v7 + v5;
  if (v7 + v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = result;
  if (v8 <= 0x16)
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 23) = v8;
    if (!v5)
      goto LABEL_18;
    goto LABEL_14;
  }
  v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17)
    v11 = v8 | 7;
  v12 = v11 + 1;
  result = (const void **)operator new(v11 + 1);
  v3[1] = v8;
  v3[2] = v12 | 0x8000000000000000;
  *v3 = result;
  v3 = result;
  if (v5)
  {
LABEL_14:
    if (v4 >= 0)
      v13 = v10;
    else
      v13 = *v10;
    result = (const void **)memmove(v3, v13, v5);
  }
LABEL_18:
  v14 = (char *)v3 + v5;
  if (v7)
  {
    if (v6 >= 0)
      v15 = a2;
    else
      v15 = *a2;
    result = (const void **)memmove(v14, v15, v7);
  }
  v14[v7] = 0;
  return result;
}

void E5RT::GetPlatformsInCompositeBundle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const std::__fs::filesystem::path *v3;
  BOOL HasExtension;
  void **v5;
  void **v6;
  __int128 v7;
  unint64_t v8;
  __int128 v9;
  char *v10;
  int v11;
  void **v12;
  void *exception;
  void *v14[2];
  char v15;
  void *v16[2];
  uint64_t v17;
  std::string v18;
  void *__p;
  void **v20;
  char v21;
  std::string v22;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (const std::__fs::filesystem::path *)E5RT::PathWrapper::PathWrapper(&v22, a1);
  v21 = 7;
  strcpy((char *)&__p, ".bundle");
  HasExtension = E5RT::PathWrapper::HasExtension(v3, (uint64_t)&__p);
  if (v21 < 0)
    operator delete(__p);
  if (!HasExtension)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "GetPlatformsInCompositeBundle");
    std::string::basic_string[abi:ne180100]<0>(&v18, "Invalid E5 path specified.");
    E5RT::Status::Status(v16, 8, &v18);
    E5RT::E5RTError::E5RTError(exception, &__p, v16);
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v18, ".bundle");
  E5RT::PathWrapper::FindFilesWithExtension((uint64_t)&v22, (uint64_t)&v18, 0, (uint64_t)&__p);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v5 = (void **)__p;
    v6 = v20;
    if (__p != v20)
      goto LABEL_12;
LABEL_6:
    if (v5)
      goto LABEL_26;
LABEL_7:
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_28;
    return;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  v5 = (void **)__p;
  v6 = v20;
  if (__p == v20)
    goto LABEL_6;
  do
  {
LABEL_12:
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v7 = *(_OWORD *)v5;
      v18.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    }
    v15 = 7;
    strcpy((char *)v14, ".bundle");
    E5Common::StringUtils::GetSubstringBeforeSuffix((uint64_t)&v18, (uint64_t)v14, v16);
    v8 = *(_QWORD *)(a2 + 8);
    if (v8 >= *(_QWORD *)(a2 + 16))
    {
      v10 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)v16);
      v11 = SHIBYTE(v17);
      *(_QWORD *)(a2 + 8) = v10;
      if (v11 < 0)
      {
        operator delete(v16[0]);
        if (v15 < 0)
        {
LABEL_23:
          operator delete(v14[0]);
          if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_11;
          goto LABEL_24;
        }
      }
      else if (v15 < 0)
      {
        goto LABEL_23;
      }
    }
    else
    {
      v9 = *(_OWORD *)v16;
      *(_QWORD *)(v8 + 16) = v17;
      *(_OWORD *)v8 = v9;
      v16[1] = 0;
      v17 = 0;
      v16[0] = 0;
      *(_QWORD *)(a2 + 8) = v8 + 24;
      if (v15 < 0)
        goto LABEL_23;
    }
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_24:
    operator delete(v18.__r_.__value_.__l.__data_);
LABEL_11:
    v5 += 3;
  }
  while (v5 != v6);
  v5 = (void **)__p;
  if (!__p)
    goto LABEL_7;
LABEL_26:
  v12 = v20;
  if (v20 == v5)
  {
    v20 = v5;
    operator delete(v5);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_28;
  }
  else
  {
    do
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*(v12 - 3));
      v12 -= 3;
    }
    while (v12 != v5);
    v20 = v5;
    operator delete(__p);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
LABEL_28:
      operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_191025740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 49) < 0)
    operator delete(*(void **)(v34 - 72));
  std::vector<std::string>::~vector[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::string>::vector<std::__wrap_iter<std::string_view *>,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  _BYTE *v9;

  a1[2] = 0;
  v4 = (_DWORD)a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  v5 = a3 - a2;
  if (a3 != a2)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = v5 >> 4;
    v9 = operator new(24 * (v5 >> 4));
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[24 * v8];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view *,std::string_view *,std::string*>(v4, a2, a3, v9);
  }
  return a1;
}

void sub_191025914(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_1910260B4((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view *,std::string_view *,std::string*>(int a1, uint64_t a2, uint64_t a3, _BYTE *__dst)
{
  _BYTE *v4;
  uint64_t v6;
  size_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v13;

  v4 = __dst;
  v13 = __dst;
  if (a2 != a3)
  {
    v6 = a2;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v8 = *(const void **)v6;
      if (v7 >= 0x17)
        break;
      v4[23] = v7;
      if (v7)
        goto LABEL_4;
LABEL_5:
      v4[v7] = 0;
      v4 = v13 + 24;
      v13 += 24;
      v6 += 16;
      if (v6 == a3)
        return v4;
    }
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v11;
    v4 = v11;
LABEL_4:
    memmove(v4, v8, v7);
    goto LABEL_5;
  }
  return v4;
}

void sub_191025A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191025A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

char *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string_view *>,std::__wrap_iter<std::string_view *>>(_QWORD *a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const void **v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  __int128 v25;
  _BYTE *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  size_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  __int128 v48;
  void *v49;
  void **v51;
  char *v52;
  char *v53;

  v5 = (void *)*a1;
  v6 = (a2 - *a1) / 24;
  v7 = *a1 + 24 * v6;
  if (a5 < 1)
    return (char *)v7;
  v9 = a3;
  v13 = a1[2];
  v11 = a1 + 2;
  v12 = v13;
  v14 = *(v11 - 1);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v14) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v7) >> 3)) >= a5)
    {
      v20 = (uint64_t)&a3[2 * a5];
      v21 = (_BYTE *)*(v11 - 1);
    }
    else
    {
      v20 = (uint64_t)&a3[0xF555555555555556 * ((uint64_t)(v14 - v7) >> 3)];
      v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view *,std::string_view *,std::string*>((int)v11, v20, a4, (_BYTE *)*(v11 - 1));
      a1[1] = v21;
      if ((uint64_t)(v14 - v7) < 1)
        return (char *)v7;
    }
    v22 = v7 + 24 * a5;
    v23 = &v21[-24 * a5];
    v24 = v21;
    if ((unint64_t)v23 < v14)
    {
      v24 = v21;
      do
      {
        v25 = *(_OWORD *)v23;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v23 + 2);
        *(_OWORD *)v24 = v25;
        v24 += 24;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        *(_QWORD *)v23 = 0;
        v23 += 24;
      }
      while ((unint64_t)v23 < v14);
    }
    a1[1] = v24;
    if (v21 != (_BYTE *)v22)
    {
      v26 = v21 - 24;
      v27 = 8 * ((uint64_t)&v21[-v22] >> 3);
      do
      {
        if ((char)v26[23] < 0)
          operator delete(*(void **)v26);
        v28 = (__int128 *)(v7 + v27 - 24);
        v29 = *v28;
        *((_QWORD *)v26 + 2) = *(_QWORD *)(v7 + v27 - 8);
        *(_OWORD *)v26 = v29;
        v26 -= 24;
        *(_BYTE *)(v7 + v27 - 1) = 0;
        *(_BYTE *)v28 = 0;
        v27 -= 24;
      }
      while (v27);
    }
    if ((const void **)v20 != v9)
    {
      v30 = v7;
      do
      {
        v31 = *v9;
        v32 = v9[1];
        v9 += 2;
        MEMORY[0x19401C814](v30, v31, v32);
        v30 += 24;
      }
      while (v9 != (const void **)v20);
    }
    return (char *)v7;
  }
  v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (_QWORD)v5) >> 3);
  if (v15 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (uint64_t)v5) >> 3);
  v17 = 2 * v16;
  if (2 * v16 <= v15)
    v17 = v15;
  if (v16 >= 0x555555555555555)
    v18 = 0xAAAAAAAAAAAAAAALL;
  else
    v18 = v17;
  v51 = (void **)a1;
  if (v18)
  {
    if (v18 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = (char *)operator new(24 * v18);
  }
  else
  {
    v19 = 0;
  }
  v34 = &v19[24 * v6];
  v52 = v34;
  v53 = &v19[24 * v18];
  v35 = 24 * a5;
  v36 = &v34[24 * a5];
  do
  {
    v38 = (size_t)v9[1];
    if (v38 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v39 = *v9;
    if (v38 < 0x17)
    {
      v34[23] = v38;
      v37 = v34;
      if (!v38)
        goto LABEL_32;
    }
    else
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v37 = operator new(v40 + 1);
      *((_QWORD *)v34 + 1) = v38;
      *((_QWORD *)v34 + 2) = v41 | 0x8000000000000000;
      *(_QWORD *)v34 = v37;
    }
    memmove(v37, v39, v38);
LABEL_32:
    *((_BYTE *)v37 + v38) = 0;
    v34 += 24;
    v9 += 2;
    v35 -= 24;
  }
  while (v35);
  v33 = v52;
  v42 = *v51;
  v43 = v52;
  if (*v51 != (void *)v7)
  {
    v44 = v52;
    v45 = v7;
    do
    {
      v43 = v44 - 24;
      v46 = *(_OWORD *)(v45 - 24);
      *((_QWORD *)v44 - 1) = *(_QWORD *)(v45 - 8);
      *(_OWORD *)(v44 - 24) = v46;
      *(_QWORD *)(v45 - 16) = 0;
      *(_QWORD *)(v45 - 8) = 0;
      *(_QWORD *)(v45 - 24) = 0;
      v44 -= 24;
      v45 -= 24;
    }
    while ((void *)v45 != v42);
  }
  v47 = v51[1];
  if (v47 != (void *)v7)
  {
    do
    {
      v48 = *(_OWORD *)v7;
      *((_QWORD *)v36 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v36 = v48;
      v36 += 24;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v47);
    v7 = (uint64_t)v51[1];
  }
  v49 = *v51;
  *v51 = v43;
  v51[1] = v36;
  v51[2] = v53;
  while ((void *)v7 != v49)
  {
    if (*(char *)(v7 - 1) < 0)
      operator delete(*(void **)(v7 - 24));
    v7 -= 24;
  }
  if (v49)
    operator delete(v49);
  return v33;
}

void sub_191025E70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_191025E78(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void sub_191025E90(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::push_back(std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::value_type *__x)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer first;
  std::__split_buffer<std::string>::pointer begin;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  __int128 v25;
  std::__split_buffer<std::string>::pointer v26;
  std::__split_buffer<std::string>::pointer v27;
  std::string *v28;
  __int128 v29;

  end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    first = this->__first_;
    begin = this->__begin_;
    if (begin <= this->__first_)
    {
      v14 = 0x5555555555555556 * (((char *)end - (char *)first) >> 3);
      if (end == first)
        v14 = 1;
      if (v14 >= 0xAAAAAAAAAAAAAABLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = v14 >> 2;
      v16 = v14;
      v17 = (std::string *)operator new(24 * v14);
      v18 = &v17[v15];
      v19 = &v17[v16];
      if (end == begin)
      {
        this->__first_ = v17;
        this->__begin_ = v18;
        this->__end_ = v18;
        this->__end_cap_.__value_ = v19;
      }
      else
      {
        v20 = end - begin;
        v21 = &v18[v20];
        v22 = 24 * v20;
        v23 = v15;
        do
        {
          v24 = &v17[v23];
          v25 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          v24->__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          begin->__r_.__value_.__l.__size_ = 0;
          begin->__r_.__value_.__r.__words[2] = 0;
          begin->__r_.__value_.__r.__words[0] = 0;
          ++begin;
          ++v23;
          v22 -= 24;
        }
        while (v22);
        first = this->__first_;
        v26 = this->__begin_;
        v27 = this->__end_;
        this->__first_ = v17;
        this->__begin_ = v18;
        this->__end_ = v21;
        this->__end_cap_.__value_ = v19;
        while (v27 != v26)
        {
          if (SHIBYTE(v27[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27[-1].__r_.__value_.__l.__data_);
          --v27;
        }
      }
      if (first)
        operator delete(first);
      end = this->__end_;
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)this->__first_) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -v9;
      if (begin == end)
      {
        v28 = &begin[-v9];
      }
      else
      {
        v11 = -24 * v9;
        do
        {
          v13 = &begin[(unint64_t)v11 / 0x18];
          if (SHIBYTE(begin[(unint64_t)v11 / 0x18].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v13->__r_.__value_.__l.__data_);
          v12 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          v13->__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v12;
          *((_BYTE *)&begin->__r_.__value_.__s + 23) = 0;
          begin->__r_.__value_.__s.__data_[0] = 0;
          ++begin;
        }
        while (begin != end);
        end = this->__begin_;
        v28 = &begin[v10];
      }
      this->__begin_ = &end[v10];
      this->__end_ = v28;
      end = v28;
    }
  }
  v29 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v29;
  __x->__r_.__value_.__l.__size_ = 0;
  __x->__r_.__value_.__r.__words[2] = 0;
  __x->__r_.__value_.__r.__words[0] = 0;
  ++this->__end_;
}

void sub_1910260B4(void **a1, void **a2, void **a3)
{
  void **v5;
  void *v6;

  v5 = (void **)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v5 -= 3;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

E5RT::E5ProgramImpl **std::unique_ptr<E5RT::E5ProgramImpl>::~unique_ptr[abi:ne180100](E5RT::E5ProgramImpl **a1)
{
  E5RT::E5ProgramImpl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::E5ProgramImpl::~E5ProgramImpl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

E5RT::E5ProgramImpl *E5RT::E5ProgramBuilder::Create@<X0>(_QWORD *a1@<X8>)
{
  E5RT::E5ProgramImpl *v3;
  E5RT::E5ProgramImpl *result;

  v3 = (E5RT::E5ProgramImpl *)operator new();
  result = E5RT::E5ProgramImpl::E5ProgramImpl(v3);
  *a1 = (char *)v3 + 8;
  return result;
}

void sub_1910261AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10F3C403D776284);
  _Unwind_Resume(a1);
}

void *E5RT::E5ProgramBuilder::Finish@<X0>(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  void *result;
  void *exception;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Program");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_19102629C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::E5ProgramImpl *E5RT::E5ProgramImpl::E5ProgramImpl(E5RT::E5ProgramImpl *this)
{
  _QWORD *v2;

  v2 = E5RT::E5Program::E5Program(this);
  E5RT::E5ProgramBuilder::E5ProgramBuilder(v2 + 1);
  *(_QWORD *)this = &off_1E2D59D48;
  *((_QWORD *)this + 1) = &unk_1E2D59DC0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  return this;
}

void sub_191026360(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

std::string *E5RT::E5ProgramImpl::SetE5PlatformBundleDir(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 80), a2);
}

void `non-virtual thunk to'E5RT::E5ProgramImpl::~E5ProgramImpl(void **this)
{
  E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1);
}

{
  E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1);
  JUMPOUT(0x19401CD90);
}

void E5RT::E5ProgramImpl::GetPublicFunctionWithName(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  BOOL v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *exception;
  _QWORD v32[3];
  _BYTE v33[8];
  _QWORD v34[3];

  v3 = *(uint64_t **)(a1 + 16);
  v4 = *(uint64_t **)(a1 + 24);
  if (v3 == v4)
    goto LABEL_41;
  do
  {
    v8 = *v3;
    v9 = (std::__shared_weak_count *)v3[1];
    v34[0] = *v3;
    v34[1] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v13 = v12[23];
    if ((v13 & 0x80u) == 0)
      v14 = v12[23];
    else
      v14 = *((_QWORD *)v12 + 1);
    v15 = a2[23];
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = *((_QWORD *)a2 + 1);
    if (v14 == v15)
    {
      if (v16 >= 0)
        v17 = a2;
      else
        v17 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        v25 = memcmp(*(const void **)v12, v17, *((_QWORD *)v12 + 1)) == 0;
      }
      else
      {
        if (!v12[23])
        {
          v25 = 1;
          if (!v9)
            goto LABEL_31;
          goto LABEL_27;
        }
        v18 = v13 - 1;
        do
        {
          v20 = *v12++;
          v19 = v20;
          v22 = *v17++;
          v21 = v22;
          v24 = v18-- != 0;
          v25 = v19 == v21;
        }
        while (v19 == v21 && v24);
      }
      if (!v9)
        goto LABEL_31;
    }
    else
    {
      v25 = 0;
      if (!v9)
        goto LABEL_31;
    }
LABEL_27:
    v26 = (unint64_t *)&v9->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_31:
    if (v25)
      goto LABEL_36;
    v3 += 2;
  }
  while (v3 != v4);
  v3 = v4;
LABEL_36:
  if (v3 == *(uint64_t **)(a1 + 24))
  {
LABEL_41:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "GetPublicFunctionWithName");
    std::string::basic_string[abi:ne180100]<0>(v32, "Given function name not found.");
    E5RT::Status::Status(v33, 1, v32);
    E5RT::E5RTError::E5RTError(exception, v34, v33);
  }
  *a3 = *v3;
  v28 = v3[1];
  a3[1] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
}

void sub_1910265B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5ProgramImpl::GetPrivateFunctionWithName@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *exception;
  _QWORD v17[3];
  _BYTE v18[8];
  _QWORD v19[3];

  v3 = result;
  v5 = *(_QWORD **)(result + 40);
  v6 = *(_QWORD **)(result + 48);
  if (v5 == v6)
  {
LABEL_18:
    if (v5 == *(_QWORD **)(v3 + 48))
      goto LABEL_24;
  }
  else
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5);
      v8 = *(unsigned __int8 *)(result + 23);
      if ((v8 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(result + 23);
      else
        v9 = *(_QWORD *)(result + 8);
      v10 = a2[23];
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *((_QWORD *)a2 + 1);
      if (v9 == v10)
      {
        if (v11 >= 0)
          v12 = a2;
        else
          v12 = *(unsigned __int8 **)a2;
        if ((v8 & 0x80) != 0)
        {
          result = memcmp(*(const void **)result, v12, *(_QWORD *)(result + 8));
          if (!(_DWORD)result)
            goto LABEL_18;
        }
        else
        {
          if (!*(_BYTE *)(result + 23))
            goto LABEL_18;
          while (*(unsigned __int8 *)result == *v12)
          {
            ++result;
            ++v12;
            if (!--v8)
              goto LABEL_18;
          }
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
    v5 = v6;
    if (v6 == *(_QWORD **)(v3 + 48))
    {
LABEL_24:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v19, "GetPrivateFunctionWithName");
      std::string::basic_string[abi:ne180100]<0>(v17, "Given function name not found.");
      E5RT::Status::Status(v18, 1, v17);
      E5RT::E5RTError::E5RTError(exception, v19, v18);
    }
  }
  *a3 = *v5;
  v13 = v5[1];
  a3[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return result;
}

void sub_1910267D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::E5ProgramImpl::GetBuildInfo@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 72);
  *a2 = *(_QWORD *)(this + 64);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

char *E5RT::E5ProgramImpl::AddPublicFunction(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  char *result;

  v3 = *(_OWORD **)(a1 + 24);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 32))
  {
    result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 16), a2);
  }
  else
  {
    *v3 = *(_OWORD *)a2;
    result = (char *)(v3 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

char *`non-virtual thunk to'E5RT::E5ProgramImpl::AddPublicFunction(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  char *result;

  v3 = *(_OWORD **)(a1 + 16);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 24))
  {
    result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 8), a2);
  }
  else
  {
    *v3 = *(_OWORD *)a2;
    result = (char *)(v3 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

char *E5RT::E5ProgramImpl::AddPrivateFunction(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  char *result;

  v3 = *(_OWORD **)(a1 + 48);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 56))
  {
    result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 40), a2);
  }
  else
  {
    *v3 = *(_OWORD *)a2;
    result = (char *)(v3 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

char *`non-virtual thunk to'E5RT::E5ProgramImpl::AddPrivateFunction(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  char *result;

  v3 = *(_OWORD **)(a1 + 40);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 48))
  {
    result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 32), a2);
  }
  else
  {
    *v3 = *(_OWORD *)a2;
    result = (char *)(v3 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void E5RT::E5ProgramImpl::SetBuildInfo(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void `non-virtual thunk to'E5RT::E5ProgramImpl::SetBuildInfo(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

std::string *`non-virtual thunk to'E5RT::E5ProgramImpl::SetE5PlatformBundleDir(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void E5RT::E5ProgramImpl::SerializeToFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  E5RT::E5Serializer *v6;

  v6 = (E5RT::E5Serializer *)operator new();
  E5RT::E5Serializer::E5Serializer(v6, a1, a2);
  E5RT::E5Serializer::SerializeToFile(v6, a3);
  E5RT::E5Serializer::~E5Serializer(v6);
  JUMPOUT(0x19401CD90);
}

void sub_191026B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<E5RT::E5Serializer>::~unique_ptr[abi:ne180100]((E5RT::E5Serializer **)va);
  _Unwind_Resume(a1);
}

void sub_191026B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10E0C40919228BDLL);
  _Unwind_Resume(a1);
}

E5RT::E5Serializer **std::unique_ptr<E5RT::E5Serializer>::~unique_ptr[abi:ne180100](E5RT::E5Serializer **a1)
{
  E5RT::E5Serializer *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::E5Serializer::~E5Serializer(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<BlockT>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 8;
      v5 = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (v5)
      {
        v6 = *(void **)(v5 + 72);
        if (v6)
        {
          *(_QWORD *)(v5 + 80) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v5 + 48);
        if (v7)
        {
          *(_QWORD *)(v5 + 56) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v5 + 24);
        if (v8)
        {
          *(_QWORD *)(v5 + 32) = v8;
          operator delete(v8);
        }
        v9 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v9;
          operator delete(v9);
        }
        result = MEMORY[0x19401CD90](v5, 0x10C40F9E379B3);
      }
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::vector<std::unique_ptr<BlockT>>::__base_destruct_at_end[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = *(void **)(v5 + 72);
      if (v7)
      {
        *(_QWORD *)(v5 + 80) = v7;
        operator delete(v7);
      }
      v8 = *(void **)(v5 + 48);
      if (v8)
      {
        *(_QWORD *)(v5 + 56) = v8;
        operator delete(v8);
      }
      v9 = *(void **)(v5 + 24);
      if (v9)
      {
        *(_QWORD *)(v5 + 32) = v9;
        operator delete(v9);
      }
      v10 = *(void **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)(v5 + 8) = v10;
        operator delete(v10);
      }
      result = MEMORY[0x19401CD90](v5, 0x10C40F9E379B3);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = (_QWORD *)*a2;
    if (!*a2)
      goto LABEL_16;
    v4 = (_QWORD *)a2[1];
    v5 = (_QWORD *)*a2;
    if (v4 == v3)
    {
LABEL_15:
      a2[1] = v3;
      operator delete(v5);
LABEL_16:
      JUMPOUT(0x19401CD90);
    }
    while (1)
    {
      v7 = *--v4;
      v6 = v7;
      *v4 = 0;
      if (!v7)
        goto LABEL_6;
      if (*(char *)(v6 + 47) < 0)
      {
        operator delete(*(void **)(v6 + 24));
        if (*(char *)(v6 + 23) < 0)
LABEL_12:
          operator delete(*(void **)v6);
      }
      else if (*(char *)(v6 + 23) < 0)
      {
        goto LABEL_12;
      }
      MEMORY[0x19401CD90](v6, 0x1012C403467C318);
LABEL_6:
      if (v4 == v3)
      {
        v5 = (_QWORD *)*a2;
        goto LABEL_15;
      }
    }
  }
}

void std::default_delete<FunctionT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  void **v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(_QWORD *)(a2 + 104) = v3;
      operator delete(v3);
    }
    if (*(char *)(a2 + 95) < 0)
    {
      operator delete(*(void **)(a2 + 72));
      v5 = (void **)(a2 + 48);
      v4 = *(_QWORD **)(a2 + 48);
      if (!v4)
      {
LABEL_7:
        v6 = *(void **)(a2 + 24);
        if (v6)
        {
          *(_QWORD *)(a2 + 32) = v6;
          operator delete(v6);
        }
        v7 = *(void **)a2;
        if (*(_QWORD *)a2)
        {
          *(_QWORD *)(a2 + 8) = v7;
          operator delete(v7);
        }
        JUMPOUT(0x19401CD90);
      }
    }
    else
    {
      v5 = (void **)(a2 + 48);
      v4 = *(_QWORD **)(a2 + 48);
      if (!v4)
        goto LABEL_7;
    }
    std::vector<std::unique_ptr<BlockT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v5, v4);
    operator delete(*v5);
    goto LABEL_7;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void **v6;
  void *v7;
  void **v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void **)v2[5];
      if (v6)
      {
        do
        {
          v8 = (void **)*v6;
          if (*((char *)v6 + 39) < 0)
            operator delete(v6[2]);
          operator delete(v6);
          v6 = v8;
        }
        while (v8);
      }
      v7 = (void *)v2[3];
      v2[3] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::__shared_ptr_emplace<E5RT::E5FunctionImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5FunctionImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACDD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACDD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrI9FunctionTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrI9FunctionTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrI9FunctionTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrI9FunctionTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

void std::__shared_ptr_emplace<E5RT::E5BlockImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5BlockImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACEE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACEE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrIN7E5RT_FB10BuildInfoTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB10BuildInfoTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrIN7E5RT_FB10BuildInfoTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB10BuildInfoTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

void std::__shared_ptr_emplace<E5RT::E5BuildInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5BuildInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void sub_191027164(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
}

void std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void E5RT::E5Serializer::~E5Serializer(E5RT::E5Serializer *this)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  void **v11;

  v2 = (void **)*((_QWORD *)this + 14);
  if (v2)
  {
    do
    {
      v9 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void **)*((_QWORD *)this + 9);
  if (v4)
  {
    do
    {
      v10 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v10;
    }
    while (v10);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    operator delete(v5);
  v6 = (void **)*((_QWORD *)this + 4);
  if (v6)
  {
    do
    {
      v11 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0)
LABEL_24:
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_24;
      }
      operator delete(v6);
      v6 = v11;
    }
    while (v11);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    operator delete(v7);
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

_QWORD *E5RT::E5Serializer::E5Serializer(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD **v19;
  _QWORD **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v26;
  void *__p[2];
  char v28;

  *a1 = a2;
  *(_OWORD *)(a1 + 1) = 0u;
  v5 = a1 + 1;
  *(_OWORD *)(a1 + 3) = 0u;
  a1[5] = 0;
  *((_DWORD *)a1 + 12) = 1065353216;
  *(_OWORD *)(a1 + 7) = 0u;
  v6 = a1 + 7;
  *(_OWORD *)(a1 + 9) = 0u;
  *((_DWORD *)a1 + 22) = 1065353216;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_DWORD *)a1 + 32) = 1065353216;
  E5RT::ComputeProgramBuilder::CreateBuilder((uint64_t *)__p);
  v7 = __p[0];
  __p[0] = 0;
  v8 = *v5;
  *v5 = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 24))(*v5, 58597, 0, 2, a3);
  v28 = 12;
  strcpy((char *)__p, "__sym_desc__");
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, (uint64_t)__p))
  {
    (*(void (**)(_QWORD, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v5 + 32))(*v5, __p, 5, 1, 1);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p);
  }
  if (v28 < 0)
    operator delete(__p[0]);
  v28 = 8;
  strcpy((char *)__p, "__text__");
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, (uint64_t)__p))
  {
    (*(void (**)(_QWORD, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v5 + 32))(*v5, __p, 1, 5, 1);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p);
  }
  if (v28 < 0)
    operator delete(__p[0]);
  v28 = 9;
  strcpy((char *)__p, "__const__");
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, (uint64_t)__p))
  {
    (*(void (**)(_QWORD, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v5 + 32))(*v5, __p, 2, 1, 1);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p);
  }
  if (v28 < 0)
    operator delete(__p[0]);
  v10 = *a1;
  v11 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  if (v11[1] == *v11)
    goto LABEL_22;
  v12 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  if (v12[1] == *v12)
    goto LABEL_31;
  v13 = (_QWORD **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v12 + 32))(**v12);
  if (*v13 == v13[1]
    || (v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v13 + 16))(**v13),
        v15 = *(_QWORD **)v14,
        *(_QWORD *)v14 == *(_QWORD *)(v14 + 8))
    || (v16 = *v15, !*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 56))(*v15) + 8))
    && (v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16), *v17 == v17[1]))
  {
LABEL_22:
    v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    if (v18[1] == *v18)
      goto LABEL_28;
    v19 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    if (v19[1] != *v19)
    {
      v20 = (_QWORD **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v19 + 32))(**v19);
      if (*v20 != v20[1])
      {
        v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v20 + 16))(**v20);
        v22 = *(_QWORD **)v21;
        if (*(_QWORD *)v21 != *(_QWORD *)(v21 + 8))
        {
          v23 = *v22;
          if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v22 + 56))(*v22) + 8))
          {
            v26 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 64))(v23);
            v24 = *v26 != v26[1];
            goto LABEL_29;
          }
          goto LABEL_27;
        }
      }
LABEL_28:
      v24 = 0;
      goto LABEL_29;
    }
LABEL_31:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_27:
  v24 = 1;
LABEL_29:
  *((_BYTE *)a1 + 136) = v24;
  return a1;
}

void sub_191027690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v17);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v16);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v15 + 16);
  v20 = *v18;
  *v18 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

void E5RT::E5Serializer::ResolveOperandPermissions(E5RT::E5Serializer *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v3 = *(uint64_t **)v2;
  v4 = *(uint64_t **)(v2 + 8);
  while (v3 != v4)
  {
    v5 = *v3;
    v6 = (std::__shared_weak_count *)v3[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    sub_191027854((uint64_t)this, v5);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v3 += 2;
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
  v12 = *(uint64_t **)v11;
  v13 = *(uint64_t **)(v11 + 8);
  while (v12 != v13)
  {
    v14 = *v12;
    v15 = (std::__shared_weak_count *)v12[1];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    sub_191027854((uint64_t)this, v14);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v12 += 2;
  }
}

void sub_19102782C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191027840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191027854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;

  E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Function>(a1, a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v5 = *(uint64_t **)v4;
  v6 = *(uint64_t **)(v4 + 8);
  while (v5 != v6)
  {
    v8 = *v5;
    v7 = (std::__shared_weak_count *)v5[1];
    v22 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Block>(a1, v8);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v12 = *(uint64_t **)v11;
    v13 = *(uint64_t **)(v11 + 8);
    if (*(uint64_t **)v11 == v13)
    {
      if (!v7)
        goto LABEL_2;
LABEL_20:
      v20 = (unint64_t *)&v7->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      goto LABEL_2;
    }
    do
    {
      v14 = *v12;
      v15 = (std::__shared_weak_count *)v12[1];
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Operation>(a1, v14);
      if (v15)
      {
        v18 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v12 += 2;
    }
    while (v12 != v13);
    v7 = v22;
    if (v22)
      goto LABEL_20;
LABEL_2:
    v5 += 2;
  }
}

void sub_1910279AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1910279C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1910279D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5Serializer::SerializeAliasSymbol(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  void *exception;
  void *v16;
  void *v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  std::string __p;
  std::string v22;
  _BYTE v23[12];
  unsigned int v24;
  _QWORD v25[3];
  _QWORD *v26;
  __int128 v27;
  std::string::size_type v28;
  __int128 *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = a3;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "SerializeAliasSymbol");
    std::string::basic_string[abi:ne180100]<0>(&v27, "Alias name is empty.");
    E5RT::Status::Status(&v22, 1, &v27);
    E5RT::E5RTError::E5RTError(exception, &v20, &v22);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) <= a3)
  {
    v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "SerializeAliasSymbol");
    std::string::basic_string[abi:ne180100]<0>(&v27, "SymbolIndex is out of range.");
    E5RT::Status::Status(&v22, 1, &v27);
    E5RT::E5RTError::E5RTError(v16, &v20, &v22);
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a1 + 56), a4))
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "SerializeAliasSymbol");
    std::operator+<char>();
    v18 = std::string::append(&v22, " is missing.");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v28 = v18->__r_.__value_.__r.__words[2];
    v27 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v23, 5, &v27);
    E5RT::E5RTError::E5RTError(v17, &v20, v23);
  }
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2, a4, 5, 16);
  *(_QWORD *)&v27 = &off_1E2DCFA60;
  *((_QWORD *)&v27 + 1) = &v24;
  v29 = &v27;
  v9 = *(_QWORD *)(a1 + 8);
  v26 = v25;
  v25[0] = &off_1E2DCFA60;
  v25[1] = &v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, a2, a4, v25);
  v10 = v26;
  if (v26 == v25)
  {
    v11 = 4;
    v10 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a1 + 16, (unsigned __int8 *)&v20, (uint64_t)&v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      v12 = v29;
      if (v29 != &v27)
        goto LABEL_20;
LABEL_24:
      v13 = 4;
      v12 = &v27;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  v12 = v29;
  if (v29 == &v27)
    goto LABEL_24;
LABEL_20:
  if (v12)
  {
    v13 = 5;
LABEL_25:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  return v8;
}

void sub_191027D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  v32 = *(_QWORD *)(v30 - 72);
  if (v32 == v30 - 96)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v30 - 96) + 32))(v30 - 96);
    _Unwind_Resume(exception_object);
  }
  if (v32)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_191027EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_191027F10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191027F24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5Serializer::SerializeOperand(uint64_t a1, E5RT::SerializerUtils *this, uint64_t a3)
{
  uint64_t OperandSymbolFlags;
  uint64_t v7;
  uint64_t *v8;
  uint64_t data_low;
  std::string::size_type size;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  E5RT::TensorDescriptorImpl **v30;
  E5RT::TensorDescriptorImpl **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *i;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *exception;
  void *v43;
  _QWORD v44[3];
  _BYTE v45[8];
  void *lpsrc;
  std::__shared_weak_count *v47;
  std::string v48;
  std::string v49;
  std::string __p;
  _BYTE v51[24];
  _BYTE *v52;
  _QWORD v53[3];
  _QWORD *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  OperandSymbolFlags = E5RT::SerializerUtils::GetOperandSymbolFlags(this, this);
  memset(&__p, 0, sizeof(__p));
  v7 = (*(uint64_t (**)(E5RT::SerializerUtils *))(*(_QWORD *)this + 24))(this);
  v8 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::find<std::string>((_QWORD *)(a1 + 96), v7);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::SerializerUtils::GetOperandSectionDetails((uint64_t)this, v8[5], a3, (uint64_t)&v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v48;
  data_low = LODWORD(v49.__r_.__value_.__l.__data_);
  size = v49.__r_.__value_.__l.__size_;
  v11 = v49.__r_.__value_.__s.__data_[16];
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a1 + 56), (uint64_t)&__p))
  {
    (*(void (**)(_QWORD, std::string *, uint64_t, std::string::size_type, BOOL))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), &__p, data_low, size, v11 != 0);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 56, (uint64_t)&__p, (uint64_t)&__p);
  }
  v12 = (*(uint64_t (**)(E5RT::SerializerUtils *))(*(_QWORD *)this + 24))(this);
  v13 = v12;
  if (*(char *)(v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
  }
  else
  {
    v14 = *(_OWORD *)v12;
    v48.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v14;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v49 = __p;
  v15 = std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::find<std::pair<std::string,std::string>>((_QWORD *)(a1 + 16), (unsigned __int8 *)&v48);
  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_20:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (v15)
      goto LABEL_15;
    goto LABEL_21;
  }
  operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_14:
  if (v15)
  {
LABEL_15:
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, std::string *))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), v13, &__p);
    goto LABEL_16;
  }
LABEL_21:
  (*(void (**)(void **__return_ptr, E5RT::SerializerUtils *))(*(_QWORD *)this + 16))(&lpsrc, this);
  v18 = operator new(0x20uLL);
  *v18 = &off_1E2DCFAE0;
  v18[1] = a1;
  v18[2] = &lpsrc;
  v18[3] = v13;
  v54 = v18;
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, std::string *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v13, &__p, 1, OperandSymbolFlags);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = (uint64_t)v54;
  if (!v54)
  {
LABEL_24:
    v52 = (_BYTE *)v20;
    goto LABEL_26;
  }
  if (v54 != v53)
  {
    v20 = (*(uint64_t (**)(void))(*v54 + 16))();
    goto LABEL_24;
  }
  v52 = v51;
  (*(void (**)(_QWORD *, _BYTE *))(v53[0] + 24))(v53, v51);
LABEL_26:
  (*(void (**)(uint64_t, uint64_t, std::string *, _BYTE *))(*(_QWORD *)v19 + 48))(v19, v13, &__p, v51);
  v21 = v52;
  if (v52 == v51)
  {
    v22 = 4;
    v21 = v51;
    goto LABEL_30;
  }
  if (v52)
  {
    v22 = 5;
LABEL_30:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  if (lpsrc
  {
    v23 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v27 = 1;
  }
  else
  {
    if ((*(unsigned int (**)(E5RT::SerializerUtils *))(*(_QWORD *)this + 40))(this))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v48, "SerializeOperand");
      std::string::basic_string[abi:ne180100]<0>(v44, "Surface can only be an extern.");
      E5RT::Status::Status(v45, 5, v44);
      E5RT::E5RTError::E5RTError(exception, &v48, v45);
    }
    v27 = 0;
  }
  v28 = (*(uint64_t (**)(E5RT::SerializerUtils *))(*(_QWORD *)this + 40))(this);
  v29 = 0;
  switch(v28)
  {
    case 0:
      if (v27
        && (v30 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)lpsrc),
            E5RT::TensorDescriptor::HasKnownShape((E5RT::TensorDescriptor *)v30)))
      {
        v29 = E5RT::TensorDescriptor::GetSize(v30);
      }
      else
      {
        v29 = 0;
      }
      goto LABEL_48;
    case 1:
      v31 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)lpsrc);
      v32 = E5RT::TensorDescriptor::GetSize(v31);
      v33 = *(_QWORD *)(a1 + 8);
      v34 = (*(uint64_t (**)(E5RT::SerializerUtils *))(*(_QWORD *)this + 48))(this);
      (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v33 + 72))(v33, v13, &__p, v34, v32);
      break;
    case 2:
LABEL_48:
      (*(void (**)(_QWORD, uint64_t, std::string *, uint64_t))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), v13, &__p, v29);
      break;
    case 3:
      v43 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v48, "SerializeOperand");
      std::string::basic_string[abi:ne180100]<0>(v44, "Unsupported alloc type.");
      E5RT::Status::Status(v45, 2, v44);
      E5RT::E5RTError::E5RTError(v43, &v48, v45);
    default:
      break;
  }
  if (*(char *)(v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
  }
  else
  {
    v35 = *(_OWORD *)v13;
    v48.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v35;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v49 = __p;
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a1 + 16, (unsigned __int8 *)&v48, (uint64_t)&v48);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_57;
LABEL_64:
    operator delete(v48.__r_.__value_.__l.__data_);
    goto LABEL_57;
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_64;
LABEL_57:
  for (i = (_QWORD *)((*(uint64_t (**)(E5RT::SerializerUtils *))(*(_QWORD *)this + 56))(this) + 16);
        ;
        E5RT::E5Serializer::SerializeAliasSymbol(a1, (uint64_t)(i + 2), v16, (uint64_t)&__p))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  v37 = v54;
  if (v54 == v53)
  {
    v38 = 4;
    v37 = v53;
    goto LABEL_66;
  }
  if (v54)
  {
    v38 = 5;
LABEL_66:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  v39 = v47;
  if (v47)
  {
    v40 = (unint64_t *)&v47->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1910285B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;
  int v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v40 & 1) == 0)
      goto LABEL_9;
  }
  else if (!v40)
  {
LABEL_9:
    v43 = *(_QWORD **)(v41 - 80);
    if (v43 == (_QWORD *)(v41 - 104))
    {
      v44 = 4;
      v43 = (_QWORD *)(v41 - 104);
    }
    else
    {
      if (!v43)
        goto LABEL_14;
      v44 = 5;
    }
    (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_14:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    if ((a35 & 0x80000000) == 0)
      _Unwind_Resume(a1);
    operator delete(a30);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v39);
  goto LABEL_9;
}

uint64_t E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(uint64_t a1, const void **a2, _QWORD *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  void **__dst;
  size_t v22;
  unint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 10;
  if (v4 + 10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v22 = v4 + 10;
    v23 = v11 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v23) = v4 + 10;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a2;
  else
    v12 = *a2;
  memmove(p_dst, v12, v4);
LABEL_15:
  strcpy((char *)p_dst + v4, "__op_attrs");
  v20 = 9;
  strcpy((char *)__p, "__const__");
  v13 = (*(uint64_t (**)(_QWORD, void ***, void **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &__dst, __p, 3, 17);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = a3[3];
  if (!v15)
  {
LABEL_18:
    v25 = (_BYTE *)v15;
    goto LABEL_20;
  }
  if ((_QWORD *)v15 != a3)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    goto LABEL_18;
  }
  v25 = v24;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v24);
LABEL_20:
  (*(void (**)(uint64_t, void ***, void **, _BYTE *))(*(_QWORD *)v14 + 56))(v14, &__dst, __p, v24);
  v16 = v25;
  if (v25 == v24)
  {
    v17 = 4;
    v16 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_25;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_25:
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return v13;
LABEL_29:
    operator delete(__dst);
    return v13;
  }
  if (SHIBYTE(v23) < 0)
    goto LABEL_29;
  return v13;
}

void sub_1910289D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
    {
      if ((a15 & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_5;
    }
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
  if ((a15 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_5:
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
    goto LABEL_11;
LABEL_10:
  operator delete(a16);
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5Serializer::SerializeOpArgFrame(uint64_t a1, const void *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  unint64_t v10;
  const void **v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  E5RT::SerializerUtils *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  E5RT::SerializerUtils *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  std::__shared_weak_count *v61;
  char *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  E5RT::SerializerUtils *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  char *v93;
  std::__shared_weak_count *v94;
  char *v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned int v115;
  std::string *v116;
  uint64_t v117;
  unsigned int v118;
  std::string *v119;
  uint64_t v120;
  unsigned int v121;
  std::string *v122;
  uint64_t v123;
  unsigned int v124;
  std::string *v125;
  uint64_t v126;
  unsigned int v127;
  std::string *v128;
  uint64_t v129;
  unsigned int v130;
  std::string *v131;
  uint64_t v132;
  unsigned int v133;
  std::string *v134;
  uint64_t v135;
  unsigned int v136;
  std::string *v137;
  uint64_t v138;
  unsigned int v139;
  std::string *v140;
  uint64_t v141;
  unsigned int v142;
  std::string *v143;
  uint64_t v144;
  unsigned int v145;
  std::string *v146;
  uint64_t v147;
  unsigned int v148;
  std::string *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t *v160;
  unint64_t *v161;
  unint64_t *v162;
  unint64_t *v163;
  unint64_t *v164;
  std::string *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  std::string *v170;
  uint64_t v171;
  std::logic_error *exception;
  std::logic_error *v174;
  std::logic_error *v175;
  void *v176;
  const void **v177;
  int v178;
  const void *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  std::string::size_type v185;
  std::__shared_weak_count *v186;
  char v187[8];
  uint64_t v188;
  void *__p;
  char *v190;
  char *v191;
  void *v192;
  char *v193;
  char *v194;
  void *v195;
  char *v196;
  char *v197;
  void *v198[2];
  char v199;
  void **__dst;
  size_t v201;
  unint64_t v202;
  unsigned int v203;
  _BYTE v204[24];
  _BYTE *v205;
  std::string v206;
  std::string *v207;
  std::__shared_weak_count *v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 16))(a2);
  v179 = a2;
  v7 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
  v8 = *(char *)(v7 + 23);
  if (v8 >= 0)
    v9 = *(unsigned __int8 *)(v7 + 23);
  else
    v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 + 11;
  if (v9 + 11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (const void **)v7;
  v178 = v6;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v201 = v9 + 11;
    v202 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v201 = 0;
    v202 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v202) = v9 + 11;
    if (!v9)
      goto LABEL_15;
  }
  if (v8 >= 0)
    v15 = v11;
  else
    v15 = *v11;
  memmove(p_dst, v15, v9);
LABEL_15:
  v177 = v11;
  strcpy((char *)p_dst + v9, "__arg_frame");
  v199 = 8;
  v197 = 0;
  strcpy((char *)v198, "__text__");
  v195 = 0;
  v196 = 0;
  v192 = 0;
  v193 = 0;
  v194 = 0;
  __p = 0;
  v190 = 0;
  v191 = 0;
  v188 = 0;
  v203 = 0;
  v16 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v179 + 32))(v179);
  v17 = v16[1] - *v16;
  v183 = a3;
  v184 = a1;
  if (v17)
  {
    v18 = 0;
    v180 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 3);
    while (1)
    {
      if (v18 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[1] - *v16) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v16 + 8, *v16 + 24 * v18);
      v20 = v19;
      if (*((char *)v19 + 39) < 0)
        std::string::__init_copy_ctor_external(&v206, (const std::string::value_type *)v19[2], v19[3]);
      else
        v206 = *(std::string *)(v19 + 2);
      v21 = (E5RT::SerializerUtils *)v20[5];
      v22 = (std::__shared_weak_count *)v20[6];
      v207 = (std::string *)v21;
      v208 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        v21 = (E5RT::SerializerUtils *)v207;
      }
      v25 = E5RT::E5Serializer::SerializeOperand(a1, v21, a3);
      v26 = v25;
      v27 = v196;
      if (v196 >= v197)
        break;
      *(_QWORD *)v196 = v25;
      v196 = v27 + 8;
      v28 = v208;
      if (v208)
        goto LABEL_53;
LABEL_17:
      if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v206.__r_.__value_.__l.__data_);
        if (++v18 == v180)
          goto LABEL_57;
      }
      else if (++v18 == v180)
      {
        goto LABEL_57;
      }
    }
    v29 = (char *)v195;
    v30 = v196 - (_BYTE *)v195;
    v31 = (v196 - (_BYTE *)v195) >> 3;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v33 = v197 - (_BYTE *)v195;
    if ((v197 - (_BYTE *)v195) >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v35 = (char *)operator new(8 * v34);
      v36 = &v35[8 * v31];
      *(_QWORD *)v36 = v26;
      v37 = (uint64_t)(v36 + 8);
      if (v27 == v29)
      {
LABEL_50:
        v195 = v36;
        v196 = (char *)v37;
        v197 = &v35[8 * v34];
        if (v29)
          operator delete(v29);
        a3 = v183;
        a1 = v184;
        v196 = (char *)v37;
        v28 = v208;
        if (!v208)
          goto LABEL_17;
LABEL_53:
        v47 = (unint64_t *)&v28->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        goto LABEL_17;
      }
    }
    else
    {
      v35 = 0;
      v36 = (char *)(8 * v31);
      *(_QWORD *)(8 * v31) = v26;
      v37 = 8 * v31 + 8;
      if (v27 == v29)
        goto LABEL_50;
    }
    v38 = v27 - 8 - v29;
    if (v38 < 0x58)
      goto LABEL_290;
    if ((unint64_t)(v27 - &v35[v30]) < 0x20)
      goto LABEL_290;
    v39 = (v38 >> 3) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v41 = &v27[-v40];
    v36 -= v40;
    v42 = &v35[8 * v31 - 16];
    v43 = v27 - 16;
    v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *(_OWORD *)v43;
      *((_OWORD *)v42 - 1) = *((_OWORD *)v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 32;
      v44 -= 4;
    }
    while (v44);
    v27 = v41;
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_290:
      do
      {
        v46 = *((_QWORD *)v27 - 1);
        v27 -= 8;
        *((_QWORD *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v27 != v29);
    }
    goto LABEL_50;
  }
LABEL_57:
  v49 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v179 + 40))(v179);
  v50 = v49[1] - *v49;
  if (v50)
  {
    v51 = 0;
    v181 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 3);
    while (1)
    {
      if (v51 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49[1] - *v49) >> 3))
      {
        v174 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v174, "iterator out of range");
        v174->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v174, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v49 + 8, *v49 + 24 * v51);
      v53 = v52;
      if (*((char *)v52 + 39) < 0)
        std::string::__init_copy_ctor_external(&v206, (const std::string::value_type *)v52[2], v52[3]);
      else
        v206 = *(std::string *)(v52 + 2);
      v54 = (E5RT::SerializerUtils *)v53[5];
      v55 = (std::__shared_weak_count *)v53[6];
      v207 = (std::string *)v54;
      v208 = v55;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
        v54 = (E5RT::SerializerUtils *)v207;
      }
      v58 = E5RT::E5Serializer::SerializeOperand(a1, v54, a3);
      v59 = v58;
      v60 = v193;
      if (v193 >= v194)
        break;
      *(_QWORD *)v193 = v58;
      v193 = v60 + 8;
      v61 = v208;
      if (v208)
        goto LABEL_95;
LABEL_59:
      if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v206.__r_.__value_.__l.__data_);
        if (++v51 == v181)
          goto LABEL_99;
      }
      else if (++v51 == v181)
      {
        goto LABEL_99;
      }
    }
    v62 = (char *)v192;
    v63 = v193 - (_BYTE *)v192;
    v64 = (v193 - (_BYTE *)v192) >> 3;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v66 = v194 - (_BYTE *)v192;
    if ((v194 - (_BYTE *)v192) >> 2 > v65)
      v65 = v66 >> 2;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
      v67 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      if (v67 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v68 = (char *)operator new(8 * v67);
      v69 = &v68[8 * v64];
      *(_QWORD *)v69 = v59;
      v70 = (uint64_t)(v69 + 8);
      if (v60 == v62)
      {
LABEL_92:
        v192 = v69;
        v193 = (char *)v70;
        v194 = &v68[8 * v67];
        if (v62)
          operator delete(v62);
        a3 = v183;
        a1 = v184;
        v193 = (char *)v70;
        v61 = v208;
        if (!v208)
          goto LABEL_59;
LABEL_95:
        v80 = (unint64_t *)&v61->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
        goto LABEL_59;
      }
    }
    else
    {
      v68 = 0;
      v69 = (char *)(8 * v64);
      *(_QWORD *)(8 * v64) = v59;
      v70 = 8 * v64 + 8;
      if (v60 == v62)
        goto LABEL_92;
    }
    v71 = v60 - 8 - v62;
    if (v71 < 0x58)
      goto LABEL_291;
    if ((unint64_t)(v60 - &v68[v63]) < 0x20)
      goto LABEL_291;
    v72 = (v71 >> 3) + 1;
    v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    v74 = &v60[-v73];
    v69 -= v73;
    v75 = &v68[8 * v64 - 16];
    v76 = v60 - 16;
    v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v78 = *(_OWORD *)v76;
      *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
      *(_OWORD *)v75 = v78;
      v75 -= 32;
      v76 -= 32;
      v77 -= 4;
    }
    while (v77);
    v60 = v74;
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_291:
      do
      {
        v79 = *((_QWORD *)v60 - 1);
        v60 -= 8;
        *((_QWORD *)v69 - 1) = v79;
        v69 -= 8;
      }
      while (v60 != v62);
    }
    goto LABEL_92;
  }
LABEL_99:
  v82 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v179 + 48))(v179);
  v83 = v82[1] - *v82;
  if (v83)
  {
    v84 = 0;
    v182 = 0xAAAAAAAAAAAAAAABLL * (v83 >> 3);
    while (1)
    {
      if (v84 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82[1] - *v82) >> 3))
      {
        v175 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v175, "iterator out of range");
        v175->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v175, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v85 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v82 + 8, *v82 + 24 * v84);
      v86 = v85;
      if (*((char *)v85 + 39) < 0)
        std::string::__init_copy_ctor_external(&v206, (const std::string::value_type *)v85[2], v85[3]);
      else
        v206 = *(std::string *)(v85 + 2);
      v87 = (E5RT::SerializerUtils *)v86[5];
      v88 = (std::__shared_weak_count *)v86[6];
      v207 = (std::string *)v87;
      v208 = v88;
      if (v88)
      {
        v89 = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
        v87 = (E5RT::SerializerUtils *)v207;
      }
      v91 = E5RT::E5Serializer::SerializeOperand(a1, v87, a3);
      v92 = v91;
      v93 = v190;
      if (v190 >= v191)
        break;
      *(_QWORD *)v190 = v91;
      v190 = v93 + 8;
      v94 = v208;
      if (v208)
        goto LABEL_137;
LABEL_101:
      if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v206.__r_.__value_.__l.__data_);
        if (++v84 == v182)
          goto LABEL_141;
      }
      else if (++v84 == v182)
      {
        goto LABEL_141;
      }
    }
    v95 = (char *)__p;
    v96 = v190 - (_BYTE *)__p;
    v97 = (v190 - (_BYTE *)__p) >> 3;
    v98 = v97 + 1;
    if ((unint64_t)(v97 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v99 = v191 - (_BYTE *)__p;
    if ((v191 - (_BYTE *)__p) >> 2 > v98)
      v98 = v99 >> 2;
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
      v100 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v100 = v98;
    if (v100)
    {
      if (v100 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v101 = (char *)operator new(8 * v100);
      v102 = &v101[8 * v97];
      *(_QWORD *)v102 = v92;
      v103 = (uint64_t)(v102 + 8);
      if (v93 == v95)
      {
LABEL_134:
        __p = v102;
        v190 = (char *)v103;
        v191 = &v101[8 * v100];
        if (v95)
          operator delete(v95);
        a3 = v183;
        a1 = v184;
        v190 = (char *)v103;
        v94 = v208;
        if (!v208)
          goto LABEL_101;
LABEL_137:
        v113 = (unint64_t *)&v94->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
        goto LABEL_101;
      }
    }
    else
    {
      v101 = 0;
      v102 = (char *)(8 * v97);
      *(_QWORD *)(8 * v97) = v92;
      v103 = 8 * v97 + 8;
      if (v93 == v95)
        goto LABEL_134;
    }
    v104 = v93 - 8 - v95;
    if (v104 < 0x58)
      goto LABEL_292;
    if ((unint64_t)(v93 - &v101[v96]) < 0x20)
      goto LABEL_292;
    v105 = (v104 >> 3) + 1;
    v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
    v107 = &v93[-v106];
    v102 -= v106;
    v108 = &v101[8 * v97 - 16];
    v109 = v93 - 16;
    v110 = v105 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v111 = *(_OWORD *)v109;
      *((_OWORD *)v108 - 1) = *((_OWORD *)v109 - 1);
      *(_OWORD *)v108 = v111;
      v108 -= 32;
      v109 -= 32;
      v110 -= 4;
    }
    while (v110);
    v93 = v107;
    if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_292:
      do
      {
        v112 = *((_QWORD *)v93 - 1);
        v93 -= 8;
        *((_QWORD *)v102 - 1) = v112;
        v102 -= 8;
      }
      while (v93 != v95);
    }
    goto LABEL_134;
  }
LABEL_141:
  switch(v178)
  {
    case 0:
    case 6:
      v176 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v206, "SerializeOpArgFrame");
      std::string::basic_string[abi:ne180100]<0>(&v185, "Invalid component opcode type encountered while serializing operation attributes");
      E5RT::Status::Status(v187, 5, &v185);
      E5RT::E5RTError::E5RTError(v176, &v206, v187);
    case 1:
      E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFB60;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v115 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v116 = v207;
      if (v207 == &v206)
      {
        v117 = 4;
        v116 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_192;
        v117 = 5;
      }
      (*(void (**)(void))(v116->__r_.__value_.__r.__words[0] + 8 * v117))();
LABEL_192:
      v188 = v115;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v155 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v155);
      while (__stlxr(v153 - 1, v155));
      goto LABEL_249;
    case 2:
      E5RT::E5Operation::GetOperationAttributes<CpuInferenceOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFC60;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v130 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v131 = v207;
      if (v207 == &v206)
      {
        v132 = 4;
        v131 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_210;
        v132 = 5;
      }
      (*(void (**)(void))(v131->__r_.__value_.__r.__words[0] + 8 * v132))();
LABEL_210:
      v188 = v130;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v158 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v158);
      while (__stlxr(v153 - 1, v158));
      goto LABEL_249;
    case 3:
      E5RT::E5Operation::GetOperationAttributes<CastOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFCE0;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v124 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v125 = v207;
      if (v207 == &v206)
      {
        v126 = 4;
        v125 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_198;
        v126 = 5;
      }
      (*(void (**)(void))(v125->__r_.__value_.__r.__words[0] + 8 * v126))();
LABEL_198:
      v188 = v124;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v156 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v156);
      while (__stlxr(v153 - 1, v156));
      goto LABEL_249;
    case 4:
      E5RT::E5Operation::GetOperationAttributes<QuantOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFD60;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v136 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v137 = v207;
      if (v207 == &v206)
      {
        v138 = 4;
        v137 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_222;
        v138 = 5;
      }
      (*(void (**)(void))(v137->__r_.__value_.__r.__words[0] + 8 * v138))();
LABEL_222:
      v188 = v136;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v160 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v160);
      while (__stlxr(v153 - 1, v160));
      goto LABEL_249;
    case 5:
      E5RT::E5Operation::GetOperationAttributes<DequantOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFDE0;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v142 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v143 = v207;
      if (v207 == &v206)
      {
        v144 = 4;
        v143 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_234;
        v144 = 5;
      }
      (*(void (**)(void))(v143->__r_.__value_.__r.__words[0] + 8 * v144))();
LABEL_234:
      v188 = v142;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v162 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v162);
      while (__stlxr(v153 - 1, v162));
      goto LABEL_249;
    case 7:
      E5RT::E5Operation::GetOperationAttributes<MlcCpuInferenceOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFE60;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v145 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v146 = v207;
      if (v207 == &v206)
      {
        v147 = 4;
        v146 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_240;
        v147 = 5;
      }
      (*(void (**)(void))(v146->__r_.__value_.__r.__words[0] + 8 * v147))();
LABEL_240:
      v188 = v145;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v163 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v163);
      while (__stlxr(v153 - 1, v163));
      goto LABEL_249;
    case 8:
      E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFEE0;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v133 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v134 = v207;
      if (v207 == &v206)
      {
        v135 = 4;
        v134 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_216;
        v135 = 5;
      }
      (*(void (**)(void))(v134->__r_.__value_.__r.__words[0] + 8 * v135))();
LABEL_216:
      v188 = v133;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v159 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v159);
      while (__stlxr(v153 - 1, v159));
      goto LABEL_249;
    case 9:
      E5RT::E5Operation::GetOperationAttributes<BarrierOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DD0060;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v139 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v140 = v207;
      if (v207 == &v206)
      {
        v141 = 4;
        v140 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_228;
        v141 = 5;
      }
      (*(void (**)(void))(v140->__r_.__value_.__r.__words[0] + 8 * v141))();
LABEL_228:
      v188 = v139;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v161 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v161);
      while (__stlxr(v153 - 1, v161));
      goto LABEL_249;
    case 11:
      E5RT::E5Operation::GetOperationAttributes<EirInferenceOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFF60;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v121 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v122 = v207;
      if (v207 == &v206)
      {
        v123 = 4;
        v122 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_186;
        v123 = 5;
      }
      (*(void (**)(void))(v122->__r_.__value_.__r.__words[0] + 8 * v123))();
LABEL_186:
      v188 = v121;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v154 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v154);
      while (__stlxr(v153 - 1, v154));
      goto LABEL_249;
    case 12:
      E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFBE0;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v127 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v128 = v207;
      if (v207 == &v206)
      {
        v129 = 4;
        v128 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_204;
        v129 = 5;
      }
      (*(void (**)(void))(v128->__r_.__value_.__r.__words[0] + 8 * v129))();
LABEL_204:
      v188 = v127;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v157 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v157);
      while (__stlxr(v153 - 1, v157));
      goto LABEL_249;
    case 13:
      E5RT::E5Operation::GetOperationAttributes<JitCallOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DCFFE0;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v148 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v149 = v207;
      if (v207 == &v206)
      {
        v150 = 4;
        v149 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_246;
        v150 = 5;
      }
      (*(void (**)(void))(v149->__r_.__value_.__r.__words[0] + 8 * v150))();
LABEL_246:
      v188 = v148;
      v151 = v186;
      if (!v186)
        goto LABEL_251;
      v164 = (unint64_t *)&v186->__shared_owners_;
      do
        v153 = __ldaxr(v164);
      while (__stlxr(v153 - 1, v164));
      goto LABEL_249;
    case 14:
      E5RT::E5Operation::GetOperationAttributes<E5MinimalCpuOpT>(v179, &v185);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DD00E0;
      v206.__r_.__value_.__l.__size_ = v185;
      v207 = &v206;
      v118 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v177, &v206);
      v119 = v207;
      if (v207 == &v206)
      {
        v120 = 4;
        v119 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_180;
        v120 = 5;
      }
      (*(void (**)(void))(v119->__r_.__value_.__r.__words[0] + 8 * v120))();
LABEL_180:
      v188 = v118;
      v151 = v186;
      if (v186)
      {
        v152 = (unint64_t *)&v186->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
LABEL_249:
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
LABEL_251:
      v165 = (std::string *)operator new(0x40uLL);
      v165->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DD0160;
      v165->__r_.__value_.__l.__size_ = (std::string::size_type)&v195;
      v165->__r_.__value_.__r.__words[2] = (std::string::size_type)&v192;
      v165[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v165[1].__r_.__value_.__l.__size_ = (std::string::size_type)v179;
      v165[1].__r_.__value_.__r.__words[2] = a1;
      v165[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
      v165[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v203;
      v207 = v165;
      (*(void (**)(_QWORD, void ***, void **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &__dst, v198, 3, 17);
      v166 = *(_QWORD *)(a1 + 8);
      v167 = (uint64_t)v207;
      if (!v207)
        goto LABEL_254;
      if (v207 == &v206)
      {
        v205 = v204;
        (*(void (**)(std::string *, _BYTE *))(v206.__r_.__value_.__r.__words[0] + 24))(&v206, v204);
      }
      else
      {
        v167 = (*(uint64_t (**)(void))(v207->__r_.__value_.__r.__words[0] + 16))();
LABEL_254:
        v205 = (_BYTE *)v167;
      }
      (*(void (**)(uint64_t, void ***, void **, _BYTE *))(*(_QWORD *)v166 + 56))(v166, &__dst, v198, v204);
      v168 = v205;
      if (v205 == v204)
      {
        v169 = 4;
        v168 = v204;
      }
      else
      {
        if (!v205)
          goto LABEL_261;
        v169 = 5;
      }
      (*(void (**)(void))(*v168 + 8 * v169))();
LABEL_261:
      v170 = v207;
      if (v207 == &v206)
      {
        v171 = 4;
        v170 = &v206;
      }
      else
      {
        if (!v207)
          goto LABEL_266;
        v171 = 5;
      }
      (*(void (**)(void))(v170->__r_.__value_.__r.__words[0] + 8 * v171))();
LABEL_266:
      if (__p)
      {
        v190 = (char *)__p;
        operator delete(__p);
      }
      if (v192)
      {
        v193 = (char *)v192;
        operator delete(v192);
      }
      if (v195)
      {
        v196 = (char *)v195;
        operator delete(v195);
      }
      if (v199 < 0)
      {
        operator delete(v198[0]);
        if ((SHIBYTE(v202) & 0x80000000) == 0)
          return v203;
      }
      else if ((SHIBYTE(v202) & 0x80000000) == 0)
      {
        return v203;
      }
      operator delete(__dst);
      return v203;
    default:
      goto LABEL_251;
  }
}

void sub_191029D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  int v45;
  uint64_t v46;
  void *v48;
  void *v49;

  E5RT::Status::~Status((E5RT::Status *)&a22);
  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v46 - 121) < 0)
  {
    operator delete(*(void **)(v46 - 144));
    if ((v45 & 1) == 0)
    {
LABEL_8:
      if (a24)
      {
        a25 = (uint64_t)a24;
        operator delete(a24);
        v48 = a27;
        if (!a27)
        {
LABEL_10:
          v49 = a30;
          if (!a30)
            goto LABEL_11;
          goto LABEL_16;
        }
      }
      else
      {
        v48 = a27;
        if (!a27)
          goto LABEL_10;
      }
      a28 = (uint64_t)v48;
      operator delete(v48);
      v49 = a30;
      if (!a30)
      {
LABEL_11:
        if (a38 < 0)
          goto LABEL_12;
        goto LABEL_17;
      }
LABEL_16:
      a31 = (uint64_t)v49;
      operator delete(v49);
      if (a38 < 0)
      {
LABEL_12:
        operator delete(a33);
        if ((a44 & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
LABEL_17:
      if ((a44 & 0x80000000) == 0)
LABEL_13:
        _Unwind_Resume(a1);
LABEL_18:
      operator delete(a39);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v44);
  goto LABEL_8;
}

void sub_19102A298()
{
  JUMPOUT(0x19102A218);
}

void sub_19102A2A0()
{
  JUMPOUT(0x19102A218);
}

void sub_19102A2A8()
{
  JUMPOUT(0x19102A218);
}

uint64_t E5RT::E5Serializer::SerializeOperation(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  std::string v20;
  std::string __p;
  std::string v22;
  int v23;
  int v24;
  _BYTE v25[24];
  _BYTE *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 16))(a2);
  v6 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 24))(a2);
  v7 = v6;
  v23 = 0;
  *((_BYTE *)&v22.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v22, "__text__");
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    v8 = *(_OWORD *)v6;
    v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
LABEL_4:
    __p = v22;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_4;
  std::string::__init_copy_ctor_external(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
LABEL_5:
  v9 = a1 + 16;
  v10 = std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::find<std::pair<std::string,std::string>>((_QWORD *)(a1 + 16), (unsigned __int8 *)&v20);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_10:
    operator delete(v20.__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_8;
    goto LABEL_11;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
LABEL_7:
  if (v10)
  {
LABEL_8:
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, std::string *))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), v7, &v22);
    goto LABEL_37;
  }
LABEL_11:
  v23 = E5RT::E5Serializer::SerializeOpArgFrame(a1, a2, a3);
  v27[0] = &off_1E2DD01E0;
  v27[1] = &v24;
  v27[2] = &v23;
  v28 = v27;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, std::string *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v7, &v22, 2, 17);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (uint64_t)v28;
  if (!v28)
  {
LABEL_14:
    v26 = (_BYTE *)v13;
    goto LABEL_17;
  }
  if (v28 != v27)
  {
    v13 = (*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
    goto LABEL_14;
  }
  v26 = v25;
  (*(void (**)(_QWORD *, _BYTE *))(v27[0] + 24))(v27, v25);
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, std::string *, _BYTE *))(*(_QWORD *)v12 + 56))(v12, v7, &v22, v25);
  v14 = v26;
  if (v26 == v25)
  {
    v15 = 4;
    v14 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_22;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_22:
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v16 = *(_OWORD *)v7;
    v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v16;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    __p = v22;
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v9, (unsigned __int8 *)&v20, (uint64_t)&v20);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_34:
    operator delete(v20.__r_.__value_.__l.__data_);
    v17 = v28;
    if (v28 != v27)
      goto LABEL_31;
LABEL_35:
    v18 = 4;
    v17 = v27;
    goto LABEL_36;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_34;
LABEL_30:
  v17 = v28;
  if (v28 == v27)
    goto LABEL_35;
LABEL_31:
  if (!v17)
    goto LABEL_37;
  v18 = 5;
LABEL_36:
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_37:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v11;
}

void sub_19102A5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  v31 = *(_QWORD **)(v29 - 64);
  if (v31 == (_QWORD *)(v29 - 88))
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 88);
  }
  else
  {
    if (!v31)
      goto LABEL_8;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_8:
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5Serializer::SerializeBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  E5RT::SerializerUtils *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t *v53;
  E5RT::SerializerUtils *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  std::__shared_weak_count *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  char *v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t *v94;
  E5RT::SerializerUtils *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t v100;
  char *v101;
  std::__shared_weak_count *v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  char *v106;
  int64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  const void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136;
  char *v137;
  char *v138;
  int64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::string *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  std::string *v163;
  uint64_t v164;
  std::logic_error *exception;
  std::logic_error *v167;
  std::logic_error *v168;
  uint64_t v171;
  void *__p[2];
  char v174;
  void *v175;
  char *v176;
  char *v177;
  void *v178;
  char *v179;
  char *v180;
  void *v181;
  char *v182;
  char *v183;
  void *v184;
  char *v185;
  char *v186;
  unsigned int v187;
  _BYTE v188[24];
  _BYTE *v189;
  std::string v190;
  std::string *v191;
  std::__shared_weak_count *v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  v187 = 0;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v174 = 8;
  strcpy((char *)__p, "__text__");
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v6 = v5;
  v7 = v5[1] - *v5;
  v171 = a1;
  if (v7)
  {
    v8 = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    v10 = v5 + 8;
    while (1)
    {
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v10, *v6 + 24 * v8);
      v12 = v11;
      if (*((char *)v11 + 39) < 0)
        std::string::__init_copy_ctor_external(&v190, (const std::string::value_type *)v11[2], v11[3]);
      else
        v190 = *(std::string *)(v11 + 2);
      v13 = (E5RT::SerializerUtils *)v12[5];
      v14 = (std::__shared_weak_count *)v12[6];
      v191 = (std::string *)v13;
      v192 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        v13 = (E5RT::SerializerUtils *)v191;
      }
      v17 = E5RT::E5Serializer::SerializeOperand(a1, v13, a4);
      v18 = v17;
      v19 = v185;
      if (v185 >= v186)
        break;
      *(_QWORD *)v185 = v17;
      v185 = v19 + 8;
      v20 = v192;
      if (v192)
        goto LABEL_39;
LABEL_3:
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v190.__r_.__value_.__l.__data_);
        if (++v8 == v9)
          goto LABEL_43;
      }
      else if (++v8 == v9)
      {
        goto LABEL_43;
      }
    }
    v21 = v6;
    v22 = v10;
    v23 = v9;
    v24 = (char *)v184;
    v25 = v185 - (_BYTE *)v184;
    v26 = (v185 - (_BYTE *)v184) >> 3;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v28 = v186 - (_BYTE *)v184;
    if ((v186 - (_BYTE *)v184) >> 2 > v27)
      v27 = v28 >> 2;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = v29;
      v31 = (char *)operator new(8 * v29);
      v29 = v30;
      v32 = &v31[8 * v26];
      *(_QWORD *)v32 = v18;
      v33 = (uint64_t)(v32 + 8);
      if (v19 != v24)
      {
LABEL_25:
        v34 = v19 - 8 - v24;
        if (v34 >= 0x58)
        {
          v35 = v19 - &v31[v25];
          v9 = v23;
          v10 = v22;
          v6 = v21;
          if (v35 >= 0x20)
          {
            v36 = (v34 >> 3) + 1;
            v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
            v38 = &v19[-v37];
            v32 -= v37;
            v39 = &v31[8 * v26 - 16];
            v40 = v19 - 16;
            v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v42 = *(_OWORD *)v40;
              *((_OWORD *)v39 - 1) = *((_OWORD *)v40 - 1);
              *(_OWORD *)v39 = v42;
              v39 -= 32;
              v40 -= 32;
              v41 -= 4;
            }
            while (v41);
            v19 = v38;
            if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_36:
              v184 = v32;
              v185 = (char *)v33;
              v186 = &v31[8 * v29];
              if (v24)
                operator delete(v24);
              a1 = v171;
              v185 = (char *)v33;
              v20 = v192;
              if (!v192)
                goto LABEL_3;
LABEL_39:
              v44 = (unint64_t *)&v20->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
              goto LABEL_3;
            }
          }
        }
        else
        {
          v9 = v23;
          v10 = v22;
          v6 = v21;
        }
        do
        {
          v43 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v32 - 1) = v43;
          v32 -= 8;
        }
        while (v19 != v24);
        goto LABEL_36;
      }
    }
    else
    {
      v31 = 0;
      v32 = (char *)(8 * v26);
      *(_QWORD *)(8 * v26) = v18;
      v33 = 8 * v26 + 8;
      if (v19 != v24)
        goto LABEL_25;
    }
    v9 = v23;
    v10 = v22;
    v6 = v21;
    goto LABEL_36;
  }
LABEL_43:
  v46 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v47 = v46;
  v48 = v46[1] - *v46;
  if (v48)
  {
    v49 = 0;
    v50 = 0xAAAAAAAAAAAAAAABLL * (v48 >> 3);
    v51 = v46 + 8;
    while (1)
    {
      if (v49 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47[1] - *v47) >> 3))
      {
        v167 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v167, "iterator out of range");
        v167->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v167, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v51, *v47 + 24 * v49);
      v53 = v52;
      if (*((char *)v52 + 39) < 0)
        std::string::__init_copy_ctor_external(&v190, (const std::string::value_type *)v52[2], v52[3]);
      else
        v190 = *(std::string *)(v52 + 2);
      v54 = (E5RT::SerializerUtils *)v53[5];
      v55 = (std::__shared_weak_count *)v53[6];
      v191 = (std::string *)v54;
      v192 = v55;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
        v54 = (E5RT::SerializerUtils *)v191;
      }
      v58 = E5RT::E5Serializer::SerializeOperand(a1, v54, a4);
      v59 = v58;
      v60 = v182;
      if (v182 >= v183)
        break;
      *(_QWORD *)v182 = v58;
      v182 = v60 + 8;
      v61 = v192;
      if (v192)
        goto LABEL_81;
LABEL_45:
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v190.__r_.__value_.__l.__data_);
        if (++v49 == v50)
          goto LABEL_85;
      }
      else if (++v49 == v50)
      {
        goto LABEL_85;
      }
    }
    v62 = v47;
    v63 = v51;
    v64 = v50;
    v65 = (char *)v181;
    v66 = v182 - (_BYTE *)v181;
    v67 = (v182 - (_BYTE *)v181) >> 3;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v69 = v183 - (_BYTE *)v181;
    if ((v183 - (_BYTE *)v181) >> 2 > v68)
      v68 = v69 >> 2;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
      v70 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    if (v70)
    {
      if (v70 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v71 = v70;
      v72 = (char *)operator new(8 * v70);
      v70 = v71;
      v73 = &v72[8 * v67];
      *(_QWORD *)v73 = v59;
      v74 = (uint64_t)(v73 + 8);
      if (v60 != v65)
      {
LABEL_67:
        v75 = v60 - 8 - v65;
        if (v75 >= 0x58)
        {
          v76 = v60 - &v72[v66];
          v50 = v64;
          v51 = v63;
          v47 = v62;
          if (v76 >= 0x20)
          {
            v77 = (v75 >> 3) + 1;
            v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
            v79 = &v60[-v78];
            v73 -= v78;
            v80 = &v72[8 * v67 - 16];
            v81 = v60 - 16;
            v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v83 = *(_OWORD *)v81;
              *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
              *(_OWORD *)v80 = v83;
              v80 -= 32;
              v81 -= 32;
              v82 -= 4;
            }
            while (v82);
            v60 = v79;
            if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_78:
              v181 = v73;
              v182 = (char *)v74;
              v183 = &v72[8 * v70];
              if (v65)
                operator delete(v65);
              a1 = v171;
              v182 = (char *)v74;
              v61 = v192;
              if (!v192)
                goto LABEL_45;
LABEL_81:
              v85 = (unint64_t *)&v61->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
              goto LABEL_45;
            }
          }
        }
        else
        {
          v50 = v64;
          v51 = v63;
          v47 = v62;
        }
        do
        {
          v84 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *((_QWORD *)v73 - 1) = v84;
          v73 -= 8;
        }
        while (v60 != v65);
        goto LABEL_78;
      }
    }
    else
    {
      v72 = 0;
      v73 = (char *)(8 * v67);
      *(_QWORD *)(8 * v67) = v59;
      v74 = 8 * v67 + 8;
      if (v60 != v65)
        goto LABEL_67;
    }
    v50 = v64;
    v51 = v63;
    v47 = v62;
    goto LABEL_78;
  }
LABEL_85:
  v87 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v88 = v87;
  v89 = v87[1] - *v87;
  if (v89)
  {
    v90 = 0;
    v91 = 0xAAAAAAAAAAAAAAABLL * (v89 >> 3);
    v92 = v87 + 8;
    while (1)
    {
      if (v90 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88[1] - *v88) >> 3))
      {
        v168 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v168, "iterator out of range");
        v168->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v168, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v92, *v88 + 24 * v90);
      v94 = v93;
      if (*((char *)v93 + 39) < 0)
        std::string::__init_copy_ctor_external(&v190, (const std::string::value_type *)v93[2], v93[3]);
      else
        v190 = *(std::string *)(v93 + 2);
      v95 = (E5RT::SerializerUtils *)v94[5];
      v96 = (std::__shared_weak_count *)v94[6];
      v191 = (std::string *)v95;
      v192 = v96;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
        v95 = (E5RT::SerializerUtils *)v191;
      }
      v99 = E5RT::E5Serializer::SerializeOperand(a1, v95, a4);
      v100 = v99;
      v101 = v179;
      if (v179 >= v180)
        break;
      *(_QWORD *)v179 = v99;
      v179 = v101 + 8;
      v102 = v192;
      if (v192)
        goto LABEL_123;
LABEL_87:
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v190.__r_.__value_.__l.__data_);
        if (++v90 == v91)
          goto LABEL_127;
      }
      else if (++v90 == v91)
      {
        goto LABEL_127;
      }
    }
    v103 = v88;
    v104 = v92;
    v105 = v91;
    v106 = (char *)v178;
    v107 = v179 - (_BYTE *)v178;
    v108 = (v179 - (_BYTE *)v178) >> 3;
    v109 = v108 + 1;
    if ((unint64_t)(v108 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v110 = v180 - (_BYTE *)v178;
    if ((v180 - (_BYTE *)v178) >> 2 > v109)
      v109 = v110 >> 2;
    if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
      v111 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v111 = v109;
    if (v111)
    {
      if (v111 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v112 = v111;
      v113 = (char *)operator new(8 * v111);
      v111 = v112;
      v114 = &v113[8 * v108];
      *(_QWORD *)v114 = v100;
      v115 = (uint64_t)(v114 + 8);
      if (v101 != v106)
      {
LABEL_109:
        v116 = v101 - 8 - v106;
        if (v116 >= 0x58)
        {
          v117 = v101 - &v113[v107];
          v91 = v105;
          v92 = v104;
          v88 = v103;
          if (v117 >= 0x20)
          {
            v118 = (v116 >> 3) + 1;
            v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
            v120 = &v101[-v119];
            v114 -= v119;
            v121 = &v113[8 * v108 - 16];
            v122 = v101 - 16;
            v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v124 = *(_OWORD *)v122;
              *((_OWORD *)v121 - 1) = *((_OWORD *)v122 - 1);
              *(_OWORD *)v121 = v124;
              v121 -= 32;
              v122 -= 32;
              v123 -= 4;
            }
            while (v123);
            v101 = v120;
            if (v118 == (v118 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_120:
              v178 = v114;
              v179 = (char *)v115;
              v180 = &v113[8 * v111];
              if (v106)
                operator delete(v106);
              a1 = v171;
              v179 = (char *)v115;
              v102 = v192;
              if (!v192)
                goto LABEL_87;
LABEL_123:
              v126 = (unint64_t *)&v102->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
              goto LABEL_87;
            }
          }
        }
        else
        {
          v91 = v105;
          v92 = v104;
          v88 = v103;
        }
        do
        {
          v125 = *((_QWORD *)v101 - 1);
          v101 -= 8;
          *((_QWORD *)v114 - 1) = v125;
          v114 -= 8;
        }
        while (v101 != v106);
        goto LABEL_120;
      }
    }
    else
    {
      v113 = 0;
      v114 = (char *)(8 * v108);
      *(_QWORD *)(8 * v108) = v100;
      v115 = 8 * v108 + 8;
      if (v101 != v106)
        goto LABEL_109;
    }
    v91 = v105;
    v92 = v104;
    v88 = v103;
    goto LABEL_120;
  }
LABEL_127:
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  v128 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v129 = *v128;
  v130 = v128[1];
  while (v129 != v130)
  {
    v131 = *(const void **)v129;
    v132 = *(std::__shared_weak_count **)(v129 + 8);
    v190.__r_.__value_.__r.__words[0] = *(_QWORD *)v129;
    v190.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    v135 = E5RT::E5Serializer::SerializeOperation(a1, v131, a4);
    v136 = v135;
    v137 = v176;
    if (v176 < v177)
    {
      *(_QWORD *)v176 = v135;
      v176 = v137 + 8;
      if (!v132)
        goto LABEL_128;
LABEL_156:
      v156 = (unint64_t *)&v132->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
      goto LABEL_128;
    }
    v138 = (char *)v175;
    v139 = v176 - (_BYTE *)v175;
    v140 = (v176 - (_BYTE *)v175) >> 3;
    v141 = v140 + 1;
    if ((unint64_t)(v140 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v142 = v177 - (_BYTE *)v175;
    if ((v177 - (_BYTE *)v175) >> 2 > v141)
      v141 = v142 >> 2;
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
      v143 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v143 = v141;
    if (!v143)
    {
      v144 = 0;
      v145 = (char *)(8 * v140);
      *(_QWORD *)(8 * v140) = v136;
      v146 = 8 * v140 + 8;
      if (v137 == v138)
        goto LABEL_153;
LABEL_147:
      v147 = v137 - 8 - v138;
      if (v147 < 0x58)
        goto LABEL_199;
      if ((unint64_t)(v137 - &v144[v139]) < 0x20)
        goto LABEL_199;
      v148 = (v147 >> 3) + 1;
      v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
      v150 = &v137[-v149];
      v145 -= v149;
      v151 = &v144[8 * v140 - 16];
      v152 = v137 - 16;
      v153 = v148 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v154 = *(_OWORD *)v152;
        *((_OWORD *)v151 - 1) = *((_OWORD *)v152 - 1);
        *(_OWORD *)v151 = v154;
        v151 -= 32;
        v152 -= 32;
        v153 -= 4;
      }
      while (v153);
      v137 = v150;
      if (v148 != (v148 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_199:
        do
        {
          v155 = *((_QWORD *)v137 - 1);
          v137 -= 8;
          *((_QWORD *)v145 - 1) = v155;
          v145 -= 8;
        }
        while (v137 != v138);
      }
      goto LABEL_153;
    }
    if (v143 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v144 = (char *)operator new(8 * v143);
    v145 = &v144[8 * v140];
    *(_QWORD *)v145 = v136;
    v146 = (uint64_t)(v145 + 8);
    if (v137 != v138)
      goto LABEL_147;
LABEL_153:
    v175 = v145;
    v176 = (char *)v146;
    v177 = &v144[8 * v143];
    if (v138)
      operator delete(v138);
    a1 = v171;
    v176 = (char *)v146;
    if (v132)
      goto LABEL_156;
LABEL_128:
    v129 += 16;
  }
  v158 = (std::string *)operator new(0x30uLL);
  v158->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DD0260;
  v158->__r_.__value_.__l.__size_ = (std::string::size_type)&v184;
  v158->__r_.__value_.__r.__words[2] = (std::string::size_type)&v181;
  v158[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
  v158[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v175;
  v158[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v187;
  v191 = v158;
  (*(void (**)(_QWORD, uint64_t, void **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a3, __p, 4, 17);
  v159 = *(_QWORD *)(a1 + 8);
  v160 = (uint64_t)v191;
  if (!v191)
    goto LABEL_163;
  if (v191 == &v190)
  {
    v189 = v188;
    (*(void (**)(std::string *, _BYTE *))(v190.__r_.__value_.__r.__words[0] + 24))(&v190, v188);
  }
  else
  {
    v160 = (*(uint64_t (**)(void))(v191->__r_.__value_.__r.__words[0] + 16))();
LABEL_163:
    v189 = (_BYTE *)v160;
  }
  (*(void (**)(uint64_t, uint64_t, void **, _BYTE *))(*(_QWORD *)v159 + 56))(v159, a3, __p, v188);
  v161 = v189;
  if (v189 == v188)
  {
    v162 = 4;
    v161 = v188;
LABEL_169:
    (*(void (**)(void))(*v161 + 8 * v162))();
  }
  else if (v189)
  {
    v162 = 5;
    goto LABEL_169;
  }
  v163 = v191;
  if (v191 == &v190)
  {
    v164 = 4;
    v163 = &v190;
LABEL_174:
    (*(void (**)(void))(v163->__r_.__value_.__r.__words[0] + 8 * v164))();
  }
  else if (v191)
  {
    v164 = 5;
    goto LABEL_174;
  }
  if (v174 < 0)
    operator delete(__p[0]);
  if (v175)
  {
    v176 = (char *)v175;
    operator delete(v175);
  }
  if (v178)
  {
    v179 = (char *)v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = (char *)v181;
    operator delete(v181);
  }
  if (v184)
  {
    v185 = (char *)v184;
    operator delete(v184);
  }
  return v187;
}

void sub_19102B428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char *a35)
{
  char *v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  v38 = a35;
  if (a35 == v35)
  {
    v39 = 4;
    v38 = &a32;
  }
  else
  {
    if (!a35)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_6:
  v40 = *(_QWORD **)(v36 - 120);
  if (v40 == (_QWORD *)(v36 - 144))
  {
    v41 = 4;
    v40 = (_QWORD *)(v36 - 144);
  }
  else
  {
    if (!v40)
    {
      if (a18 < 0)
        goto LABEL_17;
      goto LABEL_10;
    }
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
  if (a18 < 0)
  {
LABEL_17:
    operator delete(__p);
    v42 = a19;
    if (a19)
    {
LABEL_18:
      operator delete(v42);
      v43 = a22;
      if (a22)
      {
LABEL_19:
        operator delete(v43);
        v44 = a25;
        if (a25)
        {
LABEL_20:
          operator delete(v44);
          v45 = a28;
          if (a28)
          {
LABEL_21:
            operator delete(v45);
            _Unwind_Resume(exception_object);
          }
LABEL_14:
          _Unwind_Resume(exception_object);
        }
LABEL_13:
        v45 = a28;
        if (a28)
          goto LABEL_21;
        goto LABEL_14;
      }
LABEL_12:
      v44 = a25;
      if (a25)
        goto LABEL_20;
      goto LABEL_13;
    }
LABEL_11:
    v43 = a22;
    if (a22)
      goto LABEL_19;
    goto LABEL_12;
  }
LABEL_10:
  v42 = a19;
  if (a19)
    goto LABEL_18;
  goto LABEL_11;
}

void sub_19102B620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x19102B5D0);
  JUMPOUT(0x19102B4D8);
}

void sub_19102B630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x19102B5D0);
  JUMPOUT(0x19102B4D8);
}

void sub_19102B640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x19102B5D0);
  JUMPOUT(0x19102B4D8);
}

uint64_t E5RT::E5Serializer::SerializeFunction(E5RT::E5Serializer *this, const E5RT::E5Function *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  E5RT::SerializerUtils *v18;
  std::string::size_type v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  std::__shared_weak_count *size;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  E5RT::SerializerUtils *v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  std::__shared_weak_count *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t *v85;
  E5RT::SerializerUtils *v86;
  std::string::size_type v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  char *v92;
  std::__shared_weak_count *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  int v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  size_t v125;
  unint64_t v126;
  std::string *p_dst;
  uint64_t v128;
  uint64_t v129;
  const void *v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  int v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  int64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  _DWORD *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _OWORD *v152;
  char *v153;
  uint64_t v154;
  __int128 v155;
  int v156;
  unint64_t *v157;
  unint64_t v158;
  std::string *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  __int128 v165;
  std::string *v166;
  uint64_t v167;
  std::logic_error *exception;
  std::logic_error *v170;
  std::logic_error *v171;
  char *v172;
  const E5RT::E5Function *v173;
  int v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t *v178;
  const void **v179;
  E5RT::E5Serializer *v180;
  std::string v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  std::string v184;
  std::string __p;
  std::string v186;
  void *v187;
  char *v188;
  char *v189;
  void *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  _BYTE v199[24];
  _BYTE *v200;
  std::string __dst;
  std::string *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)(*(uint64_t (**)(const E5RT::E5Function *))(*(_QWORD *)a2 + 40))(a2);
  v177 = (_QWORD *)(*(uint64_t (**)(const E5RT::E5Function *))(*(_QWORD *)a2 + 48))(a2);
  v176 = (_QWORD *)(*(uint64_t (**)(const E5RT::E5Function *))(*(_QWORD *)a2 + 56))(a2);
  v7 = (*(uint64_t (**)(const E5RT::E5Function *))(*(_QWORD *)a2 + 16))(a2);
  v8 = v7;
  v196 = 0;
  v197 = 0;
  v198 = 0;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  *((_BYTE *)&v186.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v186, "__text__");
  v179 = (const void **)v7;
  v174 = a3;
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    v9 = *(_OWORD *)v7;
    v184.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v9;
LABEL_5:
    __p = v186;
    goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  if ((SHIBYTE(v186.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = (uint64_t)v179;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&__p, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  v8 = (uint64_t)v179;
LABEL_6:
  v10 = std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::find<std::pair<std::string,std::string>>((_QWORD *)this + 2, (unsigned __int8 *)&v184);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_11:
    operator delete(v184.__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_9;
    goto LABEL_12;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
LABEL_8:
  if (v10)
  {
LABEL_9:
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, std::string *))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), v8, &v186);
    goto LABEL_226;
  }
LABEL_12:
  v172 = (char *)this + 16;
  v173 = a2;
  v12 = v6[1] - *v6;
  v180 = this;
  if (v12)
  {
    v13 = 0;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    v15 = v6 + 8;
    v175 = v6 + 8;
    while (1)
    {
      if (v13 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v15, *v6 + 24 * v13);
      v17 = v16;
      if (*((char *)v16 + 39) < 0)
        std::string::__init_copy_ctor_external(&v184, (const std::string::value_type *)v16[2], v16[3]);
      else
        v184 = *(std::string *)(v16 + 2);
      v18 = (E5RT::SerializerUtils *)v17[5];
      v19 = v17[6];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
      __p.__r_.__value_.__l.__size_ = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        v18 = (E5RT::SerializerUtils *)__p.__r_.__value_.__r.__words[0];
      }
      v22 = E5RT::E5Serializer::SerializeOperand((uint64_t)this, v18, v8);
      v23 = v22;
      v24 = v197;
      if (v197 >= v198)
        break;
      *(_QWORD *)v197 = v22;
      this = v180;
      v197 = v24 + 8;
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
        goto LABEL_50;
LABEL_14:
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v184.__r_.__value_.__l.__data_);
        if (++v13 == v14)
          goto LABEL_54;
      }
      else if (++v13 == v14)
      {
        goto LABEL_54;
      }
    }
    v26 = v6;
    v27 = v196;
    v28 = (v197 - v196) >> 3;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v30 = v14;
    v31 = v198 - v196;
    if ((v198 - v196) >> 2 > v29)
      v29 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v29;
    if (v32)
    {
      if (v32 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v33 = operator new(8 * v32);
      v34 = &v33[8 * v28];
      *(_QWORD *)v34 = v23;
      v35 = (uint64_t)(v34 + 8);
      if (v24 != v27)
        goto LABEL_36;
    }
    else
    {
      v33 = 0;
      v34 = (char *)(8 * v28);
      *(_QWORD *)(8 * v28) = v23;
      v35 = 8 * v28 + 8;
      if (v24 != v27)
      {
LABEL_36:
        v36 = v24 - 8 - v27;
        this = v180;
        if (v36 < 0x58)
          goto LABEL_251;
        if ((unint64_t)(v27 - v33) < 0x20)
          goto LABEL_251;
        v37 = (v36 >> 3) + 1;
        v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v24[-v38];
        v34 -= v38;
        v40 = &v33[8 * v28 - 16];
        v41 = v24 - 16;
        v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = *(_OWORD *)v41;
          *(v40 - 1) = *((_OWORD *)v41 - 1);
          *v40 = v43;
          v40 -= 2;
          v41 -= 32;
          v42 -= 4;
        }
        while (v42);
        v24 = v39;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_251:
          do
          {
            v44 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v34 - 1) = v44;
            v34 -= 8;
          }
          while (v24 != v27);
        }
LABEL_47:
        v196 = v34;
        v197 = (char *)v35;
        v198 = &v33[8 * v32];
        if (v27)
          operator delete(v27);
        v14 = v30;
        v6 = v26;
        v8 = (uint64_t)v179;
        v15 = v175;
        v197 = (char *)v35;
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_14;
LABEL_50:
        p_shared_owners = (unint64_t *)&size->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
        goto LABEL_14;
      }
    }
    this = v180;
    goto LABEL_47;
  }
LABEL_54:
  v47 = v177[1] - *v177;
  if (v47)
  {
    v48 = 0;
    v49 = 0xAAAAAAAAAAAAAAABLL * (v47 >> 3);
    while (1)
    {
      if (v48 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177[1] - *v177) >> 3))
      {
        v170 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v170, "iterator out of range");
        v170->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v170, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v177 + 8, *v177 + 24 * v48);
      v51 = v50;
      if (*((char *)v50 + 39) < 0)
        std::string::__init_copy_ctor_external(&v184, (const std::string::value_type *)v50[2], v50[3]);
      else
        v184 = *(std::string *)(v50 + 2);
      v52 = (E5RT::SerializerUtils *)v51[5];
      v53 = v51[6];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      __p.__r_.__value_.__l.__size_ = v53;
      if (v53)
      {
        v54 = (unint64_t *)(v53 + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
        v52 = (E5RT::SerializerUtils *)__p.__r_.__value_.__r.__words[0];
      }
      v56 = E5RT::E5Serializer::SerializeOperand((uint64_t)this, v52, v8);
      v57 = v56;
      v58 = v194;
      if (v194 >= v195)
        break;
      *(_QWORD *)v194 = v56;
      v194 = v58 + 8;
      v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
        goto LABEL_92;
LABEL_56:
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v184.__r_.__value_.__l.__data_);
        if (++v48 == v49)
          goto LABEL_96;
      }
      else if (++v48 == v49)
      {
        goto LABEL_96;
      }
    }
    v60 = v193;
    v61 = (v194 - v193) >> 3;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v63 = v195 - v193;
    if ((v195 - v193) >> 2 > v62)
      v62 = v63 >> 2;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    if (v64)
    {
      if (v64 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v65 = v64;
      v66 = operator new(8 * v64);
      v64 = v65;
      v67 = &v66[8 * v61];
      *(_QWORD *)v67 = v57;
      v68 = (uint64_t)(v67 + 8);
      if (v58 == v60)
      {
LABEL_89:
        v193 = v67;
        v194 = (char *)v68;
        v195 = &v66[8 * v64];
        if (v60)
          operator delete(v60);
        this = v180;
        v194 = (char *)v68;
        v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_56;
LABEL_92:
        v78 = (unint64_t *)&v59->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
        goto LABEL_56;
      }
    }
    else
    {
      v66 = 0;
      v67 = (char *)(8 * v61);
      *(_QWORD *)(8 * v61) = v57;
      v68 = 8 * v61 + 8;
      if (v58 == v60)
        goto LABEL_89;
    }
    v69 = v58 - 8 - v60;
    if (v69 < 0x58)
      goto LABEL_252;
    if ((unint64_t)(v60 - v66) < 0x20)
      goto LABEL_252;
    v70 = (v69 >> 3) + 1;
    v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
    v72 = &v58[-v71];
    v67 -= v71;
    v73 = &v66[8 * v61 - 16];
    v74 = v58 - 16;
    v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *(_OWORD *)v74;
      *(v73 - 1) = *((_OWORD *)v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 32;
      v75 -= 4;
    }
    while (v75);
    v58 = v72;
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_252:
      do
      {
        v77 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *((_QWORD *)v67 - 1) = v77;
        v67 -= 8;
      }
      while (v58 != v60);
    }
    goto LABEL_89;
  }
LABEL_96:
  v80 = v176[1] - *v176;
  if (v80)
  {
    v81 = 0;
    v82 = 0xAAAAAAAAAAAAAAABLL * (v80 >> 3);
    v83 = v176 + 8;
    while (1)
    {
      if (v81 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v176[1] - *v176) >> 3))
      {
        v171 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v171, "iterator out of range");
        v171->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v171, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v83, *v176 + 24 * v81);
      v85 = v84;
      if (*((char *)v84 + 39) < 0)
        std::string::__init_copy_ctor_external(&v184, (const std::string::value_type *)v84[2], v84[3]);
      else
        v184 = *(std::string *)(v84 + 2);
      v86 = (E5RT::SerializerUtils *)v85[5];
      v87 = v85[6];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
      __p.__r_.__value_.__l.__size_ = v87;
      if (v87)
      {
        v88 = (unint64_t *)(v87 + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        v86 = (E5RT::SerializerUtils *)__p.__r_.__value_.__r.__words[0];
      }
      v90 = E5RT::E5Serializer::SerializeOperand((uint64_t)this, v86, v8);
      v91 = v90;
      v92 = v191;
      if (v191 >= v192)
        break;
      *(_QWORD *)v191 = v90;
      v191 = v92 + 8;
      v93 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
        goto LABEL_134;
LABEL_98:
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v184.__r_.__value_.__l.__data_);
        if (++v81 == v82)
          goto LABEL_138;
      }
      else if (++v81 == v82)
      {
        goto LABEL_138;
      }
    }
    v94 = (char *)v190;
    v95 = v191 - (_BYTE *)v190;
    v96 = (v191 - (_BYTE *)v190) >> 3;
    v97 = v96 + 1;
    if ((unint64_t)(v96 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = v83;
    v99 = v82;
    v100 = v192 - (_BYTE *)v190;
    if ((v192 - (_BYTE *)v190) >> 2 > v97)
      v97 = v100 >> 2;
    if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
      v101 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v101 = v97;
    if (v101)
    {
      if (v101 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v102 = (char *)operator new(8 * v101);
      v103 = &v102[8 * v96];
      *(_QWORD *)v103 = v91;
      v104 = (uint64_t)(v103 + 8);
      if (v92 != v94)
      {
LABEL_120:
        v105 = v92 - 8 - v94;
        if (v105 >= 0x58)
        {
          v106 = v92 - &v102[v95];
          this = v180;
          if (v106 >= 0x20)
          {
            v107 = (v105 >> 3) + 1;
            v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
            v109 = &v92[-v108];
            v103 -= v108;
            v110 = &v102[8 * v96 - 16];
            v111 = v92 - 16;
            v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *(_OWORD *)v111;
              *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
              *(_OWORD *)v110 = v113;
              v110 -= 32;
              v111 -= 32;
              v112 -= 4;
            }
            while (v112);
            v92 = v109;
            if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_131:
              v190 = v103;
              v191 = (char *)v104;
              v192 = &v102[8 * v101];
              if (v94)
                operator delete(v94);
              v82 = v99;
              v83 = v98;
              v8 = (uint64_t)v179;
              v191 = (char *)v104;
              v93 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
                goto LABEL_98;
LABEL_134:
              v115 = (unint64_t *)&v93->__shared_owners_;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
              goto LABEL_98;
            }
          }
        }
        else
        {
          this = v180;
        }
        do
        {
          v114 = *((_QWORD *)v92 - 1);
          v92 -= 8;
          *((_QWORD *)v103 - 1) = v114;
          v103 -= 8;
        }
        while (v92 != v94);
        goto LABEL_131;
      }
    }
    else
    {
      v102 = 0;
      v103 = (char *)(8 * v96);
      *(_QWORD *)(8 * v96) = v91;
      v104 = 8 * v96 + 8;
      if (v92 != v94)
        goto LABEL_120;
    }
    this = v180;
    goto LABEL_131;
  }
LABEL_138:
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  v117 = (*(uint64_t (**)(const E5RT::E5Function *))(*(_QWORD *)v173 + 32))(v173);
  v118 = *(uint64_t **)v117;
  v178 = *(uint64_t **)(v117 + 8);
  if (*(uint64_t **)v117 != v178)
  {
    v119 = 0;
    do
    {
      v121 = *v118;
      v120 = (std::__shared_weak_count *)v118[1];
      v182 = *v118;
      v183 = v120;
      if (v120)
      {
        v122 = (unint64_t *)&v120->__shared_owners_;
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      v124 = *(char *)(v8 + 23);
      if (v124 >= 0)
        v125 = *(unsigned __int8 *)(v8 + 23);
      else
        v125 = *(_QWORD *)(v8 + 8);
      v126 = v125 + 8;
      if (v125 + 8 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v126 >= 0x17)
      {
        v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v126 | 7) != 0x17)
          v128 = v126 | 7;
        v129 = v128 + 1;
        p_dst = (std::string *)operator new(v128 + 1);
        __dst.__r_.__value_.__l.__size_ = v125 + 8;
        __dst.__r_.__value_.__r.__words[2] = v129 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v125 + 8;
        if (!v125)
        {
          v8 = (uint64_t)v179;
          goto LABEL_158;
        }
      }
      v8 = (uint64_t)v179;
      if (v124 >= 0)
        v130 = v179;
      else
        v130 = *v179;
      memmove(p_dst, v130, v125);
LABEL_158:
      strcpy((char *)p_dst + v125, "__block_");
      std::to_string(&v181, v119);
      if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = &v181;
      else
        v131 = (std::string *)v181.__r_.__value_.__r.__words[0];
      if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
      else
        v132 = v181.__r_.__value_.__l.__size_;
      v133 = std::string::append(&__dst, (const std::string::value_type *)v131, v132);
      v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      v184.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v134;
      v133->__r_.__value_.__l.__size_ = 0;
      v133->__r_.__value_.__r.__words[2] = 0;
      v133->__r_.__value_.__r.__words[0] = 0;
      v135 = E5RT::E5Serializer::SerializeBlock((uint64_t)this, v121, (uint64_t)&v184, v8);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v184.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_166:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_167;
          goto LABEL_171;
        }
      }
      else if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_166;
      }
      operator delete(v181.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_167:
        v137 = v188;
        v136 = v189;
        if (v188 >= v189)
          goto LABEL_172;
        goto LABEL_168;
      }
LABEL_171:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v137 = v188;
      v136 = v189;
      if (v188 >= v189)
      {
LABEL_172:
        v139 = (char *)v187;
        v140 = v137 - (_BYTE *)v187;
        v141 = (v137 - (_BYTE *)v187) >> 2;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v143 = v136 - (_BYTE *)v187;
        if (v143 >> 1 > v142)
          v142 = v143 >> 1;
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
          v144 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v144 = v142;
        if (v144)
        {
          if (v144 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v145 = operator new(4 * v144);
          v146 = &v145[4 * v141];
          *v146 = v135;
          v138 = (uint64_t)(v146 + 1);
          if (v137 != v139)
          {
LABEL_181:
            v147 = v137 - 4 - v139;
            if (v147 < 0x2C)
            {
              v8 = (uint64_t)v179;
              goto LABEL_189;
            }
            v148 = v137 - &v145[v140];
            v8 = (uint64_t)v179;
            if (v148 < 0x20)
              goto LABEL_253;
            v149 = (v147 >> 2) + 1;
            v150 = 4 * (v149 & 0x7FFFFFFFFFFFFFF8);
            v151 = &v137[-v150];
            v146 = (_DWORD *)((char *)v146 - v150);
            v152 = &v145[4 * v141 - 16];
            v153 = v137 - 16;
            v154 = v149 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v155 = *(_OWORD *)v153;
              *(v152 - 1) = *((_OWORD *)v153 - 1);
              *v152 = v155;
              v152 -= 2;
              v153 -= 32;
              v154 -= 8;
            }
            while (v154);
            v137 = v151;
            if (v149 != (v149 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_253:
              do
              {
LABEL_189:
                v156 = *((_DWORD *)v137 - 1);
                v137 -= 4;
                *--v146 = v156;
              }
              while (v137 != v139);
            }
LABEL_190:
            v187 = v146;
            v188 = (char *)v138;
            v189 = &v145[4 * v144];
            if (v139)
              operator delete(v139);
            goto LABEL_192;
          }
        }
        else
        {
          v145 = 0;
          v146 = (_DWORD *)(4 * v141);
          *(_DWORD *)(4 * v141) = v135;
          v138 = 4 * v141 + 4;
          if (v137 != v139)
            goto LABEL_181;
        }
        v8 = (uint64_t)v179;
        goto LABEL_190;
      }
LABEL_168:
      *(_DWORD *)v137 = v135;
      v138 = (uint64_t)(v137 + 4);
LABEL_192:
      v188 = (char *)v138;
      this = v180;
      if (v120)
      {
        v157 = (unint64_t *)&v120->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      ++v119;
      v118 += 2;
    }
    while (v118 != v178);
  }
  v159 = (std::string *)operator new(0x30uLL);
  v159->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DD02E0;
  v159->__r_.__value_.__l.__size_ = (std::string::size_type)&v196;
  v159->__r_.__value_.__r.__words[2] = (std::string::size_type)&v193;
  v159[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
  v159[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v187;
  v159[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v173;
  v202 = v159;
  if (v174)
    v160 = 9;
  else
    v160 = 17;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, std::string *, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), v8, &v186, 0, v160);
  v161 = *((_QWORD *)this + 1);
  v162 = (uint64_t)v202;
  if (!v202)
    goto LABEL_203;
  if (v202 != &__dst)
  {
    v162 = (*(uint64_t (**)(void))(v202->__r_.__value_.__r.__words[0] + 16))();
LABEL_203:
    v200 = (_BYTE *)v162;
    goto LABEL_206;
  }
  v200 = v199;
  (*(void (**)(std::string *, _BYTE *))(__dst.__r_.__value_.__r.__words[0] + 24))(&__dst, v199);
LABEL_206:
  (*(void (**)(uint64_t, uint64_t, std::string *, _BYTE *))(*(_QWORD *)v161 + 56))(v161, v8, &v186, v199);
  v163 = v200;
  if (v200 == v199)
  {
    v164 = 4;
    v163 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_211;
    v164 = 5;
  }
  (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_211:
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
  }
  else
  {
    v165 = *(_OWORD *)v8;
    v184.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
    *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v165;
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    __p = v186;
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>((uint64_t)v172, (unsigned __int8 *)&v184, (uint64_t)&v184);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_219;
LABEL_223:
    operator delete(v184.__r_.__value_.__l.__data_);
    v166 = v202;
    if (v202 != &__dst)
      goto LABEL_220;
LABEL_224:
    v167 = 4;
    v166 = &__dst;
    goto LABEL_225;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_223;
LABEL_219:
  v166 = v202;
  if (v202 == &__dst)
    goto LABEL_224;
LABEL_220:
  if (!v166)
    goto LABEL_226;
  v167 = 5;
LABEL_225:
  (*(void (**)(void))(v166->__r_.__value_.__r.__words[0] + 8 * v167))();
LABEL_226:
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  if (v187)
  {
    v188 = (char *)v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = (char *)v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  return v11;
}

void sub_19102C6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;

  if (a31 < 0)
    operator delete(__p);
  v48 = *(_QWORD **)(v46 - 104);
  if (v48 == (_QWORD *)(v46 - 128))
  {
    v49 = 4;
    v48 = (_QWORD *)(v46 - 128);
  }
  else
  {
    if (!v48)
      goto LABEL_8;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_8:
  if (a41 < 0)
  {
    operator delete(a36);
    v50 = a42;
    if (a42)
      goto LABEL_10;
  }
  else
  {
    v50 = a42;
    if (a42)
    {
LABEL_10:
      operator delete(v50);
      v51 = a45;
      if (a45)
        goto LABEL_11;
      goto LABEL_16;
    }
  }
  v51 = a45;
  if (a45)
  {
LABEL_11:
    operator delete(v51);
    v52 = *(void **)(v46 - 208);
    if (v52)
      goto LABEL_12;
    goto LABEL_17;
  }
LABEL_16:
  v52 = *(void **)(v46 - 208);
  if (v52)
  {
LABEL_12:
    *(_QWORD *)(v46 - 200) = v52;
    operator delete(v52);
    v53 = *(void **)(v46 - 184);
    if (v53)
      goto LABEL_13;
    goto LABEL_18;
  }
LABEL_17:
  v53 = *(void **)(v46 - 184);
  if (v53)
  {
LABEL_13:
    *(_QWORD *)(v46 - 176) = v53;
    operator delete(v53);
    _Unwind_Resume(a1);
  }
LABEL_18:
  _Unwind_Resume(a1);
}

void E5RT::E5Serializer::SerializeBuildInfo(E5RT::E5Serializer *this, const E5RT::E5BuildInfo *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::string v11;
  std::string __p;
  void *v13[2];
  _BYTE v14[32];
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14[31] = 14;
  strcpy(&v14[7], "\n__build_info__");
  strcpy((char *)v13, "build_info");
  v4 = (char *)this + 56;
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)this + 7, (uint64_t)&v14[8]))
  {
    (*(void (**)(_QWORD, _BYTE *, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), &v14[8], 6, 0, 1);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v4, (uint64_t)&v14[8], (uint64_t)&v14[8]);
  }
  v17[0] = &off_1E2DD0360;
  v17[1] = a2;
  v18 = v17;
  (*(void (**)(_QWORD, void **, _BYTE *, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), v13, &v14[8], 4, 17);
  v5 = *((_QWORD *)this + 1);
  v6 = (uint64_t)v18;
  if (!v18)
    goto LABEL_6;
  if (v18 != v17)
  {
    v6 = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
LABEL_6:
    v16 = (_BYTE *)v6;
    goto LABEL_8;
  }
  v16 = v15;
  (*(void (**)(_QWORD *, _BYTE *))(v17[0] + 24))(v17, v15);
LABEL_8:
  (*(void (**)(uint64_t, void **, _BYTE *, _BYTE *))(*(_QWORD *)v5 + 56))(v5, v13, &v14[8], v15);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  if ((v14[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
  }
  else
  {
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)v13;
    v11.__r_.__value_.__r.__words[2] = *(_QWORD *)v14;
  }
  if ((v14[31] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v14[8], *(std::string::size_type *)&v14[16]);
  else
    __p = *(std::string *)&v14[8];
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>((uint64_t)this + 16, (unsigned __int8 *)&v11, (uint64_t)&v11);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_25:
    operator delete(v11.__r_.__value_.__l.__data_);
    v9 = v18;
    if (v18 != v17)
      goto LABEL_22;
LABEL_26:
    v10 = 4;
    v9 = v17;
    goto LABEL_27;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
LABEL_21:
  v9 = v18;
  if (v18 == v17)
    goto LABEL_26;
LABEL_22:
  if (!v9)
    goto LABEL_28;
  v10 = 5;
LABEL_27:
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_28:
  if ((v14[7] & 0x80000000) == 0)
  {
    if ((v14[31] & 0x80000000) == 0)
      return;
LABEL_32:
    operator delete(*(void **)&v14[8]);
    return;
  }
  operator delete(v13[0]);
  if ((v14[31] & 0x80000000) != 0)
    goto LABEL_32;
}

void sub_19102CB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;

  if (a14 < 0)
    operator delete(__p);
  v36 = *(_QWORD **)(v34 - 48);
  if (v36 == (_QWORD *)(v34 - 72))
  {
    v37 = 4;
    v36 = (_QWORD *)(v34 - 72);
  }
  else
  {
    if (!v36)
    {
      if ((a24 & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_7;
    }
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
  if ((a24 & 0x80000000) == 0)
  {
LABEL_11:
    if (a30 < 0)
    {
LABEL_12:
      operator delete(a25);
      _Unwind_Resume(a1);
    }
LABEL_8:
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a19);
  if (a30 < 0)
    goto LABEL_12;
  goto LABEL_8;
}

void sub_19102CC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x19102CC28);
  JUMPOUT(0x19102CC58);
}

uint64_t E5RT::E5Serializer::SerializeToFile(E5RT::E5Serializer *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const E5RT::E5Function *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const E5RT::E5Function *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  E5RT::E5BuildInfo *v26;
  std::__shared_weak_count *v27;

  E5RT::E5Serializer::ResolveOperandPermissions(a1);
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1);
  v5 = *v4;
  v6 = v4[1];
  while (v5 != v6)
  {
    v7 = *(const E5RT::E5Function **)v5;
    v8 = *(std::__shared_weak_count **)(v5 + 8);
    v26 = *(E5RT::E5BuildInfo **)v5;
    v27 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    E5RT::E5Serializer::SerializeFunction(a1, v7, 1);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v5 += 16;
  }
  v13 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 24))(*(_QWORD *)a1);
  v14 = *v13;
  v15 = v13[1];
  while (v14 != v15)
  {
    v16 = *(const E5RT::E5Function **)v14;
    v17 = *(std::__shared_weak_count **)(v14 + 8);
    v26 = *(E5RT::E5BuildInfo **)v14;
    v27 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    E5RT::E5Serializer::SerializeFunction(a1, v16, 0);
    if (v17)
    {
      v20 = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v14 += 16;
  }
  (*(void (**)(E5RT::E5BuildInfo **__return_ptr))(**(_QWORD **)a1 + 48))(&v26);
  if (v26)
    E5RT::E5Serializer::SerializeBuildInfo(a1, v26);
  v22 = v27;
  if (v27)
  {
    v23 = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 1) + 16))(*((_QWORD *)a1 + 1), a2);
}

void sub_19102CE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19102CE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19102CE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Function>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  std::logic_error *exception;
  std::string v26;
  uint64_t v27;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v6 = v3[1] - *v3;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = v6 / 24;
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3))
    {
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v3 + 8, *v3 + v7);
      if (*((char *)v10 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v10[2], v10[3]);
      else
        v26 = *(std::string *)(v10 + 2);
      v27 = 0;
      v11 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v11[5] |= 1uLL;
      ++v8;
      v7 += 24;
      if (v9 == v8)
        goto LABEL_10;
    }
LABEL_29:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "iterator out of range");
    __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
  }
LABEL_10:
  v12 = v4[1] - *v4;
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = v12 / 24;
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
    {
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + v13);
      if (*((char *)v16 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v16[2], v16[3]);
      else
        v26 = *(std::string *)(v16 + 2);
      v27 = 0;
      v17 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v17[5] |= 2uLL;
      ++v14;
      v13 += 24;
      if (v15 == v14)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v18 = v5[1] - *v5;
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = v18 / 24;
    while (v20 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3))
    {
      v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v5 + 8, *v5 + v19);
      if (*((char *)v22 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v22[2], v22[3]);
      else
        v26 = *(std::string *)(v22 + 2);
      v27 = 0;
      v23 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v23[5] |= 2uLL;
      ++v20;
      v19 += 24;
      if (v21 == v20)
        return;
    }
    goto LABEL_29;
  }
}

void sub_19102D1F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D20C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D220(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Block>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  std::logic_error *exception;
  std::string v26;
  uint64_t v27;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v6 = v3[1] - *v3;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = v6 / 24;
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3))
    {
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v3 + 8, *v3 + v7);
      if (*((char *)v10 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v10[2], v10[3]);
      else
        v26 = *(std::string *)(v10 + 2);
      v27 = 0;
      v11 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v11[5] |= 1uLL;
      ++v8;
      v7 += 24;
      if (v9 == v8)
        goto LABEL_10;
    }
LABEL_29:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "iterator out of range");
    __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
  }
LABEL_10:
  v12 = v4[1] - *v4;
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = v12 / 24;
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
    {
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + v13);
      if (*((char *)v16 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v16[2], v16[3]);
      else
        v26 = *(std::string *)(v16 + 2);
      v27 = 0;
      v17 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v17[5] |= 2uLL;
      ++v14;
      v13 += 24;
      if (v15 == v14)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v18 = v5[1] - *v5;
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = v18 / 24;
    while (v20 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3))
    {
      v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v5 + 8, *v5 + v19);
      if (*((char *)v22 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v22[2], v22[3]);
      else
        v26 = *(std::string *)(v22 + 2);
      v27 = 0;
      v23 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v23[5] |= 2uLL;
      ++v20;
      v19 += 24;
      if (v21 == v20)
        return;
    }
    goto LABEL_29;
  }
}

void sub_19102D5D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D5EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D600(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Operation>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  std::logic_error *exception;
  std::string v26;
  uint64_t v27;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v6 = v3[1] - *v3;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = v6 / 24;
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3))
    {
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v3 + 8, *v3 + v7);
      if (*((char *)v10 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v10[2], v10[3]);
      else
        v26 = *(std::string *)(v10 + 2);
      v27 = 0;
      v11 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v11[5] |= 1uLL;
      ++v8;
      v7 += 24;
      if (v9 == v8)
        goto LABEL_10;
    }
LABEL_29:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "iterator out of range");
    __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
  }
LABEL_10:
  v12 = v4[1] - *v4;
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = v12 / 24;
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
    {
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + v13);
      if (*((char *)v16 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v16[2], v16[3]);
      else
        v26 = *(std::string *)(v16 + 2);
      v27 = 0;
      v17 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v17[5] |= 2uLL;
      ++v14;
      v13 += 24;
      if (v15 == v14)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v18 = v5[1] - *v5;
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = v18 / 24;
    while (v20 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3))
    {
      v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v5 + 8, *v5 + v19);
      if (*((char *)v22 + 39) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v22[2], v22[3]);
      else
        v26 = *(std::string *)(v22 + 2);
      v27 = 0;
      v23 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v23[5] |= 2uLL;
      ++v20;
      v19 += 24;
      if (v21 == v20)
        return;
    }
    goto LABEL_29;
  }
}

void sub_19102D9B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D9CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D9E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19102D9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v25[5] = *(_QWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19102DE5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19102DE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19102E0B8()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19102E0CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFA60;
  result[1] = v3;
  return result;
}

uint64_t sub_19102E100(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFA60;
  a2[1] = v2;
  return result;
}

uint64_t sub_19102E11C(uint64_t a1, flatbuffers::FlatBufferBuilder *this, uint64_t a3)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)this + 78))
    sub_191034224(a1, (uint64_t)this, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200(a1, (uint64_t)this, a3);
  v4 = *(unsigned int **)(a1 + 8);
  v5 = *((_DWORD *)this + 10);
  *((_BYTE *)this + 78) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, *v4, 0);
  v7 = flatbuffers::FlatBufferBuilder::EndTable(this, v5, v6);
  flatbuffers::FlatBufferBuilder::Finish(this, v7, 0, 1);
  return (*((_DWORD *)this + 10) - v5);
}

uint64_t sub_19102E19C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer20SerializeAliasSymbolERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allo"
                     "catorIcEEEEjS9_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer20SerializeAliasSymbolERKNSt3__112basic_stringIcNS1_11char_traitsIc"
                                "EENS1_9allocatorIcEEEEjS9_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer20SerializeAliasSymbolERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjS9_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer20SerializeAliasSymbolERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjS9_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19102E208()
{
  return &unk_1E2DCFAC0;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(char *this, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v4 = a3;
  v6 = this;
  if ((_DWORD)a3 != a4 || this[88])
  {
    this = flatbuffers::FlatBufferBuilder::Align(this, 4uLL, a3);
    v9 = *((_QWORD *)v6 + 7);
    v10 = *((_QWORD *)v6 + 8);
    v11 = v9 >= v10;
    v12 = v9 - v10;
    if (!v11 || v10 < *((_QWORD *)v6 + 6))
      sub_191034248((uint64_t)this, v7, v8);
    if (v12 <= 3)
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 4uLL);
    v13 = *((_DWORD *)v6 + 10);
    if (v13 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, v7, v8);
    *((_DWORD *)v6 + 10) = v13 + 4;
    v14 = *((_QWORD *)v6 + 7);
    v15 = *((_QWORD *)v6 + 8);
    *(_DWORD *)(v14 - 4) = v4;
    v14 -= 4;
    *((_QWORD *)v6 + 7) = v14;
    v11 = v14 >= v15;
    v16 = v14 - v15;
    if (!v11 || v15 < *((_QWORD *)v6 + 6))
      sub_191034248((uint64_t)this, v7, v8);
    v17 = *((unsigned int *)v6 + 10);
    v18 = *((_DWORD *)v6 + 10);
    if (v16 <= 7)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
      v18 = *((_DWORD *)v6 + 10);
    }
    if (v18 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, v7, v8);
    **((_QWORD **)v6 + 8) = v17 | (a2 << 32);
    *((_QWORD *)v6 + 8) += 8;
    ++*((_DWORD *)v6 + 18);
    if (*((unsigned __int16 *)v6 + 38) < a2)
      *((_WORD *)v6 + 38) = a2;
  }
  return this;
}

char *flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v3;
  size_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  char *v13;

  v3 = *((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 10);
  v5 = (char *)*((_QWORD *)this + 6);
  if (v3)
    v6 = v3 >> 1;
  else
    v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 8) - (_QWORD)v5;
  if (v6 <= a2)
    v8 = a2;
  else
    v8 = v6;
  v9 = (*((_QWORD *)this + 3) + v3 + v8 - 1) & -*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v9;
  v10 = *(_QWORD *)this;
  if (!v5)
  {
    if (v10)
      result = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
    else
      result = (char *)operator new[]();
    goto LABEL_15;
  }
  if (v10)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, char *, unint64_t, unint64_t, size_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v5, v3, v9, v4, v7);
LABEL_15:
    v12 = result;
    goto LABEL_16;
  }
  if (v9 <= v3)
    sub_191034290();
  v12 = (char *)operator new[]();
  memcpy(&v12[v9 - v4], &v5[v3 - v4], v4);
  memcpy(v12, v5, v7);
  result = (char *)MEMORY[0x19401CD78](v5, 0x1000C8077774924);
LABEL_16:
  v13 = &v12[*((_QWORD *)this + 4) - v4];
  *((_QWORD *)this + 6) = v12;
  *((_QWORD *)this + 7) = v13;
  *((_QWORD *)this + 8) = &v12[v7];
  return result;
}

char *flatbuffers::FlatBufferBuilder::Align(char *this, unint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;

  v3 = this;
  if (*((_QWORD *)this + 10) < a2)
    *((_QWORD *)this + 10) = a2;
  v4 = *((unsigned int *)this + 10);
  v5 = (a2 - 1) & -v4;
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    v7 = *((_QWORD *)this + 8);
    v8 = v6 >= v7;
    v9 = v6 - v7;
    if (!v8 || v7 < *((_QWORD *)this + 6))
      sub_191034248((uint64_t)this, a2, a3);
    if (v9 < v5)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, (a2 - 1) & -v4);
      LODWORD(v4) = *((_DWORD *)v3 + 10);
    }
    if (v4 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, a2, a3);
    v10 = 0;
    *((_QWORD *)v3 + 7) -= v5;
    *((_DWORD *)v3 + 10) = v4 + v5;
    do
      *(_BYTE *)(*((_QWORD *)v3 + 7) + v10++) = 0;
    while (v5 != v10);
  }
  return this;
}

char *flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, uint64_t a2, const char *a3, int a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, a2, (uint64_t)a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, a2, (uint64_t)a3);
  v7 = a2;
  *((_QWORD *)this + 8) = *((_QWORD *)this + 6);
  v8 = 4;
  if (a4)
    v8 = 8;
  flatbuffers::FlatBufferBuilder::PreAlign((char *)this, v8 + 4 * (a3 != 0), *((_QWORD *)this + 10));
  if (a3)
  {
    v10 = strlen(a3);
    if (v10 != 4)
      sub_1910342DC();
    v12 = *((_QWORD *)this + 7);
    v13 = *((_QWORD *)this + 8);
    v14 = v12 >= v13;
    v15 = v12 - v13;
    if (!v14 || v13 < *((_QWORD *)this + 6))
      sub_191034248(4, v11, v9);
    if (v15 <= 3)
      v10 = (uint64_t)flatbuffers::vector_downward::reallocate(this, 4uLL);
    v16 = *((_DWORD *)this + 10);
    if (v16 >= 0x7FFFFFFF)
      sub_19103426C(v10, v11, v9);
    v17 = (_DWORD *)(*((_QWORD *)this + 7) - 4);
    *((_QWORD *)this + 7) = v17;
    *((_DWORD *)this + 10) = v16 + 4;
    *v17 = *(_DWORD *)a3;
  }
  v18 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v9);
  v21 = *((_DWORD *)this + 10);
  if (v7 - 1 >= v21)
    sub_1910342B8((uint64_t)v18, v19, v20);
  result = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v20);
  v25 = *((_QWORD *)this + 7);
  v26 = *((_QWORD *)this + 8);
  v14 = v25 >= v26;
  v27 = v25 - v26;
  if (!v14 || v26 < *((_QWORD *)this + 6))
    sub_191034248((uint64_t)result, v23, v24);
  if (v27 <= 3)
    result = flatbuffers::vector_downward::reallocate(this, 4uLL);
  v28 = *((_DWORD *)this + 10);
  if (v28 >= 0x7FFFFFFF)
    sub_19103426C((uint64_t)result, v23, v24);
  v29 = *((_QWORD *)this + 7);
  *((_DWORD *)this + 10) = v28 + 4;
  *(_DWORD *)(v29 - 4) = v21 - v7 + 4;
  *((_QWORD *)this + 7) = v29 - 4;
  if (a4)
  {
    v30 = *((_DWORD *)this + 10);
    result = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v24);
    v33 = *((_QWORD *)this + 7);
    v34 = *((_QWORD *)this + 8);
    v14 = v33 >= v34;
    v35 = v33 - v34;
    if (!v14 || v34 < *((_QWORD *)this + 6))
      sub_191034248((uint64_t)result, v31, v32);
    if (v35 <= 3)
      result = flatbuffers::vector_downward::reallocate(this, 4uLL);
    v36 = *((_DWORD *)this + 10);
    if (v36 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)result, v31, v32);
    v37 = *((_QWORD *)this + 7);
    *((_DWORD *)this + 10) = v36 + 4;
    *(_DWORD *)(v37 - 4) = v30;
    *((_QWORD *)this + 7) = v37 - 4;
  }
  *((_BYTE *)this + 79) = 1;
  return result;
}

char *flatbuffers::FlatBufferBuilder::PreAlign(char *this, uint64_t a2, unint64_t a3)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v3 = this;
    if (*((_QWORD *)this + 10) < a3)
      *((_QWORD *)this + 10) = a3;
    v4 = *((unsigned int *)this + 10);
    v5 = (a3 - 1) & (-a2 - v4);
    if (v5)
    {
      v6 = *((_QWORD *)this + 7);
      v7 = *((_QWORD *)this + 8);
      v8 = v6 >= v7;
      v9 = v6 - v7;
      if (!v8 || v7 < *((_QWORD *)this + 6))
        sub_191034248((uint64_t)this, a2, a3);
      if (v9 < v5)
      {
        this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, (a3 - 1) & (-a2 - v4));
        LODWORD(v4) = *((_DWORD *)v3 + 10);
      }
      if (v4 >= 0x7FFFFFFF)
        sub_19103426C((uint64_t)this, a2, a3);
      v10 = 0;
      *((_QWORD *)v3 + 7) -= v5;
      *((_DWORD *)v3 + 10) = v4 + v5;
      do
        *(_BYTE *)(*((_QWORD *)v3 + 7) + v10++) = 0;
      while (v5 != v10);
    }
  }
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, int a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  unsigned __int16 *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int *v33;
  size_t v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int *v40;

  if (!*((_BYTE *)this + 78))
    sub_191034304();
  v5 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, a3);
  v8 = *((_QWORD *)this + 7);
  v9 = *((_QWORD *)this + 8);
  v10 = v8 >= v9;
  v11 = v8 - v9;
  if (!v10 || v9 < *((_QWORD *)this + 6))
    sub_191034248((uint64_t)v5, v6, v7);
  if (v11 <= 3)
    v5 = flatbuffers::vector_downward::reallocate(this, 4uLL);
  v12 = *((_DWORD *)this + 10);
  if (v12 >= 0x7FFFFFFF)
    sub_19103426C((uint64_t)v5, v6, v7);
  *((_DWORD *)this + 10) = v12 + 4;
  v14 = *((_QWORD *)this + 7);
  v13 = *((_QWORD *)this + 8);
  *(_DWORD *)(v14 - 4) = 0;
  v15 = v14 - 4;
  *((_QWORD *)this + 7) = v15;
  if ((unsigned __int16)(*((_WORD *)this + 38) + 2) <= 4u)
    v16 = 4;
  else
    v16 = (unsigned __int16)(*((_WORD *)this + 38) + 2);
  v17 = *((unsigned int *)this + 10);
  *((_WORD *)this + 38) = v16;
  v10 = v15 >= v13;
  v18 = v15 - v13;
  if (!v10 || v13 < *((_QWORD *)this + 6))
    sub_191034248((uint64_t)v5, v6, v7);
  v19 = v17;
  if (v18 < v16)
  {
    v5 = flatbuffers::vector_downward::reallocate(this, v16);
    v19 = *((_DWORD *)this + 10);
  }
  if (v19 >= 0x7FFFFFFF)
    sub_19103426C((uint64_t)v5, v6, v7);
  v20 = (void *)(*((_QWORD *)this + 7) - v16);
  *((_QWORD *)this + 7) = v20;
  *((_DWORD *)this + 10) = v19 + v16;
  bzero(v20, v16);
  v24 = v17 - a2;
  if ((v17 - a2) >= 0x10000)
    sub_19103432C();
  v25 = (unsigned __int16 *)*((_QWORD *)this + 7);
  if (!v25)
    sub_191034354();
  v25[1] = v24;
  *v25 = *((_WORD *)this + 38);
  v26 = *((_QWORD *)this + 8);
  if (!v26)
    sub_19103437C();
  v27 = *((unsigned int *)this + 18);
  v28 = v26 - 8 * v27;
  if ((_DWORD)v27)
  {
    v29 = (int *)(v26 - 8 * v27);
    do
    {
      v30 = *((unsigned __int16 *)v29 + 2);
      if (*(unsigned __int16 *)((char *)v25 + v30))
        sub_1910343CC();
      v31 = *v29;
      v29 += 2;
      *(unsigned __int16 *)((char *)v25 + v30) = v17 - v31;
    }
    while ((unint64_t)v29 < v26);
  }
  *((_QWORD *)this + 8) = v28;
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  v32 = *((_DWORD *)this + 10);
  if (!*((_BYTE *)this + 89))
  {
LABEL_33:
    v37 = v32;
    v38 = (unint64_t)v25 - v28;
    if ((unint64_t)v25 < v28)
      goto LABEL_46;
    goto LABEL_37;
  }
  v33 = (unsigned int *)*((_QWORD *)this + 6);
  if (!v33)
    sub_1910343A4();
  if ((unint64_t)v33 >= v28)
  {
    v37 = *((_DWORD *)this + 10);
    goto LABEL_36;
  }
  v34 = *v25;
  v35 = (char *)v33 + *((_QWORD *)this + 4);
  while (1)
  {
    v36 = *v33;
    v21 = &v35[-v36];
    if ((_DWORD)v34 == *(unsigned __int16 *)&v35[-v36])
    {
      v21 = (char *)memcmp(v21, v25, v34);
      if (!(_DWORD)v21)
        break;
    }
    if ((unint64_t)++v33 >= v28)
      goto LABEL_33;
  }
  v25 = (unsigned __int16 *)((char *)v25 + v32 - v17);
  *((_QWORD *)this + 7) = v25;
  *((_DWORD *)this + 10) = v17;
  v32 = v36;
  v37 = v17;
  if ((_DWORD)v36 == (_DWORD)v17)
  {
LABEL_36:
    v38 = (unint64_t)v25 - v28;
    if ((unint64_t)v25 < v28)
      goto LABEL_46;
LABEL_37:
    if (v28 >= *((_QWORD *)this + 6))
    {
      v39 = v37;
      if (v38 <= 3)
      {
        v21 = flatbuffers::vector_downward::reallocate(this, 4uLL);
        v39 = *((_DWORD *)this + 10);
      }
      if (v39 >= 0x7FFFFFFF)
        sub_19103426C((uint64_t)v21, v22, v23);
      v40 = (unsigned int *)*((_QWORD *)this + 8);
      *v40 = v37;
      *((_QWORD *)this + 8) = v40 + 1;
      goto LABEL_42;
    }
LABEL_46:
    sub_191034248((uint64_t)v21, v22, v23);
  }
LABEL_42:
  *(_DWORD *)(*((_QWORD *)this + 6) + *((_QWORD *)this + 4) - v17) = v32 - v17;
  *((_BYTE *)this + 78) = 0;
  return v17;
}

char *std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = (_QWORD *)(a1 + 24);
  v8 = E5RT::SerializerUtils::StringPairHash::operator()(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = *((_QWORD *)v13 + 1);
            if (v15 == v9)
            {
              if ((std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)v13 + 16, a2) & 1) != 0)return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = *(char **)v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if ((std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)v13 + 16, a2) & 1) != 0)return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v13 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v13 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v10 && (float)(v18 * (float)v10) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      *(_QWORD *)v13 = *v20;
LABEL_61:
      *v20 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v25)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v25)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < *(_QWORD *)&v25)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v20)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v20)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v20)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v19 + 8 * v3) = v16;
  if (*(_QWORD *)v13)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*v7;
  return v13;
}

void sub_19102EDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void **v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  v13 = a2[47];
  if ((v13 & 0x80u) == 0)
    v14 = a2[47];
  else
    v14 = *((_QWORD *)a2 + 4);
  v15 = a3[47];
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)a3 + 4);
  if (v14 != v15)
    return 0;
  v17 = (const void **)(a2 + 24);
  v20 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
  v19 = a3 + 24;
  v18 = v20;
  if (v16 >= 0)
    v21 = v19;
  else
    v21 = v18;
  if ((v13 & 0x80) != 0)
    return memcmp(*v17, v21, *((_QWORD *)a2 + 4)) == 0;
  if (!a2[47])
    return 1;
  v22 = v13 - 1;
  do
  {
    v24 = *(unsigned __int8 *)v17;
    v17 = (const void **)((char *)v17 + 1);
    v23 = v24;
    v26 = *v21++;
    v25 = v26;
    v28 = v22-- != 0;
    result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

unsigned __int8 *std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::find<std::pair<std::string,std::string>>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = E5RT::SerializerUtils::StringPairHash::operator()((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v8);
  if (!v10)
    return 0;
  v9 = *v10;
  if (*v10)
  {
    v11 = (uint64_t)(a1 + 4);
    if (v7.u32[0] < 2uLL)
    {
      v12 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v14 = *((_QWORD *)v9 + 1);
        if (v14 == v6)
        {
          if ((std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](v11, v9 + 16, a2) & 1) != 0)
            return v9;
        }
        else if ((v14 & v12) != v8)
        {
          return 0;
        }
        v9 = *(unsigned __int8 **)v9;
        if (!v9)
          return v9;
      }
    }
    do
    {
      v13 = *((_QWORD *)v9 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](v11, v9 + 16, a2) & 1) != 0)
          return v9;
      }
      else
      {
        if (v13 >= *(_QWORD *)&v5)
          v13 %= *(_QWORD *)&v5;
        if (v13 != v8)
          return 0;
      }
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  return v9;
}

void sub_19102F2CC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_19102F2E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DCFAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19102F320(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCFAE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19102F348(uint64_t a1, uint64_t a2)
{
  int v4;
  E5RT::TensorDescriptor *v5;
  flatbuffers::FlatBufferBuilder *v6;
  const E5RT::SurfaceDescriptor *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  unsigned __int16 *v23;
  void *exception;
  char *v26;
  __int128 v27;
  _BYTE v28[8];
  char v29[24];

  v4 = *(_DWORD *)(a2 + 40);
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(**(void ***)(a1 + 16));
  v6 = (flatbuffers::FlatBufferBuilder *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(**(void ***)(a1 + 16));
  if (v5)
  {
    v8 = E5RT::SerializerUtils::SerializeTensorDescriptorToFlatbuffer((flatbuffers::FlatBufferBuilder *)a2, v5);
    v11 = v8;
    v12 = 1;
    if (!*(_BYTE *)(a2 + 78))
      goto LABEL_3;
LABEL_12:
    sub_191034224(v8, v9, v10);
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v29[23] = 10;
    strcpy(v29, "operator()");
    v26 = (char *)operator new(0x28uLL);
    v27 = xmmword_191A84930;
    strcpy(v26, "Unknown operand descriptor type.");
    E5RT::Status::Status(v28, 5, &v26);
    E5RT::E5RTError::E5RTError(exception, v29, v28);
  }
  v8 = E5RT::SerializerUtils::SerializeSurfaceDescriptorToFlatbuffer((E5RT::SerializerUtils *)a2, v6, v7);
  v11 = v8;
  v12 = 2;
  if (*(_BYTE *)(a2 + 78))
    goto LABEL_12;
LABEL_3:
  if (*(_DWORD *)(a2 + 72))
    sub_191034200(v8, v9, v10);
  *(_BYTE *)(a2 + 78) = 1;
  v13 = *(_DWORD *)(a2 + 40);
  if (v11)
  {
    v14 = flatbuffers::FlatBufferBuilder::Align((char *)a2, 4uLL, v10);
    v17 = *(_DWORD *)(a2 + 40);
    if (v11 - 1 >= v17)
      sub_1910342B8((uint64_t)v14, v15, v16);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a2, 6, v17 - v11 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a2, 4, v12, 0);
  v19 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a2, v13, v18);
  v22 = (int *)(*(_QWORD *)(a2 + 48) + *(_QWORD *)(a2 + 32) - v19);
  v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 < 7u || !v23[3])
    sub_1910343F4(v19, v20, v21);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a2, v19, 0, 1);
  return (*(_DWORD *)(a2 + 40) - v4);
}

void sub_19102F548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19102F5A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOperandERKNS_9E5OperandERKNSt3__112basic_stringIcNS4_11char_traitsI"
                     "cEENS4_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOperandERKNS_9E5OperandERKNSt3__112basic_stringIcNS4_11c"
                                "har_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOperandERKNS_9E5OperandERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOperandERKNS_9E5OperandERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19102F610()
{
  return &unk_1E2DCFB40;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(char *this, uint64_t a2, uint64_t a3, int a4)
{
  char v4;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v4 = a3;
  v6 = this;
  if ((_DWORD)a3 != a4 || this[88])
  {
    if (!*((_QWORD *)this + 10))
      *((_QWORD *)this + 10) = 1;
    v7 = *((_QWORD *)this + 7);
    v8 = *((_QWORD *)this + 8);
    if (v7 < v8 || v8 < *((_QWORD *)this + 6))
      sub_191034248((uint64_t)this, a2, a3);
    if (v7 == v8)
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 1uLL);
    v9 = *((_DWORD *)v6 + 10);
    if (v9 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, a2, a3);
    v10 = (_BYTE *)(*((_QWORD *)v6 + 7) - 1);
    *((_QWORD *)v6 + 7) = v10;
    *((_DWORD *)v6 + 10) = v9 + 1;
    *v10 = v4;
    v11 = *((_QWORD *)v6 + 7);
    v12 = *((_QWORD *)v6 + 8);
    v13 = v11 >= v12;
    v14 = v11 - v12;
    if (!v13 || v12 < *((_QWORD *)v6 + 6))
      sub_191034248((uint64_t)this, a2, a3);
    v15 = *((unsigned int *)v6 + 10);
    v16 = *((_DWORD *)v6 + 10);
    if (v14 <= 7)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
      v16 = *((_DWORD *)v6 + 10);
    }
    if (v16 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, a2, a3);
    **((_QWORD **)v6 + 8) = v15 | (a2 << 32);
    *((_QWORD *)v6 + 8) += 8;
    ++*((_DWORD *)v6 + 18);
    if (*((unsigned __int16 *)v6 + 38) < a2)
      *((_WORD *)v6 + 38) = a2;
  }
  return this;
}

void sub_19102F748()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19102F75C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFB60;
  result[1] = v3;
  return result;
}

uint64_t sub_19102F790(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFB60;
  a2[1] = v2;
  return result;
}

uint64_t sub_19102F7AC(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  unint64_t v8;
  int String;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;

  v4 = *((_DWORD *)this + 10);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = *(const char **)(a1 + 8);
  else
    v7 = *(const char **)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  v10 = *(_QWORD *)(a1 + 8);
  v13 = *(const char **)(v10 + 24);
  v11 = v10 + 24;
  v12 = v13;
  v14 = *(char *)(v11 + 23);
  if (v14 >= 0)
    v15 = (const char *)v11;
  else
    v15 = v12;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v11 + 23);
  else
    v16 = *(_QWORD *)(v11 + 8);
  v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  v18 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64));
  if (*((_BYTE *)this + 78))
    sub_191034224(v18, v19, v20);
  if (*((_DWORD *)this + 18))
    sub_191034200(v18, v19, v20);
  v21 = v18;
  *((_BYTE *)this + 78) = 1;
  v22 = *((_DWORD *)this + 10);
  if (String)
  {
    v23 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v20);
    v26 = *((_DWORD *)this + 10);
    if (String - 1 >= v26)
      sub_1910342B8((uint64_t)v23, v24, v25);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v26 - String + 4, 0);
  }
  if (v17)
  {
    v27 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v20);
    v30 = *((_DWORD *)this + 10);
    if (v17 - 1 >= v30)
      sub_1910342B8((uint64_t)v27, v28, v29);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v30 - v17 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48), 0);
  if (v21)
  {
    v32 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v31);
    v35 = *((_DWORD *)this + 10);
    if (v21 - 1 >= v35)
      sub_1910342B8((uint64_t)v32, v33, v34);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 10, v35 - v21 + 4, 0);
  }
  v36 = flatbuffers::FlatBufferBuilder::EndTable(this, v22, v31);
  flatbuffers::FlatBufferBuilder::Finish(this, v36, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_19102F968(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI15AneInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char"
                     "_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15AneInferenceOpTEEjRKT_RKNSt3__112basic_stringI"
                                "cNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI15AneInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15AneInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19102F9D4()
{
  return &unk_1E2DCFBC0;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, (uint64_t)a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, (uint64_t)a2, a3);
  v6 = flatbuffers::FlatBufferBuilder::PreAlign((char *)this, a3 + 1, 4uLL);
  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)this + 8);
  if (v9 < v10 || v10 < *((_QWORD *)this + 6))
    sub_191034248((uint64_t)v6, v7, v8);
  if (v9 == v10)
    v6 = flatbuffers::vector_downward::reallocate(this, 1uLL);
  v11 = *((_DWORD *)this + 10);
  if (v11 >= 0x7FFFFFFF)
    sub_19103426C((uint64_t)v6, v7, v8);
  v12 = (_BYTE *)(*((_QWORD *)this + 7) - 1);
  *((_QWORD *)this + 7) = v12;
  *((_DWORD *)this + 10) = v11 + 1;
  *v12 = 0;
  if (a3)
  {
    v13 = *((_QWORD *)this + 7);
    v14 = *((_QWORD *)this + 8);
    v15 = v13 >= v14;
    v16 = v13 - v14;
    if (!v15 || v14 < *((_QWORD *)this + 6))
      sub_191034248((uint64_t)v6, v7, v8);
    if (v16 < a3)
      v6 = flatbuffers::vector_downward::reallocate(this, a3);
    v17 = *((_DWORD *)this + 10);
    if (v17 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)v6, v7, v8);
    v18 = (void *)(*((_QWORD *)this + 7) - a3);
    *((_QWORD *)this + 7) = v18;
    *((_DWORD *)this + 10) = v17 + a3;
    memcpy(v18, a2, a3);
  }
  v19 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v8);
  v22 = *((_QWORD *)this + 7);
  v23 = *((_QWORD *)this + 8);
  v15 = v22 >= v23;
  v24 = v22 - v23;
  if (!v15 || v23 < *((_QWORD *)this + 6))
    sub_191034248((uint64_t)v19, v20, v21);
  if (v24 <= 3)
    v19 = flatbuffers::vector_downward::reallocate(this, 4uLL);
  v25 = *((_DWORD *)this + 10);
  if (v25 >= 0x7FFFFFFF)
    sub_19103426C((uint64_t)v19, v20, v21);
  v26 = *((_QWORD *)this + 7);
  *((_DWORD *)this + 10) = v25 + 4;
  *(_DWORD *)(v26 - 4) = a3;
  *((_QWORD *)this + 7) = v26 - 4;
  return *((unsigned int *)this + 10);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(flatbuffers::FlatBufferBuilder *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  flatbuffers::FlatBufferBuilder *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  v5 = v3 >= v4;
  v6 = v3 - v4;
  if (!v5 || (v7 = this, v4 < *((_QWORD *)this + 6)))
    sub_191034248((uint64_t)this, a2, a3);
  v9 = a2;
  v10 = a3 - a2;
  v11 = (a3 - a2) / 24;
  if (v6 < 4 * v11)
    this = (flatbuffers::FlatBufferBuilder *)flatbuffers::vector_downward::reallocate(this, 4 * v11);
  if (*((_DWORD *)v7 + 10) > 0x7FFFFFFEu)
    sub_19103426C((uint64_t)this, a2, a3);
  for (; v9 != a3; v9 += 24)
  {
    v12 = *(char *)(v9 + 23);
    if (v12 >= 0)
      v13 = (const char *)v9;
    else
      v13 = *(const char **)v9;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v9 + 23);
    else
      v14 = *(_QWORD *)(v9 + 8);
    this = (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::CreateString(v7, v13, v14);
    v15 = *((_QWORD *)v7 + 7);
    v16 = *((_QWORD *)v7 + 8);
    v5 = v15 >= v16;
    v17 = v15 - v16;
    if (!v5 || v16 < *((_QWORD *)v7 + 6))
      sub_191034248((uint64_t)this, a2, a3);
    v18 = (int)this;
    if (v17 <= 3)
      this = (flatbuffers::FlatBufferBuilder *)flatbuffers::vector_downward::reallocate(v7, 4uLL);
    if (*((_DWORD *)v7 + 10) >= 0x7FFFFFFFu)
      sub_19103426C((uint64_t)this, a2, a3);
    v19 = (_DWORD *)*((_QWORD *)v7 + 8);
    *v19 = v18;
    *((_QWORD *)v7 + 8) = v19 + 1;
  }
  if (*((_BYTE *)v7 + 78))
    sub_191034224((uint64_t)this, a2, a3);
  if (*((_DWORD *)v7 + 18))
    sub_191034200((uint64_t)this, a2, a3);
  *((_BYTE *)v7 + 78) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((char *)v7, 4 * v11, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((char *)v7, 4 * v11, 4uLL);
  if (v10 >= 24)
  {
    if (v11 <= 1)
      v21 = 1;
    else
      v21 = v11;
    v22 = 4 * v21;
    v23 = -4;
    do
    {
      v24 = *((_QWORD *)v7 + 8);
      if (!v24)
        sub_19103437C();
      flatbuffers::FlatBufferBuilder::PushElement<flatbuffers::String>((uint64_t)v7, *(_DWORD *)(v24 + v23), v20);
      v23 -= 4;
    }
    while (v22 + v23 != -4);
  }
  *((_QWORD *)v7 + 8) -= 4 * v11;
  return flatbuffers::FlatBufferBuilder::EndVector(v7, v11, v20);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<flatbuffers::String>(uint64_t a1, int a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v5 = flatbuffers::FlatBufferBuilder::Align((char *)a1, 4uLL, a3);
  v8 = *(_DWORD *)(a1 + 40);
  if (a2 - 1 >= v8)
    sub_1910342B8((uint64_t)v5, v6, v7);
  v9 = flatbuffers::FlatBufferBuilder::Align((char *)a1, 4uLL, v7);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = v12 >= v13;
  v15 = v12 - v13;
  if (!v14 || v13 < *(_QWORD *)(a1 + 48))
    sub_191034248((uint64_t)v9, v10, v11);
  if (v15 <= 3)
    v9 = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
  v16 = *(_DWORD *)(a1 + 40);
  if (v16 >= 0x7FFFFFFF)
    sub_19103426C((uint64_t)v9, v10, v11);
  v17 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 40) = v16 + 4;
  *(_DWORD *)(v17 - 4) = v8 - a2 + 4;
  *(_QWORD *)(a1 + 56) = v17 - 4;
  return *(unsigned int *)(a1 + 40);
}

uint64_t flatbuffers::FlatBufferBuilder::EndVector(flatbuffers::FlatBufferBuilder *this, int a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (!*((_BYTE *)this + 78))
    sub_191034418();
  *((_BYTE *)this + 78) = 0;
  v5 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, a3);
  v8 = *((_QWORD *)this + 7);
  v9 = *((_QWORD *)this + 8);
  v10 = v8 >= v9;
  v11 = v8 - v9;
  if (!v10 || v9 < *((_QWORD *)this + 6))
    sub_191034248((uint64_t)v5, v6, v7);
  if (v11 <= 3)
    v5 = flatbuffers::vector_downward::reallocate(this, 4uLL);
  v12 = *((_DWORD *)this + 10);
  if (v12 >= 0x7FFFFFFF)
    sub_19103426C((uint64_t)v5, v6, v7);
  v13 = *((_QWORD *)this + 7);
  *((_DWORD *)this + 10) = v12 + 4;
  *(_DWORD *)(v13 - 4) = a2;
  *((_QWORD *)this + 7) = v13 - 4;
  return *((unsigned int *)this + 10);
}

void sub_19102FE68()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19102FE7C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFBE0;
  result[1] = v3;
  return result;
}

uint64_t sub_19102FEB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFBE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19102FECC(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  unint64_t v10;
  int String;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;

  v4 = *((_DWORD *)this + 10);
  v5 = *(unsigned __int8 **)(a1 + 8);
  v6 = *v5;
  if (v6 == 2 || v6 == 1)
  {
    v7 = *((_QWORD *)v5 + 1);
    v8 = *(char *)(v7 + 23);
    if (v8 >= 0)
      v9 = (const char *)v7;
    else
      v9 = *(const char **)v7;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(v7 + 23);
    else
      v10 = *(_QWORD *)(v7 + 8);
    String = flatbuffers::FlatBufferBuilder::CreateString(this, v9, v10);
  }
  else
  {
    String = 0;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v15 = *(const char **)(v12 + 16);
  v13 = v12 + 16;
  v14 = v15;
  v16 = *(char *)(v13 + 23);
  if (v16 >= 0)
    v17 = (const char *)v13;
  else
    v17 = v14;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v13 + 23);
  else
    v18 = *(_QWORD *)(v13 + 8);
  v19 = flatbuffers::FlatBufferBuilder::CreateString(this, v17, v18);
  v20 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
  if (*((_BYTE *)this + 78))
    sub_191034224(v20, v21, v22);
  if (*((_DWORD *)this + 18))
    sub_191034200(v20, v21, v22);
  v23 = v20;
  *((_BYTE *)this + 78) = 1;
  v24 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 4, **(unsigned __int8 **)(a1 + 8), 0);
  if (String)
  {
    v26 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v25);
    v29 = *((_DWORD *)this + 10);
    if (String - 1 >= v29)
      sub_1910342B8((uint64_t)v26, v27, v28);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v29 - String + 4, 0);
  }
  if (v19)
  {
    v30 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v25);
    v33 = *((_DWORD *)this + 10);
    if (v19 - 1 >= v33)
      sub_1910342B8((uint64_t)v30, v31, v32);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, v33 - v19 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 10, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 40), 0);
  if (v23)
  {
    v35 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v34);
    v38 = *((_DWORD *)this + 10);
    if (v23 - 1 >= v38)
      sub_1910342B8((uint64_t)v35, v36, v37);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 12, v38 - v23 + 4, 0);
  }
  v39 = flatbuffers::FlatBufferBuilder::EndTable(this, v24, v34);
  flatbuffers::FlatBufferBuilder::Finish(this, v39, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_1910300C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI19BnnsCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11"
                     "char_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI19BnnsCpuInferenceOpTEEjRKT_RKNSt3__112basic_str"
                                "ingIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI19BnnsCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI19BnnsCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19103012C()
{
  return &unk_1E2DCFC40;
}

void sub_19103013C()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_191030150(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFC60;
  result[1] = v3;
  return result;
}

uint64_t sub_191030184(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFC60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1910301A0(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  unint64_t v8;
  int String;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  v4 = *((_DWORD *)this + 10);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = *(const char **)(a1 + 8);
  else
    v7 = *(const char **)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  v10 = *(_QWORD *)(a1 + 8);
  v13 = *(const char **)(v10 + 24);
  v11 = v10 + 24;
  v12 = v13;
  v14 = *(char *)(v11 + 23);
  if (v14 >= 0)
    v15 = (const char *)v11;
  else
    v15 = v12;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v11 + 23);
  else
    v16 = *(_QWORD *)(v11 + 8);
  v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  if (*((_BYTE *)this + 78))
    sub_191034224(v17, v18, v19);
  if (*((_DWORD *)this + 18))
    sub_191034200(v17, v18, v19);
  v20 = v17;
  *((_BYTE *)this + 78) = 1;
  v21 = *((_DWORD *)this + 10);
  if (String)
  {
    v22 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v19);
    v25 = *((_DWORD *)this + 10);
    if (String - 1 >= v25)
      sub_1910342B8((uint64_t)v22, v23, v24);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v25 - String + 4, 0);
  }
  if (v20)
  {
    v26 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v19);
    v29 = *((_DWORD *)this + 10);
    if (v20 - 1 >= v29)
      sub_1910342B8((uint64_t)v26, v27, v28);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v29 - v20 + 4, 0);
  }
  v30 = flatbuffers::FlatBufferBuilder::EndTable(this, v21, v19);
  flatbuffers::FlatBufferBuilder::Finish(this, v30, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_1910302EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI15CpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char"
                     "_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15CpuInferenceOpTEEjRKT_RKNSt3__112basic_stringI"
                                "cNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI15CpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15CpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191030358()
{
  return &unk_1E2DCFCC0;
}

void sub_191030368()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19103037C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFCE0;
  result[1] = v3;
  return result;
}

uint64_t sub_1910303B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFCE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1910303CC(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v4 = *((_DWORD *)this + 10);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(const void **)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16) - (_QWORD)v6;
  if (v7)
    v8 = v6;
  else
    v8 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v9 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v8, v7 >> 3);
  if (*((_BYTE *)this + 78))
    sub_191034224(v9, v10, v11);
  if (*((_DWORD *)this + 18))
    sub_191034200(v9, v10, v11);
  v12 = v9;
  *((_BYTE *)this + 78) = 1;
  v13 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, **(unsigned int **)(a1 + 8), 0);
  if (v12)
  {
    v15 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v14);
    v18 = *((_DWORD *)this + 10);
    if (v12 - 1 >= v18)
      sub_1910342B8((uint64_t)v15, v16, v17);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v18 - v12 + 4, 0);
  }
  v19 = flatbuffers::FlatBufferBuilder::EndTable(this, v13, v14);
  flatbuffers::FlatBufferBuilder::Finish(this, v19, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_1910304C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI7CastOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIc"
                     "EENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI7CastOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11ch"
                                "ar_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI7CastOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI7CastOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191030534()
{
  return &unk_1E2DCFD40;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(flatbuffers::FlatBufferBuilder *this, const void *a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unsigned int v14;
  void *v15;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, (uint64_t)a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, (uint64_t)a2, a3);
  *((_BYTE *)this + 78) = 1;
  v6 = 8 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign((char *)this, 8 * a3, 4uLL);
  v7 = flatbuffers::FlatBufferBuilder::PreAlign((char *)this, v6, 8uLL);
  if (a3 && v6)
  {
    v10 = *((_QWORD *)this + 7);
    v11 = *((_QWORD *)this + 8);
    v12 = v10 >= v11;
    v13 = v10 - v11;
    if (!v12 || v11 < *((_QWORD *)this + 6))
      sub_191034248((uint64_t)v7, v8, v9);
    if (v13 < v6)
      v7 = flatbuffers::vector_downward::reallocate(this, v6);
    v14 = *((_DWORD *)this + 10);
    if (v14 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)v7, v8, v9);
    v15 = (void *)(*((_QWORD *)this + 7) - v6);
    *((_QWORD *)this + 7) = v15;
    *((_DWORD *)this + 10) = v14 + v6;
    memcpy(v15, a2, v6);
  }
  return flatbuffers::FlatBufferBuilder::EndVector(this, a3, v9);
}

void sub_191030628()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19103063C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFD60;
  result[1] = v3;
  return result;
}

uint64_t sub_191030670(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFD60;
  a2[1] = v2;
  return result;
}

uint64_t sub_19103068C(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *((_DWORD *)this + 10);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(const void **)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16) - (_QWORD)v6;
  if (v7)
    v8 = v6;
  else
    v8 = &flatbuffers::data<float,std::allocator<float>>(std::vector<float> const&)::t;
  v9 = flatbuffers::FlatBufferBuilder::CreateVector<float>(this, v8, v7 >> 2);
  if (*((_BYTE *)this + 78))
    sub_191034224(v9, v10, v11);
  if (*((_DWORD *)this + 18))
    sub_191034200(v9, v10, v11);
  v12 = v9;
  *((_BYTE *)this + 78) = 1;
  v13 = *((_DWORD *)this + 10);
  if ((_DWORD)v9)
  {
    v14 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v11);
    v17 = *((_DWORD *)this + 10);
    if (v12 - 1 >= v17)
      sub_1910342B8((uint64_t)v14, v15, v16);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v17 - v12 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, **(unsigned int **)(a1 + 8), 0);
  v19 = flatbuffers::FlatBufferBuilder::EndTable(this, v13, v18);
  flatbuffers::FlatBufferBuilder::Finish(this, v19, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_191030788(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI8QuantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsI"
                     "cEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI8QuantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11c"
                                "har_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI8QuantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI8QuantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1910307F4()
{
  return &unk_1E2DCFDC0;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<float>(flatbuffers::FlatBufferBuilder *this, const void *a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unsigned int v14;
  void *v15;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, (uint64_t)a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, (uint64_t)a2, a3);
  *((_BYTE *)this + 78) = 1;
  v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign((char *)this, 4 * a3, 4uLL);
  v7 = flatbuffers::FlatBufferBuilder::PreAlign((char *)this, v6, 4uLL);
  if (a3 && v6)
  {
    v10 = *((_QWORD *)this + 7);
    v11 = *((_QWORD *)this + 8);
    v12 = v10 >= v11;
    v13 = v10 - v11;
    if (!v12 || v11 < *((_QWORD *)this + 6))
      sub_191034248((uint64_t)v7, v8, v9);
    if (v13 < v6)
      v7 = flatbuffers::vector_downward::reallocate(this, v6);
    v14 = *((_DWORD *)this + 10);
    if (v14 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)v7, v8, v9);
    v15 = (void *)(*((_QWORD *)this + 7) - v6);
    *((_QWORD *)this + 7) = v15;
    *((_DWORD *)this + 10) = v14 + v6;
    memcpy(v15, a2, v6);
  }
  return flatbuffers::FlatBufferBuilder::EndVector(this, a3, v9);
}

void sub_1910308E8()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_1910308FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFDE0;
  result[1] = v3;
  return result;
}

uint64_t sub_191030930(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFDE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19103094C(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *((_DWORD *)this + 10);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(const void **)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16) - (_QWORD)v6;
  if (v7)
    v8 = v6;
  else
    v8 = &flatbuffers::data<float,std::allocator<float>>(std::vector<float> const&)::t;
  v9 = flatbuffers::FlatBufferBuilder::CreateVector<float>(this, v8, v7 >> 2);
  if (*((_BYTE *)this + 78))
    sub_191034224(v9, v10, v11);
  if (*((_DWORD *)this + 18))
    sub_191034200(v9, v10, v11);
  v12 = v9;
  *((_BYTE *)this + 78) = 1;
  v13 = *((_DWORD *)this + 10);
  if ((_DWORD)v9)
  {
    v14 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v11);
    v17 = *((_DWORD *)this + 10);
    if (v12 - 1 >= v17)
      sub_1910342B8((uint64_t)v14, v15, v16);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v17 - v12 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, **(unsigned int **)(a1 + 8), 0);
  v19 = flatbuffers::FlatBufferBuilder::EndTable(this, v13, v18);
  flatbuffers::FlatBufferBuilder::Finish(this, v19, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_191030A48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI10DequantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_trai"
                     "tsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10DequantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_"
                                "11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI10DequantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10DequantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191030AB4()
{
  return &unk_1E2DCFE40;
}

void sub_191030AC4()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_191030AD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFE60;
  result[1] = v3;
  return result;
}

uint64_t sub_191030B0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFE60;
  a2[1] = v2;
  return result;
}

uint64_t sub_191030B28(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v3;
  int v4;
  int v5;
  const char *v6;
  unint64_t v7;
  uint64_t String;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *((_DWORD *)this + 10);
  v5 = *(char *)(v3 + 23);
  if (v5 >= 0)
    v6 = *(const char **)(a1 + 8);
  else
    v6 = *(const char **)v3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v3 + 23);
  else
    v7 = *(_QWORD *)(v3 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, v6, v7);
  if (*((_BYTE *)this + 78))
    sub_191034224(String, v9, v10);
  if (*((_DWORD *)this + 18))
    sub_191034200(String, v9, v10);
  v11 = String;
  *((_BYTE *)this + 78) = 1;
  v12 = *((_DWORD *)this + 10);
  if ((_DWORD)String)
  {
    v13 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v10);
    v16 = *((_DWORD *)this + 10);
    if (v11 - 1 >= v16)
      sub_1910342B8((uint64_t)v13, v14, v15);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v16 - v11 + 4, 0);
  }
  v17 = flatbuffers::FlatBufferBuilder::EndTable(this, v12, v10);
  flatbuffers::FlatBufferBuilder::Finish(this, v17, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_191030C00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI18MlcCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11c"
                     "har_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI18MlcCpuInferenceOpTEEjRKT_RKNSt3__112basic_stri"
                                "ngIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI18MlcCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI18MlcCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191030C6C()
{
  return &unk_1E2DCFEC0;
}

void sub_191030C7C()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_191030C90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFEE0;
  result[1] = v3;
  return result;
}

uint64_t sub_191030CC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFEE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_191030CE0(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  unint64_t v8;
  int String;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;

  v4 = *((_DWORD *)this + 10);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = *(const char **)(a1 + 8);
  else
    v7 = *(const char **)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  v10 = *(_QWORD *)(a1 + 8);
  v13 = *(const char **)(v10 + 24);
  v11 = v10 + 24;
  v12 = v13;
  v14 = *(char *)(v11 + 23);
  if (v14 >= 0)
    v15 = (const char *)v11;
  else
    v15 = v12;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v11 + 23);
  else
    v16 = *(_QWORD *)(v11 + 8);
  v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  v18 = *(_QWORD **)(a1 + 8);
  v19 = v18[6];
  v20 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, v18[8], v18[9]);
  if (*((_BYTE *)this + 78))
    sub_191034224(v20, v21, v22);
  if (*((_DWORD *)this + 18))
    sub_191034200(v20, v21, v22);
  v23 = v20;
  *((_BYTE *)this + 78) = 1;
  v24 = *((_DWORD *)this + 10);
  if (String)
  {
    v25 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v22);
    v28 = *((_DWORD *)this + 10);
    if (String - 1 >= v28)
      sub_1910342B8((uint64_t)v25, v26, v27);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v28 - String + 4, 0);
  }
  if (v17)
  {
    v29 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v22);
    v32 = *((_DWORD *)this + 10);
    if (v17 - 1 >= v32)
      sub_1910342B8((uint64_t)v29, v30, v31);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v32 - v17 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 8, v19, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 10, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 56), 0);
  if (v23)
  {
    v34 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v33);
    v37 = *((_DWORD *)this + 10);
    if (v23 - 1 >= v37)
      sub_1910342B8((uint64_t)v34, v35, v36);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 12, v37 - v23 + 4, 0);
  }
  v38 = flatbuffers::FlatBufferBuilder::EndTable(this, v24, v33);
  flatbuffers::FlatBufferBuilder::Finish(this, v38, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_191030EB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI20MpsGraphInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_1"
                     "1char_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI20MpsGraphInferenceOpTEEjRKT_RKNSt3__112basic_st"
                                "ringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI20MpsGraphInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI20MpsGraphInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191030F20()
{
  return &unk_1E2DCFF40;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(char *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;

  v6 = this;
  if (a3 != a4 || this[88])
  {
    this = flatbuffers::FlatBufferBuilder::Align(this, 8uLL, a3);
    v9 = *((_QWORD *)v6 + 7);
    v10 = *((_QWORD *)v6 + 8);
    v11 = v9 >= v10;
    v12 = v9 - v10;
    if (!v11 || v10 < *((_QWORD *)v6 + 6))
      sub_191034248((uint64_t)this, v7, v8);
    if (v12 <= 7)
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
    v13 = *((unsigned int *)v6 + 10);
    if (v13 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, v7, v8);
    v15 = *((_QWORD *)v6 + 7);
    v14 = *((_QWORD *)v6 + 8);
    *(_QWORD *)(v15 - 8) = a3;
    v15 -= 8;
    *((_QWORD *)v6 + 7) = v15;
    v16 = v13 + 8;
    *((_DWORD *)v6 + 10) = v13 + 8;
    v17 = v15 - v14;
    if (v15 < v14 || v14 < *((_QWORD *)v6 + 6))
      sub_191034248((uint64_t)this, v7, v8);
    v18 = v16;
    if (v17 <= 7)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
      v18 = *((_DWORD *)v6 + 10);
    }
    if (v18 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, v7, v8);
    **((_QWORD **)v6 + 8) = v16 | (a2 << 32);
    *((_QWORD *)v6 + 8) += 8;
    ++*((_DWORD *)v6 + 18);
    if (*((unsigned __int16 *)v6 + 38) < a2)
      *((_WORD *)v6 + 38) = a2;
  }
  return this;
}

void sub_191031048()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19103105C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFF60;
  result[1] = v3;
  return result;
}

uint64_t sub_191031090(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFF60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1910310AC(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  unint64_t v8;
  int String;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;

  v4 = *((_DWORD *)this + 10);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = *(const char **)(a1 + 8);
  else
    v7 = *(const char **)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  v10 = *(_QWORD *)(a1 + 8);
  v13 = *(const char **)(v10 + 32);
  v11 = v10 + 32;
  v12 = v13;
  v14 = *(char *)(v11 + 23);
  if (v14 >= 0)
    v15 = (const char *)v11;
  else
    v15 = v12;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v11 + 23);
  else
    v16 = *(_QWORD *)(v11 + 8);
  v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(const void **)(v18 + 56);
  v20 = *(_QWORD *)(v18 + 64) - (_QWORD)v19;
  if (v20)
    v21 = v19;
  else
    v21 = &flatbuffers::data<Device,std::allocator<Device>>(std::vector<Device> const&)::t;
  v22 = flatbuffers::FlatBufferBuilder::CreateVector<float>(this, v21, v20 >> 2);
  if (*((_BYTE *)this + 78))
    sub_191034224(v22, v23, v24);
  if (*((_DWORD *)this + 18))
    sub_191034200(v22, v23, v24);
  v25 = v22;
  *((_BYTE *)this + 78) = 1;
  v26 = *((_DWORD *)this + 10);
  if (String)
  {
    v27 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v24);
    v30 = *((_DWORD *)this + 10);
    if (String - 1 >= v30)
      sub_1910342B8((uint64_t)v27, v28, v29);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v30 - String + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 24), 0);
  if (v17)
  {
    v32 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v31);
    v35 = *((_DWORD *)this + 10);
    if (v17 - 1 >= v35)
      sub_1910342B8((uint64_t)v32, v33, v34);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, v35 - v17 + 4, 0);
  }
  if (v25)
  {
    v36 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v31);
    v39 = *((_DWORD *)this + 10);
    if (v25 - 1 >= v39)
      sub_1910342B8((uint64_t)v36, v37, v38);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 10, v39 - v25 + 4, 0);
  }
  v40 = flatbuffers::FlatBufferBuilder::EndTable(this, v26, v31);
  flatbuffers::FlatBufferBuilder::Finish(this, v40, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_19103127C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI15EirInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char"
                     "_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15EirInferenceOpTEEjRKT_RKNSt3__112basic_stringI"
                                "cNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI15EirInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15EirInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1910312E8()
{
  return &unk_1E2DCFFC0;
}

void sub_1910312F8()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19103130C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCFFE0;
  result[1] = v3;
  return result;
}

uint64_t sub_191031340(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCFFE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19103135C(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  unint64_t v8;
  int String;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;

  v4 = *((_DWORD *)this + 10);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = *(const char **)(a1 + 8);
  else
    v7 = *(const char **)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  v10 = *(_QWORD *)(a1 + 8);
  v13 = *(const char **)(v10 + 24);
  v11 = v10 + 24;
  v12 = v13;
  v14 = *(char *)(v11 + 23);
  if (v14 >= 0)
    v15 = (const char *)v11;
  else
    v15 = v12;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v11 + 23);
  else
    v16 = *(_QWORD *)(v11 + 8);
  v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  v18 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80));
  v19 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
  if (*((_BYTE *)this + 78))
    sub_191034224(v19, v20, v21);
  if (*((_DWORD *)this + 18))
    sub_191034200(v19, v20, v21);
  v22 = v19;
  *((_BYTE *)this + 78) = 1;
  v23 = *((_DWORD *)this + 10);
  if (String)
  {
    v24 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v21);
    v27 = *((_DWORD *)this + 10);
    if (String - 1 >= v27)
      sub_1910342B8((uint64_t)v24, v25, v26);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v27 - String + 4, 0);
  }
  if (v17)
  {
    v28 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v21);
    v31 = *((_DWORD *)this + 10);
    if (v17 - 1 >= v31)
      sub_1910342B8((uint64_t)v28, v29, v30);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v31 - v17 + 4, 0);
  }
  if (v18)
  {
    v32 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v21);
    v35 = *((_DWORD *)this + 10);
    if (v18 - 1 >= v35)
      sub_1910342B8((uint64_t)v32, v33, v34);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 10, v35 - v18 + 4, 0);
  }
  if (v22)
  {
    v36 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v21);
    v39 = *((_DWORD *)this + 10);
    if (v22 - 1 >= v39)
      sub_1910342B8((uint64_t)v36, v37, v38);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, v39 - v22 + 4, 0);
  }
  v40 = flatbuffers::FlatBufferBuilder::EndTable(this, v23, v21);
  flatbuffers::FlatBufferBuilder::Finish(this, v40, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_191031550(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI10JitCallOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_trai"
                     "tsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10JitCallOpTEEjRKT_RKNSt3__112basic_stringIcNS6_"
                                "11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI10JitCallOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10JitCallOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1910315BC()
{
  return &unk_1E2DD0040;
}

void sub_1910315CC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_1910315E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DD0060;
  result[1] = v3;
  return result;
}

uint64_t sub_191031614(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DD0060;
  a2[1] = v2;
  return result;
}

uint64_t sub_191031630()
{
  return 0;
}

uint64_t sub_191031638(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI10BarrierOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_trai"
                     "tsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10BarrierOpTEEjRKT_RKNSt3__112basic_stringIcNS6_"
                                "11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI10BarrierOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10BarrierOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1910316A4()
{
  return &unk_1E2DD00C0;
}

void sub_1910316B4()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_1910316C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DD00E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1910316FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DD00E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_191031718(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v3;
  int v4;
  int v5;
  const char *v6;
  unint64_t v7;
  uint64_t String;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *((_DWORD *)this + 10);
  v5 = *(char *)(v3 + 23);
  if (v5 >= 0)
    v6 = *(const char **)(a1 + 8);
  else
    v6 = *(const char **)v3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v3 + 23);
  else
    v7 = *(_QWORD *)(v3 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, v6, v7);
  if (*((_BYTE *)this + 78))
    sub_191034224(String, v9, v10);
  if (*((_DWORD *)this + 18))
    sub_191034200(String, v9, v10);
  v11 = String;
  *((_BYTE *)this + 78) = 1;
  v12 = *((_DWORD *)this + 10);
  if ((_DWORD)String)
  {
    v13 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v10);
    v16 = *((_DWORD *)this + 10);
    if (v11 - 1 >= v16)
      sub_1910342B8((uint64_t)v13, v14, v15);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v16 - v11 + 4, 0);
  }
  v17 = flatbuffers::FlatBufferBuilder::EndTable(this, v12, v10);
  flatbuffers::FlatBufferBuilder::Finish(this, v17, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_1910317F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI15E5MinimalCpuOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char"
                     "_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15E5MinimalCpuOpTEEjRKT_RKNSt3__112basic_stringI"
                                "cNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI15E5MinimalCpuOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15E5MinimalCpuOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19103185C()
{
  return &unk_1E2DD0140;
}

void sub_19103186C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191031880(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E2DD0160;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_1910318D0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E2DD0160;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_191031908(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v4;
  int v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  int v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  int v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  const void *v19;
  int v20;
  const void **v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  void *exception;
  void *v51;
  _BYTE v52[24];
  char v53[8];
  char v54[23];
  char v55;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *((_DWORD *)this + 10);
  v6 = *(const void ***)(a1 + 8);
  v7 = *v6;
  v8 = (_BYTE *)v6[1] - (_BYTE *)*v6;
  if (v8)
    v9 = v7;
  else
    v9 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v10 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v9, v8 >> 3);
  v11 = *(const void ***)(a1 + 16);
  v12 = *v11;
  v13 = (_BYTE *)v11[1] - (_BYTE *)*v11;
  if (v13)
    v14 = v12;
  else
    v14 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v15 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v14, v13 >> 3);
  v16 = *(const void ***)(a1 + 24);
  v17 = *v16;
  v18 = (_BYTE *)v16[1] - (_BYTE *)*v16;
  if (v18)
    v19 = v17;
  else
    v19 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v20 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v19, v18 >> 3);
  v21 = (const void **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
  v22 = (_BYTE *)v21[1] - (_BYTE *)*v21;
  if (v22)
    v23 = (void *)*v21;
  else
    v23 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v24 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v23, v22 >> 3);
  if (*((_BYTE *)this + 78))
    sub_191034224(v24, v25, v26);
  if (*((_DWORD *)this + 18))
    sub_191034200(v24, v25, v26);
  *((_BYTE *)this + 78) = 1;
  v27 = *((_DWORD *)this + 10);
  if (*(_BYTE *)(v4 + 136))
  {
    v28 = v24;
    v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
    if (!*(_BYTE *)(v29 + 8))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      v55 = 10;
      strcpy(v54, "operator()");
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
      std::operator+<char>();
      E5RT::Status::Status(v53, 2, v52);
      E5RT::E5RTError::E5RTError(exception, v54, v53);
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 12, *(_QWORD *)v29, 0);
    v30 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
    if (*v30 == v30[1])
    {
      v51 = __cxa_allocate_exception(0x18uLL);
      v55 = 10;
      strcpy(v54, "operator()");
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
      std::operator+<char>();
      E5RT::Status::Status(v53, 2, v52);
      E5RT::E5RTError::E5RTError(v51, v54, v53);
    }
    if (v28)
    {
      v31 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v26);
      v34 = *((_DWORD *)this + 10);
      if (v28 - 1 >= v34)
        sub_1910342B8((uint64_t)v31, v32, v33);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 10, v34 - v28 + 4, 0);
    }
  }
  if (v10)
  {
    v35 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v26);
    v38 = *((_DWORD *)this + 10);
    if (v10 - 1 >= v38)
      sub_1910342B8((uint64_t)v35, v36, v37);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v38 - v10 + 4, 0);
  }
  if (v15)
  {
    v39 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v26);
    v42 = *((_DWORD *)this + 10);
    if (v15 - 1 >= v42)
      sub_1910342B8((uint64_t)v39, v40, v41);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, v42 - v15 + 4, 0);
  }
  if (v20)
  {
    v43 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v26);
    v46 = *((_DWORD *)this + 10);
    if (v20 - 1 >= v46)
      sub_1910342B8((uint64_t)v43, v44, v45);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 14, v46 - v20 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 4, **(_QWORD **)(a1 + 48), 0);
  v48 = flatbuffers::FlatBufferBuilder::EndTable(this, v27, v47);
  **(_DWORD **)(a1 + 56) = v48;
  flatbuffers::FlatBufferBuilder::Finish(this, v48, 0, 0);
  return (*((_DWORD *)this + 10) - v5);
}

void sub_191031CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_191031D5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer19SerializeOpArgFrameERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_t"
                     "raitsIcEENS4_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer19SerializeOpArgFrameERKNS_11E5OperationERKNSt3__112basic_stringIcN"
                                "S4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer19SerializeOpArgFrameERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer19SerializeOpArgFrameERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191031DC8()
{
  return &unk_1E2DD01C0;
}

void sub_191031DD8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191031DEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DD01E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_191031E24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DD01E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_191031E44(uint64_t a1, flatbuffers::FlatBufferBuilder *this, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  if (*((_BYTE *)this + 78))
    sub_191034224(a1, (uint64_t)this, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200(a1, (uint64_t)this, a3);
  v5 = *((_DWORD *)this + 10);
  *((_BYTE *)this + 78) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, **(unsigned int **)(a1 + 8), 0);
  v7 = **(_DWORD **)(a1 + 16);
  if (v7)
  {
    v8 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v6);
    v11 = *((_DWORD *)this + 10);
    if (v7 - 1 >= v11)
      sub_1910342B8((uint64_t)v8, v9, v10);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v11 - v7 + 4, 0);
  }
  v12 = flatbuffers::FlatBufferBuilder::EndTable(this, v5, v6);
  flatbuffers::FlatBufferBuilder::Finish(this, v12, 0, 1);
  return (*((_DWORD *)this + 10) - v5);
}

uint64_t sub_191031F14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer18SerializeOperationERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_tr"
                     "aitsIcEENS4_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer18SerializeOperationERKNS_11E5OperationERKNSt3__112basic_stringIcNS"
                                "4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer18SerializeOperationERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer18SerializeOperationERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191031F80()
{
  return &unk_1E2DD0240;
}

void sub_191031F90()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191031FA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DD0260;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_191031FEC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DD0260;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19103201C(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  const void **v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  int v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  const void **v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  int v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  flatbuffers::FlatBufferBuilder *v46;
  int v47;

  v4 = *((_DWORD *)this + 10);
  v5 = *(const void ***)(a1 + 8);
  v6 = *v5;
  v7 = (_BYTE *)v5[1] - (_BYTE *)*v5;
  if (v7)
    v8 = v6;
  else
    v8 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v9 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v8, v7 >> 3);
  v10 = *(const void ***)(a1 + 16);
  v11 = *v10;
  v12 = (_BYTE *)v10[1] - (_BYTE *)*v10;
  if (v12)
    v13 = v11;
  else
    v13 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v14 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v13, v12 >> 3);
  v15 = *(const void ***)(a1 + 24);
  v16 = *v15;
  v17 = (_BYTE *)v15[1] - (_BYTE *)*v15;
  if (v17)
    v18 = v16;
  else
    v18 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v19 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v18, v17 >> 3);
  v20 = *(const void ***)(a1 + 32);
  v21 = *v20;
  v22 = (_BYTE *)v20[1] - (_BYTE *)*v20;
  if (v22)
    v23 = v21;
  else
    v23 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v24 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v23, v22 >> 3);
  v46 = this;
  if (*((_BYTE *)this + 78))
    sub_191034224(v24, v25, v26);
  if (*((_DWORD *)this + 18))
    sub_191034200(v24, v25, v26);
  v27 = v24;
  *((_BYTE *)this + 78) = 1;
  v47 = *((_DWORD *)this + 10);
  if (v9)
  {
    v28 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v26);
    v31 = *((_DWORD *)this + 10);
    if (v9 - 1 >= v31)
      sub_1910342B8((uint64_t)v28, v29, v30);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v31 - v9 + 4, 0);
  }
  if (v14)
  {
    v32 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v26);
    v35 = *((_DWORD *)this + 10);
    if (v14 - 1 >= v35)
      sub_1910342B8((uint64_t)v32, v33, v34);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, v35 - v14 + 4, 0);
  }
  if (v19)
  {
    v36 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v26);
    v39 = *((_DWORD *)this + 10);
    if (v19 - 1 >= v39)
      sub_1910342B8((uint64_t)v36, v37, v38);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 10, v39 - v19 + 4, 0);
  }
  if (v27)
  {
    v40 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v26);
    v43 = *((_DWORD *)this + 10);
    if (v27 - 1 >= v43)
      sub_1910342B8((uint64_t)v40, v41, v42);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v43 - v27 + 4, 0);
  }
  v44 = BlockBuilder::Finish((BlockBuilder *)&v46, v25, v26);
  **(_DWORD **)(a1 + 40) = v44;
  flatbuffers::FlatBufferBuilder::Finish(this, v44, 0, 0);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_191032230(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer14SerializeBlockERKNS_7E5BlockERKNSt3__112basic_stringIcNS4_11char_traitsIcEEN"
                     "S4_9allocatorIcEEEESC_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer14SerializeBlockERKNS_7E5BlockERKNSt3__112basic_stringIcNS4_11char_"
                                "traitsIcEENS4_9allocatorIcEEEESC_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer14SerializeBlockERKNS_7E5BlockERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer14SerializeBlockERKNS_7E5BlockERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19103229C()
{
  return &unk_1E2DD02C0;
}

uint64_t BlockBuilder::Finish(BlockBuilder *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  unsigned __int16 *v8;
  unsigned int v9;

  result = flatbuffers::FlatBufferBuilder::EndTable(*(flatbuffers::FlatBufferBuilder **)this, *((_DWORD *)this + 2), a3);
  v7 = (int *)(*(_QWORD *)(*(_QWORD *)this + 48) + *(_QWORD *)(*(_QWORD *)this + 32) - result);
  v8 = (unsigned __int16 *)((char *)v7 - *v7);
  v9 = *v8;
  if (v9 < 5 || !v8[2])
    sub_1910343F4(result, v5, v6);
  if (v9 < 7 || !v8[3])
    sub_1910343F4(result, v5, v6);
  if (v9 < 9 || !v8[4])
    sub_1910343F4(result, v5, v6);
  return result;
}

void sub_191032330()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191032344(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DD02E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_19103238C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DD02E0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1910323BC(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4;
  const void **v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  int v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  const void **v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  int v19;
  void **v20;
  void *v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  int v26;
  const char *v27;
  unint64_t v28;
  uint64_t String;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unsigned __int16 *v58;
  unsigned int v59;

  v4 = *((_DWORD *)this + 10);
  v5 = *(const void ***)(a1 + 8);
  v6 = *v5;
  v7 = (_BYTE *)v5[1] - (_BYTE *)*v5;
  if (v7)
    v8 = v6;
  else
    v8 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v9 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v8, v7 >> 3);
  v10 = *(const void ***)(a1 + 16);
  v11 = *v10;
  v12 = (_BYTE *)v10[1] - (_BYTE *)*v10;
  if (v12)
    v13 = v11;
  else
    v13 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v14 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v13, v12 >> 3);
  v15 = *(const void ***)(a1 + 24);
  v16 = *v15;
  v17 = (_BYTE *)v15[1] - (_BYTE *)*v15;
  if (v17)
    v18 = v16;
  else
    v18 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v19 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v18, v17 >> 3);
  v20 = *(void ***)(a1 + 32);
  v21 = *v20;
  v22 = (_BYTE *)v20[1] - (_BYTE *)*v20;
  if (v22)
    v23 = v21;
  else
    v23 = &flatbuffers::data<flatbuffers::Offset<Block>,std::allocator<flatbuffers::Offset<Block>>>(std::vector<flatbuffers::Offset<Block>> const&)::t;
  v24 = flatbuffers::FlatBufferBuilder::CreateVector<Block>(this, (uint64_t)v23, v22 >> 2);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40));
  v26 = *(char *)(v25 + 23);
  if (v26 >= 0)
    v27 = (const char *)v25;
  else
    v27 = *(const char **)v25;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(v25 + 23);
  else
    v28 = *(_QWORD *)(v25 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, v27, v28);
  if (*((_BYTE *)this + 78))
    sub_191034224(String, v30, v31);
  if (*((_DWORD *)this + 18))
    sub_191034200(String, v30, v31);
  v32 = String;
  *((_BYTE *)this + 78) = 1;
  v33 = *((_DWORD *)this + 10);
  if (v9)
  {
    v34 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v31);
    v37 = *((_DWORD *)this + 10);
    if (v9 - 1 >= v37)
      sub_1910342B8((uint64_t)v34, v35, v36);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v37 - v9 + 4, 0);
  }
  if (v14)
  {
    v38 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v31);
    v41 = *((_DWORD *)this + 10);
    if (v14 - 1 >= v41)
      sub_1910342B8((uint64_t)v38, v39, v40);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v41 - v14 + 4, 0);
  }
  if (v19)
  {
    v42 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v31);
    v45 = *((_DWORD *)this + 10);
    if (v19 - 1 >= v45)
      sub_1910342B8((uint64_t)v42, v43, v44);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 12, v45 - v19 + 4, 0);
  }
  if (v24)
  {
    v46 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v31);
    v49 = *((_DWORD *)this + 10);
    if (v24 - 1 >= v49)
      sub_1910342B8((uint64_t)v46, v47, v48);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, v49 - v24 + 4, 0);
  }
  if (v32)
  {
    v50 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v31);
    v53 = *((_DWORD *)this + 10);
    if (v32 - 1 >= v53)
      sub_1910342B8((uint64_t)v50, v51, v52);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 10, v53 - v32 + 4, 0);
  }
  v54 = flatbuffers::FlatBufferBuilder::EndTable(this, v33, v31);
  v57 = (int *)(*((_QWORD *)this + 6) + *((_QWORD *)this + 4) - v54);
  v58 = (unsigned __int16 *)((char *)v57 - *v57);
  v59 = *v58;
  if (v59 < 5 || !v58[2])
    sub_1910343F4(v54, v55, v56);
  if (v59 < 7 || !v58[3])
    sub_1910343F4(v54, v55, v56);
  flatbuffers::FlatBufferBuilder::Finish(this, v54, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_191032678(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer17SerializeFunctionERKNS_10E5FunctionEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer17SerializeFunctionERKNS_10E5FunctionEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer17SerializeFunctionERKNS_10E5FunctionEbE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer17SerializeFunctionERKNS_10E5FunctionEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1910326E4()
{
  return &unk_1E2DD0340;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<Block>(flatbuffers::FlatBufferBuilder *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, a2, a3);
  *((_BYTE *)this + 78) = 1;
  v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign((char *)this, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((char *)this, v6, 4uLL);
  if (a3)
  {
    v8 = a2 - 4;
    v9 = a3;
    do
    {
      v10 = v9 - 1;
      flatbuffers::FlatBufferBuilder::PushElement<flatbuffers::String>((uint64_t)this, *(_DWORD *)(v8 + 4 * v9), v7);
      v9 = v10;
    }
    while (v10);
  }
  return flatbuffers::FlatBufferBuilder::EndVector(this, a3, v7);
}

void sub_191032790()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_1910327A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DD0360;
  result[1] = v3;
  return result;
}

uint64_t sub_1910327D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DD0360;
  a2[1] = v2;
  return result;
}

uint64_t sub_1910327F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  unint64_t v9;
  int String;
  int v11;
  const char *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int *v22;
  unsigned __int16 *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  unsigned int *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v50;
  const char *v51;
  const char *v52;
  const char *v53;
  int v54;
  const char *v55;
  int v56;
  char *__p;
  char *v58;
  char *v59;

  v56 = *(_DWORD *)(a2 + 40);
  __p = 0;
  v58 = 0;
  v59 = 0;
  v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) + 24);
  if (v4)
  {
    if (v4 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = (char *)operator new(4 * v4);
    v58 = __p;
    v59 = &__p[4 * v4];
  }
  v5 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) + 16);
  if (v5)
  {
    while (1)
    {
      v7 = *((char *)v5 + 39);
      if (v7 >= 0)
        v8 = (const char *)(v5 + 2);
      else
        v8 = (const char *)v5[2];
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v5 + 39);
      else
        v9 = v5[3];
      String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a2, v8, v9);
      v11 = *((char *)v5 + 63);
      if (v11 >= 0)
        v12 = (const char *)(v5 + 5);
      else
        v12 = (const char *)v5[5];
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)v5 + 63);
      else
        v13 = v5[6];
      v14 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a2, v12, v13);
      if (*(_BYTE *)(a2 + 78))
      {
        v50 = 342;
        v51 = "NotNested";
        v52 = "!nested";
        goto LABEL_65;
      }
      if (*(_DWORD *)(a2 + 72))
      {
        v50 = 344;
        v52 = "!num_field_loc";
        v51 = "NotNested";
LABEL_65:
        __assert_rtn(v51, "flatbuffer_builder.h", v50, v52);
      }
      v16 = v14;
      *(_BYTE *)(a2 + 78) = 1;
      v17 = *(_DWORD *)(a2 + 40);
      if (String)
      {
        flatbuffers::FlatBufferBuilder::Align((char *)a2, 4uLL, v15);
        v18 = *(_DWORD *)(a2 + 40);
        if (String - 1 >= v18)
          goto LABEL_62;
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a2, 4, v18 - String + 4, 0);
      }
      if (v16)
      {
        flatbuffers::FlatBufferBuilder::Align((char *)a2, 4uLL, v15);
        v19 = *(_DWORD *)(a2 + 40);
        if (v16 - 1 >= v19)
        {
LABEL_62:
          v50 = 329;
          v51 = "ReferTo";
          v52 = "off && off <= size";
          goto LABEL_65;
        }
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a2, 6, v19 - v16 + 4, 0);
      }
      v20 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a2, v17, v15);
      v21 = v20;
      v22 = (int *)(*(_QWORD *)(a2 + 48) + *(_QWORD *)(a2 + 32) - v20);
      v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 < 5u || !v23[2])
        __assert_rtn("Required", "flatbuffer_builder.h", 1219, "ok");
      v24 = v58;
      if (v58 >= v59)
        break;
      *(_DWORD *)v58 = v20;
      v6 = (uint64_t)(v58 + 4);
LABEL_7:
      v58 = (char *)v6;
      v5 = (uint64_t *)*v5;
      if (!v5)
        goto LABEL_51;
    }
    v25 = __p;
    v26 = (v58 - __p) >> 2;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v28 = v59 - __p;
    if ((v59 - __p) >> 1 > v27)
      v27 = v28 >> 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = operator new(4 * v29);
      v31 = &v30[4 * v26];
      *(_DWORD *)v31 = v21;
      v6 = (uint64_t)(v31 + 4);
      if (v58 == __p)
        goto LABEL_48;
    }
    else
    {
      v30 = 0;
      v31 = (char *)(4 * v26);
      *(_DWORD *)(4 * v26) = v21;
      v6 = 4 * v26 + 4;
      if (v58 == __p)
      {
LABEL_48:
        __p = v31;
        v59 = &v30[4 * v29];
        if (v25)
          operator delete(v25);
        goto LABEL_7;
      }
    }
    v32 = v58 - 4 - __p;
    if (v32 < 0x2C)
      goto LABEL_76;
    if ((unint64_t)(__p - v30) < 0x20)
      goto LABEL_76;
    v33 = (v32 >> 2) + 1;
    v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    v35 = &v58[-v34];
    v31 -= v34;
    v36 = &v30[4 * v26 - 16];
    v37 = v58 - 16;
    v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    v24 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_76:
      do
      {
        v40 = *((_DWORD *)v24 - 1);
        v24 -= 4;
        *((_DWORD *)v31 - 1) = v40;
        v31 -= 4;
      }
      while (v24 != __p);
    }
    goto LABEL_48;
  }
  v6 = (uint64_t)v58;
LABEL_51:
  if ((char *)v6 == __p)
    v41 = (unsigned int *)&flatbuffers::data<flatbuffers::Offset<E5RT_FB::KeyValuePair>,std::allocator<flatbuffers::Offset<E5RT_FB::KeyValuePair>>>(std::vector<flatbuffers::Offset<E5RT_FB::KeyValuePair>> &)::t;
  else
    v41 = (unsigned int *)__p;
  v42 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<E5RT_FB::KeyValuePair>((flatbuffers::FlatBufferBuilder *)a2, v41, (v6 - (uint64_t)__p) >> 2);
  if (*(_BYTE *)(a2 + 78))
  {
    v53 = "!nested";
    v54 = 342;
    v55 = "NotNested";
    goto LABEL_69;
  }
  if (*(_DWORD *)(a2 + 72))
  {
    v53 = "!num_field_loc";
    v54 = 344;
    v55 = "NotNested";
    goto LABEL_69;
  }
  v44 = v42;
  *(_BYTE *)(a2 + 78) = 1;
  v45 = *(_DWORD *)(a2 + 40);
  if (!v42)
    goto LABEL_59;
  flatbuffers::FlatBufferBuilder::Align((char *)a2, 4uLL, v43);
  v46 = *(_DWORD *)(a2 + 40);
  if (v44 - 1 >= v46)
  {
    v53 = "off && off <= size";
    v54 = 329;
    v55 = "ReferTo";
LABEL_69:
    __assert_rtn(v55, "flatbuffer_builder.h", v54, v53);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a2, 4, v46 - v44 + 4, 0);
LABEL_59:
  v47 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a2, v45, v43);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a2, v47, 0, 1);
  v48 = *(_DWORD *)(a2 + 40);
  if (__p)
    operator delete(__p);
  return (v48 - v56);
}

void sub_191032C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_191032CD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer18SerializeBuildInfoERKNS_11E5BuildInfoEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer18SerializeBuildInfoERKNS_11E5BuildInfoEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer18SerializeBuildInfoERKNS_11E5BuildInfoEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer18SerializeBuildInfoERKNS_11E5BuildInfoEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191032D44()
{
  return &unk_1E2DD03C0;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<E5RT_FB::KeyValuePair>(flatbuffers::FlatBufferBuilder *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  const std::nothrow_t *v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  char *v11;
  flatbuffers::FlatBufferBuilder *v13;

  v6 = &a2[a3];
  v13 = a1;
  if (a3 < 129)
  {
LABEL_5:
    v11 = 0;
    v8 = 0;
  }
  else
  {
    v7 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v8 = a3;
    while (1)
    {
      v9 = (char *)operator new(4 * v8, v7);
      if (v9)
        break;
      v10 = v8 > 1;
      v8 >>= 1;
      if (!v10)
        goto LABEL_5;
    }
    v11 = v9;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a2, v6, (uint64_t *)&v13, a3, v11, v8);
  if (v11)
    operator delete(v11);
  return flatbuffers::FlatBufferBuilder::CreateVector<Block>(a1, (uint64_t)a2, a3);
}

void sub_191032E18(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(unsigned int *a1, unsigned int *a2, uint64_t *a3, unint64_t a4, char *a5, uint64_t a6)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  const void *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  int v21;
  _BOOL4 v22;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  char *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  const void *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int *v59;
  __int128 v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;

  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *(_QWORD *)(*a3 + 48) + *(_QWORD *)(*a3 + 32);
      v11 = *a1;
      v12 = (unsigned int *)(v10 - v9 + *(unsigned __int16 *)(v10 - v9 - *(int *)(v10 - v9) + 4));
      v13 = (unsigned int *)((char *)v12 + *v12);
      v14 = (unsigned int *)(v10 - v11 + *(unsigned __int16 *)(v10 - v11 - *(int *)(v10 - v11) + 4));
      v15 = *v14;
      v18 = *v13;
      v16 = v13 + 1;
      v17 = v18;
      v19 = *(unsigned int *)((char *)v14 + v15);
      if (v19 >= v18)
        v20 = v17;
      else
        v20 = v19;
      v21 = memcmp(v16, (char *)v14 + v15 + 4, v20);
      v22 = v17 < v19;
      if (v21)
        v22 = v21 < 0;
      if (v22)
      {
        *v8 = v9;
        *(a2 - 1) = v11;
      }
    }
    else
    {
      if ((uint64_t)a4 <= 128)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, a2, (uint64_t)a3);
        return;
      }
      v24 = a4 >> 1;
      v25 = &a1[a4 >> 1];
      v26 = a4 - (a4 >> 1);
      if ((uint64_t)a4 > a6)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, v25, a3, a4 >> 1, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(v25, a2, a3, v26, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>((uint64_t)v8, v25, a2, a3, v24, v26, a5, a6);
        return;
      }
      v27 = a4 >> 1;
      std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, v25, (uint64_t)a3, a4 >> 1, (unsigned int *)a5);
      v72 = v27;
      v28 = (unsigned int *)&a5[4 * v27];
      std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(v25, a2, (uint64_t)a3, v26, v28);
      v73 = *a3;
      v29 = v8;
      v30 = v28;
      v31 = a5;
      v32 = (unsigned int *)&a5[4 * a4];
      do
      {
        if (v30 == v32)
        {
          if (v31 == (char *)v28)
            return;
          v62 = &a5[4 * v72] - v31 - 4;
          if (v62 >= 0x1C && (unint64_t)((char *)v29 - v31) >= 0x20)
          {
            v66 = 0;
            v67 = (v62 >> 2) + 1;
            v68 = v67 & 0x7FFFFFFFFFFFFFF8;
            v63 = &v8[v68];
            v64 = (unsigned int *)&v31[v68 * 4];
            v69 = v67 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v70 = &v8[v66];
              v71 = *(_OWORD *)&v31[v66 * 4 + 16];
              *(_OWORD *)v70 = *(_OWORD *)&v31[v66 * 4];
              *((_OWORD *)v70 + 1) = v71;
              v66 += 8;
              v69 -= 8;
            }
            while (v69);
            if (v67 == (v67 & 0x7FFFFFFFFFFFFFF8))
              return;
          }
          else
          {
            v63 = v8;
            v64 = (unsigned int *)v31;
          }
          do
          {
            v65 = *v64++;
            *v63++ = v65;
          }
          while (v64 != v28);
          return;
        }
        v33 = v30;
        v34 = *v30;
        v35 = *(_QWORD *)(v73 + 48) + *(_QWORD *)(v73 + 32);
        v36 = *(unsigned int *)v31;
        v37 = (unsigned int *)(v35 - v34 + *(unsigned __int16 *)(v35 - v34 - *(int *)(v35 - v34) + 4));
        v38 = (unsigned int *)((char *)v37 + *v37);
        v39 = (unsigned int *)(v35 - v36 + *(unsigned __int16 *)(v35 - v36 - *(int *)(v35 - v36) + 4));
        v40 = *v39;
        v43 = *v38;
        v41 = v38 + 1;
        v42 = v43;
        v44 = *(unsigned int *)((char *)v39 + v40);
        if (v44 >= v43)
          v45 = v42;
        else
          v45 = v44;
        v46 = memcmp(v41, (char *)v39 + v40 + 4, v45);
        v47 = v46 < 0;
        if (!v46)
          v47 = v42 < v44;
        if (v47)
          v48 = v34;
        else
          v48 = v36;
        v31 += 4 * !v47;
        v30 = &v33[v47];
        *v8++ = v48;
        ++v29;
      }
      while (v31 != (char *)v28);
      if (v30 != v32)
      {
        v49 = -4;
        if (!v47)
          v49 = 0;
        v50 = &a5[4 * a4] - (char *)v33 + v49 - 4;
        if (v50 < 0x3C)
          goto LABEL_50;
        v51 = !v47;
        v52 = 4;
        if (v51)
          v52 = 0;
        if ((unint64_t)((char *)v29 - (char *)v33 - v52) < 0x20)
          goto LABEL_50;
        v53 = 0;
        v54 = (v50 >> 2) + 1;
        v55 = v54 & 0x7FFFFFFFFFFFFFF8;
        v56 = &v8[v55];
        v57 = &v30[v55];
        v58 = v54 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v59 = &v8[v53];
          v60 = *(_OWORD *)&v30[v53 + 4];
          *(_OWORD *)v59 = *(_OWORD *)&v30[v53];
          *((_OWORD *)v59 + 1) = v60;
          v53 += 8;
          v58 -= 8;
        }
        while (v58);
        v8 = v56;
        v30 = v57;
        if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_50:
          do
          {
            v61 = *v30++;
            *v8++ = v61;
          }
          while (v30 != v32);
        }
      }
    }
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  const void *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  const void *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  size_t v31;
  BOOL v32;

  if (result != a2)
  {
    v3 = a2;
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v6 = 0;
      v7 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v8 = result;
      do
      {
        v11 = *v8;
        v10 = v8[1];
        v8 = v5;
        v12 = (unsigned int *)(v7 - v10 + *(unsigned __int16 *)(v7 - v10 - *(int *)(v7 - v10) + 4));
        v13 = (unsigned int *)((char *)v12 + *v12);
        v14 = (unsigned int *)(v7 - v11 + *(unsigned __int16 *)(v7 - v11 - *(int *)(v7 - v11) + 4));
        v15 = *v14;
        v18 = *v13;
        v16 = v13 + 1;
        v17 = v18;
        v19 = *(unsigned int *)((char *)v14 + v15);
        if (v19 >= v18)
          v20 = v17;
        else
          v20 = v19;
        result = (unsigned int *)memcmp(v16, (char *)v14 + v15 + 4, v20);
        v21 = v17 < v19;
        if ((_DWORD)result)
          v21 = (int)result < 0;
        if (v21)
        {
          v22 = v6;
          do
          {
            *(unsigned int *)((char *)v4 + v22 + 4) = v11;
            if (!v22)
            {
              v9 = v4;
              goto LABEL_5;
            }
            v11 = *(unsigned int *)((char *)v4 + v22 - 4);
            v23 = (unsigned int *)(v7 - v10 + *(unsigned __int16 *)(v7 - v10 - *(int *)(v7 - v10) + 4));
            v24 = (unsigned int *)((char *)v23 + *v23);
            v25 = (unsigned int *)(v7 - v11 + *(unsigned __int16 *)(v7 - v11 - *(int *)(v7 - v11) + 4));
            v26 = *v25;
            v29 = *v24;
            v27 = v24 + 1;
            v28 = v29;
            v30 = *(unsigned int *)((char *)v25 + v26);
            if (v30 >= v29)
              v31 = v28;
            else
              v31 = v30;
            result = (unsigned int *)memcmp(v27, (char *)v25 + v26 + 4, v31);
            v32 = v28 < v30;
            if ((_DWORD)result)
              v32 = (int)result < 0;
            v22 -= 4;
          }
          while (v32);
          v9 = (unsigned int *)((char *)v4 + v22 + 4);
LABEL_5:
          v3 = a2;
          *v9 = v10;
        }
        v5 = v8 + 1;
        v6 += 4;
      }
      while (v8 + 1 != v3);
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(unsigned int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  unsigned int *v5;
  unsigned int *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  const void *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  size_t v21;
  int v22;
  __n128 result;
  _BOOL4 v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  const void *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  size_t v45;
  int v46;
  BOOL v47;
  int v48;
  _BOOL4 v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int *v61;
  __int128 v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  __int128 v73;
  unint64_t v74;
  unsigned int *v75;
  uint64_t v76;

  if (a4)
  {
    v5 = a5;
    v8 = a2;
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v12 = *a1;
      v13 = (unsigned int *)(v11 - v10 + *(unsigned __int16 *)(v11 - v10 - *(int *)(v11 - v10) + 4));
      v14 = (unsigned int *)((char *)v13 + *v13);
      v15 = (unsigned int *)(v11 - v12 + *(unsigned __int16 *)(v11 - v12 - *(int *)(v11 - v12) + 4));
      v16 = *v15;
      v19 = *v14;
      v17 = v14 + 1;
      v18 = v19;
      v20 = *(unsigned int *)((char *)v15 + v16);
      if (v20 >= v19)
        v21 = v18;
      else
        v21 = v20;
      v22 = memcmp(v17, (char *)v15 + v16 + 4, v21);
      v24 = v18 < v20;
      if (v22)
        v24 = v22 < 0;
      if (v24)
      {
        *v5 = v10;
        v25 = *a1;
      }
      else
      {
        *v5 = v12;
        v25 = *(v8 - 1);
      }
      v5[1] = v25;
    }
    else
    {
      if (a4 == 1)
      {
        *a5 = *a1;
        return result;
      }
      if ((uint64_t)a4 <= 8)
      {
        std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, a2, a5, a3);
        return result;
      }
      v26 = a4 >> 1;
      v27 = a4 >> 1;
      v28 = &a1[v27];
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, &a1[v27], a3, a4 >> 1, a5, a4 >> 1);
      v74 = a4 >> 1;
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(&a1[v27], v8, a3, a4 - v26, &v5[v27], a4 - v26);
      v75 = a1;
      v76 = *(_QWORD *)a3;
      v29 = v5;
      v30 = a1;
      v31 = &a1[v27];
      do
      {
        if (v31 == v8)
        {
          if (v30 == v28)
            return result;
          v64 = (char *)&v75[v74] - (char *)v30 - 4;
          if (v64 >= 0x1C && (unint64_t)((char *)v29 - (char *)v30) >= 0x20)
          {
            v68 = 0;
            v69 = (v64 >> 2) + 1;
            v70 = v69 & 0x7FFFFFFFFFFFFFF8;
            v65 = &v5[v70];
            v66 = &v30[v70];
            v71 = v69 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v72 = &v5[v68];
              result = *(__n128 *)&v30[v68];
              v73 = *(_OWORD *)&v30[v68 + 4];
              *(__n128 *)v72 = result;
              *((_OWORD *)v72 + 1) = v73;
              v68 += 8;
              v71 -= 8;
            }
            while (v71);
            if (v69 == (v69 & 0x7FFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            v65 = v5;
            v66 = v30;
          }
          do
          {
            v67 = *v66++;
            *v65++ = v67;
          }
          while (v66 != v28);
          return result;
        }
        v32 = v31;
        v33 = *v31;
        v34 = *(_QWORD *)(v76 + 48) + *(_QWORD *)(v76 + 32);
        v35 = *v30;
        v36 = (unsigned int *)(v34 - v33 + *(unsigned __int16 *)(v34 - v33 - *(int *)(v34 - v33) + 4));
        v37 = (unsigned int *)((char *)v36 + *v36);
        v38 = (unsigned int *)(v34 - v35 + *(unsigned __int16 *)(v34 - v35 - *(int *)(v34 - v35) + 4));
        v39 = *v38;
        v42 = *v37;
        v40 = v37 + 1;
        v41 = v42;
        v43 = v8;
        v44 = *(unsigned int *)((char *)v38 + v39);
        if (v44 >= v42)
          v45 = v41;
        else
          v45 = v44;
        v46 = memcmp(v40, (char *)v38 + v39 + 4, v45);
        v47 = v41 >= v44;
        v8 = v43;
        v48 = !v47;
        v49 = v46 < 0;
        if (!v46)
          v49 = v48;
        if (v49)
          v50 = v33;
        else
          v50 = v35;
        v31 = &v32[v49];
        v30 += !v49;
        *v5++ = v50;
        ++v29;
      }
      while (v30 != v28);
      if (v31 != v43)
      {
        v51 = -4;
        if (!v49)
          v51 = 0;
        v52 = (char *)v43 - (char *)v32 + v51 - 4;
        if (v52 < 0x3C)
          goto LABEL_55;
        v53 = !v49;
        v54 = 4;
        if (v53)
          v54 = 0;
        if ((unint64_t)((char *)v29 - (char *)v32 - v54) < 0x20)
          goto LABEL_55;
        v55 = 0;
        v56 = (v52 >> 2) + 1;
        v57 = v56 & 0x7FFFFFFFFFFFFFF8;
        v58 = &v5[v57];
        v59 = &v31[v57];
        v60 = v56 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v61 = &v5[v55];
          result = *(__n128 *)&v31[v55];
          v62 = *(_OWORD *)&v31[v55 + 4];
          *(__n128 *)v61 = result;
          *((_OWORD *)v61 + 1) = v62;
          v55 += 8;
          v60 -= 8;
        }
        while (v60);
        v5 = v58;
        v31 = v59;
        if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_55:
          do
          {
            v63 = *v31++;
            *v5++ = v63;
          }
          while (v31 != v43);
        }
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  size_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  size_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  size_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  unsigned int v67;
  int64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  BOOL v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v90;
  void *__s1;
  void *__s1a;

  v90 = a6;
  if (a6)
  {
    v11 = (unsigned int *)result;
    while (1)
    {
      if (v90 <= a8 || a5 <= a8)
        return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>((uint64_t)v11, a2, a3, a4, a5, v90, a7);
      if (!a5)
        return result;
      v12 = *a2;
      v13 = *(_QWORD *)(*a4 + 48) + *(_QWORD *)(*a4 + 32);
      v14 = (unsigned int *)(v13 - v12 + *(unsigned __int16 *)(v13 - v12 - *(int *)(v13 - v12) + 4));
      v15 = *v14;
      v16 = (char *)v14 + v15 + 4;
      v17 = *(unsigned int *)((char *)v14 + v15);
      while (1)
      {
        v18 = *v11;
        v19 = (unsigned int *)(v13 - v18 + *(unsigned __int16 *)(v13 - v18 - *(int *)(v13 - v18) + 4));
        v20 = *v19;
        v21 = *(unsigned int *)((char *)v19 + v20);
        if (v21 >= v17)
          v22 = v17;
        else
          v22 = v21;
        result = memcmp(v16, (char *)v19 + v20 + 4, v22);
        v23 = v17 < v21;
        if ((_DWORD)result)
          v23 = (int)result < 0;
        if (v23)
          break;
        ++v11;
        if (!--a5)
          return result;
      }
      v24 = v90;
      v87 = a4;
      if (a5 >= v90)
      {
        if (a5 == 1)
        {
          *v11 = v12;
          *a2 = v18;
          return result;
        }
        if (a5 >= 0)
          v45 = a5;
        else
          v45 = a5 + 1;
        v84 = v45 >> 1;
        v26 = &v11[v45 >> 1];
        v25 = a3;
        if (a3 != a2)
        {
          v46 = a3 - a2;
          v47 = (unsigned int *)(v13 - *v26 + *(unsigned __int16 *)(v13 - *v26 - *(int *)(v13 - *v26) + 4));
          v48 = (unsigned int *)((char *)v47 + *v47);
          v49 = *v48;
          __s1a = v48 + 1;
          v25 = a2;
          do
          {
            v50 = &v25[v46 >> 1];
            v52 = *v50;
            v51 = v50 + 1;
            v53 = (unsigned int *)(v13 - v52 + *(unsigned __int16 *)(v13 - v52 - *(int *)(v13 - v52) + 4));
            v54 = *v53;
            v55 = *(unsigned int *)((char *)v53 + v54);
            if (v49 >= v55)
              v56 = v55;
            else
              v56 = v49;
            v57 = memcmp((char *)v53 + v54 + 4, __s1a, v56);
            v58 = v55 < v49;
            if (v57)
              v58 = v57 < 0;
            if (v58)
              v46 += ~(v46 >> 1);
            else
              v46 >>= 1;
            if (v58)
              v25 = v51;
          }
          while (v46);
        }
        v42 = v90;
        v41 = a2;
        v43 = v25 - a2;
        a4 = v87;
        v40 = v84;
        v44 = v25;
        if (v26 == a2)
          goto LABEL_66;
      }
      else
      {
        if (v90 < 0)
          v24 = v90 + 1;
        v83 = v24 >> 1;
        v25 = &a2[v24 >> 1];
        v26 = a2;
        if (v11 != a2)
        {
          v27 = a2 - v11;
          v28 = (unsigned int *)(v13 - *v25 + *(unsigned __int16 *)(v13 - *v25 - *(int *)(v13 - *v25) + 4));
          v29 = (unsigned int *)((char *)v28 + *v28);
          v30 = *v29;
          __s1 = v29 + 1;
          v26 = v11;
          do
          {
            v31 = &v26[v27 >> 1];
            v33 = *v31;
            v32 = v31 + 1;
            v34 = (unsigned int *)(v13 - v33 + *(unsigned __int16 *)(v13 - v33 - *(int *)(v13 - v33) + 4));
            v35 = *v34;
            v36 = *(unsigned int *)((char *)v34 + v35);
            if (v36 >= v30)
              v37 = v30;
            else
              v37 = v36;
            v38 = memcmp(__s1, (char *)v34 + v35 + 4, v37);
            v39 = v30 < v36;
            if (v38)
              v39 = v38 < 0;
            if (v39)
            {
              v27 >>= 1;
            }
            else
            {
              v26 = v32;
              v27 += ~(v27 >> 1);
            }
          }
          while (v27);
        }
        v40 = v26 - v11;
        a4 = v87;
        v42 = v90;
        v41 = a2;
        v43 = v83;
        v44 = v25;
        if (v26 == a2)
          goto LABEL_66;
      }
      v44 = v26;
      if (v41 == v25)
        goto LABEL_66;
      if (v26 + 1 == v41)
      {
        v85 = v40;
        v67 = *v26;
        v68 = (char *)v25 - (char *)v41;
        memmove(v26, v41, (char *)v25 - (char *)v41);
        v44 = (unsigned int *)((char *)v26 + v68);
        *v44 = v67;
        v40 = v85;
        a5 -= v85;
        v66 = v42 - v43;
        if (v85 + v43 >= a5 + v66)
          goto LABEL_79;
LABEL_67:
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(v11, v26, v44, a4, v40, v43, a7, a8);
        v11 = v44;
        v90 = v66;
        a2 = v25;
        if (!v66)
          return result;
      }
      else
      {
        if (v41 + 1 != v25)
        {
          v59 = v41 - v26;
          v60 = v25 - v41;
          if (v59 == v60)
          {
            v61 = 0;
            do
            {
              v62 = v26[v61];
              v26[v61] = v41[v61];
              v63 = (uint64_t)&v26[v61 + 1];
              v41[v61] = v62;
              v64 = (uint64_t)&v41[++v61];
            }
            while ((unsigned int *)v63 != v41 && v64 != (_QWORD)v25);
            v44 = v41;
            a5 -= v40;
            v66 = v42 - v43;
            if (v40 + v43 < a5 + v66)
              goto LABEL_67;
          }
          else
          {
            v70 = v25 - v41;
            v71 = v41 - v26;
            do
            {
              v72 = v71;
              v71 = v70;
              v70 = v72 % v70;
            }
            while (v70);
            if (v71)
            {
              v73 = &v26[v71];
              do
              {
                v75 = *--v73;
                v74 = v75;
                v76 = &v73[v59];
                v77 = v73;
                do
                {
                  v78 = v77;
                  v77 = v76;
                  *v78 = *v76;
                  v79 = v25 - v76;
                  v80 = __OFSUB__(v59, v79);
                  v82 = v59 - v79;
                  v81 = (v82 < 0) ^ v80;
                  v76 = &v26[v82];
                  if (v81)
                    v76 = &v77[v59];
                }
                while (v76 != v73);
                *v77 = v74;
              }
              while (v73 != v26);
            }
            v44 = &v26[v60];
            a5 -= v40;
            v66 = v42 - v43;
            if (v40 + v43 < a5 + v66)
              goto LABEL_67;
          }
          goto LABEL_79;
        }
        v86 = v40;
        v69 = *(v25 - 1);
        v44 = v26 + 1;
        if (v25 - 1 != v26)
          memmove(v26 + 1, v26, (char *)(v25 - 1) - (char *)v26);
        *v26 = v69;
        v40 = v86;
LABEL_66:
        a5 -= v40;
        v66 = v42 - v43;
        if (v40 + v43 < a5 + v66)
          goto LABEL_67;
LABEL_79:
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(v44, v25, a3, a4, a5, v66, a7, a8);
        a5 = v40;
        a3 = v44;
        v90 = v43;
        a2 = v26;
        if (!v43)
          return result;
      }
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  const void *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  size_t v21;
  _BOOL4 v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  const void *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  _BOOL4 v35;
  unsigned int v36;

  if (result != a2)
  {
    v5 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      v6 = 0;
      v7 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v8 = a3;
      v9 = a3;
      do
      {
        while (1)
        {
          v11 = *v9++;
          v10 = v11;
          v12 = *v5;
          v13 = (unsigned int *)(v7 - v12 + *(unsigned __int16 *)(v7 - v12 - *(int *)(v7 - v12) + 4));
          v14 = (unsigned int *)((char *)v13 + *v13);
          v15 = (unsigned int *)(v7 - v11 + *(unsigned __int16 *)(v7 - v11 - *(int *)(v7 - v11) + 4));
          v16 = *v15;
          v19 = *v14;
          v17 = v14 + 1;
          v18 = v19;
          v20 = *(unsigned int *)((char *)v15 + v16);
          if (v20 >= v19)
            v21 = v18;
          else
            v21 = v20;
          result = (unsigned int *)memcmp(v17, (char *)v15 + v16 + 4, v21);
          v22 = v18 < v20;
          if ((_DWORD)result)
            v22 = (int)result < 0;
          if (v22)
            break;
          *v9 = v12;
          ++v5;
          v6 += 4;
          v8 = v9;
          if (v5 == a2)
            return result;
        }
        v8[1] = v10;
        v23 = a3;
        if (v8 != a3)
        {
          v24 = v6;
          while (1)
          {
            v23 = (unsigned int *)((char *)a3 + v24);
            v25 = *(unsigned int *)((char *)a3 + v24 - 4);
            v26 = (unsigned int *)(v7 - *v5 + *(unsigned __int16 *)(v7 - *v5 - *(int *)(v7 - *v5) + 4));
            v27 = (unsigned int *)((char *)v26 + *v26);
            v28 = (unsigned int *)(v7 - v25 + *(unsigned __int16 *)(v7 - v25 - *(int *)(v7 - v25) + 4));
            v29 = *v28;
            v32 = *v27;
            v30 = v27 + 1;
            v31 = v32;
            v33 = *(unsigned int *)((char *)v28 + v29);
            v34 = v33 >= v32 ? v31 : v33;
            result = (unsigned int *)memcmp(v30, (char *)v28 + v29 + 4, v34);
            v35 = v31 < v33;
            if ((_DWORD)result)
              v35 = (int)result < 0;
            if (!v35)
              break;
            *v23 = v25;
            v24 -= 4;
            if (!v24)
            {
              v23 = a3;
              break;
            }
          }
        }
        v36 = *v5++;
        *v23 = v36;
        v6 += 4;
        v8 = v9;
      }
      while (v5 != a2);
    }
  }
  return result;
}

uint64_t std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(uint64_t __dst, unsigned int *a2, unsigned int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *__src)
{
  char *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  char *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int *v27;
  const void *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  char *v32;
  unsigned int v33;
  size_t v34;
  BOOL v35;
  _BOOL4 v36;
  BOOL v37;
  unsigned int v38;
  unint64_t v39;
  char *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int *v55;
  uint64_t v56;
  const void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  size_t v61;
  _BOOL4 v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  unsigned int *v74;
  uint64_t v76;
  uint64_t v77;

  v7 = __src;
  v8 = a3;
  v9 = a2;
  v10 = (unsigned int *)__dst;
  if (a5 <= a6)
  {
    if ((unsigned int *)__dst != a2)
    {
      v39 = (unint64_t)a2 - __dst - 4;
      v40 = __src;
      v41 = (unsigned int *)__dst;
      if (v39 < 0x1C)
        goto LABEL_60;
      v40 = __src;
      v41 = (unsigned int *)__dst;
      if ((unint64_t)&__src[-__dst] < 0x20)
        goto LABEL_60;
      v42 = (v39 >> 2) + 1;
      v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
      v40 = &__src[v43];
      v41 = (unsigned int *)(__dst + v43);
      v44 = (__int128 *)(__dst + 16);
      v45 = __src + 16;
      v46 = v42 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v47 = *v44;
        *(v45 - 1) = *(v44 - 1);
        *v45 = v47;
        v44 += 2;
        v45 += 2;
        v46 -= 8;
      }
      while (v46);
      if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_60:
        do
        {
          v48 = *v41++;
          *(_DWORD *)v40 = v48;
          v40 += 4;
        }
        while (v41 != a2);
      }
      if (v40 != __src)
      {
        v49 = *a4;
        while (v9 != v8)
        {
          v50 = *v9;
          v51 = *(_QWORD *)(v49 + 48) + *(_QWORD *)(v49 + 32);
          v52 = *(unsigned int *)v7;
          v53 = (unsigned int *)(v51 - v50 + *(unsigned __int16 *)(v51 - v50 - *(int *)(v51 - v50) + 4));
          v54 = (unsigned int *)((char *)v53 + *v53);
          v55 = (unsigned int *)(v51 - v52 + *(unsigned __int16 *)(v51 - v52 - *(int *)(v51 - v52) + 4));
          v56 = *v55;
          v59 = *v54;
          v57 = v54 + 1;
          v58 = v59;
          v60 = *(unsigned int *)((char *)v55 + v56);
          if (v60 >= v59)
            v61 = v58;
          else
            v61 = v60;
          __dst = memcmp(v57, (char *)v55 + v56 + 4, v61);
          v62 = v58 < v60;
          if ((_DWORD)__dst)
            v62 = (int)__dst < 0;
          if (v62)
            v63 = v50;
          else
            v63 = v52;
          v7 += 4 * !v62;
          v9 += v62;
          *v10++ = v63;
          if (v7 == v40)
            return __dst;
        }
        return (uint64_t)memmove(v10, v7, v40 - v7);
      }
    }
  }
  else if (a2 != a3)
  {
    v11 = (char *)a3 - (char *)a2 - 4;
    v12 = __src;
    v13 = a2;
    if (v11 < 0x1C)
      goto LABEL_61;
    v12 = __src;
    v13 = a2;
    if ((unint64_t)(__src - (char *)a2) < 0x20)
      goto LABEL_61;
    v14 = (v11 >> 2) + 1;
    v15 = v14 & 0x7FFFFFFFFFFFFFF8;
    v12 = &__src[v15 * 4];
    v13 = &a2[v15];
    v16 = (__int128 *)(a2 + 4);
    v17 = __src + 16;
    v18 = v14 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19 = *v16;
      *(v17 - 1) = *(v16 - 1);
      *v17 = v19;
      v16 += 2;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_61:
      do
      {
        v20 = *v13++;
        *(_DWORD *)v12 = v20;
        v12 += 4;
      }
      while (v13 != a3);
    }
    if (v12 != __src)
    {
      v21 = a3;
      while (v9 != v10)
      {
        v77 = *((unsigned int *)v12 - 1);
        v22 = *(_QWORD *)(*a4 + 48) + *(_QWORD *)(*a4 + 32);
        v76 = *(v9 - 1);
        v23 = (unsigned int *)(v22 - v77 + *(unsigned __int16 *)(v22 - v77 - *(int *)(v22 - v77) + 4));
        v24 = (unsigned int *)((char *)v23 + *v23);
        v25 = (unsigned int *)(v22 - v76 + *(unsigned __int16 *)(v22 - v76 - *(int *)(v22 - v76) + 4));
        v26 = *v25;
        v27 = v10;
        v30 = *v24;
        v28 = v24 + 1;
        v29 = v30;
        v31 = v8;
        v32 = v7;
        v33 = *(unsigned int *)((char *)v25 + v26);
        if (v33 >= v30)
          v34 = v29;
        else
          v34 = v33;
        __dst = memcmp(v28, (char *)v25 + v26 + 4, v34);
        v35 = v29 >= v33;
        v10 = v27;
        v7 = v32;
        v36 = !v35;
        if ((_DWORD)__dst)
          v36 = (int)__dst < 0;
        v37 = !v36;
        if (v36)
          v38 = v76;
        else
          v38 = v77;
        if (v37)
          v12 -= 4;
        else
          --v9;
        *(v31 - 1) = v38;
        v8 = v31 - 1;
        --v21;
        if (v12 == v7)
          return __dst;
      }
      v64 = v12 - v7 - 4;
      if (v64 < 0x2C || (unint64_t)(v12 - (char *)v21) < 0x20)
      {
        v65 = (unsigned int *)v12;
        v66 = v8;
LABEL_51:
        v67 = v66 - 1;
        do
        {
          v68 = *--v65;
          *v67-- = v68;
        }
        while (v65 != (unsigned int *)v7);
        return __dst;
      }
      v69 = 0;
      v70 = (v64 >> 2) + 1;
      v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
      v65 = (unsigned int *)&v12[-v71];
      v66 = &v8[v71 / 0xFFFFFFFFFFFFFFFCLL];
      v72 = v70 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v73 = *(_OWORD *)&v12[v69 * 4 - 16];
        v74 = &v8[v69];
        *((_OWORD *)v74 - 2) = *(_OWORD *)&v12[v69 * 4 - 32];
        *((_OWORD *)v74 - 1) = v73;
        v69 -= 8;
        v72 -= 8;
      }
      while (v72);
      if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_51;
    }
  }
  return __dst;
}

void sub_1910341D0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 329, a4);
}

void sub_1910341D8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 142, a4);
}

void sub_1910341E0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 138, a4);
}

void sub_1910341E8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 342, a4);
}

void sub_1910341F0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 344, a4);
}

void sub_1910341F8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1219, a4);
}

void sub_191034200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1910341F0("NotNested", "flatbuffer_builder.h", a3, "!num_field_loc");
}

void sub_191034224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1910341E8("NotNested", "flatbuffer_builder.h", a3, "!nested");
}

void sub_191034248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1910341E0("ensure_space", "vector_downward.h", a3, "cur_ >= scratch_ && scratch_ >= buf_");
}

void sub_19103426C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1910341D8("ensure_space", "vector_downward.h", a3, "size() < FLATBUFFERS_MAX_BUFFER_SIZE");
}

void sub_191034290()
{
  __assert_rtn("reallocate_downward", "allocator.h", 44, "new_size > old_size");
}

void sub_1910342B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1910341D0("ReferTo", "flatbuffer_builder.h", a3, "off && off <= size");
}

void sub_1910342DC()
{
  __assert_rtn("Finish", "flatbuffer_builder.h", 1133, "strlen(file_identifier) == kFileIdentifierLength");
}

void sub_191034304()
{
  __assert_rtn("EndTable", "flatbuffer_builder.h", 360, "nested");
}

void sub_19103432C()
{
  __assert_rtn("EndTable", "flatbuffer_builder.h", 375, "table_object_size < 0x10000");
}

void sub_191034354()
{
  __assert_rtn("data", "vector_downward.h", 167, "cur_");
}

void sub_19103437C()
{
  __assert_rtn("scratch_end", "vector_downward.h", 177, "scratch_");
}

void sub_1910343A4()
{
  __assert_rtn("scratch_data", "vector_downward.h", 172, "buf_");
}

void sub_1910343CC()
{
  __assert_rtn("EndTable", "flatbuffer_builder.h", 386, "!ReadScalar<voffset_t>(buf_.data() + field_location->id)");
}

void sub_1910343F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1910341F8("Required", "flatbuffer_builder.h", a3, "ok");
}

void sub_191034418()
{
  __assert_rtn("EndVector", "flatbuffer_builder.h", 588, "nested");
}

unint64_t E5RT::SerializerUtils::StringPairHash::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;
  char v14;
  char v15;

  v2 = a2;
  v13 = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v4 = v3;
  }
  v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v14, (uint64_t *)a2, v4);
  v7 = *(uint64_t **)(v2 + 24);
  v6 = v2 + 24;
  v5 = v7;
  v8 = *(char *)(v6 + 23);
  if (v8 >= 0)
    v9 = (uint64_t *)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  v11 = (unint64_t *)std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v15, v9, v10);
  E5Common::HashCombine(&v13, v11);
  return v13;
}

uint64_t E5RT::SerializerUtils::GetOperandSymbolFlags(E5RT::SerializerUtils *this, const E5RT::E5Operand *a2)
{
  uint64_t result;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  switch((*(unsigned int (**)(E5RT::SerializerUtils *, const E5RT::E5Operand *))(*(_QWORD *)this + 40))(this, a2))
  {
    case 0u:
      result = 10;
      break;
    case 1u:
      result = 17;
      break;
    case 2u:
      result = 18;
      break;
    case 3u:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v6, "GetOperandSymbolFlags");
      std::string::basic_string[abi:ne180100]<0>(v4, "Unsupported allocation type for operand.");
      E5RT::Status::Status(v5, 1, v4);
      E5RT::E5RTError::E5RTError(exception, v6, v5);
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_1910345DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::SerializerUtils::GetOperandSectionDetails(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  int v8;
  char *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type size;
  std::string *v23;
  std::string *v24;
  void *v25;
  void *exception;
  _QWORD v27[3];
  char v28[8];
  std::string __p;
  void *v30;
  std::string *v31;
  unint64_t v32;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    case 0u:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "extern");
      v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
      v31 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v12 = v31;
        if ((a2 & 1) == 0)
          goto LABEL_31;
      }
      else if ((a2 & 1) == 0)
      {
        goto LABEL_31;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&__p, "in");
      if ((unint64_t)v12 >= v32)
      {
        v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
        v31 = v12;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          v12 = v31;
        }
      }
      else
      {
        v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v12->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        v31 = ++v12;
      }
LABEL_31:
      if ((a2 & 2) != 0)
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
        LODWORD(__p.__r_.__value_.__l.__data_) = 7632239;
        if ((unint64_t)v12 >= v32)
        {
          v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
          v31 = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            v12 = v31;
          }
        }
        else
        {
          v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v12->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v17;
          v31 = ++v12;
        }
      }
      if ((unint64_t)v12 >= v32)
      {
        v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v30, a3);
      }
      else
      {
        if (*(char *)(a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        }
        else
        {
          v18 = *(_OWORD *)a3;
          v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v18;
        }
        v7 = v12 + 1;
      }
      v31 = v7;
      v8 = 4;
      goto LABEL_43;
    case 1u:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__p, "data");
      v14 = std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
      v15 = (std::string *)v14;
      v31 = (std::string *)v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v15 = v31;
        if ((unint64_t)v31 < v32)
        {
LABEL_19:
          if (*(char *)(a3 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
          }
          else
          {
            v16 = *(_OWORD *)a3;
            v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          v7 = v15 + 1;
LABEL_27:
          v31 = v7;
          a2 = 3;
          v8 = 3;
          goto LABEL_43;
        }
      }
      else if ((unint64_t)v14 < v32)
      {
        goto LABEL_19;
      }
      v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v30, a3);
      goto LABEL_27;
    case 2u:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "dynamic");
      v9 = std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
      v10 = (std::string *)v9;
      v31 = (std::string *)v9;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((unint64_t)v9 < v32)
          goto LABEL_10;
LABEL_4:
        v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v30, a3);
        goto LABEL_25;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v10 = v31;
      if ((unint64_t)v31 >= v32)
        goto LABEL_4;
LABEL_10:
      if (*(char *)(a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        v11 = *(_OWORD *)a3;
        v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      v7 = v10 + 1;
LABEL_25:
      v31 = v7;
      a2 = 1;
      v8 = 1;
LABEL_43:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
      LOWORD(__p.__r_.__value_.__l.__data_) = 95;
      v19 = (std::string *)v30;
      if (v30 != v7)
      {
        do
        {
          std::string::append(&__p, "_");
          v20 = SHIBYTE(v19->__r_.__value_.__r.__words[2]);
          if (v20 >= 0)
            v21 = (const std::string::value_type *)v19;
          else
            v21 = (const std::string::value_type *)v19->__r_.__value_.__r.__words[0];
          if (v20 >= 0)
            size = HIBYTE(v19->__r_.__value_.__r.__words[2]);
          else
            size = v19->__r_.__value_.__l.__size_;
          std::string::append(&__p, v21, size);
          ++v19;
        }
        while (v19 != v7);
      }
      std::string::append(&__p, "__");
      *(std::string *)a4 = __p;
      *(_DWORD *)(a4 + 24) = v8;
      *(_QWORD *)(a4 + 32) = a2;
      *(_BYTE *)(a4 + 40) = 0;
      v23 = (std::string *)v30;
      if (v30)
      {
        v24 = v31;
        v25 = v30;
        if (v31 != v30)
        {
          do
          {
            if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v24[-1].__r_.__value_.__l.__data_);
            --v24;
          }
          while (v24 != v23);
          v25 = v30;
        }
        v31 = v23;
        operator delete(v25);
      }
      return;
    case 3u:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "GetOperandSectionDetails");
      std::string::basic_string[abi:ne180100]<0>(v27, "Unsupported allocation type for operand.");
      E5RT::Status::Status(v28, 1, v27);
      E5RT::E5RTError::E5RTError(exception, &__p, v28);
    default:
      a2 = 0;
      v8 = 0;
      v7 = v31;
      goto LABEL_43;
  }
}

void sub_191034B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::vector<std::string>::~vector[abi:ne180100](&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  std::vector<std::string>::~vector[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SerializerUtils::SerializeTensorDataTypeToFlatbuffer(uint64_t a1, E5RT::TensorDataType *this)
{
  int v4;
  unsigned int ComponentDataType;
  int ComponentSize;
  char NumComponents;
  char v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  void *exception;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _BYTE v18[24];
  _BYTE v19[8];
  _QWORD v20[3];
  void *__p[2];
  char v22;

  if (*(_BYTE *)(a1 + 78))
    sub_191035EEC();
  if (*(_DWORD *)(a1 + 72))
    sub_191035EC4();
  *(_BYTE *)(a1 + 78) = 1;
  v4 = *(_DWORD *)(a1 + 40);
  ComponentDataType = E5RT::TensorDataType::GetComponentDataType(this);
  if (ComponentDataType >= 5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "SerializeTensorDataTypeToFlatbuffer");
    std::operator+<char>();
    E5RT::Status::Status(v18, 5, v20);
    E5RT::E5RTError::E5RTError(exception, __p, v18);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, ComponentDataType, 0);
  ComponentSize = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType::Impl **)this);
  NumComponents = E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)this);
  std::operator+<char>();
  switch(ComponentSize)
  {
    case 4:
      v8 = NumComponents - 1;
      if ((NumComponents - 1) >= 8u || ((0x8Bu >> v8) & 1) == 0)
      {
        v15 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v20, "SerializeTensorDataTypeToFlatbuffer");
        E5RT::Status::Status(v18, 5, __p);
        E5RT::E5RTError::E5RTError(v15, v20, v18);
      }
      v9 = (unsigned int *)&unk_191A8498C;
      break;
    case 2:
      v8 = NumComponents - 1;
      if ((NumComponents - 1) >= 8u || ((0x8Bu >> v8) & 1) == 0)
      {
        v14 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v20, "SerializeTensorDataTypeToFlatbuffer");
        E5RT::Status::Status(v18, 5, __p);
        E5RT::E5RTError::E5RTError(v14, v20, v18);
      }
      v9 = (unsigned int *)&unk_191A8496C;
      break;
    case 1:
      v8 = NumComponents - 1;
      if ((NumComponents - 1) >= 8u || ((0x8Bu >> v8) & 1) == 0)
      {
        v16 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v20, "SerializeTensorDataTypeToFlatbuffer");
        E5RT::Status::Status(v18, 5, __p);
        E5RT::E5RTError::E5RTError(v16, v20, v18);
      }
      v9 = (unsigned int *)&unk_191A8494C;
      break;
    default:
      v17 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v20, "SerializeTensorDataTypeToFlatbuffer");
      std::operator+<char>();
      E5RT::Status::Status(v19, 5, v18);
      E5RT::E5RTError::E5RTError(v17, v20, v19);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 6, v9[v8], 0);
  v11 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v4, v10);
  if (v22 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_191035018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v28 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v28)
  {
LABEL_8:
    if (a27 < 0)
      operator delete(a22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t E5RT::SerializerUtils::SerializeTensorDescriptorToFlatbuffer(flatbuffers::FlatBufferBuilder *a1, E5RT::TensorDescriptor *this)
{
  uint64_t TensorShape;
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t TensorStrides;
  uint64_t *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  int v73;
  void *v74;
  int v75;
  void *v76;
  int v77;
  E5RT::TensorDataType *TensorDataTypeRef;
  int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t ComponentAxis;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t Size;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  const char *v96;
  int v97;
  const char *v98;
  uint64_t v99;
  flatbuffers::FlatBufferBuilder *v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  uint64_t **v105;
  std::__shared_weak_count *v106;
  void *__p;
  char *v108;
  char *v109;
  void *v110;
  _BYTE *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;

  v113 = 0;
  v114 = 0;
  v115 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  __p = 0;
  v108 = 0;
  v109 = 0;
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v5 = *(uint64_t **)TensorShape;
  v4 = *(uint64_t **)(TensorShape + 8);
  v101 = a1;
  if (*(uint64_t **)TensorShape != v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v114;
    while (1)
    {
      while (1)
      {
        v10 = *v5;
        if (v6 >= v7)
          break;
        *(_QWORD *)v6 = v10;
        v6 += 8;
        v9 = (uint64_t)v6;
        if (++v5 == v4)
          goto LABEL_33;
      }
      v11 = (v6 - v8) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
      {
        v114 = v9;
        v115 = v7;
        v113 = v8;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((v7 - v8) >> 2 > v12)
        v12 = (v7 - v8) >> 2;
      if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        if (v13 >> 61)
        {
          v114 = v9;
          v115 = v7;
          v113 = v8;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v14 = operator new(8 * v13);
        v15 = &v14[8 * v11];
        *(_QWORD *)v15 = v10;
        v9 = (uint64_t)(v15 + 8);
        if (v6 == v8)
          goto LABEL_19;
      }
      else
      {
        v14 = 0;
        v15 = (char *)(8 * v11);
        *(_QWORD *)(8 * v11) = v10;
        v9 = 8 * v11 + 8;
        if (v6 == v8)
          goto LABEL_19;
      }
      v16 = v6 - 8 - v8;
      if (v16 >= 0x168)
      {
        if (&v14[v6 - v8 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[v6 - v8 - 8])
        {
          v17 = v6;
        }
        else if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
        {
          v17 = v6;
        }
        else if ((unint64_t)(v8 - v14) >= 0x20)
        {
          v20 = (v16 >> 3) + 1;
          v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v17 = &v6[-v21];
          v15 -= v21;
          v22 = &v14[8 * v11 - 16];
          v23 = v6 - 16;
          v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            *v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_19;
        }
        else
        {
          v17 = v6;
        }
      }
      else
      {
        v17 = v6;
      }
      do
      {
        v18 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v17 != v8);
LABEL_19:
      v7 = &v14[8 * v13];
      if (v8)
      {
        v19 = v9;
        operator delete(v8);
        v9 = v19;
      }
      v8 = v15;
      ++v5;
      v6 = (char *)v9;
      if (v5 == v4)
      {
LABEL_33:
        v99 = v9;
        v114 = v9;
        v115 = v7;
        goto LABEL_35;
      }
    }
  }
  v99 = 0;
  v8 = 0;
LABEL_35:
  v113 = v8;
  TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(this);
  v28 = *(uint64_t **)TensorStrides;
  v27 = *(uint64_t **)(TensorStrides + 8);
  if (*(uint64_t **)TensorStrides == v27)
  {
    v31 = 0;
    goto LABEL_69;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = (uint64_t)v111;
  v102 = *(uint64_t **)(TensorStrides + 8);
  do
  {
    while (1)
    {
      v33 = *v28;
      if (v29 >= v30)
        break;
      *(_QWORD *)v29 = v33;
      v29 += 8;
      v32 = (uint64_t)v29;
      if (++v28 == v27)
        goto LABEL_67;
    }
    v34 = (v29 - v31) >> 3;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
    {
      v111 = (_BYTE *)v32;
      v112 = v30;
      v110 = v31;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v30 - v31) >> 2 > v35)
      v35 = (v30 - v31) >> 2;
    if ((unint64_t)(v30 - v31) >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
    {
      if (v36 >> 61)
      {
        v111 = (_BYTE *)v32;
        v112 = v30;
        v110 = v31;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v34];
      *(_QWORD *)v38 = v33;
      v32 = (uint64_t)(v38 + 8);
      if (v29 == v31)
        goto LABEL_53;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v34);
      *(_QWORD *)(8 * v34) = v33;
      v32 = 8 * v34 + 8;
      if (v29 == v31)
        goto LABEL_53;
    }
    v39 = v29 - 8 - v31;
    if (v39 < 0x168)
    {
      v40 = v29;
      goto LABEL_52;
    }
    if (&v37[v29 - v31 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v37[v29 - v31 - 8])
    {
      v40 = v29;
      do
      {
LABEL_52:
        v41 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v38 - 1) = v41;
        v38 -= 8;
      }
      while (v40 != v31);
      goto LABEL_53;
    }
    if (&v29[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v29 - 8)
    {
      v40 = v29;
      goto LABEL_52;
    }
    if ((unint64_t)(v31 - v37) < 0x20)
    {
      v40 = v29;
      goto LABEL_52;
    }
    v42 = (v39 >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v40 = &v29[-v43];
    v38 -= v43;
    v44 = &v37[8 * v34 - 16];
    v45 = v29 - 16;
    v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v47 = *(_OWORD *)v45;
      *(v44 - 1) = *((_OWORD *)v45 - 1);
      *v44 = v47;
      v44 -= 2;
      v45 -= 32;
      v46 -= 4;
    }
    while (v46);
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_52;
LABEL_53:
    v30 = &v37[8 * v36];
    if (v31)
      operator delete(v31);
    v31 = v38;
    v27 = v102;
    ++v28;
    v29 = (char *)v32;
  }
  while (v28 != v102);
LABEL_67:
  v111 = (_BYTE *)v32;
  v112 = v30;
LABEL_69:
  v110 = v31;
  E5RT::TensorDescriptor::TryGetDefaultTensorShape((uint64_t)this, &v105);
  v48 = (uint64_t)v101;
  v49 = v99;
  if (!v105 || (v50 = *v105, v51 = v105[1], *v105 == v51))
  {
    v54 = 0;
    goto LABEL_104;
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  while (2)
  {
    while (1)
    {
      v55 = *v50;
      if (v54 >= v53)
        break;
      *(_QWORD *)v54 = v55;
      v54 += 8;
      v108 = v54;
      if (++v50 == v51)
        goto LABEL_103;
    }
    v56 = (v54 - v52) >> 3;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    if ((v53 - v52) >> 2 > v57)
      v57 = (v53 - v52) >> 2;
    if ((unint64_t)(v53 - v52) >= 0x7FFFFFFFFFFFFFF8)
      v58 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v58 = v57;
    if (!v58)
    {
      v59 = 0;
      v60 = (_QWORD *)(8 * v56);
      *(_QWORD *)(8 * v56) = v55;
      v61 = 8 * v56 + 8;
      if (v54 == v52)
        goto LABEL_88;
LABEL_85:
      v62 = v54 - 8 - v52;
      if (v62 >= 0x168)
      {
        if (&v59[v54 - v52 - 8 - (v62 & 0xFFFFFFFFFFFFFFF8)] > &v59[v54 - v52 - 8])
        {
          v63 = v54;
        }
        else if (&v54[-(v62 & 0xFFFFFFFFFFFFFFF8) - 8] > v54 - 8)
        {
          v63 = v54;
        }
        else if ((unint64_t)(v52 - v59) >= 0x20)
        {
          v65 = (v62 >> 3) + 1;
          v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          v63 = &v54[-v66];
          v60 = (_QWORD *)((char *)v60 - v66);
          v67 = &v59[8 * v56 - 16];
          v68 = v54 - 16;
          v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v70 = *(_OWORD *)v68;
            *(v67 - 1) = *((_OWORD *)v68 - 1);
            *v67 = v70;
            v67 -= 2;
            v68 -= 32;
            v69 -= 4;
          }
          while (v69);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_88;
        }
        else
        {
          v63 = v54;
        }
      }
      else
      {
        v63 = v54;
      }
      do
      {
        v64 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *--v60 = v64;
      }
      while (v63 != v52);
      goto LABEL_88;
    }
    if (v58 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v59 = operator new(8 * v58);
    v60 = &v59[8 * v56];
    *v60 = v55;
    v61 = (uint64_t)(v60 + 1);
    if (v54 != v52)
      goto LABEL_85;
LABEL_88:
    v53 = &v59[8 * v58];
    __p = v60;
    v108 = (char *)v61;
    v109 = v53;
    if (v52)
      operator delete(v52);
    v52 = (char *)v60;
    v54 = (char *)v61;
    v48 = (uint64_t)v101;
    v108 = (char *)v61;
    if (++v50 != v51)
      continue;
    break;
  }
LABEL_103:
  v49 = v114;
LABEL_104:
  v71 = v49 - (_QWORD)v113;
  if (v71)
    v72 = v113;
  else
    v72 = (char *)&flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  v73 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((flatbuffers::FlatBufferBuilder *)v48, v72, v71 >> 3);
  if (v111 == v110)
    v74 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  else
    v74 = v110;
  v75 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((flatbuffers::FlatBufferBuilder *)v48, v74, (v111 - (_BYTE *)v110) >> 3);
  if (v54 == __p)
    v76 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  else
    v76 = __p;
  v77 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((flatbuffers::FlatBufferBuilder *)v48, v76, (v54 - (_BYTE *)__p) >> 3);
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v79 = E5RT::SerializerUtils::SerializeTensorDataTypeToFlatbuffer(v48, TensorDataTypeRef);
  v103 = v48;
  if (*(_BYTE *)(v48 + 78))
  {
    v96 = "!nested";
    v97 = 342;
LABEL_145:
    v98 = "NotNested";
    goto LABEL_146;
  }
  if (*(_DWORD *)(v48 + 72))
  {
    v96 = "!num_field_loc";
    v97 = 344;
    goto LABEL_145;
  }
  v81 = v79;
  *(_BYTE *)(v48 + 78) = 1;
  v104 = *(_DWORD *)(v48 + 40);
  if (!v73)
    goto LABEL_118;
  flatbuffers::FlatBufferBuilder::Align((char *)v48, 4uLL, v80);
  v82 = *(_DWORD *)(v48 + 40);
  if (v73 - 1 >= v82)
    goto LABEL_142;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v48, 6, v82 - v73 + 4, 0);
LABEL_118:
  if (v75)
  {
    flatbuffers::FlatBufferBuilder::Align((char *)v48, 4uLL, v80);
    v83 = *(_DWORD *)(v48 + 40);
    if (v75 - 1 < v83)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v48, 8, v83 - v75 + 4, 0);
      goto LABEL_121;
    }
LABEL_142:
    v96 = "off && off <= size";
    v97 = 329;
    v98 = "ReferTo";
LABEL_146:
    __assert_rtn(v98, "flatbuffer_builder.h", v97, v96);
  }
LABEL_121:
  ComponentAxis = E5RT::TensorDescriptor::GetComponentAxis(this);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v48, 12, ComponentAxis, 0);
  if (v81)
  {
    flatbuffers::FlatBufferBuilder::Align((char *)v48, 4uLL, v85);
    v86 = *(_DWORD *)(v48 + 40);
    if (v81 - 1 >= v86)
      goto LABEL_142;
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v48, 4, v86 - v81 + 4, 0);
  }
  if (v77)
  {
    flatbuffers::FlatBufferBuilder::Align((char *)v48, 4uLL, v85);
    v87 = *(_DWORD *)(v48 + 40);
    if (v77 - 1 >= v87)
      goto LABEL_142;
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v48, 14, v87 - v77 + 4, 0);
  }
  if (E5RT::TensorDescriptor::HasKnownShape(this))
    Size = E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)this);
  else
    Size = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v48, 10, Size, 0);
  v91 = BlockBuilder::Finish((BlockBuilder *)&v103, v89, v90);
  v92 = v106;
  if (v106)
  {
    p_shared_owners = (unint64_t *)&v106->__shared_owners_;
    do
      v94 = __ldaxr(p_shared_owners);
    while (__stlxr(v94 - 1, p_shared_owners));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (__p)
    operator delete(__p);
  if (v110)
    operator delete(v110);
  if (v113)
    operator delete(v113);
  return v91;
}

void sub_191035A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v25 = a21;
    if (!a21)
    {
LABEL_3:
      v26 = *(void **)(v23 - 104);
      if (!v26)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v25 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v25;
  operator delete(v25);
  v26 = *(void **)(v23 - 104);
  if (!v26)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  *(_QWORD *)(v23 - 96) = v26;
  operator delete(v26);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SerializerUtils::SerializeSurfaceDescriptorToFlatbuffer(E5RT::SerializerUtils *this, flatbuffers::FlatBufferBuilder *a2, const E5RT::SurfaceDescriptor *a3)
{
  E5RT::SurfaceDescriptor *v3;
  uint64_t CustomRowStrides;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  uint64_t SurfaceWidth;
  uint64_t SurfaceHeight;
  uint64_t SurfaceFormat;
  uint64_t v34;
  unsigned int v35;
  uint64_t SurfaceSliceCount;
  uint64_t v37;
  uint64_t v38;
  const char *v40;
  int v41;
  const char *v42;
  E5RT::SurfaceDescriptor *v43;
  uint64_t *v44;
  char *__p;

  v3 = a2;
  CustomRowStrides = E5RT::SurfaceDescriptor::TryGetCustomRowStrides(a2);
  v7 = *(uint64_t **)CustomRowStrides;
  v6 = *(uint64_t **)(CustomRowStrides + 8);
  if (*(uint64_t **)CustomRowStrides != v6)
  {
    v43 = v3;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v44 = *(uint64_t **)(CustomRowStrides + 8);
    while (1)
    {
      while (1)
      {
        v12 = *v7;
        if (v8 >= v9)
          break;
        *(_QWORD *)v8 = v12;
        v8 += 8;
        v11 = (uint64_t)v8;
        if (++v7 == v6)
          goto LABEL_33;
      }
      v13 = (v8 - v10) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if ((v9 - v10) >> 2 > v14)
        v14 = (v9 - v10) >> 2;
      if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = operator new(8 * v15);
        v17 = &v16[8 * v13];
        *(_QWORD *)v17 = v12;
        v11 = (uint64_t)(v17 + 8);
        if (v8 == v10)
          goto LABEL_19;
      }
      else
      {
        v16 = 0;
        v17 = (char *)(8 * v13);
        *(_QWORD *)(8 * v13) = v12;
        v11 = 8 * v13 + 8;
        if (v8 == v10)
          goto LABEL_19;
      }
      v18 = v8 - 8 - v10;
      if (v18 >= 0x168)
      {
        if (&v16[v8 - v10 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v8 - v10 - 8])
        {
          v19 = v8;
        }
        else if (&v8[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
        {
          v19 = v8;
        }
        else if ((unint64_t)(v10 - v16) >= 0x20)
        {
          v21 = (v18 >> 3) + 1;
          v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          v19 = &v8[-v22];
          v17 -= v22;
          v23 = &v16[8 * v13 - 16];
          v24 = v8 - 16;
          v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_19;
        }
        else
        {
          v19 = v8;
        }
      }
      else
      {
        v19 = v8;
      }
      do
      {
        v20 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v20;
        v17 -= 8;
      }
      while (v19 != v10);
LABEL_19:
      v9 = &v16[8 * v15];
      if (v10)
        operator delete(v10);
      v10 = v17;
      v6 = v44;
      ++v7;
      v8 = (char *)v11;
      if (v7 == v44)
      {
LABEL_33:
        v3 = v43;
        goto LABEL_35;
      }
    }
  }
  v11 = 0;
  v10 = 0;
LABEL_35:
  __p = v10;
  if ((char *)v11 == v10)
    v27 = (char *)&flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  else
    v27 = v10;
  v28 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v27, (v11 - (uint64_t)v10) >> 3);
  if (*((_BYTE *)this + 78))
  {
    v40 = "!nested";
    v41 = 342;
    v42 = "NotNested";
    goto LABEL_49;
  }
  if (*((_DWORD *)this + 18))
  {
    v40 = "!num_field_loc";
    v41 = 344;
    v42 = "NotNested";
    goto LABEL_49;
  }
  v29 = v28;
  *((_BYTE *)this + 78) = 1;
  v30 = *((_DWORD *)this + 10);
  SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 6, SurfaceWidth, 0);
  SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 8, SurfaceHeight, 0);
  SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, SurfaceFormat, 0);
  if (!v29)
    goto LABEL_43;
  flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v34);
  v35 = *((_DWORD *)this + 10);
  if (v29 - 1 >= v35)
  {
    v40 = "off && off <= size";
    v41 = 329;
    v42 = "ReferTo";
LABEL_49:
    __assert_rtn(v42, "flatbuffer_builder.h", v41, v40);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 10, v35 - v29 + 4, 0);
LABEL_43:
  SurfaceSliceCount = E5RT::SurfaceDescriptor::GetSurfaceSliceCount(v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 12, SurfaceSliceCount, 1);
  v38 = flatbuffers::FlatBufferBuilder::EndTable(this, v30, v37);
  if (__p)
    operator delete(__p);
  return v38;
}

void sub_191035E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191035EC4()
{
  __assert_rtn("NotNested", "flatbuffer_builder.h", 344, "!num_field_loc");
}

void sub_191035EEC()
{
  __assert_rtn("NotNested", "flatbuffer_builder.h", 342, "!nested");
}

uint64_t E5Common::MinimalCpu::Matcher::MakeOutputNameToOpMap@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRNamedValueType *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 *Name;

  v4 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  while (1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (v4 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 4)
      break;
    v6 = *(_QWORD *)(**(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) + 16 * v4);
    v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
    v8 = *v7;
    v9 = v7[1];
    while (v8 != v9)
    {
      v10 = *(MIL::IRNamedValueType **)v8;
      v11 = *(std::__shared_weak_count **)(v8 + 8);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      Name = (__int128 *)MIL::IRNamedValueType::GetName(v10);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)Name, (uint64_t)&std::piecewise_construct, &Name)[5] = v4;
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v8 += 16;
    }
    ++v4;
  }
  return result;
}

void sub_191036058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19103606C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191036080(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191036094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

BOOL E5Common::MinimalCpu::Matcher::OpTypeIs(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  void **v7;
  uint64_t v8;
  __int128 v9;
  _QWORD **v10;
  __int128 v11;
  _BOOL8 v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void **v18;
  void *v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  void *__p;
  void **v25;

  (*(void (**)(void **__return_ptr))(**a1 + 24))(&__p);
  v6 = (void **)__p;
  v7 = v25;
  if (__p == v25)
  {
    v12 = 0;
    if (__p)
      goto LABEL_28;
    return v12;
  }
  v8 = 16 * a2;
  do
  {
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v23, (const std::string::value_type *)*v6, (std::string::size_type)v6[1]);
    }
    else
    {
      v9 = *(_OWORD *)v6;
      v23.__r_.__value_.__r.__words[2] = (std::string::size_type)v6[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
    }
    MIL::MILContext::GetOpset();
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v23.__r_.__value_.__l.__data_);
      if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      {
LABEL_8:
        v23 = *(std::string *)a3;
        goto LABEL_11;
      }
    }
    else if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_11:
    MIL::IROpset::TryGetOperatorSharedPtr();
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v10 = (_QWORD **)(*(uint64_t (**)(_QWORD *))(*a1[1] + 56))(a1[1]);
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(**v10 + v8) + 80))(&v23);
    v11 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
    v12 = v21 == v23.__r_.__value_.__r.__words[0];
    if (!v23.__r_.__value_.__l.__size_)
      goto LABEL_17;
    v13 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
      v15 = v22;
      if (!v22)
        goto LABEL_23;
    }
    else
    {
LABEL_17:
      v15 = v22;
      if (!v22)
        goto LABEL_23;
    }
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_23:
    if (v21 == (_QWORD)v11)
      break;
    v6 += 3;
  }
  while (v6 != v7);
  v6 = (void **)__p;
  if (!__p)
    return v12;
LABEL_28:
  v18 = v25;
  v19 = v6;
  if (v25 != v6)
  {
    do
    {
      if (*((char *)v18 - 1) < 0)
        operator delete(*(v18 - 3));
      v18 -= 3;
    }
    while (v18 != v6);
    v19 = __p;
  }
  v25 = v6;
  operator delete(v19);
  return v12;
}

void sub_1910362DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1910362F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_191036304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void E5Common::MinimalCpu::Matcher::TensorShape(const MIL::IRValueType *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;

  if (!a1 || (v4 = (*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a1 + 24))(a1)) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (*(_QWORD **)v5 != v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      while (1)
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6);
        if (!v12)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          if (v8)
            operator delete(v8);
          return;
        }
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
        v14 = v13;
        if (v10 >= v9)
          break;
        *v10++ = v13;
        v11 = (uint64_t)v10;
        if (++v6 == v7)
          goto LABEL_38;
      }
      v15 = v10 - v8;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (((char *)v9 - (char *)v8) >> 2 > v16)
        v16 = ((char *)v9 - (char *)v8) >> 2;
      if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        if (v17 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v18 = operator new(8 * v17);
        v19 = (uint64_t *)&v18[8 * v15];
        *v19 = v14;
        v11 = (uint64_t)(v19 + 1);
        if (v10 == v8)
          goto LABEL_22;
      }
      else
      {
        v18 = 0;
        v19 = (uint64_t *)(8 * v15);
        *(_QWORD *)(8 * v15) = v14;
        v11 = 8 * v15 + 8;
        if (v10 == v8)
          goto LABEL_22;
      }
      v20 = (char *)(v10 - 1) - (char *)v8;
      if (v20 < 0x168)
      {
        v21 = v10;
        goto LABEL_21;
      }
      if (&v18[(char *)v10 - (char *)v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[(char *)v10 - (char *)v8 - 8])
        break;
      if ((uint64_t *)((char *)v10 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8) > v10 - 1)
      {
        v21 = v10;
        goto LABEL_21;
      }
      if ((unint64_t)((char *)v8 - v18) < 0x20)
      {
        v21 = v10;
        goto LABEL_21;
      }
      v23 = (v20 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v21 = &v10[v24 / 0xFFFFFFFFFFFFFFF8];
      v19 = (uint64_t *)((char *)v19 - v24);
      v25 = &v18[8 * v15 - 16];
      v26 = v10 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *v25 = v28;
        v25 -= 2;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_21;
LABEL_22:
      v9 = (uint64_t *)&v18[8 * v17];
      if (v8)
        operator delete(v8);
      v8 = v19;
      ++v6;
      v10 = (uint64_t *)v11;
      if (v6 == v7)
        goto LABEL_38;
    }
    v21 = v10;
    do
    {
LABEL_21:
      v22 = *--v21;
      *--v19 = v22;
    }
    while (v21 != v8);
    goto LABEL_22;
  }
  v9 = 0;
  v11 = 0;
  v8 = 0;
LABEL_38:
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = 1;
}

void sub_1910365E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void E5Common::MinimalCpu::Matcher::TensorBufferInterleaveFactors(const MIL::IRValueType *a1@<X1>, uint64_t a2@<X8>)
{
  MIL::IRMemoryLayoutValueType *v4;
  MIL::IRTensorBufferValueType *v5;
  uint64_t InterleaveFactors;
  MIL::IRProperty **v7;
  MIL::IRProperty **v8;
  char *v9;
  MIL::IRConstantProperty *v10;
  char UInt8ScalarValue;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  unint64_t v23;
  char *v24;
  __int128 *v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *__p;
  char *v35;

  if (!a1
    || (v4 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(a1)) == 0
    || (v5 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v4)) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v5);
  __p = 0;
  v35 = 0;
  v7 = *(MIL::IRProperty ***)InterleaveFactors;
  v8 = *(MIL::IRProperty ***)(InterleaveFactors + 8);
  if (*(MIL::IRProperty ***)InterleaveFactors != v8)
  {
    v9 = 0;
    while (1)
    {
      while (1)
      {
        v10 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(*v7);
        if (!v10)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          if (__p)
            operator delete(__p);
          return;
        }
        UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue(v10);
        v12 = UInt8ScalarValue;
        if (v9 >= v35)
          break;
        *v9++ = UInt8ScalarValue;
        if (++v7 == v8)
          goto LABEL_47;
      }
      v13 = v9 - __p;
      v14 = v9 - __p + 1;
      if (v14 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v15 = v35 - __p;
      if (2 * (v35 - __p) > (unint64_t)v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)operator new(v16);
        v18 = &v17[v13];
        v17[v13] = v12;
        v19 = (uint64_t)&v17[v13 + 1];
        if (v9 != __p)
          goto LABEL_17;
      }
      else
      {
        v17 = 0;
        v18 = (char *)(v9 - __p);
        *(_BYTE *)v13 = v12;
        v19 = v13 + 1;
        if (v9 != __p)
        {
LABEL_17:
          if (v13 < 8 || v17 > &v17[v9 - __p - 1] || __p > v9 - 1 || (unint64_t)(__p - v17) < 0x20)
          {
            v20 = v9;
          }
          else if (v13 >= 0x20)
          {
            v23 = v13 & 0xFFFFFFFFFFFFFFE0;
            v24 = &v17[v13 - 16];
            v25 = (__int128 *)(v9 - 16);
            v26 = v13 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v27 = *v25;
              *((_OWORD *)v24 - 1) = *(v25 - 1);
              *(_OWORD *)v24 = v27;
              v24 -= 32;
              v25 -= 2;
              v26 -= 32;
            }
            while (v26);
            if (v13 == v23)
              goto LABEL_21;
            if ((v13 & 0x18) != 0)
              goto LABEL_37;
            v18 -= v23;
            v20 = &v9[-v23];
          }
          else
          {
            v23 = 0;
LABEL_37:
            v20 = &v9[-(v13 & 0xFFFFFFFFFFFFFFF8)];
            v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v28 = &v17[&v9[-v23] - __p - 8];
            v29 = (uint64_t *)&v9[-v23 - 8];
            v30 = v23 - (v13 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v31 = *v29--;
              *(_QWORD *)v28 = v31;
              v28 -= 8;
              v30 += 8;
            }
            while (v30);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_21:
              v9 = __p;
              __p = v17;
              v35 = &v17[v16];
              if (!v9)
                goto LABEL_26;
LABEL_25:
              operator delete(v9);
              goto LABEL_26;
            }
          }
          v21 = v18 - 1;
          do
          {
            v22 = *--v20;
            *v21-- = v22;
          }
          while (v20 != __p);
          goto LABEL_21;
        }
      }
      __p = v18;
      v35 = &v17[v16];
      if (v9)
        goto LABEL_25;
LABEL_26:
      v9 = (char *)v19;
      if (++v7 == v8)
      {
LABEL_47:
        v33 = __p;
        v32 = v35;
        goto LABEL_48;
      }
    }
  }
  v32 = 0;
  v9 = 0;
  v33 = 0;
LABEL_48:
  *(_QWORD *)a2 = v33;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v32;
  *(_BYTE *)(a2 + 24) = 1;
}

void sub_1910368BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5Common::MinimalCpu::Matcher::MatchInterleavedGather@<X0>(E5Common::MinimalCpu::Matcher *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  MIL::IRValue *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  const MIL::IRValueType *ParameterType;
  int32x4_t v17;
  void *v18;
  std::string::size_type v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int8x16_t *v25;
  unint64_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t v47;
  const MIL::IRValueType *v48;
  void *v49;
  std::string::size_type v50;
  int v51;
  int *v52;
  uint64_t v53;
  int32x4_t *v54;
  int32x4_t v55;
  uint64_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int v63;
  uint64_t v64;
  std::string::size_type v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  _QWORD *v72;
  unint64_t v73;
  char *v74;
  void *v75;
  void *v76;
  void *v78;
  void *v79[2];
  _QWORD *v80;
  std::string __p;
  char v82;
  std::string v83;
  char v84;

  v3 = 0;
  v4 = (_QWORD *)((char *)this + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
    if (v3 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 4)
      return result;
    *((_BYTE *)&v83.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v83, "gather_nd");
    if (!E5Common::MinimalCpu::Matcher::OpTypeIs((_QWORD **)this, v3, (uint64_t)&v83))
      goto LABEL_2;
    v6 = *(_QWORD *)(**(_QWORD **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1))
                   + 16 * v3);
    *((_BYTE *)&v83.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&v83, "batch_dims");
    v7 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)(v6 + 64) + 48))(v6 + 64, &v83, 1);
    v8 = (MIL::IRValue *)v7;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v83.__r_.__value_.__l.__data_);
      if (!v8)
        goto LABEL_10;
    }
    else if (!v7)
    {
      goto LABEL_10;
    }
    MIL::IRValue::AsTensor(v8);
    if (MIL::IRValue::GetScalar<int>())
      goto LABEL_2;
LABEL_10:
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
    LOWORD(__p.__r_.__value_.__l.__data_) = 120;
    v9 = *(_QWORD *)(**(_QWORD **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1))
                   + 16 * v3);
    v10 = (*(uint64_t (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v9 + 120))(v9, &__p, 0);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
      }
      else
      {
        v11 = *(_OWORD *)v10;
        v83.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v11;
      }
    }
    else
    {
      *((_BYTE *)&v83.__r_.__value_.__s + 23) = 0;
      v83.__r_.__value_.__s.__data_[0] = 0;
    }
    v12 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v4, (uint64_t)&v83);
    if (v12)
    {
      v13 = v12[5];
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
    else
    {
      v13 = -1;
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_22;
        goto LABEL_18;
      }
    }
    operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_22:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v13 == -1)
        goto LABEL_2;
      goto LABEL_23;
    }
LABEL_18:
    if (v13 == -1)
      goto LABEL_2;
LABEL_23:
    v14 = (char *)operator new(0x19uLL);
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = xmmword_191A849B0;
    strcpy(v14, "tensor_buffer_to_tensor");
    v15 = E5Common::MinimalCpu::Matcher::OpTypeIs((_QWORD **)this, v13, (uint64_t)&v83);
    operator delete(v14);
    if (!v15)
      goto LABEL_2;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&__p, "input");
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
    ParameterType = (const MIL::IRValueType *)MIL::IROperation::TryGetParameterType();
    E5Common::MinimalCpu::Matcher::TensorBufferInterleaveFactors(ParameterType, (uint64_t)&v83);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v84)
        goto LABEL_2;
    }
    else if (!v84)
    {
      goto LABEL_2;
    }
    v18 = (void *)v83.__r_.__value_.__r.__words[0];
    if (v83.__r_.__value_.__r.__words[0] == v83.__r_.__value_.__l.__size_)
      goto LABEL_86;
    v19 = v83.__r_.__value_.__l.__size_ - v83.__r_.__value_.__r.__words[0];
    if (v83.__r_.__value_.__l.__size_ - v83.__r_.__value_.__r.__words[0] < 8)
    {
      v20 = 1;
      v21 = (unsigned __int8 *)v83.__r_.__value_.__r.__words[0];
      goto LABEL_42;
    }
    if (v19 >= 0x20)
    {
      v23.i64[0] = 0x100000001;
      v23.i64[1] = 0x100000001;
      v22 = v19 & 0xFFFFFFFFFFFFFFE0;
      v24.i64[0] = 0x100000001;
      v24.i64[1] = 0x100000001;
      v25 = (int8x16_t *)(v83.__r_.__value_.__r.__words[0] + 16);
      v26 = v19 & 0xFFFFFFFFFFFFFFE0;
      v27.i64[0] = 0x100000001;
      v27.i64[1] = 0x100000001;
      v28.i64[0] = 0x100000001;
      v28.i64[1] = 0x100000001;
      v29.i64[0] = 0x100000001;
      v29.i64[1] = 0x100000001;
      v30.i64[0] = 0x100000001;
      v30.i64[1] = 0x100000001;
      v31.i64[0] = 0x100000001;
      v31.i64[1] = 0x100000001;
      v32.i64[0] = 0x100000001;
      v32.i64[1] = 0x100000001;
      do
      {
        v33 = v25[-1];
        v27 = vmulq_s32(v27, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_191A741B0));
        v24 = vmulq_s32(v24, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_191A741A0));
        v23 = vmulq_s32(v23, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_191A74190));
        v28 = vmulq_s32(v28, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_191A741C0));
        v31 = vmulq_s32(v31, (int32x4_t)vqtbl1q_s8(*v25, (int8x16_t)xmmword_191A741B0));
        v30 = vmulq_s32(v30, (int32x4_t)vqtbl1q_s8(*v25, (int8x16_t)xmmword_191A741A0));
        v29 = vmulq_s32(v29, (int32x4_t)vqtbl1q_s8(*v25, (int8x16_t)xmmword_191A74190));
        v32 = vmulq_s32(v32, (int32x4_t)vqtbl1q_s8(*v25, (int8x16_t)xmmword_191A741C0));
        v25 += 2;
        v26 -= 32;
      }
      while (v26);
      v17 = vmulq_s32(v30, v24);
      v34 = (int8x16_t)vmulq_s32(vmulq_s32(vmulq_s32(v29, v23), vmulq_s32(v31, v27)), vmulq_s32(v17, vmulq_s32(v32, v28)));
      *(int32x2_t *)v34.i8 = vmul_s32(*(int32x2_t *)v34.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
      v20 = v34.i32[0] * v34.i32[1];
      if (v19 == v22)
        goto LABEL_43;
      if ((v19 & 0x18) == 0)
      {
        v21 = (unsigned __int8 *)(v83.__r_.__value_.__r.__words[0] + v22);
        do
        {
LABEL_42:
          v42 = *v21++;
          v20 *= v42;
        }
        while (v21 != (unsigned __int8 *)v83.__r_.__value_.__l.__size_);
        goto LABEL_43;
      }
    }
    else
    {
      v22 = 0;
      v20 = 1;
    }
    v21 = (unsigned __int8 *)(v83.__r_.__value_.__r.__words[0] + (v19 & 0xFFFFFFFFFFFFFFF8));
    v35.i64[0] = 0x100000001;
    v35.i64[1] = 0x100000001;
    v36.i64[1] = 0x100000001;
    v36.i64[0] = v20 | 0x100000000;
    v37 = (uint64_t *)(v83.__r_.__value_.__r.__words[0] + v22);
    v38 = v22 - (v19 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v39 = *v37++;
      v17.i64[0] = v39;
      v40 = (int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_191A74190);
      v17 = (int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_191A741A0);
      v35 = vmulq_s32(v35, v17);
      v36 = vmulq_s32(v36, v40);
      v38 += 8;
    }
    while (v38);
    v41 = (int8x16_t)vmulq_s32(v36, v35);
    *(int32x2_t *)v41.i8 = vmul_s32(*(int32x2_t *)v41.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    v20 = v41.i32[0] * v41.i32[1];
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_42;
LABEL_43:
    if (v20 == 1)
      goto LABEL_86;
    HIBYTE(v79[1]) = 7;
    strcpy((char *)&v78, "indices");
    v43 = *(_QWORD *)(**(_QWORD **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1))
                    + 16 * v3);
    v44 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v43 + 120))(v43, &v78, 0);
    if (v44)
    {
      if (*(char *)(v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v44, *(_QWORD *)(v44 + 8));
      }
      else
      {
        v45 = *(_OWORD *)v44;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
      }
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
    }
    v46 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v4, (uint64_t)&__p);
    if (v46)
    {
      v47 = v46[5];
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_51;
    }
    else
    {
      v47 = -1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_51:
        if ((SHIBYTE(v79[1]) & 0x80000000) == 0)
          goto LABEL_52;
        goto LABEL_56;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v79[1]) & 0x80000000) == 0)
    {
LABEL_52:
      if (v47 == -1)
        goto LABEL_86;
      goto LABEL_57;
    }
LABEL_56:
    operator delete(v78);
    if (v47 == -1)
      goto LABEL_86;
LABEL_57:
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&__p, "transpose");
    if (E5Common::MinimalCpu::Matcher::OpTypeIs((_QWORD **)this, v47, (uint64_t)&__p))
    {
      HIBYTE(v79[1]) = 1;
      LOWORD(v78) = 120;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
      v48 = (const MIL::IRValueType *)MIL::IROperation::TryGetParameterType();
      E5Common::MinimalCpu::Matcher::TensorShape(v48, (uint64_t)&__p);
      if (SHIBYTE(v79[1]) < 0)
      {
        operator delete(v78);
        if (v82)
        {
LABEL_62:
          v49 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
          {
            if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == 1)
              goto LABEL_79;
          }
          else
          {
            v50 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] - 8;
            if (v50 < 0x38)
            {
              v51 = 1;
              v52 = (int *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_70;
            }
            v53 = (v50 >> 3) + 1;
            v52 = (int *)(__p.__r_.__value_.__r.__words[0] + 8 * (v53 & 0x3FFFFFFFFFFFFFF8));
            v54 = (int32x4_t *)(__p.__r_.__value_.__r.__words[0] + 32);
            v55.i64[0] = 0x100000001;
            v55.i64[1] = 0x100000001;
            v56 = v53 & 0x3FFFFFFFFFFFFFF8;
            v57.i64[0] = 0x100000001;
            v57.i64[1] = 0x100000001;
            do
            {
              v59 = v54[-2];
              v58 = v54[-1];
              v61 = *v54;
              v60 = v54[1];
              v54 += 4;
              v55 = vmulq_s32(v55, vuzp1q_s32(v59, v58));
              v57 = vmulq_s32(v57, vuzp1q_s32(v61, v60));
              v56 -= 8;
            }
            while (v56);
            v62 = (int8x16_t)vmulq_s32(v57, v55);
            *(int32x2_t *)v62.i8 = vmul_s32(*(int32x2_t *)v62.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
            v51 = v62.i32[0] * v62.i32[1];
            if (v53 != (v53 & 0x3FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_70:
                v63 = *v52;
                v52 += 2;
                v51 *= v63;
              }
              while (v52 != (int *)__p.__r_.__value_.__l.__size_);
            }
            v64 = v51;
            v65 = __p.__r_.__value_.__r.__words[0] + 8;
            if (__p.__r_.__value_.__r.__words[0] + 8 == __p.__r_.__value_.__l.__size_)
            {
              if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == v64)
                goto LABEL_79;
            }
            else
            {
              v66 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
              v67 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
              v68 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
              do
              {
                v70 = *v68++;
                v69 = v70;
                v71 = v66 >= v70;
                if (v66 <= v70)
                  v66 = v69;
                if (!v71)
                  v67 = (_QWORD *)v65;
                v65 = (std::string::size_type)v68;
              }
              while (v68 != (unint64_t *)__p.__r_.__value_.__l.__size_);
              if (*v67 == v64)
              {
LABEL_79:
                v76 = (void *)__p.__r_.__value_.__r.__words[0];
                LODWORD(v78) = 0;
                v72 = operator new(0x18uLL);
                v79[1] = v72 + 3;
                v80 = v72 + 3;
                *v72 = v13;
                v72[1] = v47;
                v72[2] = v3;
                v79[0] = v72;
                v73 = *(_QWORD *)(a2 + 8);
                if (v73 >= *(_QWORD *)(a2 + 16))
                {
                  v74 = std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>((void **)a2, (uint64_t)&v78);
                  v75 = v79[0];
                  *(_QWORD *)(a2 + 8) = v74;
                  if (v75)
                  {
                    v79[1] = v75;
                    operator delete(v75);
                  }
                }
                else
                {
                  *(_DWORD *)v73 = 0;
                  *(_QWORD *)(v73 + 16) = 0;
                  *(_QWORD *)(v73 + 24) = 0;
                  *(_QWORD *)(v73 + 8) = 0;
                  *(_OWORD *)(v73 + 8) = *(_OWORD *)v79;
                  *(_QWORD *)(v73 + 24) = v80;
                  *(_QWORD *)(a2 + 8) = v73 + 32;
                }
                v49 = v76;
              }
            }
          }
          if (v49)
            operator delete(v49);
        }
      }
      else if (v82)
      {
        goto LABEL_62;
      }
    }
LABEL_86:
    if (v18)
      operator delete(v18);
LABEL_2:
    ++v3;
  }
}

void sub_19103709C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  if (v30)
  {
    operator delete(v30);
    std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](a10);
    _Unwind_Resume(a1);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

uint64_t E5Common::MinimalCpu::Matcher::MatchReadState@<X0>(E5Common::MinimalCpu::Matcher *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  void *v9;
  _BYTE v10[24];
  _QWORD *v11;

  v4 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
    if (v4 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 4)
      return result;
    v10[23] = 10;
    strcpy(v10, "read_state");
    if (!E5Common::MinimalCpu::Matcher::OpTypeIs((_QWORD **)this, v4, (uint64_t)v10))
      goto LABEL_2;
    *(_DWORD *)v10 = 1;
    v6 = operator new(8uLL);
    *(_QWORD *)&v10[8] = v6;
    *v6 = v4;
    *(_QWORD *)&v10[16] = v6 + 1;
    v11 = v6 + 1;
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >= *(_QWORD *)(a2 + 16))
    {
      v8 = std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>((void **)a2, (uint64_t)v10);
      v9 = *(void **)&v10[8];
      *(_QWORD *)(a2 + 8) = v8;
      if (v9)
      {
        *(_QWORD *)&v10[16] = v9;
        operator delete(v9);
      }
LABEL_2:
      ++v4;
    }
    else
    {
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)&v10[8];
      *(_QWORD *)(v7 + 24) = v11;
      *(_QWORD *)(a2 + 8) = v7 + 32;
      ++v4;
    }
  }
}

void sub_191037304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void **v11;

  if (__p)
  {
    operator delete(__p);
    std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
    _Unwind_Resume(a1);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t E5Common::MinimalCpu::Matcher::MatchWriteState@<X0>(E5Common::MinimalCpu::Matcher *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  void *v9;
  _BYTE v10[24];
  _QWORD *v11;

  v4 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
    if (v4 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 4)
      return result;
    v10[23] = 11;
    strcpy(v10, "write_state");
    if (!E5Common::MinimalCpu::Matcher::OpTypeIs((_QWORD **)this, v4, (uint64_t)v10))
      goto LABEL_2;
    *(_DWORD *)v10 = 2;
    v6 = operator new(8uLL);
    *(_QWORD *)&v10[8] = v6;
    *v6 = v4;
    *(_QWORD *)&v10[16] = v6 + 1;
    v11 = v6 + 1;
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >= *(_QWORD *)(a2 + 16))
    {
      v8 = std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>((void **)a2, (uint64_t)v10);
      v9 = *(void **)&v10[8];
      *(_QWORD *)(a2 + 8) = v8;
      if (v9)
      {
        *(_QWORD *)&v10[16] = v9;
        operator delete(v9);
      }
LABEL_2:
      ++v4;
    }
    else
    {
      *(_DWORD *)v7 = 2;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)&v10[8];
      *(_QWORD *)(v7 + 24) = v11;
      *(_QWORD *)(a2 + 8) = v7 + 32;
      ++v4;
    }
  }
}

void sub_191037474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void **v11;

  if (__p)
  {
    operator delete(__p);
    std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
    _Unwind_Resume(a1);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void E5Common::MinimalCpu::Matcher::MatchTensorToTensorBufferLoadingWeights(E5Common::MinimalCpu::Matcher *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  int v8;
  void *__p;
  _QWORD *v10;
  _QWORD *v11;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (E5Common::MinimalCpu::IsTensorToTensorBufferLoadingWeights(*(_QWORD *)this, *((_QWORD *)this + 1)))
  {
    v8 = 3;
    v3 = operator new(8uLL);
    *v3 = 0;
    v4 = v3 + 1;
    v10 = v3 + 1;
    v11 = v3 + 1;
    __p = v3;
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 >= *(_QWORD *)(a2 + 16))
    {
      v6 = std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>((void **)a2, (uint64_t)&v8);
      v7 = __p;
      *(_QWORD *)(a2 + 8) = v6;
      if (v7)
      {
        v10 = v7;
        operator delete(v7);
      }
    }
    else
    {
      *(_DWORD *)v5 = 3;
      *(_QWORD *)(v5 + 8) = v3;
      *(_QWORD *)(v5 + 16) = v4;
      *(_QWORD *)(v5 + 24) = v4;
      *(_QWORD *)(a2 + 8) = v5 + 32;
    }
  }
}

void sub_191037568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void **v11;

  if (__p)
  {
    operator delete(__p);
    std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
    _Unwind_Resume(a1);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void E5Common::MinimalCpu::MatchAllPatterns(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  void **v20;
  void *v21;
  void **v22;
  void *__p;
  char *v24;
  _QWORD v25[2];
  void *v26;
  void *v27;

  v25[0] = a1;
  v25[1] = a2;
  E5Common::MinimalCpu::Matcher::MakeOutputNameToOpMap(a2, (uint64_t)&v26);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  E5Common::MinimalCpu::Matcher::MatchInterleavedGather((E5Common::MinimalCpu::Matcher *)v25, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)__p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 5);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v24;
    v6 = __p;
    if (v24 != __p)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 32;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v24 = v4;
    operator delete(v6);
  }
  E5Common::MinimalCpu::Matcher::MatchReadState((E5Common::MinimalCpu::Matcher *)v25, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)__p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 5);
  v8 = (char *)__p;
  if (__p)
  {
    v9 = v24;
    v10 = __p;
    if (v24 != __p)
    {
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 3);
        if (v11)
        {
          *((_QWORD *)v9 - 2) = v11;
          operator delete(v11);
        }
        v9 -= 32;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v24 = v8;
    operator delete(v10);
  }
  E5Common::MinimalCpu::Matcher::MatchWriteState((E5Common::MinimalCpu::Matcher *)v25, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)__p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 5);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v24;
    v14 = __p;
    if (v24 != __p)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 3);
        if (v15)
        {
          *((_QWORD *)v13 - 2) = v15;
          operator delete(v15);
        }
        v13 -= 32;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v24 = v12;
    operator delete(v14);
  }
  E5Common::MinimalCpu::Matcher::MatchTensorToTensorBufferLoadingWeights((E5Common::MinimalCpu::Matcher *)v25, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)__p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 5);
  v16 = (char *)__p;
  if (__p)
  {
    v17 = v24;
    v18 = __p;
    if (v24 != __p)
    {
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 3);
        if (v19)
        {
          *((_QWORD *)v17 - 2) = v19;
          operator delete(v19);
        }
        v17 -= 32;
      }
      while (v17 != v16);
      v18 = __p;
    }
    v24 = v16;
    operator delete(v18);
  }
  v20 = (void **)v27;
  if (v27)
  {
    do
    {
      v22 = (void **)*v20;
      if (*((char *)v20 + 39) < 0)
        operator delete(v20[2]);
      operator delete(v20);
      v20 = v22;
    }
    while (v22);
  }
  v21 = v26;
  v26 = 0;
  if (v21)
    operator delete(v21);
}

void sub_1910377DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  void **v12;

  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](&a9);
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v12);
  E5Common::MinimalCpu::Matcher::~Matcher((E5Common::MinimalCpu::Matcher *)&a12);
  _Unwind_Resume(a1);
}

void E5Common::MinimalCpu::Matcher::~Matcher(E5Common::MinimalCpu::Matcher *this)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = (void **)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    operator delete(v3);
}

void E5Common::MinimalCpu::MatchStatePatterns(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  void **v12;
  void *v13;
  void **v14;
  void *__p;
  char *v16;
  _QWORD v17[2];
  void *v18;
  void *v19;

  v17[0] = a1;
  v17[1] = a2;
  E5Common::MinimalCpu::Matcher::MakeOutputNameToOpMap(a2, (uint64_t)&v18);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  E5Common::MinimalCpu::Matcher::MatchReadState((E5Common::MinimalCpu::Matcher *)v17, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)__p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 5);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v16;
    v6 = __p;
    if (v16 != __p)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 32;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v16 = v4;
    operator delete(v6);
  }
  E5Common::MinimalCpu::Matcher::MatchWriteState((E5Common::MinimalCpu::Matcher *)v17, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)__p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 5);
  v8 = (char *)__p;
  if (__p)
  {
    v9 = v16;
    v10 = __p;
    if (v16 != __p)
    {
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 3);
        if (v11)
        {
          *((_QWORD *)v9 - 2) = v11;
          operator delete(v11);
        }
        v9 -= 32;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v16 = v8;
    operator delete(v10);
  }
  v12 = (void **)v19;
  if (v19)
  {
    do
    {
      v14 = (void **)*v12;
      if (*((char *)v12 + 39) < 0)
        operator delete(v12[2]);
      operator delete(v12);
      v12 = v14;
    }
    while (v14);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    operator delete(v13);
}

void sub_1910379FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  void **v12;

  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](&a9);
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v12);
  E5Common::MinimalCpu::Matcher::~Matcher((E5Common::MinimalCpu::Matcher *)&a12);
  _Unwind_Resume(a1);
}

char *std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v13 = v11 + 32;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_17;
  }
  v16 = 0;
  do
  {
    v17 = &v11[v16];
    v18 = &v15[v16];
    *((_DWORD *)v17 - 8) = *(_DWORD *)&v15[v16 - 32];
    *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
    *((_QWORD *)v17 - 1) = *(_QWORD *)&v15[v16 - 8];
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *((_QWORD *)v18 - 1) = 0;
    v16 -= 32;
  }
  while (&v15[v16] != v14);
  v19 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v15 != v19)
  {
    do
    {
      v20 = (void *)*((_QWORD *)v15 - 3);
      if (v20)
      {
        *((_QWORD *)v15 - 2) = v20;
        operator delete(v20);
      }
      v15 -= 32;
    }
    while (v15 != v19);
    v15 = v19;
  }
  if (v15)
LABEL_17:
    operator delete(v15);
  return v13;
}

uint64_t std::__split_buffer<E5Common::MinimalCpu::Match>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 32;
        *(_QWORD *)(a1 + 16) = v2 - 32;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  void *v33;
  void **v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  int64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  void *v55;
  char *v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;

  v5 = (char *)*a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = (unint64_t)*a1 + (v6 & 0xFFFFFFFFFFFFFFE0);
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = v6 >> 5;
  v14 = a1[2];
  v12 = (uint64_t)(a1 + 2);
  v13 = v14;
  v15 = *(_QWORD *)(v12 - 8);
  if (a5 <= (uint64_t)&v14[-v15] >> 5)
  {
    v20 = (uint64_t)(v15 - v7) >> 5;
    if (v20 >= a5)
    {
      v21 = a3 + 32 * a5;
      v23 = *(_QWORD *)(v12 - 8);
      v24 = v7 + 32 * a5;
      v25 = v15 - 32 * a5;
      v26 = v23;
      if (v25 >= v15)
      {
LABEL_19:
        a1[1] = (void *)v26;
        if (v23 != v24)
        {
          v27 = 0;
          v28 = 32 * ((uint64_t)(v23 - v24) >> 5);
          v29 = &v5[32 * v11 + v28];
          v30 = -v28;
          do
          {
            v31 = &v29[v27];
            v32 = v23 + v27;
            v34 = (void **)(v23 + v27 - 24);
            v33 = *v34;
            *(_DWORD *)(v23 + v27 - 32) = *(_DWORD *)&v29[v27 - 32];
            if (v33)
            {
              *(_QWORD *)(v32 - 16) = v33;
              operator delete(v33);
              *v34 = 0;
              *(_QWORD *)(v23 + v27 - 16) = 0;
              *(_QWORD *)(v23 + v27 - 8) = 0;
            }
            *(_OWORD *)v34 = *(_OWORD *)(v31 - 24);
            *(_QWORD *)(v32 - 8) = *((_QWORD *)v31 - 1);
            *((_QWORD *)v31 - 3) = 0;
            *((_QWORD *)v31 - 2) = 0;
            *((_QWORD *)v31 - 1) = 0;
            v27 -= 32;
          }
          while (v30 != v27);
        }
        if (v21 != v9)
        {
          v35 = v7;
          do
          {
            *(_DWORD *)v35 = *(_DWORD *)v9;
            if (v9 != v35)
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(v35 + 8), *(char **)(v9 + 8), *(char **)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
            v9 += 32;
            v35 += 32;
          }
          while (v9 != v21);
        }
        return v7;
      }
LABEL_17:
      v26 = v23;
      do
      {
        *(_DWORD *)v26 = *(_DWORD *)v25;
        *(_QWORD *)(v26 + 16) = 0;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 8) = 0;
        *(_OWORD *)(v26 + 8) = *(_OWORD *)(v25 + 8);
        *(_QWORD *)(v26 + 24) = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v25 + 8) = 0;
        *(_QWORD *)(v25 + 16) = 0;
        *(_QWORD *)(v25 + 24) = 0;
        v26 += 32;
        v25 += 32;
      }
      while (v25 < v15);
      goto LABEL_19;
    }
    v21 = a3 + 32 * v20;
    v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<E5Common::MinimalCpu::Match>,E5Common::MinimalCpu::Match*,E5Common::MinimalCpu::Match*,E5Common::MinimalCpu::Match*>(v12, v21, a4, *(_QWORD *)(v12 - 8));
    v23 = v22;
    a1[1] = (void *)v22;
    if ((uint64_t)(v15 - v7) >= 1)
    {
      v24 = v7 + 32 * a5;
      v25 = v22 - 32 * a5;
      v26 = v22;
      if (v25 >= v15)
        goto LABEL_19;
      goto LABEL_17;
    }
    return v7;
  }
  v16 = a5 + ((uint64_t)(v15 - (_QWORD)v5) >> 5);
  if (v16 >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v17 = v13 - v5;
  if (v17 >> 4 > v16)
    v16 = v17 >> 4;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
    v18 = 0x7FFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  v57 = v5;
  v58 = a1;
  if (v18)
  {
    if (v18 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = (char *)operator new(32 * v18);
  }
  else
  {
    v19 = 0;
  }
  v37 = 0;
  v36 = &v19[32 * v11];
  v61 = &v19[32 * v18];
  v59 = v11;
  v60 = 32 * a5;
  v38 = &v36[32 * a5];
  do
  {
    v40 = v36;
    v41 = &v36[v37];
    v42 = *(_DWORD *)(v9 + v37);
    *((_QWORD *)v41 + 1) = 0;
    *(_DWORD *)v41 = v42;
    *((_QWORD *)v41 + 2) = 0;
    *((_QWORD *)v41 + 3) = 0;
    v44 = *(_BYTE **)(v9 + v37 + 8);
    v43 = *(_BYTE **)(v9 + v37 + 16);
    v45 = v43 - v44;
    if (v43 != v44)
    {
      if (v45 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v46 = (char *)operator new(v43 - v44);
      *((_QWORD *)v41 + 1) = v46;
      v39 = &v46[8 * (v45 >> 3)];
      *((_QWORD *)v41 + 2) = v46;
      *((_QWORD *)v41 + 3) = v39;
      memcpy(v46, v44, v45);
      *((_QWORD *)v41 + 2) = v39;
    }
    v37 += 32;
    v36 = v40;
  }
  while (v60 != v37);
  v47 = (char *)*v58;
  v48 = v40;
  if (*v58 != (void *)v7)
  {
    v49 = 32 * v59;
    v50 = v57;
    do
    {
      v51 = &v19[v49];
      v52 = &v50[v49];
      *((_DWORD *)v51 - 8) = *(_DWORD *)&v50[v49 - 32];
      *(_OWORD *)(v51 - 24) = *(_OWORD *)&v50[v49 - 24];
      *((_QWORD *)v51 - 1) = *(_QWORD *)&v50[v49 - 8];
      *((_QWORD *)v52 - 3) = 0;
      *((_QWORD *)v52 - 2) = 0;
      *((_QWORD *)v52 - 1) = 0;
      v19 -= 32;
      v50 -= 32;
    }
    while (&v50[v49] != v47);
    v48 = &v19[32 * v59];
  }
  v53 = v58[1];
  if (v53 != (void *)v7)
  {
    do
    {
      *(_DWORD *)v38 = *(_DWORD *)v7;
      *((_QWORD *)v38 + 2) = 0;
      *((_QWORD *)v38 + 3) = 0;
      *((_QWORD *)v38 + 1) = 0;
      *(_OWORD *)(v38 + 8) = *(_OWORD *)(v7 + 8);
      *((_QWORD *)v38 + 3) = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      v38 += 32;
      v7 += 32;
    }
    while ((void *)v7 != v53);
    v7 = (unint64_t)v58[1];
  }
  v54 = *v58;
  *v58 = v48;
  v58[1] = v38;
  v58[2] = v61;
  while ((void *)v7 != v54)
  {
    v55 = *(void **)(v7 - 24);
    if (v55)
    {
      *(_QWORD *)(v7 - 16) = v55;
      operator delete(v55);
    }
    v7 -= 32;
  }
  if (v54)
    operator delete(v54);
  return (unint64_t)v36;
}

void sub_191038008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_191038010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  void *v19;

  v19 = *(void **)(v16 + v17 + 8);
  if (v19)
  {
    *(_QWORD *)(v16 + v17 + 16) = v19;
    operator delete(v19);
  }
  a16 = v16 + v17;
  std::__split_buffer<E5Common::MinimalCpu::Match>::~__split_buffer((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<E5Common::MinimalCpu::Match>,E5Common::MinimalCpu::Match*,E5Common::MinimalCpu::Match*,E5Common::MinimalCpu::Match*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v6;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v9 = *(_BYTE **)(v6 + 8);
      v8 = *(_BYTE **)(v6 + 16);
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - v9);
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = v11;
        v7 = &v11[8 * (v10 >> 3)];
        *(_QWORD *)(a4 + 24) = v7;
        memcpy(v11, v9, v10);
        *(_QWORD *)(a4 + 16) = v7;
      }
      a4 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_191038110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<E5Common::MinimalCpu::Match>,E5Common::MinimalCpu::Match*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<E5Common::MinimalCpu::Match>,E5Common::MinimalCpu::Match*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

E5RT_FB::ProgramT *E5RT::ComputeProgramBuilder::CreateBuilder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  E5RT_FB::ProgramT *result;

  v3 = operator new();
  *(_QWORD *)v3 = &off_1E2DD03E0;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_DWORD *)(v3 + 120) = 1065353216;
  *(_QWORD *)(v3 + 128) = -1;
  v4 = (_OWORD *)operator new();
  v4[2] = 0u;
  v4[3] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  result = *(E5RT_FB::ProgramT **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    E5RT_FB::ProgramT::~ProgramT(result);
    result = (E5RT_FB::ProgramT *)MEMORY[0x19401CD90]();
  }
  *a1 = v3;
  return result;
}

void sub_191038278(_Unwind_Exception *a1)
{
  _QWORD *v1;
  E5RT_FB::ProgramT **v2;
  void **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  E5RT_FB::ProgramT *v8;
  _QWORD *v9;
  void *v10;
  void **v11;
  void *v12;
  void *v13;
  void **v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (void **)v1[13];
  if (v4)
    Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(v4);
  v5 = (void *)v1[11];
  v1[11] = 0;
  if (v5)
  {
    operator delete(v5);
    sub_1910383EC(v1 + 8);
    v6 = (_QWORD *)v1[5];
    if (!v6)
    {
LABEL_5:
      v7 = (_QWORD *)v1[2];
      if (!v7)
        goto LABEL_6;
      goto LABEL_21;
    }
  }
  else
  {
    sub_1910383EC(v1 + 8);
    v6 = (_QWORD *)v1[5];
    if (!v6)
      goto LABEL_5;
  }
  v9 = (_QWORD *)v1[6];
  v10 = v6;
  if (v9 != v6)
  {
    do
    {
      v11 = (void **)*(v9 - 3);
      if (v11)
      {
        do
        {
          v14 = (void **)*v11;
          if (*((char *)v11 + 39) < 0)
            operator delete(v11[2]);
          operator delete(v11);
          v11 = v14;
        }
        while (v14);
      }
      v13 = (void *)*(v9 - 5);
      v9 -= 5;
      v12 = v13;
      *v9 = 0;
      if (v13)
        operator delete(v12);
    }
    while (v9 != v6);
    v10 = (void *)v1[5];
  }
  v1[6] = v6;
  operator delete(v10);
  v7 = (_QWORD *)v1[2];
  if (!v7)
  {
LABEL_6:
    v8 = *v2;
    *v2 = 0;
    if (!v8)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_21:
  v15 = (_QWORD *)v1[3];
  v16 = v7;
  if (v15 != v7)
  {
    do
    {
      v18 = *--v15;
      v17 = v18;
      *v15 = 0;
      if (v18)
      {
        if (*(char *)(v17 + 23) < 0)
          operator delete(*(void **)v17);
        MEMORY[0x19401CD90](v17, 0x1012C4004DB1A28);
      }
    }
    while (v15 != v7);
    v16 = (void *)v1[2];
  }
  v1[3] = v7;
  operator delete(v16);
  v8 = *v2;
  *v2 = 0;
  if (!v8)
  {
LABEL_8:
    MEMORY[0x19401CD90](v1, 0x10A1C40642D8541);
    _Unwind_Resume(a1);
  }
LABEL_7:
  E5RT_FB::ProgramT::~ProgramT(v8);
  MEMORY[0x19401CD90]();
  goto LABEL_8;
}

_QWORD *sub_1910383EC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (uint64_t *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(v5 + 1));
          v7 = *v5;
          *v5 = 0;
          if (v7)
          {
            if (*(char *)(v7 + 23) < 0)
              operator delete(*(void **)v7);
            MEMORY[0x19401CD90](v7, 0x1012C4016A3B764);
          }
          MEMORY[0x19401CD90](v5, 0x1030C40EF383451);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

