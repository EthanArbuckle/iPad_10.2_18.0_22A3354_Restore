void sub_1912E69C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  int v75;
  uint64_t v76;
  void *v78;

  if (a28 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  if (a47 < 0)
    operator delete(a42);
  if (a56 < 0)
    operator delete(a51);
  if (a65 < 0)
    operator delete(a60);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a75);
  if (v75 < 0)
    operator delete((void *)STACK[0x228]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3FF]) < 0)
    operator delete((void *)STACK[0x3E8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v76 - 208);
  v78 = *(void **)(v76 - 152);
  if (v78)
  {
    *(_QWORD *)(v76 - 144) = v78;
    operator delete(v78);
  }
  if (*(char *)(v76 - 105) < 0)
    operator delete(*(void **)(v76 - 128));
  _Unwind_Resume(a1);
}

void sub_1912E6BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  if (a68 < 0)
    JUMPOUT(0x1912E6B14);
  JUMPOUT(0x1912E6B18);
}

void sub_1912E6BE0()
{
  JUMPOUT(0x1912E6B18);
}

void sub_1912E6BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a73;

  if (a73 < 0)
    JUMPOUT(0x1912E6B24);
  JUMPOUT(0x1912E6B28);
}

void sub_1912E6BFC()
{
  JUMPOUT(0x1912E6B28);
}

void sub_1912E6C04()
{
  if (SLOBYTE(STACK[0x227]) < 0)
    JUMPOUT(0x1912E6B30);
  JUMPOUT(0x1912E6B34);
}

void sub_1912E6C18()
{
  JUMPOUT(0x1912E6B34);
}

void sub_1912E6C20()
{
  if (SLOBYTE(STACK[0x257]) < 0)
    JUMPOUT(0x1912E6B40);
  JUMPOUT(0x1912E6B44);
}

void sub_1912E6C34()
{
  JUMPOUT(0x1912E6B44);
}

void sub_1912E6C3C()
{
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x288]);
  JUMPOUT(0x1912E6B54);
}

void sub_1912E6C7C()
{
  void *v0;

  v0 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1912E6B5CLL);
}

void sub_1912E6CB4()
{
  if (SLOBYTE(STACK[0x347]) < 0)
    JUMPOUT(0x1912E6B68);
  JUMPOUT(0x1912E6B6CLL);
}

void sub_1912E6CC8()
{
  JUMPOUT(0x1912E6B6CLL);
}

void sub_1912E6CD0()
{
  if (SLOBYTE(STACK[0x377]) < 0)
    JUMPOUT(0x1912E6B78);
  JUMPOUT(0x1912E6B7CLL);
}

void sub_1912E6CE4()
{
  JUMPOUT(0x1912E6B7CLL);
}

void sub_1912E6CEC()
{
  if (SLOBYTE(STACK[0x3A7]) < 0)
    JUMPOUT(0x1912E6B88);
  JUMPOUT(0x1912E6B8CLL);
}

void sub_1912E6D00()
{
  JUMPOUT(0x1912E6B8CLL);
}

void sub_1912E6D08()
{
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3D8]);
  JUMPOUT(0x1912E6B9CLL);
}

void sub_1912E6D48()
{
  void *v0;

  v0 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1912E6BA4);
}

void sub_1912E6D60()
{
  JUMPOUT(0x1912E6BA4);
}

void sub_1912E6D68()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E8]);
  JUMPOUT(0x1912E6BB4);
}

void sub_1912E6D78()
{
  JUMPOUT(0x1912E6BB4);
}

void Espresso::adam_optimizer_builder::build_single_layer_optimizer(Espresso::adam_optimizer_builder *this)
{
  std::string **v2;
  std::string *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<std::string>::pointer end;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  size_t v30;
  std::string *p_str;
  const void *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  std::string *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  size_t v42;
  std::string *v43;
  const void *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::string *v56;
  std::string *v57;
  __int128 *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  uint64_t v64;
  unint64_t v65;
  std::vector<std::string>::pointer v66;
  __int128 v67;
  std::string *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  std::vector<std::string>::pointer v73;
  __int128 v74;
  std::string *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  __int128 v85;
  char *v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94[3];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string v100;
  std::string v101;
  uint64_t v102[2];
  std::__split_buffer<std::string> v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string v109;
  std::string __str;
  uint64_t v111[2];
  __int128 v112;
  uint64_t v113;
  std::__split_buffer<std::string> v114;
  void *__p;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__split_buffer<std::string> __v;
  void *v121;
  _BYTE *v122;
  std::string v123;
  std::string *v124;
  std::string *v125;
  unint64_t v126;
  __int128 v127;
  std::string::size_type v128;
  std::vector<std::string> v129;
  _BYTE *v130;
  std::string *v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;

  v2 = (std::string **)*((_QWORD *)this + 33);
  v3 = *v2;
  v4 = v2[1];
  v5 = ((char *)v4 - (char *)*v2) >> 3;
  v135 = -1431655765 * v5;
  v133 = *((_QWORD *)this + 35);
  v134 = *((_DWORD *)this + 72);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v91 = 0xAAAAAAAAAAAAAAABLL * v5;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v130, 0, v3, v4, 0xAAAAAAAAAAAAAAABLL * v5);
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v130, (uint64_t)v131, **((std::string ***)this + 34), *(std::string **)(*((_QWORD *)this + 34) + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 34) + 8) - **((_QWORD **)this + 34)) >> 3));
  memset(&v129, 0, sizeof(v129));
  v6 = (uint64_t *)*((_QWORD *)this + 33);
  if (v6[1] != *v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      std::operator+<char>();
      end = v129.__end_;
      if (v129.__end_ >= v129.__end_cap_.__value_)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v129.__end_ - (char *)v129.__begin_) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v129.__end_cap_.__value_ - (char *)v129.__begin_) >> 3) > v12)
          v12 = 0x5555555555555556 * (((char *)v129.__end_cap_.__value_ - (char *)v129.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v129.__end_cap_.__value_ - (char *)v129.__begin_) >> 3) >= 0x555555555555555)
          v13 = 0xAAAAAAAAAAAAAAALL;
        else
          v13 = v12;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v129.__end_cap_;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
        else
          v14 = 0;
        v15 = (std::string *)(v13 + 24 * v11);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v13;
        __v.__begin_ = v15;
        __v.__end_cap_.__value_ = (std::string *)(v13 + 24 * v14);
        v16 = v127;
        v15->__r_.__value_.__r.__words[2] = v128;
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        v128 = 0;
        v127 = 0uLL;
        __v.__end_ = v15 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v129, &__v);
        v17 = v129.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v129.__end_ = v17;
        if (SHIBYTE(v128) < 0)
          operator delete((void *)v127);
      }
      else
      {
        v10 = v127;
        v129.__end_->__r_.__value_.__r.__words[2] = v128;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
        v129.__end_ = end + 1;
      }
      ++v8;
      v6 = (uint64_t *)*((_QWORD *)this + 33);
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3));
  }
  v127 = 0uLL;
  v128 = 0;
  v125 = 0;
  v126 = 0;
  v124 = 0;
  v18 = *v6;
  if (v6[1] != *v6)
  {
    v19 = 0;
    while (1)
    {
      v20 = v18 + 24 * v19;
      v21 = Espresso::net::loaded_global_name(*((_QWORD **)this + 11), v20);
      if (*(char *)(v21 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
      }
      else
      {
        v22 = *(_OWORD *)v21;
        v123.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
        *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v22;
      }
      Espresso::net::get_global(&v112, *((_QWORD *)this + 11), (unsigned __int8 *)&v123);
      Espresso::abstract_blob_container::shape((char *)&__v, v112);
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *((unsigned int *)this + 34);
      v114 = __v;
      v116 = 0;
      v117 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v121, (uint64_t)v122, (v122 - (_BYTE *)v121) >> 2);
      Espresso::make_filled_bc(&v118, (uint64_t)this + 120, 0.0, v26, (uint64_t)&v114);
      if (__p)
      {
        v116 = __p;
        operator delete(__p);
      }
      v27 = (std::__shared_weak_count *)v119;
      v111[0] = v118;
      v111[1] = v119;
      if (v119)
      {
        v28 = (unint64_t *)(v119 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      if (*(char *)(v20 + 23) >= 0)
        v30 = *(unsigned __int8 *)(v20 + 23);
      else
        v30 = *(_QWORD *)(v20 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v30 + 9);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v30)
      {
        if (*(char *)(v20 + 23) >= 0)
          v32 = (const void *)v20;
        else
          v32 = *(const void **)v20;
        memmove(p_str, v32, v30);
      }
      strcpy((char *)p_str + v30, "/momentum");
      std::string::basic_string[abi:ne180100]<0>(&v109, "");
      Espresso::sequential_builder::load_global_op(&__str, &v109, (uint64_t *)this + 1, v111, (uint64_t)&v112);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (!v27)
          goto LABEL_53;
      }
      else if (!v27)
      {
        goto LABEL_53;
      }
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
LABEL_53:
      v35 = (_OWORD *)*((_QWORD *)&v127 + 1);
      if (*((_QWORD *)&v127 + 1) >= v128)
      {
        v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v127, (uint64_t)&v112);
      }
      else
      {
        if (SHIBYTE(v113) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)&v127 + 1), (const std::string::value_type *)v112, *((std::string::size_type *)&v112 + 1));
        }
        else
        {
          v36 = v112;
          *(_QWORD *)(*((_QWORD *)&v127 + 1) + 16) = v113;
          *v35 = v36;
        }
        v37 = (std::string *)((char *)v35 + 24);
      }
      *((_QWORD *)&v127 + 1) = v37;
      v38 = *((unsigned int *)this + 34);
      v103 = __v;
      v105 = 0;
      v106 = 0;
      v104 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v104, v121, (uint64_t)v122, (v122 - (_BYTE *)v121) >> 2);
      Espresso::make_filled_bc(&v107, (uint64_t)this + 120, 0.0, v38, (uint64_t)&v103);
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      v39 = (std::__shared_weak_count *)v108;
      v102[0] = v107;
      v102[1] = v108;
      if (v108)
      {
        v40 = (unint64_t *)(v108 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (*(char *)(v20 + 23) >= 0)
        v42 = *(unsigned __int8 *)(v20 + 23);
      else
        v42 = *(_QWORD *)(v20 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v101, v42 + 4);
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v101;
      else
        v43 = (std::string *)v101.__r_.__value_.__r.__words[0];
      if (v42)
      {
        if (*(char *)(v20 + 23) >= 0)
          v44 = (const void *)v20;
        else
          v44 = *(const void **)v20;
        memmove(v43, v44, v42);
      }
      strcpy((char *)v43 + v42, "/var");
      std::string::basic_string[abi:ne180100]<0>(&v100, "");
      Espresso::sequential_builder::load_global_op(&v101, &v100, (uint64_t *)this + 1, v102, (uint64_t)&__str);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v101.__r_.__value_.__l.__data_);
        if (v39)
        {
LABEL_81:
          v45 = (unint64_t *)&v39->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      else if (v39)
      {
        goto LABEL_81;
      }
      v47 = v125;
      if ((unint64_t)v125 >= v126)
      {
        v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v124, (uint64_t)&__str);
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v125, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v48 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v125->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
        }
        v49 = v47 + 1;
      }
      v125 = v49;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v50 = (std::__shared_weak_count *)v108;
      if (v108)
      {
        v51 = (unint64_t *)(v108 + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (SHIBYTE(v113) < 0)
        operator delete((void *)v112);
      v53 = (std::__shared_weak_count *)v119;
      if (v119)
      {
        v54 = (unint64_t *)(v119 + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      ++v19;
      v18 = **((_QWORD **)this + 33);
      if (v19 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 33) + 8) - v18) >> 3))
      {
        v57 = (std::string *)*((_QWORD *)&v127 + 1);
        v56 = (std::string *)v127;
        goto LABEL_112;
      }
    }
  }
  v57 = 0;
  v56 = 0;
LABEL_112:
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v130, (uint64_t)v131, v56, v57, 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v56) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v130, (uint64_t)v131, v124, v125, 0xAAAAAAAAAAAAAAABLL * (((char *)v125 - (char *)v124) >> 3));
  v58 = (__int128 *)((char *)this + 240);
  v59 = v131;
  if ((unint64_t)v131 >= v132)
  {
    v61 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v130, (uint64_t)v58);
  }
  else
  {
    if (*((char *)this + 263) < 0)
    {
      std::string::__init_copy_ctor_external(v131, *((const std::string::value_type **)this + 30), *((_QWORD *)this + 31));
    }
    else
    {
      v60 = *v58;
      v131->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 32);
      *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
    }
    v61 = v59 + 1;
  }
  v131 = v61;
  if ((unint64_t)v61 >= v132)
  {
    v63 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v130, (uint64_t)this + 208);
  }
  else
  {
    if (*((char *)this + 231) < 0)
    {
      std::string::__init_copy_ctor_external(v61, *((const std::string::value_type **)this + 26), *((_QWORD *)this + 27));
    }
    else
    {
      v62 = *((_OWORD *)this + 13);
      v61->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 28);
      *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v62;
    }
    v63 = v61 + 1;
  }
  v131 = v63;
  if (*(_QWORD *)(*((_QWORD *)this + 33) + 8) != **((_QWORD **)this + 33))
  {
    v64 = 0;
    v65 = 0;
    do
    {
      updated_name((uint64_t)&__v, (const void **)(v127 + v64));
      v66 = v129.__end_;
      if (v129.__end_ >= v129.__end_cap_.__value_)
      {
        v68 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v129, (uint64_t)&__v);
      }
      else
      {
        if (SHIBYTE(__v.__end_) < 0)
        {
          std::string::__init_copy_ctor_external(v129.__end_, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
        }
        else
        {
          v67 = *(_OWORD *)&__v.__first_;
          v129.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
          *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
        }
        v68 = v66 + 1;
      }
      v129.__end_ = v68;
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      ++v65;
      v70 = **((_QWORD **)this + 33);
      v69 = *(_QWORD *)(*((_QWORD *)this + 33) + 8);
      v64 += 24;
    }
    while (v65 < 0xAAAAAAAAAAAAAAABLL * ((v69 - v70) >> 3));
    if (v69 != v70)
    {
      v71 = 0;
      v72 = 0;
      do
      {
        updated_name((uint64_t)&__v, (const void **)&v124[v71].__r_.__value_.__l.__data_);
        v73 = v129.__end_;
        if (v129.__end_ >= v129.__end_cap_.__value_)
        {
          v75 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v129, (uint64_t)&__v);
        }
        else
        {
          if (SHIBYTE(__v.__end_) < 0)
          {
            std::string::__init_copy_ctor_external(v129.__end_, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
          }
          else
          {
            v74 = *(_OWORD *)&__v.__first_;
            v129.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
            *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
          }
          v75 = v73 + 1;
        }
        v129.__end_ = v75;
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        ++v72;
        ++v71;
      }
      while (v72 < 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 33) + 8) - **((_QWORD **)this + 33)) >> 3));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "adam");
  std::string::basic_string[abi:ne180100]<0>(&v123, "adam_optimizer");
  v95 = 0;
  v96 = 0;
  v97 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, (uint64_t)v130, (uint64_t)v131, 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - v130) >> 3));
  memset(v94, 0, sizeof(v94));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v94, (uint64_t)v129.__begin_, (uint64_t)v129.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v129.__end_ - (char *)v129.__begin_) >> 3));
  Espresso::sequential_builder::add<Espresso::adam_params_t>(&v98, (uint64_t *)this + 1, (uint64_t)&__v, (uint64_t)&v123, (uint64_t)&v133, v95, v96, v94);
  v76 = v99;
  if (v99)
  {
    v77 = (unint64_t *)&v99->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  *(_QWORD *)&v112 = v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  *(_QWORD *)&v112 = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(*((_QWORD *)this + 11));
  v79 = **((_QWORD **)this + 33);
  if (*(_QWORD *)(*((_QWORD *)this + 33) + 8) != v79)
  {
    v80 = 0;
    v81 = 0;
    v82 = 72 * v91;
    v83 = 48 * v91;
    do
    {
      store_updated_global((uint64_t)this + 8, v79 + v80, (uint64_t)&v129.__begin_[v80 / 0x18]);
      v84 = &v130[v83 + v80];
      if (v84[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v84, *(_QWORD *)&v130[v83 + 8 + v80]);
      }
      else
      {
        v85 = *(_OWORD *)v84;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v84 + 2);
        *(_OWORD *)&__v.__first_ = v85;
      }
      store_updated_global((uint64_t)this + 8, (uint64_t)&__v, (uint64_t)v129.__begin_ + 24 * v91 + v80);
      v86 = &v130[v82 + v80];
      if (v86[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)v86, *(_QWORD *)&v130[v82 + 8 + v80]);
      }
      else
      {
        v87 = *(_OWORD *)v86;
        v123.__r_.__value_.__r.__words[2] = *((_QWORD *)v86 + 2);
        *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v87;
      }
      store_updated_global((uint64_t)this + 8, (uint64_t)&v123, (uint64_t)&v129.__begin_[v83 / 0x18 + v80 / 0x18]);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      ++v81;
      v79 = **((_QWORD **)this + 33);
      v80 += 24;
    }
    while (v81 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 33) + 8) - v79) >> 3));
  }
  update_scalar_global_by_constant((uint64_t *)this + 1, (uint64_t)this + 208, 2u, 1.0);
  Espresso::sequential_builder::build_from_shapes((uint64_t)this + 8, *((_QWORD *)this + 1), 1, &v92);
  v88 = v93;
  if (v93)
  {
    v89 = (unint64_t *)&v93->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v124;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v127;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v129;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v130;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1912E79D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p)
{
  uint64_t v61;
  uint64_t v62;

  *(_QWORD *)(v62 - 128) = v61;
  __p = (void *)(v62 - 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v62 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)(v62 - 184) = v62 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 184));
  *(_QWORD *)(v62 - 160) = v62 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 160));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1912E7C9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t updated_name(uint64_t a1, const void **a2)
{
  size_t v3;
  uint64_t result;
  void *v5;
  const void *v6;

  if (*((char *)a2 + 23) >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a1, v3 + 8);
  if (*(char *)(result + 23) >= 0)
    v5 = (void *)result;
  else
    v5 = *(void **)result;
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "/updated");
  return result;
}

void Espresso::sequential_builder::add<Espresso::adam_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1912E7F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void init_scalar_global(uint64_t a1, std::string *a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string v16;
  uint64_t v17[2];
  void *v18;
  char v19;
  _QWORD v20[3];
  _BYTE v21[40];
  void *__p;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(unsigned int *)(a1 + 128);
  v7 = a1 + 112;
  memset(v20, 0, sizeof(v20));
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v20, 0, (uint64_t)v21);
  Espresso::make_filled_bc(&v24, v7, a3, v6, (uint64_t)v21);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  v8 = (std::__shared_weak_count *)v25;
  v17[0] = v24;
  v17[1] = v25;
  if (v25)
  {
    v9 = (unint64_t *)(v25 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  Espresso::sequential_builder::load_global_op(a2, &v16, (uint64_t *)a1, v17, (uint64_t)&v18);
  if (v19 < 0)
    operator delete(v18);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v14 = (unint64_t *)(v25 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1912E8110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

uint64_t Espresso::optimizer_builder::optimizer_builder(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, std::string *a5, float a6)
{
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unsigned int (***v27)(_QWORD);
  uint64_t v29[2];
  uint64_t v30[2];
  uint64_t v31;
  std::__shared_weak_count *v32;

  *(_QWORD *)a1 = &unk_1E2D82538;
  v12 = a1 + 8;
  v13 = *a2;
  v14 = (std::__shared_weak_count *)a2[1];
  v31 = *a2;
  v32 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v13 = *a2;
  }
  v17 = *(std::__shared_weak_count **)(v13 + 24);
  v30[0] = *(_QWORD *)(v13 + 16);
  v30[1] = (uint64_t)v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v13 = *a2;
  }
  v20 = *(_DWORD *)(**(_QWORD **)(v13 + 32) + 12);
  v29[0] = 0;
  v29[1] = 0;
  Espresso::sequential_builder::sequential_builder(a1 + 8, &v31, v30, v20, v29);
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 208), "step_global");
  *(float *)(a1 + 232) = a6;
  if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 240), a5->__r_.__value_.__l.__data_, a5->__r_.__value_.__l.__size_);
  }
  else
  {
    v26 = *(_OWORD *)&a5->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 256) = *((_QWORD *)&a5->__r_.__value_.__l + 2);
    *(_OWORD *)(a1 + 240) = v26;
  }
  *(_QWORD *)(a1 + 264) = a3;
  *(_QWORD *)(a1 + 272) = a4;
  v27 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*a2 + 16) + 8);
  if ((**v27)(v27) != 80000)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("optimizer_builder can be created only for networks on IR platform");
  init_scalar_global(v12, a5, a6);
  init_scalar_global(v12, (std::string *)(a1 + 208), 0.0);
  return a1;
}

void sub_1912E8340(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 231) < 0)
    operator delete(*v3);
  Espresso::sequential_builder::~sequential_builder(v1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::~sequential_builder(void **this)
{
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)(this + 17));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(this + 2), this[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::not_implemented_error>(a1);
}

unsigned __int8 *encrypted_file::load_file(void **a1, uint64_t a2)
{
  const char *v3;
  int v4;
  int v5;
  off_t st_size;
  unsigned __int8 *result;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  std::runtime_error *v14;
  std::string *v15;
  __int128 v16;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  int *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::runtime_error *v26;
  std::string *v27;
  __int128 v28;
  std::runtime_error *v29;
  std::string *v30;
  __int128 v31;
  int *v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::string *v39;
  __int128 v40;
  std::runtime_error *v41;
  std::string *v42;
  __int128 v43;
  unint64_t v44;
  std::runtime_error *v45;
  std::string *v46;
  __int128 v47;
  unint64_t v48;
  std::runtime_error *v49;
  std::string *v50;
  __int128 v51;
  std::runtime_error *v52;
  int *v53;
  std::string *v54;
  __int128 v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  stat v60;

  v3 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v3 = *(const char **)a2;
  v4 = open(v3, 0);
  if (v4 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)&v60);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  v60.st_size = 0;
  if (fstat(v4, &v60) == -1)
  {
    close(v5);
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v19 = std::string::append(&v57, ":");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = __error();
    std::to_string(&v56, *v21);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v56;
    else
      v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    else
      size = v56.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v58, (const std::string::value_type *)v22, size);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v18, &v59);
    __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  st_size = v60.st_size;
  a1[1] = (void *)v60.st_size;
  if ((v60.st_mode & 0xF000) != 0x8000)
  {
    close(v5);
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v27 = std::string::append(&v58, "not a regular file");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, &v59);
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a1 = mmap(0, st_size, 1, 2, v5, 0);
  close(v5);
  result = (unsigned __int8 *)*a1;
  if (*a1 == (void *)-1)
  {
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v30 = std::string::append(&v57, " error: ");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = __error();
    std::to_string(&v56, *v32);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v56;
    else
      v33 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    else
      v34 = v56.__r_.__value_.__l.__size_;
    v35 = std::string::append(&v58, (const std::string::value_type *)v33, v34);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &v59);
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = (unint64_t)a1[1];
  if (v8 <= 0x3F)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "file does not contain encrypted model header");
    goto LABEL_41;
  }
  if (*(_DWORD *)result != 1162759500)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "unrecognized magic word in the encrypted model header");
LABEL_41:
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!result[4] || result[4] >= 3u)
  {
    v13 = (unsigned __int8 *)*a1;
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v58, v13[4]);
    v15 = std::string::insert(&v58, 0, "unsupported major version = ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v14, &v59);
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (result[4] == 1)
    v9 = 64;
  else
    v9 = result[7];
  v10 = v9;
  if (v8 <= v9)
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v58, v10);
    v39 = std::string::insert(&v58, 0, "file does not contain any payload, sizeOfHeader = ");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v38, &v59);
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = *((_QWORD *)result + 1);
  if (v11 - 1 >= v8 - v9)
  {
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v58, v11);
    v42 = std::string::insert(&v58, 0, "illegal value for original file size = ");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v41, &v59);
    __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = *((_QWORD *)result + 2);
  if (v12)
  {
    if (v12 >> 52)
    {
      v44 = *((_QWORD *)result + 2);
      v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v58, v44);
      v46 = std::string::insert(&v58, 0, "illegal value for number of encrypted pages = ");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v45, &v59);
      __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v8 < v12 << 12)
    {
      v48 = *((_QWORD *)result + 2);
      v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v58, v48);
      v50 = std::string::insert(&v58, 0, "illegal number of encrypted bytes, encrypted pages = ");
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v49, &v59);
      __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (mremap_encrypted())
    {
      v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v53 = __error();
      std::to_string(&v58, *v53);
      v54 = std::string::insert(&v58, 0, "failed to setup decryption path due to error: ");
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v52, &v59);
      __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    result = (unsigned __int8 *)*a1;
  }
  a1[2] = &result[v10];
  a1[3] = (void *)v11;
  return result;
}

void sub_1912E8AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  char v41;

  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if ((v41 & 1) != 0)
    __cxa_free_exception(v40);
  _Unwind_Resume(exception_object);
}

void encrypted_file::~encrypted_file(encrypted_file *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2 != (void *)-1)
    munmap(v2, *((_QWORD *)this + 1));
  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = -1;
  *((_QWORD *)this + 3) = 0;
}

uint64_t initValkCVANetInputType(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputType");
  if (v0)
  {
    result = *v0;
    constantValkCVANetInputType = result;
  }
  else
  {
    result = constantValkCVANetInputType;
  }
  getkCVANetInputType[0] = kCVANetInputTypeFunction;
  return result;
}

uint64_t kCVANetInputTypeFunction(void)
{
  return constantValkCVANetInputType;
}

uint64_t initValkCVANetInputWidth(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputWidth");
  if (v0)
  {
    result = *v0;
    constantValkCVANetInputWidth = result;
  }
  else
  {
    result = constantValkCVANetInputWidth;
  }
  getkCVANetInputWidth[0] = kCVANetInputWidthFunction;
  return result;
}

uint64_t kCVANetInputWidthFunction(void)
{
  return constantValkCVANetInputWidth;
}

uint64_t initValkCVANetInputHeight(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputHeight");
  if (v0)
  {
    result = *v0;
    constantValkCVANetInputHeight = result;
  }
  else
  {
    result = constantValkCVANetInputHeight;
  }
  getkCVANetInputHeight[0] = kCVANetInputHeightFunction;
  return result;
}

uint64_t kCVANetInputHeightFunction(void)
{
  return constantValkCVANetInputHeight;
}

uint64_t initValkCVANetInputChannels(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputChannels");
  if (v0)
  {
    result = *v0;
    constantValkCVANetInputChannels = result;
  }
  else
  {
    result = constantValkCVANetInputChannels;
  }
  getkCVANetInputChannels[0] = kCVANetInputChannelsFunction;
  return result;
}

uint64_t kCVANetInputChannelsFunction(void)
{
  return constantValkCVANetInputChannels;
}

uint64_t initValkCVANetUnitType(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitType");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitType = result;
  }
  else
  {
    result = constantValkCVANetUnitType;
  }
  getkCVANetUnitType[0] = kCVANetUnitTypeFunction;
  return result;
}

uint64_t kCVANetUnitTypeFunction(void)
{
  return constantValkCVANetUnitType;
}

uint64_t initValkCVANetUnitTypeConvolution(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitTypeConvolution");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitTypeConvolution = result;
  }
  else
  {
    result = constantValkCVANetUnitTypeConvolution;
  }
  getkCVANetUnitTypeConvolution[0] = kCVANetUnitTypeConvolutionFunction;
  return result;
}

uint64_t kCVANetUnitTypeConvolutionFunction(void)
{
  return constantValkCVANetUnitTypeConvolution;
}

uint64_t initValkCVANetUnitAcceleratorType(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitAcceleratorType");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitAcceleratorType = result;
  }
  else
  {
    result = constantValkCVANetUnitAcceleratorType;
  }
  getkCVANetUnitAcceleratorType[0] = kCVANetUnitAcceleratorTypeFunction;
  return result;
}

uint64_t kCVANetUnitAcceleratorTypeFunction(void)
{
  return constantValkCVANetUnitAcceleratorType;
}

uint64_t initValkCVANetUnitName(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitName");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitName = result;
  }
  else
  {
    result = constantValkCVANetUnitName;
  }
  getkCVANetUnitName[0] = kCVANetUnitNameFunction;
  return result;
}

uint64_t kCVANetUnitNameFunction(void)
{
  return constantValkCVANetUnitName;
}

uint64_t initValkCVANetUnitDataType(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitDataType");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitDataType = result;
  }
  else
  {
    result = constantValkCVANetUnitDataType;
  }
  getkCVANetUnitDataType[0] = kCVANetUnitDataTypeFunction;
  return result;
}

uint64_t kCVANetUnitDataTypeFunction(void)
{
  return constantValkCVANetUnitDataType;
}

uint64_t initValkCVANetUnitBottomName(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitBottomName");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitBottomName = result;
  }
  else
  {
    result = constantValkCVANetUnitBottomName;
  }
  getkCVANetUnitBottomName[0] = kCVANetUnitBottomNameFunction;
  return result;
}

uint64_t kCVANetUnitBottomNameFunction(void)
{
  return constantValkCVANetUnitBottomName;
}

uint64_t initValkCVANetUnitBottomOutputIndex(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitBottomOutputIndex");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitBottomOutputIndex = result;
  }
  else
  {
    result = constantValkCVANetUnitBottomOutputIndex;
  }
  getkCVANetUnitBottomOutputIndex[0] = kCVANetUnitBottomOutputIndexFunction;
  return result;
}

uint64_t kCVANetUnitBottomOutputIndexFunction(void)
{
  return constantValkCVANetUnitBottomOutputIndex;
}

uint64_t initValkCVANetUnitBottomOutputChannelStart(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitBottomOutputChannelStart");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitBottomOutputChannelStart = result;
  }
  else
  {
    result = constantValkCVANetUnitBottomOutputChannelStart;
  }
  getkCVANetUnitBottomOutputChannelStart[0] = kCVANetUnitBottomOutputChannelStartFunction;
  return result;
}

uint64_t kCVANetUnitBottomOutputChannelStartFunction(void)
{
  return constantValkCVANetUnitBottomOutputChannelStart;
}

uint64_t initValkCVANetUnitInputChannels(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitInputChannels");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitInputChannels = result;
  }
  else
  {
    result = constantValkCVANetUnitInputChannels;
  }
  getkCVANetUnitInputChannels[0] = kCVANetUnitInputChannelsFunction;
  return result;
}

uint64_t kCVANetUnitInputChannelsFunction(void)
{
  return constantValkCVANetUnitInputChannels;
}

uint64_t initValkCVANetUnitOutputChannels(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitOutputChannels");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitOutputChannels = result;
  }
  else
  {
    result = constantValkCVANetUnitOutputChannels;
  }
  getkCVANetUnitOutputChannels[0] = kCVANetUnitOutputChannelsFunction;
  return result;
}

uint64_t kCVANetUnitOutputChannelsFunction(void)
{
  return constantValkCVANetUnitOutputChannels;
}

uint64_t initValkCVANetUnitKernelType(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitKernelType");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitKernelType = result;
  }
  else
  {
    result = constantValkCVANetUnitKernelType;
  }
  getkCVANetUnitKernelType[0] = kCVANetUnitKernelTypeFunction;
  return result;
}

uint64_t kCVANetUnitKernelTypeFunction(void)
{
  return constantValkCVANetUnitKernelType;
}

uint64_t initValkCVANetUnitOffsetOut(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitOffsetOut");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitOffsetOut = result;
  }
  else
  {
    result = constantValkCVANetUnitOffsetOut;
  }
  getkCVANetUnitOffsetOut[0] = kCVANetUnitOffsetOutFunction;
  return result;
}

uint64_t kCVANetUnitOffsetOutFunction(void)
{
  return constantValkCVANetUnitOffsetOut;
}

uint64_t initValkCVANetUnitKernel(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitKernel");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitKernel = result;
  }
  else
  {
    result = constantValkCVANetUnitKernel;
  }
  getkCVANetUnitKernel[0] = kCVANetUnitKernelFunction;
  return result;
}

uint64_t kCVANetUnitKernelFunction(void)
{
  return constantValkCVANetUnitKernel;
}

uint64_t initValkCVANetUnitKernelWidth(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitKernelWidth");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitKernelWidth = result;
  }
  else
  {
    result = constantValkCVANetUnitKernelWidth;
  }
  getkCVANetUnitKernelWidth[0] = kCVANetUnitKernelWidthFunction;
  return result;
}

uint64_t kCVANetUnitKernelWidthFunction(void)
{
  return constantValkCVANetUnitKernelWidth;
}

uint64_t initValkCVANetUnitKernelHeight(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitKernelHeight");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitKernelHeight = result;
  }
  else
  {
    result = constantValkCVANetUnitKernelHeight;
  }
  getkCVANetUnitKernelHeight[0] = kCVANetUnitKernelHeightFunction;
  return result;
}

uint64_t kCVANetUnitKernelHeightFunction(void)
{
  return constantValkCVANetUnitKernelHeight;
}

uint64_t initValkCVANetUnitOffsetIn(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitOffsetIn");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitOffsetIn = result;
  }
  else
  {
    result = constantValkCVANetUnitOffsetIn;
  }
  getkCVANetUnitOffsetIn[0] = kCVANetUnitOffsetInFunction;
  return result;
}

uint64_t kCVANetUnitOffsetInFunction(void)
{
  return constantValkCVANetUnitOffsetIn;
}

uint64_t initValkCVANetUnitScaleOut(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitScaleOut");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitScaleOut = result;
  }
  else
  {
    result = constantValkCVANetUnitScaleOut;
  }
  getkCVANetUnitScaleOut[0] = kCVANetUnitScaleOutFunction;
  return result;
}

uint64_t kCVANetUnitScaleOutFunction(void)
{
  return constantValkCVANetUnitScaleOut;
}

uint64_t initValkCVANetUnitShiftOut(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitShiftOut");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitShiftOut = result;
  }
  else
  {
    result = constantValkCVANetUnitShiftOut;
  }
  getkCVANetUnitShiftOut[0] = kCVANetUnitShiftOutFunction;
  return result;
}

uint64_t kCVANetUnitShiftOutFunction(void)
{
  return constantValkCVANetUnitShiftOut;
}

uint64_t initValkCVANetUnitStep(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitStep");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitStep = result;
  }
  else
  {
    result = constantValkCVANetUnitStep;
  }
  getkCVANetUnitStep[0] = kCVANetUnitStepFunction;
  return result;
}

uint64_t kCVANetUnitStepFunction(void)
{
  return constantValkCVANetUnitStep;
}

void dictionaryAddVector<int>(__CFDictionary *a1, const void *a2, char **a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  void *v9;
  const __CFAllocator *v10;
  CFNumberRef *v11;
  char *v12;
  CFArrayRef v13;
  CFTypeRef *v14;

  v5 = *a3;
  v6 = a3[1];
  v7 = v6 - *a3;
  if (v6 == *a3)
  {
    v9 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = a3[1];
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = operator new(2 * v7);
    bzero(v9, 2 * v7);
    v7 = (unint64_t)v9 + 2 * v7;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (CFNumberRef *)v9;
    do
    {
      *v11++ = CFNumberCreate(v10, kCFNumberSInt32Type, v5);
      v5 += 4;
    }
    while (v5 != v6);
    v6 = *a3;
    v12 = a3[1];
  }
  v13 = CFArrayCreate(v10, (const void **)v9, (v12 - v6) >> 2, MEMORY[0x1E0C9B378]);
  CFDictionaryAddValue(a1, a2, v13);
  if (v9 != (void *)v7)
  {
    v14 = (CFTypeRef *)v9;
    do
      CFRelease(*v14++);
    while (v14 != (CFTypeRef *)v7);
  }
  CFRelease(v13);
  if (v9)
    operator delete(v9);
}

void sub_1912E99B8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t initValkCVANetUnitOutputShape(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitOutputShape");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitOutputShape = result;
  }
  else
  {
    result = constantValkCVANetUnitOutputShape;
  }
  getkCVANetUnitOutputShape[0] = kCVANetUnitOutputShapeFunction;
  return result;
}

uint64_t kCVANetUnitOutputShapeFunction(void)
{
  return constantValkCVANetUnitOutputShape;
}

uint64_t initValkCVANetUnitParams(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitParams");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitParams = result;
  }
  else
  {
    result = constantValkCVANetUnitParams;
  }
  getkCVANetUnitParams[0] = kCVANetUnitParamsFunction;
  return result;
}

uint64_t kCVANetUnitParamsFunction(void)
{
  return constantValkCVANetUnitParams;
}

uint64_t initValkCVANetUnitTypePooling(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitTypePooling");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitTypePooling = result;
  }
  else
  {
    result = constantValkCVANetUnitTypePooling;
  }
  getkCVANetUnitTypePooling[0] = kCVANetUnitTypePoolingFunction;
  return result;
}

uint64_t kCVANetUnitTypePoolingFunction(void)
{
  return constantValkCVANetUnitTypePooling;
}

uint64_t initValkCVANetUnitPoolingType(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitPoolingType");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitPoolingType = result;
  }
  else
  {
    result = constantValkCVANetUnitPoolingType;
  }
  getkCVANetUnitPoolingType[0] = kCVANetUnitPoolingTypeFunction;
  return result;
}

uint64_t kCVANetUnitPoolingTypeFunction(void)
{
  return constantValkCVANetUnitPoolingType;
}

uint64_t initValkCVANetUnitTypeConcat(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitTypeConcat");
  if (v0)
  {
    result = *v0;
    constantValkCVANetUnitTypeConcat = result;
  }
  else
  {
    result = constantValkCVANetUnitTypeConcat;
  }
  getkCVANetUnitTypeConcat[0] = kCVANetUnitTypeConcatFunction;
  return result;
}

uint64_t kCVANetUnitTypeConcatFunction(void)
{
  return constantValkCVANetUnitTypeConcat;
}

uint64_t Espresso::CPUFP16Engine::fp16_zero(Espresso::CPUFP16Engine *this)
{
  return 0;
}

float Espresso::CPUFP16Engine::f16_to_fp32_1_slow(Espresso::CPUFP16Engine *this)
{
  float result;

  _H0 = (__int16)this;
  __asm { FCVT            S0, H0 }
  return result;
}

uint64_t Espresso::CPUFP16Engine::f32_to_fp16_1_slow(Espresso::CPUFP16Engine *this, float _S0)
{
  __asm { FCVT            H0, S0 }
  return _H0;
}

vImage_Error Espresso::CPUFP16Engine::f16_to_fp32(Espresso::CPUFP16Engine *this, unsigned __int16 *a2, vImagePixelCount a3)
{
  vImage_Buffer v4;
  vImage_Buffer src;

  src.data = this;
  src.height = 1;
  src.width = a3;
  src.rowBytes = 2 * a3;
  v4.data = a2;
  v4.height = 1;
  v4.width = a3;
  v4.rowBytes = 4 * a3;
  return vImageConvert_Planar16FtoPlanarF(&src, &v4, 0);
}

__int16 Espresso::CPUFP16Engine::f32_to_fp16@<H0>(Espresso::CPUFP16Engine *this@<X0>, float *a2@<X1>, unsigned __int16 *a3@<X2>)
{
  int v3;
  __int16 result;

  for (; a3; a3 = (unsigned __int16 *)((char *)a3 - 1))
  {
    v3 = *(_DWORD *)this;
    this = (Espresso::CPUFP16Engine *)((char *)this + 4);
    _S0 = v3;
    __asm { FCVT            H0, S0 }
    *(_WORD *)a2 = result;
    a2 = (float *)((char *)a2 + 2);
  }
  return result;
}

_WORD *Espresso::CPUFP16Engine::_f16_add(_WORD *this, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  __int16 v4;
  __int16 v6;

  for (; a4; a4 = (unsigned __int16 *)((char *)a4 - 1))
  {
    v4 = *a2++;
    _H0 = v4;
    v6 = *a3++;
    _H1 = v6;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _S0 = _S0 + _S1;
    __asm { FCVT            H0, S0 }
    *this++ = LOWORD(_S0);
  }
  return this;
}

_WORD *Espresso::CPUFP16Engine::_f16_thr(_WORD *this, unsigned __int16 *a2, unsigned __int16 *a3, float a4)
{
  __int16 v4;
  __int16 v11;

  for (; a3; a3 = (unsigned __int16 *)((char *)a3 - 1))
  {
    v4 = *a2++;
    _H1 = v4;
    __asm { FCVT            S2, H1 }
    v11 = v4;
    if (_S2 < a4)
      v11 = 0;
    *this++ = v11;
  }
  return this;
}

uint64_t Espresso::CPUFP16Engine::image2colbuffer_f32_partitioned(uint64_t this, float *a2, const unsigned __int16 *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18)
{
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  int i;
  uint64_t v30;
  _BOOL4 v31;
  BOOL v33;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v39;
  _BOOL4 v40;
  BOOL v42;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v53;
  int v54;
  int v56;
  int v57;
  int v58;
  int v59;

  v56 = a9 * a8 * (_DWORD)a3;
  if (v56 >= 1)
  {
    v59 = 0;
    v58 = 0;
    v18 = a17 * a15 + a15;
    if (v18 >= a6)
      v18 = a6;
    v19 = a16 * a14;
    if (a16 * a14 + a14 >= a7)
      v20 = a7;
    else
      v20 = a16 * a14 + a14;
    v21 = v18;
    v57 = v19 * a13 - a11;
    do
    {
      if (a17 * a15 < (int)v21)
      {
        v22 = v59;
        v23 = a17 * a15;
        do
        {
          v24 = v23 * a12 - a10 + v58 / a9 % a8;
          v26 = v24 >= 0 && v24 < a4;
          if (v19 < v20)
          {
            v27 = 0;
            v28 = (v24 + v58 / (a9 * a8) * a4) * a5;
            for (i = v57 - v58 / a9 * a9; ; i = v30 + 4 * a13)
            {
              v30 = i;
              v31 = i >= 0 && v26;
              _H0 = 0;
              v33 = v31 && i < a5;
              _H1 = 0;
              if (v33)
                _H1 = *((_WORD *)a2 + v28 + i);
              v35 = i + (uint64_t)a13;
              v36 = v30 + a13 < 0 == __OFADD__(v30, a13) && v26;
              if (v36 && v35 < a5)
                _H0 = *((_WORD *)a2 + v35 + v28);
              _VF = __OFADD__(v35, a13);
              v39 = v35 + a13;
              v40 = v39 < 0 == _VF && v26;
              _H2 = 0;
              v42 = v40 && v39 < a5;
              _H4 = 0;
              if (v42)
                _H4 = *((_WORD *)a2 + v39 + v28);
              _VF = __OFADD__(v39, a13);
              v44 = v39 + a13;
              v45 = v44 < 0 == _VF && v26;
              if (v45 && v44 < a5)
                _H2 = *((_WORD *)a2 + v44 + v28);
              __asm
              {
                FCVT            S5, H1
                FCVT            S3, H0
                FCVT            S1, H4
                FCVT            S0, H2
              }
              if (v19 + v27 + 4 >= v20)
                break;
              *(_DWORD *)(this + 4 * (v22 + (int)v27)) = _S5;
              *(_DWORD *)(this + 4 * (v22 + (int)v27 + 1)) = _S3;
              *(_DWORD *)(this + 4 * (v22 + (int)v27 + 2)) = _S1;
              *(_DWORD *)(this + 4 * (v22 + (int)v27 + 3)) = _S0;
              v27 += 4;
            }
            v53 = v19 + v27;
            v54 = ((v58 - a17) * a15 + v23 - a16) * a14 + v19 + v27;
            *(_DWORD *)(this + 4 * v54) = _S5;
            if (v53 < v20 - 1)
              *(_DWORD *)(this + 4 * (v54 + 1)) = _S3;
            if (v53 < v20 - 2)
              *(_DWORD *)(this + 4 * (v54 + 2)) = _S1;
            if (v53 < v20 - 3)
              *(_DWORD *)(this + 4 * (v54 + 3)) = _S0;
          }
          ++v23;
          v22 += a14;
        }
        while (v23 != v21);
      }
      v59 += a15 * a14;
      ++v57;
      ++v58;
    }
    while (v58 != v56);
  }
  return this;
}

void Espresso::MetalLowmemEngine::pool_kernel::~pool_kernel(id *this)
{

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

{

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, int32x2_t ***a3, int32x2_t ***a4)
{
  int32x2_t **v7;
  int32x2_t *v8;
  __int32 v9;
  int v10;
  int v11;
  id *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  const void **v18;
  id *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  int *v25;
  id *v26;
  id v27;
  int32x2_t v28;
  int v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  int v37;
  const char *v38;
  __CFString *v39;
  int64_t v40;
  uint64_t v41;
  void *v42;
  const void **v43;
  id *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  id v48;
  unint64_t v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int64x2_t v55;
  int64x2_t *v56;
  uint64_t *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  __int32 v66;
  int v67;
  uint64_t v68;
  std::runtime_error *v69;
  std::runtime_error *v70;
  std::runtime_error *exception;
  int32x2_t v72;
  id v73;
  int32x2_t v74;
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  _QWORD v78[3];
  uint64_t v79;
  _QWORD v80[3];
  uint64_t v81;
  int64x2_t v82;
  uint64_t v83;

  v7 = *a4;
  v8 = **a4;
  v9 = v8[2].i32[1];
  if (v8[3].i32[0] <= 1)
    v10 = 1;
  else
    v10 = v8[3].i32[0];
  v72 = v8[1];
  if (*(_WORD *)(a1 + 372))
    v11 = *(unsigned __int16 *)(a1 + 372);
  else
    v11 = v8[2].i32[0];
  if (v12 && (v13 = (std::__shared_weak_count *)v7[1]) != 0)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v73 = v12[21];
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v73 = v12[21];
  }
  v17 = v10 * v9;
  v18 = (const void **)*a3;
  v20 = (std::__shared_weak_count *)v18[1];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v23 = v19[21];
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    v23 = v19[21];
  }
  v25 = (int *)(a1 + 304);
  v26 = *(id **)(a1 + 8);
  v27 = *(id *)(*(_QWORD *)a2 + 152);
  v28 = (**a3)[1];
  v74 = v28;
  if (*(_DWORD *)(a1 + 388) != v17
    || *(_DWORD *)(a1 + 400) != v72.i32[0]
    || *(_QWORD *)(a1 + 404) != __PAIR64__(v11, v72.u32[1])
    || !*(_QWORD *)(a1 + 432)
    || *(_QWORD *)(a1 + 380) != *(_QWORD *)&v28)
  {
    *(int32x2_t *)(a1 + 400) = v72;
    *(_DWORD *)(a1 + 408) = v11;
    v29 = *(__int16 *)(a1 + 340);
    if (v29 != 4)
    {
      if (v29 == 2)
      {
        v33 = 0;
      }
      else
      {
        if (v29 == 1)
          goto LABEL_32;
        v28.i16[0] = *(_WORD *)(a1 + 348);
        v28.i16[2] = *(_WORD *)(a1 + 352);
        v33 = vshr_n_s32(vshl_n_s32(v28, 0x10uLL), 0x10uLL);
      }
      v30 = v74;
      goto LABEL_36;
    }
LABEL_32:
    v30 = v28;
    v31 = vmax_s32(vmla_s32(vsub_s32(*(int32x2_t *)(a1 + 308), v72), *(int32x2_t *)(a1 + 320), vadd_s32(v28, (int32x2_t)-1)), 0);
    v32 = (int32x2_t)vshr_n_u32((uint32x2_t)v31, 1uLL);
    v33 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 340) == 1), 0x1FuLL)), (int8x8_t)v32, (int8x8_t)vsub_s32(v31, v32));
LABEL_36:
    *(int32x2_t *)(a1 + 392) = v33;
    *(int32x2_t *)(a1 + 380) = v30;
    *(_DWORD *)(a1 + 388) = v17;
    v34 = v11 - 1;
    if (v11 < 1)
      v34 = v11 + 2;
    *(_DWORD *)(a1 + 412) = (v34 >> 2) + 1;
    if (!*(_WORD *)(a1 + 368))
      *(_WORD *)(a1 + 368) = v11;
    if (!*(_WORD *)(a1 + 370))
      *(_WORD *)(a1 + 370) = v11;
    v35 = objc_msgSend(v26[18], "newBufferWithBytes:length:options:", a1 + 304, 112, 0, *(_QWORD *)&v72);
    v36 = *(void **)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v35;

  }
  v37 = *v25;
  if (*v25 == 2)
  {
    if (objc_msgSend(v23, "pixelFormat") != 115)
    {
      if (objc_msgSend(v23, "pixelFormat") == 125)
      {
        v38 = "l2_pool_f32_pack";
        goto LABEL_67;
      }
      if (objc_msgSend(v23, "pixelFormat") != 72)
        goto LABEL_109;
    }
    v38 = "l2_pool_f16_pack";
    goto LABEL_67;
  }
  if (v37 != 1)
  {
    if (v37)
      goto LABEL_109;
    if (objc_msgSend(v23, "pixelFormat") != 115)
    {
      if (objc_msgSend(v23, "pixelFormat") == 125)
      {
        v38 = "avg_pool_f32_pack";
LABEL_67:
        objc_msgSend(v26[20], "kernelForFunction:cacheString:withConstants:", v38, 0, 0, *(_QWORD *)&v72);
        v41 = objc_claimAutoreleasedReturnValue();
        v39 = 0;
        goto LABEL_68;
      }
      if (objc_msgSend(v23, "pixelFormat") != 72)
        goto LABEL_109;
    }
    v38 = "avg_pool_f16_pack";
    goto LABEL_67;
  }
  v39 = CFSTR("max_pool_f16_pack");
  if (objc_msgSend(v23, "pixelFormat") != 115)
  {
    if (objc_msgSend(v23, "pixelFormat") == 125)
    {
      v39 = CFSTR("max_pool_f32_pack");
    }
    else if (objc_msgSend(v23, "pixelFormat") == 72)
    {
      v39 = CFSTR("max_pool_f16_pack");
    }
    else
    {
      v39 = 0;
    }
  }
  v40 = (char *)a3[1] - (char *)*a3;
  if (*(_DWORD *)(a1 + 376) && v40 != 32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v40 == 32)
  {
    objc_msgSend(CFSTR("arg"), "stringByAppendingString:", v39);
    v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v26, &v39->isa);
  v41 = objc_claimAutoreleasedReturnValue();
LABEL_68:
  if (!v41)
  {
LABEL_109:
    v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v69, "Kernel not found");
    __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v42 = (void *)v41;
  objc_msgSend(v27, "setComputePipelineState:", v41);
  objc_msgSend(v27, "setTexture:atIndex:", v23, 0);
  objc_msgSend(v27, "setTexture:atIndex:", v73, 1);
  v43 = (const void **)*a3;
  if ((char *)a3[1] - (char *)*a3 == 32)
  {
    v45 = (std::__shared_weak_count *)v43[3];
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v48 = v44[21];
      do
        v49 = __ldaxr(v46);
      while (__stlxr(v49 - 1, v46));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    else
    {
      v48 = v44[21];
    }
    objc_msgSend(v27, "setTexture:atIndex:", v48, 2, *(_QWORD *)&v72);
    if (objc_msgSend(v48, "pixelFormat") != 124)
    {
      v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v70, "Invalid texture");
      __cxa_throw(v70, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }

  }
  objc_msgSend(v27, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 432), 0, 0, *(_QWORD *)&v72);
  if (v74.i32[0] > 3 || v74.i32[1] > 3)
  {
    v58 = v74.i32[1] - 1;
    if (v74.i32[0] > 11 || v74.i32[1] > 11)
    {
      v66 = v74.i32[0] - 1;
      v67 = v11 - 1;
      if (v11 < 1)
        v67 = v11 + 2;
      v68 = v17 + v17 * (v67 >> 2);
      if (v74.i32[0] > 31 || v74.i32[1] > 31)
      {
        if (v58 < 0)
          v58 = v74.i32[1] + 14;
        v76[0] = v66 / 16 + 1;
        v76[1] = (v58 >> 4) + 1;
        v76[2] = v68;
        v75 = 16;
        v55 = (int64x2_t)xmmword_191A932B0;
        v56 = (int64x2_t *)v76;
        v57 = &v75;
      }
      else
      {
        if (v58 < 0)
          v58 = v74.i32[1] + 6;
        v78[0] = v66 / 8 + 1;
        v78[1] = (v58 >> 3) + 1;
        v78[2] = v68;
        v77 = 8;
        v55 = (int64x2_t)xmmword_191A932C0;
        v56 = (int64x2_t *)v78;
        v57 = &v77;
      }
    }
    else
    {
      v59 = v74.i32[0] - 1;
      if (v74.i32[0] < 1)
        v59 = v74.i32[0] + 2;
      v60 = (v59 >> 2) + 1;
      if (v58 < 0)
        v58 = v74.i32[1] + 2;
      v61 = (v58 >> 2) + 1;
      v62 = v11 - 1;
      if (v11 < 1)
        v62 = v11 + 2;
      v63 = v17 + v17 * (v62 >> 2);
      v64 = v63 - 1;
      v52 = v63 < 1;
      v65 = v63 + 2;
      if (!v52)
        v65 = v64;
      v80[0] = v60;
      v80[1] = v61;
      v80[2] = (v65 >> 2) + 1;
      v79 = 4;
      v55 = vdupq_n_s64(4uLL);
      v56 = (int64x2_t *)v80;
      v57 = &v79;
    }
  }
  else
  {
    v50 = v11 - 1;
    if (v11 < 1)
      v50 = v11 + 2;
    v51 = v17 + v17 * (v50 >> 2);
    v53 = v51 - 1;
    v52 = v51 < 1;
    v54 = v51 + 14;
    if (!v52)
      v54 = v53;
    v82 = vdupq_n_s64(1uLL);
    v83 = (v54 >> 4) + 1;
    v81 = v74.i32[0];
    v55 = vdupq_n_s64(0x10uLL);
    v55.i64[0] = v74.i32[1];
    v56 = &v82;
    v57 = &v81;
  }
  *(int64x2_t *)(v57 + 1) = v55;
  objc_msgSend(v27, "dispatchThreadgroups:threadsPerThreadgroup:", v56);

}

void sub_1912EA8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  __cxa_free_exception(v15);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::pool_kernel::blob_options(int a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _QWORD *v5;

  if (a2 == 1 && a1)
  {
    v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1E2DBE228;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_DWORD *)v5 + 12) = 1065353216;
    v5[7] = 0x1FFFFFFFFLL;
    v5[12] = 0;
    v5[13] = 0;
    v5[8] = 0;
    v5[9] = 0;
    *((_BYTE *)v5 + 88) = 0;
    v5[10] = 0;
    a3[1] = v5;
    *((_BYTE *)v5 + 32) = 1;
    *((_DWORD *)v5 + 9) = 3;
    v5[3] = &off_1E2D9B4D8;
    *a3 = v5 + 3;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

uint64_t Espresso::MetalLowmemEngine::pool_kernel::number_of_top_blobs(Espresso::MetalLowmemEngine::pool_kernel *this)
{
  if (*((_DWORD *)this + 94))
    return 2;
  else
    return 1;
}

uint64_t Espresso::base_kernel::estimated_gflop(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(a1, a2, 0);
}

void Espresso::base_kernel::wisdom_key(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void Espresso::base_kernel::wisdom_tunables(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t Espresso::base_kernel::dump_weight_blob@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 *v10;

  result = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a1 + 160), a2);
  if (result)
  {
    v10 = a2;
    result = (uint64_t)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 152), a2, &v10);
    v7 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

const char *Espresso::generic_pool_kernel::kernel_type_str(Espresso::generic_pool_kernel *this)
{
  return "pool";
}

const void **Espresso::base_kernel::unpacked_name@<X0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  return std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 72), a2, a3);
}

double Espresso::base_kernel::get_output_to_input_blob_aliases@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

void Espresso::abstract_kernel_with_weights_::get_weights_blob(Espresso::abstract_kernel_with_weights_ *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1912EAB20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_kernel_with_weights_::num_weights_blob(Espresso::abstract_kernel_with_weights_ *this)
{
  return 0;
}

_QWORD *Espresso::abstract_kernel_with_weights_::set_weight_blob(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, &v6);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4 + 7, *a3, a3[1]);
}

uint64_t Espresso::abstract_kernel_with_weights_::__set_weight_cpu_blob(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t *v6;
  __int128 *v8;

  v8 = a3;
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), a3, &v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[7] + 48))(v6[7], a2, a4);
}

void Espresso::abstract_kernel_with_weights_::create_all_weights(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char **v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  char **v20;
  char *v21[2];
  __int128 *v22;

  (*(void (**)(char ***__return_ptr))(*(_QWORD *)a1 + 368))(&v20);
  v4 = v20;
  if (v20 != v21)
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a1 + 288), v4 + 4))
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8)
                                                                                + 24))(&v18, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a1 + 8, a2);
        v8 = v18;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, char **))(*(_QWORD *)a1 + 376))(&v16, a1, v4 + 4);
        (*(void (**)(uint64_t, char **, uint64_t *))(*(_QWORD *)v8 + 16))(v8, v4 + 7, &v16);
        v9 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v22 = (__int128 *)(v4 + 4);
        v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), v4 + 4, &v22);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v12 + 7, v18, (uint64_t)v19);
        v13 = v19;
        if (v19)
        {
          v14 = (unint64_t *)&v19->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      v5 = v4[1];
      if (v5)
      {
        do
        {
          v6 = (char **)v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char **)v4[2];
          v7 = *v6 == (char *)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v21);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v20, v21[0]);
}

void sub_1912EAD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, char *a14)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_weights_::create_weights_named(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error *exception;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  char *v19;
  std::string v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  char *v25;
  std::string *v26;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 368))(&v24);
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v25, a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v20);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 368))(&v18, a1);
  v6 = (__int128 *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v18, a2);
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](&v20, v6 + 2);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v18, v19);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8)
                                                                          + 24))(&v18, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a1 + 8, a3);
  v7 = v18;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 376))(&v16, a1, &v20);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v21, &v16);
  v8 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v26 = &v20;
  v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), &v20, (__int128 **)&v26);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v11 + 7, v18, (uint64_t)v19);
  v12 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v13 = (unint64_t *)(v19 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v24, v25);
}

void sub_1912EAFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  int v20;
  uint64_t v21;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v21 - 64, *(char **)(v21 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void Espresso::abstract_kernel_with_weights_::weight_names_and_shapes(Espresso::abstract_kernel_with_weights_ *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Unexpected not-implemented function ");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1912EB074(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_weights_::blob_container_options_for_weight(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1912EB154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,Espresso::layer_shape>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1912EB2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::abstract_blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::abstract_blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::abstract_blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MetalLowmemEngine::lrn_kernel::~lrn_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::lrn_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const void **v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  id v17;
  unint64_t v18;
  const void **v19;
  id *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  id v24;
  unint64_t v25;
  id *v26;
  id v27;
  const __CFString *v28;
  NSString *v29;
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  std::runtime_error *exception;
  int v41;
  int v42;
  int64x2_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v7 = **a3;
  if ((int)v7[6] <= 1)
    v8 = 1;
  else
    v8 = v7[6];
  v10 = v7[2];
  v9 = v7[3];
  v11 = v7[4];
  v41 = v7[5];
  v42 = v8;
  v12 = *a4;
  v14 = (std::__shared_weak_count *)v12[1];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v13[21];
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = v13[21];
  }
  v19 = *a3;
  v21 = (std::__shared_weak_count *)v19[1];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v24 = v20[21];
    do
      v25 = __ldaxr(v22);
    while (__stlxr(v25 - 1, v22));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    v24 = v20[21];
  }
  v26 = *(id **)(a1 + 8);
  v27 = *(id *)(*(_QWORD *)a2 + 152);
  if (objc_msgSend(v24, "pixelFormat") == 115 || objc_msgSend(v24, "pixelFormat") == 72)
  {
    v28 = CFSTR("f16");
  }
  else
  {
    objc_msgSend(v24, "pixelFormat");
    v28 = CFSTR("f32");
  }
  switch(*(_DWORD *)(a1 + 288))
  {
    case 5:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("lrn_across_channel_%@_pack4_size_5"), v28);
      v29 = (NSString *)objc_claimAutoreleasedReturnValue();
      Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v26, v29);
      v30 = objc_claimAutoreleasedReturnValue();
      break;
    case 7:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("lrn_across_channel_%@_pack4_size_7"), v28);
      v29 = (NSString *)objc_claimAutoreleasedReturnValue();
      Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v26, v29);
      v30 = objc_claimAutoreleasedReturnValue();
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("lrn_across_channel_%@_pack4"), v28);
      v29 = (NSString *)objc_claimAutoreleasedReturnValue();
      Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v26, v29);
      v30 = objc_claimAutoreleasedReturnValue();
      break;
  }
  v31 = (void *)v30;

  if (*(_DWORD *)(a1 + 300) != v10
    || *(_DWORD *)(a1 + 304) != v9
    || *(_DWORD *)(a1 + 292) != v11
    || !*(_QWORD *)(a1 + 312))
  {
    *(_DWORD *)(a1 + 300) = v10;
    *(_DWORD *)(a1 + 304) = v9;
    *(_DWORD *)(a1 + 292) = v11;
    v32 = v11 - 1;
    if (v11 < 1)
      v32 = v11 + 2;
    *(_DWORD *)(a1 + 296) = (v32 >> 2) + 1;
    v33 = objc_msgSend(v26[18], "newBufferWithBytes:length:options:", a1 + 280, 28, 0);
    v34 = *(void **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v33;

  }
  if (!v31)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v27, "setComputePipelineState:", v31);
  objc_msgSend(v27, "setTexture:atIndex:", v24, 0);
  objc_msgSend(v27, "setTexture:atIndex:", v17, 1);
  objc_msgSend(v27, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 312), 0, 0);
  v35 = v10 - 1;
  if (v10 < 1)
    v35 = v10 + 14;
  v36 = (v35 >> 4) + 1;
  v37 = v9 - 1;
  if (v9 < 1)
    v37 = v9 + 14;
  v38 = (v37 >> 4) + 1;
  v39 = v11 - 1;
  if (v11 < 1)
    v39 = v11 + 2;
  v45[0] = v36;
  v45[1] = v38;
  v45[2] = v42 * v41 + v42 * v41 * (v39 >> 2);
  v43 = vdupq_n_s64(0x10uLL);
  v44 = 1;
  objc_msgSend(v27, "dispatchThreadgroups:threadsPerThreadgroup:", v45, &v43);

}

void sub_1912EB80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::number_of_top_blobs(Espresso::base_kernel *this)
{
  return 1;
}

uint64_t Espresso::base_kernel::supports_weight_key()
{
  return 0;
}

const char *Espresso::generic_lrn_kernel::kernel_type_str(Espresso::generic_lrn_kernel *this)
{
  return "lrn";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::lrn_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

_QWORD *std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*,Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1912EB8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*,Espresso::layer_shape*,Espresso::layer_shape*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a4;
  v12 = a4;
  v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      v8 = v6[1];
      *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 + 4);
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v4 + 40), *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
      v4 = v13 + 64;
      v13 += 64;
      v6 += 4;
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1912EB9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::layer_shape>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<Espresso::layer_shape>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 64;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 6);
}

void Espresso::MetalLowmemEngine::concat_kernel::~concat_kernel(Espresso::MetalLowmemEngine::concat_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D7DEB0;
  v2 = (void **)((char *)this + 368);
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D7DEB0;
  v2 = (void **)((char *)this + 368);
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::concat_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t **a4)
{
  const void **v4;
  uint64_t *v8;
  unint64_t v9;
  char v10;
  const void **v11;
  void **v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  BOOL v16;
  id v17;
  unint64_t *v18;
  unint64_t v19;
  id *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void **v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t *v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t *v69;
  int v70;
  int v71;
  int v72;
  void *v73;
  unsigned int v74;
  const char *v75;
  void *v76;
  NSString *v77;
  uint64_t j;
  uint64_t v79;
  int64x2_t *v80;
  _QWORD *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  _BOOL4 v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int64x2_t *v105;
  _QWORD *v106;
  std::runtime_error *v107;
  std::runtime_error *exception;
  uint64_t v109;
  int64x2_t v110;
  int64x2_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64x2_t v115;
  _BOOL4 v116;
  int v117;
  int64x2_t v118;
  int v119;
  int64x2_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  id *v130;
  _BOOL4 v131;
  int v132;
  int v133;
  int v134;
  id v135;
  unint64_t v136;
  int v137;
  id v138;
  void *v139;
  int64x2_t v140;
  _QWORD v141[3];
  int64x2_t v142;
  _QWORD v143[3];
  int64x2_t v144;
  _QWORD v145[3];
  int64x2_t v146;
  _QWORD v147[3];
  int64x2_t v148;
  _QWORD v149[3];
  void **v150[2];
  char *v151[4];

  v4 = *a3;
  if (a3[1] != *a3)
  {
    memset(v151, 0, 24);
    v8 = *a4;
    if (a4[1] == *a4)
    {
      v10 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (const void **)&v8[2 * v9];
        v150[0] = v12;
        v13 = (std::__shared_weak_count *)v11[1];
        v150[1] = (void **)&v13->__vftable;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        v16 = ((_DWORD)v12[2] & 3) != 0;
        v17 = v12[21];
        std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::push_back[abi:ne180100](v151, v17);

        if (v13)
        {
          v18 = (unint64_t *)&v13->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v10 |= v16;
        ++v9;
        v8 = *a4;
      }
      while (v9 < ((char *)a4[1] - (char *)*a4) >> 4);
      v4 = *a3;
    }
    v21 = (std::__shared_weak_count *)v4[1];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v135 = v20[21];
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      v135 = v20[21];
    }
    v130 = *(id **)(a1 + 8);
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v150, *a2);
    v25 = v150[0];
    v26 = **a4;
    v132 = *(_DWORD *)(v26 + 8);
    v133 = *(_DWORD *)(v26 + 12);
    v27 = **a3;
    LODWORD(v28) = v27[6];
    if ((int)v28 <= 1)
      v28 = 1;
    else
      v28 = v28;
    v29 = v27[4];
    v123 = v28 * (int)v27[5];
    if ((v10 & 1) != 0)
    {
      v30 = *(_QWORD *)(a1 + 368);
      for (i = *(_QWORD *)(a1 + 376); i != v30; i -= 8)
      {
        v32 = *(void **)(i - 8);

      }
      *(_QWORD *)(a1 + 376) = v30;
      objc_msgSend(v130[20], "kernelForFunction:cacheString:withConstants:", "concat_kernel_singe_channel", 0, 0);
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      v86 = v29 - 1;
      if (v29 < 1)
        v86 = v29 + 2;
      if (v29 >= -2)
      {
        v88 = v132 < 8 && v133 < 8;
        v131 = v88;
        v89 = v132 - 1;
        v90 = v133 - 1;
        if (v132 >= 1)
          v91 = v132 - 1;
        else
          v91 = v132 + 14;
        if (v132 < 1)
          v89 = v132 + 2;
        if (v90 >= 0)
          v92 = v133 - 1;
        else
          v92 = v133 + 14;
        v93 = v133 + 2;
        if (v90 >= 0)
          v93 = v133 - 1;
        if (!v139)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Kernel not found");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v94 = 0;
        v95 = 0;
        v96 = 0;
        v97 = v86 >> 2;
        v137 = v97 + 1;
        v127 = (v91 >> 4) + 1;
        v124 = (v89 >> 2) + 1;
        v126 = (v92 >> 4) + 1;
        v122 = (v93 >> 2) + 1;
        v129 = v97 & ~(v97 >> 31);
        v118 = vdupq_n_s64(0x10uLL);
        v120 = vdupq_n_s64(4uLL);
        do
        {
          objc_msgSend(v25, "setComputePipelineState:", v139);
          objc_msgSend(v25, "setTexture:atIndex:", v135, 0);
          v98 = 0;
          *(_DWORD *)(a1 + 312) = v94;
          *(_DWORD *)(a1 + 316) = v137;
          *(_DWORD *)(a1 + 308) = v133;
          *(_DWORD *)(a1 + 304) = v132;
          do
          {
            v99 = *(_DWORD *)((*a4)[2 * v96] + 16);
            *(_DWORD *)(a1 + 324 + 4 * v98) = v95;
            switch((int)v98)
            {
              case 0:
                v100 = v99 - 1;
                if (v99 < 1)
                  v100 = v99 + 2;
                *(_DWORD *)(a1 + 288) = (v100 >> 2) + 1;
                break;
              case 1:
                v103 = v99 - 1;
                if (v99 < 1)
                  v103 = v99 + 2;
                *(_DWORD *)(a1 + 292) = (v103 >> 2) + 1;
                break;
              case 2:
                v101 = v99 - 1;
                if (v99 < 1)
                  v101 = v99 + 2;
                *(_DWORD *)(a1 + 296) = (v101 >> 2) + 1;
                break;
              case 3:
                v102 = v99 - 1;
                if (v99 < 1)
                  v102 = v99 + 2;
                *(_DWORD *)(a1 + 300) = (v102 >> 2) + 1;
                break;
              default:
                break;
            }
            objc_msgSend(v25, "setTexture:atIndex:", *(_QWORD *)&v151[0][8 * v96], ++v98);
            if (++v95 >= v99)
            {
              v104 = (char *)a4[1] - (char *)*a4;
              if (v96 + 1 < (unint64_t)(v104 >> 4))
                ++v96;
              else
                v96 = ((unint64_t)v104 >> 4) - 1;
              v95 = 0;
            }
          }
          while (v98 != 4);
          objc_msgSend(v25, "setBytes:length:atIndex:", a1 + 280, 64, 0);
          if (v131)
          {
            v149[0] = v124;
            v149[1] = v122;
            v149[2] = v123;
            v105 = &v148;
            v106 = v149;
            v148 = v120;
          }
          else
          {
            v147[0] = v127;
            v147[1] = v126;
            v147[2] = v123;
            v105 = &v146;
            v106 = v147;
            v146 = v118;
          }
          v105[1].i64[0] = 1;
          objc_msgSend(v25, "dispatchThreadgroups:threadsPerThreadgroup:", v106);
          v50 = v94++ == v129;
        }
        while (!v50);
      }

      goto LABEL_151;
    }
    v33 = (char *)a4[1] - (char *)*a4;
    if (!v33)
    {
LABEL_151:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)v150);
      v150[0] = (void **)v151;
      std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](v150);
      return;
    }
    v136 = 0;
    v34 = 0;
    v35 = 0;
    v36 = v33 >> 4;
    v37 = a1 + 368;
    v38 = v29 - 1;
    if (v29 < 1)
      v38 = v29 + 2;
    v119 = (v38 >> 2) + 1;
    v39 = v132 < 4 && v133 < 4;
    v40 = v39;
    v117 = v40;
    v42 = v132 < 8 && v133 < 8;
    v116 = v42;
    v43 = v132 - 1;
    v44 = v132 + 14;
    v45 = v133 - 1;
    if (v132 >= 1)
      v44 = v132 - 1;
    v114 = (v44 >> 4) + 1;
    v46 = v133 + 14;
    if (v132 < 1)
      v43 = v132 + 2;
    if (v45 >= 0)
      v46 = v133 - 1;
    v112 = (v43 >> 2) + 1;
    v113 = (v46 >> 4) + 1;
    v47 = v133 + 2;
    if (v45 >= 0)
      v47 = v133 - 1;
    v115 = vdupq_n_s64(1uLL);
    v110 = vdupq_n_s64(0x10uLL);
    v111 = vdupq_n_s64(4uLL);
    v109 = (v47 >> 2) + 1;
    while (1)
    {
      v48 = *a4;
      v49 = *(_DWORD *)((*a4)[2 * v35] + 16);
      if (v35)
        v50 = 1;
      else
        v50 = *(unsigned __int16 *)(a1 + 320) == 0;
      if (!v50)
        v49 = *(unsigned __int16 *)(a1 + 320);
      v51 = v49 - 1;
      v39 = v49 < 1;
      v52 = v49 + 2;
      if (!v39)
        v52 = v51;
      v53 = (v52 >> 2) + 1;
      *(_DWORD *)(a1 + 288) = v53;
      v54 = v53 + v34;
      if (v36 == 1)
      {
        v55 = 0;
        v56 = 1;
      }
      else
      {
        v57 = &v48[2 * v35];
        v58 = *(_DWORD *)(v57[2] + 16);
        v59 = v58 - 1;
        v39 = v58 < 1;
        v60 = v58 + 2;
        if (!v39)
          v60 = v59;
        v61 = (v60 >> 2) + 1;
        *(_DWORD *)(a1 + 292) = v61;
        v54 += v61;
        if (v36 < 3)
        {
          v128 = 2;
          v55 = 1;
          goto LABEL_72;
        }
        v62 = *(_DWORD *)(v57[4] + 16);
        v63 = v62 - 1;
        v39 = v62 < 1;
        v64 = v62 + 2;
        if (!v39)
          v64 = v63;
        v65 = (v64 >> 2) + 1;
        *(_DWORD *)(a1 + 296) = v65;
        v54 += v65;
        if (v36 == 3)
        {
          v55 = 0;
          v56 = 3;
        }
        else
        {
          v55 = 0;
          v82 = *(_DWORD *)(v48[2 * v35 + 6] + 16);
          v83 = v82 - 1;
          v39 = v82 < 1;
          v84 = v82 + 2;
          if (!v39)
            v84 = v83;
          v85 = (v84 >> 2) + 1;
          *(_DWORD *)(a1 + 300) = v85;
          v54 += v85;
          v56 = 4;
        }
      }
      v128 = v56;
LABEL_72:
      v66 = *(_QWORD *)(a1 + 368);
      if (v136 >= (*(_QWORD *)(a1 + 376) - v66) >> 3)
      {
        v67 = v36;
        v68 = v54;
        v69 = (uint64_t *)v37;
        std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::resize(v37, v136 + 1);
        v66 = *v69;
        v54 = v68;
        v36 = v67;
      }
      v138 = *(id *)(v66 + 8 * v136);
      v134 = v54 - v34;
      if (v119 != *(_DWORD *)(a1 + 284) || !v138 || *(_DWORD *)(a1 + 308) != v133 || *(_DWORD *)(a1 + 304) != v132)
      {
        *(_DWORD *)(a1 + 312) = v34;
        *(_DWORD *)(a1 + 284) = v134;
        *(_DWORD *)(a1 + 308) = v133;
        *(_DWORD *)(a1 + 304) = v132;
        v70 = *((_DWORD *)**a3 + 4);
        v71 = v70 - 1;
        v39 = v70 < 1;
        v72 = v70 + 2;
        if (!v39)
          v72 = v71;
        *(_DWORD *)(a1 + 316) = (v72 >> 2) + 1;
        v73 = (void *)objc_msgSend(v130[18], "newBufferWithBytes:length:options:", a1 + 280, 64, 0);

        objc_storeStrong((id *)(*(_QWORD *)(a1 + 368) + 8 * v136), v73);
        v138 = v73;
      }
      v125 = v54;
      if (v55)
      {
        v74 = v128;
        if (objc_msgSend(v135, "pixelFormat") == 125)
          v75 = "concat_kernel_f32";
        else
          v75 = "concat_kernel_f16";
        objc_msgSend(v130[20], "kernelForFunction:cacheString:withConstants:", v75, 0, 0);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v74 = v128;
        if (objc_msgSend(v135, "pixelFormat") == 125)
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("concat_kernel_f32_%dinputs"), v128);
        else
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("concat_kernel_f16_%dinputs"), v128);
        v77 = (NSString *)objc_claimAutoreleasedReturnValue();
        Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v130, v77);
        v76 = (void *)objc_claimAutoreleasedReturnValue();

      }
      if (!v76)
      {
        v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v107, "Kernel not found");
        __cxa_throw(v107, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      objc_msgSend(v25, "setComputePipelineState:", v76);
      objc_msgSend(v25, "setTexture:atIndex:", v135, 0);
      for (j = 0; v74 != j; objc_msgSend(v25, "setTexture:atIndex:", v79, j))
        v79 = *(_QWORD *)&v151[0][8 * v35 + 8 * j++];
      objc_msgSend(v25, "setBuffer:offset:atIndex:", v138, 0, 0);
      if (v117)
      {
        v145[0] = v132;
        v145[1] = v133;
        v145[2] = v134 * (int)v123;
        v80 = &v144;
        v81 = v145;
        v144 = v115;
      }
      else if (v116)
      {
        v143[0] = v112;
        v143[1] = v109;
        v143[2] = v134 * (int)v123;
        v80 = &v142;
        v81 = v143;
        v142 = v111;
      }
      else
      {
        v141[0] = v114;
        v141[1] = v113;
        v141[2] = v134 * (int)v123;
        v80 = &v140;
        v81 = v141;
        v140 = v110;
      }
      v80[1].i64[0] = 1;
      objc_msgSend(v25, "dispatchThreadgroups:threadsPerThreadgroup:", v81);
      ++v136;
      v35 += v74;
      v36 -= v74;

      v34 = v125;
      v37 = a1 + 368;
      if (!v36)
        goto LABEL_151;
    }
  }
}

void sub_1912EC678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  void *v40;
  uint64_t v41;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v41 - 128));
  *(_QWORD *)(v41 - 128) = v41 - 112;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 128));
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v3 = *a3;
  if (*a3 == a3[1])
  {
    v5 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1)
        v4 = 4;
      else
        v4 = 5;
    }
    v5 = v4 > 3;
  }
  return !*(_BYTE *)(a1 + 340) && v5;
}

const char *Espresso::generic_concat_kernel::kernel_type_str(Espresso::generic_concat_kernel *this)
{
  return "concat";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::concat_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t Espresso::temporary_mtl_encoder::temporary_mtl_encoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  objc_storeStrong((id *)a1, *(id *)(a2 + 152));
  if (!*(_QWORD *)a1)
  {
    objc_msgSend(*(id *)(a2 + 144), "computeCommandEncoder");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(id *)a1;
    *(_QWORD *)a1 = v4;

    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

void sub_1912EC7E0(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::push_back[abi:ne180100](char **a1, void *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  char *v19;
  void *v20;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (v5 - *a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = a2;
    v6 = v12 + 8;
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    v19 = (char *)v17.i64[1];
    v18 = (char *)v17.i64[0];
    while (v19 != v18)
    {
      v20 = (void *)*((_QWORD *)v19 - 1);
      v19 -= 8;

    }
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v6 = v5 + 8;
  }
  a1[1] = v6;
}

void std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int64x2_t v16;
  _QWORD *v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v17 = &v4[a2];
      while (v3 != v17)
      {
        v18 = (void *)*--v3;

      }
      *(_QWORD *)(a1 + 8) = v17;
    }
  }
  else
  {
    v6 = a2 - v5;
    v7 = *(_QWORD *)(a1 + 16);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 3)
    {
      bzero(*(void **)(a1 + 8), 8 * v6);
      *(_QWORD *)(a1 + 8) = &v3[v6];
    }
    else
    {
      if (a2 >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v8 = v7 - (_QWORD)v4;
      v9 = v8 >> 2;
      if (v8 >> 2 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(8 * v10);
      v12 = &v11[8 * v5];
      v13 = &v11[8 * v10];
      bzero(v12, 8 * v6);
      v14 = &v12[8 * v6];
      if (v3 == v4)
      {
        v16 = vdupq_n_s64((unint64_t)v3);
      }
      else
      {
        do
        {
          v15 = *--v3;
          *v3 = 0;
          *((_QWORD *)v12 - 1) = v15;
          v12 -= 8;
        }
        while (v3 != v4);
        v16 = *(int64x2_t *)a1;
      }
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v13;
      v20 = (char *)v16.i64[1];
      v19 = (char *)v16.i64[0];
      while (v20 != v19)
      {
        v21 = (void *)*((_QWORD *)v20 - 1);
        v20 -= 8;

      }
      if (v19)
        operator delete(v19);
    }
  }
}

void Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(id *this)
{
  if (*((_BYTE *)this + 8))
    objc_msgSend(*this, "endEncoding");

}

void std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::MetalLowmemEngine::elementwise_kernel::~elementwise_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::elementwise_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t **a4)
{
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  const void **v10;
  const void *v11;
  id *v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  int v22;
  int v23;
  const void **v24;
  const void *v25;
  unsigned int *v26;
  unsigned int *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  int v44;
  signed int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _DWORD *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  BOOL v70;
  int v71;
  int v72;
  int *v73;
  float *v74;
  uint64_t v75;
  void *v76;
  MTLFunctionConstantValues *v77;
  void **v78;
  int v79;
  std::string *v80;
  __int128 v81;
  uint64_t v82;
  void **v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  void *v142;
  std::string *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  void *v151;
  const void **v152;
  id *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  id v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  id *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  id v166;
  unint64_t v167;
  std::string::size_type *v168;
  std::string::size_type v169;
  std::string::size_type v170;
  unint64_t *v171;
  unint64_t v172;
  std::string::size_type v173;
  std::string::size_type v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *size;
  unint64_t *v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::runtime_error *exception;
  std::runtime_error *v193;
  uint64_t v194;
  int v195;
  int v196;
  id v197;
  const void ***v198;
  int v199;
  id v200;
  int64x2_t v201;
  uint64_t v202;
  _QWORD v203[3];
  std::string v204;
  void *__p;
  void *v206;
  void *v207[2];
  _BYTE v208[20];
  int v209;
  void *v210;
  void *v211;
  unsigned int *v212;
  std::__shared_weak_count *v213;
  unsigned int *v214;
  std::__shared_weak_count *v215;
  id *v216;
  std::__shared_weak_count *v217;
  float *v218;
  std::__shared_weak_count *v219;
  __int16 v220;
  id v221[3];

  v7 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v221, *a2);
  v200 = v221[0];
  v8 = *a4;
  v9 = (char *)a4[1] - (char *)*a4;
  v220 = v9 >> 4;
  v10 = *a3;
  v11 = **a3;
  if (v11
  {
    v13 = v12;
    v14 = (std::__shared_weak_count *)v10[1];
    v218 = (float *)v12;
    v219 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v8 = *a4;
    }
  }
  else
  {
    v13 = 0;
    v218 = 0;
    v219 = 0;
  }
  if (!*v8
  {
    v216 = 0;
    v217 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    goto LABEL_311;
  }
  v18 = (std::__shared_weak_count *)v8[1];
  v216 = v17;
  v217 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (!v13)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
LABEL_311:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v21 = v17[21];
  v197 = v13[21];
  if ((unsigned __int16)(v9 >> 4) != 1)
  {
    v24 = (const void **)*a4;
    v25 = (const void *)**a4;
    v198 = a3;
    if (v25
    {
      v27 = v26;
      v28 = (std::__shared_weak_count *)v24[1];
      v214 = v26;
      v215 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        v31 = v7;
        v24 = (const void **)*a4;
      }
      else
      {
        v31 = v7;
      }
    }
    else
    {
      v31 = v7;
      v28 = 0;
      v27 = 0;
      v214 = 0;
      v215 = 0;
    }
    v32 = v24[2];
    if (v32
    {
      v34 = (uint64_t)v33;
      v35 = (std::__shared_weak_count *)v24[3];
      v212 = v33;
      v213 = v35;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        v24 = (const void **)*a4;
      }
    }
    else
    {
      v35 = 0;
      v34 = 0;
      v212 = 0;
      v213 = 0;
    }
    if ((char *)a4[1] - (char *)v24 == 32 && ((v38 = *(_DWORD *)(a1 + 280), v38 < 0xA) || v38 - 29 <= 3))
    {
      v39 = v21;
      Espresso::abstract_blob_container::shape((char *)v207, (uint64_t)v27);
      v40 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v207);
      Espresso::abstract_blob_container::shape((char *)&v204, v34);
      v41 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v204);
      if (__p)
      {
        v206 = __p;
        operator delete(__p);
      }
      if (v210)
      {
        v211 = v210;
        operator delete(v210);
      }
      if (v40 >= v41)
      {
        HIDWORD(v194) = 0;
        v42 = (unsigned int *)v34;
      }
      else
      {
        v214 = (unsigned int *)v34;
        v215 = v35;
        HIDWORD(v194) = 1;
        v35 = v28;
        v42 = v27;
        v212 = v27;
        v213 = v28;
        v27 = (unsigned int *)v34;
      }
      v21 = v39;
    }
    else
    {
      HIDWORD(v194) = 0;
      v42 = (unsigned int *)v34;
    }
    v43 = v27[6];
    if ((int)v43 <= 1)
      v44 = 1;
    else
      v44 = v27[6];
    v45 = v42[6];
    if (v45 <= 1)
      v46 = 1;
    else
      v46 = v42[6];
    v47 = v42[2];
    v48 = v27[2];
    v7 = v31;
    if (*((_QWORD *)v42 + 1) == *((_QWORD *)v27 + 1) && v42[4] == v27[4] && v42[5] == v27[5] && v44 == v46)
    {
      LODWORD(v194) = 0;
      a3 = v198;
      goto LABEL_111;
    }
    v49 = v42[4];
    if (v49 == 1 && (_DWORD)v47 == (_DWORD)v48 && v42[5] * v46 == 1 && v42[3] == v27[3])
    {
      v55 = *(_DWORD *)(a1 + 280);
      a3 = v198;
      if (v55 == 1)
      {
        LODWORD(v194) = 0;
        v51 = 7;
        goto LABEL_110;
      }
      if (!v55)
      {
        LODWORD(v194) = 0;
        v51 = 4;
        goto LABEL_110;
      }
LABEL_104:
      LODWORD(v194) = 0;
      goto LABEL_111;
    }
    if ((_DWORD)v47 == 1 && v42[3] == 1 && v42[5] * v46 == 1 && v49 == v27[4])
    {
      v50 = *(_DWORD *)(a1 + 280);
      a3 = v198;
      if (v50 == 1)
      {
        LODWORD(v194) = 0;
        v51 = 8;
        goto LABEL_110;
      }
      if (v50)
        goto LABEL_104;
      LODWORD(v194) = 0;
      v51 = 5;
      goto LABEL_110;
    }
    v52 = v42[5];
    a3 = v198;
    if ((_DWORD)v47 == (_DWORD)v48 && v52 * v46 == 1 && v42[3] == v27[3] && v49 == v27[4])
    {
      v53 = *(_DWORD *)(a1 + 280);
      if (v53 == 1)
      {
        LODWORD(v194) = 0;
        v51 = 9;
        goto LABEL_110;
      }
      if (v53)
        goto LABEL_104;
      LODWORD(v194) = 0;
      v51 = 6;
LABEL_110:
      *(_DWORD *)(a1 + 280) = v51;
LABEL_111:
      if (v35)
      {
        v59 = (unint64_t *)&v35->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v61 = v215;
      if (v215)
      {
        v62 = (unint64_t *)&v215->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      goto LABEL_121;
    }
    if ((_DWORD)v47 == 1 && v42[3] == 1 && v49 == 1)
    {
      if (v52 * v45 == v27[5] * (_DWORD)v43)
      {
        v54 = *(_DWORD *)(a1 + 280);
        if (v54 == 1)
        {
          LODWORD(v194) = 0;
          v51 = 30;
          goto LABEL_110;
        }
        if (v54)
          goto LABEL_104;
        LODWORD(v194) = 0;
        v51 = 29;
        goto LABEL_110;
      }
      if (v52 == 1 && v45 == 1)
      {
        v56 = *(_DWORD *)(a1 + 280);
        if (v56 == 1)
        {
          LODWORD(v194) = 0;
          v51 = 32;
          goto LABEL_110;
        }
        if (!v56)
        {
          LODWORD(v194) = 0;
          v51 = 31;
          goto LABEL_110;
        }
        goto LABEL_104;
      }
    }
    if (*(_DWORD *)(a1 + 280) > 1u
      || v220 != 2
      || (_DWORD)v47 != 1 && (_DWORD)v47 != (_DWORD)v48 && (_DWORD)v48 != 1
      || (v57 = v42[3], v57 != 1) && (v58 = v27[3], v58 != 1) && v58 != v57
      || v27[4] != v49
      || v27[5] != v52
      || (_DWORD)v43 != v45)
    {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>("[%d,%d,%d,%d,%d], [%d,%d,%d,%d,%d]", v48, v27[3], v27[5], v27[4], v43, v47, v42[3], v52, v49, v45);
    }
    LODWORD(v194) = 1;
    goto LABEL_111;
  }
  v22 = *(_DWORD *)(a1 + 280);
  if (v22 == 1)
  {
    v194 = 0;
    v23 = 3;
    goto LABEL_43;
  }
  if (!v22)
  {
    v194 = 0;
    v23 = 2;
LABEL_43:
    *(_DWORD *)(a1 + 280) = v23;
    goto LABEL_121;
  }
  v194 = 0;
LABEL_121:
  v64 = **a3;
  v65 = v64[2];
  v66 = v64[3];
  v67 = v64[4];
  v68 = v64[5];
  v69 = v64[6];
  if (v69 <= 1)
    v69 = 1;
  v199 = v69 * v68;
  v71 = v67 - 1;
  v70 = v67 < 1;
  v72 = v67 + 2;
  if (v70)
    v71 = v72;
  v73 = (int *)(a1 + 280);
  v195 = (v71 >> 2) + 1;
  v196 = v65;
  if (v195 != *(_DWORD *)(a1 + 308)
    || *(_DWORD *)(a1 + 312) != v199
    || !*(_QWORD *)(a1 + 360)
    || *(_DWORD *)(a1 + 320) != v66
    || *(_DWORD *)(a1 + 316) != v65)
  {
    *(_DWORD *)(a1 + 316) = v65;
    *(_DWORD *)(a1 + 320) = v66;
    *(_DWORD *)(a1 + 308) = v195;
    *(_DWORD *)(a1 + 312) = v199;
    v74 = v218;
    if (((*(unsigned int (**)(float *))(*(_QWORD *)v218 + 32))(v218) == 2
       || (*(unsigned int (**)(float *))(*(_QWORD *)v74 + 32))(v74) == 4)
      && *v73 == 3)
    {
      *(float *)(a1 + 288) = *(float *)(a1 + 288) * (float)(v74[28] / *((float *)v216 + 28));
    }
    v75 = objc_msgSend(*(id *)(v7 + 144), "newBufferWithBytes:length:options:", a1 + 280, 52, 0);
    v76 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v75;

  }
  if (!*(_QWORD *)(a1 + 368))
  {
    v77 = (MTLFunctionConstantValues *)objc_opt_new();
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v77, "setConstantValue:type:atIndex:", &v220, 37, 0);
    v78 = (void **)(a1 + 368);
    v79 = *v73;
    switch(*v73)
    {
      case 0:
        if ((_DWORD)v194)
        {
          std::to_string(&v204, v220);
          v80 = std::string::insert(&v204, 0, "ELEM_ADD-");
          v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          *(_QWORD *)v208 = *((_QWORD *)&v80->__r_.__value_.__l + 2);
          *(_OWORD *)v207 = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v204.__r_.__value_.__l.__data_);
          v82 = objc_msgSend(v197, "pixelFormat");
          if (v208[7] >= 0)
            v83 = v207;
          else
            v83 = (void **)v207[0];
          if (v82 == 125)
            v84 = "elementwise_add_broadcast_f32_pack4";
          else
            v84 = "elementwise_add_broadcast_f16_pack4";
        }
        else
        {
          std::to_string(&v204, v220);
          v143 = std::string::insert(&v204, 0, "ELEM_ADD-");
          v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
          *(_QWORD *)v208 = *((_QWORD *)&v143->__r_.__value_.__l + 2);
          *(_OWORD *)v207 = v144;
          v143->__r_.__value_.__l.__size_ = 0;
          v143->__r_.__value_.__r.__words[2] = 0;
          v143->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v204.__r_.__value_.__l.__data_);
          v145 = objc_msgSend(v197, "pixelFormat");
          if (v208[7] >= 0)
            v83 = v207;
          else
            v83 = (void **)v207[0];
          if (v145 == 125)
            v84 = "elementwise_add_f32_pack4";
          else
            v84 = "elementwise_add_f16_pack4";
        }
        Espresso::context_metal::kernel_for_function(*(Espresso::context_metal **)(v7 + 160), v84, (const char *)v83, v77);
        v146 = objc_claimAutoreleasedReturnValue();
        v147 = *v78;
        *v78 = (void *)v146;

        if ((v208[7] & 0x80000000) != 0)
          operator delete(v207[0]);
        goto LABEL_250;
      case 1:
        if ((_DWORD)v194)
        {
          v109 = objc_msgSend(v197, "pixelFormat");
          v110 = *(void **)(v7 + 160);
          if (v109 == 125)
            objc_msgSend(v110, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_broadcast_f32_pack4", 0, 0);
          else
            objc_msgSend(v110, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_broadcast_f16_pack4", 0, 0);
        }
        else
        {
          v148 = objc_msgSend(v197, "pixelFormat");
          v149 = *(void **)(v7 + 160);
          if (v148 == 125)
            objc_msgSend(v149, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_f32_pack4", 0, 0);
          else
            objc_msgSend(v149, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_f16_pack4", 0, 0);
        }
        goto LABEL_219;
      case 2:
        v115 = objc_msgSend(v197, "pixelFormat");
        v116 = *(void **)(v7 + 160);
        if (v115 == 125)
          objc_msgSend(v116, "kernelForFunction:cacheString:withConstants:", "elementwise_addc_f32_pack4", 0, 0);
        else
          objc_msgSend(v116, "kernelForFunction:cacheString:withConstants:", "elementwise_addc_f16_pack4", 0, 0);
        goto LABEL_219;
      case 3:
        v127 = objc_msgSend(v197, "pixelFormat");
        v128 = *(void **)(v7 + 160);
        if (v127 == 125)
          objc_msgSend(v128, "kernelForFunction:cacheString:withConstants:", "elementwise_mulc_f32_pack4", 0, 0);
        else
          objc_msgSend(v128, "kernelForFunction:cacheString:withConstants:", "elementwise_mulc_f16_pack4", 0, 0);
        goto LABEL_219;
      case 4:
        v119 = objc_msgSend(v197, "pixelFormat");
        v120 = *(void **)(v7 + 160);
        if (v119 == 125)
          objc_msgSend(v120, "kernelForFunction:cacheString:withConstants:", "elementwise_add_xy_f32_pack4", 0, 0);
        else
          objc_msgSend(v120, "kernelForFunction:cacheString:withConstants:", "elementwise_add_xy_f16_pack4", 0, 0);
        goto LABEL_219;
      case 5:
        v125 = objc_msgSend(v197, "pixelFormat");
        v126 = *(void **)(v7 + 160);
        if (v125 == 125)
          objc_msgSend(v126, "kernelForFunction:cacheString:withConstants:", "elementwise_add_k_f32_pack4", 0, 0);
        else
          objc_msgSend(v126, "kernelForFunction:cacheString:withConstants:", "elementwise_add_k_f16_pack4", 0, 0);
        goto LABEL_219;
      case 6:
        v123 = objc_msgSend(v197, "pixelFormat");
        v124 = *(void **)(v7 + 160);
        if (v123 == 125)
          objc_msgSend(v124, "kernelForFunction:cacheString:withConstants:", "elementwise_add_xyk_f32_pack4", 0, 0);
        else
          objc_msgSend(v124, "kernelForFunction:cacheString:withConstants:", "elementwise_add_xyk_f16_pack4", 0, 0);
        goto LABEL_219;
      case 7:
        v121 = objc_msgSend(v197, "pixelFormat");
        v122 = *(void **)(v7 + 160);
        if (v121 == 125)
          objc_msgSend(v122, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_xy_f32_pack4", 0, 0);
        else
          objc_msgSend(v122, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_xy_f16_pack4", 0, 0);
        goto LABEL_219;
      case 8:
        v107 = objc_msgSend(v197, "pixelFormat");
        v108 = *(void **)(v7 + 160);
        if (v107 == 125)
          objc_msgSend(v108, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_k_f32_pack4", 0, 0);
        else
          objc_msgSend(v108, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_k_f16_pack4", 0, 0);
        goto LABEL_219;
      case 9:
        v103 = objc_msgSend(v197, "pixelFormat");
        v104 = *(void **)(v7 + 160);
        if (v103 == 125)
          objc_msgSend(v104, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_xyk_f32_pack4", 0, 0);
        else
          objc_msgSend(v104, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_xyk_f16_pack4", 0, 0);
        goto LABEL_219;
      case 10:
        v105 = objc_msgSend(v197, "pixelFormat");
        v106 = *(void **)(v7 + 160);
        if (v105 == 125)
          objc_msgSend(v106, "kernelForFunction:cacheString:withConstants:", "elementwise_inverse_f32_pack4", 0, 0);
        else
          objc_msgSend(v106, "kernelForFunction:cacheString:withConstants:", "elementwise_inverse_f16_pack4", 0, 0);
        goto LABEL_219;
      case 11:
        v99 = objc_msgSend(v197, "pixelFormat");
        v100 = *(void **)(v7 + 160);
        if (v99 == 125)
          objc_msgSend(v100, "kernelForFunction:cacheString:withConstants:", "elementwise_sqrt_f32_pack4", 0, 0);
        else
          objc_msgSend(v100, "kernelForFunction:cacheString:withConstants:", "elementwise_sqrt_f16_pack4", 0, 0);
        goto LABEL_219;
      case 12:
        v133 = objc_msgSend(v197, "pixelFormat");
        v134 = *(void **)(v7 + 160);
        if (v133 == 125)
          objc_msgSend(v134, "kernelForFunction:cacheString:withConstants:", "elementwise_rsqrt_f32_pack4", 0, 0);
        else
          objc_msgSend(v134, "kernelForFunction:cacheString:withConstants:", "elementwise_rsqrt_f16_pack4", 0, 0);
        goto LABEL_219;
      case 13:
        v113 = objc_msgSend(v197, "pixelFormat");
        v114 = *(void **)(v7 + 160);
        if (v113 == 125)
          objc_msgSend(v114, "kernelForFunction:cacheString:withConstants:", "elementwise_pow_f32_pack4", 0, 0);
        else
          objc_msgSend(v114, "kernelForFunction:cacheString:withConstants:", "elementwise_pow_f16_pack4", 0, 0);
        goto LABEL_219;
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 28:
        goto LABEL_250;
      case 22:
        v91 = objc_msgSend(v197, "pixelFormat");
        v92 = *(void **)(v7 + 160);
        if (v91 == 125)
          objc_msgSend(v92, "kernelForFunction:cacheString:withConstants:", "elementwise_min_f32_pack4", 0, 0);
        else
          objc_msgSend(v92, "kernelForFunction:cacheString:withConstants:", "elementwise_min_f16_pack4", 0, 0);
        goto LABEL_219;
      case 23:
        v97 = objc_msgSend(v197, "pixelFormat");
        v98 = *(void **)(v7 + 160);
        if (v97 == 125)
          objc_msgSend(v98, "kernelForFunction:cacheString:withConstants:", "elementwise_max_f32_pack4", 0, 0);
        else
          objc_msgSend(v98, "kernelForFunction:cacheString:withConstants:", "elementwise_max_f16_pack4", 0, 0);
        goto LABEL_219;
      case 24:
        v111 = objc_msgSend(v197, "pixelFormat");
        v112 = *(void **)(v7 + 160);
        if (v111 == 125)
          objc_msgSend(v112, "kernelForFunction:cacheString:withConstants:", "elementwise_abs_f32_pack4", 0, 0);
        else
          objc_msgSend(v112, "kernelForFunction:cacheString:withConstants:", "elementwise_abs_f16_pack4", 0, 0);
        goto LABEL_219;
      case 25:
        v129 = objc_msgSend(v197, "pixelFormat");
        v130 = *(void **)(v7 + 160);
        if (v129 == 125)
          objc_msgSend(v130, "kernelForFunction:cacheString:withConstants:", "elementwise_threshold_f32_pack4", 0, 0);
        else
          objc_msgSend(v130, "kernelForFunction:cacheString:withConstants:", "elementwise_threshold_f16_pack4", 0, 0);
        goto LABEL_219;
      case 26:
        v131 = objc_msgSend(v197, "pixelFormat");
        v132 = *(void **)(v7 + 160);
        if (v131 == 125)
          objc_msgSend(v132, "kernelForFunction:cacheString:withConstants:", "elementwise_log_f32_pack4", 0, 0);
        else
          objc_msgSend(v132, "kernelForFunction:cacheString:withConstants:", "elementwise_log_f16_pack4", 0, 0);
        goto LABEL_219;
      case 27:
        v117 = objc_msgSend(v197, "pixelFormat");
        v118 = *(void **)(v7 + 160);
        if (v117 == 125)
          objc_msgSend(v118, "kernelForFunction:cacheString:withConstants:", "elementwise_exp_f32_pack4", 0, 0);
        else
          objc_msgSend(v118, "kernelForFunction:cacheString:withConstants:", "elementwise_exp_f16_pack4", 0, 0);
        goto LABEL_219;
      case 29:
        v101 = objc_msgSend(v197, "pixelFormat");
        v102 = *(void **)(v7 + 160);
        if (v101 == 125)
          objc_msgSend(v102, "kernelForFunction:cacheString:withConstants:", "elementwise_add_n_f32_pack4", 0, 0);
        else
          objc_msgSend(v102, "kernelForFunction:cacheString:withConstants:", "elementwise_add_n_f16_pack4", 0, 0);
        goto LABEL_219;
      case 30:
        v89 = objc_msgSend(v197, "pixelFormat");
        v90 = *(void **)(v7 + 160);
        if (v89 == 125)
          objc_msgSend(v90, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_n_f32_pack4", 0, 0);
        else
          objc_msgSend(v90, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_n_f16_pack4", 0, 0);
        goto LABEL_219;
      case 31:
        v95 = objc_msgSend(v197, "pixelFormat");
        v96 = *(void **)(v7 + 160);
        if (v95 == 125)
          objc_msgSend(v96, "kernelForFunction:cacheString:withConstants:", "elementwise_add_scalar_f32_pack4", 0, 0);
        else
          objc_msgSend(v96, "kernelForFunction:cacheString:withConstants:", "elementwise_add_scalar_f16_pack4", 0, 0);
        goto LABEL_219;
      case 32:
        v93 = objc_msgSend(v197, "pixelFormat");
        v94 = *(void **)(v7 + 160);
        if (v93 == 125)
          objc_msgSend(v94, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_scalar_f32_pack4", 0, 0);
        else
          objc_msgSend(v94, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_scalar_f16_pack4", 0, 0);
        goto LABEL_219;
      default:
        switch(v79)
        {
          case 'r':
            v85 = objc_msgSend(v197, "pixelFormat");
            v86 = *(void **)(v7 + 160);
            if (v85 == 125)
              objc_msgSend(v86, "kernelForFunction:cacheString:withConstants:", "elementwise_cos_f32_pack4", 0, 0);
            else
              objc_msgSend(v86, "kernelForFunction:cacheString:withConstants:", "elementwise_cos_f16_pack4", 0, 0);
            break;
          case 's':
            v135 = objc_msgSend(v197, "pixelFormat");
            v136 = *(void **)(v7 + 160);
            if (v135 == 125)
              objc_msgSend(v136, "kernelForFunction:cacheString:withConstants:", "elementwise_sin_f32_pack4", 0, 0);
            else
              objc_msgSend(v136, "kernelForFunction:cacheString:withConstants:", "elementwise_sin_f16_pack4", 0, 0);
            break;
          case 't':
            goto LABEL_250;
          case 'u':
            v139 = objc_msgSend(v197, "pixelFormat");
            v140 = *(void **)(v7 + 160);
            if (v139 == 125)
              objc_msgSend(v140, "kernelForFunction:cacheString:withConstants:", "elementwise_floor_f32_pack4", 0, 0);
            else
              objc_msgSend(v140, "kernelForFunction:cacheString:withConstants:", "elementwise_floor_f16_pack4", 0, 0);
            break;
          case 'v':
            v137 = objc_msgSend(v197, "pixelFormat");
            v138 = *(void **)(v7 + 160);
            if (v137 == 125)
              objc_msgSend(v138, "kernelForFunction:cacheString:withConstants:", "elementwise_ceil_f32_pack4", 0, 0);
            else
              objc_msgSend(v138, "kernelForFunction:cacheString:withConstants:", "elementwise_ceil_f16_pack4", 0, 0);
            break;
          case 'w':
            v141 = objc_msgSend(v197, "pixelFormat");
            v142 = *(void **)(v7 + 160);
            if (v141 == 125)
              objc_msgSend(v142, "kernelForFunction:cacheString:withConstants:", "elementwise_clip_f32_pack4", 0, 0);
            else
              objc_msgSend(v142, "kernelForFunction:cacheString:withConstants:", "elementwise_clip_f16_pack4", 0, 0);
            break;
          default:
            if (v79 != 103)
              goto LABEL_250;
            v87 = objc_msgSend(v197, "pixelFormat");
            v88 = *(void **)(v7 + 160);
            if (v87 == 125)
              objc_msgSend(v88, "kernelForFunction:cacheString:withConstants:", "elementwise_less_scalar_f32_pack4", 0, 0);
            else
              objc_msgSend(v88, "kernelForFunction:cacheString:withConstants:", "elementwise_less_scalar_f16_pack4", 0, 0);
            break;
        }
LABEL_219:
        v150 = objc_claimAutoreleasedReturnValue();
        v151 = *v78;
        *v78 = (void *)v150;

LABEL_250:
        if (!*v78)
        {
          v193 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v193, "Kernel not found");
          __cxa_throw(v193, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        return;
    }
  }
  objc_msgSend(v200, "setComputePipelineState:");
  objc_msgSend(v200, "setTexture:atIndex:", v197, 0);
  if (HIDWORD(v194))
  {
    v152 = (const void **)*a4;
    v154 = (std::__shared_weak_count *)v152[3];
    if (v154)
    {
      v155 = (unint64_t *)&v154->__shared_owners_;
      do
        v156 = __ldxr(v155);
      while (__stxr(v156 + 1, v155));
      v157 = v153[21];
      do
        v158 = __ldaxr(v155);
      while (__stlxr(v158 - 1, v155));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    else
    {
      v157 = v153[21];
    }
    v159 = v21;
    objc_msgSend(v200, "setTexture:atIndex:", v21, 2);
    objc_msgSend(v200, "setTexture:atIndex:", v157, 1);

  }
  else
  {
    objc_msgSend(v200, "setTexture:atIndex:", v21, 1);
    v159 = v21;
    if (v220 >= 2)
    {
      v160 = 1;
      do
      {
        v161 = (uint64_t)&(*a4)[2 * v160];
        v163 = *(std::__shared_weak_count **)(v161 + 8);
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          v166 = v162[21];
          do
            v167 = __ldaxr(v164);
          while (__stlxr(v167 - 1, v164));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        else
        {
          v166 = v162[21];
        }
        objc_msgSend(v200, "setTexture:atIndex:", v166, ++v160);

      }
      while (v160 < v220);
    }
  }
  objc_msgSend(v200, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 360), 0, 0);
  if ((_DWORD)v194)
  {
    v168 = (std::string::size_type *)*a4;
    v169 = **a4;
    v170 = (*a4)[1];
    v204.__r_.__value_.__r.__words[0] = v169;
    v204.__r_.__value_.__l.__size_ = v170;
    if (v170)
    {
      v171 = (unint64_t *)(v170 + 8);
      do
        v172 = __ldxr(v171);
      while (__stxr(v172 + 1, v171));
      v168 = (std::string::size_type *)*a4;
    }
    v173 = v168[2];
    v174 = v168[3];
    v214 = (unsigned int *)v173;
    v215 = (std::__shared_weak_count *)v174;
    if (v174)
    {
      v175 = (unint64_t *)(v174 + 8);
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
    }
    if (HIDWORD(v194))
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v204, (*a4)[2], (*a4)[3]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v214, **a4, (*a4)[1]);
      v169 = v204.__r_.__value_.__r.__words[0];
      v173 = (std::string::size_type)v214;
    }
    *(_OWORD *)v207 = *(_OWORD *)(v169 + 8);
    *(_DWORD *)v208 = *(_DWORD *)(v169 + 24);
    *(_OWORD *)&v208[4] = *(_OWORD *)(v173 + 8);
    v209 = *(_DWORD *)(v173 + 24);
    objc_msgSend(v200, "setBytes:length:atIndex:", v207, 40, 1);
    v177 = v215;
    if (v215)
    {
      v178 = (unint64_t *)&v215->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    size = (std::__shared_weak_count *)v204.__r_.__value_.__l.__size_;
    if (v204.__r_.__value_.__l.__size_)
    {
      v181 = (unint64_t *)(v204.__r_.__value_.__l.__size_ + 8);
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  v183 = v196 - 1;
  if (v196 < 1)
    v183 = v196 + 6;
  v184 = (v183 >> 3) + 1;
  v185 = v66 - 1;
  if (v66 < 1)
    v185 = v66 + 6;
  v203[0] = v184;
  v203[1] = (v185 >> 3) + 1;
  v203[2] = v199 * v195;
  v201 = vdupq_n_s64(8uLL);
  v202 = 1;
  objc_msgSend(v200, "dispatchThreadgroups:threadsPerThreadgroup:", v203, &v201);

  v186 = v217;
  if (v217)
  {
    v187 = (unint64_t *)&v217->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = v219;
  if (v219)
  {
    v190 = (unint64_t *)&v219->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v221);
}

void sub_1912EE28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  void *v43;
  void *v44;
  uint64_t v45;

  if (a28 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 128);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v45 - 104));
  _Unwind_Resume(a1);
}

const char *Espresso::generic_elementwise_kernel::kernel_type_str(Espresso::generic_elementwise_kernel *this)
{
  return "elementwise";
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void Espresso::MetalLowmemEngine::split_kernel::~split_kernel(id *this)
{
  void **v2;

  *this = &off_1E2D7DD58;
  v2 = this + 46;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = &off_1E2D7DD58;
  v2 = this + 46;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::split_kernel::__launch(uint64_t a1, uint64_t *a2, _QWORD *a3, const void ***a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  id v12;
  unint64_t v13;
  const void **v14;
  id *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v32;
  __int128 *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  int v44;
  int v45;
  void *v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  __int128 v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  id v74;
  int v75;
  id v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  void *v85;
  std::runtime_error *exception;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  int v91;
  uint64_t *v92;
  uint64_t v93;
  int v95;
  id v96;
  unint64_t v97;
  _QWORD v99[3];
  _QWORD v100[3];
  _QWORD v101[3];
  _QWORD v102[3];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int v106;
  _QWORD v107[3];
  _QWORD v108[3];
  id v109[2];
  char *v110;
  char *v111;
  uint64_t v112;

  v110 = 0;
  v111 = 0;
  v112 = 0;
  v5 = *a3;
  if (a3[1] != *a3)
  {
    v6 = 0;
    do
    {
      v7 = v5 + 16 * v6;
      v9 = *(std::__shared_weak_count **)(v7 + 8);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v12 = v8[21];
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      else
      {
        v12 = v8[21];
      }
      std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::push_back[abi:ne180100](&v110, v12);

      ++v6;
      v5 = *a3;
    }
    while (v6 < (uint64_t)(a3[1] - *a3) >> 4);
  }
  v14 = *a4;
  v16 = (std::__shared_weak_count *)v14[1];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = v15[21];
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 - 1, v17));
    v21 = a1;
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v19 = v15[21];
    v21 = a1;
  }
  v89 = *(_QWORD *)(v21 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v109, *a2);
  v22 = v109[0];
  v23 = **a4;
  v24 = v23[2];
  v25 = v23[3];
  v27 = v23[5];
  v26 = v23[6];
  if (v26 <= 1)
    v28 = 1;
  else
    v28 = v26;
  v29 = v25 < 8 && v24 < 8;
  if (v29)
    v30 = 4;
  else
    v30 = 16;
  v97 = __PAIR64__(v25, v24);
  if (v25 < 4 && v24 < 4)
    v32 = 1;
  else
    v32 = v30;
  if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 320))(v21) + 16))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "legacy_cut_mode=1 deprecated");
    goto LABEL_93;
  }
  v33 = (__int128 *)(v21 + 280);
  if (*(_DWORD *)(v21 + 284) == 3)
  {
    if (objc_msgSend(v19, "pixelFormat") == 125)
      v34 = "slice_n_f32_pack4";
    else
      v34 = "slice_n_f16_pack4";
    objc_msgSend(*(id *)(v89 + 160), "kernelForFunction:cacheString:withConstants:", v34, 0, 0);
    v35 = objc_claimAutoreleasedReturnValue();
    if (v35)
    {
      objc_msgSend(v22, "setComputePipelineState:", v35);
      v87 = (void *)v35;
      if (v111 != v110)
      {
        v96 = v19;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = (uint64_t *)(v21 + 368);
        v40 = 1;
        v92 = (uint64_t *)(v21 + 368);
        do
        {
          v41 = *(_QWORD *)(v21 + 368);
          if (v40 - 1 >= (*(_QWORD *)(v21 + 376) - v41) >> 3)
          {
            std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::resize((uint64_t)v39, v40);
            v41 = *v39;
          }
          v42 = *(id *)(v41 + v37);
          v43 = *(_QWORD *)(*a3 + v36);
          v44 = *(_DWORD *)(v43 + 16);
          v95 = *(_DWORD *)(v43 + 20);
          if (!v42 || *(_QWORD *)(v21 + 316) != v97)
          {
            v45 = v44 - 1;
            if (v44 < 1)
              v45 = v44 + 2;
            *(_DWORD *)(v21 + 304) = (v45 >> 2) + 1;
            *(_DWORD *)(v21 + 324) = v38;
            *(_QWORD *)(v21 + 316) = v97;
            v46 = (void *)objc_msgSend(*(id *)(v89 + 144), "newBufferWithBytes:length:options:", v33, 52, 0);

            objc_storeStrong((id *)(*v92 + v37), v46);
            v42 = v46;
          }
          objc_msgSend(v22, "setTexture:atIndex:", *(_QWORD *)&v110[v37], 0);
          objc_msgSend(v22, "setTexture:atIndex:", v96, 1);
          objc_msgSend(v22, "setBuffer:offset:atIndex:", v42, 0, 0);
          v47 = v44 - 1;
          if (v44 < 1)
            v47 = v44 + 2;
          v108[0] = ((int)v97 - 1) / (int)v32 + 1;
          v108[1] = (HIDWORD(v97) - 1) / (int)v32 + 1;
          v108[2] = v95 + v95 * (v47 >> 2);
          v107[0] = v32;
          v107[1] = v32;
          v107[2] = 1;
          objc_msgSend(v22, "dispatchThreadgroups:threadsPerThreadgroup:", v108, v107);
          v38 += v95;

          v48 = v40++ >= (v111 - v110) >> 3;
          v37 += 8;
          v36 += 16;
          v21 = a1;
          v39 = v92;
        }
        while (!v48);
LABEL_89:
        v19 = v96;
        goto LABEL_90;
      }
      goto LABEL_90;
    }
    goto LABEL_92;
  }
  v93 = v28 * v27;
  if (((*((int *)**a4 + 4) / (unint64_t)((uint64_t)(a3[1] - *a3) >> 4)) & 3) == 0)
  {
    if (objc_msgSend(v19, "pixelFormat") == 125)
      v65 = "slice_f32_pack4";
    else
      v65 = "slice_f16_pack4";
    objc_msgSend(*(id *)(v89 + 160), "kernelForFunction:cacheString:withConstants:", v65, 0, 0);
    v66 = objc_claimAutoreleasedReturnValue();
    if (v66)
    {
      objc_msgSend(v22, "setComputePipelineState:", v66);
      v87 = (void *)v66;
      if (v111 != v110)
      {
        v96 = v19;
        v67 = 0;
        v68 = v21;
        v69 = 0;
        v70 = 0;
        v71 = (uint64_t *)(v68 + 368);
        v72 = 1;
        do
        {
          v73 = *(_QWORD *)(a1 + 368);
          if (v72 - 1 >= (*(_QWORD *)(a1 + 376) - v73) >> 3)
          {
            std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::resize((uint64_t)v71, v72);
            v73 = *v71;
          }
          v88 = v72;
          v74 = *(id *)(v73 + v69);
          v75 = *(_DWORD *)(*(_QWORD *)(*a3 + v67) + 16);
          v76 = v74;
          if (v74 && *(_QWORD *)(a1 + 316) == v97)
          {
            v77 = v75 - 1;
            v29 = v75 < 1;
            v78 = v75 + 2;
            if (!v29)
              v78 = v77;
            v79 = (v78 >> 2) + 1;
          }
          else
          {
            v80 = v75 - 1;
            v29 = v75 < 1;
            v81 = v75 + 2;
            if (!v29)
              v81 = v80;
            v79 = (v81 >> 2) + 1;
            *(_DWORD *)(a1 + 304) = v79;
            *(_DWORD *)(a1 + 324) = v70;
            v82 = *((_DWORD *)**a4 + 4);
            v83 = v82 - 1;
            v29 = v82 < 1;
            v84 = v82 + 2;
            if (!v29)
              v84 = v83;
            *(_DWORD *)(a1 + 308) = (v84 >> 2) + 1;
            *(_QWORD *)(a1 + 316) = v97;
            v85 = (void *)objc_msgSend(*(id *)(v89 + 144), "newBufferWithBytes:length:options:", v33, 52, 0);

            objc_storeStrong((id *)(*v71 + v69), v85);
            v76 = v85;
          }
          objc_msgSend(v22, "setTexture:atIndex:", *(_QWORD *)&v110[v69], 0);
          objc_msgSend(v22, "setTexture:atIndex:", v96, 1);
          objc_msgSend(v22, "setBuffer:offset:atIndex:", v76, 0, 0);
          v100[0] = ((int)v97 - 1) / (int)v32 + 1;
          v100[1] = (HIDWORD(v97) - 1) / (int)v32 + 1;
          v100[2] = v79 * (int)v93;
          v99[0] = v32;
          v99[1] = v32;
          v99[2] = 1;
          objc_msgSend(v22, "dispatchThreadgroups:threadsPerThreadgroup:", v100, v99);
          v70 += v79;

          v72 = v88 + 1;
          v69 += 8;
          v67 += 16;
        }
        while (v88 < (v111 - v110) >> 3);
        goto LABEL_89;
      }
      goto LABEL_90;
    }
LABEL_92:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_93:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(*(id *)(v89 + 160), "kernelForFunction:cacheString:withConstants:", "split_one_channel", 0, 0);
  v49 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setComputePipelineState:", v49);
  v87 = (void *)v49;
  v51 = v110;
  v50 = v111;
  if (v111 != v110)
  {
    v96 = v19;
    v52 = 0;
    v53 = 0;
    v54 = *a3;
    do
    {
      v55 = *(_DWORD *)(*(_QWORD *)(v54 + 16 * v52) + 16);
      if (v55 >= -2)
      {
        v56 = -1;
        v91 = v53;
        do
        {
          objc_msgSend(v22, "setTexture:atIndex:", *(_QWORD *)&v110[8 * v52], 0);
          objc_msgSend(v22, "setTexture:atIndex:", v19, 1);
          v106 = *(_DWORD *)(v21 + 328);
          v57 = *(_OWORD *)(v21 + 312);
          v104 = *(_OWORD *)(v21 + 296);
          v105 = v57;
          v103 = *v33;
          v58 = *(_DWORD *)(*(_QWORD *)*a3 + 16);
          v59 = v58 - 1;
          v29 = v58 < 1;
          v60 = v58 + 2;
          if (!v29)
            v60 = v59;
          DWORD2(v104) = (v60 >> 2) + 1;
          v61 = *((_DWORD *)**a4 + 4);
          v62 = v61 - 1;
          v29 = v61 < 1;
          v63 = v61 + 2;
          if (!v29)
            v63 = v62;
          HIDWORD(v105) = v56 + 1;
          v106 = v53;
          HIDWORD(v104) = (v63 >> 2) + 1;
          *(_QWORD *)((char *)&v105 + 4) = v97;
          objc_msgSend(v22, "setBytes:length:atIndex:", &v103, 52, 0);
          v102[0] = ((int)v97 - 1) / (int)v32 + 1;
          v102[1] = (HIDWORD(v97) - 1) / (int)v32 + 1;
          v102[2] = v93;
          v101[0] = v32;
          v101[1] = v32;
          v101[2] = 1;
          objc_msgSend(v22, "dispatchThreadgroups:threadsPerThreadgroup:", v102, v101);
          v54 = *a3;
          v55 = *(_DWORD *)(*(_QWORD *)(*a3 + 16 * v52) + 16);
          v64 = v55 - 1;
          if (v55 < 1)
            v64 = v55 + 2;
          ++v56;
          v53 += 4;
        }
        while (v56 < v64 >> 2);
        v51 = v110;
        v50 = v111;
        v53 = v91;
      }
      v53 += v55;
      ++v52;
    }
    while (v52 < (v50 - v51) >> 3);
    goto LABEL_89;
  }
LABEL_90:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v109);
  *(_QWORD *)&v103 = &v110;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
}

void sub_1912EEDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  void *v34;
  uint64_t v35;

  __cxa_free_exception(v34);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v35 - 128));
  a33 = v35 - 112;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_split_kernel::number_of_top_blobs(Espresso::generic_split_kernel *this)
{
  return *((unsigned int *)this + 70);
}

uint64_t Espresso::MetalLowmemEngine::split_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v4[20];
  unsigned int v5;

  if (*(_BYTE *)(a1 + 288))
    return 0;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
    return 1;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v4, *(const Espresso::layer_shape **)a3, 0);
  result = 0;
  if (v5 >= 4)
    return 1;
  return result;
}

const char *Espresso::generic_split_kernel::kernel_type_str(Espresso::generic_split_kernel *this)
{
  return "split";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::split_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::softmax_kernel::~softmax_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::softmax_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v8;
  void *v9;
  const void *v10;
  id *v11;
  id *v12;
  id v13;
  _DWORD *v14;
  int v15;
  int v16;
  id v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  const char *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v31;
  void *v32;
  int v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  std::runtime_error *exception;
  int v50;
  id v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  _QWORD v55[3];
  int64x2_t v56;
  uint64_t v57;
  _QWORD v58[3];
  _QWORD v59[3];
  char v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  id v67[3];

  v8 = **a4;
  if (v8)
  else
    v9 = 0;
  v10 = **a3;
  if (v10)
  else
    v11 = 0;
  v12 = *(id **)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v67, *a2);
  v13 = v67[0];
  v14 = **a4;
  v16 = v14[5];
  v15 = v14[6];
  if (v15 <= 1)
    v15 = 1;
  v50 = v15 * v16;
  v51 = *((id *)v9 + 21);
  v17 = v11[21];
  v18 = v17;
  v19 = *((_DWORD *)v9 + 2);
  v20 = *((_DWORD *)v9 + 3);
  v21 = *((_DWORD *)v9 + 4);
  if (*(_DWORD *)(a1 + 300) == 1)
  {
    if (objc_msgSend(v17, "pixelFormat") == 125)
      v22 = "elementwise_sigmoid_f32_pack4";
    else
      v22 = "elementwise_sigmoid_f16_pack4";
    objc_msgSend(v12[20], "kernelForFunction:cacheString:withConstants:", v22, 0, 0);
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = v21 - 1;
    if (v21 < 1)
      v24 = v21 + 2;
    v25 = (v24 >> 2) + 1;
    if (v25 != *(_DWORD *)(a1 + 280)
      || !*(_QWORD *)(a1 + 344)
      || *(_DWORD *)(a1 + 292) != v20
      || *(_DWORD *)(a1 + 288) != v19)
    {
      v59[2] = 897988541;
      v60 = 0;
      v65 = 0;
      v66 = 0;
      __asm { FMOV            V1.2S, #1.0 }
      v59[0] = 14;
      v59[1] = _D1;
      v63 = v19;
      v64 = v20;
      v61 = (v24 >> 2) + 1;
      v62 = v50;
      v31 = objc_msgSend(v12[18], "newBufferWithBytes:length:options:", v59, 52, 0);
      v32 = *(void **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = v31;

    }
    if (v23)
    {
      objc_msgSend(v13, "setComputePipelineState:", v23);
      objc_msgSend(v13, "setTexture:atIndex:", v18, 0);
      objc_msgSend(v13, "setTexture:atIndex:", v51, 1);
      objc_msgSend(v13, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 344), 0, 0);
      v33 = v19 - 1;
      if (v19 < 1)
        v33 = v19 + 6;
      v34 = (v33 >> 3) + 1;
      v35 = v20 - 1;
      if (v20 < 1)
        v35 = v20 + 6;
      v58[0] = v34;
      v58[1] = (v35 >> 3) + 1;
      v58[2] = v25 * v50;
      v56 = vdupq_n_s64(8uLL);
      v57 = 1;
      v36 = (void *)v23;
      objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", v58, &v56);
      goto LABEL_49;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_52:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (objc_msgSend(v17, "pixelFormat") == 115 && objc_msgSend(v51, "pixelFormat") == 115)
  {
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v12, CFSTR("softmax_f16_f16_packed"));
    v37 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (objc_msgSend(v18, "pixelFormat") == 125 && objc_msgSend(v51, "pixelFormat") == 115)
      v38 = "softmax_f16_packed";
    else
      v38 = "softmax_f32_packed";
    objc_msgSend(v12[20], "kernelForFunction:cacheString:withConstants:", v38, 0, 0);
    v37 = objc_claimAutoreleasedReturnValue();
  }
  v36 = (void *)v37;
  if (*(_DWORD *)(a1 + 288) != v19
    || *(_DWORD *)(a1 + 292) != v20
    || *(_DWORD *)(a1 + 296) != v50
    || !*(_QWORD *)(a1 + 336))
  {
    *(_DWORD *)(a1 + 288) = v19;
    *(_DWORD *)(a1 + 292) = v20;
    *(_DWORD *)(a1 + 284) = v21;
    *(_DWORD *)(a1 + 296) = v50;
    *(_DWORD *)(a1 + 280) = ((v21 - 1) >> 2) + 1;
    v39 = objc_msgSend(v12[18], "newBufferWithBytes:length:options:", a1 + 280, 28, 0);
    v40 = *(void **)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v39;

  }
  if (!v36)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    goto LABEL_52;
  }
  objc_msgSend(v13, "setComputePipelineState:", v36);
  objc_msgSend(v13, "setTexture:atIndex:", v18, 0);
  objc_msgSend(v13, "setTexture:atIndex:", v51, 1);
  objc_msgSend(v13, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 336), 0, 0);
  if (v19 > 3 || v20 > 3)
  {
    v45 = v19 - 1;
    if (v19 < 1)
      v45 = v19 + 14;
    v46 = (v45 >> 4) + 1;
    v47 = v20 - 1;
    if (v20 < 1)
      v47 = v20 + 14;
    v48 = (int)(v50 + v50 * ((*(_DWORD *)(a1 + 284) - 1) >> 2));
    v53[0] = v46;
    v53[1] = (v47 >> 4) + 1;
    v53[2] = v48;
    v42 = 16;
    v52 = 16;
    v43 = v53;
    v44 = &v52;
  }
  else
  {
    v41 = (int)(v50 + v50 * ((*(_DWORD *)(a1 + 284) - 1) >> 2));
    v55[0] = v19;
    v55[1] = v20;
    v55[2] = v41;
    v42 = 1;
    v54 = 1;
    v43 = v55;
    v44 = &v54;
  }
  v44[1] = v42;
  v44[2] = 1;
  objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", v43);
LABEL_49:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v67);
}

void sub_1912EF4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  __cxa_free_exception(v12);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v13 - 104));
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_softmax_kernel::force_high_precision_output_f32(Espresso::generic_softmax_kernel *this)
{
  return 1;
}

const char *Espresso::generic_softmax_kernel::kernel_type_str(Espresso::generic_softmax_kernel *this)
{
  return "softmax";
}

void Espresso::MetalLowmemEngine::upsample_kernel::~upsample_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::upsample_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v7;
  _DWORD *v8;
  const void *v9;
  _DWORD *v10;
  uint64_t v11;
  id v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  void *v19;
  __int128 v20;
  uint64_t v26;
  void *v27;
  int v28;
  int v29;
  const char *v30;
  const char *v31;
  uint64_t (*v32)(_DWORD *);
  const char *v33;
  void *v34;
  std::runtime_error *v35;
  std::runtime_error *exception;
  std::string *v37;
  __int128 v38;
  std::string v39;
  std::string v40;
  id v41[2];

  v7 = **a4;
  if (v7)
  else
    v8 = 0;
  v9 = **a3;
  if (v9)
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v41, *a2);
  v12 = v41[0];
  v13 = v10[4];
  v14 = v13 - 1;
  if (v13 < 1)
    v14 = v13 + 2;
  if (v13 != v8[4] || (v15 = v10[5], v15 != v8[5]) || (v16 = v10[6], v16 != v8[6]))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid shape");
  v17 = (v14 >> 2) + 1;
  v18 = v16 * v15;
  if (*(_DWORD *)(a1 + 320) != v10[2]
    || *(_DWORD *)(a1 + 324) != v10[3]
    || *(_DWORD *)(a1 + 336) != v17
    || *(_DWORD *)(a1 + 328) != v8[2]
    || *(_DWORD *)(a1 + 332) != v8[3]
    || *(_DWORD *)(a1 + 340) != v18)
  {
    v19 = *(void **)(a1 + 352);
    *(_QWORD *)(a1 + 352) = 0;

    *(_QWORD *)&v20 = *((_QWORD *)v10 + 1);
    *((_QWORD *)&v20 + 1) = *((_QWORD *)v8 + 1);
    *(_OWORD *)(a1 + 320) = v20;
    *(_DWORD *)(a1 + 340) = v18;
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)(a1 + 344) = vdiv_f32(_D1, vcvt_f32_s32(*(int32x2_t *)(a1 + 284)));
    *(_DWORD *)(a1 + 336) = v17;
  }
  if (!*(_QWORD *)(a1 + 352))
  {
    v26 = objc_msgSend(*(id *)(v11 + 144), "newBufferWithBytes:length:options:", a1 + 280, 72, 0);
    v27 = *(void **)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v26;

  }
  v28 = *(_DWORD *)(a1 + 292);
  if (v28 == 1)
  {
    v32 = *(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 32);
    if (*(_DWORD *)(a1 + 300))
    {
      v29 = v32(v10);
      v30 = "upsample_bilinear_f32";
      v31 = "upsample_bilinear_f16";
    }
    else
    {
      v29 = v32(v10);
      v30 = "upsample_bilinear_nonlegacy_f32";
      v31 = "upsample_bilinear_nonlegacy_f16";
    }
  }
  else
  {
    if (v28)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v39, *(_DWORD *)(a1 + 292));
      v37 = std::string::insert(&v39, 0, "Mode not supported: ");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v40);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 32))(v10);
    v30 = "upsample_f32";
    v31 = "upsample_f16";
  }
  if (v29 == 1)
    v33 = v31;
  else
    v33 = v30;
  objc_msgSend(*(id *)(v11 + 160), "kernelForFunction:cacheString:withConstants:", v33, 0, 0);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v34)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Kernel not found");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v12, "setComputePipelineState:", v34);
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v10 + 21), 0);
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v8 + 21), 1);
  objc_msgSend(v12, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 352), 0, 0);
  dispatch_auto_threadgroupsize(v12, v10[2], v10[3], v17, v18);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v41);
}

void sub_1912EF910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,id a23)
{
  void *v23;
  void *v24;
  int v25;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v25 & 1) == 0)
    {
LABEL_8:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

BOOL Espresso::MetalLowmemEngine::upsample_kernel::is_valid_for_engine(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(const void **)(a1 + 8);
  if (v2
  {
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 300) || *(_DWORD *)(a1 + 292))
      return 0;
    v3 = 0;
  }
  if (*(_BYTE *)(a1 + 304) && !*(_BYTE *)(a1 + 316))
  {
    v6 = 0;
    if (!v3)
      return v6;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 292) < 2u;
    if (!v3)
      return v6;
  }
  v7 = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

const char *Espresso::generic_upsample_kernel::kernel_type_str(Espresso::generic_upsample_kernel *this)
{
  return "upsample";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::upsample_kernel_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void dispatch_auto_threadgroupsize(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  _QWORD v20[3];
  _QWORD v21[3];

  v9 = a1;
  v10 = v9;
  if (a3 >= 8)
    LODWORD(v11) = 8;
  else
    LODWORD(v11) = 4;
  if (a3 < 4)
    LODWORD(v11) = 2;
  if (a3 <= 1)
    v11 = 1;
  else
    v11 = v11;
  if (a2 >= 8)
    v12 = 8;
  else
    v12 = 4;
  if (a2 < 8)
    v13 = 2;
  else
    v13 = 3;
  if (a2 >= 4)
  {
    v14 = v13;
  }
  else
  {
    v12 = 2;
    v14 = 1;
  }
  if (a2 <= 1)
  {
    v12 = 1;
    v14 = 0;
  }
  if (a4 >= 0x10)
    v15 = 16;
  else
    v15 = 8;
  if (a4 < 8)
    v15 = 4;
  if (a4 < 4)
    v15 = 2;
  if (a4 <= 1)
    v16 = 1;
  else
    v16 = v15;
  v17 = 1;
  switch((_DWORD)v11 << v14)
  {
    case 1:
      v17 = v16;
      break;
    case 2:
      v18 = v16 >= 8;
      v17 = 8;
      goto LABEL_35;
    case 4:
      v18 = v16 >= 4;
      v17 = 4;
      goto LABEL_35;
    case 8:
      v18 = v16 >= 2;
      v17 = 2;
LABEL_35:
      if (!v18)
        v17 = v16;
      break;
    default:
      break;
  }
  if (a3 < 8)
    v19 = 2;
  else
    v19 = 3;
  if (a3 < 4)
    v19 = 1;
  if (a3 <= 1)
    v19 = 0;
  v21[0] = (int)(((a2 - 1) >> v14) + 1);
  v21[1] = (int)(((a3 - 1) >> v19) + 1);
  v21[2] = (int)((a5 * a4 - 1) / v17 + 1);
  v20[0] = v12;
  v20[1] = v11;
  v20[2] = v17;
  objc_msgSend(v9, "dispatchThreadgroups:threadsPerThreadgroup:", v21, v20);

}

{
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  _QWORD v20[3];
  _QWORD v21[3];

  v9 = a1;
  v10 = v9;
  if (a3 >= 8)
    LODWORD(v11) = 8;
  else
    LODWORD(v11) = 4;
  if (a3 < 4)
    LODWORD(v11) = 2;
  if (a3 <= 1)
    v11 = 1;
  else
    v11 = v11;
  if (a2 >= 8)
    v12 = 8;
  else
    v12 = 4;
  if (a2 < 8)
    v13 = 2;
  else
    v13 = 3;
  if (a2 >= 4)
  {
    v14 = v13;
  }
  else
  {
    v12 = 2;
    v14 = 1;
  }
  if (a2 <= 1)
  {
    v12 = 1;
    v14 = 0;
  }
  if (a4 >= 0x10)
    v15 = 16;
  else
    v15 = 8;
  if (a4 < 8)
    v15 = 4;
  if (a4 < 4)
    v15 = 2;
  if (a4 <= 1)
    v16 = 1;
  else
    v16 = v15;
  v17 = 1;
  switch((_DWORD)v11 << v14)
  {
    case 1:
      v17 = v16;
      break;
    case 2:
      v18 = v16 >= 8;
      v17 = 8;
      goto LABEL_35;
    case 4:
      v18 = v16 >= 4;
      v17 = 4;
      goto LABEL_35;
    case 8:
      v18 = v16 >= 2;
      v17 = 2;
LABEL_35:
      if (!v18)
        v17 = v16;
      break;
    default:
      break;
  }
  if (a3 < 8)
    v19 = 2;
  else
    v19 = 3;
  if (a3 < 4)
    v19 = 1;
  if (a3 <= 1)
    v19 = 0;
  v21[0] = (int)(((a2 - 1) >> v14) + 1);
  v21[1] = (int)(((a3 - 1) >> v19) + 1);
  v21[2] = (int)((a5 * a4 - 1) / v17 + 1);
  v20[0] = v12;
  v20[1] = v11;
  v20[2] = v17;
  objc_msgSend(v9, "dispatchThreadgroups:threadsPerThreadgroup:", v21, v20);

}

void sub_1912EFC00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::crop_and_resize_kernel::~crop_and_resize_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::crop_and_resize_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  int v7;
  const void **v8;
  const void *v9;
  _QWORD *v10;
  int v11;
  const void *v12;
  _DWORD *v13;
  uint64_t v14;
  id v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  _DWORD *v24;
  int v25;
  const char *v26;
  void *v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  int v32;
  const char *v33;
  const char *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  id v44[2];

  v7 = *((_DWORD *)a4 + 2);
  v8 = *a4;
  v9 = **a4;
  if (v9)
  else
    v10 = 0;
  v11 = v7 - (_DWORD)v8;
  v12 = **a3;
  if (v12)
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v44, *a2);
  v15 = v44[0];
  v16 = v13[4];
  v17 = v13[5];
  if (v16 >= 1)
    v18 = v16 - 1;
  else
    v18 = v16 + 2;
  v19 = *((_QWORD *)v13 + 1);
  v41 = v10[1];
  v20 = *((_DWORD *)v10 + 5);
  v21 = (v11 << 12) & 0xFFFF0000;
  if (v21 != 0x10000 && v21 != 0x20000)
    Espresso::throw_exception_selector<Espresso::generic_error>("crop_and_resize_metal_kernel: requires either one or two inputs");
  v40 = v14;
  v42 = *((_QWORD *)v13 + 1);
  if (v21 != 0x10000)
  {
    v25 = v24[4];
    if ((v25 & 0xFFFFFFFE) != 4)
    {
      v26 = "crop_and_resize_metal_kernel: crop indices must be of size 4 or 5";
      goto LABEL_52;
    }
    v23 = v24[6];
    v22 = v25 == 5;
    if (v25 == 5)
    {
      v19 = v42;
      if (v17 != 1)
      {
        v26 = "crop_and_resize_metal_kernel: batch size of output must be 1";
        goto LABEL_52;
      }
    }
    else
    {
      v19 = v42;
      if (v17 != v20)
      {
        v26 = "crop_and_resize_metal_kernel: batch size of input and output does not match";
        goto LABEL_52;
      }
    }
    if (v23 == v13[6])
      goto LABEL_21;
    v26 = "crop_and_resize_metal_kernel: seq size of output does not match the number of RoIs";
LABEL_52:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v26);
  }
  if (v17 != v20)
  {
    v37 = "crop_and_resize_metal_kernel: batch size of input and output does not match";
LABEL_48:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v37);
  }
  v22 = 0;
  v23 = 1;
LABEL_21:
  if (v16 != *((_DWORD *)v10 + 4))
  {
    v37 = "crop_and_resize_metal_kernel: channel size of input and output does not match";
    goto LABEL_48;
  }
  v43 = (v18 >> 2) + 1;
  if (*(_DWORD *)(a1 + 324) != (_DWORD)v19
    || *(_QWORD *)(a1 + 328) != __PAIR64__(v41, HIDWORD(v19))
    || *(_DWORD *)(a1 + 336) != HIDWORD(v41)
    || *(_DWORD *)(a1 + 344) != v20
    || *(_DWORD *)(a1 + 348) != v17
    || *(_DWORD *)(a1 + 340) != v43
    || *(_DWORD *)(a1 + 352) != v23
    || *(unsigned __int8 *)(a1 + 356) != v22)
  {
    v27 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = 0;
    v28 = v22;

    *(_QWORD *)&v29 = v42;
    *((_QWORD *)&v29 + 1) = v41;
    *(_OWORD *)(a1 + 324) = v29;
    *(_DWORD *)(a1 + 344) = v20;
    *(_DWORD *)(a1 + 348) = v17;
    *(_DWORD *)(a1 + 340) = v43;
    *(_DWORD *)(a1 + 352) = v23;
    *(_BYTE *)(a1 + 356) = v28;
  }
  if (!*(_QWORD *)(a1 + 360))
  {
    v30 = objc_msgSend(*(id *)(v40 + 144), "newBufferWithBytes:length:options:", a1 + 280, 80, 0);
    v31 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v30;

  }
  v32 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 32))(v13);
  v33 = "resize_bilinear_with_roi_f32";
  if (v21 == 0x10000)
    v33 = "resize_bilinear_full_image_f32";
  v34 = "resize_bilinear_with_roi_f16";
  if (v21 == 0x10000)
    v34 = "resize_bilinear_full_image_f16";
  if (v32 == 1)
    v35 = v34;
  else
    v35 = v33;
  objc_msgSend(*(id *)(v40 + 160), "kernelForFunction:cacheString:withConstants:", v35, 0, 0, a4);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v36)
    Espresso::throw_exception_selector<Espresso::generic_error>("crop_and_resize_metal_kernel: kernel not found");
  objc_msgSend(v15, "setComputePipelineState:", v36);
  objc_msgSend(v15, "setTexture:atIndex:", *((_QWORD *)v13 + 21), 0);
  objc_msgSend(v15, "setTexture:atIndex:", v10[21], 1);
  if (v21 > 0x10000)
  objc_msgSend(v15, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 360), 0, 0);
  dispatch_auto_threadgroupsize(v15, v13[2], v13[3], v43, v13[6] * v13[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v44);
}

void sub_1912F008C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::crop_and_resize_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_BYTE *)(a1 + 312) == 0;
}

const char *Espresso::generic_crop_and_resize_kernel::kernel_type_str(Espresso::generic_crop_and_resize_kernel *this)
{
  return "crop_and_resize";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::crop_and_resize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::throw_exception_selector<Espresso::generic_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::generic_error>(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::invalid_blob_shape_error>(a1);
}

void Espresso::MetalLowmemEngine::general_padding_kernel::~general_padding_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::general_padding_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v7;
  _DWORD *v8;
  const void *v9;
  _DWORD *v10;
  id *v11;
  id v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  NSString *v23;
  MTLFunctionConstantValues *v24;
  int v25;
  __CFString *v26;
  uint64_t v27;
  void *v28;
  std::runtime_error *exception;
  _BOOL4 v30;
  _BOOL4 v31;
  id v32[2];

  v7 = **a4;
  if (v7)
  else
    v8 = 0;
  v9 = **a3;
  if (v9)
  else
    v10 = 0;
  v11 = *(id **)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v32, *a2);
  v12 = v32[0];
  v13 = v10[4];
  v14 = v13 - 1;
  if (v13 < 1)
    v14 = v13 + 2;
  if (v13 != v8[4] || (v15 = v10[5], v15 != v8[5]) || (v16 = v10[6], v16 != v8[6]))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid shape");
  v17 = (v14 >> 2) + 1;
  v18 = v16 * v15;
  if (*(_DWORD *)(a1 + 332) != v10[2]
    || *(_DWORD *)(a1 + 336) != v10[3]
    || *(_DWORD *)(a1 + 348) != v17
    || *(_DWORD *)(a1 + 340) != v8[2]
    || *(_DWORD *)(a1 + 344) != v8[3]
    || *(_DWORD *)(a1 + 352) != v18)
  {
    v19 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = 0;

    *(_QWORD *)&v20 = *((_QWORD *)v10 + 1);
    *((_QWORD *)&v20 + 1) = *((_QWORD *)v8 + 1);
    *(_OWORD *)(a1 + 332) = v20;
    *(_DWORD *)(a1 + 352) = v18;
    *(_DWORD *)(a1 + 348) = v17;
  }
  if (!*(_QWORD *)(a1 + 360))
  {
    v21 = objc_msgSend(v11[18], "newBufferWithBytes:length:options:", a1 + 280, 76, 0);
    v22 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v21;

  }
  if (!*(_QWORD *)(a1 + 368))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), *(__int16 *)(a1 + 282));
    v23 = (NSString *)objc_claimAutoreleasedReturnValue();
    v24 = (MTLFunctionConstantValues *)objc_opt_new();
    v25 = *(unsigned __int16 *)(a1 + 282);
    v30 = v25 == 2;
    v31 = v25 == 1;
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v24, "setConstantValue:type:atIndex:", &v31, 29, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v24, "setConstantValue:type:atIndex:", &v30, 29, 1);
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v10 + 32))(v10))
      v26 = CFSTR("general_padding_padding_f16");
    else
      v26 = CFSTR("general_padding_padding_f32");
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v11, &v26->isa, v23, v24);
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = *(void **)(a1 + 368);
    *(_QWORD *)(a1 + 368) = v27;

    if (!*(_QWORD *)(a1 + 368))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  objc_msgSend(v12, "setComputePipelineState:");
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v10 + 21), 0);
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v8 + 21), 1);
  objc_msgSend(v12, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 360), 0, 0);
  dispatch_auto_threadgroupsize(v12, v10[2], v10[3], v17, v18);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v32);
}

void sub_1912F0490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;

  __cxa_free_exception(v12);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a11);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_general_padding_kernel::kernel_type_str(Espresso::generic_general_padding_kernel *this)
{
  return "general_padding";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::general_padding_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::batchnorm_kernel::~batchnorm_kernel(id *this)
{
  *this = &off_1E2D7E398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 57));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 51));
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel((Espresso::generic_batchnorm_kernel *)this);
}

{
  *this = &off_1E2D7E398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 57));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 51));
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel((Espresso::generic_batchnorm_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::batchnorm_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  _DWORD *v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  _DWORD *v16;
  _DWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  _DWORD *v35;
  int v36;
  std::runtime_error *v37;
  _DWORD *v38;
  double v39;
  float v40;
  uint64_t v41;
  int v42;
  void *v43;
  int v44;
  int v45;
  uint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  signed int v60;
  _DWORD *v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  void *v65;
  const void **v66;
  id *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  id v71;
  unint64_t v72;
  _DWORD *v73;
  const void **v74;
  id *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  id v79;
  unint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::runtime_error *exception;
  std::runtime_error *v89;
  std::runtime_error *v90;
  std::runtime_error *v91;
  const char *v92;
  const void ***v93;
  _QWORD v94[3];
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  id v99[2];
  _DWORD *v100;
  std::__shared_weak_count *v101;
  _DWORD *v102;
  std::__shared_weak_count *v103;

  if (*(_DWORD *)(a1 + 376) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Only BatchNorm2D is supported");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = *a4;
  v8 = **a4;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v102 = v9;
    v103 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v102 = 0;
    v103 = 0;
  }
  v93 = a3;
  v14 = *a3;
  v15 = **a3;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v100 = v16;
    v101 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v100 = 0;
    v101 = 0;
  }
  v21 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v99, *a2);
  v22 = v99[0];
  v23 = v17[4];
  if (v23 >= 1)
    v24 = v23 - 1;
  else
    v24 = v23 + 2;
  if (!*(_QWORD *)(a1 + 432))
  {
    if (!*(_DWORD *)(a1 + 308) || !*(_DWORD *)(a1 + 312))
    {
      v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, "Unexpected null pointer: bn_params");
LABEL_120:
      __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v97, 4 * v23, 1, 1, 1);
    v25 = v17[4];
    v26 = v97;
    v27 = *(_QWORD *)(v97 + 16);
    if ((int)v25 >= 1)
    {
      v28 = *(_OWORD **)(v97 + 16);
      do
      {
        *v28++ = xmmword_191A932D0;
        --v25;
      }
      while (v25);
    }
    v29 = objc_msgSend(*(id *)(v21 + 144), "newBufferWithBytes:length:options:", v27, 4 * *(int *)(v26 + 8), 0, v93);
    v30 = *(void **)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v29;

    v31 = v98;
    if (v98)
    {
      v32 = (unint64_t *)&v98->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v17 = v100;
    v23 = v100[4];
    v10 = v102;
  }
  if (v23 != v10[4])
  {
LABEL_115:
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Invalid shape (k)");
    goto LABEL_120;
  }
  v34 = v17[5];
  if (v34 != v10[5])
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Invalid shape (n)");
    goto LABEL_120;
  }
  if (v17[2] != v10[2])
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Invalid shape (w)");
    goto LABEL_120;
  }
  if (v17[3] != v10[3])
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Invalid shape (h)");
    goto LABEL_120;
  }
  v35 = (_DWORD *)(a1 + 304);
  v36 = *(_DWORD *)(a1 + 312);
  if (!*(_DWORD *)(a1 + 308))
  {
    if (v36 || *v35 == v23)
      goto LABEL_41;
    goto LABEL_115;
  }
  if (v34 != 1 && !v36)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Not implemented: only instance norm was implemented");
    goto LABEL_120;
  }
LABEL_41:
  *(_DWORD *)(a1 + 448) = 1065353216;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v10 + 32))(v10) == 4
    || (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v102 + 32))(v102) == 2)
  {
    v38 = v100;
    v39 = 128.0;
    if (!v100[29])
      v39 = 256.0;
    v40 = *((float *)v100 + 28) / v39;
    *(float *)(a1 + 448) = v40;
  }
  else
  {
    v38 = v100;
  }
  v41 = ((uint64_t)v24 >> 2) + 1;
  if (*(_DWORD *)(a1 + 344) != v38[2]
    || *(_DWORD *)(a1 + 348) != v38[3]
    || *v35 != v38[4]
    || *(_DWORD *)(a1 + 352) != (_DWORD)v41)
  {
    goto LABEL_55;
  }
  v42 = v102[6];
  if (v42 <= 1)
    v42 = 1;
  if (*(_DWORD *)(a1 + 356) != v42 * v102[5] || *(float *)(a1 + 448) != *(float *)(a1 + 360))
  {
LABEL_55:
    v43 = *(void **)(a1 + 424);
    *(_QWORD *)(a1 + 424) = 0;

    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 344) = *((_QWORD *)v38 + 1);
    v44 = v38[4];
    *(_DWORD *)(a1 + 304) = v44;
    *(_DWORD *)(a1 + 352) = v41;
    v45 = v102[6];
    if (v45 <= 1)
      v45 = 1;
    *(_DWORD *)(a1 + 356) = v45 * v102[5];
    if (*(_DWORD *)(a1 + 308))
    {
      if (*(_DWORD *)(a1 + 312))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v97, 2 * v44 * v38[5], 1, 1, 1);
        v46 = objc_msgSend(*(id *)(v21 + 144), "newBufferWithBytes:length:options:", *(_QWORD *)(v97 + 16), 4 * *(int *)(v97 + 8), 0);
        v47 = *(void **)(a1 + 440);
        *(_QWORD *)(a1 + 440) = v46;

        v48 = v98;
        if (v98)
        {
          v49 = (unint64_t *)&v98->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
    }
  }
  if (!*(_QWORD *)(a1 + 424))
  {
    v51 = objc_msgSend(*(id *)(v21 + 144), "newBufferWithBytes:length:options:", a1 + 304, 76, 0);
    v52 = *(void **)(a1 + 424);
    *(_QWORD *)(a1 + 424) = v51;

  }
  v53 = *(void **)(v21 + 160);
  if (*(_DWORD *)(a1 + 308))
  {
    objc_msgSend(v53, "kernelForFunction:cacheString:withConstants:", "batchnorm_training_kernel", 0, 0);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend(v54, "maxTotalThreadsPerThreadgroup");
    v56 = objc_msgSend(v54, "threadExecutionWidth");
    if (v55 >= 256)
      v57 = 256;
    else
      v57 = v55;
    if (*(_DWORD *)(a1 + 344) >= v56)
      v58 = v56;
    else
      v58 = *(_DWORD *)(a1 + 344);
    v59 = v57 / v58;
    if (v59 >= *(_DWORD *)(a1 + 348))
      v60 = *(_DWORD *)(a1 + 348);
    else
      v60 = v59;
    if (!v54)
    {
      v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v89, "Kernel not found");
      __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v22, "setComputePipelineState:", v54);
    v61 = v102;
    objc_msgSend(v22, "setTexture:atIndex:", *((_QWORD *)v102 + 21), 0);
    objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 424), 0, 0);
    objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 440), 0, 1);
    objc_msgSend(v22, "setThreadgroupMemoryLength:atIndex:", ((4 * v60 * v58 - 1) & 0xFFFFFFFFFFFFFFF0) + 16, 0);
    v62 = 16 * v60 * v58;
    objc_msgSend(v22, "setThreadgroupMemoryLength:atIndex:", v62, 1);
    objc_msgSend(v22, "setThreadgroupMemoryLength:atIndex:", v62, 2);
    v63 = v100;
    v64 = (int)v100[5] * (uint64_t)(int)v41;
    v95 = vdupq_n_s64(1uLL);
    v96 = v64;
    v94[0] = v58;
    v94[1] = v60;
    v94[2] = 1;
    objc_msgSend(v22, "dispatchThreadgroups:threadsPerThreadgroup:", &v95, v94);
    objc_msgSend(*(id *)(v21 + 160), "kernelForFunction:cacheString:withConstants:", "instancenorm_inference_kernel", 0, 0);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v65)
    {
      v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Kernel not found");
      __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v22, "setComputePipelineState:", v65);
    objc_msgSend(v22, "setTexture:atIndex:", *((_QWORD *)v63 + 21), 0);
    objc_msgSend(v22, "setTexture:atIndex:", *((_QWORD *)v61 + 21), 1);
    objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 424), 0, 0);
    objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 432), 0, 1);
    objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 440), 0, 2);
    dispatch_auto_threadgroupsize(v22, v63[2], v63[3], v41, v63[6] * v63[5]);
    if (!*(_DWORD *)(a1 + 368) || *(_DWORD *)(a1 + 312) != 1)
      goto LABEL_102;
    v66 = *v93;
    v68 = (std::__shared_weak_count *)v66[3];
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      v71 = v67[21];
      do
        v72 = __ldaxr(v69);
      while (__stlxr(v72 - 1, v69));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    else
    {
      v71 = v67[21];
    }
    v74 = *v93;
    v76 = (std::__shared_weak_count *)v74[5];
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
      v79 = v75[21];
      do
        v80 = __ldaxr(v77);
      while (__stlxr(v80 - 1, v77));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    else
    {
      v79 = v75[21];
    }
    if (v71)
    {
      if (v79)
      {
        objc_msgSend(*(id *)(v21 + 160), "kernelForFunction:cacheString:withConstants:", "bn_to_transplant_kernel", 0, 0);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v81)
          Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found for mean/ivar output");
        objc_msgSend(v22, "setComputePipelineState:", v81);
        objc_msgSend(v22, "setTexture:atIndex:", v71, 0);
        objc_msgSend(v22, "setTexture:atIndex:", v79, 1);
        objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 440), 0, 0);
        objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 424), 0, 1);
        dispatch_auto_threadgroupsize(v22, *((_DWORD *)(*v93)[2] + 2), *((_DWORD *)(*v93)[2] + 3), v41, *((_DWORD *)(*v93)[2] + 6) * *((_DWORD *)(*v93)[2] + 5));

LABEL_102:
        goto LABEL_103;
      }
      v92 = "Texture not found for ivar output";
    }
    else
    {
      v92 = "Texture not found for mean output";
    }
    Espresso::throw_exception_selector<Espresso::generic_error>(v92);
  }
  objc_msgSend(v53, "kernelForFunction:cacheString:withConstants:", "batchnorm_inference_kernel", 0, 0);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v54)
  {
    v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v91, "Kernel not found");
    __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v22, "setComputePipelineState:", v54);
  v73 = v100;
  objc_msgSend(v22, "setTexture:atIndex:", *((_QWORD *)v100 + 21), 0);
  objc_msgSend(v22, "setTexture:atIndex:", *((_QWORD *)v102 + 21), 1);
  objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 424), 0, 0);
  objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 432), 0, 1);
  dispatch_auto_threadgroupsize(v22, v73[2], v73[3], v41, v73[5]);
LABEL_103:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v99);
  v82 = v101;
  if (v101)
  {
    v83 = (unint64_t *)&v101->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v103;
  if (v103)
  {
    v86 = (unint64_t *)&v103->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_1912F107C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, id a19, uint64_t a20,char a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  __cxa_free_exception(v22);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_batchnorm_kernel::kernel_type_str(Espresso::generic_batchnorm_kernel *this)
{
  return "batchnorm";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

_QWORD *Espresso::MetalLowmemEngine::batchnorm_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;

  if (*a2)
  {
    v6 = *(_DWORD *)(a1 + 304);
    if ((v6 & 3) != 0)
    {
      v8 = v6 - 1;
      v7 = v6 < 1;
      v9 = v6 + 2;
      if (v7)
        v8 = v9;
      v10 = (v8 >> 2) + 1;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v26, 16 * v10, 1, 1, 1);
      v11 = *(int *)(a1 + 304);
      v12 = v26;
      v13 = *(_DWORD **)(v26 + 16);
      if ((int)v11 < 4 * v10)
      {
        v14 = 4 * v10 - v11;
        v15 = 4 * v11;
        do
        {
          v13[v15] = 1065353216;
          v13[v15 + 1] = 0;
          v13[v15 + 2] = 0;
          v13[v15 + 3] = 1065353216;
          v15 += 4;
          --v14;
        }
        while (v14);
      }
      v16 = *(int *)(*a2 + 8);
      if (4 * *(int *)(v12 + 8) >= (unint64_t)(4 * v16))
        v17 = 4 * v16;
      else
        v17 = 4 * *(int *)(v12 + 8);
      memcpy(v13, *(const void **)(*a2 + 16), v17);
      v18 = objc_msgSend(*(id *)(v4 + 144), "newBufferWithBytes:length:options:", *(_QWORD *)(v12 + 16), 4 * *(int *)(v12 + 8), 0);
      v19 = *(void **)(a1 + 432);
      *(_QWORD *)(a1 + 432) = v18;

      v20 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    else
    {
      v23 = objc_msgSend(*(id *)(v4 + 144), "newBufferWithBytes:length:options:", *(_QWORD *)(*a2 + 16), 4 * *(int *)(*a2 + 8), 0);
      v24 = *(void **)(a1 + 432);
      *(_QWORD *)(a1 + 432) = v23;

    }
  }
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 456), *a2, a2[1]);
}

void sub_1912F1318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::batchnorm_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 464);
  *a2 = *(_QWORD *)(this + 456);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  Espresso *v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEC00;
  *((_QWORD *)v10 + 3) = &off_1E2DA1190;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1912F1410(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::blob<float,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1190;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<float,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<float,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::flatten_kernel_metal::~flatten_kernel_metal(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::flatten_kernel_metal::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v7;
  _DWORD *v8;
  const void *v9;
  int *v10;
  uint64_t v11;
  id v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  int v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  std::runtime_error *v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  _QWORD v29[3];
  __int128 v30;
  uint64_t v31;
  std::string v32;
  std::string v33;
  int v34;
  int v35;
  int v36;
  id v37[2];

  v7 = **a4;
  if (v7)
  else
    v8 = 0;
  v9 = **a3;
  if (v9)
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v37, *a2);
  v12 = v37[0];
  v13 = v10[4] - 1;
  if (!*(_QWORD *)(a1 + 312))
  {
    v14 = v8[4];
    v15 = v8[5];
    v16 = v14 - 1;
    if (v14 < 1)
      v16 = v14 + 2;
    v17 = v8[2];
    v18 = v8[3];
    LODWORD(v33.__r_.__value_.__l.__data_) = v13 / 4 + 1;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = __PAIR64__(v18, v17);
    HIDWORD(v33.__r_.__value_.__r.__words[1]) = v14;
    LODWORD(v33.__r_.__value_.__r.__words[2]) = (v16 >> 2) + 1;
    HIDWORD(v33.__r_.__value_.__r.__words[2]) = v15;
    v34 = v18 * v17;
    v35 = v14 * v18 * v17;
    v36 = v14 * v17;
    v19 = objc_msgSend(*(id *)(v11 + 144), "newBufferWithBytes:length:options:", &v33, 36, 0);
    v20 = *(void **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v19;

  }
  v21 = *(_DWORD *)(a1 + 280);
  if (v21 == 1)
  {
    v22 = "flatten_nhwc";
  }
  else
  {
    if (v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v32, *(_DWORD *)(a1 + 280));
      v27 = std::string::insert(&v32, 0, "Invalid flatten mode: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v33);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v22 = "flatten_nchw";
  }
  objc_msgSend(*(id *)(v11 + 160), "kernelForFunction:cacheString:withConstants:", v22, 0, 0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v23)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Kernel not found");
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v12, "setComputePipelineState:", v23);
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v8 + 21), 0);
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v10 + 21), 1);
  objc_msgSend(v12, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 312), 0, 0);
  v30 = xmmword_191A932B0;
  v31 = 1;
  v24 = v10[5];
  v29[0] = v13 / 64 + 1;
  v29[1] = v24;
  v29[2] = 1;
  objc_msgSend(v12, "dispatchThreadgroups:threadsPerThreadgroup:", &v30, v29);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v37);
}

void sub_1912F1838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  int v29;
  uint64_t v30;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v29 & 1) == 0)
    {
LABEL_8:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v30 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void Espresso::MetalLowmemEngine::flatten_kernel_metal::on_resized(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;

}

BOOL Espresso::MetalLowmemEngine::flatten_kernel_metal::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[20];
  unsigned int v7;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 64)
    return 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, *(const Espresso::layer_shape **)a3, 0);
  return *(_DWORD *)(a1 + 280) != 2 && v7 < 5;
}

const char *Espresso::generic_flatten_kernel::kernel_type_str(Espresso::generic_flatten_kernel *this)
{
  return "flatten";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::flatten_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::crop_kernel_metal::~crop_kernel_metal(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::crop_kernel_metal::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v7;
  _DWORD *v8;
  const void *v9;
  _DWORD *v10;
  id *v11;
  id v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  NSString *v21;
  MTLFunctionConstantValues *v22;
  __CFString *v23;
  uint64_t v24;
  void *v25;
  std::runtime_error *exception;
  uint64_t v27;
  id v28[2];

  v7 = **a4;
  if (v7)
  else
    v8 = 0;
  v9 = **a3;
  if (v9)
  else
    v10 = 0;
  v11 = *(id **)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v28, *a2);
  v12 = v28[0];
  v13 = v10[4];
  v14 = v13 - 1;
  if (v13 < 1)
    v14 = v13 + 2;
  if (v13 != v8[4] || (v15 = v10[5], v15 != v8[5]))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape");
    goto LABEL_29;
  }
  v16 = (v14 >> 2) + 1;
  if (*(_DWORD *)(a1 + 364) != v10[2]
    || *(_DWORD *)(a1 + 368) != v10[3]
    || *(_DWORD *)(a1 + 380) != v16
    || *(_DWORD *)(a1 + 372) != v8[2]
    || *(_DWORD *)(a1 + 376) != v8[3]
    || *(_DWORD *)(a1 + 384) != v15)
  {
    v17 = *(void **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;

    *(_QWORD *)&v18 = *((_QWORD *)v10 + 1);
    *((_QWORD *)&v18 + 1) = *((_QWORD *)v8 + 1);
    *(_OWORD *)(a1 + 364) = v18;
    *(_DWORD *)(a1 + 384) = v10[5];
    *(_DWORD *)(a1 + 380) = v16;
  }
  if (!*(_QWORD *)(a1 + 296))
  {
    v19 = objc_msgSend(v11[18], "newBufferWithBytes:length:options:", a1 + 312, 76, 0);
    v20 = *(void **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v19;

  }
  if (!*(_QWORD *)(a1 + 304))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), 0);
    v21 = (NSString *)objc_claimAutoreleasedReturnValue();
    v22 = (MTLFunctionConstantValues *)objc_opt_new();
    v27 = 0;
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v22, "setConstantValue:type:atIndex:", (char *)&v27 + 4, 29, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v22, "setConstantValue:type:atIndex:", &v27, 29, 1);
    v23 = (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v10 + 32))(v10)
        ? CFSTR("general_padding_padding_f16")
        : CFSTR("general_padding_padding_f32");
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v11, &v23->isa, v21, v22);
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v24;

    if (!*(_QWORD *)(a1 + 304))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_29:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  objc_msgSend(v12, "setComputePipelineState:");
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v10 + 21), 0);
  objc_msgSend(v12, "setTexture:atIndex:", *((_QWORD *)v8 + 21), 1);
  objc_msgSend(v12, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 296), 0, 0);
  dispatch_auto_threadgroupsize(v12, v10[2], v10[3], v16, v10[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v28);
}

void sub_1912F1CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;

  __cxa_free_exception(v12);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a11);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_crop_kernel::kernel_type_str(Espresso::generic_crop_kernel *this)
{
  return "crop";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::crop_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::activation_kernel::~activation_kernel(id *this)
{

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
}

{

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::activation_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  _DWORD *v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  void *v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  const std::string::value_type *v35;
  std::string *v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::runtime_error *exception;
  std::runtime_error *v45;
  std::string v46;
  id v47[2];
  void *v48;
  std::__shared_weak_count *v49;
  void *v50;
  std::__shared_weak_count *v51;

  v7 = *a4;
  v8 = **a4;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v50 = v9;
    v51 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v50 = 0;
    v51 = 0;
  }
  v14 = *a3;
  if (*(_QWORD *)v14
  {
    v16 = v15;
    v17 = *(std::__shared_weak_count **)(v14 + 8);
    v48 = v15;
    v49 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v48 = 0;
    v49 = 0;
  }
  v20 = *(_QWORD *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v47, *a2);
  v21 = v47[0];
  v22 = v16[4];
  if (v22 >= 1)
    v23 = v22 - 1;
  else
    v23 = v22 + 2;
  v24 = v16[2];
  if (v24 != v10[2]
    || (v25 = v16[3], v25 != v10[3])
    || v22 != v10[4]
    || (v26 = v16[5], v26 != v10[5])
    || (v27 = v16[6], v27 != v10[6]))
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("shape mismatch");
  }
  v28 = (v23 >> 2) + 1;
  if (*(_DWORD *)(a1 + 324) != v24
    || *(_DWORD *)(a1 + 328) != v25
    || *(_DWORD *)(a1 + 332) != v28
    || (v27 <= 1 ? (v29 = 1) : (v29 = v16[6]), *(_DWORD *)(a1 + 336) != v29 * v26))
  {
    v30 = *(void **)(a1 + 408);
    *(_QWORD *)(a1 + 408) = 0;

    *(_QWORD *)(a1 + 324) = *((_QWORD *)v16 + 1);
    v31 = v16[6];
    if (v31 <= 1)
      v31 = 1;
    *(_DWORD *)(a1 + 336) = v31 * v16[5];
    *(_DWORD *)(a1 + 332) = v28;
  }
  if (!*(_QWORD *)(a1 + 408))
  {
    v32 = objc_msgSend(*(id *)(v20 + 144), "newBufferWithBytes:length:options:", a1 + 304, 36, 0);
    v33 = *(void **)(a1 + 408);
    *(_QWORD *)(a1 + 408) = v32;

  }
  if (!*(_QWORD *)(a1 + 400))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "activation_");
    v34 = *(unsigned int *)(a1 + 304);
    if (v34 >= 0x19 || ((0x1F87FFFu >> v34) & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported activation type");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::append(&v46, off_1E2DD1B60[v34]);
    std::string::append(&v46, "_f");
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v16 + 32))(v16) == 1)
      v35 = "16";
    else
      v35 = "32";
    std::string::append(&v46, v35);
    std::string::append(&v46, "_pack4");
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v46;
    else
      v36 = (std::string *)v46.__r_.__value_.__r.__words[0];
    objc_msgSend(*(id *)(v20 + 160), "kernelForFunction:cacheString:withConstants:", v36, 0, 0);
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = *(void **)(a1 + 400);
    *(_QWORD *)(a1 + 400) = v37;

    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 400))
    {
      v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v45, "Kernel not found");
      __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  objc_msgSend(v21, "setComputePipelineState:");
  objc_msgSend(v21, "setTexture:atIndex:", *((_QWORD *)v16 + 21), 0);
  objc_msgSend(v21, "setTexture:atIndex:", *((_QWORD *)v10 + 21), 1);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 408), 0, 0);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 416), 0, 1);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 424), 0, 2);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 432), 0, 3);
  dispatch_auto_threadgroupsize(v21, *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), *(_DWORD *)(a1 + 332), *(_DWORD *)(a1 + 336));

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v47);
  if (v17)
  {
    v39 = (unint64_t *)&v17->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v41 = v51;
  if (v51)
  {
    v42 = (unint64_t *)&v51->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1912F2244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, id a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  __cxa_free_exception(v21);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_named_weights<Espresso::activation_params>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::MetalLowmemEngine::activation_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  void **v12;
  int v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  std::runtime_error *exception;

  v7 = *(_QWORD *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    v10 = a3[1];
    if (v10 != 12)
    {
      if (v10 != 14)
      {
        if (v10 != 15)
          goto LABEL_41;
        if (*(_QWORD *)*a3 != 0x73756C7074666F73 || *(_QWORD *)(*a3 + 7) != 0x736168706C615F73)
          goto LABEL_41;
LABEL_18:
        v12 = (void **)(a1 + 424);
        goto LABEL_37;
      }
      a3 = (uint64_t *)*a3;
      goto LABEL_31;
    }
    if (*(_QWORD *)*a3 != 0x705F736D61726170 || *(_DWORD *)(*a3 + 8) != 1970038130)
      goto LABEL_41;
LABEL_29:
    v12 = (void **)(a1 + 416);
    goto LABEL_37;
  }
  v8 = *((unsigned __int8 *)a3 + 23);
  if (v8 == 12)
  {
    if (*a3 != 0x705F736D61726170 || *((_DWORD *)a3 + 2) != 1970038130)
      goto LABEL_41;
    goto LABEL_29;
  }
  if (v8 != 14)
  {
    if (v8 != 15
      || (*a3 == 0x73756C7074666F73 ? (v9 = *(uint64_t *)((char *)a3 + 7) == 0x736168706C615F73) : (v9 = 0), !v9))
    {
LABEL_41:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unknown weight name");
      goto LABEL_43;
    }
    goto LABEL_18;
  }
LABEL_31:
  if (*a3 != 0x73756C7074666F73 || *(uint64_t *)((char *)a3 + 6) != 0x73617465625F7375)
    goto LABEL_41;
  v12 = (void **)(a1 + 432);
LABEL_37:
  v16 = a5 - 1;
  if ((int)a5 < 1)
    v16 = a5 + 14;
  v17 = (int)((v16 & 0xFFFFFFF0) + 16);
  v18 = malloc_type_calloc(v17, 1uLL, 0x5038B804uLL);
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error allocating memory");
LABEL_43:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19 = v18;
  memcpy(v18, a4, a5);
  v20 = objc_msgSend(*(id *)(v7 + 144), "newBufferWithBytes:length:options:", v19, v17, 0);
  v21 = *v12;
  *v12 = (void *)v20;

  free(v19);
}

void sub_1912F2520(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::activation_kernel::is_valid_for_engine(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t *v7;
  unint64_t v8;
  _OWORD v10[2];
  int v11;
  __int128 v12;
  _OWORD v13[4];
  int v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v2 = *(const void **)(a1 + 8);
  if (v2
  {
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v14 = 24;
    v13[1] = xmmword_191A94CA8;
    v13[2] = unk_191A94CB8;
    v13[3] = xmmword_191A94CC8;
    v12 = xmmword_191A94C88;
    v13[0] = unk_191A94C98;
    std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__assign_unique<Espresso::activation_mode const*>((uint64_t)v10, (int *)&v12, &v15);
  }
  else
  {
    v12 = xmmword_191A932E0;
    std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__assign_unique<Espresso::activation_mode const*>((uint64_t)v10, (int *)&v12, (int *)v13);
    if (*(_DWORD *)(a1 + 392) != 1)
    {
      v6 = 0;
      goto LABEL_15;
    }
    v3 = 0;
  }
  v6 = std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(*(uint64_t *)&v10[0], *((unint64_t *)&v10[0] + 1), *(_DWORD *)(a1 + 304)) != 0;
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_15:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v10);
  return v6;
}

void sub_1912F26AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::activation_kernel::supports_weight_key(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 == 12)
      return *(_QWORD *)*a2 == 0x705F736D61726170 && *(_DWORD *)(*a2 + 8) == 1970038130;
    if (v6 != 14)
    {
      if (v6 == 15)
        return *(_QWORD *)*a2 == 0x73756C7074666F73 && *(_QWORD *)(*a2 + 7) == 0x736168706C615F73;
      return 0;
    }
    a2 = (_QWORD *)*a2;
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 == 12)
      return *a2 == 0x705F736D61726170 && *((_DWORD *)a2 + 2) == 1970038130;
    if (v2 != 14)
    {
      if (v2 == 15)
      {
        v3 = *(_QWORD *)((char *)a2 + 7);
        v4 = *a2 == 0x73756C7074666F73;
        v5 = 0x68706C615F73;
        goto LABEL_21;
      }
      return 0;
    }
  }
  v3 = *(_QWORD *)((char *)a2 + 6);
  v4 = *a2 == 0x73756C7074666F73;
  v5 = 0x7465625F7375;
LABEL_21:
  v9 = v5 & 0xFFFFFFFFFFFFLL | 0x7361000000000000;
  return v4 && v3 == v9;
}

const char *Espresso::generic_activation_kernel::kernel_type_str(Espresso::generic_activation_kernel *this)
{
  return "activation";
}

void std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__assign_unique<Espresso::activation_mode const*>(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *j;
  unint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  _BOOL8 v21;
  size_t v22;
  unint64_t v23;
  size_t v24;
  uint8x8_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v8 = *(_QWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (!v9)
    {
      while (1)
      {
        v11 = *v4;
        *((_DWORD *)v8 + 4) = v11;
        v10 = (_QWORD *)*v8;
        v8[1] = v11;
        v12 = *(_QWORD *)(a1 + 8);
        if (v12)
        {
          v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            v14 = v11;
            if (v12 <= v11)
              v14 = v11 % v12;
          }
          else
          {
            v14 = (v12 - 1) & v11;
          }
          v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v14);
          if (v15)
          {
            for (j = *v15; j; j = (uint64_t *)*j)
            {
              v17 = j[1];
              if (v17 == v11)
              {
                if (*((_DWORD *)j + 4) == (_DWORD)v11)
                  goto LABEL_49;
              }
              else
              {
                if (v13.u32[0] > 1uLL)
                {
                  if (v17 >= v12)
                    v17 %= v12;
                }
                else
                {
                  v17 &= v12 - 1;
                }
                if (v17 != v14)
                  break;
              }
            }
          }
        }
        v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v19 = *(float *)(a1 + 32);
        if (!v12 || (float)(v19 * (float)v12) < v18)
        {
          v20 = 2 * v12;
          v21 = v12 < 3 || (v12 & (v12 - 1)) != 0;
          v22 = v21 | v20;
          v23 = vcvtps_u32_f32(v18 / v19);
          if (v22 <= v23)
            v24 = v23;
          else
            v24 = v22;
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
          v12 = *(_QWORD *)(a1 + 8);
          v11 = v8[1];
        }
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          if (v11 >= v12)
            v11 %= v12;
        }
        else
        {
          v11 &= v12 - 1;
        }
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v26)
        {
          *v8 = *v26;
        }
        else
        {
          *v8 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v8;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
          if (!*v8)
            goto LABEL_48;
          v27 = *(_QWORD *)(*v8 + 8);
          if (v25.u32[0] > 1uLL)
          {
            if (v27 >= v12)
              v27 %= v12;
          }
          else
          {
            v27 &= v12 - 1;
          }
          v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
        }
        *v26 = v8;
LABEL_48:
        ++*(_QWORD *)(a1 + 24);
LABEL_49:
        ++v4;
        if (v10)
        {
          v8 = v10;
          if (v4 != a3)
            continue;
        }
        goto LABEL_51;
      }
    }
    v10 = v8;
LABEL_51:
    if (v10)
    {
      do
      {
        v28 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v28;
      }
      while (v28);
    }
  }
  while (v4 != a3)
  {
    v29 = *v4++;
    std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__emplace_unique_key_args<Espresso::activation_mode,Espresso::activation_mode const&>(a1, v29, v29);
  }
}

void sub_1912F2AA4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1912F2AC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(uint64_t a1, unint64_t a2, int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__emplace_unique_key_args<Espresso::activation_mode,Espresso::activation_mode const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1912F2D74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a4;
  v12 = a4;
  v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      v8 = v6[1];
      *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 + 4);
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v4 + 40), *((const void **)v6 + 5), *((_QWORD *)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
      v4 = v13 + 64;
      v13 += 64;
      v6 += 4;
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1912F2E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::~depthwise_convolution_kernel(id *this)
{
  *this = &off_1E2D801D8;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 73));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 71));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{
  *this = &off_1E2D801D8;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 73));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 71));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::__launch(uint64_t a1, uint64_t *a2, int32x2_t ***a3, int32x2_t ***a4)
{
  int32x2_t **v8;
  int32x2_t *v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  id v21;
  unint64_t v22;
  const void **v23;
  id *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  unint64_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int v33;
  int32x2_t v34;
  int8x8_t v35;
  int8x8_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  int v43;
  id *v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  int v49;
  void *v50;
  int v51;
  __int16 v52;
  __int16 v53;
  const __CFString *v54;
  const __CFString *v55;
  void *v56;
  void *v57;
  void *v58;
  MTLFunctionConstantValues *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t i;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t j;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  _WORD *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  int v118;
  int *v119;
  int v120;
  uint64_t v121;
  int v122;
  unint64_t *v123;
  uint64_t v124;
  void *v125;
  _QWORD *v126;
  const void **v127;
  id *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  id v132;
  unint64_t v133;
  int32x2_t **v134;
  id *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  id v139;
  unint64_t v140;
  std::runtime_error *exception;
  std::runtime_error *v142;
  std::runtime_error *v143;
  std::runtime_error *v144;
  std::runtime_error *v145;
  int32x2_t v146;
  void *v147;
  int8x8_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  _QWORD *v155;
  std::__shared_weak_count *v156;

  if (*(_QWORD *)(a1 + 688))
    goto LABEL_130;
  if (*(_DWORD *)(a1 + 416))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Batch Norm is deprecated in layer definition.");
    goto LABEL_155;
  }
  if (*(_WORD *)(a1 + 428))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Input channel offset is deprecated.");
LABEL_155:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_DWORD *)(a1 + 352) >> 15 || *(_DWORD *)(a1 + 356) >= 0x8000u)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel size is too large for depthwise convolution.");
    goto LABEL_155;
  }
  v8 = *a3;
  v9 = **a3;
  *(int32x2_t *)(a1 + 616) = vrev64_s32(v9[1]);
  v10 = *(_DWORD *)(a1 + 344);
  v12 = v10 - 1;
  v11 = v10 < 1;
  v13 = v10 + 2;
  if (!v11)
    v13 = v12;
  *(_DWORD *)(a1 + 624) = (v13 >> 2) + 1;
  LODWORD(v14) = v9[3].i32[0];
  v15 = v9[2].i32[1];
  if ((int)v14 <= 1)
    v14 = 1;
  else
    v14 = v14;
  v16 = v14 * v15;
  *(_WORD *)(a1 + 438) = v14 * v15;
  if (v17 && (v18 = (std::__shared_weak_count *)v8[1]) != 0)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = v17[21];
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    v21 = v17[21];
  }
  *(_DWORD *)(a1 + 628) = objc_msgSend(v21, "arrayLength") / v16;
  *(_DWORD *)(a1 + 632) = *(unsigned __int16 *)(a1 + 430) >> 2;
  v23 = (const void **)*a4;
  v25 = (std::__shared_weak_count *)v23[1];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = v24[21];
    do
      v29 = __ldaxr(v26);
    while (__stlxr(v29 - 1, v26));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v28 = v24[21];
  }
  v147 = v28;
  *(_DWORD *)(a1 + 636) = objc_msgSend(v28, "arrayLength") / v16;
  if ((*(_BYTE *)(a1 + 430) & 3) != 0)
  {
    v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v142, "The output offset must be a multiple of 4.");
    __cxa_throw(v142, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v30.i16[0] = *(_WORD *)(a1 + 400);
  v30.i16[2] = *(_WORD *)(a1 + 402);
  v31 = (int32x2_t)0x100000001;
  v32 = vmax_s32(vshr_n_s32(vshl_n_s32(v30, 0x10uLL), 0x10uLL), (int32x2_t)0x100000001);
  v148 = (int8x8_t)v32;
  v32.i16[0] = *(_WORD *)(a1 + 396);
  *(_DWORD *)(a1 + 640) = v16;
  v32.i16[2] = *(_WORD *)(a1 + 398);
  v33 = *(__int16 *)(a1 + 376);
  if (v33 != 4)
  {
    if (v33 == 2)
    {
      v36 = 0;
      goto LABEL_35;
    }
    if (v33 != 1)
    {
      v31.i16[0] = *(_WORD *)(a1 + 384);
      v31.i16[2] = *(_WORD *)(a1 + 388);
      v36 = (int8x8_t)vshr_n_s32(vshl_n_s32(v31, 0x10uLL), 0x10uLL);
      goto LABEL_35;
    }
  }
  v34 = vmax_s32(vsub_s32(vmla_s32(vneg_s32((int32x2_t)vmvn_s8((int8x8_t)vmul_s32(vadd_s32((**a3)[1], (int32x2_t)-1), vshr_n_s32(vshl_n_s32(v32, 0x10uLL), 0x10uLL)))), vadd_s32(*(int32x2_t *)(a1 + 352), (int32x2_t)-1), (int32x2_t)vand_s8(v148, (int8x8_t)0xFFFF0000FFFFLL)), (**a4)[1]), 0);
  v35 = (int8x8_t)vshr_n_u32((uint32x2_t)v34, 1uLL);
  v36 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 376) == 1), 0x1FuLL)), v35, (int8x8_t)vsub_s32(v34, (int32x2_t)v35));
LABEL_35:
  *(int8x8_t *)(a1 + 644) = v36;
  *(_WORD *)(a1 + 654) = *(_DWORD *)(a1 + 344) / *(_DWORD *)(a1 + 348);
  if (v32.i16[0] < 0 || v32.i16[2] < 0)
  {
    v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v143, "Invalid stride for depthwise convolution.");
    __cxa_throw(v143, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_WORD *)(a1 + 656) = v32.i16[2];
  *(_WORD *)(a1 + 658) = v32.i16[0];
  *(_DWORD *)(a1 + 660) = *(_DWORD *)(a1 + 340);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a1 + 364);
  *(_QWORD *)(a1 + 668) = *(_QWORD *)(a1 + 368);
  v37 = (*(_DWORD *)(a1 + 624) * v16);
  *(_OWORD *)(a1 + 728) = xmmword_191A932F0;
  v38 = *(unsigned int *)(a1 + 616);
  v39 = 128;
  v40 = 1;
  if (v38 <= 0x7F && v37 >= 2)
  {
    v39 = 128;
    v40 = 1;
    do
    {
      v39 >>= 1;
      v40 *= 2;
    }
    while (v39 > v38 && v40 < v37);
    *(_QWORD *)(a1 + 736) = v39;
  }
  *(_QWORD *)(a1 + 744) = v40;
  v42 = *(unsigned int *)(a1 + 620);
  v146 = v30;
  v43 = 4;
  if (v42 <= 3)
  {
    do
      v43 = (__int16)(v43 + ((unsigned __int16)(v43 & 0x8000) >> 15)) >> 1;
    while (v42 < v43);
  }
  *(_WORD *)(a1 + 652) = v43;
  *(_QWORD *)(a1 + 752) = (v42 - 1) / (unint64_t)v43 + 1;
  *(_QWORD *)(a1 + 760) = (v38 - 1) / v39 + 1;
  *(_QWORD *)(a1 + 768) = (v37 - 1) / v40 + 1;
  v44 = *(id **)(a1 + 8);
  v45 = v44[18];
  v46 = objc_msgSend(v45, "newBufferWithBytes:length:options:", a1 + 616, 60, 0);
  v47 = *(void **)(a1 + 704);
  *(_QWORD *)(a1 + 704) = v46;

  v48 = *(void **)(a1 + 680);
  *(_QWORD *)(a1 + 680) = CFSTR("depthwise_convolution_generic");

  v49 = *(_DWORD *)(a1 + 560);
  if (!v49)
  {
    v55 = CFSTR("_f32");
LABEL_60:
    objc_msgSend(*(id *)(a1 + 680), "stringByAppendingString:", v55);
    v54 = (const __CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_62;
  }
  if (v49 != 1)
    goto LABEL_63;
  if (*(_WORD *)(a1 + 654) != 1)
  {
    v55 = CFSTR("_f16");
    goto LABEL_60;
  }
  if (*(_DWORD *)(a1 + 352) != 3 || *(_DWORD *)(a1 + 356) != 3)
  {
    v54 = CFSTR("depthwise_convolution_no_multiplier");
    goto LABEL_62;
  }
  *(_BYTE *)(a1 + 676) = 1;
  v50 = *(void **)(a1 + 680);
  *(_QWORD *)(a1 + 680) = CFSTR("depthwise_convolution_3x3_no_multiplier");

  v51 = *(unsigned __int16 *)(a1 + 658);
  if (*(_WORD *)(a1 + 656) == 1)
  {
    v52 = v146.i16[0];
    v53 = v146.i16[2];
    if (v51 == 1 && v146.i16[0] <= 1 && v146.i16[2] < 2)
    {
      v54 = CFSTR("depthwise_convolution_3x3_no_stride_no_dilation_no_multiplier");
LABEL_62:
      v56 = *(void **)(a1 + 680);
      *(_QWORD *)(a1 + 680) = v54;

      goto LABEL_63;
    }
  }
  else
  {
    v52 = v146.i16[0];
    v53 = v146.i16[2];
  }
  if (v51 == 2 && v52 <= 1 && v53 < 2)
  {
    v54 = CFSTR("depthwise_convolution_3x3_2stridex_no_dilation_no_multiplier");
    goto LABEL_62;
  }
LABEL_63:
  v57 = (void *)objc_opt_new();
  v58 = v21;
  objc_msgSend(v57, "appendString:", *(_QWORD *)(a1 + 680));
  v59 = (MTLFunctionConstantValues *)objc_opt_new();
  LOBYTE(v155) = *(_DWORD *)(a1 + 336) == 1;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 53, 0);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 0, v155);
  LOBYTE(v155) = *(_DWORD *)(a1 + 328) == 1;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 53, 1);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 1, v155);
  LOBYTE(v155) = *(_DWORD *)(a1 + 328) == 2;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 53, 2);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 2, v155);
  LOBYTE(v155) = *(_DWORD *)(a1 + 332) == 1;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 53, 3);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 3, v155);
  LOWORD(v155) = v148.i16[0];
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 37, 4);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 4, (__int16)v155);
  LOWORD(v155) = v148.i16[2];
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 37, 5);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 5, (__int16)v155);
  LOWORD(v155) = *(_DWORD *)(a1 + 356);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 37, 6);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 6, (__int16)v155);
  LOWORD(v155) = *(_DWORD *)(a1 + 352);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 37, 7);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 7, (__int16)v155);
  LOBYTE(v155) = *(_DWORD *)(a1 + 364) == 24;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v59, "setConstantValue:type:atIndex:", &v155, 53, 8);
  objc_msgSend(v57, "appendFormat:", CFSTR("_%d:%d"), 8, v155);
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v44, *(NSString **)(a1 + 680), (NSString *)v57, v59);
  v60 = objc_claimAutoreleasedReturnValue();
  v61 = *(void **)(a1 + 688);
  *(_QWORD *)(a1 + 688) = v60;

  v62 = (void *)objc_opt_new();
  objc_msgSend(v62, "setNormalizedCoordinates:", 0);
  v63 = *(__int16 *)(a1 + 378);
  if (!*(_WORD *)(a1 + 378))
  {
    if (fabsf(*(float *)(a1 + 380)) > 0.00001)
      goto LABEL_158;
    objc_msgSend(v62, "setRAddressMode:", 4);
    v64 = 4;
    objc_msgSend(v62, "setSAddressMode:", 4);
    goto LABEL_70;
  }
  if (v63 == 1)
  {
    objc_msgSend(v62, "setRAddressMode:", 0);
    objc_msgSend(v62, "setSAddressMode:", 0);
    v64 = 0;
LABEL_70:
    objc_msgSend(v62, "setTAddressMode:", v64);
    goto LABEL_71;
  }
  if ((v63 - 2) < 2)
  {
LABEL_158:
    v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v144, "Not supported by MPS");
    __cxa_throw(v144, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_71:
  v65 = objc_msgSend(v45, "newSamplerStateWithDescriptor:", v62);
  v66 = *(void **)(a1 + 696);
  *(_QWORD *)(a1 + 696) = v65;

  v67 = *(_DWORD *)(a1 + 560);
  if (!v67)
  {
    v74 = *(_QWORD *)(a1 + 584);
    if (!v74)
      Espresso::throw_exception_selector<Espresso::blob_not_found_error>("Missing float32 weights in depthwise convolution");
    v69 = *(std::__shared_weak_count **)(a1 + 592);
    v155 = *(_QWORD **)(a1 + 584);
    v156 = v69;
    if (v69)
    {
      v75 = (unint64_t *)&v69->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    if (*(_DWORD *)(v74 + 16) != 1)
    {
      v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v145, "Invalid kernel shape for depthwise convolution.");
      __cxa_throw(v145, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v77 = *(unsigned int *)(v74 + 20);
    v78 = v77 - 1;
    if ((int)v77 < 1)
      v78 = v77 + 2;
    v79 = (v78 >> 2) + 1;
    v80 = *(_QWORD *)(v74 + 24);
    v81 = *(void **)(*(_QWORD *)(a1 + 8) + 144);
    if (*(_BYTE *)(a1 + 676))
    {
      v82 = objc_msgSend(v81, "newBufferWithLength:options:", 144 * v79, 0);
      v83 = *(void **)(a1 + 712);
      *(_QWORD *)(a1 + 712) = v82;

      v84 = objc_msgSend(*(id *)(a1 + 712), "contents");
      if ((int)v77 >= 1)
      {
        for (i = 0; i != v77; ++i)
        {
          v86 = 0;
          v87 = v84 + 144 * (i >> 2) + 36 * (i & 3);
          v88 = v80 + 36 * (_DWORD)i;
          do
          {
            for (j = 0; j != 12; j += 4)
              *(_DWORD *)(v87 + j) = *(_DWORD *)(v88 + j);
            ++v86;
            v87 += 12;
            v88 += 12;
          }
          while (v86 != 3);
        }
      }
    }
    else
    {
      v109 = *(unsigned int *)(v74 + 8);
      v110 = *(unsigned int *)(v74 + 12);
      v111 = objc_msgSend(v81, "newBufferWithLength:options:", 16 * (int)v109 * (int)v110 * v79, 0);
      v112 = *(void **)(a1 + 712);
      *(_QWORD *)(a1 + 712) = v111;

      v113 = objc_msgSend(*(id *)(a1 + 712), "contents");
      if ((int)v77 >= 1)
      {
        v114 = 0;
        v115 = 0;
        do
        {
          if ((int)v110 >= 1)
          {
            v116 = 0;
            v117 = (v115 & 3) + 4 * v110 * v109 * (v115 >> 2);
            v118 = v114;
            do
            {
              if ((int)v109 >= 1)
              {
                v119 = (int *)(v80 + 4 * v118);
                v120 = v117;
                v121 = v109;
                do
                {
                  v122 = *v119++;
                  *(_DWORD *)(v113 + 4 * v120) = v122;
                  v120 += 4;
                  --v121;
                }
                while (v121);
              }
              ++v116;
              v117 += 4 * v109;
              v118 += v109;
            }
            while (v116 != v110);
          }
          ++v115;
          v114 += v110 * v109;
        }
        while (v115 != (_DWORD)v77);
      }
    }
    if (!v69)
      goto LABEL_128;
    v123 = (unint64_t *)&v69->__shared_owners_;
    do
      v73 = __ldaxr(v123);
    while (__stlxr(v73 - 1, v123));
LABEL_126:
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
    goto LABEL_128;
  }
  if (v67 == 1)
  {
    v68 = *(_QWORD *)(a1 + 568);
    if (v68)
    {
      v69 = *(std::__shared_weak_count **)(a1 + 576);
      v155 = *(_QWORD **)(a1 + 568);
      v156 = v69;
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      Espresso::MetalLowmemEngine::depthwise_convolution_kernel::populate_weight_buffer<unsigned short>(a1, v68);
      if (!v69)
        goto LABEL_128;
      v72 = (unint64_t *)&v69->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
    }
    else
    {
      v90 = *(_QWORD *)(a1 + 584);
      if (!v90)
        Espresso::throw_exception_selector<Espresso::blob_not_found_error>("Missing weights in depthwise convolution");
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v155, v90 + 8);
      v91 = 0;
      v92 = *(_QWORD *)(a1 + 584);
      v93 = *(int **)(v92 + 24);
      v94 = (uint64_t)v155;
      v95 = (_WORD *)v155[3];
      v96 = *(int *)(v92 + 8);
      v97 = v92 + 12;
      do
      {
        v96 *= *(int *)(v97 + v91);
        v91 += 4;
      }
      while (v91 != 12);
      for (; v96; --v96)
      {
        v98 = *v93++;
        _S0 = v98;
        __asm { FCVT            H0, S0 }
        *v95++ = _S0;
      }
      v103 = v156;
      v153 = v94;
      v154 = v156;
      if (v156)
      {
        v104 = (unint64_t *)&v156->__shared_owners_;
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }
      Espresso::MetalLowmemEngine::depthwise_convolution_kernel::populate_weight_buffer<unsigned short>(a1, v94);
      if (v103)
      {
        v106 = (unint64_t *)&v103->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v69 = v156;
      if (!v156)
        goto LABEL_128;
      v108 = (unint64_t *)&v156->__shared_owners_;
      do
        v73 = __ldaxr(v108);
      while (__stlxr(v73 - 1, v108));
    }
    goto LABEL_126;
  }
LABEL_128:
  if (*(_DWORD *)(a1 + 336))
  {
    v124 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 144), "newBufferWithLength:options:", ((4 * *(int *)(*(_QWORD *)(a1 + 600) + 8) - 4) & 0xFFFFFFFFFFFFFFF0) + 16, 0);
    v125 = *(void **)(a1 + 720);
    *(_QWORD *)(a1 + 720) = v124;

    memcpy((void *)objc_msgSend(*(id *)(a1 + 720), "contents"), *(const void **)(*(_QWORD *)(a1 + 600) + 16), 4 * *(int *)(*(_QWORD *)(a1 + 600) + 8));
  }
LABEL_130:
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v155, *a2);
  v126 = v155;
  objc_msgSend(v126, "setComputePipelineState:", *(_QWORD *)(a1 + 688));
  objc_msgSend(v126, "setLabel:", *(_QWORD *)(a1 + 680));
  objc_msgSend(v126, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 712), 0, 0);
  objc_msgSend(v126, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 720), 0, 1);
  objc_msgSend(v126, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 704), 0, 2);
  objc_msgSend(v126, "setSamplerState:atIndex:", *(_QWORD *)(a1 + 696), 0);
  v127 = (const void **)*a4;
  v129 = (std::__shared_weak_count *)v127[1];
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
    v132 = v128[21];
    do
      v133 = __ldaxr(v130);
    while (__stlxr(v133 - 1, v130));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  else
  {
    v132 = v128[21];
  }
  objc_msgSend(v126, "setTexture:atIndex:", v132, 0);
  v134 = *a3;
  v136 = (std::__shared_weak_count *)v134[1];
  if (v136)
  {
    v137 = (unint64_t *)&v136->__shared_owners_;
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
    v139 = v135[21];
    do
      v140 = __ldaxr(v137);
    while (__stlxr(v140 - 1, v137));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  else
  {
    v139 = v135[21];
  }
  objc_msgSend(v126, "setTexture:atIndex:", v139, 1);
  v151 = *(_OWORD *)(a1 + 752);
  v152 = *(_QWORD *)(a1 + 768);
  v150 = *(_QWORD *)(a1 + 744);
  v149 = *(_OWORD *)(a1 + 728);
  objc_msgSend(v126, "dispatchThreadgroups:threadsPerThreadgroup:", &v151, &v149);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)&v155);
}

void sub_1912F3E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::depthwise_convolution_kernel::clear_weights(Espresso::MetalLowmemEngine::depthwise_convolution_kernel *this)
{
  char *v1;

  v1 = (char *)this + 160;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)v1 + 51);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)v1 + 53);
  return objc_msgSend(*((id *)v1 + 69), "setPurgeableState:", 4);
}

const char *Espresso::generic_convolution_kernel::kernel_type_str(Espresso::generic_convolution_kernel *this)
{
  return "convolution";
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_biases(Espresso::MetalLowmemEngine::depthwise_convolution_kernel *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v7, (int *)(*a2 + 8));
  memcpy(*(void **)(v7 + 16), *(const void **)(v3 + 16), 4 * *(int *)(v3 + 8));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 600, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(a1);
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_weights(Espresso::MetalLowmemEngine::depthwise_convolution_kernel *a1, uint64_t *a2)
{
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 73, *a2, a2[1]);
  Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(a1);
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob_f4::ptr blob_in)");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1912F4114(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_convolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 408))(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1912F41B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1912F424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_convolution_kernel::get_shuffled_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_convolution_kernel::get_biases(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_convolution_kernel::get_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_f16_weights(Espresso::MetalLowmemEngine::depthwise_convolution_kernel *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  Espresso::blob<unsigned short,4>::copy(&v6, *a2);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 568, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(a1);
}

void Espresso::generic_convolution_kernel::get_f16_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_quantized_weights_blob()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Quantized weights are not supported with depthwise convolution.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1912F4334(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_convolution_kernel::get_quantized_weights_blob@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 528);
  *a2 = *(_QWORD *)(this + 520);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *Espresso::generic_convolution_kernel::set_quantization_lut_blob(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 488), *a2, a2[1]);
}

uint64_t Espresso::generic_convolution_kernel::get_quantization_lut_blob@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 496);
  *a2 = *(_QWORD *)(this + 488);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_quantization_ranges_blob()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Quantized weights are not supported with depthwise convolution.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1912F43E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_convolution_kernel::get_quantization_ranges_blob@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 512);
  *a2 = *(_QWORD *)(this + 504);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void *Espresso::blob<unsigned short,4>::copy(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(a1, a2 + 8);
  v4 = 0;
  v5 = *(int *)(a2 + 8);
  do
  {
    v5 *= *(int *)(a2 + 12 + v4);
    v4 += 4;
  }
  while (v4 != 12);
  return memcpy(*(void **)(*a1 + 24), *(const void **)(a2 + 24), 2 * v5);
}

uint64_t std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(Espresso::MetalLowmemEngine::depthwise_convolution_kernel *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;

  v3 = (void *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;

  v4 = (void *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;

  v5 = (void *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;

  v6 = (void *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;

  *((_BYTE *)this + 676) = 0;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v4 = operator new(0x60uLL);
  v5 = v4;
  v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBF060;
  v4[3] = &off_1E2DA1410;
  v7 = (char *)(v4 + 3);
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  v8 = 1;
  do
  {
    v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  v10 = 2 * v8;
  v11 = Espresso::kern_alloc_uninitialized((Espresso *)(2 * v8));
  bzero(v11, v10);
  v5[6] = v11;
  *((_BYTE *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_1912F45E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<unsigned short,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1410;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return a1;
}

void Espresso::blob<unsigned short,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1410;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBEC00;
  *((_QWORD *)v4 + 3) = &off_1E2DA1190;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  v5 = *a2;
  *((_DWORD *)v4 + 8) = v5;
  v6 = 4 * v5;
  v7 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v5));
  bzero(v7, v6);
  *((_QWORD *)v4 + 5) = v7;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_1912F47CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t Espresso::MetalLowmemEngine::depthwise_convolution_kernel::populate_weight_buffer<unsigned short>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 *v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  std::runtime_error *exception;

  if (*(_DWORD *)(a2 + 16) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid kernel shape for depthwise convolution.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = *(unsigned int *)(a2 + 20);
  v4 = v3 - 1;
  if ((int)v3 < 1)
    v4 = v3 + 2;
  v5 = (v4 >> 2) + 1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a1 + 676);
  v8 = *(void **)(*(_QWORD *)(a1 + 8) + 144);
  if (v7)
  {
    v9 = objc_msgSend(v8, "newBufferWithLength:options:", 80 * v5, 0);
    v10 = *(void **)(a1 + 712);
    *(_QWORD *)(a1 + 712) = v9;

    result = objc_msgSend(*(id *)(a1 + 712), "contents");
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v13 = 0;
        v14 = result + 80 * (i >> 2) + 18 * (i & 3);
        v15 = v6 + 18 * (_DWORD)i;
        do
        {
          for (j = 0; j != 6; j += 2)
            *(_WORD *)(v14 + j) = *(_WORD *)(v15 + j);
          ++v13;
          v14 += 6;
          v15 += 6;
        }
        while (v13 != 3);
      }
    }
  }
  else
  {
    v17 = *(unsigned int *)(a2 + 8);
    v18 = *(unsigned int *)(a2 + 12);
    v19 = objc_msgSend(v8, "newBufferWithLength:options:", 8 * (int)v17 * (int)v18 * v5, 0);
    v20 = *(void **)(a1 + 712);
    *(_QWORD *)(a1 + 712) = v19;

    result = objc_msgSend(*(id *)(a1 + 712), "contents");
    if ((int)v3 >= 1)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        if ((int)v18 >= 1)
        {
          v23 = 0;
          v24 = (v22 & 3) + 4 * v18 * v17 * (v22 >> 2);
          v25 = v21;
          do
          {
            if ((int)v17 >= 1)
            {
              v26 = (__int16 *)(v6 + 2 * v25);
              v27 = v24;
              v28 = v17;
              do
              {
                v29 = *v26++;
                *(_WORD *)(result + 2 * v27) = v29;
                v27 += 4;
                --v28;
              }
              while (v28);
            }
            ++v23;
            v24 += 4 * v17;
            v25 += v17;
          }
          while (v23 != v18);
        }
        ++v22;
        v21 += v18 * v17;
      }
      while (v22 != (_DWORD)v3);
    }
  }
  return result;
}

void sub_1912F4A30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::blob_not_found_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::blob_not_found_error>(a1);
}

void Espresso::MetalLowmemEngine::space_to_depth_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v7;
  _DWORD *v8;
  const void *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int v15;
  id v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  Espresso::context_metal *v22;
  NSString *v23;
  MTLFunctionConstantValues *v24;
  __CFString *v25;
  uint64_t v26;
  void *v27;
  std::runtime_error *exception;
  std::runtime_error *v29;
  __int128 v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  id v36[2];

  v7 = **a4;
  if (v7)
  else
    v8 = 0;
  v9 = **a3;
  if (v9)
  else
    v10 = 0;
  v11 = v10[4];
  v13 = v11 - 1;
  v12 = v11 < 1;
  v14 = v11 + 2;
  if (!v12)
    v14 = v13;
  if (v10[5] != v8[5])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = (v14 >> 2) + 1;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v36, *a2);
  v16 = v36[0];
  *(_QWORD *)&v17 = *((_QWORD *)v10 + 1);
  v18 = *((_QWORD *)v8 + 1);
  v19 = v10[5];
  v31 = v15;
  v32 = v19;
  v20 = v8[4];
  v21 = v20 - 1;
  if (v20 < 1)
    v21 = v20 + 2;
  *((_QWORD *)&v17 + 1) = v18;
  v30 = v17;
  v33 = v20;
  v35 = (v21 >> 2) + 1;
  v34 = v10[4];
  if (!*(_QWORD *)(a1 + 320))
  {
    v22 = *(Espresso::context_metal **)(a1 + 8);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), *(unsigned int *)(a1 + 280));
    v23 = (NSString *)objc_claimAutoreleasedReturnValue();
    v24 = (MTLFunctionConstantValues *)objc_opt_new();
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v24, "setConstantValue:type:atIndex:", a1 + 280, 29, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v24, "setConstantValue:type:atIndex:", a1 + 288, 29, 1);
    if (*(_DWORD *)(a1 + 284))
      v25 = CFSTR("depth_to_space");
    else
      v25 = CFSTR("space_to_depth");
    Espresso::context_metal::kernel_for_function(v22, &v25->isa, v23, v24);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = *(void **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = v26;

    if (!*(_QWORD *)(a1 + 320))
    {
      v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "Kernel not found");
      __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  objc_msgSend(v16, "setComputePipelineState:");
  objc_msgSend(v16, "setTexture:atIndex:", *((_QWORD *)v10 + 21), 0);
  objc_msgSend(v16, "setTexture:atIndex:", *((_QWORD *)v8 + 21), 1);
  objc_msgSend(v16, "setBytes:length:atIndex:", &v30, 36, 0);
  dispatch_auto_threadgroupsize(v16, v10[2], v10[3], v15, v10[6] * v10[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v36);
}

void sub_1912F4CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  void *v17;
  void *v18;

  __cxa_free_exception(v18);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a17);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::space_to_depth_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 284) != 0;
}

const char *Espresso::generic_space_to_depth_kernel::kernel_type_str(Espresso::generic_space_to_depth_kernel *this)
{
  return "space_to_depth";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::space_to_depth_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::slice_kernel::~slice_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::slice_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v7;
  _DWORD *v8;
  const void *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  id v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  signed int v25;
  int v26;
  int v27;
  Espresso::context_metal *v28;
  NSString *v29;
  MTLFunctionConstantValues *v30;
  __CFString *v31;
  uint64_t v32;
  void *v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  std::string *v36;
  __int128 v37;
  std::string v38;
  std::string v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  id v56[2];
  _DWORD v57[5];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 296))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Dynamic slice on metal");
  v7 = **a4;
  if (v7)
  else
    v8 = 0;
  v9 = **a3;
  if (v9)
  else
    v10 = 0;
  v11 = v10[4];
  v13 = v11 - 1;
  v12 = v11 < 1;
  v14 = v11 + 2;
  if (v12)
    v15 = v14;
  else
    v15 = v13;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v56, *a2);
  v16 = v56[0];
  v54 = 0xFFFFFFFF00000000;
  v55 = 1;
  v40 = *((_QWORD *)v10 + 1);
  v17 = v10[4];
  v18 = v17 - 1;
  if (v17 < 1)
    v18 = v17 + 2;
  v41 = v10[4];
  v42 = (v18 >> 2) + 1;
  v19 = v10[6];
  v43 = v10[5];
  v44 = v19;
  v45 = v19 * v43;
  v20 = v8[2];
  v46 = v20;
  v21 = v8[3];
  v47 = v21;
  v22 = v8[4];
  v23 = v22 - 1;
  if (v22 < 1)
    v23 = v22 + 2;
  v48 = v8[4];
  v49 = (v23 >> 2) + 1;
  v50 = v8[5];
  v51 = v8[6];
  v52 = v51 * v20;
  v24 = *(int *)(a1 + 280);
  v53 = *(_DWORD *)(a1 + 280);
  v25 = *(_DWORD *)(a1 + 284);
  v57[0] = v20;
  v57[1] = v21;
  v57[2] = v22;
  v57[3] = v50;
  v57[4] = v51;
  if (v25 < 0)
  {
    if ((int)v24 > 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid axis passed to slice kernel.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v25 += v57[v24];
  }
  v26 = *(_DWORD *)(a1 + 292);
  if (v26 < 0)
  {
    v27 = v57[v24];
    if (!v25)
      v25 = v27;
    if (v25 >= v27)
      v25 = v27;
    --v25;
  }
  v54 = __PAIR64__(*(_DWORD *)(a1 + 288), v25);
  v55 = v26;
  if (!*(_QWORD *)(a1 + 328))
  {
    v28 = *(Espresso::context_metal **)(a1 + 8);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), 0);
    v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    v30 = (MTLFunctionConstantValues *)objc_opt_new();
    v31 = CFSTR("TARR_slice_y");
    switch(*(_DWORD *)(a1 + 280))
    {
      case 0:
        v31 = CFSTR("TARR_slice_x");
        goto LABEL_32;
      case 1:
        goto LABEL_32;
      case 2:
        if (*(_DWORD *)(a1 + 292) == 1 && (*(_BYTE *)(a1 + 284) & 3) == 0)
          v31 = CFSTR("slice_k_fast");
        else
          v31 = CFSTR("slice_k_slow");
        goto LABEL_32;
      case 3:
        v31 = CFSTR("TARR_slice_n");
        goto LABEL_32;
      case 4:
        v31 = CFSTR("TARR_slice_seq");
LABEL_32:
        Espresso::context_metal::kernel_for_function(v28, &v31->isa, v29, v30);
        v32 = objc_claimAutoreleasedReturnValue();
        v33 = *(void **)(a1 + 328);
        *(_QWORD *)(a1 + 328) = v32;

        break;
      default:
        break;
    }

    if (!*(_QWORD *)(a1 + 328))
    {
      v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v38, *(_DWORD *)(a1 + 280));
      v36 = std::string::insert(&v38, 0, "Slice kernel not found: ");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v35, &v39);
      __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  objc_msgSend(v16, "setComputePipelineState:");
  objc_msgSend(v16, "setTexture:atIndex:", *((_QWORD *)v10 + 21), 0);
  objc_msgSend(v16, "setTexture:atIndex:", *((_QWORD *)v8 + 21), 1);
  objc_msgSend(v16, "setBytes:length:atIndex:", &v40, 72, 0);
  dispatch_auto_threadgroupsize(v16, v10[2], v10[3], (v15 >> 2) + 1, v10[6] * v10[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v56);
}

void sub_1912F51D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  void *v31;
  void *v32;
  int v33;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v33 & 1) == 0)
    {
LABEL_8:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a31);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

BOOL Espresso::MetalLowmemEngine::slice_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 296) && *(_DWORD *)(a1 + 280) < 5;
}

const char *Espresso::generic_slice_kernel::kernel_type_str(Espresso::generic_slice_kernel *this)
{
  return "slice";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::slice_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::spatial_transformer_kernel::~spatial_transformer_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::spatial_transformer_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v8;
  const void *v9;
  _DWORD *v10;
  const void *v11;
  int32x2_t *v12;
  id v13;
  int v14;
  __int32 v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned int v19;
  int32x2_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  float32x2_t v30;
  Espresso::context_metal *v32;
  __CFString *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  int v38;
  _QWORD v39[2];
  unsigned int v40;
  int32x2_t v41;
  __int32 v42;
  _BOOL4 v43;
  id v44[2];

  v4 = *a4;
  if (((*((_DWORD *)a4 + 2) - *a4) & 0xFFFF0) != 0x20)
    Espresso::throw_exception_selector<Espresso::generic_error>("spatial_transformer_kernel: requires two inputs");
  if (*(_QWORD *)v4)
  else
    v8 = 0;
  v9 = *(const void **)(v4 + 16);
  if (v9)
  else
    v10 = 0;
  v11 = **a3;
  if (v11)
  {
    if (v8)
      goto LABEL_10;
LABEL_32:
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state in spatial_transformer_kernel: src_cpu_blob ptr is nil");
  }
  v12 = 0;
  if (!v8)
    goto LABEL_32;
LABEL_10:
  if (!v10)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state in spatial_transformer_kernel: theta_blob ptr is nil");
  if (!v12)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state in spatial_transformer_kernel: dst_blob ptr is nil");
  if (v12[1].i32[0] <= 1)
    Espresso::throw_exception_selector<Espresso::generic_error>("spatial_transformer_kernel: dst width must be greater than 1");
  if (v12[1].i32[1] <= 1)
    Espresso::throw_exception_selector<Espresso::generic_error>("spatial_transformer_kernel: dst height must be greater than 1");
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v44, *a2);
  v13 = v44[0];
  v14 = v12[2].i32[0];
  v15 = v12[2].i32[1];
  v17 = v14 - 1;
  v16 = v14 < 1;
  v18 = v14 + 2;
  if (!v16)
    v18 = v17;
  v19 = (v18 >> 2) + 1;
  v20 = v12[1];
  v40 = v19;
  v21 = v8[1];
  v39[0] = v20;
  v39[1] = v21;
  v42 = v15;
  v22 = v10[4];
  v23 = v22 & 1;
  if (v22 < 0)
    v23 = -v23;
  v43 = v23;
  v24 = *(_DWORD *)(a1 + 280);
  if ((v24 & 0xFFFFFFFE) == 2)
    v43 = (v22 & 1) == 0;
  __asm { FMOV            V1.2S, #-1.0 }
  v30 = vadd_f32(vcvt_f32_s32(v20), _D1);
  __asm { FMOV            V1.2S, #1.0 }
  v41 = vrev64_s32((int32x2_t)vdiv_f32(_D1, v30));
  if (!*(_QWORD *)(a1 + 312))
  {
    if (v24 == 1)
    {
      v32 = *(Espresso::context_metal **)(a1 + 8);
      if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)v12 + 32))(v12))
        v33 = CFSTR("general_spatial_transformer_affine_f16");
      else
        v33 = CFSTR("general_spatial_transformer_affine_f32");
      Espresso::context_metal::kernel_for_function(v32, &v33->isa);
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = *(void **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v34;

      v24 = *(_DWORD *)(a1 + 280);
    }
    if ((v24 & 0xFFFFFFFE) == 2)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Linear homography methods not implemented as metal kernel for spatial transformer.");
    if (!*(_QWORD *)(a1 + 312))
      Espresso::throw_exception_selector<Espresso::generic_error>("Spatial transformer metal kernel not found");
  }
  v36 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 144), "newBufferWithBytes:length:options:", v39, 36, 0);
  v37 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v36;

  objc_msgSend(v13, "setComputePipelineState:", *(_QWORD *)(a1 + 312));
  objc_msgSend(v13, "setTexture:atIndex:", *(_QWORD *)&v12[21], 0);
  objc_msgSend(v13, "setTexture:atIndex:", v8[21], 1);
  objc_msgSend(v13, "setTexture:atIndex:", *((_QWORD *)v10 + 21), 2);
  objc_msgSend(v13, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 304), 0, 0);
  v38 = v12[3].i32[0];
  if (v38 <= 1)
    v38 = 1;
  dispatch_auto_threadgroupsize(v13, v12[1].u32[0], v12[1].u32[1], v19, v38 * v12[2].i32[1]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v44);
}

void sub_1912F5620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::spatial_transformer_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_DWORD *)(a1 + 300) == 0;
}

const char *Espresso::generic_spatial_transformer_kernel::kernel_type_str(Espresso::generic_spatial_transformer_kernel *this)
{
  return "spatial_transformer";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::spatial_transformer_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::transplant_kernel::~transplant_kernel(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 48));
  Espresso::generic_transplant_kernel::~generic_transplant_kernel((Espresso::generic_transplant_kernel *)this);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 48));
  Espresso::generic_transplant_kernel::~generic_transplant_kernel((Espresso::generic_transplant_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::transplant_kernel::__launch(_QWORD *a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  id v8;
  const void **v9;
  const void *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const void **v22;
  const void *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _DWORD *v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  void *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  id v58[2];

  if (!a1[53] || !a1[52] || !a1[50])
  {
    (*(void (**)(_QWORD *, const void ***, const void ***))(*a1 + 80))(a1, a3, a4);
    if (!a1[53])
      Espresso::throw_exception_selector<Espresso::generic_error>("batchnorm coefficients required for transplant kernel");
    if (!a1[52])
      Espresso::throw_exception_selector<Espresso::generic_error>("shifts required for transplant kernel");
  }
  if (!a1[50])
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("kernel not found in transplant_kernel");
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v58, *a2);
  v8 = v58[0];
  v9 = *a4;
  v10 = **a4;
  if (v10
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[1];
    v57 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v9 = *a4;
    }
  }
  else
  {
    v12 = 0;
    v57 = 0;
  }
  v16 = v9[2];
  if (v16
  {
    v18 = v17;
    v19 = (std::__shared_weak_count *)v9[3];
    v56 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v56 = 0;
  }
  v22 = *a3;
  v23 = **a3;
  if (v23
  {
    v25 = v24;
    v26 = (std::__shared_weak_count *)v22[1];
    v54 = v24;
    v55 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v22 = *a3;
    }
  }
  else
  {
    v25 = 0;
    v54 = 0;
    v55 = 0;
  }
  v29 = v22[2];
  if (v29
  {
    v31 = v30;
    v32 = (std::__shared_weak_count *)v22[3];
    v52 = v30;
    v53 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
  }
  else
  {
    v32 = 0;
    v31 = 0;
    v52 = 0;
    v53 = 0;
  }
  objc_msgSend(v8, "setComputePipelineState:", a1[50], v52, v53, v54);
  objc_msgSend(v8, "setTexture:atIndex:", v25[21], 0);
  objc_msgSend(v8, "setTexture:atIndex:", v31[21], 1);
  objc_msgSend(v8, "setTexture:atIndex:", v12[21], 2);
  objc_msgSend(v8, "setTexture:atIndex:", v18[21], 3);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", a1[53], 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", a1[52], 0, 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", a1 + 38, 20, 2);
  v35 = **a3;
  v36 = v35[4];
  v37 = v35[5];
  v39 = v36 - 1;
  v38 = v36 < 1;
  v40 = v36 + 2;
  if (!v38)
    v40 = v39;
  v41 = v35[2];
  v42 = v35[3];
  v43 = v35[6];
  if (v43 <= 1)
    v43 = 1;
  dispatch_auto_threadgroupsize(v8, v41, v42, (v40 >> 2) + 1, v43 * v37);
  if (v32)
  {
    v44 = (unint64_t *)&v32->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v55)
  {
    v46 = (unint64_t *)&v55->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v56)
  {
    v48 = (unint64_t *)&v56->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v57)
  {
    v50 = (unint64_t *)&v57->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v58);
}

void sub_1912F5AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, id a17)
{
  void *v17;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a17);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_weights<Espresso::transplant_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::MetalLowmemEngine::transplant_kernel::on_resized(Espresso::MetalLowmemEngine::transplant_kernel *this, uint64_t **a2, Espresso::layer_data *a3)
{
  uint64_t v3;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  const void **v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL4 v26;
  void *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  void *__p[2];
  char v32;
  uint64_t v33;
  uint64_t v34;

  if ((char *)a2[1] - (char *)*a2 != 32)
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant kernel must have two outputs!");
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 != 32)
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant kernel must have two inputs!");
  v3 = **a2;
  if (*(int *)(v3 + 20) >= 2)
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant kernel does not support n > 1");
  v6 = *(_DWORD *)(v3 + 16);
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 2;
  if (!v7)
    v9 = v8;
  *((_DWORD *)this + 78) = (v9 >> 2) + 1;
  if (!*((_QWORD *)this + 53))
  {
    v33 = 0;
    v34 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_params");
    Espresso::MetalLowmemEngine::transplant_kernel::__set_weight_raw_blob((uint64_t)this, (uint64_t *)__p);
    if (v32 < 0)
      operator delete(__p[0]);
  }
  if (!*((_QWORD *)this + 52))
  {
    v29 = 0;
    v30 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "shifts");
    Espresso::MetalLowmemEngine::transplant_kernel::__set_weight_raw_blob((uint64_t)this, (uint64_t *)__p);
    if (v32 < 0)
      operator delete(__p[0]);
  }
  if (!*((_QWORD *)this + 50))
  {
    v10 = (const void **)*a2;
    if (*v10)
    {
      if (v11)
      {
        v12 = v11;
        v13 = (std::__shared_weak_count *)v10[1];
        v27 = v11;
        v28 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        v16 = (void *)objc_opt_new();
        v26 = *((_DWORD *)this + 77) == 0;
        objc_msgSend(v16, "setConstantValue:type:atIndex:", &v26, 29, 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v12 + 32))(v12))
          v17 = CFSTR("TARR_transplant_f16_pack4");
        else
          v17 = CFSTR("TARR_transplant_f32_pack4");
        objc_storeStrong((id *)this + 51, v17);
        v18 = *((_QWORD *)this + 1);
        v19 = objc_msgSend(*((id *)this + 51), "UTF8String");
        if (v32 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        objc_msgSend(*(id *)(v18 + 160), "kernelForFunction:cacheString:withConstants:", v19, v20, v16);
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = (void *)*((_QWORD *)this + 50);
        *((_QWORD *)this + 50) = v21;

        if (v32 < 0)
          operator delete(__p[0]);

        v23 = v28;
        if (v28)
        {
          v24 = (unint64_t *)&v28->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
    }
  }
}

void sub_1912F5DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::transplant_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v4;

  if (*((char *)a2 + 23) < 0)
  {
    v4 = a2[1];
    if (v4 != 6)
    {
      if (v4 == 16)
        return *(_QWORD *)*a2 == 0x726F6E6863746162 && *(_QWORD *)(*a2 + 8) == 0x736D617261705F6DLL;
      return 0;
    }
    a2 = (uint64_t *)*a2;
    return *(_DWORD *)a2 == 1718184051 && *((_WORD *)a2 + 2) == 29556;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 6)
    return *(_DWORD *)a2 == 1718184051 && *((_WORD *)a2 + 2) == 29556;
  if (v2 != 16)
    return 0;
  return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL;
}

const char *Espresso::generic_transplant_kernel::kernel_type_str(Espresso::generic_transplant_kernel *this)
{
  return "transplant";
}

void Espresso::generic_transplant_kernel::get_weights_blob(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::transplant_params_t,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t Espresso::generic_transplant_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 352);
  *a2 = *(_QWORD *)(this + 344);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::generic_transplant_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 368);
  *a2 = *(_QWORD *)(this + 360);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::MetalLowmemEngine::transplant_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v6;
  void **v8;
  uint64_t *v9;
  const void *v10;
  size_t v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 != 6)
    {
      if (v6 == 16 && *(_QWORD *)*a2 == 0x726F6E6863746162 && *(_QWORD *)(*a2 + 8) == 0x736D617261705F6DLL)
        goto LABEL_16;
LABEL_52:
      Espresso::throw_exception_selector<Espresso::generic_error>("Invalid weights name found for transplant kernel.");
    }
    v4 = (uint64_t *)*a2;
  }
  else
  {
    v4 = a2;
    if (v3 != 6)
    {
      if (v3 != 16)
        goto LABEL_52;
      if (*a2 != 0x726F6E6863746162 || a2[1] != 0x736D617261705F6DLL)
        goto LABEL_52;
LABEL_16:
      v8 = (void **)(a1 + 424);
      if ((v3 & 0x80) == 0)
        goto LABEL_17;
      goto LABEL_26;
    }
  }
  v12 = *(_DWORD *)v4;
  v13 = *((unsigned __int16 *)v4 + 2);
  if (v12 != 1718184051 || v13 != 29556)
    goto LABEL_52;
  v8 = (void **)(a1 + 416);
  if ((v3 & 0x80) == 0)
  {
LABEL_17:
    v9 = a2;
    if (v3 != 16)
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_33;
    }
    goto LABEL_28;
  }
LABEL_26:
  v15 = a2[1];
  if (v15 != 16)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_39;
  }
  v9 = (uint64_t *)*a2;
LABEL_28:
  v17 = *v9;
  v16 = v9[1];
  if (v17 == 0x726F6E6863746162 && v16 == 0x736D617261705F6DLL)
  {
    v19 = *(_QWORD *)(a1 + 360);
    if (!v19)
      Espresso::throw_exception_selector<Espresso::generic_error>("No batchnorm params in transplant kernel");
    v10 = *(const void **)(v19 + 16);
    v11 = 4 * *(int *)(v19 + 8);
    if ((v3 & 0x80) == 0)
    {
LABEL_33:
      if (v3 != 6)
        goto LABEL_48;
      goto LABEL_41;
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
    if ((v3 & 0x80) == 0)
      goto LABEL_33;
  }
  v15 = a2[1];
LABEL_39:
  if (v15 != 6)
    goto LABEL_48;
  a2 = (uint64_t *)*a2;
LABEL_41:
  if (*(_DWORD *)a2 == 1718184051 && *((_WORD *)a2 + 2) == 29556)
  {
    v21 = *(_QWORD *)(a1 + 344);
    if (!v21)
      Espresso::throw_exception_selector<Espresso::generic_error>("No shifts data in transplant kernel");
    v10 = *(const void **)(v21 + 16);
    v11 = 4 * *(int *)(v21 + 8);
  }
LABEL_48:
  v22 = (uint64_t)*(int *)(a1 + 312) << 6;
  v23 = (char *)malloc_type_calloc(v22, 1uLL, 0x5E841840uLL);
  if (!v23)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory.");
  v24 = v23;
  memcpy(v23, v10, v11);
  if ((int)(v11 >> 2) < (int)(v22 >> 2))
    memset_pattern16(&v24[4 * (int)(v11 >> 2)], &unk_191A93A20, 4 * ((v22 >> 2) + ~(v11 >> 2)) + 4);
  v25 = objc_msgSend(*(id *)(v2 + 144), "newBufferWithBytes:length:options:", v24, v22, 0);
  v26 = *v8;
  *v8 = (void *)v25;

  free(v24);
}

void Espresso::throw_exception_selector<Espresso::memory_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::memory_error>(a1);
}

void Espresso::MetalLowmemEngine::transpose_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void **v15;
  const void *v16;
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _DWORD *v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  _DWORD v60[5];
  int8x16_t v61;
  int v62;
  int32x2_t v63;
  int v64;
  int v65;
  int v66;
  __int32 v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  char *v72;
  std::__shared_weak_count *v73;
  char *v74;
  std::__shared_weak_count *v75;
  id v76[2];

  if (!*(_QWORD *)(a1 + 328))
  {
    (*(void (**)(uint64_t, const void ***, uint64_t *))(*(_QWORD *)a1 + 80))(a1, a3, a4);
    if (!*(_QWORD *)(a1 + 328))
      Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel in transpose");
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v76, *a2);
  v8 = v76[0];
  v9 = *a4;
  if (*(_QWORD *)v9
  {
    v11 = v10;
    v12 = *(std::__shared_weak_count **)(v9 + 8);
    v74 = v10;
    v75 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v74 = 0;
    v75 = 0;
  }
  v15 = *a3;
  v16 = **a3;
  if (v16
  {
    v18 = v17;
    v19 = (std::__shared_weak_count *)v15[1];
    v72 = v17;
    v73 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v72 = 0;
    v73 = 0;
  }
  v69 = 0;
  v59 = *(_OWORD *)(a1 + 280);
  v22 = *(_DWORD *)(a1 + 296);
  v23 = (char *)operator new(0x14uLL);
  v24 = v23;
  v25 = 0;
  *(_OWORD *)v23 = v59;
  *((_DWORD *)v23 + 4) = v22;
  v26 = v23 + 20;
  while (*(_DWORD *)&v23[4 * v25])
  {
    if (++v25 == 5)
    {
      v27 = v23 + 20;
      goto LABEL_22;
    }
  }
  v27 = &v23[4 * v25];
LABEL_22:
  v28 = 0;
  v29 = (unint64_t)(v27 - v23) >> 2;
  while (*(_DWORD *)&v23[4 * v28] != 1)
  {
    if (++v28 == 5)
    {
      v30 = v23 + 20;
      goto LABEL_27;
    }
  }
  v30 = &v23[4 * v28];
LABEL_27:
  v31 = 0;
  v32 = (unint64_t)(v30 - v23) >> 2;
  while (*(_DWORD *)&v23[4 * v31] != 2)
  {
    if (++v31 == 5)
    {
      v33 = v23 + 20;
      goto LABEL_32;
    }
  }
  v33 = &v23[4 * v31];
LABEL_32:
  v34 = 0;
  v35 = (unint64_t)(v33 - v23) >> 2;
  while (*(_DWORD *)&v23[4 * v34] != 3)
  {
    if (++v34 == 5)
    {
      v36 = v23 + 20;
      goto LABEL_37;
    }
  }
  v36 = &v23[4 * v34];
LABEL_37:
  v37 = 0;
  v38 = (unint64_t)(v36 - v23) >> 2;
  while (*(_DWORD *)&v23[4 * v37] != 4)
  {
    if (++v37 == 5)
      goto LABEL_42;
  }
  v26 = &v23[4 * v37];
LABEL_42:
  v60[0] = v29;
  v60[1] = v32;
  v60[2] = v35;
  v60[3] = v38;
  v60[4] = (unint64_t)(v26 - v23) >> 2;
  v39 = *(int32x4_t *)(v11 + 12);
  v40 = (int8x16_t)vrev64q_s32(v39);
  v61 = vextq_s8(v40, v40, 8uLL);
  v62 = *((_DWORD *)v11 + 2);
  v40.i64[0] = *(_QWORD *)(v18 + 20);
  v63 = vrev64_s32(*(int32x2_t *)v40.i8);
  v64 = *((_DWORD *)v18 + 4);
  v65 = *((_DWORD *)v18 + 3);
  v41 = v65 * v64 * *((_DWORD *)v18 + 2);
  v66 = *((_DWORD *)v18 + 2);
  v67 = v41 * v40.i32[0];
  v42 = v64 + 2;
  if (v64 >= 1)
    v42 = v64 - 1;
  v43 = (v42 >> 2) + 1;
  v68 = v41;
  v44 = v39.i32[1] + 2;
  if (v39.i32[1] >= 1)
    v44 = v39.i32[1] - 1;
  v70 = v43;
  v71 = (v44 >> 2) + 1;
  objc_msgSend(v8, "setComputePipelineState:", *(_QWORD *)(a1 + 328), v59);
  objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v18 + 21), 0);
  objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v11 + 21), 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", v60, 84, 0);
  v45 = **a3;
  v46 = v45[4];
  v47 = v45[5];
  v49 = v46 - 1;
  v48 = v46 < 1;
  v50 = v46 + 2;
  if (!v48)
    v50 = v49;
  v51 = v45[2];
  v52 = v45[3];
  v53 = v45[6];
  if (v53 <= 1)
    v53 = 1;
  dispatch_auto_threadgroupsize(v8, v51, v52, (v50 >> 2) + 1, v53 * v47);
  operator delete(v24);
  if (v19)
  {
    v54 = (unint64_t *)&v19->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v56 = v75;
  if (v75)
  {
    v57 = (unint64_t *)&v75->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v76);
}

void sub_1912F6604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  operator delete(v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 96);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v25 - 80));
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::transpose_kernel::on_resized(Espresso::MetalLowmemEngine::transpose_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;

  v3 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 == 16)
  {
    v5 = *(_QWORD *)a2;
    if (*((_QWORD *)a2 + 1) - *(_QWORD *)a2 == 16)
    {
      v7 = *((_QWORD *)this + 1);
      if (*(_QWORD *)v3
      {
        v9 = v8;
        v10 = *(std::__shared_weak_count **)(v3 + 8);
        v26 = v8;
        v27 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          v5 = *(_QWORD *)a2;
        }
      }
      else
      {
        v9 = 0;
        v26 = 0;
        v27 = 0;
      }
      if (*(_QWORD *)v5)
      {
        if (v13)
        {
          v14 = v13;
          v15 = *(std::__shared_weak_count **)(v5 + 8);
          v25 = v13;
          if (v15)
          {
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          if (v7 && v9 && !*((_QWORD *)this + 41))
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v13 + 32))(v13)
              || (*(unsigned int (**)(void *))(*(_QWORD *)v9 + 32))(v9))
            {
              if ((*(unsigned int (**)(void *))(*(_QWORD *)v14 + 32))(v14) != 1
                || (*(unsigned int (**)(void *))(*(_QWORD *)v9 + 32))(v9) != 1)
              {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("src, dst must have matching compute paths.");
              }
              v18 = "TARR_transpose_kernel_f16_pack4";
            }
            else
            {
              v18 = "TARR_transpose_kernel_f32_pack4";
            }
            objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", v18, 0, 0, v25, v15, v26);
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = (void *)*((_QWORD *)this + 41);
            *((_QWORD *)this + 41) = v19;

          }
          if (v15)
          {
            v21 = (unint64_t *)&v15->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
      }
      if (v27)
      {
        v23 = (unint64_t *)&v27->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
}

void sub_1912F6854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::transpose_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const void *v4;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE v15[32];
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;

  v4 = *(const void **)(a1 + 8);
  if (!v4)
    return 0;
  if (!v6)
    return 0;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  v19 = v6;
  v20 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a3;
  if (a3[1] - *a3 == 64)
  {
    *(_OWORD *)v15 = *(_OWORD *)v10;
    *(_OWORD *)&v15[16] = *(_OWORD *)(v10 + 16);
    __p = 0;
    v17 = 0;
    v18 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v10 + 40), *(_QWORD *)(v10 + 48), (uint64_t)(*(_QWORD *)(v10 + 48) - *(_QWORD *)(v10 + 40)) >> 2);
    if (*(_DWORD *)(a1 + 292) == 3)
    {
      v11 = 0;
      if (*(_DWORD *)(a1 + 296) == 4)
        v11 = *(_QWORD *)&v15[12] == 0x100000001;
    }
    else
    {
      v11 = 0;
    }
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void sub_1912F69B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_transpose_kernel::kernel_type_str(Espresso::generic_transpose_kernel *this)
{
  return "transpose";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::transpose_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::reshape_kernel::__launch(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void **v15;
  const void *v16;
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int32x2_t v22;
  int v23;
  int32x4_t v24;
  uint64_t v25;
  int32x2_t v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  int v47;
  int32x2_t v48;
  int v49;
  int32x4_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int32x2_t v56;
  int v57;
  int v58;
  char *v59;
  std::__shared_weak_count *v60;
  char *v61;
  std::__shared_weak_count *v62;
  id v63[2];

  if (!a1[43])
  {
    (*(void (**)(_QWORD *, const void ***, uint64_t *))(*a1 + 80))(a1, a3, a4);
    if (!a1[43])
      Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel in transpose");
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v63, *a2);
  v8 = v63[0];
  v9 = *a4;
  if (*(_QWORD *)v9
  {
    v11 = v10;
    v12 = *(std::__shared_weak_count **)(v9 + 8);
    v61 = v10;
    v62 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v61 = 0;
    v62 = 0;
  }
  v15 = *a3;
  v16 = **a3;
  if (v16
  {
    v18 = v17;
    v19 = (std::__shared_weak_count *)v15[1];
    v59 = v17;
    v60 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v59 = 0;
    v60 = 0;
  }
  v46 = xmmword_191A761E0;
  v47 = 4;
  v22 = *(int32x2_t *)(v11 + 20);
  v48 = vrev64_s32(v22);
  v23 = *((_DWORD *)v11 + 4);
  v49 = v23;
  v24.i64[0] = *((_QWORD *)v11 + 1);
  v25 = *(_QWORD *)(v18 + 20);
  v22.i32[0] *= v24.i32[1] * v23;
  v22.i32[1] = v24.i32[1] * v23;
  v26 = vmul_n_s32(v22, v24.i32[0]);
  v24.i64[1] = v25;
  v50 = vrev64q_s32(v24);
  v51 = *((_DWORD *)v18 + 4);
  v52 = *((_DWORD *)v18 + 3);
  v27 = v52 * v51 * *((_DWORD *)v18 + 2);
  v53 = *((_DWORD *)v18 + 2);
  v54 = v27 * v25;
  v55 = v27;
  v28 = v51 + 2;
  if (v51 >= 1)
    v28 = v51 - 1;
  v29 = (v28 >> 2) + 1;
  v31 = v23 - 1;
  v30 = v23 < 1;
  v32 = v23 + 2;
  if (!v30)
    v32 = v31;
  v57 = v29;
  v58 = (v32 >> 2) + 1;
  v56 = v26;
  objc_msgSend(v8, "setComputePipelineState:", a1[43], v46);
  objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v18 + 21), 0);
  objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v11 + 21), 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", &v46, 84, 0);
  v33 = **a3;
  v34 = v33[4];
  v35 = v33[5];
  v36 = v34 - 1;
  v30 = v34 < 1;
  v37 = v34 + 2;
  if (!v30)
    v37 = v36;
  v38 = v33[2];
  v39 = v33[3];
  v40 = v33[6];
  if (v40 <= 1)
    v40 = 1;
  dispatch_auto_threadgroupsize(v8, v38, v39, (v37 >> 2) + 1, v40 * v35);
  if (v19)
  {
    v41 = (unint64_t *)&v19->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v43 = v62;
  if (v62)
  {
    v44 = (unint64_t *)&v62->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v63);
}

void sub_1912F6CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v14 - 80);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v14 - 64));
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::reshape_kernel::on_resized(Espresso::MetalLowmemEngine::reshape_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;

  v3 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 == 16)
  {
    v5 = *(_QWORD *)a2;
    if (*((_QWORD *)a2 + 1) - *(_QWORD *)a2 == 16)
    {
      v7 = *((_QWORD *)this + 1);
      if (*(_QWORD *)v3
      {
        v9 = v8;
        v10 = *(std::__shared_weak_count **)(v3 + 8);
        v26 = v8;
        v27 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          v5 = *(_QWORD *)a2;
        }
      }
      else
      {
        v9 = 0;
        v26 = 0;
        v27 = 0;
      }
      if (*(_QWORD *)v5)
      {
        if (v13)
        {
          v14 = v13;
          v15 = *(std::__shared_weak_count **)(v5 + 8);
          v25 = v13;
          if (v15)
          {
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          if (v7 && v9 && !*((_QWORD *)this + 43))
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v13 + 32))(v13)
              || (*(unsigned int (**)(void *))(*(_QWORD *)v9 + 32))(v9))
            {
              if ((*(unsigned int (**)(void *))(*(_QWORD *)v14 + 32))(v14) != 1
                || (*(unsigned int (**)(void *))(*(_QWORD *)v9 + 32))(v9) != 1)
              {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("src, dst must have matching compute paths.");
              }
              v18 = "TARR_reshape_kernel_f16_pack4";
            }
            else
            {
              v18 = "TARR_reshape_kernel_f32_pack4";
            }
            objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", v18, 0, 0, v25, v15, v26);
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = (void *)*((_QWORD *)this + 43);
            *((_QWORD *)this + 43) = v19;

          }
          if (v15)
          {
            v21 = (unint64_t *)&v15->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
      }
      if (v27)
      {
        v23 = (unint64_t *)&v27->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
}

void sub_1912F6F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, __int128 **a3)
{
  const void *v4;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;

  v4 = *(const void **)(a1 + 8);
  if (v4
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    v19 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = *(std::__shared_weak_count **)(a2 + 8);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = Espresso::DummyMPSEngine::mps_reshape_dispatch(a3, (unsigned int *)(a1 + 280));
    if (v10)
    {
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v13 = 0;
    v19 = 0;
  }
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v13;
}

void sub_1912F7044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_reshape_kernel::kernel_type_str(Espresso::generic_reshape_kernel *this)
{
  return "reshape";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::reshape_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::base_kernel::kernel_type_str(Espresso::base_kernel *this)
{
  return "?";
}

_QWORD *Espresso::MetalLowmemEngine::activation_kernel::activation_kernel(_QWORD *a1, _QWORD *a2, int a3, __int128 *a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  void *v11;
  void *v12;

  v7 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  *(_QWORD *)(v7 + 288) = 0;
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 280) = v7 + 288;
  *(_DWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 308) = 0x3F8000003F800000;
  *(_QWORD *)(v7 + 316) = 0;
  *(_QWORD *)(v7 + 332) = 0;
  *(_QWORD *)(v7 + 324) = 0;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_QWORD *)v7 = &off_1E2D7E548;
  *(_DWORD *)(v7 + 392) = a3;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  *(_QWORD *)(v7 + 432) = 0;
  v8 = *a4;
  v9 = a4[1];
  *(_DWORD *)(v7 + 336) = *((_DWORD *)a4 + 8);
  *(_OWORD *)(v7 + 304) = v8;
  *(_OWORD *)(v7 + 320) = v9;
  v10 = (void *)a1[52];
  a1[52] = 0;

  v11 = (void *)a1[53];
  a1[53] = 0;

  v12 = (void *)a1[54];
  a1[54] = 0;

  return a1;
}

uint64_t Espresso::MetalLowmemEngine::transplant_kernel::transplant_kernel(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;
  void *v7;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 384) = 0;
  *(_QWORD *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_BYTE *)(v5 + 376) = 0;
  *(_QWORD *)v5 = &off_1E2D7E840;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  v6 = *a3;
  *(_DWORD *)(v5 + 320) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(v5 + 304) = v6;
  v7 = *(void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;

  return a1;
}

void Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::~rnn_arch_kernel(Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel *this)
{
  Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::__set_weight_raw_blob(_DWORD *a1, uint64_t *a2, std::string::size_type a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  int v12;
  int v13;
  int v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type size;
  std::string *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  int v43;
  _DWORD *v44;
  const void *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  char **v60;
  BOOL v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::runtime_error *exception;
  std::string v69;
  void *__p;
  uint64_t v71;
  const void *v72;
  unint64_t v73;
  unsigned __int8 *v74;
  _DWORD *v75;
  char **v76;
  char *v77[2];
  unsigned __int8 v78;
  void *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  uint64_t v82[2];
  uint64_t v83;
  std::__shared_weak_count *v84;
  __int128 *v85;

  if (a1[76] == 2)
  {
    v79 = 0;
    v80 = 0;
    if (a6 && *a6)
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v79, *a6, a6[1]);
      v12 = a1[95];
      if (a1[76])
        v13 = a1[95];
      else
        v13 = 4 * v12;
    }
    else
    {
      v12 = a1[95];
      v13 = v12;
    }
    v14 = a1[96];
    v78 = 0;
    v77[0] = 0;
    v77[1] = 0;
    v76 = v77;
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_x");
    v15 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v15 + 14) = v14;
    *((_DWORD *)v15 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_x_reverse");
    v16 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v16 + 14) = v14;
    *((_DWORD *)v16 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_h");
    v17 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v17 + 14) = v12;
    *((_DWORD *)v17 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_h_reverse");
    v18 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v18 + 14) = v12;
    *((_DWORD *)v18 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_z");
    v19 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v19 + 14) = v14;
    *((_DWORD *)v19 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_r");
    v20 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v20 + 14) = v14;
    *((_DWORD *)v20 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_o");
    v21 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v21 + 14) = v14;
    *((_DWORD *)v21 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "R_z");
    v22 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v22 + 14) = v12;
    *((_DWORD *)v22 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "R_r");
    v23 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v23 + 14) = v12;
    *((_DWORD *)v23 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "R_o");
    v24 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v24 + 14) = v12;
    *((_DWORD *)v24 + 15) = v13;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "b");
    v25 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v25 + 14) = v13;
    *((_DWORD *)v25 + 15) = 1;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
    v26 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v26 + 14) = v13;
    *((_DWORD *)v26 + 15) = 1;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "p");
    v27 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    v28 = 3 * v12;
    *((_DWORD *)v27 + 14) = v28;
    *((_DWORD *)v27 + 15) = 1;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "p_reverse");
    v29 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v29 + 14) = v28;
    *((_DWORD *)v29 + 15) = 1;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "B_z");
    v30 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v30 + 14) = v13;
    *((_DWORD *)v30 + 15) = 1;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "B_r");
    v31 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v31 + 14) = v13;
    *((_DWORD *)v31 + 15) = 1;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "B_o");
    v32 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, &__p, (uint64_t)&__p);
    *((_DWORD *)v32 + 14) = v13;
    *((_DWORD *)v32 + 15) = 1;
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
    __p = v79;
    v71 = (uint64_t)v80;
    if (v80)
    {
      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
      do
        v34 = __ldxr(p_shared_owners);
      while (__stxr(v34 + 1, p_shared_owners));
    }
    v72 = (const void *)a4;
    v73 = a5;
    v74 = &v78;
    v75 = a1;
    v35 = (uint64_t *)v76;
    if (v76 != v77)
    {
      while (1)
      {
        if (*((char *)v35 + 55) < 0)
          std::string::__init_copy_ctor_external(&v69, (const std::string::value_type *)v35[4], v35[5]);
        else
          v69 = *(std::string *)(v35 + 4);
        v36 = *(unsigned __int8 *)(a3 + 23);
        if ((v36 & 0x80u) == 0)
          v37 = *(unsigned __int8 *)(a3 + 23);
        else
          v37 = *(_QWORD *)(a3 + 8);
        size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v69.__r_.__value_.__l.__size_;
        if (v37 == size)
        {
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = &v69;
          else
            v39 = (std::string *)v69.__r_.__value_.__r.__words[0];
          if ((v36 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)a3, v39, *(_QWORD *)(a3 + 8)))
            {
LABEL_67:
              v42 = *((_DWORD *)v35 + 14);
              v43 = *((_DWORD *)v35 + 15);
              v44 = v75;
              v45 = v72;
              v46 = v73;
              v47 = (std::__shared_weak_count *)v71;
              v82[0] = (uint64_t)__p;
              v82[1] = v71;
              if (v71)
              {
                v48 = (unint64_t *)(v71 + 8);
                do
                  v49 = __ldxr(v48);
                while (__stxr(v49 + 1, v48));
              }
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v83, *((_QWORD *)v44 + 1), *((std::__shared_weak_count **)v44 + 2), v45, v46, v82, v42, v43, 1, 1, (v45 & 0x3F) == 0);
              if (v47)
              {
                v50 = (unint64_t *)&v47->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v81, *((_QWORD *)v44 + 1), *((_QWORD *)v44 + 2), &v83);
              v85 = (__int128 *)a3;
              v52 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v44 + 35, (_QWORD *)a3, &v85);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v52 + 7), &v81);
              v53 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
              if (*((_QWORD *)&v81 + 1))
              {
                v54 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              *v74 = 1;
              v56 = v84;
              if (v84)
              {
                v57 = (unint64_t *)&v84->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v41 = v78;
              goto LABEL_86;
            }
          }
          else
          {
            if (!*(_BYTE *)(a3 + 23))
              goto LABEL_67;
            v40 = (unsigned __int8 *)a3;
            while (*v40 == v39->__r_.__value_.__s.__data_[0])
            {
              ++v40;
              v39 = (std::string *)((char *)v39 + 1);
              if (!--v36)
                goto LABEL_67;
            }
          }
        }
        v41 = Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(a1, a2, (const std::string *)a3, a4, a5, a6);
        v78 = v41;
LABEL_86:
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (!v41)
        {
          v59 = (char *)v35[1];
          if (v59)
          {
            do
            {
              v60 = (char **)v59;
              v59 = *(char **)v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = (char **)v35[2];
              v61 = *v60 == (char *)v35;
              v35 = (uint64_t *)v60;
            }
            while (!v61);
          }
          v35 = (uint64_t *)v60;
          if (v60 != v77)
            continue;
        }
        break;
      }
    }
    if (!v78)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v69);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v62 = (std::__shared_weak_count *)v71;
    if (v71)
    {
      v63 = (unint64_t *)(v71 + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v77[0]);
    v65 = v80;
    if (v80)
    {
      v66 = (unint64_t *)&v80->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  else
  {
    Espresso::generic_rnn_arch_kernel_impl::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  }
}

void sub_1912F79C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  void *v33;
  int v34;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a28);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

std::__shared_weak_count *Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *is_valid_gru;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  int64x2_t *v35;
  unint64_t *v36;
  unint64_t v37;
  int64x2_t **v38;
  int64x2_t *v39;
  unint64_t *v40;
  unint64_t v41;
  int64x2_t *v42;
  unint64_t *v43;
  unint64_t v44;
  int64x2_t *v45;
  unint64_t *v46;
  unint64_t v47;
  int64x2_t *v48;
  unint64_t *v49;
  unint64_t v50;
  int64x2_t *v51;
  unint64_t *v52;
  unint64_t v53;
  int64x2_t *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  int64x2_t *v58;
  int64x2_t *v59;
  unint64_t *v60;
  unint64_t v61;
  int64x2_t *v62;
  int64x2_t *v63;
  int64x2_t *v64;
  unint64_t *v65;
  unint64_t v66;
  int64x2_t *v67;
  int64x2_t *v68;
  int64x2_t *v69;
  unint64_t *v70;
  unint64_t v71;
  int64x2_t *v72;
  int64x2_t **v73;
  int64x2_t *v74;
  int64x2_t *v75;
  int64x2_t *v76;
  int64x2_t *v77;
  int64x2_t *v78;
  int64x2_t *v79;
  int64x2_t *v80[2];
  int64x2_t *v81[2];
  int64x2_t *v82[2];
  int64x2_t *v83[2];
  int64x2_t *v84[2];
  int64x2_t *v85[2];
  int64x2_t *v86[2];
  int64x2_t *v87;
  std::__shared_weak_count *v88;
  int64x2_t *v89;
  std::__shared_weak_count *v90;
  int64x2_t *v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  char v94;
  std::string v95;
  _BYTE v96[24];
  _BYTE v97[32];
  std::__shared_weak_count *v98;
  int64x2_t *v99;
  std::__shared_weak_count *v100;
  void **v101;

  if (*(_DWORD *)(a1 + 440) != 1)
  {
    v13 = (std::__shared_weak_count *)a2[1];
    v99 = *a2;
    v100 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: RNN arch encoder expected");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v99, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
    v16 = v98;
    if (v98)
    {
      v17 = (unint64_t *)&v98->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v101 = (void **)v97;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v101);
    v101 = (void **)v96;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v101);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    if (v94 < 0)
      operator delete((void *)v93);
    is_valid_gru = v100;
    if (!v100)
      return is_valid_gru;
    v19 = (unint64_t *)&v100->__shared_owners_;
    do
      v12 = __ldaxr(v19);
    while (__stlxr(v12 - 1, v19));
LABEL_34:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))is_valid_gru->__on_zero_shared)(is_valid_gru);
      std::__shared_weak_count::__release_weak(is_valid_gru);
    }
    return 0;
  }
  if (!*(_DWORD *)(a1 + 444))
  {
    if (*(_BYTE *)(a1 + 456))
    {
      v21 = (std::__shared_weak_count *)a2[1];
      v89 = *a2;
      v90 = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: nd_mode must be false");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v89, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
      v24 = v98;
      if (v98)
      {
        v25 = (unint64_t *)&v98->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v101 = (void **)v97;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v101);
      v101 = (void **)v96;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v101);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      if (v94 < 0)
        operator delete((void *)v93);
      is_valid_gru = v90;
      if (!v90)
        return is_valid_gru;
      v27 = (unint64_t *)&v90->__shared_owners_;
      do
        v12 = __ldaxr(v27);
      while (__stlxr(v12 - 1, v27));
      goto LABEL_34;
    }
    if (*(_BYTE *)(a1 + 457))
    {
      v28 = (std::__shared_weak_count *)a2[1];
      v87 = *a2;
      v88 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: dynamic length not supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v87, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
      v31 = v98;
      if (v98)
      {
        v32 = (unint64_t *)&v98->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v101 = (void **)v97;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v101);
      v101 = (void **)v96;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v101);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      if (v94 < 0)
        operator delete((void *)v93);
      is_valid_gru = v88;
      if (!v88)
        return is_valid_gru;
      v34 = (unint64_t *)&v88->__shared_owners_;
      do
        v12 = __ldaxr(v34);
      while (__stlxr(v12 - 1, v34));
      goto LABEL_34;
    }
    if (*(_DWORD *)(a1 + 416) == 1)
    {
      if (*(float *)(a1 + 420) == 1.0)
      {
        if (*(float *)(a1 + 424) == 0.0)
        {
          if (*(float *)(a1 + 428) == 1.0)
          {
            if (*(float *)(a1 + 432) == 0.0)
            {
              if (*(_BYTE *)(a1 + 436))
              {
                v51 = a2[1];
                v81[0] = *a2;
                v81[1] = v51;
                if (v51)
                {
                  v52 = &v51->u64[1];
                  do
                    v53 = __ldxr(v52);
                  while (__stxr(v53 + 1, v52));
                }
                std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization simple mode must be false");
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
                Espresso::emit_kernel_validation_warning(v81, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
                Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v95.__r_.__value_.__l.__data_);
                if (v94 < 0)
                  operator delete((void *)v93);
                v38 = v81;
              }
              else if (*(_DWORD *)(a1 + 396))
              {
                v54 = a2[1];
                v80[0] = *a2;
                v80[1] = v54;
                if (v54)
                {
                  v55 = &v54->u64[1];
                  do
                    v56 = __ldxr(v55);
                  while (__stxr(v56 + 1, v55));
                }
                std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization mode != 0");
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
                Espresso::emit_kernel_validation_warning(v80, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
                Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v95.__r_.__value_.__l.__data_);
                if (v94 < 0)
                  operator delete((void *)v93);
                v38 = v80;
              }
              else
              {
                v57 = *(_DWORD *)(a1 + 304);
                if (v57)
                {
                  if (v57 == 2)
                  {
                    v68 = *a2;
                    v69 = a2[1];
                    v74 = *a2;
                    v75 = v69;
                    if (v69)
                    {
                      v70 = &v69->u64[1];
                      do
                        v71 = __ldxr(v70);
                      while (__stxr(v71 + 1, v70));
                      v72 = v75;
                    }
                    else
                    {
                      v72 = 0;
                    }
                    is_valid_gru = (std::__shared_weak_count *)Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_gru(a1, v68, v72, a3);
                    v73 = &v74;
                  }
                  else
                  {
                    if (v57 != 1)
                      return 0;
                    v58 = *a2;
                    v59 = a2[1];
                    v78 = *a2;
                    v79 = v59;
                    if (v59)
                    {
                      v60 = &v59->u64[1];
                      do
                        v61 = __ldxr(v60);
                      while (__stxr(v61 + 1, v60));
                      v62 = v79;
                    }
                    else
                    {
                      v62 = 0;
                    }
                    is_valid_gru = (std::__shared_weak_count *)Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_rnn(a1, v58, v62, a3);
                    v73 = &v78;
                  }
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v73);
                  return is_valid_gru;
                }
                v63 = *a2;
                v64 = a2[1];
                v76 = *a2;
                v77 = v64;
                if (v64)
                {
                  v65 = &v64->u64[1];
                  do
                    v66 = __ldxr(v65);
                  while (__stxr(v66 + 1, v65));
                  v67 = v77;
                }
                else
                {
                  v67 = 0;
                }
                Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_lstm((_DWORD *)a1, v63, v67, a3);
                v38 = &v76;
              }
            }
            else
            {
              v48 = a2[1];
              v82[0] = *a2;
              v82[1] = v48;
              if (v48)
              {
                v49 = &v48->u64[1];
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization scale h[1] must be 0.f");
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
              Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v95.__r_.__value_.__l.__data_);
              if (v94 < 0)
                operator delete((void *)v93);
              v38 = v82;
            }
          }
          else
          {
            v45 = a2[1];
            v83[0] = *a2;
            v83[1] = v45;
            if (v45)
            {
              v46 = &v45->u64[1];
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization scale h[0] must be 1.f");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v95.__r_.__value_.__l.__data_);
            if (v94 < 0)
              operator delete((void *)v93);
            v38 = v83;
          }
        }
        else
        {
          v42 = a2[1];
          v84[0] = *a2;
          v84[1] = v42;
          if (v42)
          {
            v43 = &v42->u64[1];
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization scale x[1] must be 0.f");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v84, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v95.__r_.__value_.__l.__data_);
          if (v94 < 0)
            operator delete((void *)v93);
          v38 = v84;
        }
      }
      else
      {
        v35 = a2[1];
        v85[0] = *a2;
        v85[1] = v35;
        if (v35)
        {
          v36 = &v35->u64[1];
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization scale x[0] must be 1.f");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v85, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v95.__r_.__value_.__l.__data_);
        if (v94 < 0)
          operator delete((void *)v93);
        v38 = v85;
      }
    }
    else
    {
      v39 = a2[1];
      v86[0] = *a2;
      v86[1] = v39;
      if (v39)
      {
        v40 = &v39->u64[1];
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: max batch size > 1");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v86, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v95.__r_.__value_.__l.__data_);
      if (v94 < 0)
        operator delete((void *)v93);
      v38 = v86;
    }
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v38);
    return 0;
  }
  v4 = (std::__shared_weak_count *)a2[1];
  v91 = *a2;
  v92 = v4;
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::string::basic_string[abi:ne180100]<0>(&v93, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: override eng is illegal");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v95, &v93, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v91, (Espresso::base_kernel::validate_for_engine_warning_t *)&v95);
  v7 = v98;
  if (v98)
  {
    v8 = (unint64_t *)&v98->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v101 = (void **)v97;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v101);
  v101 = (void **)v96;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v101);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (v94 < 0)
    operator delete((void *)v93);
  is_valid_gru = v92;
  if (v92)
  {
    v11 = (unint64_t *)&v92->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_34;
  }
  return is_valid_gru;
}

void sub_1912F8380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_rnn_arch_kernel::kernel_type_str(Espresso::generic_rnn_arch_kernel *this)
{
  return "rnn_arch";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(void **this)
{
  void **v2;
  void **v3;

  v2 = this + 3;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 9));
  v3 = this + 6;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_rnn(uint64_t a1, int64x2_t *a2, int64x2_t *a3, _QWORD *a4)
{
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v38;
  unint64_t v39;
  int64x2_t **v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int64x2_t *v47[2];
  int64x2_t *v48[2];
  int64x2_t *v49[2];
  int64x2_t *v50[2];
  int64x2_t *v51;
  std::__shared_weak_count *v52;
  int64x2_t *v53;
  std::__shared_weak_count *v54;
  int64x2_t *v55;
  std::__shared_weak_count *v56;
  int64x2_t *v57;
  std::__shared_weak_count *v58;
  void *v59[2];
  char v60;
  std::string __p;
  _BYTE v62[24];
  _BYTE v63[32];
  std::__shared_weak_count *v64;
  int64x2_t *v65;
  std::__shared_weak_count *v66;
  void **v67;

  if (a4[1] - *a4 != 128)
  {
    v65 = a2;
    v66 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v13 = &a3->u64[1];
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 2 inputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v65, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v15 = v64;
    if (v64)
    {
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v67 = (void **)v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v10 = v66;
    if (!v66)
      return 0;
    v18 = (unint64_t *)&v66->__shared_owners_;
    do
      v12 = __ldaxr(v18);
    while (__stlxr(v12 - 1, v18));
LABEL_85:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return 0;
  }
  if (a4[4] - a4[3] != 128)
  {
    v57 = a2;
    v58 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v19 = &a3->u64[1];
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 2 outputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v57, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v21 = v64;
    if (v64)
    {
      v22 = (unint64_t *)&v64->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v67 = (void **)v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v10 = v58;
    if (!v58)
      return 0;
    v24 = (unint64_t *)&v58->__shared_owners_;
    do
      v12 = __ldaxr(v24);
    while (__stlxr(v12 - 1, v24));
    goto LABEL_85;
  }
  if (!*(_DWORD *)(a1 + 448))
  {
    v55 = a2;
    v56 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v25 = &a3->u64[1];
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: encoder_output_sequence is false");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v55, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v27 = v64;
    if (v64)
    {
      v28 = (unint64_t *)&v64->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v67 = (void **)v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v10 = v56;
    if (!v56)
      return 0;
    v30 = (unint64_t *)&v56->__shared_owners_;
    do
      v12 = __ldaxr(v30);
    while (__stlxr(v12 - 1, v30));
    goto LABEL_85;
  }
  if (*(_DWORD *)(a1 + 452))
  {
    v53 = a2;
    v54 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v5 = &a3->u64[1];
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(RNN_BIDIRECTIONAL_NONE) for encoder_bidirectional_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v53, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v7 = v64;
    if (v64)
    {
      v8 = (unint64_t *)&v64->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v67 = (void **)v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v10 = v54;
    if (!v54)
      return 0;
    v11 = (unint64_t *)&v54->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_85;
  }
  if (*(float *)(a1 + 388) != 1.0)
  {
    v51 = a2;
    v52 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v31 = &a3->u64[1];
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(1.0f) for lstm_forget_bias");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v33 = v64;
    if (v64)
    {
      v34 = (unint64_t *)&v64->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v67 = (void **)v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v10 = v52;
    if (!v52)
      return 0;
    v36 = (unint64_t *)&v52->__shared_owners_;
    do
      v12 = __ldaxr(v36);
    while (__stlxr(v12 - 1, v36));
    goto LABEL_85;
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v50[0] = a2;
    v50[1] = a3;
    if (a3)
    {
      v38 = &a3->u64[1];
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for lstm_has_peepholes");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v40 = v50;
  }
  else if (*(_DWORD *)(a1 + 404))
  {
    v49[0] = a2;
    v49[1] = a3;
    if (a3)
    {
      v41 = &a3->u64[1];
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for forget_bias");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v40 = v49;
  }
  else if (*(_DWORD *)(a1 + 412))
  {
    v48[0] = a2;
    v48[1] = a3;
    if (a3)
    {
      v43 = &a3->u64[1];
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(1) for coupled_input_forget");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v40 = v48;
  }
  else
  {
    if (*(float *)(a1 + 408) == 50.0)
      return 1;
    v47[0] = a2;
    v47[1] = a3;
    if (a3)
    {
      v45 = &a3->u64[1];
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(50.0f) for cell_clip_threshold");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v47, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    v40 = v47;
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v40);
  return 0;
}

void sub_1912F8D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a31);
  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_lstm(_DWORD *a1, int64x2_t *a2, int64x2_t *a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  int64x2_t *v43[2];
  int64x2_t *v44;
  std::__shared_weak_count *v45;
  int64x2_t *v46;
  std::__shared_weak_count *v47;
  int64x2_t *v48;
  std::__shared_weak_count *v49;
  int64x2_t *v50;
  std::__shared_weak_count *v51;
  void *v52[2];
  char v53;
  std::string __p;
  _BYTE v55[24];
  _BYTE v56[32];
  std::__shared_weak_count *v57;
  int64x2_t *v58;
  std::__shared_weak_count *v59;
  void **v60;

  v5 = (uint64_t)(a4[1] - *a4) >> 6;
  if (v5 == 3 || v5 == 5)
  {
    v7 = (uint64_t)(a4[4] - a4[3]) >> 6;
    if (v7 == 3 || v7 == 5)
    {
      if (a1[103])
      {
        v48 = a2;
        v49 = (std::__shared_weak_count *)a3;
        if (a3)
        {
          v9 = &a3->u64[1];
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: cell.coupled_input_forget not supported");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, (uint64_t)a4, 0);
        Espresso::emit_kernel_validation_warning(&v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        v11 = v57;
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v60 = (void **)v56;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
        v60 = (void **)v55;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v53 < 0)
          operator delete(v52[0]);
        v14 = v49;
        if (v49)
        {
          v15 = (unint64_t *)&v49->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          goto LABEL_59;
        }
      }
      else
      {
        if (a1[113] != 1)
          return;
        if (a1[77] == a1[86])
        {
          if (a1[80] == a1[89])
          {
            if (a1[83] != a1[92])
            {
              v43[0] = a2;
              v43[1] = a3;
              if (a3)
              {
                v29 = &a3->u64[1];
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              std::string::basic_string[abi:ne180100]<0>(v52, "For Bidirectional LSTM, expecting same second internal nonlinearity for both direction.");
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, (uint64_t)a4, 0);
              Espresso::emit_kernel_validation_warning(v43, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
              Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
              if (v53 < 0)
                operator delete(v52[0]);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v43);
            }
          }
          else
          {
            v44 = a2;
            v45 = (std::__shared_weak_count *)a3;
            if (a3)
            {
              v37 = &a3->u64[1];
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: For Bidirectional LSTM, expecting same internal nonlinearity for both direction.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, (uint64_t)a4, 0);
            Espresso::emit_kernel_validation_warning(&v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v39 = v57;
            if (v57)
            {
              v40 = (unint64_t *)&v57->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v60 = (void **)v56;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
            v60 = (void **)v55;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v53 < 0)
              operator delete(v52[0]);
            v14 = v45;
            if (v45)
            {
              v42 = (unint64_t *)&v45->__shared_owners_;
              do
                v16 = __ldaxr(v42);
              while (__stlxr(v16 - 1, v42));
              goto LABEL_59;
            }
          }
        }
        else
        {
          v46 = a2;
          v47 = (std::__shared_weak_count *)a3;
          if (a3)
          {
            v31 = &a3->u64[1];
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: For Bidirectional LSTM, expecting same nonlinearity for both direction.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, (uint64_t)a4, 0);
          Espresso::emit_kernel_validation_warning(&v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          v33 = v57;
          if (v57)
          {
            v34 = (unint64_t *)&v57->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v60 = (void **)v56;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
          v60 = (void **)v55;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v53 < 0)
            operator delete(v52[0]);
          v14 = v47;
          if (v47)
          {
            v36 = (unint64_t *)&v47->__shared_owners_;
            do
              v16 = __ldaxr(v36);
            while (__stlxr(v16 - 1, v36));
            goto LABEL_59;
          }
        }
      }
    }
    else
    {
      v50 = a2;
      v51 = (std::__shared_weak_count *)a3;
      if (a3)
      {
        v23 = &a3->u64[1];
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 3 or 5 outputs");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, (uint64_t)a4, 0);
      Espresso::emit_kernel_validation_warning(&v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v25 = v57;
      if (v57)
      {
        v26 = (unint64_t *)&v57->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v60 = (void **)v56;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
      v60 = (void **)v55;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v53 < 0)
        operator delete(v52[0]);
      v14 = v51;
      if (v51)
      {
        v28 = (unint64_t *)&v51->__shared_owners_;
        do
          v16 = __ldaxr(v28);
        while (__stlxr(v16 - 1, v28));
        goto LABEL_59;
      }
    }
  }
  else
  {
    v58 = a2;
    v59 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v17 = &a3->u64[1];
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 3 or 5 inputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v52, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v58, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v19 = v57;
    if (v57)
    {
      v20 = (unint64_t *)&v57->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v60 = (void **)v56;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    v60 = (void **)v55;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete(v52[0]);
    v14 = v59;
    if (v59)
    {
      v22 = (unint64_t *)&v59->__shared_owners_;
      do
        v16 = __ldaxr(v22);
      while (__stlxr(v16 - 1, v22));
LABEL_59:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1912F9510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a25);
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_gru(uint64_t a1, int64x2_t *a2, int64x2_t *a3, _QWORD *a4)
{
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  int64x2_t **v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int64x2_t *v45[2];
  int64x2_t *v46[2];
  int64x2_t *v47[2];
  int64x2_t *v48;
  std::__shared_weak_count *v49;
  int64x2_t *v50;
  std::__shared_weak_count *v51;
  int64x2_t *v52;
  std::__shared_weak_count *v53;
  int64x2_t *v54;
  std::__shared_weak_count *v55;
  void *v56[2];
  char v57;
  std::string __p;
  _BYTE v59[24];
  _BYTE v60[32];
  std::__shared_weak_count *v61;
  int64x2_t *v62;
  std::__shared_weak_count *v63;
  void **v64;

  if (a4[1] - *a4 != 128)
  {
    v62 = a2;
    v63 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v13 = &a3->u64[1];
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 2 inputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v56, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v62, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v15 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v64 = (void **)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    v64 = (void **)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    v10 = v63;
    if (!v63)
      return 0;
    v18 = (unint64_t *)&v63->__shared_owners_;
    do
      v12 = __ldaxr(v18);
    while (__stlxr(v12 - 1, v18));
LABEL_51:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return 0;
  }
  if (a4[4] - a4[3] != 128)
  {
    v54 = a2;
    v55 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v19 = &a3->u64[1];
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 2 outputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v56, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v54, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v21 = v61;
    if (v61)
    {
      v22 = (unint64_t *)&v61->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v64 = (void **)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    v64 = (void **)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    v10 = v55;
    if (!v55)
      return 0;
    v24 = (unint64_t *)&v55->__shared_owners_;
    do
      v12 = __ldaxr(v24);
    while (__stlxr(v12 - 1, v24));
    goto LABEL_51;
  }
  if (*(_DWORD *)(a1 + 452))
  {
    v52 = a2;
    v53 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v5 = &a3->u64[1];
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(RNN_BIDIRECTIONAL_NONE) for encoder_bidirectional_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v56, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v52, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v7 = v61;
    if (v61)
    {
      v8 = (unint64_t *)&v61->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v64 = (void **)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    v64 = (void **)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    v10 = v53;
    if (!v53)
      return 0;
    v11 = (unint64_t *)&v53->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_51;
  }
  if (*(float *)(a1 + 388) != 1.0)
  {
    v50 = a2;
    v51 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v26 = &a3->u64[1];
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(1.0f) for lstm_forget_bias");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v56, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v28 = v61;
    if (v61)
    {
      v29 = (unint64_t *)&v61->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v64 = (void **)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    v64 = (void **)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    v10 = v51;
    if (!v51)
      return 0;
    v31 = (unint64_t *)&v51->__shared_owners_;
    do
      v12 = __ldaxr(v31);
    while (__stlxr(v12 - 1, v31));
    goto LABEL_51;
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v48 = a2;
    v49 = (std::__shared_weak_count *)a3;
    if (a3)
    {
      v32 = &a3->u64[1];
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for lstm_has_peepholes");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v56, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(&v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v34 = v61;
    if (v61)
    {
      v35 = (unint64_t *)&v61->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v64 = (void **)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    v64 = (void **)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    v10 = v49;
    if (!v49)
      return 0;
    v37 = (unint64_t *)&v49->__shared_owners_;
    do
      v12 = __ldaxr(v37);
    while (__stlxr(v12 - 1, v37));
    goto LABEL_51;
  }
  if (*(_DWORD *)(a1 + 404))
  {
    v47[0] = a2;
    v47[1] = a3;
    if (a3)
    {
      v38 = &a3->u64[1];
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for forget_bias");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v56, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v47, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    v40 = v47;
  }
  else if (*(_DWORD *)(a1 + 412))
  {
    v46[0] = a2;
    v46[1] = a3;
    if (a3)
    {
      v41 = &a3->u64[1];
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for coupled_input_forget");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v56, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    v40 = v46;
  }
  else
  {
    if (*(float *)(a1 + 408) == 50.0)
      return 1;
    v45[0] = a2;
    v45[1] = a3;
    if (a3)
    {
      v43 = &a3->u64[1];
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(50.0f) for cell_clip_threshold");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v56, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v45, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    v40 = v45;
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v40);
  return 0;
}

void sub_1912F9CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a29);
  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2))
        break;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x40uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    v6[6] = *(uint64_t **)(a3 + 16);
    v6[7] = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    *v9 = (uint64_t *)v6;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *a1 = v11;
      v12 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

_QWORD *std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *result;

  v8 = (char *)operator new(0x118uLL);
  v9 = v8;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DC1868;
  *((_DWORD *)v8 + 13) = -1;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *((_QWORD *)v8 + 11) = 0;
  *((_QWORD *)v8 + 12) = a2;
  *((_QWORD *)v8 + 13) = a3;
  if (a3)
  {
    v10 = (unint64_t *)(a3 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *((_QWORD *)v8 + 14) = 0;
  *((_QWORD *)v8 + 15) = 0;
  *((_DWORD *)v8 + 32) = 0;
  *((_DWORD *)v8 + 34) = 1065353216;
  *(_QWORD *)(v8 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v8 + 37) = 1;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_DWORD *)v8 + 12) = 0;
  *(_OWORD *)(v8 + 152) = 0uLL;
  *((_QWORD *)v8 + 3) = &off_1E2DA6B80;
  *(_OWORD *)(v8 + 168) = 0uLL;
  *((_QWORD *)v8 + 34) = 0;
  *(_OWORD *)(v8 + 200) = 0uLL;
  *(_OWORD *)(v8 + 216) = 0uLL;
  *(_OWORD *)(v8 + 232) = 0uLL;
  *(_OWORD *)(v8 + 248) = 0uLL;
  *((_DWORD *)v8 + 66) = 0;
  *(_OWORD *)(v8 + 184) = 0uLL;
  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v8 + 23, *a4, a4[1]);
  *((_DWORD *)v9 + 66) = 0;
  *a1 = v9 + 24;
  a1[1] = v9;
  return result;
}

void std::__shared_ptr_emplace<Espresso::blob_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  Espresso *v11;
  void *v12;

  v10 = operator new(0x60uLL);
  *v10 = &off_1E2DBECA8;
  v10[1] = 0;
  v10[3] = &off_1E2DA11F0;
  *((_OWORD *)v10 + 4) = 0u;
  v10[2] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1912FA17C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::blob<float,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA11F0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<float,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<float,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(Espresso::generic_rnn_arch_kernel_impl *this)
{
  void *v2;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  *(_QWORD *)this = off_1E2D986F0;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>>>::__deallocate_node(*((_QWORD **)this + 107));
  v2 = (void *)*((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v2)
    operator delete(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 800);
  for (i = 784; i != 752; i -= 16)
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
  do
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 720);
  do
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 688);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 688);
  for (j = 672; j != 640; j -= 16)
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + j);
  do
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + j);
    j -= 16;
  }
  while (j != 608);
  for (k = 600; k != 568; k -= 16)
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + k);
  do
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + k);
    k -= 16;
  }
  while (k != 536);
  do
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + k);
    k -= 16;
  }
  while (k != 504);
  do
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + k);
    k -= 16;
  }
  while (k != 472);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 59));
  *(_QWORD *)this = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::layer_data>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::layer_data>>,0>(uint64_t a1)
{
  std::unique_ptr<Espresso::layer_data>::reset[abi:ne180100]((void ***)(a1 + 24), 0);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void ***std::unique_ptr<Espresso::layer_data>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::kernel_with_uniforms_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 280) = v2 + 288;
  *(_QWORD *)v2 = off_1E2D8ACF0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v2 + 312) = _D0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 324) = 0x3F8000003F800000;
  *(_DWORD *)(v2 + 320) = 2;
  *(_QWORD *)(v2 + 336) = _D0;
  *(_DWORD *)(v2 + 332) = 0;
  *(_QWORD *)(v2 + 348) = 0x3F8000003F800000;
  *(_DWORD *)(v2 + 344) = 0;
  *(_QWORD *)(v2 + 360) = _D0;
  *(_DWORD *)(v2 + 356) = 2;
  *(_QWORD *)(v2 + 372) = 0x3F8000003F800000;
  *(_DWORD *)(v2 + 368) = 0;
  *(_QWORD *)(v2 + 380) = 512;
  *(_DWORD *)(v2 + 388) = 1065353216;
  *(_OWORD *)(v2 + 392) = xmmword_191A82A80;
  *(_QWORD *)(v2 + 408) = 1112014848;
  *(_QWORD *)(v2 + 416) = 0x3F80000000000001;
  result = 0.0078125;
  *(_QWORD *)(v2 + 424) = 0x3F80000000000000;
  *(_QWORD *)(v2 + 432) = 0;
  *(_QWORD *)(v2 + 440) = 0;
  *(_WORD *)(v2 + 456) = 0;
  *(_QWORD *)(v2 + 448) = 0;
  return result;
}

void Espresso::DummyMPSEngine::slice_kernel::~slice_kernel(Espresso::DummyMPSEngine::slice_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyMPSEngine::reduce_kernel::~reduce_kernel(Espresso::DummyMPSEngine::reduce_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::generic_reduce_kernel::number_of_top_blobs(Espresso::generic_reduce_kernel *this)
{
  if ((*((_DWORD *)this + 70) & 0xFFFFFFFE) == 6)
    return 2;
  else
    return 1;
}

BOOL Espresso::DummyMPSEngine::reduce_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 280) - 11) <= 1 && *(_DWORD *)(a1 + 288) == 4;
}

const char *Espresso::generic_reduce_kernel::kernel_type_str(Espresso::generic_reduce_kernel *this)
{
  return "reduce";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::reduce_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSEngine::concat_kernel::~concat_kernel(Espresso::DummyMPSEngine::concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyMPSEngine::softmax_kernel::~softmax_kernel(Espresso::DummyMPSEngine::softmax_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v3 = *a3;
  if (*a3 == a3[1])
  {
    v5 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1)
        v4 = 4;
      else
        v4 = 5;
    }
    v5 = v4 > 3;
  }
  return !*(_BYTE *)(a1 + 307) && v5;
}

void Espresso::DummyMPSEngine::inner_product_kernel::~inner_product_kernel(Espresso::DummyMPSEngine::inner_product_kernel *this)
{
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

const char *Espresso::generic_inner_product_kernel::kernel_type_str(Espresso::generic_inner_product_kernel *this)
{
  return "inner_product";
}

void Espresso::generic_inner_product_kernel::get_biases(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_inner_product_kernel::get_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1912FA7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1912FA87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_kernel::get_f16_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_inner_product_kernel::get_f16_biases(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

_QWORD *Espresso::generic_inner_product_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 496), *a2, a2[1]);
}

_QWORD *Espresso::generic_inner_product_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 464), *a2, a2[1]);
}

_QWORD *Espresso::generic_inner_product_kernel::set_quantization_lut_blob(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 480), *a2, a2[1]);
}

void Espresso::generic_inner_product_kernel::dequantized_weights_from_ranges(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::DummyMPSEngine::flatten_kernel::~flatten_kernel(Espresso::DummyMPSEngine::flatten_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSEngine::flatten_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[20];
  unsigned int v7;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 64)
    return 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, *(const Espresso::layer_shape **)a3, 0);
  return *(_DWORD *)(a1 + 280) != 2 && v7 < 5;
}

void Espresso::DummyMPSEngine::split_kernel::~split_kernel(Espresso::DummyMPSEngine::split_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyMPSEngine::activation_kernel::~activation_kernel(Espresso::DummyMPSEngine::activation_kernel *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyMPSEngine::grid_sampling_kernel::~grid_sampling_kernel(Espresso::DummyMPSEngine::grid_sampling_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSEngine::grid_sampling_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_BYTE *)(a1 + 285) == 0;
}

const char *Espresso::generic_grid_sampling_kernel::kernel_type_str(Espresso::generic_grid_sampling_kernel *this)
{
  return "grid_sampling";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::grid_sampling_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSEngine::local_correlation_kernel::~local_correlation_kernel(Espresso::DummyMPSEngine::local_correlation_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::DummyMPSEngine::local_correlation_kernel::is_valid_for_engine()
{
  return 1;
}

const char *Espresso::generic_local_correlation_kernel::kernel_type_str(Espresso::generic_local_correlation_kernel *this)
{
  return "local_correlation";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::local_correlation_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSEngine::elementwise_kernel::~elementwise_kernel(Espresso::DummyMPSEngine::elementwise_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyMPSEngine::space_to_depth_kernel::~space_to_depth_kernel(Espresso::DummyMPSEngine::space_to_depth_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSEngine::space_to_depth_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 284) != 0;
}

void Espresso::DummyMPSEngine::softmax_nd_kernel::~softmax_nd_kernel(Espresso::DummyMPSEngine::softmax_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSEngine::softmax_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  int v5;
  _BYTE v7[20];
  int v8;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 64)
    return 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v7, *(const Espresso::layer_shape **)a3, 0);
  result = 0;
  v5 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
  if (v5 >= 0 && v5 < v8)
    return v8 + ~v5 == 2 && v8 > 3;
  return result;
}

const char *Espresso::generic_softmax_nd_kernel::kernel_type_str(Espresso::generic_softmax_nd_kernel *this)
{
  return "softmax_nd";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::softmax_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSEngine::transpose_kernel::~transpose_kernel(Espresso::DummyMPSEngine::transpose_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSEngine::transpose_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _BOOL8 v5;
  _BYTE v7[32];
  void *__p;
  void *v9;
  uint64_t v10;

  v3 = *a3;
  if (a3[1] - *a3 != 64)
    return 0;
  *(_OWORD *)v7 = *(_OWORD *)v3;
  *(_OWORD *)&v7[16] = *(_OWORD *)(v3 + 16);
  __p = 0;
  v9 = 0;
  v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v3 + 40), *(_QWORD *)(v3 + 48), (uint64_t)(*(_QWORD *)(v3 + 48) - *(_QWORD *)(v3 + 40)) >> 2);
  if (*(_DWORD *)(a1 + 292) == 3)
  {
    v5 = 0;
    if (*(_DWORD *)(a1 + 296) == 4)
      v5 = *(_QWORD *)&v7[12] == 0x100000001;
  }
  else
  {
    v5 = 0;
  }
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v5;
}

void Espresso::DummyMPSEngine::reshape_kernel::~reshape_kernel(Espresso::DummyMPSEngine::reshape_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::DummyMPSEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, __int128 **a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = Espresso::DummyMPSEngine::mps_reshape_dispatch(a3, (unsigned int *)(a1 + 280));
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_1912FAD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::DummyMPSEngine::mps_reshape_dispatch(__int128 **a1, unsigned int *a2)
{
  __int128 *v2;
  __int128 v5;
  uint64_t v6;
  _BOOL4 v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int8x16_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int *begin;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int *p_dst;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int *v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int32x4_t v50;
  int32x4_t v51;
  __int32 v52;
  __int128 __dst;
  _BYTE v56[24];
  void *__p[2];
  uint64_t v58;
  std::vector<int> v59;
  int8x16_t v60;
  int v61;
  int v62;
  _DWORD v63[5];
  int v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[40];
  __int128 v72;
  uint64_t v73;
  _QWORD v74[3];
  _OWORD v75[2];
  uint64_t v76;
  void *v77;
  _BYTE *v78;
  uint64_t v79;

  v2 = *a1;
  if ((char *)a1[1] - (char *)*a1 != 64)
    return 0;
  v5 = v2[1];
  v6 = *((_QWORD *)v2 + 4);
  v75[0] = *v2;
  v75[1] = v5;
  v76 = v6;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, *((const void **)v2 + 5), *((_QWORD *)v2 + 6), (uint64_t)(*((_QWORD *)v2 + 6) - *((_QWORD *)v2 + 5)) >> 2);
  if (a2[6])
  {
    v7 = 0;
    v8 = *a1;
    v9 = a1[1];
  }
  else
  {
    v8 = *a1;
    v9 = a1[1];
    if (*((_BYTE *)a2 + 32))
      v7 = (char *)v9 - (char *)*a1 == 64;
    else
      v7 = 1;
  }
  memset(v74, 0, sizeof(v74));
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v74, v8, v9, ((char *)v9 - (char *)v8) >> 6);
  v73 = 0;
  v72 = 0u;
  *(_OWORD *)&v71[24] = 0u;
  *(_OWORD *)v71 = xmmword_191A8AA80;
  *(_QWORD *)&v71[16] = 0xFFFFFFFF00000001;
  v65 = v75[0];
  v66 = v75[1];
  v67 = v76;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v77, (uint64_t)v78, (v78 - (_BYTE *)v77) >> 2);
  v11 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v65);
  if (*((_BYTE *)a2 + 33))
  {
    v12 = DWORD1(v66);
    if ((_DWORD)v66 == 1)
      v13 = 4;
    else
      v13 = 5;
    if (DWORD1(v66) == -1)
      v12 = v13;
    if (v12 != a2[5])
      goto LABEL_85;
  }
  if (!a2[7] || (int)a2[9] < 2)
  {
    v33 = *a2;
    v32 = a2[1];
    v35 = a2[2];
    v34 = a2[3];
    *(_OWORD *)&v56[8] = 0u;
    *(_OWORD *)__p = 0u;
    v58 = 0;
    *(_QWORD *)&__dst = __PAIR64__(v32, v33);
    *((_QWORD *)&__dst + 1) = __PAIR64__(v34, v35);
    v36 = a2[4];
    v37 = a2[5];
    if (v37 == -1)
      v37 = 5;
    *(_DWORD *)v56 = a2[4];
    *(_DWORD *)&v56[4] = -1;
    if (v33)
    {
      if (v32)
        goto LABEL_53;
    }
    else
    {
      LODWORD(__dst) = v65;
      if (v32)
      {
LABEL_53:
        if (v35)
          goto LABEL_54;
        goto LABEL_72;
      }
    }
    v46 = DWORD1(v65);
    if (v37 <= 1)
      v46 = 1;
    DWORD1(__dst) = v46;
    if (v35)
    {
LABEL_54:
      if (v34)
        goto LABEL_55;
      goto LABEL_75;
    }
LABEL_72:
    v47 = DWORD2(v65);
    if (v37 <= 2)
      v47 = 1;
    DWORD2(__dst) = v47;
    if (v34)
    {
LABEL_55:
      if (v36)
        goto LABEL_56;
      goto LABEL_78;
    }
LABEL_75:
    v48 = HIDWORD(v65);
    if (v37 <= 3)
      v48 = 1;
    HIDWORD(__dst) = v48;
    if (v36)
    {
LABEL_56:
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v63, (const Espresso::layer_shape *)&__dst, 0);
      v38 = v64;
      if (v64)
      {
        v39 = 0;
        v40 = 1;
        v41 = v63;
        do
        {
          v43 = *v41++;
          v42 = v43;
          v44 = v43 < 1;
          if (v43 <= 1)
            v42 = 1;
          v40 *= v42;
          if (v44)
            ++v39;
          --v38;
        }
        while (v38);
        if (v39 <= 1)
          v45 = v40;
        else
          v45 = 0x7FFFFFFF;
        if (!v11)
          goto LABEL_86;
      }
      else
      {
        v45 = 1;
        if (!v11)
          goto LABEL_86;
      }
      if (v45 > v11)
      {
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_85;
      }
LABEL_86:
      if ((_DWORD)__dst == -1)
        LODWORD(__dst) = v11 / v45;
      if (DWORD1(__dst) == -1)
        DWORD1(__dst) = v11 / v45;
      if (DWORD2(__dst) == -1)
        DWORD2(__dst) = v11 / v45;
      if (HIDWORD(__dst) == -1)
        HIDWORD(__dst) = v11 / v45;
      if (*(_DWORD *)v56 == -1)
        *(_DWORD *)v56 = v11 / v45;
      if ((a2[5] & 0x80000000) == 0)
        *(_DWORD *)&v56[4] = a2[5];
      *(_OWORD *)v71 = __dst;
      *(_OWORD *)&v71[16] = *(_OWORD *)v56;
      *(_QWORD *)&v71[32] = *(_QWORD *)&v56[16];
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v72, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
LABEL_104:
      v50.i64[0] = *(_QWORD *)((char *)v75 + 12);
      v50.i64[1] = *(_QWORD *)&v71[12];
      v51.i64[0] = 0x100000001;
      v51.i64[1] = 0x100000001;
      *(int16x4_t *)v51.i8 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v50, v51)));
      v51.i16[0] = vmaxv_u16(*(uint16x4_t *)v51.i8);
      v52 = (*(_DWORD *)&v71[8] <= 0x2000) & ~v51.i32[0];
      if (*(int *)&v71[4] > 0x4000 || *(_DWORD *)v71 > 0x4000)
        v52 = 0;
      v10 = v52 & v7;
      goto LABEL_110;
    }
LABEL_78:
    v49 = v66;
    if (v37 <= 4)
      v49 = 1;
    *(_DWORD *)v56 = v49;
    goto LABEL_56;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v63, (const Espresso::layer_shape *)&v65, 0);
  v14 = *a2;
  v15 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(a2 + 1));
  v60 = vextq_s8(v15, v15, 8uLL);
  v61 = v14;
  v62 = 5;
  if ((a2[5] & 0x80000000) == 0)
    v16 = a2[5];
  else
    v16 = v64;
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)&v60, v16);
  v17 = v62;
  if (v62)
  {
    v18 = 0;
    do
    {
      if (!v60.i32[v18])
      {
        v60.i32[v18] = v63[v18];
        v17 = v62;
      }
      ++v18;
    }
    while (v18 < v17);
  }
  Espresso::layer_nd_shape::shape_vector(&v59, (uint64_t)&v60);
  __dst = 0uLL;
  *(_DWORD *)v56 = 0;
  begin = v59.__begin_;
  v20 = (char *)v59.__end_ - (char *)v59.__begin_;
  v21 = v59.__end_ - v59.__begin_;
  if (v59.__end_ != v59.__begin_)
  {
    if (v21 <= 1)
      v22 = 1;
    else
      v22 = v59.__end_ - v59.__begin_;
    memcpy(&__dst, v59.__begin_, 4 * v22);
  }
  *(_DWORD *)&v56[4] = v20 >> 2;
  if (!*(_DWORD *)&v56[4])
  {
    v30 = 1;
    if (!begin)
      goto LABEL_42;
    goto LABEL_41;
  }
  v23 = 0;
  v24 = (int)v21;
  v25 = 1;
  p_dst = (int *)&__dst;
  do
  {
    v28 = *p_dst++;
    v27 = v28;
    v29 = v28 < 1;
    if (v28 <= 1)
      v27 = 1;
    v25 *= v27;
    if (v29)
      ++v23;
    --v24;
  }
  while (v24);
  if (v23 <= 1)
    v30 = v25;
  else
    v30 = 0x7FFFFFFF;
  if (begin)
  {
LABEL_41:
    v59.__end_ = begin;
    operator delete(begin);
  }
LABEL_42:
  if (!v11 || v30 <= v11)
  {
    if (v17)
    {
      v31 = 0;
      while (v60.i32[v31] != -1)
      {
        if (v17 == ++v31)
          goto LABEL_103;
      }
      v60.i32[v31] = v11 / v30;
    }
LABEL_103:
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v60, 0, (uint64_t)&__dst);
    *(_OWORD *)v71 = __dst;
    *(_OWORD *)&v71[16] = *(_OWORD *)v56;
    v72 = *(_OWORD *)__p;
    *(_QWORD *)&v71[32] = *(_QWORD *)&v56[16];
    v73 = v58;
    goto LABEL_104;
  }
LABEL_85:
  v10 = 0;
LABEL_110:
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if ((_QWORD)v72)
  {
    *((_QWORD *)&v72 + 1) = v72;
    operator delete((void *)v72);
  }
  *(_QWORD *)v71 = v74;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  return v10;
}

void sub_1912FB290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;

  if (__p)
    operator delete(__p);
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  a35 = v41 - 152;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  v43 = *(void **)(v41 - 88);
  if (v43)
  {
    *(_QWORD *)(v41 - 80) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void Espresso::DummyMPSEngine::general_concat_kernel::~general_concat_kernel(Espresso::DummyMPSEngine::general_concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

const char *Espresso::generic_general_concat_kernel::kernel_type_str(Espresso::generic_general_concat_kernel *this)
{
  return "general_concat";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::general_concat_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSEngine::split_nd_kernel::~split_nd_kernel(Espresso::DummyMPSEngine::split_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::DummyMPSEngine::split_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Espresso::DummyMPSEngine::mps_split_nd_dispatch(*(const Espresso::layer_shape **)a3, *(_QWORD *)(a3 + 8), a1 + 280);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 0;
}

void sub_1912FB404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_split_nd_kernel::kernel_type_str(Espresso::generic_split_nd_kernel *this)
{
  return "split_nd";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::split_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const Espresso::layer_shape *Espresso::DummyMPSEngine::mps_split_nd_dispatch(const Espresso::layer_shape *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v4[24];

  v3 = 0;
  while (!*(_DWORD *)(a3 + 8 + v3))
  {
    v3 += 4;
    if (v3 == 512)
    {
      if (a2 - (_QWORD)result == 64)
        return (const Espresso::layer_shape *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v4, result, 0);
      return result;
    }
  }
  return result;
}

void Espresso::dummy_blob_container::~dummy_blob_container(Espresso::dummy_blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D864B8;
  v2 = (char *)this + 176;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  *(_QWORD *)this = &off_1E2DA6B80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

void Espresso::dummy_blob_container::resize(Espresso::abstract_blob_container *a1, const Espresso::layer_shape *a2, uint64_t *a3)
{
  uint64_t v6;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];

  Espresso::abstract_blob_container::set_shape(a1, a2);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 33, *a3, a3[1]);
  v6 = *a3;
  if (*a3)
  {
    if (v7)
    {
      if (v7[88])
      {
        v8 = (std::__shared_weak_count *)a3[1];
        v13[0] = v6;
        v13[1] = (uint64_t)v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        Espresso::blob_cpu::resize((int *)a1, a2, v13);
        if (v8)
        {
          v11 = (unint64_t *)&v8->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
}

void sub_1912FB590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::dummy_blob_container::platform(Espresso::dummy_blob_container *this)
{
  return (***(uint64_t (****)(_QWORD))(*((_QWORD *)this + 9) + 8))(*(_QWORD *)(*((_QWORD *)this + 9) + 8));
}

uint64_t Espresso::dummy_blob_container::compute_path(Espresso::dummy_blob_container *this)
{
  return *((unsigned int *)this + 64);
}

void Espresso::dummy_blob_container::__copy_to_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a1 + 160))
    Espresso::blob_cpu::__copy_to_host(a1, a2, a3);
}

void Espresso::dummy_blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10[2];
  char v11[40];
  void *__p;
  void *v13;

  if (!*(_QWORD *)(a1 + 160))
  {
    Espresso::abstract_blob_container::shape(v11, a1);
    v5 = *(std::__shared_weak_count **)(a1 + 272);
    v10[0] = *(_QWORD *)(a1 + 264);
    v10[1] = (uint64_t)v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    Espresso::blob_cpu::resize((int *)a1, (const Espresso::layer_shape *)v11, v10);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  Espresso::blob_cpu::__copy_from_host(a1, a2, a3);
}

void sub_1912FB694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_blob_container::sync_raw_pointer_access(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
}

uint64_t Espresso::blob_cpu::can_arbitrarily_resize(Espresso::blob_cpu *this)
{
  return 1;
}

uint64_t Espresso::blob_cpu::unsafe_opaque_raw_pointer(Espresso::blob_cpu *this)
{
  return *((_QWORD *)this + 20);
}

void Espresso::abstract_blob_container::__copy_to_raw(uint64_t a1)
{
  std::runtime_error *exception;
  int v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  std::string v7;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  std::to_string(&v6, v3);
  v4 = std::string::insert(&v6, 0, "__copy_from_raw not defined for platform ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1912FB770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void Espresso::abstract_blob_container::__copy_from_raw(uint64_t a1)
{
  std::runtime_error *exception;
  int v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  std::string v7;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  std::to_string(&v6, v3);
  v4 = std::string::insert(&v6, 0, "__copy_from_raw not defined for platform ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1912FB868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::abstract_blob_container::raw_size(Espresso::abstract_blob_container *this)
{
  return 0;
}

uint64_t Espresso::abstract_blob_container::__copy_from_vimage_buffers()
{
  return 0;
}

BOOL Espresso::dummy_blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v10, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v5 = v10;
  if (v10)
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 != 0;
}

void sub_1912FB974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_blob_container::__copy_to()
{
  return 0;
}

uint64_t Espresso::abstract_blob_container::try_external_storage()
{
  return 0;
}

void Espresso::DummyMPSBuffersEngine::batch_matmul_kernel::~batch_matmul_kernel(Espresso::DummyMPSBuffersEngine::batch_matmul_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::batch_matmul_kernel::is_valid_for_engine(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const Espresso::layer_shape *v3;
  int *v6;
  unsigned int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  int v13;
  int v14;
  int v17;
  int v18;
  BOOL v19;
  int v21;
  int v22;
  _BOOL4 v23;
  _BYTE v24[20];
  unsigned int v25;

  v3 = *(const Espresso::layer_shape **)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 < 0x80uLL)
    return 0;
  v6 = (int *)((char *)v3 + 64);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, *(const Espresso::layer_shape **)a3, 0);
  v7 = v25;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, (const Espresso::layer_shape *)((char *)v3 + 64), 0);
  v8 = 0;
  v9 = *((_DWORD *)v3 + 2);
  v10 = *((_DWORD *)v3 + 18);
  if (v10 == 1 || v9 == 1 || v9 == v10)
  {
    v13 = *((_DWORD *)v3 + 3);
    v14 = *((_DWORD *)v3 + 19);
    if (v14 != 1 && v13 != 1 && v13 != v14)
      goto LABEL_37;
    v17 = *((_DWORD *)v3 + 4);
    v18 = *((_DWORD *)v3 + 20);
    v19 = v18 == 1 || v17 == 1;
    if (!v19 && v17 != v18)
      goto LABEL_37;
    if (a1[281])
    {
      if (a1[282])
        v21 = *v6;
      else
        v21 = *((_DWORD *)v3 + 17);
      v8 = *((_DWORD *)v3 + 1) == v21;
      goto LABEL_38;
    }
    v22 = a1[282] ? *v6 : *((_DWORD *)v3 + 17);
    if (*(_DWORD *)v3 == v22)
      v8 = 1;
    else
LABEL_37:
      v8 = 0;
  }
LABEL_38:
  if (v7 >= 5)
    v8 = 0;
  v23 = v25 < 5 && v8;
  return !a1[280] && v23;
}

const char *Espresso::generic_batch_matmul_kernel::kernel_type_str(Espresso::generic_batch_matmul_kernel *this)
{
  return "batch_matmul";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::batch_matmul_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSBuffersEngine::general_concat_kernel::~general_concat_kernel(Espresso::DummyMPSBuffersEngine::general_concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_BYTE *)(a1 + 285) == 0;
}

void Espresso::DummyMPSBuffersEngine::reshape_kernel::~reshape_kernel(Espresso::DummyMPSBuffersEngine::reshape_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return !*(_DWORD *)(a1 + 304) && (!*(_BYTE *)(a1 + 312) || a3[1] - *a3 == 64);
}

void Espresso::DummyMPSBuffersEngine::inner_product_kernel::~inner_product_kernel(Espresso::DummyMPSBuffersEngine::inner_product_kernel *this)
{
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  const Espresso::layer_shape *v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  _BYTE v11[20];
  unsigned int v12;

  if (*(int *)(a1 + 424) > 0 || *(_DWORD *)(a1 + 404))
    return 0;
  result = 0;
  v6 = *(const Espresso::layer_shape **)a3;
  v7 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v7 && v7 <= 0x80)
  {
    if (*(_DWORD *)(a1 + 332))
      return 0;
    if (*(_DWORD *)(a1 + 316) == 2)
      return 0;
    if (*(_DWORD *)(a1 + 340))
      return 0;
    if (*(_DWORD *)(a1 + 348))
      return 0;
    v8 = *(_DWORD *)(a1 + 336);
    if (!v8)
    {
      if (*(_DWORD *)(a3 + 64))
        return 0;
    }
    if (!v8)
    {
      if (v7 != 128)
        return 1;
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v6, 0);
      result = 0;
      if (v12 <= 3)
      {
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, (const Espresso::layer_shape *)(*(_QWORD *)a3 + 64), 0);
        result = 0;
        if (v12 <= 3)
          return 1;
      }
      return result;
    }
    if (v7 != 64)
      return 0;
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v6, 0);
    v9 = *(unsigned __int8 *)(a1 + 344);
    v10 = Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)v11, v9);
    result = 0;
    if (v10 >= 20)
    {
      if ((unint64_t)Espresso::layer_nd_shape::matrix_cols((Espresso::layer_nd_shape *)v11, v9 != 0) <= 1
        && *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 64)
      {
        return v12 > 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t Espresso::layer_nd_shape::matrix_rows(Espresso::layer_nd_shape *this, char a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 5);
  if ((a2 & 1) != 0 || v2 <= 3)
  {
    switch(v2)
    {
      case 1u:
        result = 1;
        break;
      case 2u:
        return *(int *)this;
      case 3u:
        return *((int *)this + 1) * (uint64_t)*(int *)this;
      case 4u:
        result = *((int *)this + 1) * (uint64_t)*(int *)this * *((int *)this + 2);
        break;
      case 5u:
        result = *((int *)this + 1) * (uint64_t)*(int *)this * *((int *)this + 2) * *((int *)this + 3);
        break;
      default:
        return 0;
    }
  }
  else if (v2 == 5)
  {
    return *((int *)this + 1) * (uint64_t)*(int *)this;
  }
  else if (v2 == 4)
  {
    return *(int *)this;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t Espresso::layer_nd_shape::matrix_cols(Espresso::layer_nd_shape *this, char a2)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 5);
  if ((a2 & 1) != 0 || v2 <= 3)
  {
    if (*((_DWORD *)this + 5))
      return *((int *)this + (int)v2 - 1);
    return 0;
  }
  if (v2 == 5)
  {
    v4 = *((_DWORD *)this + 3);
    v3 = *((_DWORD *)this + 4);
    v5 = *((int *)this + 2);
    return v4 * (uint64_t)v3 * v5;
  }
  if (v2 != 4)
    return 0;
  v4 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  v5 = *((int *)this + 1);
  return v4 * (uint64_t)v3 * v5;
}

void Espresso::DummyMPSBuffersEngine::reduce_kernel::~reduce_kernel(Espresso::DummyMPSBuffersEngine::reduce_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::DummyMPSBuffersEngine::reduce_kernel::is_valid_for_engine(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  unsigned int v3;
  int v4;
  BOOL v5;
  unsigned int v6;

  v1 = *(_DWORD *)(a1 + 280);
  if (*(_BYTE *)(a1 + 320))
  {
    v2 = v1 >= 0xD;
    v3 = 7683;
  }
  else
  {
    v2 = v1 >= 0xC;
    v5 = v1 == 12;
    v4 = (1 << v1) & 0x1E03;
    v5 = !v5 && v2 || v4 == 0;
    if (v5)
      return 0;
    v1 = *(_DWORD *)(a1 + 288);
    v2 = v1 >= 0x11;
    v3 = 65814;
  }
  v6 = (v3 >> v1) & 1;
  if (v2)
    return 0;
  else
    return v6;
}

void Espresso::DummyMPSBuffersEngine::concat_kernel::~concat_kernel(Espresso::DummyMPSBuffersEngine::concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  BOOL v5;
  _BYTE v6[20];
  unsigned int v7;

  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
    return 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, *(const Espresso::layer_shape **)a3, 0);
  result = 0;
  if (*(_BYTE *)(a1 + 340))
    v5 = v7 > 3;
  else
    v5 = 0;
  if (!v5)
    return *(_WORD *)(a1 + 320) == 0;
  return result;
}

void Espresso::DummyMPSBuffersEngine::activation_kernel::~activation_kernel(Espresso::DummyMPSBuffersEngine::activation_kernel *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::DummyMPSBuffersEngine::activation_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 304) < 0x18u) & (0xF87FFFu >> *(_DWORD *)(a1 + 304));
}

void Espresso::DummyMPSBuffersEngine::elementwise_kernel::~elementwise_kernel(Espresso::DummyMPSBuffersEngine::elementwise_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::DummyMPSBuffersEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  const void *v12;
  _QWORD *v13;
  __int128 v14;
  const void *v15;
  _BOOL4 v16;
  int v17;
  char v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  int v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void *__p;
  void *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *v56[2];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;

  v5 = (_QWORD *)*a3;
  v6 = a3[1] - *a3;
  v7 = *(_DWORD *)(a1 + 280);
  if (v6 == 192 && v7 == 101)
  {
    v8 = *((_OWORD *)v5 + 1);
    v9 = v5[4];
    v58 = *(_OWORD *)v5;
    v59 = v8;
    v60 = v9;
    v61 = 0uLL;
    v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
    v10 = (_QWORD *)*a3;
    v11 = *(_OWORD *)(*a3 + 80);
    v53 = *(_OWORD *)(*a3 + 64);
    v54 = v11;
    v12 = (const void *)v10[13];
    v55 = v10[12];
    v56[0] = 0;
    v56[1] = 0;
    v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v56, v12, v10[14], (uint64_t)(v10[14] - (_QWORD)v12) >> 2);
    v13 = (_QWORD *)*a3;
    v14 = *(_OWORD *)(*a3 + 144);
    v47 = *(_OWORD *)(*a3 + 128);
    v48 = v14;
    v15 = (const void *)v13[21];
    v49 = v13[20];
    __p = 0;
    v51 = 0;
    v52 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15, v13[22], (uint64_t)(v13[22] - (_QWORD)v15) >> 2);
    v16 = Espresso::layer_shape::operator==((uint64_t)&v58, (uint64_t)&v53);
    v17 = v16 & Espresso::layer_shape::operator==((uint64_t)&v58, (uint64_t)&v47);
    if (*(_DWORD *)(a1 + 284))
      v18 = 0;
    else
      v18 = v17;
    if (__p)
    {
      v51 = __p;
      operator delete(__p);
    }
    if (v56[0])
    {
      v56[1] = v56[0];
      operator delete(v56[0]);
    }
    if ((_QWORD)v61)
    {
      *((_QWORD *)&v61 + 1) = v61;
      operator delete((void *)v61);
    }
    return v18 & 1;
  }
  if (v6 >> 6)
  {
    if (v6 >> 6 == 1)
    {
      v19 = *(_DWORD *)(a1 + 280);
      if (v7 < 2)
        goto LABEL_31;
      goto LABEL_30;
    }
    v20 = *((_OWORD *)v5 + 1);
    v21 = v5[4];
    v58 = *(_OWORD *)v5;
    v59 = v20;
    v60 = v21;
    v61 = 0uLL;
    v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
    v22 = (_QWORD *)*a3;
    v23 = *(_OWORD *)(*a3 + 80);
    v53 = *(_OWORD *)(*a3 + 64);
    v54 = v23;
    v24 = (const void *)v22[13];
    v55 = v22[12];
    v56[0] = 0;
    v56[1] = 0;
    v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v56, v24, v22[14], (uint64_t)(v22[14] - (_QWORD)v24) >> 2);
    if (v6 == 128 && (v7 < 0xA || v7 - 29 <= 3))
    {
      v25 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v58);
      if (v25 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v53))
      {
        v27 = (void *)v61;
        v49 = v60;
        v26 = v60;
        v47 = v58;
        v28 = v58;
        v48 = v59;
        v29 = v62;
        v58 = v53;
        v59 = v54;
        v60 = v55;
        v61 = *(_OWORD *)v56;
        v62 = v57;
        v53 = v28;
        v54 = v48;
        v55 = v26;
        v56[0] = v27;
        v57 = v29;
      }
    }
    v18 = 0;
    if (v7 - 25 < 2 || v7 == 119)
    {
      v19 = v7;
      v30 = 0;
      goto LABEL_25;
    }
    if (v7 > 1)
    {
      v30 = 0;
      v35 = *(_DWORD *)(a1 + 280);
      v18 = 1;
      if ((v35 - 100 > 0xD || ((1 << (v35 - 100)) & 0x2CFD) == 0)
        && (v35 > 0x24 || ((1 << v35) & 0x1200C02000) == 0))
      {
        v18 = 0;
        v30 = 0;
      }
    }
    else
    {
      if (DWORD2(v53) == 1)
      {
        v32 = v54;
        if ((int)v54 <= 1)
          v33 = 1;
        else
          v33 = v54;
        v34 = v53;
        if (v33 * HIDWORD(v53) == 1 && (_QWORD)v53 == (_QWORD)v58)
        {
          if (v7)
          {
            if (*(_DWORD *)(a1 + 280) == 1)
              v19 = 7;
            else
              v19 = 1;
LABEL_100:
            v30 = 1;
            goto LABEL_25;
          }
          v30 = 1;
          v19 = 4;
LABEL_25:
          if (v56[0])
          {
            v56[1] = v56[0];
            operator delete(v56[0]);
          }
          if ((_QWORD)v61)
          {
            *((_QWORD *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
          if ((v30 & 1) == 0)
            return v18 & 1;
          goto LABEL_30;
        }
      }
      else
      {
        v34 = v53;
        v32 = v54;
      }
      v36 = v34 == 1 && DWORD1(v53) == 1;
      v37 = v36;
      if (!v36)
      {
        v39 = HIDWORD(v53);
        v40 = DWORD2(v58);
        if (v32 <= 1)
          v38 = 1;
        else
          v38 = v32;
        goto LABEL_74;
      }
      if (v32 <= 1)
        v38 = 1;
      else
        v38 = v32;
      v39 = HIDWORD(v53);
      v40 = DWORD2(v58);
      if (v38 * HIDWORD(v53) != 1 || DWORD2(v53) != DWORD2(v58))
      {
LABEL_74:
        if (v38 * v39 == 1 && __PAIR64__(DWORD1(v53), v34) == (_QWORD)v58 && DWORD2(v53) == v40)
        {
          if (!v7)
          {
            v30 = 1;
            v19 = 6;
            goto LABEL_25;
          }
          v42 = *(_DWORD *)(a1 + 280) == 1;
          v43 = 9;
        }
        else
        {
          if (DWORD2(v53) == 1)
            v44 = v37;
          else
            v44 = 0;
          if (v44 == 1 && v39 * v32 == (_DWORD)v59 * HIDWORD(v58))
          {
            if (!v7)
            {
              v30 = 1;
              v19 = 29;
              goto LABEL_25;
            }
            v42 = *(_DWORD *)(a1 + 280) == 1;
            v43 = 30;
          }
          else
          {
            v45 = v44 ^ 1;
            if (v39 != 1)
              v45 = 1;
            if (v32 == 1)
              v46 = v45;
            else
              v46 = 1;
            if (v46)
              v19 = v7;
            else
              v19 = 31;
            v30 = v46 ^ 1;
            v18 = 1;
            if ((v46 & 1) != 0 || !v7)
              goto LABEL_25;
            v42 = *(_DWORD *)(a1 + 280) == 1;
            v43 = 32;
          }
        }
        if (v42)
          v19 = v43;
        else
          v19 = v7;
        goto LABEL_100;
      }
      v41 = *(_DWORD *)(a1 + 280);
      if (!v41)
      {
        v30 = 1;
        v19 = 5;
        goto LABEL_25;
      }
      v30 = 1;
      if (v41 == 1)
      {
        v19 = 8;
        goto LABEL_25;
      }
    }
    v19 = v7;
    goto LABEL_25;
  }
  v19 = *(_DWORD *)(a1 + 280);
LABEL_30:
  if (v19 < 0xE)
  {
LABEL_31:
    v18 = 1;
    return v18 & 1;
  }
  v18 = 1;
  if ((v19 > 0x20 || ((1 << v19) & 0x1EFC00000) == 0) && (v19 - 103 > 0x10 || ((1 << (v19 - 103)) & 0x1D801) == 0))
    v18 = 0;
  return v18 & 1;
}

void sub_1912FC524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 72);
  if (v25)
  {
    *(_QWORD *)(v23 - 64) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<unsigned int,std::allocator<unsigned int>>(const void *a1, uint64_t a2, void *__s2, uint64_t a4)
{
  return a2 - (_QWORD)a1 == a4 - (_QWORD)__s2 && memcmp(a1, __s2, a2 - (_QWORD)a1) == 0;
}

void Espresso::DummyMPSBuffersEngine::softmax_kernel::~softmax_kernel(Espresso::DummyMPSBuffersEngine::softmax_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, const Espresso::layer_shape **a3)
{
  _BOOL4 v3;
  _BYTE v5[20];
  unsigned int v6;

  v3 = !*(_DWORD *)(a1 + 300) && !*(_BYTE *)(a1 + 307) && !*(_BYTE *)(a1 + 306) && *(_BYTE *)(a1 + 304) == 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v5, *a3, 0);
  return v6 < 4 && v3;
}

void Espresso::DummyMPSBuffersEngine::general_slice_kernel::~general_slice_kernel(Espresso::DummyMPSBuffersEngine::general_slice_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::general_slice_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return a3[1] - *a3 == 64;
}

BOOL Espresso::generic_general_slice_kernel::has_dynamic_top_shape(Espresso::generic_general_slice_kernel *this, unint64_t a2)
{
  uint64_t v2;
  _BYTE *i;

  v2 = *((int *)this + 94);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return 0;
    for (i = (char *)this + 345; *(i - 5) && *i; ++i)
    {
      if (!--v2)
        return 0;
    }
  }
  return a2 > 1;
}

const char *Espresso::generic_general_slice_kernel::kernel_type_str(Espresso::generic_general_slice_kernel *this)
{
  return "general_slice";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::general_slice_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSBuffersEngine::split_nd_kernel::~split_nd_kernel(Espresso::DummyMPSBuffersEngine::split_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::split_nd_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(int *)(a1 + 288) < 1 || *(_DWORD *)(a1 + 292) < 1;
}

void Espresso::DummyMPSBuffersEngine::tile_kernel::~tile_kernel(Espresso::DummyMPSBuffersEngine::tile_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::tile_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return a3[1] - *a3 < 0x80uLL;
}

BOOL Espresso::generic_tile_kernel::has_dynamic_top_shape(Espresso::generic_tile_kernel *this, unint64_t a2)
{
  return a2 > 1;
}

const char *Espresso::generic_tile_kernel::kernel_type_str(Espresso::generic_tile_kernel *this)
{
  return "tile";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::tile_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSBuffersEngine::gather_nd_kernel::~gather_nd_kernel(Espresso::DummyMPSBuffersEngine::gather_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::gather_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  void ***v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v20;
  _BOOL8 v21;
  _BYTE v23[20];
  int v24;
  void **v25[2];
  unsigned int v26;
  const Espresso::layer_shape *v27;
  uint64_t v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v27, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
  if ((unint64_t)(v28 - (_QWORD)v27) < 0x80)
    goto LABEL_19;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v25, v27, 0);
  v4 = v26;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v23, (const Espresso::layer_shape *)((char *)v27 + 64), 0);
  v5 = *(_DWORD *)(a1 + 284);
  v6 = v4 & (v5 >> 31);
  v7 = v6 + v5;
  if (v6 + v5 < 0 != __OFADD__(v6, v5))
    v8 = v26;
  else
    v8 = v7;
  v9 = 1;
  if ((int)v8 >= 1)
  {
    v10 = v25;
    do
    {
      v11 = *(_DWORD *)v10;
      v10 = (void ***)((char *)v10 + 4);
      v9 *= v11;
      --v8;
    }
    while (v8);
  }
  if (v7 < 0)
    v7 = -1;
  v12 = v7 + 1;
  if (v7 + 1 >= (int)v26)
  {
    v15 = 1;
  }
  else
  {
    v13 = v26 - (unint64_t)v12;
    v14 = (int *)v25 + v12;
    v15 = 1;
    do
    {
      v16 = *v14++;
      v15 *= v16;
      --v13;
    }
    while (v13);
  }
  v17 = v24;
  v18 = 1;
  if (v24 >= 1)
  {
    v19 = (int *)v23;
    do
    {
      v20 = *v19++;
      v18 *= v20;
      --v17;
    }
    while (v17);
  }
  if (v15 * v9 * v18 <= 250000)
    v21 = *(_DWORD *)(a1 + 280) == 0;
  else
LABEL_19:
    v21 = 0;
  v25[0] = (void **)&v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v25);
  return v21;
}

void sub_1912FC8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_gather_nd_kernel::kernel_type_str(Espresso::generic_gather_nd_kernel *this)
{
  return "gather_nd";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::gather_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSBuffersEngine::fill_kernel::~fill_kernel(Espresso::DummyMPSBuffersEngine::fill_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::fill_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return a3[1] == *a3 || *(_BYTE *)(a1 + 312) == 0;
}

const char *Espresso::generic_fill_kernel::kernel_type_str(Espresso::generic_fill_kernel *this)
{
  return "fill";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::fill_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::DummyMPSBuffersEngine::dev_op_kernel::~dev_op_kernel(void **this)
{
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::dev_op_kernel::is_valid_for_engine(uint64_t a1)
{
  if (*(char *)(a1 + 367) < 0)
  {
    if (*(_QWORD *)(a1 + 352))
      return *(_DWORD *)(a1 + 280) == 50002;
  }
  else if (*(_BYTE *)(a1 + 367))
  {
    return *(_DWORD *)(a1 + 280) == 50002;
  }
  return 0;
}

const char *Espresso::generic_dev_op_kernel::kernel_type_str(Espresso::generic_dev_op_kernel *this)
{
  return "dev_op";
}

void Espresso::DummyMPSBuffersEngine::l2_normalize_kernel::~l2_normalize_kernel(Espresso::DummyMPSBuffersEngine::l2_normalize_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::DummyMPSBuffersEngine::l2_normalize_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 288) - 1) <= 1 && *(_DWORD *)(a1 + 284) != 0;
}

const char *Espresso::generic_l2_normalize_kernel::kernel_type_str(Espresso::generic_l2_normalize_kernel *this)
{
  return "l2_normalize";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::l2_norm_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::IREngine::blob_container::~blob_container(Espresso::IREngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyMPSEngine::blob_container::~blob_container(Espresso::DummyMPSEngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyBNNSEngine::blob_container::~blob_container(Espresso::DummyBNNSEngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyMPSBuffersEngine::blob_container::~blob_container(Espresso::DummyMPSBuffersEngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::DummyMPSGraphEngine::blob_container::~blob_container(Espresso::DummyMPSGraphEngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::engine_cpu::available_compute_paths@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(8uLL);
  *a1 = v3;
  *v3 = 0x100000000;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

__n128 Espresso::DummyMPSEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x130uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E2DB71F0;
  v7 = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 70) = a2;
  *((_OWORD *)v6 + 18) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D61510;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void Espresso::DummyMPSEngine::engine::~engine(Espresso::DummyMPSEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __n128 result;

  v8 = operator new(0x340uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB72D0;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D619F8;
  *((_DWORD *)v8 + 206) = a3;
  memcpy(v8 + 38, a2, 0x208uLL);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FCCD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB72D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB72D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = operator new(0x160uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB7260;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D61748;
  *((_DWORD *)v8 + 86) = a3;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  v8[42] = *(_QWORD *)(a2 + 32);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FCDC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reshape_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x148uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB7308;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D61B50;
  *((_DWORD *)v8 + 81) = a3;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FCEAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x138uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB7378;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D61E48;
  *((_DWORD *)v8 + 77) = a3;
  *((_DWORD *)v8 + 76) = *a2;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FCF90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x148uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB74C8;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D62720;
  *((_DWORD *)v8 + 80) = a3;
  *((_OWORD *)v8 + 19) = *a2;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FD074(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::local_correlation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB74C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::local_correlation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB74C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::local_correlation_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB73E8;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D620F8;
  *((_DWORD *)v8 + 78) = a3;
  *((_DWORD *)v8 + 76) = *(_DWORD *)a2;
  *((_WORD *)v8 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FD160(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::grid_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB73E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::grid_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB73E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::grid_sampling_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::transplant_kernel_cpu,std::allocator<Espresso::transplant_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transplant_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::transplant_kernel_cpu,std::allocator<Espresso::transplant_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transplant_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x190uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBC820;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D8C500;
  result = *a3;
  *(__n128 *)(v6 + 328) = *a3;
  *((_DWORD *)v6 + 86) = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FD284(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::transplant_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::transplant_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::transplant_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = (char *)operator new(0x160uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB71B8;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D613B8;
  *((_DWORD *)v8 + 87) = a3;
  v10 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v10;
  *(_OWORD *)(v8 + 329) = *(_OWORD *)((char *)a2 + 25);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FD378(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB71B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB71B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reduce_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB7490;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D625C8;
  *((_DWORD *)v8 + 79) = a3;
  v8[38] = *(_QWORD *)a2;
  *((_DWORD *)v8 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FD4A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::space_to_depth_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB73B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB73B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB7228;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D615F0;
  *((_DWORD *)v8 + 78) = a3;
  v8[38] = *a2;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FD648(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::batchnorm_kernel_cpu,std::allocator<Espresso::batchnorm_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::batchnorm_kernel_cpu,std::allocator<Espresso::batchnorm_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;

  v6 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBBF60;
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D85C18;
  *((_QWORD *)v6 + 53) = 0;
  *((_QWORD *)v6 + 54) = 0;
  v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 376) = v7;
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v8;
  result = *(__n128 *)(a3 + 60);
  *(__n128 *)(v6 + 388) = result;
  *a1 = v10;
  a1[1] = v6;
  return result;
}

void sub_1912FD768(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::batchnorm_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::batchnorm_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBF60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::batchnorm_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::crop_kernel_cpu,std::allocator<Espresso::crop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::crop_kernel_cpu,std::allocator<Espresso::crop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;

  v6 = (__n128 *)operator new(0x140uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB8338;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D67CF8;
  result = *a3;
  v6[19] = *a3;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FD8AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::crop_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::crop_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::crop_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::general_padding_kernel_cpu,std::allocator<Espresso::general_padding_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::general_padding_kernel_cpu,std::allocator<Espresso::general_padding_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x180uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD7E0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D93538;
  v8 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v6 + 22) = v8;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)(a3 + 60);
  result = *(__n128 *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((__n128 *)v6 + 20) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FD9C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::general_padding_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD7E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::general_padding_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD7E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::general_padding_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::deconvolution_kernel_cpu,std::allocator<Espresso::deconvolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = operator new(0x288uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD1F8;
  result = Espresso::deconvolution_kernel_cpu::deconvolution_kernel_cpu((uint64_t)(v6 + 3), a2, v7, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FDA84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::deconvolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD1F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::deconvolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD1F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBE730;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v9;
  *((_QWORD *)v6 + 3) = &off_1E2D9F390;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FDB88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::generic_context_transfer_kernel_impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::generic_context_transfer_kernel_impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBE500;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 47) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 45) = 0;
  v6[384] = 1;
  *((_QWORD *)v6 + 49) = 0;
  v6[400] = 1;
  result = *a3;
  *((_QWORD *)v6 + 3) = &off_1E2D9D8E8;
  *(__n128 *)(v6 + 328) = result;
  *((_QWORD *)v6 + 43) = a3[1].n128_u64[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FDC78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::generic_load_constant_kernel_impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::generic_load_constant_kernel_impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::activation_kernel_cpu,std::allocator<Espresso::activation_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::activation_kernel_cpu,std::allocator<Espresso::activation_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = operator new(0x1C0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC708;
  result = Espresso::activation_kernel_cpu::activation_kernel_cpu((uint64_t)(v6 + 3), a2, v7, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FDD5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::activation_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::activation_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::upsample_kernel_cpu,std::allocator<Espresso::upsample_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::upsample_kernel_cpu,std::allocator<Espresso::upsample_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 result;

  v6 = (__n128 *)operator new(0x178uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DBBEB8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D859E0;
  v8 = a3[3];
  v6[21] = a3[2];
  v6[22] = v8;
  v6[23].n128_u64[0] = a3[4].n128_u64[0];
  result = a3[1];
  v6[19] = *a3;
  v6[20] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FDEA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::upsample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::upsample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::upsample_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __n128 result;

  v8 = (char *)operator new(0x158uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB7298;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_DWORD *)v8 + 83) = 0;
  *((_QWORD *)v8 + 3) = &off_1E2D618A0;
  *((_DWORD *)v8 + 84) = a3;
  *((_OWORD *)v8 + 19) = *a2;
  *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FDFE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::lrn_kernel_cpu,std::allocator<Espresso::lrn_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::lrn_kernel_cpu,std::allocator<Espresso::lrn_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x150uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB8108;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D670F0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 12);
  *(__n128 *)(v6 + 316) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FE0EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::lrn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::lrn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::lrn_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::pool_kernel_cpu,std::allocator<Espresso::pool_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v6 = (char *)operator new(0x1C8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB8450;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D68038;
  v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v8;
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v9;
  result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FE1E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pool_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pool_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::convolution_kernel_cpu,std::allocator<Espresso::convolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBCA50;
  result = Espresso::convolution_kernel_cpu::convolution_kernel_cpu((uint64_t)(v6 + 3), a2, v7, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FE298(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::convolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCA50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::convolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCA50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::blob_cpu::blob_cpu(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)result = off_1E2D8F108;
  *(_DWORD *)(result + 28) = -1;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 0;
  v2 = a2[1];
  *(_QWORD *)(result + 72) = *a2;
  *(_QWORD *)(result + 80) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 1065353216;
  *(_QWORD *)(result + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(result + 124) = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 128) = 0uLL;
  *(_OWORD *)(result + 144) = 0uLL;
  *(_QWORD *)result = &off_1E2DA6B80;
  *(_QWORD *)(result + 248) = 0;
  *(_OWORD *)(result + 160) = 0uLL;
  *(_OWORD *)(result + 176) = 0uLL;
  *(_OWORD *)(result + 192) = 0uLL;
  *(_OWORD *)(result + 208) = 0uLL;
  *(_OWORD *)(result + 224) = 0uLL;
  *(_DWORD *)(result + 240) = 0;
  return result;
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB71F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB71F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::DummyBNNSEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x130uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E2DB81E8;
  v7 = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 70) = a2;
  *((_OWORD *)v6 + 18) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D67598;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void Espresso::DummyBNNSEngine::engine::~engine(Espresso::DummyBNNSEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB81E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB81E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::IREngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x130uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E2DC1328;
  v7 = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 70) = a2;
  *((_OWORD *)v6 + 18) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2DA4B48;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void Espresso::IREngine::engine::~engine(Espresso::IREngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::IREngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::IREngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::IREngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::DummyMPSBuffersEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x130uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E2DBC430;
  v7 = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 70) = a2;
  *((_OWORD *)v6 + 18) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D88188;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void Espresso::DummyMPSBuffersEngine::engine::~engine(Espresso::DummyMPSBuffersEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __n128 result;

  v8 = operator new(0x1C0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC3C0;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[38] = 0;
  *((_DWORD *)v8 + 78) = 0;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  v8[54] = 0;
  v8[3] = &off_1E2D87ED8;
  *((_DWORD *)v8 + 110) = a3;
  Espresso::dev_op_params_t::operator=((uint64_t)(v8 + 38), a2);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FE7D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::dev_op_params_t::shape>::__assign_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::string>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel((void **)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC698;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D890E8;
  *((_DWORD *)v8 + 78) = a3;
  *((_DWORD *)v8 + 76) = *(_DWORD *)a2;
  *((_WORD *)v8 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FEA08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = operator new(0x158uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC318;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D87AD0;
  *((_DWORD *)v8 + 85) = a3;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_BYTE *)v8 + 336) = *(_BYTE *)(a2 + 32);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FEAF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::fill_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x148uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC510;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D88670;
  *((_DWORD *)v8 + 80) = a3;
  v8[38] = *a2;
  *(_QWORD *)((char *)v8 + 310) = *(_QWORD *)((char *)a2 + 6);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FEBE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x148uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC350;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D87C28;
  *((_DWORD *)v8 + 81) = a3;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FECD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::tile_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::instancenorm_1d_kernel_cpu,std::allocator<Espresso::instancenorm_1d_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::instancenorm_1d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::instancenorm_1d_kernel_cpu,std::allocator<Espresso::instancenorm_1d_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::instancenorm_1d_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x168uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD850;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D943D0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  result = *a3;
  *((__n128 *)v6 + 19) = *a3;
  *((_DWORD *)v6 + 80) = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FEDE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::instancenorm_1d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::instancenorm_1d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::instancenorm_1d_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __n128 result;

  v8 = operator new(0x340uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC4D8;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D88518;
  *((_DWORD *)v8 + 206) = a3;
  memcpy(v8 + 38, a2, 0x208uLL);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FEEDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;

  v8 = operator new(0x198uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC628;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D88D70;
  *((_DWORD *)v8 + 101) = a3;
  v10 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 24) = v10;
  *((_DWORD *)v8 + 100) = *(_DWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 22) = v12;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FEFD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::softmax_nd_kernel_cpu,std::allocator<Espresso::softmax_nd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::softmax_nd_kernel_cpu,std::allocator<Espresso::softmax_nd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x150uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC7E8;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D8C3A8;
  v6[40] = 0;
  v6[41] = 0;
  v6[39] = 0;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FF0E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::softmax_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::softmax_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::softmax_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::range_kernel_cpu,std::allocator<Espresso::range_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::range_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::range_kernel_cpu,std::allocator<Espresso::range_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::range_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9C28;
  v7 = *a3;
  v8 = *((_DWORD *)a3 + 2);
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D73450;
  v6[38] = v7;
  *((_DWORD *)v6 + 78) = v8;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FF1F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::range_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::range_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::range_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::sgd_kernel_cpu,std::allocator<Espresso::sgd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::sgd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::sgd_kernel_cpu,std::allocator<Espresso::sgd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::sgd_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8178;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D67440;
  v6[38] = *(_QWORD *)a3;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a3 + 8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FF300(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::sgd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::sgd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::sgd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::expand_dims_kernel_cpu,std::allocator<Espresso::expand_dims_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::expand_dims_kernel_cpu,std::allocator<Espresso::expand_dims_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  unint64_t v17;

  v6 = (__n128 *)operator new(0x1B8uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DBCAF8;
  v15 = a3[6];
  v16 = a3[7];
  v17 = a3[8].n128_u64[0];
  v11 = a3[2];
  v12 = a3[3];
  v13 = a3[4];
  v14 = a3[5];
  v9 = *a3;
  v10 = a3[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D8D360;
  v6[25] = v15;
  v6[26] = v16;
  v6[27].n128_u64[0] = v17;
  v6[21] = v11;
  v6[22] = v12;
  v6[23] = v13;
  v6[24] = v14;
  result = v10;
  v6[19] = v9;
  v6[20] = v10;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FF454(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::expand_dims_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::expand_dims_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = operator new(0x160uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC468;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D88268;
  *((_DWORD *)v8 + 86) = a3;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  v8[42] = *(_QWORD *)(a2 + 32);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FF534(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reshape_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x138uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC5B8;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D88AC0;
  *((_DWORD *)v8 + 77) = a3;
  *((_WORD *)v8 + 152) = *(_WORD *)a2;
  *((_BYTE *)v8 + 306) = *(_BYTE *)(a2 + 2);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FF620(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  std::string __p;
  __int128 v8;
  __int128 v9;

  v6 = operator new(0x168uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD118;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  Espresso::store_global_kernel_cpu::store_global_kernel_cpu((uint64_t)(v6 + 3), a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1912FF770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::store_global_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::store_global_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::store_global_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  std::string __p;
  __int128 v8;
  __int128 v9;

  v6 = operator new(0x178uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBCB68;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  Espresso::load_global_kernel_cpu::load_global_kernel_cpu((uint64_t)(v6 + 3), a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1912FF8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::load_global_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCB68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::load_global_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCB68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::load_global_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>((uint64_t *)&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x150uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBD818;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a2);
  v4[3] = &off_1E2D94120;
  v4[40] = 0;
  v4[41] = 0;
  v4[39] = 0;
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1912FF9F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::generic_phi_virtual_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::generic_phi_virtual_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::generic_phi_virtual_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::squeeze_kernel_cpu,std::allocator<Espresso::squeeze_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::squeeze_kernel_cpu,std::allocator<Espresso::squeeze_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;

  v6 = (__n128 *)operator new(0x1C0uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DBBC50;
  v15 = a3[6];
  v16 = a3[7];
  v17 = a3[8];
  v11 = a3[2];
  v12 = a3[3];
  v13 = a3[4];
  v14 = a3[5];
  v9 = *a3;
  v10 = a3[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D84278;
  v6[25] = v15;
  v6[26] = v16;
  v6[27] = v17;
  v6[21] = v11;
  v6[22] = v12;
  v6[23] = v13;
  v6[24] = v14;
  result = v10;
  v6[19] = v9;
  v6[20] = v10;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FFB48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::squeeze_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::squeeze_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::transpose_kernel_cpu,std::allocator<Espresso::transpose_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::transpose_kernel_cpu,std::allocator<Espresso::transpose_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;

  v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DBC2E0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D87978;
  result = *a3;
  v6[19] = *a3;
  v6[20].n128_u32[0] = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FFC44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::transpose_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::transpose_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::transpose_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC5F0;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D88C18;
  *((_DWORD *)v8 + 79) = a3;
  v8[38] = *(_QWORD *)a2;
  *((_DWORD *)v8 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FFD34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::l2_normalize_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::matrix_band_part_kernel_cpu,std::allocator<Espresso::matrix_band_part_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::matrix_band_part_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::matrix_band_part_kernel_cpu,std::allocator<Espresso::matrix_band_part_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::matrix_band_part_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;

  v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DBDC40;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D964E0;
  result = *a3;
  v6[19] = *a3;
  v6[20].n128_u32[0] = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1912FFE3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::matrix_band_part_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDC40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::matrix_band_part_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDC40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::matrix_band_part_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::general_padding_kernel_cpu,std::allocator<Espresso::general_padding_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = (char *)operator new(0x160uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBC3F8;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D88030;
  *((_DWORD *)v8 + 87) = a3;
  v10 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v10;
  *(_OWORD *)(v8 + 329) = *(_OWORD *)((char *)a2 + 25);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1912FFF64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC3F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC3F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reduce_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::split_kernel_cpu,std::allocator<Espresso::split_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::split_kernel_cpu,std::allocator<Espresso::split_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 result;

  v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB9C98;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D73700;
  v8 = a3[1];
  v6[19] = *a3;
  v6[20] = v8;
  result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191300074(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::split_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::split_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::split_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = (char *)operator new(0x178uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBC388;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D87D80;
  *((_DWORD *)v8 + 92) = a3;
  v10 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = a2[2];
  *(_OWORD *)(v8 + 349) = *(_OWORD *)((char *)a2 + 45);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_191300170(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = (char *)operator new(0x1A8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBC548;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_QWORD *)v8 + 3) = &off_1E2D887C8;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = a3;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v10;
  *((_DWORD *)v8 + 90) = *(_DWORD *)(a2 + 32);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_191300278(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::activation_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)(a1 + 24));
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::copy_kernel_cpu,std::allocator<Espresso::copy_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::copy_kernel_cpu,std::allocator<Espresso::copy_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8300;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D67BA0;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191300378(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::copy_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::copy_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::copy_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = operator new(0x168uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBC580;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D88968;
  *((_DWORD *)v8 + 89) = a3;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913004A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  __n128 result;

  v8 = (char *)operator new(0x240uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBC660;
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D88EC8;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *((_QWORD *)v8 + 58) = 0;
  *((_QWORD *)v8 + 59) = 0;
  v8[480] = 0;
  *((_DWORD *)v8 + 142) = a3;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 440) = v9;
  *((_DWORD *)v8 + 114) = *(_DWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 376) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 408) = v11;
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v12;
  result.n128_u64[0] = v13;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913005C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __n128 result;

  v8 = (char *)operator new(0x158uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBC4A0;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_DWORD *)v8 + 83) = 0;
  *((_QWORD *)v8 + 3) = &off_1E2D883C0;
  *((_DWORD *)v8 + 84) = a3;
  *((_OWORD *)v8 + 19) = *a2;
  *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913006B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC4A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC4A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::DummyMPSGraphEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x130uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E2DBBC88;
  v7 = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 70) = a2;
  *((_OWORD *)v6 + 18) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D843F8;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void Espresso::DummyMPSGraphEngine::engine::~engine(Espresso::DummyMPSGraphEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::upsample_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::upsample_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::upsample_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::upsample_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 result;

  v6 = (__n128 *)operator new(0x178uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7B20;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D64BC0;
  v8 = a3[3];
  v6[21] = a3[2];
  v6[22] = v8;
  v6[23].n128_u64[0] = a3[4].n128_u64[0];
  result = a3[1];
  v6[19] = *a3;
  v6[20] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191300900(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7B20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::transpose_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::transpose_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;

  v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7BC8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D65020;
  result = *a3;
  v6[19] = *a3;
  v6[20].n128_u32[0] = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191300A0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::topk_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::topk_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::topk_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::topk_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::topk_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::topk_params_t const&,void>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7768;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D633D0;
  v6[38] = *a3;
  *(_QWORD *)((char *)v6 + 311) = *(_QWORD *)((char *)a3 + 7);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191300B1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::topk_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tile_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tile_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tile_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tile_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tile_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tile_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;

  v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7730;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D63278;
  result = *a3;
  v6[19] = *a3;
  v6[20].n128_u32[0] = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191300C28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tile_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<D0>(_QWORD *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tensor_zero_pad_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void *std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tensor_zero_pad_params_t const&,void>(_QWORD *a1, _QWORD *a2, const void *a3)
{
  _QWORD *v6;
  void *result;

  v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7FB8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D66BB0;
  result = memcpy(v6 + 38, a3, 0x109uLL);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_191300D44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::stack_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::stack_nd_params_t const&,void>(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7AE8;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D64A68;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191300E48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7AE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7AE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::squeeze_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::squeeze_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 result;

  v6 = (__n128 *)operator new(0x1C0uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7A40;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D645D0;
  v8 = a3[7];
  v6[25] = a3[6];
  v6[26] = v8;
  v6[27] = a3[8];
  v9 = a3[3];
  v6[21] = a3[2];
  v6[22] = v9;
  v10 = a3[5];
  v6[23] = a3[4];
  v6[24] = v10;
  result = a3[1];
  v6[19] = *a3;
  v6[20] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191300F6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<D0>(_QWORD *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_nd_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void *std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_nd_params_t const&,void>(_QWORD *a1, _QWORD *a2, const void *a3)
{
  _QWORD *v6;
  void *result;

  v6 = operator new(0x338uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7AB0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D64910;
  result = memcpy(v6 + 38, a3, 0x208uLL);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_191301088(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 result;

  v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB77D8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D63680;
  v8 = a3[1];
  v6[19] = *a3;
  v6[20] = v8;
  result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19130119C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB77D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB77D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::space_to_depth_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::space_to_depth_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7F10;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D667A8;
  v6[38] = *(_QWORD *)a3;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a3 + 8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913012A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7C70;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D65470;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913013AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x150uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7A08;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_DWORD *)v6 + 83) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D64478;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 12);
  *(__n128 *)(v6 + 316) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913014C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::slice_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;

  v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB77A0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D63528;
  result = *a3;
  v6[19] = *a3;
  v6[20].n128_u64[0] = a3[1].n128_u64[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913015CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB77A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB77A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::scatter_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::scatter_nd_params_t const&,void>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7C38;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D65318;
  v6[38] = *a3;
  *(_QWORD *)((char *)v6 + 310) = *(_QWORD *)((char *)a3 + 6);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913016DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(_QWORD *a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v6 = operator new(0x388uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7A78;
  Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 3), a2);
  v6[62] = 0;
  v6[63] = 0;
  v6[61] = v6 + 62;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  *((_DWORD *)v6 + 160) = 0;
  *(_OWORD *)(v7 + 624) = 0u;
  *(_OWORD *)(v7 + 640) = 0u;
  *(_OWORD *)(v7 + 656) = 0u;
  *(_OWORD *)(v7 + 672) = 0u;
  *(_OWORD *)(v7 + 688) = 0u;
  *(_OWORD *)(v7 + 704) = 0u;
  *(_OWORD *)(v7 + 720) = 0u;
  *(_OWORD *)(v7 + 736) = 0u;
  *(_OWORD *)(v7 + 752) = 0u;
  *(_OWORD *)(v7 + 768) = 0u;
  *(_OWORD *)(v7 + 784) = 0u;
  *(_OWORD *)(v7 + 800) = 0u;
  *(_OWORD *)(v7 + 816) = 0u;
  *((_DWORD *)v6 + 214) = 1065353216;
  *((_DWORD *)v6 + 224) = 1065353216;
  *((_OWORD *)v6 + 54) = 0u;
  *((_OWORD *)v6 + 55) = 0u;
  v6[3] = &off_1E2D64728;
  *(_OWORD *)(v7 + 442) = *(__int128 *)((char *)a3 + 138);
  v8 = a3[8];
  v9 = a3[6];
  *(_OWORD *)(v7 + 416) = a3[7];
  *(_OWORD *)(v7 + 432) = v8;
  v10 = a3[4];
  *(_OWORD *)(v7 + 384) = a3[5];
  *(_OWORD *)(v7 + 400) = v9;
  v11 = a3[2];
  *(_OWORD *)(v7 + 352) = a3[3];
  *(_OWORD *)(v7 + 368) = v10;
  v13 = *a3;
  result = (__n128)a3[1];
  *(__n128 *)(v7 + 320) = result;
  *(_OWORD *)(v7 + 336) = v11;
  *(_OWORD *)(v7 + 304) = v13;
  *a1 = v7;
  a1[1] = v6;
  return result;
}

void sub_19130185C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7A78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_like_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_like_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x160uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7DF8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D65F00;
  v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  result = *(__n128 *)(a3 + 29);
  *(__n128 *)(v6 + 333) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19130196C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB79D0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D64320;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v9;
  v6[42] = *(_QWORD *)(a3 + 32);
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191301A78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB79D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB79D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reduce_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reduce_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reduce_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reduce_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x160uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7928;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D63F18;
  v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  result = *(__n128 *)(a3 + 25);
  *(__n128 *)(v6 + 329) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191301B88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reduce_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool3d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool3d_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x170uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB78F0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D63DC0;
  v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  result = *(__n128 *)(a3 + 44);
  *(__n128 *)(v6 + 348) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191301CA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB78F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB78F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v6 = (char *)operator new(0x1C8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB76F8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D630E0;
  v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v8;
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v9;
  result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191301DD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB76F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB76F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::one_hot_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::one_hot_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::one_hot_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::one_hot_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;

  v6 = (__n128 *)operator new(0x140uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7998;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D641C8;
  result = *a3;
  v6[19] = *a3;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191301ED4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::lrn_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::lrn_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::lrn_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::lrn_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x150uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB75E0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D62A28;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 12);
  *(__n128 *)(v6 + 316) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191301FE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB75E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB75E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::lrn_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::load_random_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::load_random_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_random_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::load_random_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::load_random_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_random_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x160uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7D50;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D65AF8;
  v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  result = *(__n128 *)(a3 + 30);
  *(__n128 *)(v6 + 334) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913020F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::load_random_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::load_random_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7D50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::load_random_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::l2_norm_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::l2_norm_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7DC0;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D65DA8;
  v6[38] = *(_QWORD *)a3;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a3 + 8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191302200(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::inner_product_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::inner_product_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::inner_product_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::inner_product_uniforms const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v6 = (char *)operator new(0x268uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7EA0;
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D66430;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *((_QWORD *)v6 + 58) = 0;
  *((_QWORD *)v6 + 59) = 0;
  v6[480] = 0;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  v7 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 440) = v7;
  *((_DWORD *)v6 + 114) = *(_DWORD *)(a3 + 128);
  v8 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 376) = v8;
  v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v9;
  result = *(__n128 *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(__n128 *)(v6 + 344) = result;
  *a1 = v11;
  a1[1] = v6;
  return result;
}

void sub_191302344(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_slice_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  __n128 result;

  v6 = (__n128 *)operator new(0x198uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7E68;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D662D8;
  v8 = a3[5];
  v6[23] = a3[4];
  v6[24] = v8;
  v6[25].n128_u32[0] = a3[6].n128_u32[0];
  v9 = a3[1];
  v6[19] = *a3;
  v6[20] = v9;
  result = a3[3];
  v6[21] = a3[2];
  v6[22] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191302460(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_padding_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_padding_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x180uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7F80;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D66A58;
  v8 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v6 + 22) = v8;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)(a3 + 60);
  result = *(__n128 *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((__n128 *)v6 + 20) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191302578(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7ED8;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D66650;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a3;
  *((_WORD *)v6 + 154) = *(_WORD *)(a3 + 4);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191302684(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::gather_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::gather_nd_params_t const&,void>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7B90;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D64EC8;
  v6[38] = *a3;
  *(_QWORD *)((char *)v6 + 310) = *(_QWORD *)((char *)a3 + 6);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191302794(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::flatten_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::flatten_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::flatten_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::flatten_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::flatten_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::flatten_params const&,void>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7960;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D64070;
  v6[38] = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191302898(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::fill_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::fill_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::fill_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::fill_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::fill_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::fill_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB76C0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D62F88;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v9;
  *((_BYTE *)v6 + 336) = *(_BYTE *)(a3 + 32);
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913029A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB76C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB76C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::fill_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 result;

  v6 = (__n128 *)operator new(0x1B8uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7D18;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D659A0;
  v8 = a3[7];
  v6[25] = a3[6];
  v6[26] = v8;
  v6[27].n128_u64[0] = a3[8].n128_u64[0];
  v9 = a3[3];
  v6[21] = a3[2];
  v6[22] = v9;
  v10 = a3[5];
  v6[23] = a3[4];
  v6[24] = v10;
  result = a3[1];
  v6[19] = *a3;
  v6[20] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191302AC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7D18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::elementwise_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::elementwise_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 result;

  v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7CE0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D65848;
  v8 = a3[1];
  v6[19] = *a3;
  v6[20] = v8;
  result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191302BDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(_QWORD *a1@<X1>, const std::string *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::einsum_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::einsum_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::einsum_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

std::string *std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::einsum_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::einsum_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::einsum_params_t const&,void>(_QWORD *a1, _QWORD *a2, const std::string *a3)
{
  char *v6;
  std::string *result;

  v6 = (char *)operator new(0x190uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB78B8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D63C68;
  result = std::string::operator=((std::string *)(v6 + 304), a3);
  if (v6 + 304 != (char *)a3)
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 328, a3[1].__r_.__value_.__l.__data_, a3[1].__r_.__value_.__l.__size_, (uint64_t)(a3[1].__r_.__value_.__l.__size_ - a3[1].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 352, a3[2].__r_.__value_.__l.__data_, a3[2].__r_.__value_.__l.__size_, (uint64_t)(a3[2].__r_.__value_.__l.__size_ - a3[2].__r_.__value_.__r.__words[0]) >> 2);
    result = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 376, a3[3].__r_.__value_.__l.__data_, a3[3].__r_.__value_.__l.__size_, (uint64_t)(a3[3].__r_.__value_.__l.__size_ - a3[3].__r_.__value_.__r.__words[0]) >> 2);
  }
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_191302D4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB78B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB78B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::einsum_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::dev_op_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dev_op_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::dev_op_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dev_op_params_t const&,void>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x1B8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7880;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[38] = 0;
  *((_DWORD *)v6 + 78) = 0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  v6[54] = 0;
  v6[3] = &off_1E2D63B10;
  result = Espresso::dev_op_params_t::operator=((uint64_t)(v6 + 38), a3);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_191302E94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  v6 = (char *)operator new(0x278uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7E30;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D66058;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  v7 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 456) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 472) = v7;
  *(_QWORD *)(v8 + 157) = *(_QWORD *)(a3 + 157);
  v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v9;
  v10 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 440) = v10;
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v11;
  result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_191303010(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_and_resize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_and_resize_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x180uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7F48;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D66900;
  v8 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v6 + 22) = v8;
  *(_OWORD *)(v6 + 365) = *(_OWORD *)(a3 + 61);
  result = *(__n128 *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((__n128 *)v6 + 20) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191303128(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;

  v6 = (__n128 *)operator new(0x140uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB7688;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D62E30;
  result = *a3;
  v6[19] = *a3;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19130322C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::copy_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::copy_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::copy_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::copy_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7650;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D62CD8;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191303330(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::conv3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::conv3d_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::conv3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::conv3d_params_t const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;

  v6 = (char *)operator new(0x1E0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7848;
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D63930;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v8;
  result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *a1 = v10;
  a1[1] = v6;
  return result;
}

void sub_19130345C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::convolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::convolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  v6 = (char *)operator new(0x278uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7CA8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 62) = 0;
  *((_QWORD *)v6 + 63) = 0;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_QWORD *)v6 + 72) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D655C8;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  v7 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 456) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 472) = v7;
  *(_QWORD *)(v8 + 157) = *(_QWORD *)(a3 + 157);
  v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v9;
  v10 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 440) = v10;
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v11;
  result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_1913035C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::concat_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::concat_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x170uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7810;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D637D8;
  v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  result = *(__n128 *)(a3 + 45);
  *(__n128 *)(v6 + 349) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913036E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::cast_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::cast_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cast_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::cast_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::cast_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cast_params_t const&,void>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7618;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D62B80;
  v6[38] = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913037E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7618;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::cast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;

  v6 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7B58;
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D64D18;
  *((_QWORD *)v6 + 53) = 0;
  *((_QWORD *)v6 + 54) = 0;
  v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 376) = v7;
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v8;
  result = *(__n128 *)(a3 + 60);
  *(__n128 *)(v6 + 388) = result;
  *a1 = v10;
  a1[1] = v6;
  return result;
}

void sub_191303908(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7B58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batch_matmul_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batch_matmul_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7D88;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D65C50;
  *((_WORD *)v6 + 152) = *(_WORD *)a3;
  *((_BYTE *)v6 + 306) = *(_BYTE *)(a3 + 2);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191303A14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::activation_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::activation_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v6 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB7C00;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D65178;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v9;
  *((_DWORD *)v6 + 90) = *(_DWORD *)(a3 + 32);
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_191303B3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBC88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::analysis_pass_unpack_layers::~analysis_pass_unpack_layers(Espresso::analysis_pass_unpack_layers *this)
{
  *(_QWORD *)this = &off_1E2D950B0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2D950B0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::analysis_result::deserialize()
{
  return 0;
}

void Espresso::analysis_result::serialize(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

_QWORD *std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *this)
{
  std::__shared_weak_count *v4;

  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(a1, v3);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void Espresso::unpack_options::~unpack_options(void **this)
{
  void **v2;

  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_unpack_layers>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_unpack_layers>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_pass_unpack_layers>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL Espresso::run_pass_on_network<Espresso::pass_compress_segments>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBCC10;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D8EF00;
  v3 = (_QWORD *)((char *)v2 + 24);
  v15 = (_QWORD *)((char *)v2 + 24);
  v16 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v18 = (unint64_t)"N8Espresso22pass_compress_segmentsE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v14 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v14);
  if (v14)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v18 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso26analysis_compress_segmentsE");
  }
  v6 = buf[0];
  v7 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6 != 0;
}

void sub_1913041AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::pass_compress_segments::~pass_compress_segments(Espresso::pass_compress_segments *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_compress_segments::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_compress_segments::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4;
  Espresso::net *v5;
  uint64_t *v6;
  uint64_t *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *shared_owners;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  Espresso::net *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  std::vector<std::string> *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t *v110;
  _QWORD *v111;
  uint64_t v112[2];
  Espresso::net *v113;
  std::__shared_weak_count *v114;
  Espresso::net *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  Espresso::net *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  const void *v123;
  std::__shared_weak_count *v124;
  Espresso::net *v125;
  std::__shared_weak_count *v126;
  unint64_t v127;
  unint64_t *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t *v131;
  unint64_t v132;

  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v125, *(_QWORD *)a1, *((std::__shared_weak_count **)a1 + 1));
  v4 = (***(uint64_t (****)(_QWORD))(*((_QWORD *)v125 + 2) + 8))(*(_QWORD *)(*((_QWORD *)v125 + 2) + 8));
  v5 = v125;
  v6 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)v125 + 66, v4);
  if (v6)
  {
    v7 = v6;
    v8 = (const void *)v6[3];
    v9 = (std::__shared_weak_count *)v7[4];
    v123 = v8;
    v124 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v122 = v9;
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      goto LABEL_20;
    }
  }
  else
  {
    v123 = 0;
    v124 = 0;
  }
  v121 = 0;
  v122 = 0;
  v14 = *((_QWORD *)v5 + 2);
  v119 = v5;
  v120 = v126;
  if (v126)
  {
    v15 = (unint64_t *)&v126->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*(void (**)(uint64_t, Espresso::net **))(*(_QWORD *)v14 + 88))(v14, &v119);
  v17 = v120;
  if (v120)
  {
    v18 = (unint64_t *)&v120->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_20:
  v20 = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)v125 + 66, v4);
  v21 = v20;
  if (v20)
  {
    v20 = (std::__shared_weak_count *)v20[1].__vftable;
    shared_owners = (std::__shared_weak_count *)v21[1].__shared_owners_;
    v117 = v21[1].__vftable;
    v118 = shared_owners;
    if (shared_owners)
    {
      v23 = (unint64_t *)&shared_owners->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (v20)
    {
      v21 = 0;
      if (v20 && shared_owners)
      {
        v25 = (unint64_t *)&shared_owners->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v21 = shared_owners;
      }
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v117 = 0;
    v118 = 0;
  }
  v27 = v122;
  v121 = v20;
  v122 = v21;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    v20 = v121;
  }
  if (!v20)
    Espresso::throw_exception_selector<Espresso::generic_error>("Cannot run pass. No compiler found.");
  v115 = v125;
  v116 = v126;
  if (v126)
  {
    v30 = (unint64_t *)&v126->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  ((void (*)(std::__shared_weak_count *, Espresso::net **))v20->__vftable[2].~__shared_weak_count_0)(v20, &v115);
  v32 = v116;
  if (v116)
  {
    v33 = (unint64_t *)&v116->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v125;
  v113 = v125;
  v114 = v126;
  if (v126)
  {
    v36 = (unint64_t *)&v126->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v111 = &v121->__vftable;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v39 = (char *)v35 + 32;
  v38 = *((_QWORD *)v35 + 4);
  if (*((_QWORD *)v39 + 1) == v38)
  {
    v61 = 0;
    v77 = 0;
  }
  else
  {
    v40 = 0;
    do
    {
      v41 = *(_QWORD *)(v38 + 16 * v40);
      v42 = *(uint64_t **)(v41 + 64);
      v43 = *(std::__shared_weak_count **)(v41 + 72);
      v128 = (unint64_t *)v42;
      v129 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      if (v42
      {
        if (v43)
        {
          v46 = (unint64_t *)&v43->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          do
            v48 = __ldaxr(v46);
          while (__stlxr(v48 - 1, v46));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v49 = v131;
        if ((unint64_t)v131 >= v132)
        {
          v51 = v130;
          v52 = v131 - v130;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v54 = v132 - (_QWORD)v130;
          if ((uint64_t)(v132 - (_QWORD)v130) >> 2 > v53)
            v53 = v54 >> 2;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
            v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v55);
          else
            v56 = 0;
          v57 = (unint64_t *)(v55 + 8 * v52);
          *v57 = v40;
          v50 = v57 + 1;
          while (v49 != v51)
          {
            v58 = *--v49;
            *--v57 = v58;
          }
          v130 = v57;
          v132 = v55 + 8 * v56;
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v131 = v40;
          v50 = v49 + 1;
        }
        v131 = v50;
        v43 = v129;
      }
      if (v43)
      {
        v59 = (unint64_t *)&v43->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      ++v40;
      v38 = *((_QWORD *)v113 + 4);
    }
    while (v40 < (*((_QWORD *)v113 + 5) - v38) >> 4);
    v61 = v130;
    v109 = v131;
    if (v130 == v131)
    {
      v77 = (uint64_t)v130;
    }
    else
    {
      v108 = a2;
      do
      {
        v62 = *v61;
        v127 = *v61;
        v63 = v111[4];
        if (v111[5] != v63)
        {
          v110 = v61;
          v64 = 0;
          do
          {
            v128 = &v127;
            v65 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v113 + 56, &v127, (uint64_t)&std::piecewise_construct, (uint64_t **)&v128);
            v128 = &v127;
            v66 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v113 + 96, &v127, (uint64_t)&std::piecewise_construct, (uint64_t **)&v128);
            v67 = v65[4] - v65[3];
            if (v67)
            {
              v68 = v66;
              v69 = 0;
              v70 = v67 / 24;
              v71 = (_QWORD *)(v63 + 120 * (int)v64 + 16);
              if (v70 <= 1)
                v72 = 1;
              else
                v72 = v70;
              do
              {
                v73 = v65[3];
                v74 = v68[3] + v69;
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v71, v74))
                {
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(v71, v74);
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v71, v73 + v69, v73 + v69);
                }
                v69 += 24;
                --v72;
              }
              while (v72);
            }
            ++v64;
            v63 = v111[4];
          }
          while (v64 < 0xEEEEEEEEEEEEEEEFLL * ((v111[5] - v63) >> 3));
          v62 = v127;
          v61 = v110;
        }
        if (v62 && v62 != ((uint64_t)(*((_QWORD *)v113 + 5) - *((_QWORD *)v113 + 4)) >> 4) - 1)
        {
          v128 = &v127;
          v75 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v113 + 56, &v127, (uint64_t)&std::piecewise_construct, (uint64_t **)&v128);
          v128 = (unint64_t *)(v127 + 1);
          v76 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v113 + 56, v127 + 1, &v128);
          std::vector<std::string>::__vdeallocate(v76 + 1);
          *(_OWORD *)&v76[1].__begin_ = *(_OWORD *)(v75 + 3);
          v76[1].__end_cap_.__value_ = (std::string *)v75[5];
          v75[3] = 0;
          v75[4] = 0;
          v75[5] = 0;
        }
        ++v61;
      }
      while (v61 != v109);
      v61 = v130;
      v77 = (uint64_t)v131;
      a2 = v108;
    }
  }
  while ((unint64_t *)v77 != v61)
  {
    v78 = *(_DWORD *)(v77 - 8);
    v77 -= 8;
    Espresso::net::remove_layer(v113, v78);
  }
  v79 = v111[4];
  v80 = v111[5];
  v81 = v80 - v79;
  if (v80 != v79)
  {
    v82 = 0;
    v83 = v81 / 120;
    v84 = v131;
    if (v83 <= 1)
      v83 = 1;
    do
    {
      v85 = (unint64_t *)(v79 + 120 * (int)v82);
      v86 = *v85;
      if (v61 == v84)
      {
        v87 = 0;
      }
      else
      {
        v87 = 0;
        v88 = v61;
        do
        {
          if (*v88 >= v86)
            break;
          ++v87;
          ++v88;
        }
        while (v88 != v84);
      }
      *v85 = v86 - v87;
      *(_QWORD *)(v79 + 120 * (int)v82++ + 8) -= v87;
    }
    while (v82 != v83);
  }
  if (v61)
  {
    v131 = v61;
    operator delete(v61);
  }
  if (v114)
  {
    v89 = &v114->__shared_owners_;
    do
      v90 = __ldaxr((unint64_t *)v89);
    while (__stlxr(v90 - 1, (unint64_t *)v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v91 = v126;
  v112[0] = (uint64_t)v125;
  v112[1] = (uint64_t)v126;
  if (v126)
  {
    v92 = (unint64_t *)&v126->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v130 = 0;
  v131 = 0;
  v132 = 0;
  Espresso::compress_segments_to_dev_ops(v112, (uint64_t *)&v130);
  v128 = (unint64_t *)&v130;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
  if (v91)
  {
    v94 = (unint64_t *)&v91->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
  v96 = v118;
  if (v118)
  {
    v97 = (unint64_t *)&v118->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v122;
  if (v122)
  {
    v100 = (unint64_t *)&v122->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v124;
  if (v124)
  {
    v103 = (unint64_t *)&v124->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v126;
  if (v126)
  {
    v106 = (unint64_t *)&v126->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_191304AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_20;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3)
        goto LABEL_21;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_21:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, (void **)v3);
  }
}

void Espresso::compress_segments_to_dev_ops(uint64_t *a1, uint64_t *a2)
{
  uint64_t (***v3)(_QWORD);
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  std::vector<std::string>::pointer begin;
  int shared_owners;
  uint64_t *i;
  uint64_t **v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  __int128 v45;
  std::vector<std::string>::pointer end;
  __int128 v47;
  std::string *v48;
  uint64_t *j;
  uint64_t **v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  __int128 v67;
  std::vector<std::string>::pointer v68;
  __int128 v69;
  std::string *v70;
  uint64_t v71;
  const void *v72;
  std::string **v73;
  std::string **v74;
  int *v75;
  std::__shared_weak_count *size;
  unint64_t *v77;
  unint64_t v78;
  std::vector<std::string>::pointer v79;
  std::vector<std::string>::pointer v80;
  std::string *k;
  uint64_t v82;
  char *v83;
  char *v84;
  _QWORD *v85;
  std::string::pointer data;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  std::string::size_type v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  __int128 v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  char *v104;
  __int128 v105;
  int64x2_t v106;
  std::string *v107;
  std::vector<std::string>::pointer m;
  std::vector<std::string>::pointer v109;
  uint64_t v110;
  char *v111;
  char *v112;
  _QWORD *v113;
  std::string::pointer v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  std::string::size_type v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  __int128 v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  char *v132;
  __int128 v133;
  int64x2_t v134;
  std::string *v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  std::vector<std::string> *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  std::vector<std::string> *v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  std::string *v160;
  std::string *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t **v165;
  char *v166;
  char *v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  _QWORD *v171;
  std::string *v172;
  std::string *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t **v177;
  char *v178;
  char *v179;
  __int128 v180;
  __int128 v181;
  std::string::size_type *v182;
  char *v183;
  std::string::size_type v184;
  std::string::size_type v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  void *v189;
  _QWORD *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count *v201;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int8 *v214;
  int64x2_t v215;
  uint64_t v216;
  std::string v217;
  std::vector<std::string> v218[2];
  std::vector<std::string> v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  __int128 v222;
  __int128 __p;
  __int128 v224;
  __int128 v225;
  std::string v226[2];
  __int128 v227;
  uint64_t v228;
  int *v229;
  std::__shared_weak_count *v230;
  int64x2_t **v231;
  int64x2_t *v232;
  std::vector<std::string> v233;
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a1 + 16) + 8);
  v4 = (**v3)(v3);
  v5 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(*a1 + 528), v4);
  if (!v5)
    goto LABEL_192;
  v6 = v5;
  v7 = (const void *)v5[3];
  v8 = (std::__shared_weak_count *)v6[4];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v201 = v8;
  if (!v7
  {
LABEL_192:
    Espresso::throw_exception_selector<Espresso::generic_error>("Error casting net_compiler to segment based compiler");
  }
  if (v201)
  {
    v11 = (unint64_t *)&v201->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = v203[4];
  if (v203[5] != v13)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (uint64_t *)(v13 + 120 * (int)v15);
      v212 = v13;
      v213 = *v16;
      v211 = v16[1];
      v17 = *(_QWORD *)(*a1 + 32);
      v18 = *(_QWORD *)(*a1 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v19->__shared_owners_ = 0;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF0D0;
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1A38;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v19[2].__shared_owners_ = 0u;
      v19[3].std::__shared_count = 0u;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v19[4].__shared_owners_ = 0u;
      v19[5].std::__shared_count = 0u;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v19[6].__shared_owners_ = 0u;
      *(_OWORD *)((char *)&v19[6].__shared_weak_owners_ + 1) = 0u;
      *(_OWORD *)&v19[8].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v19[9].__shared_owners_ = 0u;
      v19[10].__vftable = 0;
      v229 = (int *)&v19[1];
      v230 = v19;
      *(_QWORD *)&v222 = 0;
      DWORD2(v222) = 0;
      __p = 0u;
      v224 = 0u;
      v225 = 0u;
      memset(v226, 0, sizeof(v226));
      v20 = *a2;
      v21 = (a2[1] - *a2) >> 3;
      v227 = 0u;
      v228 = 0;
      if (v15 < 0xAAAAAAAAAAAAAAABLL * v21)
        std::string::operator=(v226, (const std::string *)(v20 + 24 * v15));
      MEMORY[0x19401C808](&v19[2].__shared_weak_owners_, "dev_op");
      Espresso::abstract_engine_factory::shared(&v220);
      v209 = (void **)(v213 - v14);
      v204 = 16 * (v213 - v14);
      v19[1].__shared_owners_ = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 32) + v204) + 8);
      std::to_string(&v217, v15);
      v208 = v17;
      v22 = std::string::insert(&v217, 0, "dev_op__");
      v23 = v22->__r_.__value_.__r.__words[0];
      v233.__begin_ = (std::vector<std::string>::pointer)v22->__r_.__value_.__l.__size_;
      *(std::vector<std::string>::pointer *)((char *)&v233.__begin_ + 7) = *(std::vector<std::string>::pointer *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
      v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v19[2].__shared_owners_) < 0)
        operator delete((void *)v19[1].__shared_weak_owners_);
      begin = v233.__begin_;
      v19[1].__shared_weak_owners_ = v23;
      v19[2].__vftable = (std::__shared_weak_count_vtbl *)begin;
      *(std::__shared_weak_count_vtbl **)((char *)&v19[2].__vftable + 7) = *(std::__shared_weak_count_vtbl **)((char *)&v233.__begin_ + 7);
      HIBYTE(v19[2].__shared_owners_) = v24;
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v217.__r_.__value_.__l.__data_);
      DWORD1(v222) = v15;
      v205 = v14;
      v207 = v18;
      if (*(_BYTE *)(*(_QWORD *)(*a1 + 16) + 127))
        shared_owners = v19[1].__shared_owners_;
      else
        shared_owners = 10007;
      v206 = v15;
      LODWORD(v222) = shared_owners;
      memset(&v233, 0, sizeof(v233));
      v210 = v15;
      for (i = *(uint64_t **)(v212 + 120 * (int)v15 + 32); i; i = (uint64_t *)*i)
      {
        v28 = (uint64_t **)(*a1 + 184);
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
        v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, i + 2, (__int128 **)&v217);
        v31 = *((_DWORD *)v29 + 14);
        v30 = *((_DWORD *)v29 + 15);
        v32 = *((_DWORD *)v29 + 16);
        v33 = *((_DWORD *)v29 + 17);
        v35 = *((_DWORD *)v29 + 18);
        v34 = *((_DWORD *)v29 + 19);
        v36 = (_DWORD *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) >= (unint64_t)v224)
        {
          v38 = (_DWORD *)__p;
          v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
          v40 = v39 + 1;
          if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v224 - __p) >> 3) > v40)
            v40 = 0x5555555555555556 * ((uint64_t)(v224 - __p) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - __p) >> 3) >= 0x555555555555555)
            v41 = 0xAAAAAAAAAAAAAAALL;
          else
            v41 = v40;
          if (v41)
          {
            v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v41);
            v36 = (_DWORD *)*((_QWORD *)&__p + 1);
            v38 = (_DWORD *)__p;
          }
          else
          {
            v42 = 0;
          }
          v43 = (_DWORD *)(v41 + 24 * v39);
          *v43 = v35;
          v43[1] = v33;
          v43[2] = v32;
          v43[3] = v30;
          v43[4] = v31;
          v43[5] = v34;
          v44 = v43;
          if (v36 != v38)
          {
            do
            {
              v45 = *(_OWORD *)(v36 - 6);
              *((_QWORD *)v44 - 1) = *((_QWORD *)v36 - 1);
              *(_OWORD *)(v44 - 6) = v45;
              v44 -= 6;
              v36 -= 6;
            }
            while (v36 != v38);
            v38 = (_DWORD *)__p;
          }
          v37 = v43 + 6;
          *(_QWORD *)&__p = v44;
          *((_QWORD *)&__p + 1) = v43 + 6;
          *(_QWORD *)&v224 = v41 + 24 * v42;
          if (v38)
            operator delete(v38);
        }
        else
        {
          **((_DWORD **)&__p + 1) = v35;
          v36[1] = v33;
          v36[2] = v32;
          v36[3] = v30;
          v37 = v36 + 6;
          v36[4] = v31;
          v36[5] = v34;
        }
        *((_QWORD *)&__p + 1) = v37;
        end = v233.__end_;
        if (v233.__end_ >= v233.__end_cap_.__value_)
        {
          v48 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v233, (uint64_t)(i + 2));
        }
        else
        {
          if (*((char *)i + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v233.__end_, (const std::string::value_type *)i[2], i[3]);
          }
          else
          {
            v47 = *((_OWORD *)i + 1);
            v233.__end_->__r_.__value_.__r.__words[2] = i[4];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v47;
          }
          v48 = end + 1;
        }
        v233.__end_ = v48;
      }
      memset(&v219, 0, sizeof(v219));
      for (j = *(uint64_t **)(v212 + 120 * v210 + 72); j; j = (uint64_t *)*j)
      {
        v50 = (uint64_t **)(*a1 + 184);
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 2);
        v51 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50, j + 2, (__int128 **)&v217);
        v52 = *((_DWORD *)v51 + 14);
        v53 = *((_DWORD *)v51 + 15);
        v54 = *((_DWORD *)v51 + 16);
        v55 = *((_DWORD *)v51 + 17);
        v57 = *((_DWORD *)v51 + 18);
        v56 = *((_DWORD *)v51 + 19);
        v58 = (_DWORD *)v225;
        if ((unint64_t)v225 >= *((_QWORD *)&v225 + 1))
        {
          v60 = (_DWORD *)*((_QWORD *)&v224 + 1);
          v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v225 - *((_QWORD *)&v224 + 1)) >> 3);
          v62 = v61 + 1;
          if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v225 + 1) - *((_QWORD *)&v224 + 1)) >> 3) > v62)
            v62 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v225 + 1) - *((_QWORD *)&v224 + 1)) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v225 + 1) - *((_QWORD *)&v224 + 1)) >> 3) >= 0x555555555555555)
            v63 = 0xAAAAAAAAAAAAAAALL;
          else
            v63 = v62;
          if (v63)
          {
            v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v63);
            v60 = (_DWORD *)*((_QWORD *)&v224 + 1);
            v58 = (_DWORD *)v225;
          }
          else
          {
            v64 = 0;
          }
          v65 = (_DWORD *)(v63 + 24 * v61);
          *v65 = v57;
          v65[1] = v55;
          v65[2] = v54;
          v65[3] = v53;
          v65[4] = v52;
          v65[5] = v56;
          v66 = v65;
          if (v58 != v60)
          {
            do
            {
              v67 = *(_OWORD *)(v58 - 6);
              *((_QWORD *)v66 - 1) = *((_QWORD *)v58 - 1);
              *(_OWORD *)(v66 - 6) = v67;
              v66 -= 6;
              v58 -= 6;
            }
            while (v58 != v60);
            v60 = (_DWORD *)*((_QWORD *)&v224 + 1);
          }
          v59 = v65 + 6;
          *((_QWORD *)&v224 + 1) = v66;
          *(_QWORD *)&v225 = v65 + 6;
          *((_QWORD *)&v225 + 1) = v63 + 24 * v64;
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_DWORD *)v225 = v57;
          v58[1] = v55;
          v58[2] = v54;
          v58[3] = v53;
          v59 = v58 + 6;
          v58[4] = v52;
          v58[5] = v56;
        }
        *(_QWORD *)&v225 = v59;
        v68 = v219.__end_;
        if (v219.__end_ >= v219.__end_cap_.__value_)
        {
          v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v219, (uint64_t)(j + 2));
        }
        else
        {
          if (*((char *)j + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v219.__end_, (const std::string::value_type *)j[2], j[3]);
          }
          else
          {
            v69 = *((_OWORD *)j + 1);
            v219.__end_->__r_.__value_.__r.__words[2] = j[4];
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
          }
          v70 = v68 + 1;
        }
        v219.__end_ = v70;
      }
      v71 = v211 - v213;
      if (v211 - v213 == 1)
      {
        v72 = *(const void **)(*(_QWORD *)(*(_QWORD *)(*a1 + 32) + v204) + 64);
        if (v72)
        {
          if (v73)
          {
            v74 = v73;
            if (&v226[1] != (std::string *)(v73 + 58))
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v226[1], v73[58], v73[59], 0xAAAAAAAAAAAAAAABLL * (((char *)v73[59] - (char *)v73[58]) >> 3));
            if (&v227 != (__int128 *)(v74 + 61))
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v227, v74[61], v74[62], 0xAAAAAAAAAAAAAAABLL * (((char *)v74[62] - (char *)v74[61]) >> 3));
          }
        }
      }
      v75 = v229;
      Espresso::abstract_engine_factory::make_kernel_priv(v220, *a1 + 16, (uint64_t)(v229 + 10), (uint64_t)&v222, v229 + 2);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v75 + 16), (__int128 *)&v217);
      size = (std::__shared_weak_count *)v217.__r_.__value_.__l.__size_;
      if (v217.__r_.__value_.__l.__size_)
      {
        v77 = (unint64_t *)(v217.__r_.__value_.__l.__size_ + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v80 = v233.__end_;
      v79 = v233.__begin_;
      for (k = (std::string *)v229; v79 != v80; ++v79)
      {
        v82 = *a1 + 136;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
        v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v82, (unsigned __int8 *)v79, (__int128 **)&v217);
        v84 = v83;
        v85 = (_QWORD *)k[3].__r_.__value_.__r.__words[2];
        data = k[4].__r_.__value_.__l.__data_;
        if (v85 >= (_QWORD *)data)
        {
          v91 = k[3].__r_.__value_.__l.__size_;
          v92 = (uint64_t)((uint64_t)v85 - v91) >> 4;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v94 = (uint64_t)&data[-v91];
          if (v94 >> 3 > v93)
            v93 = v94 >> 3;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
            v95 = 0xFFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          v218[0].__end_ = k + 4;
          v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v95);
          v98 = &v96[16 * v92];
          v99 = *(_OWORD *)(v84 + 40);
          *(_OWORD *)v98 = v99;
          if (*((_QWORD *)&v99 + 1))
          {
            v100 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
          }
          v103 = (_QWORD *)k[3].__r_.__value_.__l.__size_;
          v102 = (_QWORD *)k[3].__r_.__value_.__r.__words[2];
          if (v102 == v103)
          {
            v106 = vdupq_n_s64((unint64_t)v102);
            v104 = &v96[16 * v92];
          }
          else
          {
            v104 = &v96[16 * v92];
            do
            {
              v105 = *((_OWORD *)v102 - 1);
              v102 -= 2;
              *((_OWORD *)v104 - 1) = v105;
              v104 -= 16;
              *v102 = 0;
              v102[1] = 0;
            }
            while (v102 != v103);
            v106 = *(int64x2_t *)&k[3].__r_.__value_.__r.__words[1];
          }
          v90 = v98 + 16;
          k[3].__r_.__value_.__l.__size_ = (std::string::size_type)v104;
          k[3].__r_.__value_.__r.__words[2] = (std::string::size_type)(v98 + 16);
          *(int64x2_t *)&v217.__r_.__value_.__r.__words[1] = v106;
          v107 = (std::string *)k[4].__r_.__value_.__l.__data_;
          k[4].__r_.__value_.__r.__words[0] = (std::string::size_type)&v96[16 * v97];
          v218[0].__begin_ = v107;
          v217.__r_.__value_.__r.__words[0] = v106.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v217);
        }
        else
        {
          *v85 = *((_QWORD *)v83 + 5);
          v87 = *((_QWORD *)v83 + 6);
          v85[1] = v87;
          if (v87)
          {
            v88 = (unint64_t *)(v87 + 8);
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          v90 = v85 + 2;
        }
        k[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v90;
      }
      v109 = v219.__end_;
      for (m = v219.__begin_; m != v109; ++m)
      {
        v110 = *a1 + 136;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)m;
        v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v110, (unsigned __int8 *)m, (__int128 **)&v217);
        v112 = v111;
        v113 = (_QWORD *)k[4].__r_.__value_.__r.__words[2];
        v114 = k[5].__r_.__value_.__l.__data_;
        if (v113 >= (_QWORD *)v114)
        {
          v119 = k[4].__r_.__value_.__l.__size_;
          v120 = (uint64_t)((uint64_t)v113 - v119) >> 4;
          v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v122 = (uint64_t)&v114[-v119];
          if (v122 >> 3 > v121)
            v121 = v122 >> 3;
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
            v123 = 0xFFFFFFFFFFFFFFFLL;
          else
            v123 = v121;
          v218[0].__end_ = k + 5;
          v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v123);
          v126 = &v124[16 * v120];
          v127 = *(_OWORD *)(v112 + 40);
          *(_OWORD *)v126 = v127;
          if (*((_QWORD *)&v127 + 1))
          {
            v128 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
            do
              v129 = __ldxr(v128);
            while (__stxr(v129 + 1, v128));
          }
          v131 = (_QWORD *)k[4].__r_.__value_.__l.__size_;
          v130 = (_QWORD *)k[4].__r_.__value_.__r.__words[2];
          if (v130 == v131)
          {
            v134 = vdupq_n_s64((unint64_t)v130);
            v132 = &v124[16 * v120];
          }
          else
          {
            v132 = &v124[16 * v120];
            do
            {
              v133 = *((_OWORD *)v130 - 1);
              v130 -= 2;
              *((_OWORD *)v132 - 1) = v133;
              v132 -= 16;
              *v130 = 0;
              v130[1] = 0;
            }
            while (v130 != v131);
            v134 = *(int64x2_t *)&k[4].__r_.__value_.__r.__words[1];
          }
          v118 = v126 + 16;
          k[4].__r_.__value_.__l.__size_ = (std::string::size_type)v132;
          k[4].__r_.__value_.__r.__words[2] = (std::string::size_type)(v126 + 16);
          *(int64x2_t *)&v217.__r_.__value_.__r.__words[1] = v134;
          v135 = (std::string *)k[5].__r_.__value_.__l.__data_;
          k[5].__r_.__value_.__r.__words[0] = (std::string::size_type)&v124[16 * v125];
          v218[0].__begin_ = v135;
          v217.__r_.__value_.__r.__words[0] = v134.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v217);
        }
        else
        {
          *v113 = *((_QWORD *)v111 + 5);
          v115 = *((_QWORD *)v111 + 6);
          v113[1] = v115;
          if (v115)
          {
            v116 = (unint64_t *)(v115 + 8);
            do
              v117 = __ldxr(v116);
            while (__stxr(v117 + 1, v116));
          }
          v118 = v113 + 2;
        }
        k[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v118;
      }
      *(_OWORD *)&v217.__r_.__value_.__r.__words[1] = 0u;
      memset(v218, 0, sizeof(v218));
      v136 = v209;
      LODWORD(v217.__r_.__value_.__l.__data_) = (_DWORD)v209 - 1;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v217.__r_.__value_.__l.__size_, (uint64_t)k, (uint64_t)v230);
      std::vector<std::string>::__vdeallocate(v218);
      v218[0] = v233;
      memset(&v233, 0, sizeof(v233));
      std::vector<std::string>::__vdeallocate(&v218[1]);
      v218[1] = v219;
      memset(&v219, 0, sizeof(v219));
      v215 = 0uLL;
      v216 = 0;
      v137 = (v207 - v208) >> 4;
      v215.i64[1] = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v215, (uint64_t)&v217);
      while (1)
      {
        v232 = (int64x2_t *)v136;
        if ((unint64_t)v136 >= v137 - v71)
          break;
        v138 = *a1 + 56;
        v214 = (char *)v136 + v71;
        v139 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v138, (unint64_t)v136 + v71, &v214);
        v140 = *a1 + 56;
        v231 = &v232;
        v141 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v140, (unint64_t *)&v232, (uint64_t)&std::piecewise_construct, (uint64_t **)&v231);
        std::vector<std::string>::__vdeallocate(v141 + 1);
        *(_OWORD *)&v141[1].__begin_ = *(_OWORD *)(v139 + 3);
        v141[1].__end_cap_.__value_ = (std::string *)v139[5];
        v139[3] = 0;
        v139[4] = 0;
        v139[5] = 0;
        v142 = *a1 + 96;
        v214 = &v232->i8[v71];
        v143 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v142, (unint64_t)v232->u64 + v71, &v214);
        v144 = *a1 + 96;
        v231 = &v232;
        v145 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v144, (unint64_t *)&v232, (uint64_t)&std::piecewise_construct, (uint64_t **)&v231);
        std::vector<std::string>::__vdeallocate(v145 + 1);
        *(_OWORD *)&v145[1].__begin_ = *(_OWORD *)(v143 + 3);
        v145[1].__end_cap_.__value_ = (std::string *)v143[5];
        v143[3] = 0;
        v143[4] = 0;
        v143[5] = 0;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * (_QWORD)v232), *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * ((_QWORD)v232 + v71)), *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * ((_QWORD)v232 + v71) + 8));
        v136 = (void **)((char *)v232->i64 + 1);
      }
      if (v211 != v213)
      {
        v146 = v213 - v211;
        do
        {
          std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>((_QWORD *)(*a1 + 56), v137 + v146);
          std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>((_QWORD *)(*a1 + 96), v137 + v146);
          v147 = *a1;
          *(_QWORD *)(v147 + 40) = std::shared_ptr<void>::~shared_ptr[abi:ne180100](*(_QWORD *)(*a1 + 40) - 16);
        }
        while (!__CFADD__(v146++, 1));
      }
      Espresso::net::insert_layers(*a1, v215.i64);
      v232 = &v215;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
      v215.i64[0] = (uint64_t)&v218[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
      v215.i64[0] = (uint64_t)v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
      v149 = (std::__shared_weak_count *)v217.__r_.__value_.__r.__words[2];
      if (v217.__r_.__value_.__r.__words[2])
      {
        v150 = (unint64_t *)(v217.__r_.__value_.__r.__words[2] + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
      v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v233;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
      v152 = v221;
      if (v221)
      {
        v153 = (unint64_t *)&v221->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
      v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
      if (SHIBYTE(v226[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v226[0].__r_.__value_.__l.__data_);
      if (*((_QWORD *)&v224 + 1))
      {
        *(_QWORD *)&v225 = *((_QWORD *)&v224 + 1);
        operator delete(*((void **)&v224 + 1));
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v155 = v230;
      if (v230)
      {
        v156 = (unint64_t *)&v230->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      v14 = v205 + v71 - 1;
      v15 = v206 + 1;
      v13 = v203[4];
    }
    while (v206 + 1 < 0xEEEEEEEEEEEEEEEFLL * ((v203[5] - v13) >> 3));
  }
  *(_OWORD *)&v217.__r_.__value_.__r.__words[1] = 0uLL;
  v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217.__r_.__value_.__l.__size_;
  v222 = 0u;
  __p = 0u;
  LODWORD(v224) = 1065353216;
  v219.__begin_ = 0;
  v158 = *a1;
  if (*(_QWORD *)(*a1 + 40) != *(_QWORD *)(*a1 + 32))
  {
    do
    {
      v233.__begin_ = (std::vector<std::string>::pointer)&v219;
      v159 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v158 + 56, (unint64_t *)&v219, (uint64_t)&std::piecewise_construct, (uint64_t **)&v233);
      v160 = (std::string *)v159[3];
      v161 = (std::string *)v159[4];
      while (v160 != v161)
      {
        v162 = *a1 + 136;
        v233.__begin_ = v160;
        v163 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v162, (unsigned __int8 *)v160, (__int128 **)&v233);
        v233.__begin_ = v160;
        v164 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v222, (unsigned __int8 *)v160, (__int128 **)&v233);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v164 + 5, *((_QWORD *)v163 + 5), *((_QWORD *)v163 + 6));
        v165 = (uint64_t **)(*a1 + 184);
        v233.__begin_ = v160;
        v166 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v165, v160, (__int128 **)&v233);
        v233.__begin_ = v160;
        v167 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v217, v160, (__int128 **)&v233);
        v168 = *(_OWORD *)(v166 + 56);
        v169 = *(_OWORD *)(v166 + 72);
        *((_QWORD *)v167 + 11) = *((_QWORD *)v166 + 11);
        *(_OWORD *)(v167 + 72) = v169;
        *(_OWORD *)(v167 + 56) = v168;
        if (v167 != v166)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v167 + 96, *((char **)v166 + 12), *((_QWORD *)v166 + 13), (uint64_t)(*((_QWORD *)v166 + 13) - *((_QWORD *)v166 + 12)) >> 2);
        ++v160;
      }
      v170 = *a1 + 96;
      v233.__begin_ = (std::vector<std::string>::pointer)&v219;
      v171 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v170, (unint64_t *)&v219, (uint64_t)&std::piecewise_construct, (uint64_t **)&v233);
      v172 = (std::string *)v171[3];
      v173 = (std::string *)v171[4];
      while (v172 != v173)
      {
        v174 = *a1 + 136;
        v233.__begin_ = v172;
        v175 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v174, (unsigned __int8 *)v172, (__int128 **)&v233);
        v233.__begin_ = v172;
        v176 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v222, (unsigned __int8 *)v172, (__int128 **)&v233);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v176 + 5, *((_QWORD *)v175 + 5), *((_QWORD *)v175 + 6));
        v177 = (uint64_t **)(*a1 + 184);
        v233.__begin_ = v172;
        v178 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v177, v172, (__int128 **)&v233);
        v233.__begin_ = v172;
        v179 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v217, v172, (__int128 **)&v233);
        v180 = *(_OWORD *)(v178 + 56);
        v181 = *(_OWORD *)(v178 + 72);
        *((_QWORD *)v179 + 11) = *((_QWORD *)v178 + 11);
        *(_OWORD *)(v179 + 72) = v181;
        *(_OWORD *)(v179 + 56) = v180;
        if (v179 != v178)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v179 + 96, *((char **)v178 + 12), *((_QWORD *)v178 + 13), (uint64_t)(*((_QWORD *)v178 + 13) - *((_QWORD *)v178 + 12)) >> 2);
        ++v172;
      }
      ++v219.__begin_;
      v158 = *a1;
    }
    while (v219.__begin_ < (std::vector<std::string>::pointer)((uint64_t)(*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) >> 4));
  }
  v183 = *(char **)(v158 + 192);
  v182 = (std::string::size_type *)(v158 + 192);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(v182 - 1), v183);
  v184 = v217.__r_.__value_.__l.__size_;
  *(v182 - 1) = v217.__r_.__value_.__r.__words[0];
  *v182 = v184;
  v185 = v217.__r_.__value_.__r.__words[2];
  v182[1] = v217.__r_.__value_.__r.__words[2];
  if (v185)
  {
    *(_QWORD *)(v184 + 16) = v182;
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217.__r_.__value_.__l.__size_;
    *(_OWORD *)&v217.__r_.__value_.__r.__words[1] = 0uLL;
  }
  else
  {
    *(v182 - 1) = (std::string::size_type)v182;
  }
  v186 = *a1;
  v187 = (_QWORD *)(v186 + 136);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(v186 + 136);
  v188 = v222;
  *(_QWORD *)&v222 = 0;
  v189 = *(void **)(v186 + 136);
  *(_QWORD *)(v186 + 136) = v188;
  if (v189)
    operator delete(v189);
  v191 = *((_QWORD *)&v222 + 1);
  v190 = (_QWORD *)__p;
  *(_QWORD *)(v186 + 152) = __p;
  v192 = v186 + 152;
  *(_QWORD *)(v192 - 8) = v191;
  *((_QWORD *)&v222 + 1) = 0;
  v193 = *((_QWORD *)&__p + 1);
  *(_QWORD *)(v192 + 8) = *((_QWORD *)&__p + 1);
  *(_DWORD *)(v192 + 16) = v224;
  if (v193)
  {
    v194 = v190[1];
    if ((v191 & (v191 - 1)) != 0)
    {
      if (v194 >= v191)
        v194 %= v191;
    }
    else
    {
      v194 &= v191 - 1;
    }
    v190 = 0;
    *(_QWORD *)(*v187 + 8 * v194) = v192;
    __p = 0uLL;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v190);
  v195 = (void *)v222;
  *(_QWORD *)&v222 = 0;
  if (v195)
    operator delete(v195);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v217, (char *)v217.__r_.__value_.__l.__size_);
  v196 = v201;
  if (v201)
  {
    v197 = (unint64_t *)&v201->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
      v196 = v201;
    }
    do
      v199 = __ldaxr(v197);
    while (__stlxr(v199 - 1, v197));
    if (!v199)
    {
      v200 = v196;
      ((void (*)(void))v196->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v200);
    }
  }
}

void sub_191305DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,char a52)
{
  unint64_t *p_shared_owners;
  unint64_t v54;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t v16;
  unint64_t v17;
  unint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t *v22;

  v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 1;
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7)
    v7 = 0x38E38E38E38E38ELL;
  else
    v7 = v3;
  v22 = (uint64_t *)v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>>(v7);
  else
    v8 = 0;
  v19 = v7;
  v20.i64[0] = v7 + 72 * v2;
  v21 = v7 + 72 * v8;
  std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v20.i64[0], a2);
  v9 = v20.i64[0];
  v10 = v20.i64[0] + 72;
  v20.i64[1] = v20.i64[0] + 72;
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    v16 = vdupq_n_s64(v11);
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v9 + v13;
      v15 = v11 + v13;
      *(_DWORD *)(v14 - 72) = *(_DWORD *)(v11 + v13 - 72);
      *(_OWORD *)(v14 - 64) = *(_OWORD *)(v11 + v13 - 64);
      *(_QWORD *)(v15 - 64) = 0;
      *(_QWORD *)(v15 - 56) = 0;
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_QWORD *)(v14 - 32) = 0;
      *(_OWORD *)(v14 - 48) = *(_OWORD *)(v11 + v13 - 48);
      *(_QWORD *)(v14 - 32) = *(_QWORD *)(v11 + v13 - 32);
      *(_QWORD *)(v15 - 48) = 0;
      *(_QWORD *)(v15 - 40) = 0;
      *(_QWORD *)(v15 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v14 - 8) = 0;
      *(_OWORD *)(v14 - 24) = *(_OWORD *)(v11 + v13 - 24);
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v11 + v13 - 8);
      *(_QWORD *)(v15 - 24) = 0;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      v13 -= 72;
    }
    while (v11 + v13 != v12);
    v9 += v13;
    v16 = *a1;
    v10 = v20.i64[1];
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  v20 = v16;
  v17 = a1[1].u64[0];
  a1[1].i64[0] = v21;
  v21 = v17;
  v19 = v16.i64[0];
  std::__split_buffer<Espresso::net::new_layer_info>::~__split_buffer((uint64_t)&v19);
  return v10;
}

void sub_191306118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Espresso::net::new_layer_info>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>(_QWORD *a1, unint64_t a2)
{
  void **v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  void **v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v3 = (void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = (unint64_t)v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(void ***)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (void **)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_20;
    v9 = (unint64_t)v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3)
        goto LABEL_21;
      v10 = *((_QWORD *)*v3 + 1);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_21:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = v11[1];
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v3);
  }
}

void std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<Espresso::net::new_layer_info>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::net::new_layer_info::~new_layer_info(Espresso::net::new_layer_info *this)
{
  void **v2;

  v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void Espresso::dev_op_params_t::~dev_op_params_t(void **this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = this + 11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  v2 = this[5];
  if (v2)
  {
    this[6] = v2;
    operator delete(v2);
  }
  v3 = this[2];
  if (v3)
  {
    this[3] = v3;
    operator delete(v3);
  }
}

uint64_t std::allocator<Espresso::net::new_layer_info>::destroy[abi:ne180100](uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 8);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

void std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (_QWORD *)(a1 + 48);
  v7[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v7, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
}

void sub_191306504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = xmmword_191A8AA80;
  this[1].__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
  return this;
}

void std::__shared_ptr_emplace<Espresso::layer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF0D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::layer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF0D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::pass_compress_segments>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCC10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_compress_segments>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCC10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_compress_segments>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_191306804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_191306898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EspressoDataFrameMappedFile;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::io_error,char const*>(char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::io_error>(a1, a2);
}

void sub_191306B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>(char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>(a1, a2);
}

void sub_191306E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_191307030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>(char *a1, _QWORD *a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>(a1, *a2);
}

void sub_1913073A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::io_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::io_error>(a1);
}

void sub_191307880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191307CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_191308218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  __cxa_free_exception(v23);
  if (a2 == 1)
  {
    v26 = __cxa_begin_catch(a1);
    if (a11 && !*a11)
    {
      v27 = (void *)MEMORY[0x1E0CB35C8];
      a21 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      a22 = (uint64_t)v28;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a22, &a21, 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 1, v29);
      *a11 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x191308100);
  }

  _Unwind_Resume(a1);
}

void sub_191308A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v8 - 96);
  if (v7)
    free(v7);

  _Unwind_Resume(a1);
}

void sub_191308E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_191309D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;
  void *v46;

  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_19130A3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19130AE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19130AFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EspressoDataFrameExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,Espresso::layer_shape>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *j;
  unint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
  {
    v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(i + 16));
    v7 = v6;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        v2 = v6;
        if (v6 >= v8)
          v2 = v6 % v8;
      }
      else
      {
        v2 = (v8 - 1) & v6;
      }
      v11 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
      if (v11)
      {
        for (j = *v11; j; j = *(unsigned __int8 **)j)
        {
          v13 = *((_QWORD *)j + 1);
          if (v13 == v7)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, i + 16))
              goto LABEL_40;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v2)
              break;
          }
        }
      }
    }
    v14 = (char *)operator new(0x68uLL);
    v25[0] = v14;
    v25[1] = a1 + 16;
    v26 = 0;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = v7;
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]((std::string *)(v14 + 16), (__int128 *)i + 1);
    v26 = 1;
    v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v16 = *(float *)(a1 + 32);
    if (!v8 || (float)(v16 * (float)v8) < v15)
    {
      v17 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3)
        v17 = 1;
      v18 = v17 | (2 * v8);
      v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19)
        v20 = v19;
      else
        v20 = v18;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v20);
      v8 = *(_QWORD *)(a1 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8)
          v2 = v7 % v8;
        else
          v2 = v7;
      }
      else
      {
        v2 = (v8 - 1) & v7;
      }
    }
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    v22 = v25[0];
    if (v21)
    {
      *(_QWORD *)v25[0] = *v21;
    }
    else
    {
      *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
      if (!*(_QWORD *)v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(*(_QWORD *)v22 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    }
    *v21 = v22;
LABEL_39:
    v25[0] = 0;
    ++*(_QWORD *)(a1 + 24);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
LABEL_40:
    ;
  }
  return a1;
}

void sub_19130B2DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void sub_19130B6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19130BAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t Espresso::layer::share_weights(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 48))(*(_QWORD *)(a1 + 64), *a2 + 64);
}

uint64_t Espresso::layer::clear_weights(Espresso::layer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8));
}

uint64_t Espresso::layer::syntetic_description(Espresso::layer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  if (*((_QWORD *)this + 11) != *((_QWORD *)this + 10))
  {
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
    std::ostream::operator<<();
  }
  if (*((_QWORD *)this + 14) != *((_QWORD *)this + 13))
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" -> ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
    std::ostream::operator<<();
  }
  v9 = (_QWORD *)((char *)this + 40);
  v10 = *((char *)this + 63);
  if (v10 < 0)
  {
    if (*((_QWORD *)this + 6) != 11)
      goto LABEL_16;
    v9 = (_QWORD *)*v9;
  }
  else if (v10 != 11)
  {
    goto LABEL_16;
  }
  v11 = (_QWORD *)*v9;
  v12 = *(_QWORD *)((char *)v9 + 3);
  if (v11 == (_QWORD *)0x74756C6F766E6F63 && v12 == 0x6E6F6974756C6F76)
  {
    v14 = *((_QWORD *)this + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" (kx=", 5);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 384))(v14);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ky=", 4);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 384))(v14);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ng=", 4);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 384))(v14);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  }
LABEL_16:
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401CCD0](&v21);
}

void sub_19130BE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t Espresso::layer::layer_training_transform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  a5[1] = 0u;
  a5[2] = 0u;
  *a5 = 0u;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _OWORD *))(**(_QWORD **)(a1 + 64) + 232))(*(_QWORD *)(a1 + 64), a2, a3, a4, a5);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _OWORD *))(**(_QWORD **)(a1 + 64) + 224))(*(_QWORD *)(a1 + 64), a2, a3, a4, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _OWORD *))(**(_QWORD **)(a1 + 64) + 216))(*(_QWORD *)(a1 + 64), a2, a3, a4, a5);
}

void sub_19130BFAC(_Unwind_Exception *a1)
{
  void **v1;

  Espresso::layer_training_transform_info::~layer_training_transform_info(v1);
  _Unwind_Resume(a1);
}

void Espresso::layer_training_transform_info::~layer_training_transform_info(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t Espresso::layer::transform_transfer_global_parameters(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 240))(*(_QWORD *)(a1 + 64));
}

std::string *Espresso::layer::set_debug_name(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 200), a2);
}

void Espresso::layer::debug_name(Espresso::layer *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
  }
}

void Espresso::get_layer_parameter_name(const void **a1@<X1>, int a2@<W2>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string __p;
  std::string v15;
  std::string v16;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v6 + 11);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ":blob_type(");
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v16, ")");
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_19130C19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void Espresso::make_new_kernel(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  int is_kernel_supported;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v20, (uint64_t)v6, (_QWORD *)(*(_QWORD *)a1 + 40));
  if (!v20)
  {
    v18 = (_QWORD *)(*(_QWORD *)a1 + 40);
    if (*(char *)(*(_QWORD *)a1 + 63) < 0)
      v18 = (_QWORD *)*v18;
    *(_QWORD *)&v19 = v18;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("layer_io not found for %s", &v19);
  }
  *a3 = 0;
  a3[1] = 0;
  Espresso::abstract_engine_factory::shared(&v19);
  is_kernel_supported = Espresso::abstract_engine_factory::is_kernel_supported(v19, a2, *(_QWORD *)a1 + 40);
  v8 = is_kernel_supported;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_6;
  v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8)
      goto LABEL_13;
  }
  else
  {
LABEL_6:
    if (!is_kernel_supported)
      goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v20 + 40))(&v19, v20, *(_QWORD *)(*(_QWORD *)a1 + 64), a2, *(unsigned int *)(*(_QWORD *)a1 + 12));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v19);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_13:
  v15 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_19130C378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::factory_t<Espresso::SerDes::layer_io_base>::~factory_t(Espresso::generic_factory_t *a1)
{
  Espresso::generic_factory_t::~generic_factory_t(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::layer_io_base>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC25F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::layer_io_base>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC25F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::layer_io_base>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::clone_kernel(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  char *v7;
  Espresso::abstract_engine_factory *v8;
  uint64_t v9;
  char *v10;
  int is_kernel_supported;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p[2];
  char v25;
  Espresso::abstract_engine_factory *v26;
  std::__shared_weak_count *v27;

  v6 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  v7 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 272))(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v26, (uint64_t)v6, __p);
  if (v25 < 0)
    operator delete(__p[0]);
  v8 = v26;
  if (!v26)
  {
    __p[0] = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 272))(*a1);
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("layer_io not found for %s", __p);
  }
  *a3 = 0;
  a3[1] = 0;
  if (*a2)
  {
    Espresso::abstract_engine_factory::shared(&v22);
    v9 = v22;
    v10 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 272))(*a1);
    std::string::basic_string[abi:ne180100]<0>(__p, v10);
    is_kernel_supported = Espresso::abstract_engine_factory::is_kernel_supported(v9, (uint64_t)a2, (uint64_t)__p);
    if (v25 < 0)
      operator delete(__p[0]);
    v12 = v23;
    if (!v23)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!is_kernel_supported)
        goto LABEL_22;
    }
    else
    {
LABEL_11:
      if (!is_kernel_supported)
        goto LABEL_22;
    }
    (*(void (**)(void **__return_ptr, Espresso::abstract_engine_factory *, _QWORD, _QWORD *, _QWORD))(*(_QWORD *)v26 + 40))(__p, v26, *a1, a2, 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v15 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_22;
    v16 = (unint64_t *)((char *)__p[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
  }
  else
  {
    (*(void (**)(void **__return_ptr, Espresso::abstract_engine_factory *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(__p, v8, *a1, *a1 + 8, 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v15 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_22;
    v18 = (unint64_t *)((char *)__p[1] + 8);
    do
      v17 = __ldaxr(v18);
    while (__stlxr(v17 - 1, v18));
  }
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_22:
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19130C654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 Espresso::auto_optimize@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v4;
  Espresso *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  Espresso::net *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  const void *v37;
  void **v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  unint64_t v44;
  uint64_t v45;
  const void *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  Espresso::net *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  const void *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  uint64_t **v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const void *v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  const std::string *v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  Espresso::net **v114;
  uint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  Espresso *v122;
  id v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t **v127;
  uint64_t **v128;
  uint64_t *v129;
  uint64_t v130;
  void *v131;
  unint64_t *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  BOOL v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  Espresso::net *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  _DWORD *v184;
  _DWORD *v185;
  int v186;
  int *v187;
  int *v188;
  int v189;
  int v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  Espresso *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t *v219;
  unint64_t v220;
  int v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t *v242;
  unint64_t v243;
  int v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t *v255;
  unint64_t v256;
  char *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  char v262;
  char v263;
  char v264;
  int v265;
  char v266;
  char v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t *v280;
  int v281;
  uint64_t *v282;
  uint64_t v284;
  Espresso::net *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t *v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t *v324;
  unint64_t v325;
  unint64_t *v326;
  uint64_t v330;
  _OWORD *v331;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t *v340;
  unint64_t v341;
  unint64_t *v342;
  unint64_t *v357;
  unint64_t v358;
  unint64_t *v359;
  uint64_t v361;
  uint64_t v362;
  int v363;
  Espresso *v366;
  _OWORD *v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t *v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t *v373;
  __n128 result;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  std::runtime_error *exception;
  std::runtime_error *v381;
  std::runtime_error *v382;
  _QWORD v385[2];
  _QWORD v386[2];
  _QWORD v387[2];
  uint64_t v388[2];
  _QWORD v389[2];
  char *v390[2];
  _QWORD v391[2];
  Espresso::net *v392[2];
  uint64_t **v393[2];
  _QWORD v394[2];
  _QWORD v395[2];
  _QWORD v396[2];
  __int128 v397;
  int v398;
  int v399;
  int v400;
  char v401;
  char v402;
  char v403;
  __int16 v404;
  char v405;
  void *v406;
  uint64_t v407;
  uint64_t v408;
  char *v409[3];
  std::__shared_weak_count *v410;
  Espresso *v411;
  std::__shared_weak_count *v412;
  Espresso *v413;
  std::__shared_weak_count *v414;
  const Espresso::net *v415;
  std::__shared_weak_count *v416;
  const Espresso::net *v417;
  std::__shared_weak_count *v418;
  const Espresso::net *v419;
  std::__shared_weak_count *v420;
  uint64_t v421;
  std::__shared_weak_count *v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  uint64_t v425;
  std::__shared_weak_count *v426;
  const Espresso::net *v427;
  std::__shared_weak_count *v428;
  uint64_t v429;
  int v430;
  char *v431;
  std::__shared_weak_count *v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t v435;
  void *v436;
  std::__shared_weak_count *v437;
  __int128 v438;
  uint64_t v439;
  void *v440[2];
  __int128 v441;
  __int128 v442;
  __int128 v443;
  void *__p[2];
  __int128 v445;
  __int128 v446;
  _QWORD v447[3];
  __int128 v448;
  uint64_t *v449[3];
  uint64_t *v450[3];
  void **v451;
  std::__shared_weak_count *v452;
  void **v453;
  char *v454;
  std::__shared_weak_count *v455;
  uint64_t v456;
  char *v457;
  uint64_t v458;
  _QWORD v459[3];
  uint64_t v460;

  v4 = (uint64_t *)a1;
  v460 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 108))
  {
    if (*(_BYTE *)(a2 + 12))
      goto LABEL_339;
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    v427 = *(const Espresso::net **)a1;
    v428 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    Espresso::fuse_biases((uint64_t *)&v427, (uint64_t *)v440);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v4, (__int128 *)v440);
    v9 = (std::__shared_weak_count *)v440[1];
    if (v440[1])
    {
      v10 = (unint64_t *)((char *)v440[1] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v428;
    if (v428)
    {
      v13 = (unint64_t *)&v428->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (!*v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "fuse_biases error");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v15 = v4[1];
    v425 = *v4;
    v426 = (std::__shared_weak_count *)v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    Espresso::fuse_batchnorm(&v425, v440);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v4, (__int128 *)v440);
    v18 = (std::__shared_weak_count *)v440[1];
    if (v440[1])
    {
      v19 = (unint64_t *)((char *)v440[1] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v426;
    if (v426)
    {
      v22 = (unint64_t *)&v426->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v5 = (Espresso *)*v4;
    if (!*v4)
    {
      v381 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v381, "fuse_batchnorm error");
      __cxa_throw(v381, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_39;
  }
  if (*(_BYTE *)a2
    || *(_BYTE *)(a2 + 2)
    || *(_BYTE *)(a2 + 3)
    || *(_BYTE *)(a2 + 13)
    || *(_BYTE *)(a2 + 48)
    || *(_QWORD *)(a2 + 56) != *(_QWORD *)(a2 + 64))
  {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("skip_weight_optimizations not compatible with provided options");
  }
  if (!*(_BYTE *)(a2 + 12))
  {
    v5 = *(Espresso **)a1;
LABEL_39:
    Espresso::fuse_nonlinearities(v5, (Espresso::net *)a2);
    v24 = *(Espresso::net **)a1;
    v25 = *(std::__shared_weak_count **)(a1 + 8);
    v423 = *(_QWORD *)a1;
    v424 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      *((_QWORD *)&v438 + 1) = v25;
      do
        v28 = __ldxr(v26);
      while (__stxr(v28 + 1, v26));
    }
    else
    {
      *((_QWORD *)&v438 + 1) = 0;
    }
    *(_QWORD *)&v438 = v24;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v440, v24);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v440, (uint64_t)v24, (uint64_t)v25);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
    if (*((_QWORD *)&v438 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    *((_QWORD *)&v448 + 1) = 0;
    v449[0] = 0;
    *(_QWORD *)&v448 = (char *)&v448 + 8;
    v430 = 0;
    v32 = v423;
    v33 = *(_QWORD *)(v423 + 32);
    if (*(_QWORD *)(v423 + 40) != v33)
    {
      LODWORD(v34) = 0;
      v35 = 0;
      do
      {
        v36 = *(_QWORD *)(v33 + 16 * v35);
        v37 = *(const void **)(v36 + 64);
        if (v37)
        {
          if (v38)
          {
            v39 = v38;
            v40 = *(std::__shared_weak_count **)(v36 + 72);
            v451 = v38;
            v452 = v40;
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v43 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v442 + 1, v34, &v430);
            if ((char *)v43[6] - (char *)v43[5] == 4)
            {
              v44 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v442 + 1, v34, &v430)[5];
              v45 = *(_QWORD *)(*(_QWORD *)(v32 + 32) + 16 * v44);
              v46 = *(const void **)(v45 + 64);
              if (v46)
              {
                if (v47)
                {
                  v48 = *(std::__shared_weak_count **)(v45 + 72);
                  v436 = v47;
                  v437 = v48;
                  if (v48)
                  {
                    v49 = (unint64_t *)&v48->__shared_owners_;
                    do
                      v50 = __ldxr(v49);
                    while (__stxr(v50 + 1, v49));
                  }
                  v51 = (*((uint64_t (**)(void **))*v39 + 40))(v39);
                  if (*(_BYTE *)(v51 + 44))
                  {
                    *(_BYTE *)(v51 + 44) = 0;
                    v435 = v44;
                    v52 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v32 + 56, v44, &v435);
                    v429 = v430;
                    v53 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v423 + 56, v430, &v429);
                    if (v53 != v52)
                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v53 + 3), (std::string *)v52[3], (std::string *)v52[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52[4] - v52[3]) >> 3));
                    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)&v448, v44, v44);
                  }
                  if (v48)
                  {
                    v54 = (unint64_t *)&v48->__shared_owners_;
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 - 1, v54));
                    if (!v55)
                    {
                      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                      std::__shared_weak_count::__release_weak(v48);
                    }
                  }
                }
              }
              v40 = v452;
            }
            if (v40)
            {
              v56 = (unint64_t *)&v40->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
          }
        }
        v34 = ++v430;
        v32 = v423;
        v33 = *(_QWORD *)(v423 + 32);
        v35 = v34;
      }
      while (v34 < (*(_QWORD *)(v423 + 40) - v33) >> 4);
    }
    v433 = v32;
    v434 = v424;
    if (v424)
    {
      v58 = &v424->__shared_owners_;
      do
        v59 = __ldxr((unint64_t *)v58);
      while (__stxr(v59 + 1, (unint64_t *)v58));
    }
    remove_unused_layers(&v448, (uint64_t)&v433);
    if (v424)
    {
      v60 = &v424->__shared_owners_;
      do
        v61 = __ldaxr((unint64_t *)v60);
      while (__stlxr(v61 - 1, (unint64_t *)v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
        std::__shared_weak_count::__release_weak(v424);
      }
    }
    v431 = (char *)v423;
    v432 = v424;
    if (v424)
    {
      v62 = &v424->__shared_owners_;
      do
        v63 = __ldxr((unint64_t *)v62);
      while (__stxr(v63 + 1, (unint64_t *)v62));
    }
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v453, (__int128 **)(v423 + 184));
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v456, (__int128 **)(v423 + 208));
    reshape_network(&v431, (uint64_t **)&v453);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v456, v457);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v453, v454);
    if (v424)
    {
      v64 = &v424->__shared_owners_;
      do
        v65 = __ldaxr((unint64_t *)v64);
      while (__stlxr(v65 - 1, (unint64_t *)v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
        std::__shared_weak_count::__release_weak(v424);
      }
    }
    std::__tree<int>::destroy(*((_QWORD **)&v448 + 1));
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v443);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v441 + 1));
    v66 = (std::__shared_weak_count *)v440[1];
    if (v440[1])
    {
      v67 = (unint64_t *)((char *)v440[1] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (v424)
    {
      v69 = &v424->__shared_owners_;
      do
        v70 = __ldaxr((unint64_t *)v69);
      while (__stlxr(v70 - 1, (unint64_t *)v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
        std::__shared_weak_count::__release_weak(v424);
      }
    }
    v71 = *(Espresso::net **)a1;
    v72 = *(std::__shared_weak_count **)(a1 + 8);
    v421 = *(_QWORD *)a1;
    v422 = v72;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
      *((_QWORD *)&v438 + 1) = v72;
      do
        v75 = __ldxr(v73);
      while (__stxr(v75 + 1, v73));
    }
    else
    {
      *((_QWORD *)&v438 + 1) = 0;
    }
    *(_QWORD *)&v438 = v71;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v440, v71);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v440, (uint64_t)v71, (uint64_t)v72);
    v76 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
    if (*((_QWORD *)&v438 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    *((_QWORD *)&v448 + 1) = 0;
    v449[0] = 0;
    *(_QWORD *)&v448 = (char *)&v448 + 8;
    LODWORD(v429) = 0;
    v79 = v421;
    v80 = *(_QWORD *)(v421 + 32);
    if (*(_QWORD *)(v421 + 40) != v80)
    {
      LODWORD(v81) = 0;
      v82 = 0;
      do
      {
        v83 = *(_QWORD *)(v80 + 16 * v82);
        v84 = *(const void **)(v83 + 64);
        if (v84)
        {
          if (v85)
          {
            v86 = *(std::__shared_weak_count **)(v83 + 72);
            v451 = v85;
            v452 = v86;
            if (v86)
            {
              v87 = (unint64_t *)&v86->__shared_owners_;
              do
                v88 = __ldxr(v87);
              while (__stxr(v88 + 1, v87));
            }
            v89 = (*((uint64_t (**)(void **))*v85 + 40))(v85);
            if (*(_BYTE *)(v89 + 32))
            {
              v436 = (void *)(int)v81;
              v90 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v79 + 56, (int)v81, &v436);
              if (v90[4] - v90[3] == 48)
              {
                v91 = v429;
                v92 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v442 + 1, v429, &v429);
                if (v92[5] != v92[6])
                {
                  v93 = v91;
                  v94 = *((int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v442 + 1, v91, &v429)[6]- 1);
                  v95 = v421;
                  v96 = *(_QWORD *)(*(_QWORD *)(v421 + 32) + 16 * v94);
                  v97 = *(const void **)(v96 + 64);
                  if (v97)
                  {
                    if (v98)
                    {
                      v99 = *(std::__shared_weak_count **)(v96 + 72);
                      v436 = v98;
                      v437 = v99;
                      if (v99)
                      {
                        v100 = (unint64_t *)&v99->__shared_owners_;
                        do
                          v101 = __ldxr(v100);
                        while (__stxr(v101 + 1, v100));
                      }
                      v435 = v94;
                      v102 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v421 + 56, v94, &v435)[3];
                      *(_BYTE *)(v89 + 32) = 0;
                      v435 = v93;
                      v103 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v95 + 56, v93, &v435);
                      std::string::operator=((std::string *)(v103[3] + 24), v102);
                      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)&v448, v94, v94);
                      if (v99)
                      {
                        v104 = (unint64_t *)&v99->__shared_owners_;
                        do
                          v105 = __ldaxr(v104);
                        while (__stlxr(v105 - 1, v104));
                        if (!v105)
                        {
                          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                          std::__shared_weak_count::__release_weak(v99);
                        }
                      }
                    }
                  }
                  v86 = v452;
                }
              }
            }
            if (v86)
            {
              v106 = (unint64_t *)&v86->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
          }
        }
        v81 = (int)v429 + 1;
        LODWORD(v429) = v429 + 1;
        v79 = v421;
        v80 = *(_QWORD *)(v421 + 32);
        v82 = v81;
      }
      while (v81 < (*(_QWORD *)(v421 + 40) - v80) >> 4);
    }
    v433 = v79;
    v434 = v422;
    if (v422)
    {
      v108 = &v422->__shared_owners_;
      do
        v109 = __ldxr((unint64_t *)v108);
      while (__stxr(v109 + 1, (unint64_t *)v108));
    }
    remove_unused_layers(&v448, (uint64_t)&v433);
    if (v422)
    {
      v110 = &v422->__shared_owners_;
      do
        v111 = __ldaxr((unint64_t *)v110);
      while (__stlxr(v111 - 1, (unint64_t *)v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
        std::__shared_weak_count::__release_weak(v422);
      }
    }
    v431 = (char *)v421;
    v432 = v422;
    if (v422)
    {
      v112 = &v422->__shared_owners_;
      do
        v113 = __ldxr((unint64_t *)v112);
      while (__stxr(v113 + 1, (unint64_t *)v112));
    }
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v453, (__int128 **)(v421 + 184));
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v456, (__int128 **)(v421 + 208));
    reshape_network(&v431, (uint64_t **)&v453);
    v114 = (Espresso::net **)a1;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v456, v457);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v453, v454);
    if (v422)
    {
      v115 = &v422->__shared_owners_;
      do
        v116 = __ldaxr((unint64_t *)v115);
      while (__stlxr(v116 - 1, (unint64_t *)v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
        std::__shared_weak_count::__release_weak(v422);
      }
    }
    std::__tree<int>::destroy(*((_QWORD **)&v448 + 1));
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v443);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v441 + 1));
    v117 = (std::__shared_weak_count *)v440[1];
    if (v440[1])
    {
      v118 = (unint64_t *)((char *)v440[1] + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    if (v422)
    {
      v120 = &v422->__shared_owners_;
      do
        v121 = __ldaxr((unint64_t *)v120);
      while (__stlxr(v121 - 1, (unint64_t *)v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
        std::__shared_weak_count::__release_weak(v422);
      }
    }
    if (!*(_BYTE *)(a2 + 108))
    {
      v147 = *(std::__shared_weak_count **)(a1 + 8);
      v419 = *(const Espresso::net **)a1;
      v420 = v147;
      if (v147)
      {
        v148 = (unint64_t *)&v147->__shared_owners_;
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
      }
      Espresso::fold_batchnorm(&v419, v440);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, (__int128 *)v440);
      v150 = (std::__shared_weak_count *)v440[1];
      if (v440[1])
      {
        v151 = (unint64_t *)((char *)v440[1] + 8);
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      v153 = v420;
      if (v420)
      {
        v154 = (unint64_t *)&v420->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      if (!*(_QWORD *)a1)
      {
        v382 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v382, "fold_batchnorm error");
        __cxa_throw(v382, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v156 = *(std::__shared_weak_count **)(a1 + 8);
      v417 = *(const Espresso::net **)a1;
      v418 = v156;
      if (v156)
      {
        v157 = (unint64_t *)&v156->__shared_owners_;
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
      }
      Espresso::fuse_scale((uint64_t *)&v417, v440);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, (__int128 *)v440);
      v159 = (std::__shared_weak_count *)v440[1];
      if (v440[1])
      {
        v160 = (unint64_t *)((char *)v440[1] + 8);
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      v162 = v418;
      if (v418)
      {
        v163 = (unint64_t *)&v418->__shared_owners_;
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      v165 = *(std::__shared_weak_count **)(a1 + 8);
      v415 = *(const Espresso::net **)a1;
      v416 = v165;
      if (v165)
      {
        v166 = (unint64_t *)&v165->__shared_owners_;
        do
          v167 = __ldxr(v166);
        while (__stxr(v167 + 1, v166));
      }
      Espresso::fuse_biases((uint64_t *)&v415, (uint64_t *)v440);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, (__int128 *)v440);
      v169 = (std::__shared_weak_count *)v440[1];
      if (v440[1])
      {
        v170 = (unint64_t *)((char *)v440[1] + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }
      v172 = v416;
      if (v416)
      {
        v173 = (unint64_t *)&v416->__shared_owners_;
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      Espresso::fuse_nonlinearities(*(Espresso **)a1, v168);
      v114 = (Espresso::net **)a1;
      v175 = *(std::__shared_weak_count **)(a1 + 8);
      v413 = *(Espresso **)a1;
      v414 = v175;
      if (v175)
      {
        v176 = (unint64_t *)&v175->__shared_owners_;
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
      }
      Espresso::fuse_biases((uint64_t *)&v413, (uint64_t *)v440);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, (__int128 *)v440);
      v178 = (std::__shared_weak_count *)v440[1];
      if (v440[1])
      {
        v179 = (unint64_t *)((char *)v440[1] + 8);
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
      v181 = v414;
      if (v414)
      {
        v182 = (unint64_t *)&v414->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
    }
    Espresso::fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(*v114, &__block_literal_global_366);
    v122 = *(Espresso **)a1;
    v123 = &__block_literal_global_5;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v448, v122);
    v445 = 0u;
    v446 = 0u;
    v443 = 0u;
    *(_OWORD *)__p = 0u;
    v441 = 0u;
    v442 = 0u;
    *(_OWORD *)v440 = 0u;
    v447[0] = 0;
    v447[1] = v122;
    LODWORD(v453) = 0;
    v124 = *((_QWORD *)v122 + 4);
    if (*((_QWORD *)v122 + 5) != v124)
    {
      v125 = 0;
      v126 = 0;
      do
      {
        LODWORD(v447[0]) = v126;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v442, *(_QWORD *)(v124 + 16 * v125), *(_QWORD *)(v124 + 16 * v125 + 8));
        v127 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v449, v126, &v453);
        if ((char *)v127[6] - (char *)v127[5] == 4)
        {
          HIDWORD(v447[0]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v449, v447[0], v447)[5];
          v128 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v450, SHIDWORD(v447[0]), (_DWORD *)v447 + 1);
          if ((char *)v128[6] - (char *)v128[5] == 4)
          {
            v129 = (uint64_t *)(*((_QWORD *)v122 + 4) + 16 * SHIDWORD(v447[0]));
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v443, *v129, v129[1]);
            v130 = v442;
            v131 = *(void **)(v442 + 64);
            if (v131
            {
              v132 = *(unint64_t **)(v130 + 72);
              if (v132)
              {
                v133 = v132 + 1;
                do
                  v134 = __ldxr(v133);
                while (__stxr(v134 + 1, v133));
              }
            }
            else
            {
              v132 = 0;
            }
            v135 = (std::__shared_weak_count *)v440[1];
            v440[0] = v131;
            v440[1] = v132;
            if (v135)
            {
              v136 = (unint64_t *)&v135->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            v138 = v443;
            v139 = *(void **)(v443 + 64);
            if (v139
            {
              v140 = *(_QWORD *)(v138 + 72);
              if (v140)
              {
                v141 = (unint64_t *)(v140 + 8);
                do
                  v142 = __ldxr(v141);
                while (__stxr(v142 + 1, v141));
              }
            }
            else
            {
              v140 = 0;
            }
            v143 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
            *(_QWORD *)&v441 = v139;
            *((_QWORD *)&v441 + 1) = v140;
            if (v143)
            {
              v144 = (unint64_t *)&v143->__shared_owners_;
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v145 - 1, v144));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
            if (v440[0])
              v146 = (_QWORD)v441 == 0;
            else
              v146 = 1;
            if (!v146)
              ___ZN8Espresso13auto_optimizeENSt3__110shared_ptrINS_3netEEENS_21auto_optimize_optionsE_block_invoke_2((uint64_t)v139, (uint64_t)v440);
          }
        }
        v125 = (int)v453 + 1;
        LODWORD(v453) = (_DWORD)v453 + 1;
        v124 = *((_QWORD *)v122 + 4);
        v126 = v125;
      }
      while (v125 < (*((_QWORD *)v122 + 5) - v124) >> 4);
    }
    std::__sort<std::__less<int,int> &,int *>();
    v184 = __p[0];
    v185 = __p[1];
    if (__p[0] != __p[1])
    {
      v186 = 0;
      do
      {
        Espresso::net::remove_layer(v122, v186 + *v184++);
        --v186;
      }
      while (v184 != v185);
    }
    v187 = (int *)*((_QWORD *)&v445 + 1);
    v188 = (int *)v446;
    if (*((_QWORD *)&v445 + 1) != (_QWORD)v446)
    {
      v189 = 0;
      do
      {
        v190 = *v187;
        LODWORD(v436) = *v187 + v189;
        LODWORD(v453) = v190;
        v191 = (std::__shared_weak_count *)*((_QWORD *)v187 + 2);
        v454 = (char *)*((_QWORD *)v187 + 1);
        v455 = v191;
        if (v191)
        {
          v192 = (unint64_t *)&v191->__shared_owners_;
          do
            v193 = __ldxr(v192);
          while (__stxr(v193 + 1, v192));
        }
        v456 = 0;
        v457 = 0;
        v458 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v456, *((_QWORD *)v187 + 3), *((_QWORD *)v187 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v187 + 4) - *((_QWORD *)v187 + 3)) >> 3));
        memset(v459, 0, sizeof(v459));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v459, *((_QWORD *)v187 + 6), *((_QWORD *)v187 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v187 + 7) - *((_QWORD *)v187 + 6)) >> 3));
        v438 = 0uLL;
        v439 = 0;
        v451 = (void **)&v438;
        LOBYTE(v452) = 0;
        *(_QWORD *)&v438 = operator new(0x48uLL);
        *((_QWORD *)&v438 + 1) = v438;
        v439 = v438 + 72;
        *((_QWORD *)&v438 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v439, (uint64_t)&v453, (uint64_t)&v460, v438);
        Espresso::net::insert_layers((uint64_t)v122, (int *)&v436, (uint64_t *)&v438);
        v451 = (void **)&v438;
        std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v451);
        v451 = (void **)v459;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v451);
        v451 = (void **)&v456;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v451);
        v194 = v455;
        if (v455)
        {
          v195 = (unint64_t *)&v455->__shared_owners_;
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        ++v189;
        v187 += 18;
      }
      while (v187 != v188);
    }
    v453 = (void **)&v445 + 1;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v453);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v197 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
    if (*((_QWORD *)&v443 + 1))
    {
      v198 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    v200 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
    if (*((_QWORD *)&v442 + 1))
    {
      v201 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
    v203 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
    if (*((_QWORD *)&v441 + 1))
    {
      v204 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    v206 = (std::__shared_weak_count *)v440[1];
    if (v440[1])
    {
      v207 = (unint64_t *)((char *)v440[1] + 8);
      do
        v208 = __ldaxr(v207);
      while (__stlxr(v208 - 1, v207));
      if (!v208)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v450[1]);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v449[1]);
    v209 = (std::__shared_weak_count *)*((_QWORD *)&v448 + 1);
    if (*((_QWORD *)&v448 + 1))
    {
      v210 = (unint64_t *)(*((_QWORD *)&v448 + 1) + 8);
      do
        v211 = __ldaxr(v210);
      while (__stlxr(v211 - 1, v210));
      if (!v211)
      {
        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
        std::__shared_weak_count::__release_weak(v209);
      }
    }

    v4 = (uint64_t *)a1;
    v212 = *(Espresso **)a1;
    v213 = *(std::__shared_weak_count **)(a1 + 8);
    v411 = *(Espresso **)a1;
    v412 = v213;
    if (v213)
    {
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldxr(v214);
      while (__stxr(v215 + 1, v214));
      *(_QWORD *)&v448 = v212;
      *((_QWORD *)&v448 + 1) = v213;
      v216 = (unint64_t *)&v213->__shared_owners_;
      do
        v217 = __ldxr(v216);
      while (__stxr(v217 + 1, v216));
    }
    else
    {
      v448 = (unint64_t)v212;
    }
    v218 = (unint64_t *)*((_QWORD *)v212 + 3);
    v440[0] = *((void **)v212 + 2);
    v440[1] = v218;
    if (v218)
    {
      v219 = v218 + 1;
      do
        v220 = __ldxr(v219);
      while (__stxr(v220 + 1, v219));
    }
    v221 = *(_DWORD *)(**((_QWORD **)v212 + 4) + 12);
    v453 = (void **)v212;
    v454 = (char *)v213;
    if (v213)
    {
      v222 = (unint64_t *)&v213->__shared_owners_;
      do
        v223 = __ldxr(v222);
      while (__stxr(v223 + 1, v222));
    }
    Espresso::optimize_network((uint64_t *)v440, v221, (uint64_t)&v453, &__block_literal_global_80, &v438);
    if (v213)
    {
      v224 = (unint64_t *)&v213->__shared_owners_;
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v226 = (std::__shared_weak_count *)v440[1];
    if (v440[1])
    {
      v227 = (unint64_t *)((char *)v440[1] + 8);
      do
        v228 = __ldaxr(v227);
      while (__stlxr(v228 - 1, v227));
      if (!v228)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }
    v229 = (std::__shared_weak_count *)*((_QWORD *)&v448 + 1);
    if (*((_QWORD *)&v448 + 1))
    {
      v230 = (unint64_t *)(*((_QWORD *)&v448 + 1) + 8);
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
        std::__shared_weak_count::__release_weak(v229);
      }
    }
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, &v438);
    v232 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
    if (*((_QWORD *)&v438 + 1))
    {
      v233 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    if (v412)
    {
      v235 = &v412->__shared_owners_;
      do
        v236 = __ldaxr((unint64_t *)v235);
      while (__stlxr(v236 - 1, (unint64_t *)v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
        std::__shared_weak_count::__release_weak(v412);
      }
    }
  }
LABEL_339:
  if (*(_BYTE *)(a2 + 13))
  {
    v237 = *v4;
    v238 = (std::__shared_weak_count *)v4[1];
    v409[2] = (char *)*v4;
    v410 = v238;
    if (v238)
    {
      v239 = (unint64_t *)&v238->__shared_owners_;
      do
        v240 = __ldxr(v239);
      while (__stxr(v240 + 1, v239));
    }
    v241 = *(unint64_t **)(v237 + 24);
    v440[0] = *(void **)(v237 + 16);
    v440[1] = v241;
    if (v241)
    {
      v242 = v241 + 1;
      do
        v243 = __ldxr(v242);
      while (__stxr(v243 + 1, v242));
    }
    v244 = *(_DWORD *)(**(_QWORD **)(v237 + 32) + 12);
    v453 = (void **)v237;
    v454 = (char *)v238;
    if (v238)
    {
      v245 = (unint64_t *)&v238->__shared_owners_;
      do
        v246 = __ldxr(v245);
      while (__stxr(v246 + 1, v245));
    }
    Espresso::optimize_network((uint64_t *)v440, v244, (uint64_t)&v453, &__block_literal_global_52_412, &v448);
    if (v238)
    {
      v247 = (unint64_t *)&v238->__shared_owners_;
      do
        v248 = __ldaxr(v247);
      while (__stlxr(v248 - 1, v247));
      if (!v248)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    v249 = (std::__shared_weak_count *)v440[1];
    if (v440[1])
    {
      v250 = (unint64_t *)((char *)v440[1] + 8);
      do
        v251 = __ldaxr(v250);
      while (__stlxr(v251 - 1, v250));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
        std::__shared_weak_count::__release_weak(v249);
      }
    }
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v4, &v448);
    v252 = (std::__shared_weak_count *)*((_QWORD *)&v448 + 1);
    if (*((_QWORD *)&v448 + 1))
    {
      v253 = (unint64_t *)(*((_QWORD *)&v448 + 1) + 8);
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    if (v410)
    {
      v255 = &v410->__shared_owners_;
      do
        v256 = __ldaxr((unint64_t *)v255);
      while (__stlxr(v256 - 1, (unint64_t *)v255));
      if (!v256)
      {
        ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
        std::__shared_weak_count::__release_weak(v410);
      }
    }
  }
  if (*(_BYTE *)(a2 + 14))
  {
    v257 = (char *)v4[1];
    v409[0] = (char *)*v4;
    v409[1] = v257;
    if (v257)
    {
      v258 = (unint64_t *)(v257 + 8);
      do
        v259 = __ldxr(v258);
      while (__stxr(v259 + 1, v258));
    }
    Espresso::convert_to_explicit_padding(v409, 1, 1);
    if (v257)
    {
      v260 = (unint64_t *)(v257 + 8);
      do
        v261 = __ldaxr(v260);
      while (__stlxr(v261 - 1, v260));
      if (!v261)
      {
        (*(void (**)(char *))(*(_QWORD *)v257 + 16))(v257);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v257);
      }
    }
  }
  v262 = *(_BYTE *)(a2 + 3);
  if (!*(_BYTE *)(a2 + 2))
  {
    if (!*(_BYTE *)(a2 + 3))
      goto LABEL_393;
    v262 = 1;
  }
  v263 = v262 ^ 1;
  v264 = *(_BYTE *)(a2 + 2) ^ 1;
  v265 = *(_DWORD *)(a2 + 104);
  v266 = *(_BYTE *)(a2 + 1);
  v267 = *(_BYTE *)(a2 + 48);
  if (v267)
  {
    printf("WARNING: Asymmetric quantization will use more inference memory on NE. Please use it only if symmetric quantization doesn't yield good results for  your  model.");
    v267 = 1;
  }
  v397 = xmmword_191A93330;
  v398 = 1112014848;
  v399 = v265;
  v400 = 0;
  v401 = v263;
  v402 = v266;
  v403 = v264;
  v404 = 0;
  v405 = v267;
  v407 = 0;
  v408 = 0;
  v406 = 0;
  v4 = (uint64_t *)a1;
  v268 = *(std::__shared_weak_count **)(a1 + 8);
  v396[0] = *(_QWORD *)a1;
  v396[1] = v268;
  if (v268)
  {
    v269 = (unint64_t *)&v268->__shared_owners_;
    do
      v270 = __ldxr(v269);
    while (__stxr(v270 + 1, v269));
  }
  Espresso::compress_net_weights_kmeans(&v397, (uint64_t)v396, *(_DWORD *)(a2 + 8));
  if (v268)
  {
    v271 = (unint64_t *)&v268->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  if (SHIBYTE(v408) < 0)
    operator delete(v406);
LABEL_393:
  if (!*(_BYTE *)(a2 + 109))
  {
    v375 = (std::__shared_weak_count *)v4[1];
    v395[0] = *v4;
    v395[1] = v375;
    if (v375)
    {
      v376 = (unint64_t *)&v375->__shared_owners_;
      do
        v377 = __ldxr(v376);
      while (__stxr(v377 + 1, v376));
    }
    Espresso::add_context_transfer_algos_hints((uint64_t)v395);
    if (v375)
    {
      v378 = (unint64_t *)&v375->__shared_owners_;
      do
        v379 = __ldaxr(v378);
      while (__stlxr(v379 - 1, v378));
      if (!v379)
      {
        ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
        std::__shared_weak_count::__release_weak(v375);
      }
    }
  }
  if (*(_BYTE *)a2)
  {
    v273 = (std::__shared_weak_count *)v4[1];
    v394[0] = *v4;
    v394[1] = v273;
    if (v273)
    {
      v274 = (unint64_t *)&v273->__shared_owners_;
      do
        v275 = __ldxr(v274);
      while (__stxr(v275 + 1, v274));
    }
    Espresso::convert_weights_to_fp16((uint64_t)v394);
    if (v273)
    {
      v276 = (unint64_t *)&v273->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
        std::__shared_weak_count::__release_weak(v273);
      }
    }
  }
  Espresso::run_pass_on_network<Espresso::pass_constant_if_conditions>(*v4);
  v278 = *(uint64_t **)(a2 + 56);
  v279 = *(uint64_t **)(a2 + 64);
  v280 = (uint64_t *)a1;
  if (v278 != v279)
  {
    while (1)
    {
      v281 = *((unsigned __int8 *)v278 + 23);
      if ((*((char *)v278 + 23) & 0x80000000) == 0)
      {
        v282 = v278;
        switch(*((_BYTE *)v278 + 23))
        {
          case 0xA:
            if (*v278 != 0x69746E6175716564 || *((_WORD *)v278 + 4) != 25978)
              goto LABEL_705;
            goto LABEL_419;
          case 0xB:
            if (*v278 == 0x6F72675F766E6F63 && *(uint64_t *)((char *)v278 + 3) == 0x7370756F72675F76)
              goto LABEL_706;
            if (*v278 != 0x726F66736E617274 || *(uint64_t *)((char *)v278 + 3) != 0x72656D726F66736ELL)
              goto LABEL_705;
            goto LABEL_597;
          case 0xC:
          case 0xE:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            goto LABEL_705;
          case 0xD:
            goto LABEL_677;
          case 0xF:
            if (*v278 != 0x736F70736E617274 || *(uint64_t *)((char *)v278 + 7) != 0x6E696168635F6573)
              goto LABEL_705;
            goto LABEL_569;
          case 0x10:
            if (*v278 != 0x746963696C707865 || v278[1] != 0x676E69646461705FLL)
              goto LABEL_705;
            goto LABEL_706;
          case 0x11:
            goto LABEL_698;
          case 0x17:
            if (*v278 != 0x736F70736E617274
              || v278[1] != 0x5F72656E6E695F65
              || *(uint64_t *)((char *)v278 + 15) != 0x746375646F72705FLL)
            {
              goto LABEL_705;
            }
            goto LABEL_545;
          case 0x1B:
            if (*v278 != 0x5F747265766E6F63
              || v278[1] != 0x68676965775F7868
              || v278[2] != 0x65705F6F745F7374
              || *(uint64_t *)((char *)v278 + 19) != 0x65636165705F6F74)
            {
              goto LABEL_705;
            }
            goto LABEL_615;
          case 0x1C:
            if (*v278 != 0x706D6F635F646461
              || v278[1] != 0x6170735F73736572
              || v278[2] != 0x706F72705F657372
              || *((_DWORD *)v278 + 6) != 2037674597)
            {
              goto LABEL_705;
            }
            goto LABEL_587;
          case 0x1D:
            goto LABEL_471;
          case 0x1E:
            if (*v278 != 0x5F65736977746C65
              || v278[1] != 0x78616D5F636C756DLL
              || v278[2] != 0x6B61656C5F6F745FLL
              || *(uint64_t *)((char *)v278 + 22) != 0x756C65725F796B61)
            {
              goto LABEL_705;
            }
            goto LABEL_720;
          case 0x1F:
            goto LABEL_459;
          case 0x20:
            goto LABEL_447;
          case 0x2A:
            if (!memcmp(v278, "fuse_log_softmax_multinomial_to_gumbel_max", 0x2AuLL))
              goto LABEL_508;
            goto LABEL_705;
          default:
            if (*((_BYTE *)v278 + 23))
              goto LABEL_705;
            goto LABEL_706;
        }
      }
      v284 = v278[1];
      if (v284 <= 22)
      {
        switch(v284)
        {
          case 10:
            if (*(_QWORD *)*v278 != 0x69746E6175716564 || *(_WORD *)(*v278 + 8) != 25978)
              goto LABEL_638;
LABEL_419:
            v286 = (Espresso::net *)v280[1];
            v391[0] = *v280;
            v391[1] = v286;
            if (v286)
            {
              v287 = (unint64_t *)((char *)v286 + 8);
              do
                v288 = __ldxr(v287);
              while (__stxr(v288 + 1, v287));
            }
            *(_OWORD *)v440 = 0u;
            v441 = 0u;
            LODWORD(v442) = 1065353216;
            Espresso::transform_dequantize((uint64_t)v391, (uint64_t)v440);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v440);
            if (!v286)
              goto LABEL_706;
            v289 = (unint64_t *)((char *)v286 + 8);
            do
              v290 = __ldaxr(v289);
            while (__stlxr(v290 - 1, v289));
            goto LABEL_726;
          case 11:
            if (*(_QWORD *)*v278 == 0x6F72675F766E6F63 && *(_QWORD *)(*v278 + 3) == 0x7370756F72675F76)
              goto LABEL_706;
            if (*(_QWORD *)*v278 != 0x726F66736E617274 || *(_QWORD *)(*v278 + 3) != 0x72656D726F66736ELL)
              goto LABEL_638;
LABEL_597:
            v286 = (Espresso::net *)v280[1];
            v388[0] = *v280;
            v388[1] = (uint64_t)v286;
            if (v286)
            {
              v334 = (unint64_t *)((char *)v286 + 8);
              do
                v335 = __ldxr(v334);
              while (__stxr(v335 + 1, v334));
            }
            Espresso::transformer_optimization(v388);
            if (!v286)
              goto LABEL_706;
            v336 = (unint64_t *)((char *)v286 + 8);
            do
              v290 = __ldaxr(v336);
            while (__stlxr(v290 - 1, v336));
            break;
          case 12:
          case 13:
          case 14:
            goto LABEL_638;
          case 15:
            if (*(_QWORD *)*v278 != 0x736F70736E617274 || *(_QWORD *)(*v278 + 7) != 0x6E696168635F6573)
              goto LABEL_638;
LABEL_569:
            v286 = (Espresso::net *)v280[1];
            v392[0] = (Espresso::net *)*v280;
            v392[1] = v286;
            if (v286)
            {
              v324 = (unint64_t *)((char *)v286 + 8);
              do
                v325 = __ldxr(v324);
              while (__stxr(v325 + 1, v324));
            }
            Espresso::fuse_transpose_chain(v392);
            if (!v286)
              goto LABEL_706;
            v326 = (unint64_t *)((char *)v286 + 8);
            do
              v290 = __ldaxr(v326);
            while (__stlxr(v290 - 1, v326));
            goto LABEL_726;
          case 16:
            if (*(_QWORD *)*v278 != 0x746963696C707865 || *(_QWORD *)(*v278 + 8) != 0x676E69646461705FLL)
              goto LABEL_638;
            goto LABEL_706;
          default:
            if (v284)
              goto LABEL_638;
            goto LABEL_706;
        }
        goto LABEL_726;
      }
      switch(v284)
      {
        case 23:
          if (*(_QWORD *)*v278 != 0x736F70736E617274
            || *(_QWORD *)(*v278 + 8) != 0x5F72656E6E695F65
            || *(_QWORD *)(*v278 + 15) != 0x746375646F72705FLL)
          {
            goto LABEL_638;
          }
LABEL_545:
          v286 = (Espresso::net *)v280[1];
          v390[0] = (char *)*v280;
          v390[1] = (char *)v286;
          if (v286)
          {
            v317 = (unint64_t *)((char *)v286 + 8);
            do
              v318 = __ldxr(v317);
            while (__stxr(v318 + 1, v317));
          }
          Espresso::fuse_transpose_inner_product(v390);
          if (v286)
          {
            v319 = (unint64_t *)((char *)v286 + 8);
            do
              v290 = __ldaxr(v319);
            while (__stlxr(v290 - 1, v319));
            goto LABEL_726;
          }
          goto LABEL_706;
        case 24:
        case 25:
        case 26:
        case 29:
          goto LABEL_638;
        case 27:
          if (*(_QWORD *)*v278 != 0x5F747265766E6F63
            || *(_QWORD *)(*v278 + 8) != 0x68676965775F7868
            || *(_QWORD *)(*v278 + 16) != 0x65705F6F745F7374
            || *(_QWORD *)(*v278 + 19) != 0x65636165705F6F74)
          {
            goto LABEL_638;
          }
LABEL_615:
          v286 = (Espresso::net *)v280[1];
          v393[0] = (uint64_t **)*v280;
          v393[1] = (uint64_t **)v286;
          if (v286)
          {
            v340 = (unint64_t *)((char *)v286 + 8);
            do
              v341 = __ldxr(v340);
            while (__stxr(v341 + 1, v340));
          }
          Espresso::convert_hx_engine_weights_to_peace_format(v393, 0);
          if (!v286)
            goto LABEL_706;
          v342 = (unint64_t *)((char *)v286 + 8);
          do
            v290 = __ldaxr(v342);
          while (__stlxr(v290 - 1, v342));
          goto LABEL_726;
        case 28:
          if (*(_QWORD *)*v278 != 0x706D6F635F646461
            || *(_QWORD *)(*v278 + 8) != 0x6170735F73736572
            || *(_QWORD *)(*v278 + 16) != 0x706F72705F657372
            || *(_DWORD *)(*v278 + 24) != 2037674597)
          {
            goto LABEL_638;
          }
LABEL_587:
          v330 = *v280;
          std::string::basic_string[abi:ne180100]<0>(v440, "compress_sparse");
          v453 = v440;
          v331 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v330 + 472), v440, (uint64_t)&std::piecewise_construct, (_OWORD **)&v453);
          MEMORY[0x19401C808]((char *)v331 + 56, "1");
          goto LABEL_709;
        case 30:
          if (*(_QWORD *)*v278 != 0x5F65736977746C65
            || *(_QWORD *)(*v278 + 8) != 0x78616D5F636C756DLL
            || *(_QWORD *)(*v278 + 16) != 0x6B61656C5F6F745FLL
            || *(_QWORD *)(*v278 + 22) != 0x756C65725F796B61)
          {
            goto LABEL_638;
          }
LABEL_720:
          v286 = (Espresso::net *)v280[1];
          v389[0] = *v280;
          v389[1] = v286;
          if (v286)
          {
            v371 = (unint64_t *)((char *)v286 + 8);
            do
              v372 = __ldxr(v371);
            while (__stxr(v372 + 1, v371));
          }
          Espresso::fuse_eltwise_mulc_max_to_leaky_relu((uint64_t)v389);
          if (!v286)
            goto LABEL_706;
          v373 = (unint64_t *)((char *)v286 + 8);
          do
            v290 = __ldaxr(v373);
          while (__stlxr(v290 - 1, v373));
          goto LABEL_726;
        default:
          if (v284 != 42)
            goto LABEL_638;
          if (!memcmp((const void *)*v278, "fuse_log_softmax_multinomial_to_gumbel_max", 0x2AuLL))
          {
LABEL_508:
            v286 = (Espresso::net *)v280[1];
            v387[0] = *v280;
            v387[1] = v286;
            if (v286)
            {
              v307 = (unint64_t *)((char *)v286 + 8);
              do
                v308 = __ldxr(v307);
              while (__stxr(v308 + 1, v307));
            }
            Espresso::fuse_log_softmax_multinomial_to_gumbel_max((uint64_t)v387);
            if (!v286)
              goto LABEL_706;
            v309 = (unint64_t *)((char *)v286 + 8);
            do
              v290 = __ldaxr(v309);
            while (__stlxr(v290 - 1, v309));
            goto LABEL_726;
          }
          if ((v281 & 0x80) != 0)
          {
LABEL_638:
            if (v278[1] == 29)
            {
              if (*(_QWORD *)*v278 == 0x636572705F776F6CLL
                && *(_QWORD *)(*v278 + 8) == 0x63615F6E6F697369
                && *(_QWORD *)(*v278 + 16) == 0x6974616C756D7563
                && *(_QWORD *)(*v278 + 21) == 0x63665F6E6F697461)
              {
                goto LABEL_683;
              }
              if ((v281 & 0x80) == 0)
                goto LABEL_674;
            }
            if (v278[1] == 31)
            {
              if (*(_QWORD *)*v278 == 0x636572705F776F6CLL
                && *(_QWORD *)(*v278 + 8) == 0x63615F6E6F697369
                && *(_QWORD *)(*v278 + 16) == 0x6974616C756D7563
                && *(_QWORD *)(*v278 + 23) == 0x766E6F635F6E6F69)
              {
                goto LABEL_711;
              }
              if ((v281 & 0x80) == 0)
                goto LABEL_674;
            }
            if (v278[1] != 32)
              goto LABEL_690;
            if (*(_QWORD *)*v278 != 0x726F66736E617274
              || *(_QWORD *)(*v278 + 8) != 0x6369746174735F6DLL
              || *(_QWORD *)(*v278 + 16) != 0x7A69746E6175715FLL
              || *(_QWORD *)(*v278 + 24) != 0x6C656E72656B5F65)
            {
              if ((v281 & 0x80) == 0)
              {
LABEL_674:
                if (v281 == 13)
                {
LABEL_677:
                  if (*v278 != 0x5F657A6565757173 || *(uint64_t *)((char *)v278 + 5) != 0x706F7665645F657ALL)
                    goto LABEL_705;
                }
                else
                {
                  v282 = v278;
                  if (v281 != 17)
                    goto LABEL_705;
LABEL_698:
                  v361 = *v282;
                  v362 = v282[1];
                  v363 = *((unsigned __int8 *)v282 + 16);
                  if (v361 != 0x73736572706D6F63 || v362 != 0x746E656D6765735FLL || v363 != 115)
                    goto LABEL_705;
                }
LABEL_708:
                Espresso::run_pass_on_network<Espresso::pass_compress_segments>(*v280);
                v366 = *(Espresso **)a1;
                std::string::basic_string[abi:ne180100]<0>(v440, "experimental.ane.dev_op_override");
                v453 = v440;
                v367 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v366 + 59, v440, (uint64_t)&std::piecewise_construct, (_OWORD **)&v453);
                std::string::operator=((std::string *)((char *)v367 + 56), (const std::string *)(a2 + 80));
LABEL_709:
                v280 = (uint64_t *)a1;
                if ((SBYTE7(v441) & 0x80000000) == 0)
                  goto LABEL_706;
LABEL_719:
                operator delete(v440[0]);
                goto LABEL_706;
              }
LABEL_690:
              if (v278[1] == 13)
              {
                if (*(_QWORD *)*v278 == 0x5F657A6565757173 && *(_QWORD *)(*v278 + 5) == 0x706F7665645F657ALL)
                  goto LABEL_708;
                if ((v281 & 0x80) == 0)
                  goto LABEL_705;
              }
              if (v278[1] != 17)
                goto LABEL_705;
              v282 = (uint64_t *)*v278;
              goto LABEL_698;
            }
          }
          else
          {
            if (v281 <= 28)
              goto LABEL_674;
            if (v281 == 29)
            {
LABEL_471:
              if (*v278 != 0x636572705F776F6CLL
                || v278[1] != 0x63615F6E6F697369
                || v278[2] != 0x6974616C756D7563
                || *(uint64_t *)((char *)v278 + 21) != 0x63665F6E6F697461)
              {
                goto LABEL_705;
              }
LABEL_683:
              v286 = (Espresso::net *)v280[1];
              v386[0] = *v280;
              v386[1] = v286;
              if (v286)
              {
                v357 = (unint64_t *)((char *)v286 + 8);
                do
                  v358 = __ldxr(v357);
                while (__stxr(v358 + 1, v357));
              }
              Espresso::low_precision_accumulation_fc((uint64_t)v386);
              if (!v286)
                goto LABEL_706;
              v359 = (unint64_t *)((char *)v286 + 8);
              do
                v290 = __ldaxr(v359);
              while (__stlxr(v290 - 1, v359));
LABEL_726:
              if (!v290)
              {
                (*(void (**)(Espresso::net *))(*(_QWORD *)v286 + 16))(v286);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v286);
              }
              goto LABEL_706;
            }
            if (v281 == 31)
            {
LABEL_459:
              if (*v278 != 0x636572705F776F6CLL
                || v278[1] != 0x63615F6E6F697369
                || v278[2] != 0x6974616C756D7563
                || *(uint64_t *)((char *)v278 + 23) != 0x766E6F635F6E6F69)
              {
                goto LABEL_705;
              }
LABEL_711:
              v286 = (Espresso::net *)v280[1];
              v385[0] = *v280;
              v385[1] = v286;
              if (v286)
              {
                v368 = (unint64_t *)((char *)v286 + 8);
                do
                  v369 = __ldxr(v368);
                while (__stxr(v369 + 1, v368));
              }
              Espresso::low_precision_accumulation_conv((uint64_t)v385);
              if (!v286)
                goto LABEL_706;
              v370 = (unint64_t *)((char *)v286 + 8);
              do
                v290 = __ldaxr(v370);
              while (__stlxr(v290 - 1, v370));
              goto LABEL_726;
            }
            if (v281 != 32)
              goto LABEL_705;
LABEL_447:
            if (*v278 != 0x726F66736E617274
              || v278[1] != 0x6369746174735F6DLL
              || v278[2] != 0x7A69746E6175715FLL
              || v278[3] != 0x6C656E72656B5F65)
            {
LABEL_705:
              Espresso::run_custom_pass_on_network(v278, *v280);
              v280 = (uint64_t *)a1;
              goto LABEL_706;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(v440, "transform_static_quantize_kernel");
          v280 = (uint64_t *)a1;
          Espresso::run_custom_pass_on_network((uint64_t *)v440, *(_QWORD *)a1);
          if (SBYTE7(v441) < 0)
            goto LABEL_719;
LABEL_706:
          v278 += 3;
          if (v278 == v279)
            goto LABEL_728;
          break;
      }
    }
  }
LABEL_728:
  result = *(__n128 *)v280;
  *a3 = *(_OWORD *)v280;
  *v280 = 0;
  v280[1] = 0;
  return result;
}

void sub_19130EC60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::fuse_biases(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v42 = *a1;
  v43 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(v3 + 24);
  v46 = *(_QWORD *)(v3 + 16);
  v47 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_DWORD *)(**(_QWORD **)(v3 + 32) + 12);
  v44 = v3;
  v45 = v4;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Espresso::optimize_network(&v46, v10, (uint64_t)&v44, &__block_literal_global_56_431, a2);
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v15 = v47;
  if (v47)
  {
    v16 = (unint64_t *)&v47->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v43)
  {
    v18 = &v43->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v20 = *a2;
  v21 = (std::__shared_weak_count *)a2[1];
  v40 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(v20 + 24);
  v46 = *(_QWORD *)(v20 + 16);
  v47 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(_DWORD *)(**(_QWORD **)(v20 + 32) + 12);
  v44 = v20;
  v45 = v21;
  if (v21)
  {
    v28 = (unint64_t *)&v21->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  Espresso::optimize_network(&v46, v27, (uint64_t)&v44, &__block_literal_global_62_428, &v41);
  if (v21)
  {
    v30 = (unint64_t *)&v21->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v32 = v47;
  if (v47)
  {
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a2, &v41);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v40)
  {
    v38 = (unint64_t *)&v40->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_19130F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::fuse_batchnorm(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  v19 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(std::__shared_weak_count **)(v2 + 24);
  v21 = *(_QWORD *)(v2 + 16);
  v22 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 12);
  v20[0] = v2;
  v20[1] = v3;
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::optimize_network(&v21, v9, (uint64_t)v20, &__block_literal_global_68_425, a2);
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v19)
  {
    v17 = (unint64_t *)&v19->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19130F3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::fuse_nonlinearities(Espresso *this, Espresso::net *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  const Espresso::base_kernel *v16;
  uint64_t **v17;
  int v18;
  uint64_t **v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const void *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  _DWORD *v69;
  int v70;
  _DWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _QWORD *v77;
  void *v78;
  std::__shared_weak_count *v79;
  __int128 v80;
  int v81;
  void *v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  int v85;
  _DWORD *v86;
  _DWORD *v87;
  unint64_t v88;
  char v89[8];
  std::__shared_weak_count *v90;
  uint64_t *v91[3];
  uint64_t *v92[4];

  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v89, this);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v85 = 0;
  v3 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) == v3)
    goto LABEL_104;
  LODWORD(v4) = 0;
  v5 = 0;
  do
  {
    v6 = *(_OWORD *)(v3 + 16 * v5);
    v84 = v6;
    if (*((_QWORD *)&v6 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v6;
    v10 = *(const void **)(v6 + 64);
    if (v10)
    {
      if (v11)
      {
        v12 = *(std::__shared_weak_count **)(v9 + 72);
        v82 = v11;
        v83 = v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        v15 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v11 + 384))(v11);
        if (Espresso::is_kernel_generating_output(*(Espresso **)(v9 + 64), v16))
          goto LABEL_47;
        v17 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v92, v4, &v85);
        if ((char *)v17[6] - (char *)v17[5] != 4)
          goto LABEL_47;
        v81 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v92, v4, &v85)[5];
        v18 = v81;
        v19 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v91, v81, &v81);
        if ((char *)v19[6] - (char *)v19[5] != 4)
          goto LABEL_47;
        v20 = *(_OWORD *)(*((_QWORD *)this + 4) + 16 * v18);
        v80 = v20;
        if (*((_QWORD *)&v20 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = v20;
        v24 = *(const void **)(v20 + 64);
        if (v24)
        {
          if (v25)
          {
            v26 = *(std::__shared_weak_count **)(v23 + 72);
            v75 = (uint64_t)v25;
            v76 = v26;
            if (v26)
            {
              v27 = (unint64_t *)&v26->__shared_owners_;
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
            }
            if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v25 + 384))(v25) + 24)
              || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 384))(v75) + 28)
              || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 384))(v75) + 60) != -1)
            {
              goto LABEL_25;
            }
            if (v15 == 1)
            {
              v49 = (_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 384))(v75) + 28);
            }
            else
            {
              if (v15)
              {
LABEL_25:
                v29 = v76;
                if (!v76)
                {
LABEL_41:
                  v36 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
                  if (*((_QWORD *)&v80 + 1))
                  {
                    v37 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
                    do
                      v38 = __ldaxr(v37);
                    while (__stlxr(v38 - 1, v37));
                    if (!v38)
                    {
                      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                      std::__shared_weak_count::__release_weak(v36);
                    }
                  }
                  v12 = v83;
LABEL_47:
                  if (v12)
                  {
                    v39 = (unint64_t *)&v12->__shared_owners_;
                    do
                      v40 = __ldaxr(v39);
                    while (__stlxr(v40 - 1, v39));
                    if (!v40)
                    {
                      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                      std::__shared_weak_count::__release_weak(v12);
                    }
                  }
                  goto LABEL_52;
                }
                v30 = (unint64_t *)&v76->__shared_owners_;
                do
                  v31 = __ldaxr(v30);
                while (__stlxr(v31 - 1, v30));
LABEL_39:
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
                goto LABEL_41;
              }
              v49 = (_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 384))(v75) + 24);
            }
            *v49 = 1;
            v50 = v76;
            if (v76)
            {
              v51 = (unint64_t *)&v76->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v23 = v80;
            v9 = v84;
LABEL_81:
            v53 = *(char **)(v23 + 64);
            v54 = *(_QWORD *)(v9 + 64);
            v55 = operator new(8uLL);
            *v55 = v54;
            v76 = (std::__shared_weak_count *)(v55 + 1);
            v77 = v55 + 1;
            v75 = (uint64_t)v55;
            Espresso::merge_kernel_attributes(v53, &v75);
            operator delete(v55);
            v56 = v87;
            if ((unint64_t)v87 >= v88)
            {
              v58 = v86;
              v59 = v87 - v86;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v61 = v88 - (_QWORD)v86;
              if ((uint64_t)(v88 - (_QWORD)v86) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
                v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v62);
              else
                v63 = 0;
              v64 = (_DWORD *)(v62 + 4 * v59);
              *v64 = v85;
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v86 = v64;
              v88 = v62 + 4 * v63;
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v87 = v85;
              v57 = v56 + 1;
            }
            v87 = v57;
            v75 = v85;
            v66 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 96, v85, &v75);
            v78 = (void *)v81;
            v67 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 96, v81, &v78);
            if (v67 != v66)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v67 + 3), (std::string *)v66[3], (std::string *)v66[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66[4] - v66[3]) >> 3));
            goto LABEL_41;
          }
          v75 = 0;
          v76 = 0;
          if (v44)
          {
            v45 = *(std::__shared_weak_count **)(v23 + 72);
            v78 = v44;
            v79 = v45;
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            if (!*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v44 + 384))(v44) + 12)
              && !*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v78 + 384))(v78) + 16)
              && *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v78 + 384))(v78) + 52) == -1)
            {
              if (v15 == 1)
              {
                v48 = (_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v78 + 384))(v78) + 16);
                goto LABEL_80;
              }
              if (!v15)
              {
                v48 = (_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v78 + 384))(v78) + 12);
LABEL_80:
                *v48 = 1;
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v78);
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v75);
                goto LABEL_81;
              }
            }
LABEL_31:
            v32 = v79;
            if (v79)
            {
              v33 = (unint64_t *)&v79->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            v29 = v76;
            if (!v76)
              goto LABEL_41;
            v35 = (unint64_t *)&v76->__shared_owners_;
            do
              v31 = __ldaxr(v35);
            while (__stlxr(v31 - 1, v35));
            goto LABEL_39;
          }
        }
        else
        {
          v75 = 0;
          v76 = 0;
        }
        v78 = 0;
        v79 = 0;
        goto LABEL_31;
      }
    }
LABEL_52:
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v4 = ++v85;
    v3 = *((_QWORD *)this + 4);
    v5 = v4;
  }
  while (v4 < (*((_QWORD *)this + 5) - v3) >> 4);
  v68 = v86;
  v69 = v87;
  if (v86 != v87)
  {
    v70 = 0;
    v71 = v86;
    do
    {
      Espresso::net::remove_layer(this, v70 + *v71++);
      --v70;
    }
    while (v71 != v69);
  }
  if (v68)
    operator delete(v68);
LABEL_104:
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v92[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v91[1]);
  v72 = v90;
  if (v90)
  {
    v73 = (unint64_t *)&v90->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_19130FAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a28);
  _Unwind_Resume(a1);
}

void remove_unused_layers(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  Espresso::net *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  Espresso::net *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t *v27[6];

  v5 = *(Espresso::net **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v23 = *(Espresso::net **)a2;
  v24 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v25, v5);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v25, (uint64_t)v5, (uint64_t)v4);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v12 = (_QWORD *)*a1;
  v10 = a1 + 1;
  v11 = v12;
  if (v12 != v10)
  {
    v13 = 0;
    do
    {
      v22 = *((_DWORD *)v11 + 7);
      v14 = v22;
      v15 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v27, v22, &v22);
      if (v15[5] == v15[6])
        Espresso::net::remove_layer(*(Espresso::net **)a2, v14 - v13++);
      v16 = (_QWORD *)v11[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v11[2];
          v18 = *v17 == (_QWORD)v11;
          v11 = v17;
        }
        while (!v18);
      }
      v11 = v17;
    }
    while (v17 != v10);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v27[4]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v27[1]);
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19130FCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t *result, int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t std::map<std::string,Espresso::layer_shape>::map[abi:ne180100](uint64_t a1, __int128 **a2)
{
  _QWORD *v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (__int128 *)(a2 + 1);
  v5 = *a2;
  if (*a2 != (__int128 *)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t **)a1, v3, (_QWORD *)v5 + 4, v5 + 2);
      v6 = (__int128 *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(__int128 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (__int128 *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_19130FE10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void reshape_network(char **a1, uint64_t **a2)
{
  char *v3;
  __int128 *v4;
  __int128 *v5;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  __int128 *v26[3];
  char *v27[4];
  std::__shared_weak_count *v28;
  char **v29;
  char *v30[2];

  v30[0] = 0;
  v30[1] = 0;
  v29 = v30;
  v3 = *a1;
  v4 = (__int128 *)*((_QWORD *)*a1 + 80);
  v5 = (__int128 *)*((_QWORD *)*a1 + 81);
  if (v4 != v5)
  {
    do
    {
      v26[0] = v4;
      v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v4, v26);
      v26[0] = v4;
      v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v29, v4, v26);
      v9 = *(_OWORD *)(v7 + 56);
      v10 = *(_OWORD *)(v7 + 72);
      *((_QWORD *)v8 + 11) = *((_QWORD *)v7 + 11);
      *(_OWORD *)(v8 + 72) = v10;
      *(_OWORD *)(v8 + 56) = v9;
      if (v8 != v7)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v8 + 96, *((char **)v7 + 12), *((_QWORD *)v7 + 13), (uint64_t)(*((_QWORD *)v7 + 13) - *((_QWORD *)v7 + 12)) >> 2);
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v5);
    v3 = *a1;
  }
  v11 = (std::__shared_weak_count *)a1[1];
  v27[3] = v3;
  v28 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (std::__shared_weak_count *)a1[1];
    v24 = *a1;
    v25 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v24, (uint64_t)&v29, (uint64_t)v26);
  Espresso::shape_network_recursive((Espresso *)v3, (Espresso::net *)v26, 0, 0, v17);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v27, v27[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v26, (char *)v26[1]);
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v29, v30[0]);
}

void sub_19130FFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  char *v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, char *);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  Espresso::network_shape::~network_shape((char **)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v2 - 72, *(char **)(v2 - 64));
  _Unwind_Resume(a1);
}

void Espresso::network_shape::~network_shape(char **this)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(this + 3), this[4]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this, this[1]);
}

void Espresso::network_optimization_graph::~network_optimization_graph(Espresso::network_optimization_graph *this)
{
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)this + 6));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)this + 3));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void Espresso::fold_batchnorm(const Espresso::net **a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const Espresso::net *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  int v21;
  std::__shared_weak_count *v22;
  const Espresso::net *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v46;
  std::__shared_weak_count *v47;
  const Espresso::net *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  const void *v56;
  void *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _BOOL4 v62;
  const void *v63;
  void *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _BOOL4 v69;
  std::string *v70;
  std::string *v71;
  std::string::size_type v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;
  _QWORD *v85;
  void **v86;
  unint64_t *v87;
  unint64_t v88;
  std::string::size_type v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD *v101;
  _QWORD *v102;
  void **v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void **v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float *v148;
  std::string *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void **v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float *v158;
  std::string *v159;
  std::string::size_type v160;
  uint64_t v161;
  uint64_t v163;
  int v164;
  int v165;
  std::string::size_type v166;
  uint64_t v167;
  uint64_t v169;
  int v170;
  int v171;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void **v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  void **v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::string *v236[3];
  std::string *v237[3];
  uint64_t v238;
  std::__shared_weak_count *v239;
  const Espresso::net *v240;
  std::__shared_weak_count *v241;
  const Espresso::net *v242;
  std::__shared_weak_count *v243;
  std::string v244;
  __int128 v245;
  uint64_t v246[2];
  uint64_t v247[2];
  uint64_t v248;
  std::__shared_weak_count *v249;
  _QWORD *v250[5];
  std::string __p;
  Espresso::net *v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count *v255;
  uint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  void *v259;
  std::__shared_weak_count *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  std::string *v270;
  uint64_t v271;
  uint64_t v272;
  void *lpsrc;
  std::__shared_weak_count *v274;
  std::string **v275;
  std::__shared_weak_count *v276;
  _BYTE __str[32];
  Espresso *v278[2];
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  void *v287;
  std::__shared_weak_count *v288;
  std::string v289;
  __int128 v290;

  v4 = (std::__shared_weak_count *)*((_QWORD *)*a1 + 3);
  v247[0] = *((_QWORD *)*a1 + 2);
  v247[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v246[0] = 0;
  v246[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v248, v247, 0, v246);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = *a1;
  v10 = *((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 5) != v10)
  {
    v11 = 0;
    do
    {
      v12 = *(_OWORD *)(v10 + 16 * v11);
      v245 = v12;
      if (*((_QWORD *)&v12 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = v12;
      v16 = (_OWORD *)(v12 + 40);
      if (*(char *)(v12 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(v12 + 40), *(_QWORD *)(v12 + 48));
      }
      else
      {
        *(_OWORD *)&v244.__r_.__value_.__l.__data_ = *v16;
        v244.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 56);
      }
      if (*(char *)(v15 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v15 + 200), *(_QWORD *)(v15 + 208));
      }
      else
      {
        *(_OWORD *)__str = *(_OWORD *)(v15 + 200);
        *(_QWORD *)&__str[16] = *(_QWORD *)(v15 + 216);
      }
      std::string::operator=(&__p, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if ((*((_BYTE *)&v244.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v244.__r_.__value_.__l.__size_ != 11)
        {
          if (v244.__r_.__value_.__l.__size_ != 13)
            goto LABEL_49;
          v17 = (std::string *)v244.__r_.__value_.__r.__words[0];
LABEL_29:
          v18 = v17->__r_.__value_.__r.__words[0];
          v19 = *(std::string::size_type *)((char *)v17->__r_.__value_.__r.__words + 5);
          if (v18 != 0x6C6F766E6F636564 || v19 != 0x6E6F6974756C6F76)
            goto LABEL_49;
          v21 = *(_DWORD *)(v15 + 8);
          if (!v21 || v21 == 80000 || v21 == 100)
          {
            v23 = *a1;
            v22 = (std::__shared_weak_count *)a1[1];
            v240 = *a1;
            v241 = v22;
            if (v22)
            {
              v24 = (unint64_t *)&v22->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            v26 = *(_OWORD *)(*((_QWORD *)v23 + 4) + 16 * (int)v11);
            v290 = v26;
            if (*((_QWORD *)&v26 + 1))
            {
              v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
            }
            v29 = v26;
            v30 = (_OWORD *)(v26 + 40);
            if (*(char *)(v26 + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(v26 + 40), *(_QWORD *)(v26 + 48));
            }
            else
            {
              *(_OWORD *)&v289.__r_.__value_.__l.__data_ = *v30;
              v289.__r_.__value_.__r.__words[2] = *(_QWORD *)(v26 + 56);
            }
            v56 = *(const void **)(v29 + 64);
            if (v56
            {
              v58 = v57;
              v59 = *(std::__shared_weak_count **)(v29 + 72);
              v287 = v57;
              v288 = v59;
              if (v59)
              {
                v60 = (unint64_t *)&v59->__shared_owners_;
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
              }
              v62 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v57 + 384))(v57) + 112) != 0;
            }
            else
            {
              v58 = 0;
              v62 = 0;
              v287 = 0;
              v288 = 0;
            }
            if (*(char *)(v29 + 223) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v29 + 200), *(_QWORD *)(v29 + 208));
            }
            else
            {
              *(_OWORD *)__str = *(_OWORD *)(v29 + 200);
              *(_QWORD *)&__str[16] = *(_QWORD *)(v29 + 216);
            }
            std::string::operator=(&__p, (const std::string *)__str);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            if (!v62)
              goto LABEL_155;
            if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v289.__r_.__value_.__l.__size_ == 11)
              {
                if (*(_QWORD *)v289.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
                  || *(_QWORD *)(v289.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
                {
                  goto LABEL_155;
                }
                goto LABEL_130;
              }
              if (v289.__r_.__value_.__l.__size_ == 13)
              {
                v70 = (std::string *)v289.__r_.__value_.__r.__words[0];
LABEL_124:
                v72 = v70->__r_.__value_.__r.__words[0];
                v73 = *(std::string::size_type *)((char *)v70->__r_.__value_.__r.__words + 5);
                v74 = v72 == 0x6C6F766E6F636564 && v73 == 0x6E6F6974756C6F76;
                if (v74 && *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v58 + 384))(v58) + 116) == 1)
                  goto LABEL_130;
              }
LABEL_155:
              v107 = *(std::__shared_weak_count **)(v29 + 72);
              v267 = *(_QWORD *)(v29 + 64);
              v268 = v107;
              if (v107)
              {
                v108 = (unint64_t *)&v107->__shared_owners_;
                do
                  v109 = __ldxr(v108);
                while (__stxr(v109 + 1, v108));
              }
              lpsrc = (void *)(int)v11;
              v110 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v23 + 56, (int)v11, &lpsrc);
              memset(__str, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__str, v110[3], v110[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110[4] - v110[3]) >> 3));
              v265 = (int)v11;
              v111 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v23 + 96, (int)v11, &v265);
              v270 = 0;
              v271 = 0;
              v272 = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v270, v111[3], v111[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111[4] - v111[3]) >> 3));
              Espresso::sequential_builder::add_kernel((uint64_t)&v248, &v267, (uint64_t)v30, v29 + 16, (std::string **)__str, &v270);
              v275 = &v270;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
              v275 = (std::string **)__str;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
              v112 = v268;
              if (v268)
              {
                v113 = (unint64_t *)&v268->__shared_owners_;
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
LABEL_161:
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
            }
            else
            {
              if (HIBYTE(v289.__r_.__value_.__r.__words[2]) != 11)
              {
                if (HIBYTE(v289.__r_.__value_.__r.__words[2]) == 13)
                {
                  v70 = &v289;
                  goto LABEL_124;
                }
                goto LABEL_155;
              }
              if (v289.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
                || *(std::string::size_type *)((char *)v289.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
              {
                goto LABEL_155;
              }
LABEL_130:
              v75 = (*(uint64_t (**)(void *))(*(_QWORD *)v58 + 384))(v58);
              v77 = *(_OWORD *)(v75 + 128);
              v76 = *(_OWORD *)(v75 + 144);
              v78 = *(_QWORD *)(v75 + 160);
              v283 = *(_OWORD *)(v75 + 112);
              v79 = *(_OWORD *)v75;
              v80 = *(_OWORD *)(v75 + 32);
              *(_OWORD *)&__str[16] = *(_OWORD *)(v75 + 16);
              *(_OWORD *)v278 = v80;
              *(_OWORD *)__str = v79;
              v81 = *(_OWORD *)(v75 + 48);
              v82 = *(_OWORD *)(v75 + 64);
              v83 = *(_OWORD *)(v75 + 96);
              v281 = *(_OWORD *)(v75 + 80);
              v282 = v83;
              v279 = v81;
              v280 = v82;
              v286 = v78;
              v284 = v77;
              v285 = v76;
              LODWORD(v283) = 0;
              v263 = (int)v11;
              v84 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v23 + 56, (int)v11, &v263);
              v270 = 0;
              v271 = 0;
              v272 = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v270, v84[3], v84[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84[4] - v84[3]) >> 3));
              v261 = (int)v11;
              v85 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v23 + 96, (int)v11, &v261);
              v267 = 0;
              v268 = 0;
              v269 = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v267, v85[3], v85[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85[4] - v85[3]) >> 3));
              Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, &v248, (uint64_t)&v289, v29 + 16, (uint64_t)__str, (uint64_t)v270, v271, &v267);
              if (lpsrc
              {
                v275 = (std::string **)v86;
                v276 = v274;
                if (v274)
                {
                  v87 = (unint64_t *)&v274->__shared_owners_;
                  do
                    v88 = __ldxr(v87);
                  while (__stxr(v88 + 1, v87));
                  goto LABEL_226;
                }
              }
              else
              {
                v276 = 0;
                v275 = 0;
LABEL_226:
                v140 = v274;
                if (v274)
                {
                  v141 = (unint64_t *)&v274->__shared_owners_;
                  do
                    v142 = __ldaxr(v141);
                  while (__stlxr(v142 - 1, v141));
                  if (!v142)
                  {
                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                    std::__shared_weak_count::__release_weak(v140);
                  }
                }
              }
              v265 = (uint64_t)&v267;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
              v265 = (uint64_t)&v270;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
              v143 = (void **)v275;
              ((void (*)(void **__return_ptr, std::string **))(*v275)[20].__r_.__value_.__l.__size_)(&lpsrc, v275);
              v144 = v287;
              (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v287 + 456))(&v265, v287);
              (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v144 + 448))(&v263, v144);
              Espresso::blob<float,4>::copy(&v261, v265);
              v145 = 0;
              v146 = v261;
              v147 = *(int *)(v265 + 8);
              do
              {
                v147 *= *(int *)(v265 + 12 + v145);
                v145 += 4;
              }
              while (v145 != 12);
              memcpy(*(void **)(v261 + 24), *(const void **)(v265 + 24), 4 * v147);
              if ((*((_BYTE *)&v289.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                if (HIBYTE(v289.__r_.__value_.__r.__words[2]) != 11)
                {
                  if (HIBYTE(v289.__r_.__value_.__r.__words[2]) == 13)
                  {
                    v149 = &v289;
                    goto LABEL_252;
                  }
                  goto LABEL_286;
                }
                if (v289.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
                  || *(std::string::size_type *)((char *)v289.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
                {
                  goto LABEL_286;
                }
LABEL_284:
                v163 = LODWORD(v278[1]);
                v164 = *(_DWORD *)(v146 + 12) * *(_DWORD *)(v146 + 8) * *(_DWORD *)(v146 + 16);
                v165 = 1;
LABEL_285:
                Espresso::util_bake_batchnorm_generic(v163, v164, v165, *(_QWORD *)(v146 + 24), *(const float **)(v146 + 24), *(float **)(v263 + 16), *((const float **)lpsrc + 2), v148);
                goto LABEL_286;
              }
              if (v289.__r_.__value_.__l.__size_ == 11)
              {
                if (*(_QWORD *)v289.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
                  || *(_QWORD *)(v289.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
                {
                  goto LABEL_286;
                }
                goto LABEL_284;
              }
              if (v289.__r_.__value_.__l.__size_ == 13)
              {
                v149 = (std::string *)v289.__r_.__value_.__r.__words[0];
LABEL_252:
                v160 = v149->__r_.__value_.__r.__words[0];
                v161 = *(std::string::size_type *)((char *)v149->__r_.__value_.__r.__words + 5);
                if (v160 == 0x6C6F766E6F636564 && v161 == 0x6E6F6974756C6F76)
                {
                  v163 = LODWORD(v278[1]);
                  v164 = *(_DWORD *)(v146 + 12) * *(_DWORD *)(v146 + 8);
                  v165 = *(_DWORD *)(v146 + 20);
                  goto LABEL_285;
                }
              }
LABEL_286:
              v259 = lpsrc;
              v260 = v274;
              if (v274)
              {
                v175 = (unint64_t *)&v274->__shared_owners_;
                do
                  v176 = __ldxr(v175);
                while (__stxr(v176 + 1, v175));
              }
              (*((void (**)(void **, void **))*v143 + 49))(v143, &v259);
              v177 = v260;
              if (v260)
              {
                v178 = (unint64_t *)&v260->__shared_owners_;
                do
                  v179 = __ldaxr(v178);
                while (__stlxr(v179 - 1, v178));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                  std::__shared_weak_count::__release_weak(v177);
                }
              }
              v180 = (void **)v275;
              v257 = v261;
              v258 = v262;
              if (v262)
              {
                v181 = (unint64_t *)&v262->__shared_owners_;
                do
                  v182 = __ldxr(v181);
                while (__stxr(v182 + 1, v181));
              }
              (*((void (**)(void **, uint64_t *))*v180 + 50))(v180, &v257);
              v183 = v258;
              if (v258)
              {
                v184 = (unint64_t *)&v258->__shared_owners_;
                do
                  v185 = __ldaxr(v184);
                while (__stlxr(v185 - 1, v184));
                if (!v185)
                {
                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                  std::__shared_weak_count::__release_weak(v183);
                }
              }
              v186 = v262;
              if (v262)
              {
                v187 = (unint64_t *)&v262->__shared_owners_;
                do
                  v188 = __ldaxr(v187);
                while (__stlxr(v188 - 1, v187));
                if (!v188)
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                }
              }
              v189 = v264;
              if (v264)
              {
                v190 = (unint64_t *)&v264->__shared_owners_;
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                  std::__shared_weak_count::__release_weak(v189);
                }
              }
              v192 = v266;
              if (v266)
              {
                v193 = (unint64_t *)&v266->__shared_owners_;
                do
                  v194 = __ldaxr(v193);
                while (__stlxr(v194 - 1, v193));
                if (!v194)
                {
                  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                  std::__shared_weak_count::__release_weak(v192);
                }
              }
              v195 = v274;
              if (v274)
              {
                v196 = (unint64_t *)&v274->__shared_owners_;
                do
                  v197 = __ldaxr(v196);
                while (__stlxr(v197 - 1, v196));
                if (!v197)
                {
                  ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                  std::__shared_weak_count::__release_weak(v195);
                }
              }
              v112 = v276;
              if (v276)
              {
                v198 = (unint64_t *)&v276->__shared_owners_;
                do
                  v114 = __ldaxr(v198);
                while (__stlxr(v114 - 1, v198));
                goto LABEL_161;
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              *__p.__r_.__value_.__l.__data_ = 0;
              __p.__r_.__value_.__l.__size_ = 0;
            }
            else
            {
              __p.__r_.__value_.__s.__data_[0] = 0;
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
            }
            v115 = v288;
            if (v288)
            {
              v116 = (unint64_t *)&v288->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v289.__r_.__value_.__l.__data_);
            v118 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
            if (*((_QWORD *)&v290 + 1))
            {
              v119 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            v39 = v241;
            if (!v241)
              goto LABEL_57;
            v121 = (unint64_t *)&v241->__shared_owners_;
            do
              v41 = __ldaxr(v121);
            while (__stlxr(v41 - 1, v121));
LABEL_55:
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
            goto LABEL_57;
          }
          goto LABEL_57;
        }
        if (*(_QWORD *)v244.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
          || *(_QWORD *)(v244.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
        {
LABEL_49:
          v32 = *(std::__shared_weak_count **)(v15 + 72);
          v238 = *(_QWORD *)(v15 + 64);
          v239 = v32;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = (uint64_t)*a1 + 56;
          v289.__r_.__value_.__r.__words[0] = v11;
          v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35, v11, &v289);
          memset(v237, 0, sizeof(v237));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v237, v36[3], v36[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36[4] - v36[3]) >> 3));
          v37 = (uint64_t)*a1 + 96;
          v270 = (std::string *)v11;
          v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v11, &v270);
          memset(v236, 0, sizeof(v236));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v236, v38[3], v38[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38[4] - v38[3]) >> 3));
          Espresso::sequential_builder::add_kernel((uint64_t)&v248, &v238, (uint64_t)v16, v15 + 16, v237, v236);
          *(_QWORD *)__str = v236;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          *(_QWORD *)__str = v237;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          v39 = v239;
          if (!v239)
            goto LABEL_57;
          v40 = (unint64_t *)&v239->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          goto LABEL_55;
        }
      }
      else
      {
        if (HIBYTE(v244.__r_.__value_.__r.__words[2]) != 11)
        {
          if (HIBYTE(v244.__r_.__value_.__r.__words[2]) != 13)
            goto LABEL_49;
          v17 = &v244;
          goto LABEL_29;
        }
        if (v244.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
          || *(std::string::size_type *)((char *)v244.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
        {
          goto LABEL_49;
        }
      }
      v46 = *(_DWORD *)(v15 + 8);
      if (!v46 || v46 == 80000 || v46 == 100)
      {
        v48 = *a1;
        v47 = (std::__shared_weak_count *)a1[1];
        v242 = *a1;
        v243 = v47;
        if (v47)
        {
          v49 = (unint64_t *)&v47->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = *(_OWORD *)(*((_QWORD *)v48 + 4) + 16 * (int)v11);
        v290 = v51;
        if (*((_QWORD *)&v51 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = v51;
        v55 = (_OWORD *)(v51 + 40);
        if (*(char *)(v51 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(v51 + 40), *(_QWORD *)(v51 + 48));
        }
        else
        {
          *(_OWORD *)&v289.__r_.__value_.__l.__data_ = *v55;
          v289.__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 56);
        }
        v63 = *(const void **)(v54 + 64);
        if (v63
        {
          v65 = v64;
          v66 = *(std::__shared_weak_count **)(v54 + 72);
          v287 = v64;
          v288 = v66;
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          v69 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v64 + 384))(v64) + 112) != 0;
        }
        else
        {
          v65 = 0;
          v69 = 0;
          v287 = 0;
          v288 = 0;
        }
        if (*(char *)(v54 + 223) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v54 + 200), *(_QWORD *)(v54 + 208));
        }
        else
        {
          *(_OWORD *)__str = *(_OWORD *)(v54 + 200);
          *(_QWORD *)&__str[16] = *(_QWORD *)(v54 + 216);
        }
        std::string::operator=(&__p, (const std::string *)__str);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        if (!v69)
          goto LABEL_186;
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v289.__r_.__value_.__l.__size_ == 11)
          {
            if (*(_QWORD *)v289.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
              || *(_QWORD *)(v289.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
            {
              goto LABEL_186;
            }
            goto LABEL_145;
          }
          if (v289.__r_.__value_.__l.__size_ == 13)
          {
            v71 = (std::string *)v289.__r_.__value_.__r.__words[0];
LABEL_139:
            v89 = v71->__r_.__value_.__r.__words[0];
            v90 = *(std::string::size_type *)((char *)v71->__r_.__value_.__r.__words + 5);
            v91 = v89 == 0x6C6F766E6F636564 && v90 == 0x6E6F6974756C6F76;
            if (v91 && *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v65 + 384))(v65) + 116) == 1)
              goto LABEL_145;
          }
LABEL_186:
          v123 = *(std::__shared_weak_count **)(v54 + 72);
          v267 = *(_QWORD *)(v54 + 64);
          v268 = v123;
          if (v123)
          {
            v124 = (unint64_t *)&v123->__shared_owners_;
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          lpsrc = (void *)(int)v11;
          v126 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v48 + 56, (int)v11, &lpsrc);
          memset(__str, 0, 24);
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__str, v126[3], v126[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126[4] - v126[3]) >> 3));
          v265 = (int)v11;
          v127 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v48 + 96, (int)v11, &v265);
          v270 = 0;
          v271 = 0;
          v272 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v270, v127[3], v127[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v127[4] - v127[3]) >> 3));
          Espresso::sequential_builder::add_kernel((uint64_t)&v248, &v267, (uint64_t)v55, v54 + 16, (std::string **)__str, &v270);
          v275 = &v270;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
          v275 = (std::string **)__str;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
          v128 = v268;
          if (v268)
          {
            v129 = (unint64_t *)&v268->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
LABEL_192:
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
        }
        else
        {
          if (HIBYTE(v289.__r_.__value_.__r.__words[2]) != 11)
          {
            if (HIBYTE(v289.__r_.__value_.__r.__words[2]) == 13)
            {
              v71 = &v289;
              goto LABEL_139;
            }
            goto LABEL_186;
          }
          if (v289.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
            || *(std::string::size_type *)((char *)v289.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
          {
            goto LABEL_186;
          }
LABEL_145:
          v92 = (*(uint64_t (**)(void *))(*(_QWORD *)v65 + 384))(v65);
          v94 = *(_OWORD *)(v92 + 128);
          v93 = *(_OWORD *)(v92 + 144);
          v95 = *(_QWORD *)(v92 + 160);
          v283 = *(_OWORD *)(v92 + 112);
          v96 = *(_OWORD *)v92;
          v97 = *(_OWORD *)(v92 + 32);
          *(_OWORD *)&__str[16] = *(_OWORD *)(v92 + 16);
          *(_OWORD *)v278 = v97;
          *(_OWORD *)__str = v96;
          v98 = *(_OWORD *)(v92 + 48);
          v99 = *(_OWORD *)(v92 + 64);
          v100 = *(_OWORD *)(v92 + 96);
          v281 = *(_OWORD *)(v92 + 80);
          v282 = v100;
          v279 = v98;
          v280 = v99;
          v286 = v95;
          v284 = v94;
          v285 = v93;
          LODWORD(v283) = 0;
          v263 = (int)v11;
          v101 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v48 + 56, (int)v11, &v263);
          v270 = 0;
          v271 = 0;
          v272 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v270, v101[3], v101[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101[4] - v101[3]) >> 3));
          v261 = (int)v11;
          v102 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v48 + 96, (int)v11, &v261);
          v267 = 0;
          v268 = 0;
          v269 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v267, v102[3], v102[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102[4] - v102[3]) >> 3));
          Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, &v248, (uint64_t)&v289, v54 + 16, (uint64_t)__str, (uint64_t)v270, v271, &v267);
          if (lpsrc
          {
            v275 = (std::string **)v103;
            v276 = v274;
            if (v274)
            {
              v104 = (unint64_t *)&v274->__shared_owners_;
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
              goto LABEL_238;
            }
          }
          else
          {
            v276 = 0;
            v275 = 0;
LABEL_238:
            v150 = v274;
            if (v274)
            {
              v151 = (unint64_t *)&v274->__shared_owners_;
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
          }
          v265 = (uint64_t)&v267;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
          v265 = (uint64_t)&v270;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
          v153 = (void **)v275;
          ((void (*)(void **__return_ptr, std::string **))(*v275)[20].__r_.__value_.__l.__size_)(&lpsrc, v275);
          v154 = v287;
          (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v287 + 456))(&v265, v287);
          (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v154 + 448))(&v263, v154);
          Espresso::blob<float,4>::copy(&v261, v265);
          v155 = 0;
          v156 = v261;
          v157 = *(int *)(v265 + 8);
          do
          {
            v157 *= *(int *)(v265 + 12 + v155);
            v155 += 4;
          }
          while (v155 != 12);
          memcpy(*(void **)(v261 + 24), *(const void **)(v265 + 24), 4 * v157);
          if ((*((_BYTE *)&v289.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (HIBYTE(v289.__r_.__value_.__r.__words[2]) != 11)
            {
              if (HIBYTE(v289.__r_.__value_.__r.__words[2]) == 13)
              {
                v159 = &v289;
                goto LABEL_261;
              }
              goto LABEL_333;
            }
            if (v289.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
              || *(std::string::size_type *)((char *)v289.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
            {
              goto LABEL_333;
            }
LABEL_331:
            v169 = LODWORD(v278[1]);
            v170 = *(_DWORD *)(v156 + 12) * *(_DWORD *)(v156 + 8) * *(_DWORD *)(v156 + 16);
            v171 = 1;
LABEL_332:
            Espresso::util_bake_batchnorm_generic(v169, v170, v171, *(_QWORD *)(v156 + 24), *(const float **)(v156 + 24), *(float **)(v263 + 16), *((const float **)lpsrc + 2), v158);
            goto LABEL_333;
          }
          if (v289.__r_.__value_.__l.__size_ == 11)
          {
            if (*(_QWORD *)v289.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
              || *(_QWORD *)(v289.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
            {
              goto LABEL_333;
            }
            goto LABEL_331;
          }
          if (v289.__r_.__value_.__l.__size_ == 13)
          {
            v159 = (std::string *)v289.__r_.__value_.__r.__words[0];
LABEL_261:
            v166 = v159->__r_.__value_.__r.__words[0];
            v167 = *(std::string::size_type *)((char *)v159->__r_.__value_.__r.__words + 5);
            if (v166 == 0x6C6F766E6F636564 && v167 == 0x6E6F6974756C6F76)
            {
              v169 = LODWORD(v278[1]);
              v170 = *(_DWORD *)(v156 + 12) * *(_DWORD *)(v156 + 8);
              v171 = *(_DWORD *)(v156 + 20);
              goto LABEL_332;
            }
          }
LABEL_333:
          v259 = lpsrc;
          v260 = v274;
          if (v274)
          {
            v200 = (unint64_t *)&v274->__shared_owners_;
            do
              v201 = __ldxr(v200);
            while (__stxr(v201 + 1, v200));
          }
          (*((void (**)(void **, void **))*v153 + 49))(v153, &v259);
          v202 = v260;
          if (v260)
          {
            v203 = (unint64_t *)&v260->__shared_owners_;
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
              std::__shared_weak_count::__release_weak(v202);
            }
          }
          v205 = (void **)v275;
          v257 = v261;
          v258 = v262;
          if (v262)
          {
            v206 = (unint64_t *)&v262->__shared_owners_;
            do
              v207 = __ldxr(v206);
            while (__stxr(v207 + 1, v206));
          }
          (*((void (**)(void **, uint64_t *))*v205 + 50))(v205, &v257);
          v208 = v258;
          if (v258)
          {
            v209 = (unint64_t *)&v258->__shared_owners_;
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
            }
          }
          v211 = v262;
          if (v262)
          {
            v212 = (unint64_t *)&v262->__shared_owners_;
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          v214 = v264;
          if (v264)
          {
            v215 = (unint64_t *)&v264->__shared_owners_;
            do
              v216 = __ldaxr(v215);
            while (__stlxr(v216 - 1, v215));
            if (!v216)
            {
              ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
              std::__shared_weak_count::__release_weak(v214);
            }
          }
          v217 = v266;
          if (v266)
          {
            v218 = (unint64_t *)&v266->__shared_owners_;
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            if (!v219)
            {
              ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
              std::__shared_weak_count::__release_weak(v217);
            }
          }
          v220 = v274;
          if (v274)
          {
            v221 = (unint64_t *)&v274->__shared_owners_;
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
            }
          }
          v128 = v276;
          if (v276)
          {
            v223 = (unint64_t *)&v276->__shared_owners_;
            do
              v130 = __ldaxr(v223);
            while (__stlxr(v130 - 1, v223));
            goto LABEL_192;
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          *__p.__r_.__value_.__l.__data_ = 0;
          __p.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          __p.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        }
        v131 = v288;
        if (v288)
        {
          v132 = (unint64_t *)&v288->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v289.__r_.__value_.__l.__data_);
        v134 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
        if (*((_QWORD *)&v290 + 1))
        {
          v135 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        v39 = v243;
        if (!v243)
          goto LABEL_57;
        v137 = (unint64_t *)&v243->__shared_owners_;
        do
          v41 = __ldaxr(v137);
        while (__stlxr(v41 - 1, v137));
        goto LABEL_55;
      }
LABEL_57:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      }
      if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v244.__r_.__value_.__l.__data_);
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
      if (*((_QWORD *)&v245 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      ++v11;
      v9 = *a1;
      v10 = *((_QWORD *)*a1 + 4);
    }
    while (v11 < (*((_QWORD *)*a1 + 5) - v10) >> 4);
  }
  Espresso::net::copy_parameters_from(v252, v9);
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)&v248, (const Espresso::net *)((char *)*a1 + 184), a2);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v256);
  v224 = v255;
  if (v255)
  {
    v225 = (unint64_t *)&v255->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = v254;
  if (v254)
  {
    v228 = (unint64_t *)&v254->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = v253;
  if (v253)
  {
    v231 = (unint64_t *)&v253->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v250, v250[1]);
  v233 = v249;
  if (v249)
  {
    v234 = (unint64_t *)&v249->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
}

void sub_1913117E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a66;
  char a68;
  uint64_t a70;
  uint64_t v70;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v70 - 160);
  if (*(char *)(v70 - 121) < 0)
    operator delete(*(void **)(v70 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v70 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  Espresso::sequential_builder::~sequential_builder(&a37);
  _Unwind_Resume(a1);
}

void Espresso::fuse_scale(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  v19 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(std::__shared_weak_count **)(v2 + 24);
  v21 = *(_QWORD *)(v2 + 16);
  v22 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 12);
  v20[0] = v2;
  v20[1] = v3;
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::optimize_network(&v21, v9, (uint64_t)v20, &__block_literal_global_65_418, a2);
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v19)
  {
    v17 = (unint64_t *)&v19->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_191311C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  int *v29;
  int *v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void (**v54)(id, _OWORD *);
  char *v55;
  uint64_t v56;
  char *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *__p[2];
  __int128 v64;
  __int128 v65;
  _QWORD v66[3];
  char v67[8];
  std::__shared_weak_count *v68;
  uint64_t *v69[3];
  uint64_t *v70[3];
  char **v71;
  char v72;
  void **v73[2];
  std::__shared_weak_count *v74;
  _QWORD v75[3];
  _QWORD v76[3];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v54 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v67, a1);
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  *(_OWORD *)__p = 0u;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v66[0] = 0;
  v66[1] = a1;
  LODWORD(v73[0]) = 0;
  v3 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      LODWORD(v66[0]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v61, *(_QWORD *)(v3 + 16 * v4), *(_QWORD *)(v3 + 16 * v4 + 8));
      v6 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v69, v5, v73);
      if ((char *)v6[6] - (char *)v6[5] == 4)
      {
        HIDWORD(v66[0]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v69, v66[0], v66)[5];
        v7 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v70, SHIDWORD(v66[0]), (_DWORD *)v66 + 1);
        if ((char *)v7[6] - (char *)v7[5] == 4)
        {
          v8 = (uint64_t *)(*((_QWORD *)a1 + 4) + 16 * SHIDWORD(v66[0]));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v62, *v8, v8[1]);
          v9 = v61;
          v10 = *(void **)(v61 + 64);
          if (v10
          {
            v11 = *(_QWORD *)(v9 + 72);
            if (v11)
            {
              v12 = (unint64_t *)(v11 + 8);
              do
                v13 = __ldxr(v12);
              while (__stxr(v13 + 1, v12));
            }
          }
          else
          {
            v11 = 0;
          }
          v14 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          *(_QWORD *)&v59 = v10;
          *((_QWORD *)&v59 + 1) = v11;
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v17 = v62;
          v18 = *(void **)(v62 + 64);
          if (v18
          {
            v19 = *(_QWORD *)(v17 + 72);
            if (v19)
            {
              v20 = (unint64_t *)(v19 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
          }
          else
          {
            v19 = 0;
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          *(_QWORD *)&v60 = v18;
          *((_QWORD *)&v60 + 1) = v19;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          if ((_QWORD)v59)
            v25 = (_QWORD)v60 == 0;
          else
            v25 = 1;
          if (!v25)
            v54[2](v54, &v59);
        }
      }
      v4 = SLODWORD(v73[0]) + 1;
      ++LODWORD(v73[0]);
      v3 = *((_QWORD *)a1 + 4);
      v5 = v4;
    }
    while (v4 < (*((_QWORD *)a1 + 5) - v3) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v26 = __p[0];
  v27 = __p[1];
  if (__p[0] != __p[1])
  {
    v28 = 0;
    do
    {
      Espresso::net::remove_layer(a1, v28 + *v26++);
      --v28;
    }
    while (v26 != v27);
  }
  v29 = (int *)*((_QWORD *)&v64 + 1);
  v30 = (int *)v65;
  if (*((_QWORD *)&v64 + 1) != (_QWORD)v65)
  {
    v31 = 0;
    do
    {
      v32 = *v29;
      v58 = *v29 + v31;
      LODWORD(v73[0]) = v32;
      v33 = (std::__shared_weak_count *)*((_QWORD *)v29 + 2);
      v73[1] = *((void ***)v29 + 1);
      v74 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      memset(v75, 0, sizeof(v75));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v75, *((_QWORD *)v29 + 3), *((_QWORD *)v29 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v29 + 4) - *((_QWORD *)v29 + 3)) >> 3));
      memset(v76, 0, sizeof(v76));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v76, *((_QWORD *)v29 + 6), *((_QWORD *)v29 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v29 + 7) - *((_QWORD *)v29 + 6)) >> 3));
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v71 = &v55;
      v72 = 0;
      v55 = (char *)operator new(0x48uLL);
      v56 = (uint64_t)v55;
      v57 = v55 + 72;
      v56 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v57, (uint64_t)v73, (uint64_t)&v77, (uint64_t)v55);
      Espresso::net::insert_layers((uint64_t)a1, &v58, (uint64_t *)&v55);
      v71 = &v55;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      v71 = (char **)v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      v71 = (char **)v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      v36 = v74;
      if (v74)
      {
        v37 = (unint64_t *)&v74->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      ++v31;
      v29 += 18;
    }
    while (v29 != v30);
  }
  v73[0] = (void **)&v64 + 1;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v73);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v70[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v69[1]);
  v51 = v68;
  if (v68)
  {
    v52 = (unint64_t *)&v68->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

}

void sub_191312214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  Espresso::fuse_vertical_state<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>::~fuse_vertical_state((uint64_t)&a15);
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a32);

  _Unwind_Resume(a1);
}

void Espresso::add_context_transfer_algos_hints(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  __int128 v13;
  uint64_t **v14;
  char *v15;
  __int128 v16;
  const void *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  uint64_t **v26;
  char *v27;
  __int128 v28;
  const void *v29;
  int v30;
  int v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  const void *v41;
  _DWORD *v42;
  _DWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  const void *v54;
  _DWORD *v55;
  _DWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _DWORD *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  const void *v68;
  _DWORD *v69;
  _DWORD *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _DWORD *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  const void *v83;
  _DWORD *v84;
  _DWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  void *__p;
  void *v101;
  uint64_t v102;
  std::string v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::string *v106;

  v1 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v96 = *(uint64_t **)(*(_QWORD *)a1 + 40);
  if (v1 != v96)
  {
    v3 = 0;
    do
    {
      v5 = *v1;
      v4 = (std::__shared_weak_count *)v1[1];
      v104 = *v1;
      v105 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v8 = *(_QWORD *)a1 + 96;
      *(_QWORD *)&v97 = v3;
      v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v3, &v97);
      v11 = (__int128 *)v9[3];
      v10 = (__int128 *)v9[4];
      if (v11 == v10)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        do
        {
          if (*((char *)v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
          }
          else
          {
            v13 = *v11;
            v103.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v13;
          }
          v14 = (uint64_t **)(*(_QWORD *)a1 + 184);
          v106 = &v103;
          v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, &v103, (__int128 **)&v106);
          v16 = *(_OWORD *)(v15 + 72);
          v97 = *(_OWORD *)(v15 + 56);
          v98 = v16;
          v17 = (const void *)*((_QWORD *)v15 + 12);
          v99 = *((_QWORD *)v15 + 11);
          __p = 0;
          v101 = 0;
          v102 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v17, *((_QWORD *)v15 + 13), (uint64_t)(*((_QWORD *)v15 + 13) - (_QWORD)v17) >> 2);
          v18 = HIDWORD(v97);
          if (SHIDWORD(v97) <= 1)
            v18 = 1;
          v19 = v98;
          if ((int)v98 <= 1)
            v19 = 1;
          v20 = v19 * v18 * DWORD2(v97);
          if (v20 > v12)
            v12 = v20;
          if (__p)
          {
            v101 = __p;
            operator delete(__p);
          }
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v103.__r_.__value_.__l.__data_);
          v11 = (__int128 *)((char *)v11 + 24);
        }
        while (v11 != v10);
      }
      v21 = *(_QWORD *)a1 + 56;
      *(_QWORD *)&v97 = v3;
      v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v3, &v97);
      v23 = (__int128 *)v22[3];
      v24 = (__int128 *)v22[4];
      while (v23 != v24)
      {
        if (*((char *)v23 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
        }
        else
        {
          v25 = *v23;
          v103.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
          *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v25;
        }
        v26 = (uint64_t **)(*(_QWORD *)a1 + 184);
        v106 = &v103;
        v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, &v103, (__int128 **)&v106);
        v28 = *(_OWORD *)(v27 + 72);
        v97 = *(_OWORD *)(v27 + 56);
        v98 = v28;
        v29 = (const void *)*((_QWORD *)v27 + 12);
        v99 = *((_QWORD *)v27 + 11);
        __p = 0;
        v101 = 0;
        v102 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v29, *((_QWORD *)v27 + 13), (uint64_t)(*((_QWORD *)v27 + 13) - (_QWORD)v29) >> 2);
        v30 = HIDWORD(v97);
        if (SHIDWORD(v97) <= 1)
          v30 = 1;
        v31 = v98;
        if ((int)v98 <= 1)
          v31 = 1;
        v32 = v31 * v30 * DWORD2(v97);
        if (v32 > v12)
          v12 = v32;
        if (__p)
        {
          v101 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        v23 = (__int128 *)((char *)v23 + 24);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 64) + 136) = v12 > 0x2000;
      if (v4)
      {
        v33 = (unint64_t *)&v4->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      ++v3;
      v1 += 2;
    }
    while (v1 != v96);
    v35 = *(uint64_t **)(*(_QWORD *)a1 + 32);
    v36 = *(uint64_t **)(*(_QWORD *)a1 + 40);
    while (v35 != v36)
    {
      v38 = *v35;
      v37 = v35[1];
      *(_QWORD *)&v97 = *v35;
      *((_QWORD *)&v97 + 1) = v37;
      if (v37)
      {
        v39 = (unint64_t *)(v37 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = *(const void **)(v38 + 64);
      if (v41)
      {
        if (v42)
        {
          v43 = v42;
          v44 = *(std::__shared_weak_count **)(v38 + 72);
          v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
          v103.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v47 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v42 + 384))(v42);
          v48 = v47[8];
          v49 = v47[11];
          v50 = v47[25];
          if (v47[9])
            v43[34] = 1;
          if (v48)
            v43[34] = 1;
          if (v49)
            v43[34] = 1;
          if (v50)
            v43[34] = 1;
          if (v44)
          {
            v51 = (unint64_t *)&v44->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
        }
      }
      v53 = v97;
      v54 = *(const void **)(v97 + 64);
      if (!v54)
        goto LABEL_85;
      if (!v55)
        goto LABEL_85;
      v56 = v55;
      v57 = *(std::__shared_weak_count **)(v53 + 72);
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      v103.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 384))(v55);
      v61 = v60[29];
      if (v61 <= 1)
        v62 = 1;
      else
        v62 = v60[29];
      if (v61 >= 2)
      {
        v63 = v60[10];
        v64 = v60[11];
        if (v64 / v62 != 1)
        {
          if ((((v64 / v62) | (v63 / v62)) & 3) == 0)
            goto LABEL_80;
LABEL_79:
          v56[34] = 1;
          goto LABEL_80;
        }
        if (v63 % v64)
          goto LABEL_79;
      }
LABEL_80:
      if (v57)
      {
        v65 = (unint64_t *)&v57->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
LABEL_85:
      v67 = v97;
      v68 = *(const void **)(v97 + 64);
      if (v68)
      {
        if (v69)
        {
          v70 = v69;
          v71 = *(std::__shared_weak_count **)(v67 + 72);
          v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
          v103.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v74 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v69 + 384))(v69);
          v75 = v74[29];
          if (v75 <= 1)
            v76 = 1;
          else
            v76 = v74[29];
          if (v75 >= 2)
          {
            v77 = v74[11] / v76;
            v78 = (v77 | (v74[10] / v76)) & 3;
            if (v77 == 1 || v78 != 0)
              v70[34] = 1;
          }
          if (v71)
          {
            v80 = (unint64_t *)&v71->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
        }
      }
      v82 = v97;
      v83 = *(const void **)(v97 + 64);
      if (v83)
      {
        if (v84)
        {
          v85 = v84;
          v86 = *(std::__shared_weak_count **)(v82 + 72);
          v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
          v103.__r_.__value_.__l.__size_ = (std::string::size_type)v86;
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          v89 = *(_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v84 + 320))(v84);
          if (v89 == 28 || v89 == 21)
            v85[34] = 1;
          if (v86)
          {
            v91 = (unint64_t *)&v86->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
        }
      }
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v35 += 2;
    }
  }
}

void sub_1913128E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::convert_weights_to_fp16(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  _WORD *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int v41;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  void *v65;
  std::__shared_weak_count *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  char *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;

  v2 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v1 = *(uint64_t **)(*(_QWORD *)a1 + 40);
  if (v2 != v1)
  {
    while (1)
    {
      v4 = *v2;
      v3 = (std::__shared_weak_count *)v2[1];
      v69 = *v2;
      v70 = v3;
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v7 = *(const void **)(v4 + 64);
      if (!v7)
        break;
      if (!v8)
      {
        v67 = 0;
        v68 = 0;
        if (v13)
        {
          v12 = *(std::__shared_weak_count **)(v4 + 72);
          v65 = v13;
          v66 = v12;
          if (v12)
          {
            v14 = (unint64_t *)&v12->__shared_owners_;
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          quantize_to_fp16<Espresso::generic_inner_product_kernel,2>((uint64_t *)&v65);
          goto LABEL_19;
        }
        v65 = 0;
        v66 = 0;
        if (v23)
        {
          v24 = v23;
          v25 = *(std::__shared_weak_count **)(v4 + 72);
          v63 = v23;
          v64 = v25;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v23 + 416))(&v79, v23);
          v28 = v79;
          if (v79)
          {
            v29 = (char *)operator new(0x68uLL);
            v30 = (std::__shared_weak_count *)v29;
            v31 = 0;
            v32 = v28 + 8;
            *((_QWORD *)v29 + 1) = 0;
            *((_QWORD *)v29 + 2) = 0;
            *((_QWORD *)v29 + 3) = &off_1E2DA1430;
            v33 = v29 + 24;
            *(_QWORD *)v29 = &off_1E2DBF098;
            *(_OWORD *)(v29 + 72) = 0u;
            v34 = 1;
            *(_OWORD *)(v29 + 88) = 0u;
            do
            {
              v35 = *(int *)(v32 + v31);
              *(_DWORD *)&v29[v31 + 32] = v35;
              v34 *= v35;
              v31 += 4;
            }
            while (v31 != 20);
            v36 = 2 * v34;
            v37 = Espresso::kern_alloc_uninitialized((Espresso *)(2 * v34));
            bzero(v37, v36);
            v38 = 0;
            v30[2].__shared_owners_ = (uint64_t)v37;
            LOBYTE(v30[2].__shared_weak_owners_) = 1;
            v77 = v33;
            v78 = v30;
            v39 = *(int **)(v79 + 32);
            v40 = *(int *)(v79 + 8);
            do
            {
              v40 *= *(int *)(v79 + 12 + v38);
              v38 += 4;
            }
            while (v38 != 16);
            for (; v40; --v40)
            {
              v41 = *v39++;
              _S0 = v41;
              __asm { FCVT            H0, S0 }
              *v37++ = _S0;
            }
            v75 = 0;
            v76 = 0;
            (*(void (**)(void *, uint64_t *))(*(_QWORD *)v24 + 400))(v24, &v75);
            v47 = v76;
            if (v76)
            {
              v48 = (unint64_t *)&v76->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v73 = 0;
            v74 = 0;
            std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
            v50 = 0;
            v51 = *((int *)v77 + 2);
            do
            {
              v51 *= *(int *)&v77[v50 + 12];
              v50 += 4;
            }
            while (v50 != 16);
            (*(void (**)(void *, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v63 + 160))(v63, &v73, __p, *((_QWORD *)v77 + 4), 2 * v51, 0);
            if (v72 < 0)
              operator delete(__p[0]);
            v52 = v74;
            if (v74)
            {
              v53 = (unint64_t *)&v74->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = v78;
            if (v78)
            {
              v56 = (unint64_t *)&v78->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          v58 = v80;
          if (v80)
          {
            v59 = (unint64_t *)&v80->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          if (v64)
          {
            v61 = (unint64_t *)&v64->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
LABEL_13:
        v12 = v66;
LABEL_19:
        if (v12)
        {
          v16 = (unint64_t *)&v12->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v9 = v68;
        goto LABEL_25;
      }
      v9 = *(std::__shared_weak_count **)(v4 + 72);
      v67 = v8;
      v68 = v9;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      if (!v8[65])
        quantize_to_fp16<Espresso::generic_convolution_kernel,4>((uint64_t *)&v67);
LABEL_25:
      if (v9)
      {
        v18 = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v20 = v70;
      if (v70)
      {
        v21 = (unint64_t *)&v70->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v2 += 2;
      if (v2 == v1)
        return;
    }
    v67 = 0;
    v68 = 0;
    v65 = 0;
    v66 = 0;
    goto LABEL_13;
  }
}

void sub_191312E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void Espresso::run_pass_on_network<Espresso::pass_constant_if_conditions>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint8_t buf[4];
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBDC78;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D96638;
  v3 = (_QWORD *)((char *)v2 + 24);
  v13 = (_QWORD *)((char *)v2 + 24);
  v14 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v16 = (unint64_t)"N8Espresso27pass_constant_if_conditionsE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v12 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v12);
  if (v12)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v16 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso34pass_constant_if_conditions_resultE");
  }
  v6 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_19131309C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::fuse_transpose_chain(Espresso::net **a1)
{
  Espresso::net *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  int *v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  char **v60;
  int *v61;
  uint64_t *v62[3];
  char *v63[3];
  char *v64[2];
  char *v65;
  uint64_t v66;
  char *v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  void *__p[2];
  __int128 v74;
  __int128 v75;
  _QWORD v76[3];
  char v77[8];
  std::__shared_weak_count *v78;
  uint64_t *v79[3];
  uint64_t *v80[3];
  char **v81;
  char v82;
  void **v83[2];
  std::__shared_weak_count *v84;
  _QWORD v85[3];
  _QWORD v86[3];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = &__block_literal_global_32_405;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v77, v2);
  v60 = (char **)a1;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  *(_OWORD *)__p = 0u;
  v70 = 0u;
  v71 = 0u;
  v69 = 0u;
  v76[0] = 0;
  v76[1] = v2;
  LODWORD(v83[0]) = 0;
  v4 = *((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 5) != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      LODWORD(v76[0]) = v6;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v71, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v7 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v79, v6, v83);
      if ((char *)v7[6] - (char *)v7[5] == 4)
      {
        HIDWORD(v76[0]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v79, v76[0], v76)[5];
        v8 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v80, SHIDWORD(v76[0]), (_DWORD *)v76 + 1);
        if ((char *)v8[6] - (char *)v8[5] == 4)
        {
          v9 = (uint64_t *)(*((_QWORD *)v2 + 4) + 16 * SHIDWORD(v76[0]));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v72, *v9, v9[1]);
          v10 = v71;
          v11 = *(void **)(v71 + 64);
          if (v11
          {
            v12 = *(_QWORD *)(v10 + 72);
            if (v12)
            {
              v13 = (unint64_t *)(v12 + 8);
              do
                v14 = __ldxr(v13);
              while (__stxr(v14 + 1, v13));
            }
          }
          else
          {
            v12 = 0;
          }
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
          *(_QWORD *)&v69 = v11;
          *((_QWORD *)&v69 + 1) = v12;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v18 = v72;
          v19 = *(void **)(v72 + 64);
          if (v19
          {
            v20 = *(_QWORD *)(v18 + 72);
            if (v20)
            {
              v21 = (unint64_t *)(v20 + 8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
          }
          else
          {
            v20 = 0;
          }
          v23 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
          *(_QWORD *)&v70 = v19;
          *((_QWORD *)&v70 + 1) = v20;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if ((_QWORD)v69)
            v26 = (_QWORD)v70 == 0;
          else
            v26 = 1;
          if (!v26)
            ___ZN8Espresso20fuse_transpose_chainENSt3__110shared_ptrINS_3netEEE_block_invoke((uint64_t)v19, &v69);
        }
      }
      v5 = SLODWORD(v83[0]) + 1;
      ++LODWORD(v83[0]);
      v4 = *((_QWORD *)v2 + 4);
      v6 = v5;
    }
    while (v5 < (*((_QWORD *)v2 + 5) - v4) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v27 = __p[0];
  v28 = __p[1];
  if (__p[0] != __p[1])
  {
    v29 = 0;
    do
    {
      Espresso::net::remove_layer(v2, v29 + *v27++);
      --v29;
    }
    while (v27 != v28);
  }
  v30 = (int *)*((_QWORD *)&v74 + 1);
  v61 = (int *)v75;
  if (*((_QWORD *)&v74 + 1) != (_QWORD)v75)
  {
    v31 = 0;
    do
    {
      v32 = *v30;
      v68 = *v30 + v31;
      LODWORD(v83[0]) = v32;
      v33 = (std::__shared_weak_count *)*((_QWORD *)v30 + 2);
      v83[1] = *((void ***)v30 + 1);
      v84 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      memset(v85, 0, sizeof(v85));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v85, *((_QWORD *)v30 + 3), *((_QWORD *)v30 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v30 + 4) - *((_QWORD *)v30 + 3)) >> 3));
      memset(v86, 0, sizeof(v86));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v86, *((_QWORD *)v30 + 6), *((_QWORD *)v30 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v30 + 7) - *((_QWORD *)v30 + 6)) >> 3));
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v81 = &v65;
      v82 = 0;
      v65 = (char *)operator new(0x48uLL);
      v66 = (uint64_t)v65;
      v67 = v65 + 72;
      v66 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v67, (uint64_t)v83, (uint64_t)&v87, (uint64_t)v65);
      Espresso::net::insert_layers((uint64_t)v2, &v68, (uint64_t *)&v65);
      v81 = &v65;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      v81 = (char **)v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      v81 = (char **)v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      v36 = v84;
      if (v84)
      {
        v37 = (unint64_t *)&v84->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      ++v31;
      v30 += 18;
    }
    while (v30 != v61);
  }
  v83[0] = (void **)&v74 + 1;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v83);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v80[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v79[1]);
  v51 = v78;
  if (v78)
  {
    v52 = (unint64_t *)&v78->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

  v55 = *v60;
  v54 = v60[1];
  v64[0] = *v60;
  v64[1] = v54;
  if (v54)
  {
    v56 = (unint64_t *)(v54 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    v55 = *v60;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v62, (__int128 **)v55 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v63, (__int128 **)v55 + 26);
  reshape_network(v64, v62);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v63, v63[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v62, (char *)v62[1]);
  if (v54)
  {
    v58 = (unint64_t *)(v54 + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      (*(void (**)(char *))(*(_QWORD *)v54 + 16))(v54);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v54);
    }
  }
}

void sub_19131372C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  char *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, char *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  Espresso::network_shape::~network_shape((char **)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::transform_dequantize(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  Espresso::net *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  Espresso::net *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  Espresso::net *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v35[5];
  std::__shared_weak_count *v36;
  uint64_t v37;
  Espresso::net *v38;
  std::__shared_weak_count *v39;
  Espresso::net *v40;
  std::__shared_weak_count *v41;
  void *__p;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, int *);
  void *v48;
  void **p_p;
  Espresso::net *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;

  v4 = operator new(8uLL);
  __p = v4;
  *v4 = 100;
  v43 = v4 + 1;
  v44 = v4 + 1;
  v5 = *(Espresso::net **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  v40 = *(Espresso::net **)a1;
  v41 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = MEMORY[0x1E0C809B0];
  v45 = MEMORY[0x1E0C809B0];
  v46 = 3321888768;
  v47 = ___Z15dequantize_convIN8Espresso26generic_convolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERNS2_6vectorIiNS2_9allocatorIiEEEERKNS2_13unordered_setINS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS2_4hashISG_EENS2_8equal_toISG_EENS7_ISG_EEEE_block_invoke;
  v48 = &__block_descriptor_64_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  p_p = &__p;
  v50 = v5;
  v51 = v6;
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v52 = a2;
  Espresso::single_match_replace<Espresso::generic_convolution_kernel>(v5, &v45);
  v12 = v51;
  if (v51)
  {
    v13 = (unint64_t *)&v51->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v41)
  {
    v15 = &v41->__shared_owners_;
    do
      v16 = __ldaxr((unint64_t *)v15);
    while (__stlxr(v16 - 1, (unint64_t *)v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v17 = *(Espresso::net **)a1;
  v18 = *(std::__shared_weak_count **)(a1 + 8);
  v38 = *(Espresso::net **)a1;
  v39 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v45 = v9;
  v46 = 3321888768;
  v47 = ___Z15dequantize_convIN8Espresso28generic_deconvolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERNS2_6vectorIiNS2_9allocatorIiEEEERKNS2_13unordered_setINS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS2_4hashISG_EENS2_8equal_toISG_EENS7_ISG_EEEE_block_invoke;
  v48 = &__block_descriptor_64_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  p_p = &__p;
  v50 = v17;
  v51 = v18;
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v52 = a2;
  Espresso::single_match_replace<Espresso::generic_deconvolution_kernel>(v17, &v45);
  v23 = v51;
  if (v51)
  {
    v24 = (unint64_t *)&v51->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v39)
  {
    v26 = &v39->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v35[0] = v9;
  v35[1] = 3321888768;
  v35[2] = ___ZN8Espresso20transform_dequantizeENSt3__110shared_ptrINS_3netEEERKNS0_13unordered_setINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_4hashISA_EENS0_8equal_toISA_EENS8_ISA_EEEE_block_invoke;
  v35[3] = &__block_descriptor_56_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  v28 = *(Espresso::net **)a1;
  v29 = *(std::__shared_weak_count **)(a1 + 8);
  v35[4] = *(_QWORD *)a1;
  v36 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v37 = a2;
  Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(v28, v35);
  v32 = v36;
  if (v36)
  {
    v33 = (unint64_t *)&v36->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
}

void sub_191313AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::fuse_transpose_inner_product(char **a1)
{
  char *v2;
  id v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66[3];
  char *v67[3];
  char *v68[2];
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  char *v79;
  _BYTE v80[8];
  std::__shared_weak_count *v81;
  uint64_t *v82[3];
  uint64_t *v83[5];

  v2 = *a1;
  v3 = &__block_literal_global_33;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v80, (Espresso::net *)v2);
  v78 = 0;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v79 = v2;
  v69 = 0;
  if (*((_QWORD *)v2 + 5) != *((_QWORD *)v2 + 4))
  {
    LODWORD(v4) = 0;
    do
    {
      DWORD2(v77) = v4;
      v5 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v82, v4, &v69);
      if ((char *)v5[6] - (char *)v5[5] == 4)
      {
        HIDWORD(v77) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v82, SDWORD2(v77), (_DWORD *)&v77 + 2)[5];
        v6 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v82, SHIDWORD(v77), (_DWORD *)&v77 + 3);
        if ((char *)v6[6] - (char *)v6[5] == 4)
        {
          v78 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v82, SHIDWORD(v77), (_DWORD *)&v77 + 3)[5];
          v7 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v83, SHIDWORD(v77), (_DWORD *)&v77 + 3);
          if ((char *)v7[6] - (char *)v7[5] == 4)
          {
            v8 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v83, v78, &v78);
            if ((char *)v8[6] - (char *)v8[5] == 4)
            {
              v9 = (uint64_t *)(*((_QWORD *)v2 + 4) + 16 * (int)v4);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v73, *v9, v9[1]);
              v10 = (uint64_t *)(*((_QWORD *)v2 + 4) + 16 * SHIDWORD(v77));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v74, *v10, v10[1]);
              v11 = (uint64_t *)(*((_QWORD *)v2 + 4) + 16 * v78);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v75, *v11, v11[1]);
              v12 = v73;
              v13 = *(void **)(v73 + 64);
              if (v13
              {
                v14 = *(_QWORD *)(v12 + 72);
                if (v14)
                {
                  v15 = (unint64_t *)(v14 + 8);
                  do
                    v16 = __ldxr(v15);
                  while (__stxr(v16 + 1, v15));
                }
              }
              else
              {
                v14 = 0;
              }
              v17 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
              *(_QWORD *)&v70 = v13;
              *((_QWORD *)&v70 + 1) = v14;
              if (v17)
              {
                p_shared_owners = (unint64_t *)&v17->__shared_owners_;
                do
                  v19 = __ldaxr(p_shared_owners);
                while (__stlxr(v19 - 1, p_shared_owners));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
                v13 = (void *)v70;
              }
              if (v13)
              {
                v20 = v74;
                v21 = *(void **)(v74 + 64);
                if (v21
                {
                  v22 = *(_QWORD *)(v20 + 72);
                  if (v22)
                  {
                    v23 = (unint64_t *)(v22 + 8);
                    do
                      v24 = __ldxr(v23);
                    while (__stxr(v24 + 1, v23));
                  }
                }
                else
                {
                  v22 = 0;
                }
                v25 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
                *(_QWORD *)&v71 = v21;
                *((_QWORD *)&v71 + 1) = v22;
                if (v25)
                {
                  v26 = (unint64_t *)&v25->__shared_owners_;
                  do
                    v27 = __ldaxr(v26);
                  while (__stlxr(v27 - 1, v26));
                  if (!v27)
                  {
                    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                    std::__shared_weak_count::__release_weak(v25);
                  }
                  v21 = (void *)v71;
                }
                if (v21)
                {
                  v28 = v75;
                  v29 = *(void **)(v75 + 64);
                  if (v29
                  {
                    v30 = *(_QWORD *)(v28 + 72);
                    if (v30)
                    {
                      v31 = (unint64_t *)(v30 + 8);
                      do
                        v32 = __ldxr(v31);
                      while (__stxr(v32 + 1, v31));
                    }
                  }
                  else
                  {
                    v30 = 0;
                  }
                  v33 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
                  *(_QWORD *)&v72 = v29;
                  *((_QWORD *)&v72 + 1) = v30;
                  if (v33)
                  {
                    v34 = (unint64_t *)&v33->__shared_owners_;
                    do
                      v35 = __ldaxr(v34);
                    while (__stlxr(v35 - 1, v34));
                    if (!v35)
                    {
                      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                      std::__shared_weak_count::__release_weak(v33);
                    }
                    v29 = (void *)v72;
                  }
                  if (v29)
                    ___ZN8Espresso28fuse_transpose_inner_productENSt3__110shared_ptrINS_3netEEE_block_invoke((uint64_t)v29, &v70);
                }
              }
            }
          }
        }
      }
      v4 = ++v69;
    }
    while (v4 < (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4);
    v37 = (_DWORD *)*((_QWORD *)&v76 + 1);
    v36 = (_DWORD *)v76;
    if ((_QWORD)v76 != *((_QWORD *)&v76 + 1))
    {
      v38 = 0;
      do
      {
        Espresso::net::remove_layer((Espresso::net *)v2, v38 + *v36++);
        --v38;
      }
      while (v36 != v37);
      v36 = (_DWORD *)v76;
    }
    if (v36)
    {
      *((_QWORD *)&v76 + 1) = v36;
      operator delete(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v83[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v82[1]);
  v57 = v81;
  if (v81)
  {
    v58 = (unint64_t *)&v81->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }

  v61 = *a1;
  v60 = a1[1];
  v68[0] = *a1;
  v68[1] = v60;
  if (v60)
  {
    v62 = (unint64_t *)(v60 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    v61 = *a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v66, (__int128 **)v61 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v67, (__int128 **)v61 + 26);
  reshape_network(v68, v66);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v67, v67[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v66, (char *)v66[1]);
  if (v60)
  {
    v64 = (unint64_t *)(v60 + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      (*(void (**)(char *))(*(_QWORD *)v60 + 16))(v60);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v60);
    }
  }
}

void sub_191314118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, char *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  Espresso::network_shape::~network_shape((char **)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::fuse_eltwise_mulc_max_to_leaky_relu(uint64_t a1)
{
  Espresso::net *v2;
  Espresso::net *v3;
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  std::string::size_type *p_size;
  uint64_t v13;
  const void *v14;
  Espresso *v15;
  Espresso *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  const void *v21;
  void *v22;
  const Espresso::base_kernel *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  uint64_t v41;
  __int128 *v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  unsigned __int8 *v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  int v53;
  std::string::size_type size;
  std::string *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  std::string::size_type v62;
  const void **v63;
  std::string *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  BOOL v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  const void **v75;
  std::string *v76;
  _BOOL4 v77;
  size_t v78;
  uint64_t v79;
  int v80;
  std::string::size_type v81;
  std::string *v82;
  float v83;
  char *v85;
  uint64_t v86;
  size_t v87;
  std::string *p_str;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  std::string::size_type v92;
  uint64_t (***v93)(_QWORD);
  int v94;
  uint64_t v95;
  void **v96;
  Espresso::net *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  Espresso *v105;
  void *v106;
  _QWORD *v107;
  Espresso::net *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  size_t v121;
  size_t v122;
  std::string::size_type *v123;
  uint64_t *v124[3];
  char *v125[3];
  char *v126[2];
  __int128 v127;
  uint64_t v128;
  int v129;
  _BYTE v130[40];
  __int128 v131;
  __int128 v132;
  _DWORD v133[3];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string v137;
  _QWORD v138[3];
  std::string v139;
  std::string v140;
  void *v141;
  std::__shared_weak_count *v142;
  Espresso *v143;
  std::__shared_weak_count *v144;
  unint64_t v145;
  _QWORD v146[5];
  void **v147;
  std::__shared_weak_count *v148;
  std::string __str;
  __int128 v150;
  uint64_t v151;
  _QWORD v152[3];
  _QWORD v153[3];

  v153[1] = *MEMORY[0x1E0C80C00];
  v2 = *(Espresso::net **)a1;
  memset(v130, 0, 32);
  *(_DWORD *)&v130[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(v2, v130, (uint64_t)v146);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v130);
  v145 = 0;
  v3 = *(Espresso::net **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) - v4 != 16)
  {
    v11 = 0;
    p_size = &__str.__r_.__value_.__l.__size_;
    while (1)
    {
      v13 = *(_QWORD *)(v4 + 16 * v11);
      v14 = *(const void **)(v13 + 64);
      if (v14
      {
        v16 = v15;
        v17 = *(std::__shared_weak_count **)(v13 + 72);
        v143 = v15;
        v144 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          v3 = *(Espresso::net **)a1;
        }
      }
      else
      {
        v16 = 0;
        v143 = 0;
        v144 = 0;
      }
      v20 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 16 * v11 + 16);
      v21 = *(const void **)(v20 + 64);
      if (!v21)
        goto LABEL_167;
      if (!v22)
        goto LABEL_167;
      v24 = v22;
      v25 = *(std::__shared_weak_count **)(v20 + 72);
      v141 = v22;
      v142 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (v16)
      {
        if (!Espresso::is_kernel_generating_output(v16, v23))
        {
          v28 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v16 + 320))(v16);
          v29 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v24 + 320))(v24);
          if ((*(_DWORD *)v28 | 2) == 3 && *v29 == 23)
          {
            v30 = *(_QWORD *)a1 + 56;
            *(_QWORD *)v130 = &v145;
            v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v30, &v145, (uint64_t)&std::piecewise_construct, (uint64_t **)v130);
            if (v31[4] - v31[3] == 24)
            {
              v32 = *(_QWORD *)a1 + 96;
              *(_QWORD *)v130 = &v145;
              v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v32, &v145, (uint64_t)&std::piecewise_construct, (uint64_t **)v130);
              if (v33[4] - v33[3] == 24)
              {
                v34 = *(_QWORD *)a1 + 56;
                *(_QWORD *)v130 = v145 + 1;
                v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34, v145 + 1, v130);
                if (v35[4] - v35[3] == 48)
                {
                  v36 = *(_QWORD *)a1 + 96;
                  *(_QWORD *)v130 = v145 + 1;
                  v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v36, v145 + 1, v130);
                  if (v37[4] - v37[3] == 24)
                    break;
                }
              }
            }
          }
        }
      }
LABEL_162:
      if (v25)
      {
        v114 = (unint64_t *)&v25->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
LABEL_167:
      v116 = v144;
      if (v144)
      {
        v117 = (unint64_t *)&v144->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      v11 = v145 + 1;
      v145 = v11;
      v3 = *(Espresso::net **)a1;
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if (v11 >= ((*(_QWORD *)(*(_QWORD *)a1 + 40) - v4) >> 4) - 1)
        goto LABEL_2;
    }
    v38 = *(_QWORD *)a1 + 56;
    *(_QWORD *)v130 = &v145;
    v39 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v38, &v145, (uint64_t)&std::piecewise_construct, (uint64_t **)v130)[3];
    if (*((char *)v39 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
    }
    else
    {
      v40 = *v39;
      v140.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v40;
    }
    v41 = *(_QWORD *)a1 + 96;
    *(_QWORD *)v130 = &v145;
    v42 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v41, &v145, (uint64_t)&std::piecewise_construct, (uint64_t **)v130)[3];
    if (*((char *)v42 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v42, *((_QWORD *)v42 + 1));
    }
    else
    {
      v43 = *v42;
      v139.__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v43;
    }
    v44 = *(_QWORD *)a1 + 56;
    *(_QWORD *)v130 = v145 + 1;
    v45 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v44, v145 + 1, v130);
    memset(v138, 0, sizeof(v138));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v138, v45[3], v45[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45[4] - v45[3]) >> 3));
    v46 = *(_QWORD *)a1 + 96;
    *(_QWORD *)v130 = v145 + 1;
    v47 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v46, v145 + 1, v130)[3];
    if (*((char *)v47 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
    }
    else
    {
      v48 = *v47;
      v137.__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v48;
    }
    v123 = p_size;
    v49 = (unsigned __int8 *)v138[0];
    v50 = *(unsigned __int8 *)(v138[0] + 23);
    v51 = *(_QWORD *)(v138[0] + 8);
    if ((v50 & 0x80u) == 0)
      v52 = *(unsigned __int8 *)(v138[0] + 23);
    else
      v52 = *(_QWORD *)(v138[0] + 8);
    v53 = SHIBYTE(v140.__r_.__value_.__r.__words[2]);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    else
      size = v140.__r_.__value_.__l.__size_;
    if (v52 != size)
      goto LABEL_79;
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &v140;
    else
      v55 = (std::string *)v140.__r_.__value_.__r.__words[0];
    if ((v50 & 0x80) != 0)
    {
      v121 = *(_QWORD *)(v138[0] + 8);
      v58 = v52;
      v59 = memcmp(*(const void **)v138[0], v55, v121);
      v52 = v58;
      v51 = v121;
      if (v59)
        goto LABEL_79;
    }
    else if (*(_BYTE *)(v138[0] + 23))
    {
      v56 = (unsigned __int8 *)v138[0];
      v57 = *(unsigned __int8 *)(v138[0] + 23);
      while (*v56 == v55->__r_.__value_.__s.__data_[0])
      {
        ++v56;
        v55 = (std::string *)((char *)v55 + 1);
        if (!--v57)
          goto LABEL_61;
      }
      goto LABEL_79;
    }
LABEL_61:
    v60 = v49[47];
    if ((v60 & 0x80u) == 0)
      v61 = v49[47];
    else
      v61 = *((_QWORD *)v49 + 4);
    v62 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v62 = v139.__r_.__value_.__l.__size_;
    if (v61 == v62)
    {
      v63 = (const void **)(v49 + 24);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v139;
      else
        v64 = (std::string *)v139.__r_.__value_.__r.__words[0];
      if ((v60 & 0x80) != 0)
      {
        v122 = v51;
        v119 = v52;
        v120 = memcmp(*v63, v64, *((_QWORD *)v49 + 4));
        v52 = v119;
        v51 = v122;
        v72 = v120 == 0;
      }
      else if (v49[47])
      {
        v65 = v60 - 1;
        do
        {
          v67 = *(unsigned __int8 *)v63;
          v63 = (const void **)((char *)v63 + 1);
          v66 = v67;
          v69 = v64->__r_.__value_.__s.__data_[0];
          v64 = (std::string *)((char *)v64 + 1);
          v68 = v69;
          v71 = v65-- != 0;
          v72 = v66 == v68;
        }
        while (v66 == v68 && v71);
      }
      else
      {
        v72 = 1;
      }
LABEL_80:
      v73 = v49[47];
      if ((v73 & 0x80u) == 0)
        v74 = v49[47];
      else
        v74 = *((_QWORD *)v49 + 4);
      if (v74 != size)
      {
        v77 = 0;
        p_size = v123;
        goto LABEL_106;
      }
      v75 = (const void **)(v49 + 24);
      if (v53 >= 0)
        v76 = &v140;
      else
        v76 = (std::string *)v140.__r_.__value_.__r.__words[0];
      if ((v73 & 0x80) != 0)
      {
        v78 = v51;
        v79 = v52;
        v80 = memcmp(*v75, v76, *((_QWORD *)v49 + 4));
        v52 = v79;
        v51 = v78;
        p_size = v123;
        if (v80)
          goto LABEL_105;
      }
      else
      {
        p_size = v123;
        if (v49[47])
        {
          while (*(unsigned __int8 *)v75 == v76->__r_.__value_.__s.__data_[0])
          {
            v75 = (const void **)((char *)v75 + 1);
            v76 = (std::string *)((char *)v76 + 1);
            if (!--v73)
              goto LABEL_94;
          }
          goto LABEL_105;
        }
      }
LABEL_94:
      v81 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v81 = v139.__r_.__value_.__l.__size_;
      if (v52 == v81)
      {
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v82 = &v139;
        else
          v82 = (std::string *)v139.__r_.__value_.__r.__words[0];
        if ((v50 & 0x80) != 0)
        {
          v77 = memcmp(*(const void **)v49, v82, v51) == 0;
LABEL_106:
          if (!v72 && !v77)
          {
LABEL_155:
            if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v137.__r_.__value_.__l.__data_);
            *(_QWORD *)v130 = v138;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v130);
            if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v139.__r_.__value_.__l.__data_);
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v140.__r_.__value_.__l.__data_);
            v25 = v142;
            goto LABEL_162;
          }
LABEL_107:
          v83 = *(float *)(v28 + 8);
          if (v83 > 0.0 && v83 <= 1.0)
          {
            v133[2] = 1065353216;
            v135 = 0;
            v136 = 0;
            v134 = 0;
            v133[0] = 2;
            *(float *)&v133[1] = v83;
            *(_DWORD *)v130 = 0;
            memset(&v130[8], 0, 32);
            v131 = 0u;
            v132 = 0u;
            v85 = (char *)operator new(0xF8uLL);
            *((_QWORD *)v85 + 1) = 0;
            *((_QWORD *)v85 + 2) = 0;
            *(_QWORD *)v85 = &off_1E2DBF0D0;
            *((_QWORD *)v85 + 3) = &off_1E2DA1A38;
            *(_OWORD *)(v85 + 40) = 0u;
            *(_OWORD *)(v85 + 56) = 0u;
            *(_OWORD *)(v85 + 72) = 0u;
            *(_OWORD *)(v85 + 88) = 0u;
            *(_OWORD *)(v85 + 104) = 0u;
            *(_OWORD *)(v85 + 120) = 0u;
            *(_OWORD *)(v85 + 136) = 0u;
            *(_OWORD *)(v85 + 152) = 0u;
            *(_OWORD *)(v85 + 161) = 0u;
            *((_OWORD *)v85 + 13) = 0u;
            *((_OWORD *)v85 + 14) = 0u;
            *((_QWORD *)v85 + 30) = 0;
            *(_QWORD *)&v130[8] = v85 + 24;
            *(_QWORD *)&v130[16] = v85;
            v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v145);
            if (*(char *)(v86 + 39) >= 0)
              v87 = *(unsigned __int8 *)(v86 + 39);
            else
              v87 = *(_QWORD *)(v86 + 24);
            std::string::basic_string[abi:ne180100]((uint64_t)&__str, v87 + 6);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (v87)
            {
              if (*(char *)(v86 + 39) >= 0)
                v89 = (const void *)(v86 + 16);
              else
                v89 = *(const void **)(v86 + 16);
              memmove(p_str, v89, v87);
            }
            strcpy((char *)p_str + v87, "@lrelu");
            v90 = *(_QWORD *)&v130[8];
            v91 = *(_QWORD *)&v130[8] + 16;
            if (*(char *)(*(_QWORD *)&v130[8] + 39) < 0)
            {
              operator delete(*(void **)v91);
              v90 = *(_QWORD *)&v130[8];
            }
            v92 = __str.__r_.__value_.__r.__words[2];
            *(_OWORD *)v91 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(_QWORD *)(v91 + 16) = v92;
            MEMORY[0x19401C808](v90 + 40, "activation");
            v93 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
            v94 = (**v93)(v93);
            v95 = *(_QWORD *)&v130[8];
            *(_DWORD *)(*(_QWORD *)&v130[8] + 8) = v94;
            *(_DWORD *)(v95 + 12) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v145) + 12);
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__str, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
            else
              __str = v140;
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v130[24], &__str, &v150, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__str, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
            else
              __str = v137;
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&v131 + 8), &__str, &v150, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            Espresso::abstract_engine_factory::shared(&v147);
            v96 = v147;
            v97 = *(Espresso::net **)a1;
            std::string::basic_string[abi:ne180100]<0>(&__str, "activation");
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v96, (uint64_t)v97 + 16, (uint64_t)&__str, (uint64_t)v133, (int *)(*(_QWORD *)&v130[8] + 8));
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)&v130[8] + 64, &v127);
            v98 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
            if (*((_QWORD *)&v127 + 1))
            {
              v99 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v101 = v148;
            if (v148)
            {
              v102 = (unint64_t *)&v148->__shared_owners_;
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            *(_DWORD *)v130 = v145;
            v104 = *(char **)(*(_QWORD *)&v130[8] + 64);
            v105 = v143;
            v106 = v141;
            v107 = operator new(0x10uLL);
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v107 + 2);
            __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v107 + 2);
            *v107 = v105;
            v107[1] = v106;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
            Espresso::merge_kernel_attributes(v104, (uint64_t *)&__str);
            operator delete(v107);
            Espresso::net::remove_layer(*(Espresso::net **)a1, v145);
            Espresso::net::remove_layer(*(Espresso::net **)a1, v145);
            v108 = *(Espresso::net **)a1;
            v129 = v145;
            LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v130;
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&v130[8];
            if (*(_QWORD *)&v130[16])
            {
              v109 = (unint64_t *)(*(_QWORD *)&v130[16] + 8);
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            v150 = 0uLL;
            v151 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v150, *(uint64_t *)&v130[24], *(uint64_t *)&v130[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v130[32] - *(_QWORD *)&v130[24]) >> 3));
            memset(v152, 0, sizeof(v152));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v152, *((uint64_t *)&v131 + 1), v132, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132 - *((_QWORD *)&v131 + 1)) >> 3));
            v127 = 0uLL;
            v128 = 0;
            v147 = (void **)&v127;
            LOBYTE(v148) = 0;
            *(_QWORD *)&v127 = operator new(0x48uLL);
            *((_QWORD *)&v127 + 1) = v127;
            v128 = v127 + 72;
            *((_QWORD *)&v127 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v128, (uint64_t)&__str, (uint64_t)v153, v127);
            Espresso::net::insert_layers((uint64_t)v108, &v129, (uint64_t *)&v127);
            v147 = (void **)&v127;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v147);
            v147 = (void **)v152;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v147);
            v147 = (void **)&v150;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v147);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)p_size);
            ++v145;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            v111 = *(std::__shared_weak_count **)&v130[16];
            if (*(_QWORD *)&v130[16])
            {
              v112 = (unint64_t *)(*(_QWORD *)&v130[16] + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
          }
          goto LABEL_155;
        }
        if (!(_DWORD)v50)
          goto LABEL_107;
        while (*v49 == v82->__r_.__value_.__s.__data_[0])
        {
          ++v49;
          v82 = (std::string *)((char *)v82 + 1);
          if (!--v50)
            goto LABEL_107;
        }
      }
LABEL_105:
      v77 = 0;
      goto LABEL_106;
    }
LABEL_79:
    v72 = 0;
    goto LABEL_80;
  }
LABEL_2:
  v5 = *(char **)(a1 + 8);
  v126[0] = (char *)v3;
  v126[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v3 = *(Espresso::net **)a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v124, (__int128 **)v3 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v125, (__int128 **)v3 + 26);
  reshape_network(v126, v124);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v125, v125[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v124, (char *)v124[1]);
  if (v5)
  {
    v8 = (unint64_t *)(v5 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(char *))(*(_QWORD *)v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v146[2]);
  v10 = (void *)v146[0];
  v146[0] = 0;
  if (v10)
    operator delete(v10);
}

void sub_191314E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  char a68;
  char a70;
  uint64_t v70;

  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a31);
  if (a50 < 0)
    operator delete(__p);
  a31 = (uint64_t)&a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a59 < 0)
    operator delete(a54);
  if (a66 < 0)
    operator delete(a61);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(v70 - 248);
  _Unwind_Resume(a1);
}

void Espresso::transformer_optimization(uint64_t *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  unint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const void **v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  std::string *v43;
  uint64_t v44;
  std::string::size_type v45;
  uint64_t v46;
  uint64_t v47;
  std::string *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  const void *v62;
  const void *v63;
  size_t v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  BOOL v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  const void *v85;
  _QWORD *v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  const void *v94;
  _QWORD *v95;
  _QWORD *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const void *v102;
  _QWORD *v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  __int128 v131;
  int *v132;
  char *v133;
  uint64_t (***v134)(_QWORD);
  int v135;
  uint64_t v136;
  void **v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  char *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  Espresso::net *v217;
  unint64_t *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t **v222;
  uint64_t **v223;
  uint64_t **v224;
  uint64_t **v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  void *v230;
  unint64_t *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  _DWORD *v253;
  _DWORD *v254;
  int v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  Espresso::net *v277;
  id v278;
  uint64_t v279;
  unint64_t v280;
  int v281;
  uint64_t **v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  void *v286;
  unint64_t *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  BOOL v301;
  _DWORD *v302;
  _DWORD *v303;
  int v304;
  _QWORD *v305;
  int v306;
  int v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  char *v329;
  char *v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t *v341;
  unint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  uint64_t *v345[3];
  char *v346[3];
  char *v347[2];
  _QWORD v348[2];
  void (*v349)(uint64_t, uint64_t);
  void *v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  uint64_t *v353[3];
  char *v354[3];
  char *v355[2];
  __int128 v356;
  uint64_t v357;
  int v358;
  uint64_t *v359[2];
  int v360;
  unint64_t v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  void *v368;
  std::__shared_weak_count *v369;
  void *v370;
  std::__shared_weak_count *v371;
  void *v372;
  std::__shared_weak_count *v373;
  void *__p[2];
  __int128 v375;
  _OWORD v376[3];
  __int128 v377;
  void *v378[2];
  _BYTE v379[24];
  __int128 v380;
  int v381;
  __int128 v382;
  __int128 v383;
  int v384;
  __int128 v385;
  __int128 v386;
  int v387;
  __int128 v388;
  __int128 v389;
  int v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  void **v396;
  std::__shared_weak_count *v397;
  std::string __str;
  std::string *v399;
  int v400[2];
  uint64_t v401;
  std::string *v402;
  int v403[2];
  std::string *v404;
  __int128 v405;
  __int128 v406;
  uint64_t v407;
  uint64_t *v408;
  _QWORD *v409[3];
  uint64_t v410;
  _BYTE v411[56];
  __int128 v412;
  _QWORD v413[3];

  v413[1] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_templates/tf_normalization_transformer/model.espresso.net");
  v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v411, "json");
  Espresso::load_network_layers((std::string *)__p, (uint64_t *)(v2 + 16), 1u, v411, &v394);
  if ((v411[23] & 0x80000000) != 0)
    operator delete(*(void **)v411);
  if (SBYTE7(v375) < 0)
    operator delete(__p[0]);
  v342 = 0;
  v3 = 0uLL;
  v341 = a1;
  do
  {
    v4 = *a1;
    if (v342 >= (uint64_t)(*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) >> 4)
      goto LABEL_291;
    *(_QWORD *)v403 = 0;
    v402 = 0;
    *(_OWORD *)__p = v3;
    v375 = v3;
    *(_OWORD *)((char *)v376 + 8) = v3;
    *(_OWORD *)((char *)&v376[1] + 8) = v3;
    LODWORD(v376[0]) = 1065353216;
    DWORD2(v376[2]) = 1065353216;
    v377 = v3;
    *(_OWORD *)v378 = v3;
    *(_OWORD *)&v379[8] = v3;
    v380 = v3;
    *(_DWORD *)v379 = 1065353216;
    v381 = 1065353216;
    v382 = v3;
    v383 = v3;
    v385 = v3;
    v386 = v3;
    v384 = 1065353216;
    v387 = 1065353216;
    v388 = v3;
    v389 = v3;
    v390 = 1065353216;
    v391 = v3;
    v392 = v3;
    v393 = v3;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v393, 0, 0);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v392, v394, (uint64_t)v395);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v391, *a1, a1[1]);
    if (!v394)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid template net");
    v405 = 0u;
    v406 = 0u;
    LODWORD(v407) = 1065353216;
    Espresso::net::get_consumers_of_blobs((_QWORD *)v391, &v405, (uint64_t)v411);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__move_assign((uint64_t)&v379[8], (uint64_t *)v411);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)&v411[16]);
    v5 = *(void **)v411;
    *(_QWORD *)v411 = 0;
    if (v5)
      operator delete(v5);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v405);
    v405 = 0u;
    v406 = 0u;
    LODWORD(v407) = 1065353216;
    Espresso::net::get_consumers_of_blobs((_QWORD *)v392, &v405, (uint64_t)v411);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__move_assign((uint64_t)&v382, (uint64_t *)v411);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)&v411[16]);
    v6 = *(void **)v411;
    *(_QWORD *)v411 = 0;
    if (v6)
      operator delete(v6);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v405);
    Espresso::net::get_producers_of_blobs((Espresso::net *)v391, (uint64_t)v411);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)&v385, (uint64_t *)v411);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&v411[16]);
    v7 = *(void **)v411;
    *(_QWORD *)v411 = 0;
    if (v7)
      operator delete(v7);
    Espresso::net::get_producers_of_blobs((Espresso::net *)v392, (uint64_t)v411);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)&v388, (uint64_t *)v411);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&v411[16]);
    v8 = *(void **)v411;
    *(_QWORD *)v411 = 0;
    if (v8)
      operator delete(v8);
    if (v342 < (uint64_t)(*(_QWORD *)(v391 + 40) - *(_QWORD *)(v391 + 32)) >> 4)
    {
      v9 = 0uLL;
      while (1)
      {
        *(_OWORD *)&v411[16] = v9;
        *(_OWORD *)&v411[32] = v9;
        *(_OWORD *)v411 = v9;
        v11 = *(_QWORD *)(v392 + 32);
        v10 = *(_QWORD *)(v392 + 40);
        std::deque<pattern_matcher::match_at(unsigned long)::state_t,std::allocator<pattern_matcher::match_at(unsigned long)::state_t>>::__add_back_capacity((uint64_t)v411);
        v12 = *(_QWORD *)&v411[40];
        v13 = *(_QWORD *)&v411[32];
        v14 = *(void ***)&v411[16];
        v15 = *(void ***)&v411[8];
        v16 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)&v411[8]
                                             + (((*(_QWORD *)&v411[40] + *(_QWORD *)&v411[32]) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v411[40] + v411[32]));
        *v16 = v342;
        v16[1] = ((v10 - v11) >> 4) - 1;
        v17 = v12 + 1;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)__p);
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear((_QWORD *)v376 + 1);
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear(&v377);
        while (1)
        {
          v18 = v17 == 0;
          if (!v17)
            break;
          v19 = 32 * ((char *)v14 - (char *)v15) - 1;
          if (v14 == v15)
            v19 = 0;
          v20 = v17 - 1;
          v356 = (*(_OWORD **)((char *)v15 + (((unint64_t)(v13 + v17 - 1) >> 5) & 0x7FFFFFFFFFFFFF8)))[(v13 + v17 - 1)];
          *(_QWORD *)&v411[40] = v17 - 1;
          if ((unint64_t)(v19 - (v17 + v13) - 511) <= 0xFFFFFFFFFFFFFDFFLL)
          {
            v21 = *--v14;
            operator delete(v21);
            *(_QWORD *)&v411[16] = v14;
          }
          v372 = (void *)*((_QWORD *)&v356 + 1);
          v396 = (void **)v356;
          v402 = (std::string *)&v396;
          v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v391 + 96, (unint64_t *)&v396, (uint64_t)&std::piecewise_construct, (uint64_t **)&v402);
          *(_QWORD *)&v406 = 0;
          v405 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v405, v22[3], v22[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22[4] - v22[3]) >> 3));
          v399 = (std::string *)&v372;
          v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v392 + 96, (unint64_t *)&v372, (uint64_t)&std::piecewise_construct, (uint64_t **)&v399);
          v404 = 0;
          v402 = 0;
          *(_QWORD *)v403 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v402, v23[3], v23[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23[4] - v23[3]) >> 3));
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v396;
          v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v391 + 56, (unint64_t *)&v396, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
          v401 = 0;
          v399 = 0;
          *(_QWORD *)v400 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v399, v24[3], v24[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24[4] - v24[3]) >> 3));
          v359[0] = (uint64_t *)&v372;
          v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v392 + 56, (unint64_t *)&v372, (uint64_t)&std::piecewise_construct, v359);
          memset(&__str, 0, sizeof(__str));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v25[3], v25[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25[4] - v25[3]) >> 3));
          if (*((_QWORD *)&v405 + 1) - (_QWORD)v405 != *(_QWORD *)v403 - (_QWORD)v402)
            goto LABEL_42;
          if (*(_QWORD *)v400 - (_QWORD)v399 != __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0])
            goto LABEL_42;
          v26 = *(const void **)(*(_QWORD *)(*(_QWORD *)(v391 + 32) + 16 * (_QWORD)v396) + 64);
          v27 = *(const void **)(*(_QWORD *)(*(_QWORD *)(v392 + 32) + 16 * (_QWORD)v372) + 64);
          if ((pattern_matcher::match_blob_names(__p, (uint64_t *)&v405, &v402) & 1) == 0
            || !pattern_matcher::match_blob_names(__p, (uint64_t *)&v399, &__str))
          {
            goto LABEL_42;
          }
          v28 = *(_QWORD *)(*(_QWORD *)(v391 + 32) + 16 * (_QWORD)v396);
          v29 = *(_QWORD *)(*(_QWORD *)(v392 + 32) + 16 * (_QWORD)v372);
          v30 = *(unsigned __int8 *)(v28 + 63);
          v31 = *(_QWORD *)(v28 + 48);
          if ((v30 & 0x80u) == 0)
            v32 = *(unsigned __int8 *)(v28 + 63);
          else
            v32 = *(_QWORD *)(v28 + 48);
          v33 = *(unsigned __int8 *)(v29 + 63);
          v34 = (char)v33;
          if ((v33 & 0x80u) != 0)
            v33 = *(_QWORD *)(v29 + 48);
          if (v32 != v33)
            goto LABEL_42;
          v35 = (const void **)(v28 + 40);
          v38 = *(unsigned __int8 **)(v29 + 40);
          v36 = (unsigned __int8 *)(v29 + 40);
          v37 = v38;
          if (v34 >= 0)
            v39 = v36;
          else
            v39 = v37;
          if ((v30 & 0x80) == 0)
          {
            if ((_DWORD)v30)
            {
              while (*(unsigned __int8 *)v35 == *v39)
              {
                v35 = (const void **)((char *)v35 + 1);
                ++v39;
                if (!--v30)
                  goto LABEL_41;
              }
LABEL_42:
              v40 = 0;
              goto LABEL_43;
            }
LABEL_41:
            if (!v26)
              goto LABEL_42;
LABEL_67:
            if (v55)
            {
              v56 = v55;
              if (v27)
              else
                v57 = 0;
              v61 = (*(uint64_t (**)(void *))(*(_QWORD *)v56 + 320))(v56);
              v62 = (const void *)(*(uint64_t (**)(void *))(*(_QWORD *)v57 + 320))(v57);
              v63 = (const void *)v61;
              v64 = 52;
LABEL_85:
              if (memcmp(v63, v62, v64))
                goto LABEL_86;
            }
            else
            {
              if (v58)
              {
                v59 = v58;
                if (v27)
                else
                  v60 = 0;
                v68 = (*(uint64_t (**)(void *))(*(_QWORD *)v59 + 384))(v59);
                v62 = (const void *)(*(uint64_t (**)(void *))(*(_QWORD *)v60 + 384))(v60);
                v63 = (const void *)v68;
                v64 = 36;
                goto LABEL_85;
              }
              if (v65)
              {
                v66 = v65;
                if (v27)
                else
                  v67 = 0;
                v72 = (*(uint64_t (**)(void *))(*(_QWORD *)v66 + 320))(v66);
                v62 = (const void *)(*(uint64_t (**)(void *))(*(_QWORD *)v67 + 320))(v67);
                v63 = (const void *)v72;
                v64 = 44;
                goto LABEL_85;
              }
              if (!v69
                || ((v70 = v69, !v27)
                  ? (v71 = 0)
              {
LABEL_86:
                v40 = 0;
                goto LABEL_43;
              }
            }
            v40 = 1;
            goto LABEL_43;
          }
          v40 = 0;
          if (!memcmp(*v35, v39, v31) && v26)
            goto LABEL_67;
LABEL_43:
          v359[0] = (uint64_t *)&__str;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v359);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v399;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          v399 = (std::string *)&v402;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v399);
          v402 = (std::string *)&v405;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
          if ((v40 & 1) == 0)
            goto LABEL_97;
          v402 = (std::string *)((char *)&v356 + 8);
          v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v392 + 56, (unint64_t *)&v356 + 1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v402);
          *(_QWORD *)&v406 = 0;
          v405 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v405, v41[3], v41[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41[4] - v41[3]) >> 3));
          v399 = (std::string *)&v356;
          v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v391 + 56, (unint64_t *)&v356, (uint64_t)&std::piecewise_construct, (uint64_t **)&v399);
          v404 = 0;
          v402 = 0;
          *(_QWORD *)v403 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v402, v42[3], v42[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42[4] - v42[3]) >> 3));
          pattern_matcher::producers_of_layer((uint64_t **)&v399, (uint64_t)&v391, &v385, v356);
          pattern_matcher::producers_of_layer((uint64_t **)&__str, (uint64_t)&v392, &v388, *((unint64_t *)&v356 + 1));
          v43 = v399;
          v44 = *(_QWORD *)v400 - (_QWORD)v399;
          v45 = __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0];
          if (*(_QWORD *)v400 - (_QWORD)v399 == __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0])
          {
            v46 = *((_QWORD *)&v356 + 1);
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v376 + 8, v356, &v356)[3] = v46;
            v47 = v356;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v377, *((unint64_t *)&v356 + 1), (_QWORD *)&v356 + 1)[3] = v47;
            v48 = *(std::string **)v400;
            v43 = v399;
            if (*(std::string **)v400 != v399)
            {
              v49 = 0;
              v17 = v20;
              do
              {
                v50 = v43->__r_.__value_.__r.__words[v49];
                if (v50 < (uint64_t)(*(_QWORD *)(v391 + 40) - *(_QWORD *)(v391 + 32)) >> 4)
                {
                  v51 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8 * v49);
                  if (v51 < (uint64_t)(*(_QWORD *)(v392 + 40) - *(_QWORD *)(v392 + 32)) >> 4)
                  {
                    if (v14 == v15)
                      v52 = 0;
                    else
                      v52 = 32 * ((char *)v14 - (char *)v15) - 1;
                    v53 = v17 + v13;
                    if (v52 == v17 + v13)
                    {
                      std::deque<pattern_matcher::match_at(unsigned long)::state_t,std::allocator<pattern_matcher::match_at(unsigned long)::state_t>>::__add_back_capacity((uint64_t)v411);
                      v15 = *(void ***)&v411[8];
                      v14 = *(void ***)&v411[16];
                      v17 = *(_QWORD *)&v411[40];
                      v13 = *(_QWORD *)&v411[32];
                      v53 = *(_QWORD *)&v411[40] + *(_QWORD *)&v411[32];
                      v48 = *(std::string **)v400;
                      v43 = v399;
                    }
                    v54 = (unint64_t *)(*(char **)((char *)v15 + ((v53 >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * v53);
                    *v54 = v50;
                    v54[1] = v51;
                    *(_QWORD *)&v411[40] = ++v17;
                  }
                }
                ++v49;
              }
              while (v49 < ((char *)v48 - (char *)v43) >> 3);
              goto LABEL_59;
            }
            v43 = *(std::string **)v400;
          }
          v17 = v20;
LABEL_59:
          if (__str.__r_.__value_.__r.__words[0])
          {
            __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
            operator delete(__str.__r_.__value_.__l.__data_);
            v43 = v399;
          }
          if (v43)
          {
            *(_QWORD *)v400 = v43;
            operator delete(v43);
          }
          v399 = (std::string *)&v402;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v399);
          v402 = (std::string *)&v405;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
          if (v44 != v45)
          {
LABEL_97:
            v18 = 0;
            break;
          }
        }
        v77 = (char *)v14 - (char *)v15;
        if ((unint64_t)((char *)v14 - (char *)v15) >= 0x11)
        {
          do
          {
            v78 = *v15++;
            operator delete(v78);
            *(_QWORD *)&v411[8] = v15;
            v77 -= 8;
          }
          while (v77 > 0x10);
        }
        while (v15 != v14)
        {
          v79 = *v15++;
          operator delete(v79);
        }
        if (*(_QWORD *)v411)
          operator delete(*(void **)v411);
        a1 = v341;
        if (!v18)
        {
          ++v342;
          v9 = 0uLL;
          if (v342 < (uint64_t)(*(_QWORD *)(v391 + 40) - *(_QWORD *)(v391 + 32)) >> 4)
            continue;
        }
        break;
      }
    }
    v80 = *a1;
    if (v342 >= (uint64_t)(*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) >> 4)
    {
      v91 = 3;
    }
    else
    {
      v81 = v378[0];
      if (v378[0])
      {
        do
        {
          v82 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * v81[3]);
          v83 = (const char *)(v82 + 40);
          if (*(char *)(v82 + 63) < 0)
            v83 = *(const char **)v83;
          printf("src=%d target=%d type=%s\n", *((_DWORD *)v81 + 4), v81[3], v83);
          v81 = (_QWORD *)*v81;
        }
        while (v81);
        v80 = *a1;
      }
      *(_QWORD *)v411 = 5;
      v84 = *(_QWORD *)(*(_QWORD *)(v80 + 32)
                      + 16
                      * std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v377, 5uLL, v411)[3]);
      v85 = *(const void **)(v84 + 64);
      if (v85
      {
        v87 = v86;
        v88 = *(std::__shared_weak_count **)(v84 + 72);
        v372 = v86;
        v373 = v88;
        if (v88)
        {
          p_shared_owners = (unint64_t *)&v88->__shared_owners_;
          do
            v90 = __ldxr(p_shared_owners);
          while (__stxr(v90 + 1, p_shared_owners));
        }
      }
      else
      {
        v87 = 0;
        v373 = 0;
        v372 = 0;
      }
      v92 = *a1;
      *(_QWORD *)v411 = 8;
      v93 = *(_QWORD *)(*(_QWORD *)(v92 + 32)
                      + 16
                      * std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v377, 8uLL, v411)[3]);
      v94 = *(const void **)(v93 + 64);
      if (v94
      {
        v96 = v95;
        v97 = *(std::__shared_weak_count **)(v93 + 72);
        v370 = v95;
        v371 = v97;
        if (v97)
        {
          v98 = (unint64_t *)&v97->__shared_owners_;
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
      }
      else
      {
        v96 = 0;
        v370 = 0;
        v371 = 0;
      }
      v100 = *a1;
      *(_QWORD *)v411 = 12;
      v101 = *(_QWORD *)(*(_QWORD *)(v100 + 32)
                       + 16
                       * std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v377, 0xCuLL, v411)[3]);
      v102 = *(const void **)(v101 + 64);
      if (v102
      {
        v104 = v103;
        v105 = *(std::__shared_weak_count **)(v101 + 72);
        v368 = v103;
        v369 = v105;
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
        v91 = 2;
        if (v87 && v96)
        {
          v108 = v87[43];
          if (v108 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v108 + 32))(v108))
          {
            v196 = v87[43];
            v198 = *(_QWORD *)(v196 + 160);
            v197 = *(std::__shared_weak_count **)(v196 + 168);
            v366 = v198;
            v367 = v197;
            if (v197)
            {
              v199 = (unint64_t *)&v197->__shared_owners_;
              do
                v200 = __ldxr(v199);
              while (__stxr(v200 + 1, v199));
            }
          }
          else
          {
            v366 = 0;
            v367 = 0;
          }
          v109 = v96[43];
          if (v109 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v109 + 32))(v109))
          {
            v201 = v96[43];
            v203 = *(_QWORD *)(v201 + 160);
            v202 = *(std::__shared_weak_count **)(v201 + 168);
            v364 = v203;
            v365 = v202;
            if (v202)
            {
              v204 = (unint64_t *)&v202->__shared_owners_;
              do
                v205 = __ldxr(v204);
              while (__stxr(v205 + 1, v204));
            }
          }
          else
          {
            v364 = 0;
            v365 = 0;
          }
          v110 = v104[43];
          if (v110 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v110 + 32))(v110))
          {
            v206 = v104[43];
            v208 = *(_QWORD *)(v206 + 160);
            v207 = *(std::__shared_weak_count **)(v206 + 168);
            v362 = v208;
            v363 = v207;
            if (v207)
            {
              v209 = (unint64_t *)&v207->__shared_owners_;
              do
                v210 = __ldxr(v209);
              while (__stxr(v210 + 1, v209));
            }
          }
          else
          {
            v362 = 0;
            v363 = 0;
          }
          v361 = 0;
          *(_QWORD *)v411 = 0;
          v361 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v377, 0, v411)[3];
          v111 = *a1 + 56;
          *(_QWORD *)v411 = &v361;
          v112 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v111, &v361, (uint64_t)&std::piecewise_construct, (uint64_t **)v411);
          v404 = 0;
          v402 = 0;
          *(_QWORD *)v403 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v402, v112[3], v112[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112[4] - v112[3]) >> 3));
          v113 = *a1;
          *(_QWORD *)v411 = ((uint64_t)(*(_QWORD *)(v394 + 40) - *(_QWORD *)(v394 + 32)) >> 4) - 1;
          *(_QWORD *)&v405 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v377, *(unint64_t *)v411, v411)+ 3;
          v114 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v113 + 96, (unint64_t *)v405, (uint64_t)&std::piecewise_construct, (uint64_t **)&v405);
          v401 = 0;
          v399 = 0;
          *(_QWORD *)v400 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v399, v114[3], v114[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114[4] - v114[3]) >> 3));
          v115 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * v361);
          if (*(char *)(v115 + 39) < 0)
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v115 + 16), *(_QWORD *)(v115 + 24));
          else
            __str = *(std::string *)(v115 + 16);
          memset(v411, 0, 24);
          v116 = v378[0];
          if (v378[0])
          {
            v117 = 0;
            v118 = 0;
            v119 = 0;
            do
            {
              v120 = v116[3];
              printf("%d %d\n", v116[2], v120);
              if ((unint64_t)v119 >= v118)
              {
                v121 = v119 - v117;
                v122 = v121 + 1;
                if ((unint64_t)(v121 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v118 - (_QWORD)v117) >> 2 > v122)
                  v122 = (uint64_t)(v118 - (_QWORD)v117) >> 2;
                if (v118 - (unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
                  v123 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v123 = v122;
                if (v123)
                  v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v123);
                else
                  v124 = 0;
                v125 = (unint64_t *)(v123 + 8 * v121);
                *v125 = v120;
                v126 = v125 + 1;
                while (v119 != v117)
                {
                  v127 = *--v119;
                  *--v125 = v127;
                }
                v118 = v123 + 8 * v124;
                *(_QWORD *)v411 = v125;
                *(_QWORD *)&v411[8] = v126;
                *(_QWORD *)&v411[16] = v118;
                if (v117)
                  operator delete(v117);
                v117 = v125;
                v119 = v126;
              }
              else
              {
                *v119++ = v120;
              }
              *(_QWORD *)&v411[8] = v119;
              v116 = (_QWORD *)*v116;
            }
            while (v116);
            v128 = *(unint64_t **)v411;
          }
          else
          {
            v119 = 0;
            v128 = 0;
          }
          v129 = 126 - 2 * __clz(v119 - v128);
          if (v119 == v128)
            v130 = 0;
          else
            v130 = v129;
          std::__introsort<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *,false>(v128, v119, v130, 1);
          v131 = *(_OWORD *)v411;
          v132 = *(int **)v411;
          if (*(_QWORD *)v411 != *(_QWORD *)&v411[8])
          {
            do
            {
              Espresso::net::remove_layer((Espresso::net *)*a1, *v132);
              v132 += 2;
            }
            while (v132 != *((int **)&v131 + 1));
          }
          if ((_QWORD)v131)
            operator delete((void *)v131);
          v359[0] = (uint64_t *)0x358637BD00000000;
          v359[1] = 0;
          v360 = 0;
          *(_DWORD *)v411 = 0;
          memset(&v411[8], 0, 48);
          v412 = 0u;
          v133 = (char *)operator new(0xF8uLL);
          *((_QWORD *)v133 + 1) = 0;
          *((_QWORD *)v133 + 2) = 0;
          *(_QWORD *)v133 = &off_1E2DBF0D0;
          *((_QWORD *)v133 + 3) = &off_1E2DA1A38;
          *(_OWORD *)(v133 + 56) = 0u;
          *(_OWORD *)(v133 + 72) = 0u;
          *(_OWORD *)(v133 + 88) = 0u;
          *(_OWORD *)(v133 + 104) = 0u;
          *(_OWORD *)(v133 + 120) = 0u;
          *(_OWORD *)(v133 + 136) = 0u;
          *(_OWORD *)(v133 + 152) = 0u;
          *(_OWORD *)(v133 + 40) = 0u;
          *(_OWORD *)(v133 + 161) = 0u;
          *((_OWORD *)v133 + 13) = 0u;
          *((_OWORD *)v133 + 14) = 0u;
          *((_QWORD *)v133 + 30) = 0;
          *(_QWORD *)&v411[8] = v133 + 24;
          *(_QWORD *)&v411[16] = v133;
          std::string::operator=((std::string *)(v133 + 40), &__str);
          MEMORY[0x19401C808](*(_QWORD *)&v411[8] + 40, "instancenorm_1d");
          v134 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a1 + 16) + 8);
          v135 = (**v134)(v134);
          v136 = *(_QWORD *)&v411[8];
          *(_DWORD *)(*(_QWORD *)&v411[8] + 8) = v135;
          *(_DWORD *)(v136 + 12) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * v361) + 12);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v411[24], v402, *(std::string **)v403, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v403 - (_QWORD)v402) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v411[48], v399, *(std::string **)v400, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v400 - (_QWORD)v399) >> 3));
          Espresso::abstract_engine_factory::shared(&v396);
          v137 = v396;
          v138 = *a1;
          std::string::basic_string[abi:ne180100]<0>(&v405, "instancenorm_1d");
          Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v137, v138 + 16, (uint64_t)&v405, (uint64_t)v359, (int *)(*(_QWORD *)&v411[8] + 8));
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)&v411[8] + 64, &v356);
          v139 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
          if (*((_QWORD *)&v356 + 1))
          {
            v140 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
          }
          if (SBYTE7(v406) < 0)
            operator delete((void *)v405);
          v142 = v397;
          if (v397)
          {
            v143 = (unint64_t *)&v397->__shared_owners_;
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          v145 = *(_QWORD *)(*(_QWORD *)&v411[8] + 64);
          v356 = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(&v405, "wGamma");
          v146 = 0;
          v147 = *(int *)(v364 + 8);
          do
          {
            v147 *= *(int *)(v364 + 12 + v146);
            v146 += 4;
          }
          while (v146 != 12);
          (*(void (**)(uint64_t, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v145 + 168))(v145, &v356, &v405, *(_QWORD *)(v364 + 24), 4 * v147, 0);
          if (SBYTE7(v406) < 0)
            operator delete((void *)v405);
          v148 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
          if (*((_QWORD *)&v356 + 1))
          {
            v149 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }
          v151 = *(_QWORD *)(*(_QWORD *)&v411[8] + 64);
          v356 = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(&v405, "wBeta");
          v152 = 0;
          v153 = *(int *)(v362 + 8);
          do
          {
            v153 *= *(int *)(v362 + 12 + v152);
            v152 += 4;
          }
          while (v152 != 12);
          (*(void (**)(uint64_t, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v151 + 168))(v151, &v356, &v405, *(_QWORD *)(v362 + 24), 4 * v153, 0);
          if (SBYTE7(v406) < 0)
            operator delete((void *)v405);
          v154 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
          if (*((_QWORD *)&v356 + 1))
          {
            v155 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
            do
              v156 = __ldaxr(v155);
            while (__stlxr(v156 - 1, v155));
            if (!v156)
            {
              ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
              std::__shared_weak_count::__release_weak(v154);
            }
          }
          *(_DWORD *)v411 = v361;
          v157 = *a1;
          v358 = v361;
          LODWORD(v405) = v361;
          *((_QWORD *)&v405 + 1) = *(_QWORD *)&v411[8];
          *(_QWORD *)&v406 = *(_QWORD *)&v411[16];
          if (*(_QWORD *)&v411[16])
          {
            v158 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
            do
              v159 = __ldxr(v158);
            while (__stxr(v159 + 1, v158));
          }
          *((_QWORD *)&v406 + 1) = 0;
          v407 = 0;
          v408 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v406 + 1, *(uint64_t *)&v411[24], *(uint64_t *)&v411[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v411[32] - *(_QWORD *)&v411[24]) >> 3));
          memset(v409, 0, sizeof(v409));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v409, *(uint64_t *)&v411[48], v412, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v412 - *(_QWORD *)&v411[48]) >> 3));
          v356 = 0uLL;
          v357 = 0;
          v396 = (void **)&v356;
          LOBYTE(v397) = 0;
          *(_QWORD *)&v356 = operator new(0x48uLL);
          *((_QWORD *)&v356 + 1) = v356;
          v357 = v356 + 72;
          *((_QWORD *)&v356 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v357, (uint64_t)&v405, (uint64_t)&v410, v356);
          Espresso::net::insert_layers(v157, &v358, (uint64_t *)&v356);
          v396 = (void **)&v356;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v396);
          v396 = (void **)v409;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v396);
          v396 = (void **)&v406 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v396);
          v160 = (std::__shared_weak_count *)v406;
          if ((_QWORD)v406)
          {
            v161 = (unint64_t *)(v406 + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          *(_QWORD *)&v405 = &v411[48];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
          *(_QWORD *)&v405 = &v411[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
          v163 = *(std::__shared_weak_count **)&v411[16];
          if (*(_QWORD *)&v411[16])
          {
            v164 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
              std::__shared_weak_count::__release_weak(v163);
            }
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          *(_QWORD *)v411 = &v399;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v411);
          *(_QWORD *)v411 = &v402;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v411);
          v166 = v363;
          if (v363)
          {
            v167 = (unint64_t *)&v363->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
          v169 = v365;
          if (v365)
          {
            v170 = (unint64_t *)&v365->__shared_owners_;
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          v172 = v367;
          if (v367)
          {
            v173 = (unint64_t *)&v367->__shared_owners_;
            do
              v174 = __ldaxr(v173);
            while (__stlxr(v174 - 1, v173));
            if (!v174)
            {
              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
              std::__shared_weak_count::__release_weak(v172);
            }
          }
          v91 = 0;
          v105 = v369;
        }
        if (v105)
        {
          v175 = (unint64_t *)&v105->__shared_owners_;
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
      }
      else
      {
        v91 = 2;
      }
      v177 = v371;
      if (v371)
      {
        v178 = (unint64_t *)&v371->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      v180 = v373;
      if (v373)
      {
        v181 = (unint64_t *)&v373->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      ++v342;
    }
    v183 = (std::__shared_weak_count *)*((_QWORD *)&v393 + 1);
    if (*((_QWORD *)&v393 + 1))
    {
      v184 = (unint64_t *)(*((_QWORD *)&v393 + 1) + 8);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    v186 = (std::__shared_weak_count *)*((_QWORD *)&v392 + 1);
    if (*((_QWORD *)&v392 + 1))
    {
      v187 = (unint64_t *)(*((_QWORD *)&v392 + 1) + 8);
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    v189 = (std::__shared_weak_count *)*((_QWORD *)&v391 + 1);
    if (*((_QWORD *)&v391 + 1))
    {
      v190 = (unint64_t *)(*((_QWORD *)&v391 + 1) + 8);
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v389);
    v192 = (void *)v388;
    *(_QWORD *)&v388 = 0;
    if (v192)
      operator delete(v192);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v386);
    v193 = (void *)v385;
    *(_QWORD *)&v385 = 0;
    if (v193)
      operator delete(v193);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v383);
    v194 = (void *)v382;
    *(_QWORD *)&v382 = 0;
    if (v194)
      operator delete(v194);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v380);
    v195 = *(void **)&v379[8];
    *(_QWORD *)&v379[8] = 0;
    if (v195)
      operator delete(v195);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v377);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v376 + 8);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
    v3 = 0uLL;
  }
  while (v91 != 3);
  v4 = *a1;
LABEL_291:
  v211 = (char *)a1[1];
  v355[0] = (char *)v4;
  v355[1] = v211;
  if (v211)
  {
    v212 = (unint64_t *)(v211 + 8);
    do
      v213 = __ldxr(v212);
    while (__stxr(v213 + 1, v212));
    v4 = *a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v353, (__int128 **)(v4 + 184));
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v354, (__int128 **)(v4 + 208));
  reshape_network(v355, v353);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v354, v354[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v353, (char *)v353[1]);
  if (v211)
  {
    v214 = (unint64_t *)(v211 + 8);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      (*(void (**)(char *))(*(_QWORD *)v211 + 16))(v211);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v211);
    }
  }
  v348[0] = MEMORY[0x1E0C809B0];
  v348[1] = 3321888768;
  v349 = ___ZN8Espresso24transformer_optimizationENSt3__110shared_ptrINS_3netEEE_block_invoke;
  v350 = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  v217 = (Espresso::net *)*a1;
  v216 = a1[1];
  v351 = *a1;
  v352 = (std::__shared_weak_count *)v216;
  if (v216)
  {
    v218 = (unint64_t *)(v216 + 8);
    do
      v219 = __ldxr(v218);
    while (__stxr(v219 + 1, v218));
  }
  v220 = v348;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v411, v217);
  *(_OWORD *)v378 = 0u;
  memset(v379, 0, 20);
  v377 = 0u;
  memset(v376, 0, sizeof(v376));
  *(_OWORD *)__p = 0u;
  v375 = 0u;
  *(_QWORD *)&v380 = v217;
  LODWORD(v405) = 0;
  if (*((_QWORD *)v217 + 5) != *((_QWORD *)v217 + 4))
  {
    v343 = v220;
    LODWORD(v221) = 0;
    do
    {
      *(_DWORD *)&v379[8] = v221;
      v222 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v411[16], v221, &v405);
      if ((char *)v222[6] - (char *)v222[5] == 4)
      {
        *(_DWORD *)&v379[12] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v411[16], *(int *)&v379[8], &v379[8])[5];
        v223 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v411[16], *(int *)&v379[12], &v379[12]);
        if ((char *)v223[6] - (char *)v223[5] == 4)
        {
          *(_DWORD *)&v379[16] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v411[16], *(int *)&v379[12], &v379[12])[5];
          v224 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v411[40], *(int *)&v379[12], &v379[12]);
          if ((char *)v224[6] - (char *)v224[5] == 4)
          {
            v225 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v411[40], *(int *)&v379[16], &v379[16]);
            if ((char *)v225[6] - (char *)v225[5] == 4)
            {
              v226 = (uint64_t *)(*((_QWORD *)v217 + 4) + 16 * (int)v221);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v376[1], *v226, v226[1]);
              v227 = (uint64_t *)(*((_QWORD *)v217 + 4) + 16 * *(int *)&v379[12]);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v376[2], *v227, v227[1]);
              v228 = (uint64_t *)(*((_QWORD *)v217 + 4) + 16 * *(int *)&v379[16]);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v377, *v228, v228[1]);
              v229 = *(_QWORD *)&v376[1];
              v230 = *(void **)(*(_QWORD *)&v376[1] + 64);
              if (v230
              {
                v231 = *(unint64_t **)(v229 + 72);
                if (v231)
                {
                  v232 = v231 + 1;
                  do
                    v233 = __ldxr(v232);
                  while (__stxr(v233 + 1, v232));
                }
              }
              else
              {
                v231 = 0;
              }
              v234 = (std::__shared_weak_count *)__p[1];
              __p[0] = v230;
              __p[1] = v231;
              if (v234)
              {
                v235 = (unint64_t *)&v234->__shared_owners_;
                do
                  v236 = __ldaxr(v235);
                while (__stlxr(v236 - 1, v235));
                if (!v236)
                {
                  ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                  std::__shared_weak_count::__release_weak(v234);
                }
                v230 = __p[0];
              }
              if (v230)
              {
                v237 = *(_QWORD *)&v376[2];
                v238 = *(void **)(*(_QWORD *)&v376[2] + 64);
                if (v238
                {
                  v239 = *(_QWORD *)(v237 + 72);
                  if (v239)
                  {
                    v240 = (unint64_t *)(v239 + 8);
                    do
                      v241 = __ldxr(v240);
                    while (__stxr(v241 + 1, v240));
                  }
                }
                else
                {
                  v239 = 0;
                }
                v242 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
                *(_QWORD *)&v375 = v238;
                *((_QWORD *)&v375 + 1) = v239;
                if (v242)
                {
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldaxr(v243);
                  while (__stlxr(v244 - 1, v243));
                  if (!v244)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                  v238 = (void *)v375;
                }
                if (v238)
                {
                  v245 = v377;
                  v246 = *(void **)(v377 + 64);
                  if (v246
                  {
                    v247 = *(_QWORD *)(v245 + 72);
                    if (v247)
                    {
                      v248 = (unint64_t *)(v247 + 8);
                      do
                        v249 = __ldxr(v248);
                      while (__stxr(v249 + 1, v248));
                    }
                  }
                  else
                  {
                    v247 = 0;
                  }
                  v250 = (std::__shared_weak_count *)*((_QWORD *)&v376[0] + 1);
                  *(_QWORD *)&v376[0] = v246;
                  *((_QWORD *)&v376[0] + 1) = v247;
                  if (v250)
                  {
                    v251 = (unint64_t *)&v250->__shared_owners_;
                    do
                      v252 = __ldaxr(v251);
                    while (__stlxr(v252 - 1, v251));
                    if (!v252)
                    {
                      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                      std::__shared_weak_count::__release_weak(v250);
                    }
                    v246 = *(void **)&v376[0];
                  }
                  if (v246)
                    v349((uint64_t)v220, (uint64_t)__p);
                }
              }
            }
          }
        }
      }
      v221 = (int)v405 + 1;
      LODWORD(v405) = v405 + 1;
    }
    while (v221 < (uint64_t)(*((_QWORD *)v217 + 5) - *((_QWORD *)v217 + 4)) >> 4);
    v253 = v378[0];
    v254 = v378[1];
    if (v378[0] == v378[1])
    {
      a1 = v341;
    }
    else
    {
      v255 = 0;
      a1 = v341;
      do
      {
        Espresso::net::remove_layer(v217, v255 + *v253++);
        --v255;
      }
      while (v253 != v254);
      v253 = v378[0];
    }
    v220 = v343;
    if (v253)
    {
      v378[1] = v253;
      operator delete(v253);
    }
  }
  v256 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
  if (*((_QWORD *)&v377 + 1))
  {
    v257 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = (std::__shared_weak_count *)*((_QWORD *)&v376[2] + 1);
  if (*((_QWORD *)&v376[2] + 1))
  {
    v260 = (unint64_t *)(*((_QWORD *)&v376[2] + 1) + 8);
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = (std::__shared_weak_count *)*((_QWORD *)&v376[1] + 1);
  if (*((_QWORD *)&v376[1] + 1))
  {
    v263 = (unint64_t *)(*((_QWORD *)&v376[1] + 1) + 8);
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = (std::__shared_weak_count *)*((_QWORD *)&v376[0] + 1);
  if (*((_QWORD *)&v376[0] + 1))
  {
    v266 = (unint64_t *)(*((_QWORD *)&v376[0] + 1) + 8);
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v268 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
  if (*((_QWORD *)&v375 + 1))
  {
    v269 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 8);
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v272 = (unint64_t *)((char *)__p[1] + 8);
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&v411[48]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&v411[24]);
  v274 = *(std::__shared_weak_count **)&v411[8];
  if (*(_QWORD *)&v411[8])
  {
    v275 = (unint64_t *)(*(_QWORD *)&v411[8] + 8);
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }

  v277 = (Espresso::net *)*a1;
  v278 = &__block_literal_global_46_400;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v405, v277);
  v377 = 0u;
  *(_OWORD *)v378 = 0u;
  v375 = 0u;
  memset(v376, 0, sizeof(v376));
  *(_OWORD *)__p = 0u;
  *(_QWORD *)v379 = 0;
  *(_QWORD *)&v379[8] = v277;
  *(_DWORD *)v411 = 0;
  v279 = *((_QWORD *)v277 + 4);
  if (*((_QWORD *)v277 + 5) != v279)
  {
    v280 = 0;
    v281 = 0;
    do
    {
      *(_DWORD *)v379 = v281;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v376, *(_QWORD *)(v279 + 16 * v280), *(_QWORD *)(v279 + 16 * v280 + 8));
      v282 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v406, v281, v411);
      if ((char *)v282[6] - (char *)v282[5] == 4)
      {
        *(_DWORD *)&v379[4] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v406, *(int *)v379, v379)[5];
        v283 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v408, *(int *)&v379[4], &v379[4]);
        if ((char *)v283[6] - (char *)v283[5] == 4)
        {
          v284 = (uint64_t *)(*((_QWORD *)v277 + 4) + 16 * *(int *)&v379[4]);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v376[1], *v284, v284[1]);
          v285 = *(_QWORD *)&v376[0];
          v286 = *(void **)(*(_QWORD *)&v376[0] + 64);
          if (v286
          {
            v287 = *(unint64_t **)(v285 + 72);
            if (v287)
            {
              v288 = v287 + 1;
              do
                v289 = __ldxr(v288);
              while (__stxr(v289 + 1, v288));
            }
          }
          else
          {
            v287 = 0;
          }
          v290 = (std::__shared_weak_count *)__p[1];
          __p[0] = v286;
          __p[1] = v287;
          if (v290)
          {
            v291 = (unint64_t *)&v290->__shared_owners_;
            do
              v292 = __ldaxr(v291);
            while (__stlxr(v292 - 1, v291));
            if (!v292)
            {
              ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
              std::__shared_weak_count::__release_weak(v290);
            }
          }
          v293 = *(_QWORD *)&v376[1];
          v294 = *(void **)(*(_QWORD *)&v376[1] + 64);
          if (v294
          {
            v295 = *(_QWORD *)(v293 + 72);
            if (v295)
            {
              v296 = (unint64_t *)(v295 + 8);
              do
                v297 = __ldxr(v296);
              while (__stxr(v297 + 1, v296));
            }
          }
          else
          {
            v295 = 0;
          }
          v298 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
          *(_QWORD *)&v375 = v294;
          *((_QWORD *)&v375 + 1) = v295;
          if (v298)
          {
            v299 = (unint64_t *)&v298->__shared_owners_;
            do
              v300 = __ldaxr(v299);
            while (__stlxr(v300 - 1, v299));
            if (!v300)
            {
              ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
              std::__shared_weak_count::__release_weak(v298);
            }
          }
          if (__p[0])
            v301 = (_QWORD)v375 == 0;
          else
            v301 = 1;
          if (!v301)
            ___ZN8Espresso24transformer_optimizationENSt3__110shared_ptrINS_3netEEE_block_invoke_45((uint64_t)v294, (uint64_t)__p);
        }
      }
      v280 = *(int *)v411 + 1;
      ++*(_DWORD *)v411;
      v279 = *((_QWORD *)v277 + 4);
      v281 = v280;
    }
    while (v280 < (*((_QWORD *)v277 + 5) - v279) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v303 = (_DWORD *)*((_QWORD *)&v376[2] + 1);
  v302 = *(_DWORD **)&v376[2];
  if (*(_QWORD *)&v376[2] != *((_QWORD *)&v376[2] + 1))
  {
    v304 = 0;
    do
    {
      Espresso::net::remove_layer(v277, v304 + *v302++);
      --v304;
    }
    while (v302 != v303);
  }
  v305 = (_QWORD *)*((_QWORD *)&v377 + 1);
  v344 = v378[0];
  if (*((void **)&v377 + 1) != v378[0])
  {
    v306 = 0;
    do
    {
      v307 = *(_DWORD *)v305;
      LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v305 + v306;
      *(_DWORD *)v411 = v307;
      v308 = v305[2];
      *(_QWORD *)&v411[8] = v305[1];
      *(_QWORD *)&v411[16] = v308;
      if (v308)
      {
        v309 = (unint64_t *)(v308 + 8);
        do
          v310 = __ldxr(v309);
        while (__stxr(v310 + 1, v309));
      }
      memset(&v411[24], 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v411[24], v305[3], v305[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v305[4] - v305[3]) >> 3));
      *(_QWORD *)&v411[48] = 0;
      v412 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v411[48], v305[6], v305[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v305[7] - v305[6]) >> 3));
      *(_QWORD *)v403 = 0;
      v402 = 0;
      v404 = 0;
      v399 = (std::string *)&v402;
      LOBYTE(v400[0]) = 0;
      v402 = (std::string *)operator new(0x48uLL);
      *(_QWORD *)v403 = v402;
      v404 = v402 + 3;
      *(_QWORD *)v403 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v404, (uint64_t)v411, (uint64_t)v413, (uint64_t)v402);
      Espresso::net::insert_layers((uint64_t)v277, (int *)&__str, (uint64_t *)&v402);
      v399 = (std::string *)&v402;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v399);
      v399 = (std::string *)&v411[48];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v399);
      v399 = (std::string *)&v411[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v399);
      v311 = *(std::__shared_weak_count **)&v411[16];
      if (*(_QWORD *)&v411[16])
      {
        v312 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
        do
          v313 = __ldaxr(v312);
        while (__stlxr(v313 - 1, v312));
        if (!v313)
        {
          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
          std::__shared_weak_count::__release_weak(v311);
        }
      }
      ++v306;
      v305 += 9;
    }
    while (v305 != v344);
  }
  *(_QWORD *)v411 = (char *)&v377 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v411);
  if (*(_QWORD *)&v376[2])
  {
    *((_QWORD *)&v376[2] + 1) = *(_QWORD *)&v376[2];
    operator delete(*(void **)&v376[2]);
  }
  v314 = (std::__shared_weak_count *)*((_QWORD *)&v376[1] + 1);
  if (*((_QWORD *)&v376[1] + 1))
  {
    v315 = (unint64_t *)(*((_QWORD *)&v376[1] + 1) + 8);
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
    }
  }
  v317 = (std::__shared_weak_count *)*((_QWORD *)&v376[0] + 1);
  if (*((_QWORD *)&v376[0] + 1))
  {
    v318 = (unint64_t *)(*((_QWORD *)&v376[0] + 1) + 8);
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v320 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
  if (*((_QWORD *)&v375 + 1))
  {
    v321 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 8);
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  v323 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v324 = (unint64_t *)((char *)__p[1] + 8);
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v409[0]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v406 + 1));
  v326 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
  if (*((_QWORD *)&v405 + 1))
  {
    v327 = (unint64_t *)(*((_QWORD *)&v405 + 1) + 8);
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }

  v330 = (char *)*v341;
  v329 = (char *)v341[1];
  v347[0] = (char *)*v341;
  v347[1] = v329;
  if (v329)
  {
    v331 = (unint64_t *)(v329 + 8);
    do
      v332 = __ldxr(v331);
    while (__stxr(v332 + 1, v331));
    v330 = (char *)*v341;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v345, (__int128 **)v330 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v346, (__int128 **)v330 + 26);
  reshape_network(v347, v345);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v346, v346[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v345, (char *)v345[1]);
  if (v329)
  {
    v333 = (unint64_t *)(v329 + 8);
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      (*(void (**)(char *))(*(_QWORD *)v329 + 16))(v329);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v329);
    }
  }
  v335 = v352;
  if (v352)
  {
    v336 = (unint64_t *)&v352->__shared_owners_;
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  v338 = v395;
  if (v395)
  {
    v339 = (unint64_t *)&v395->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
}

void sub_1913174D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a65;
  char a67;
  char a69;
  char a71;
  uint64_t v71;

  *(_QWORD *)(v71 - 176) = &STACK[0x3A0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 176));
  *(_QWORD *)(v71 - 176) = &STACK[0x3B8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 176));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  pattern_matcher::~pattern_matcher((pattern_matcher *)&STACK[0x210]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void Espresso::fuse_log_softmax_multinomial_to_gumbel_max(uint64_t a1)
{
  Espresso::net *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const void *v6;
  Espresso *v7;
  Espresso *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  const Espresso::base_kernel *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  std::string::size_type size;
  std::string *v46;
  char *v47;
  uint64_t v48;
  size_t v49;
  std::string *p_str;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  uint64_t (***v55)(_QWORD);
  int v56;
  uint64_t v57;
  void **v58;
  Espresso::net *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  Espresso *v67;
  void *v68;
  _QWORD *v69;
  Espresso::net *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89[3];
  char *v90[3];
  char *v91[2];
  __int128 v92;
  uint64_t v93;
  int v94;
  unint64_t *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int16 v101;
  __int128 v102;
  char v103;
  int v104;
  std::string v105;
  _QWORD v106[3];
  std::string v107;
  std::string v108;
  void *v109;
  std::__shared_weak_count *v110;
  Espresso *v111;
  std::__shared_weak_count *v112;
  unint64_t v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::string __str;
  __int128 v117;
  uint64_t v118;
  _QWORD v119[3];
  _QWORD v120[3];

  v120[1] = *MEMORY[0x1E0C80C00];
  v113 = 0;
  v2 = *(Espresso::net **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) - v3 != 16)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 16 * v4);
      v6 = *(const void **)(v5 + 64);
      if (v6
      {
        v8 = v7;
        v9 = *(std::__shared_weak_count **)(v5 + 72);
        v111 = v7;
        v112 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
          v2 = *(Espresso::net **)a1;
        }
      }
      else
      {
        v8 = 0;
        v111 = 0;
        v112 = 0;
      }
      v12 = *(_QWORD *)(*((_QWORD *)v2 + 4) + 16 * v4 + 16);
      v13 = *(const void **)(v12 + 64);
      if (!v13)
        goto LABEL_106;
      if (!v14)
        goto LABEL_106;
      v16 = v14;
      v17 = *(std::__shared_weak_count **)(v12 + 72);
      v109 = v14;
      v110 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      if (v8)
      {
        if (!Espresso::is_kernel_generating_output(v8, v15))
        {
          v20 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v8 + 320))(v8);
          v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 320))(v16);
          if (*(_BYTE *)(v20 + 26))
          {
            v22 = (uint64_t *)v21;
            v23 = *(_QWORD *)a1 + 56;
            v95 = &v113;
            v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v23, &v113, (uint64_t)&std::piecewise_construct, (uint64_t **)&v95);
            if (v24[4] - v24[3] == 24)
            {
              v25 = *(_QWORD *)a1 + 96;
              v95 = &v113;
              v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v25, &v113, (uint64_t)&std::piecewise_construct, (uint64_t **)&v95);
              if (v26[4] - v26[3] == 24)
              {
                v27 = *(_QWORD *)a1 + 56;
                v95 = (unint64_t *)(v113 + 1);
                v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v113 + 1, &v95);
                if (v28[4] - v28[3] == 24)
                {
                  v29 = *(_QWORD *)a1 + 96;
                  v95 = (unint64_t *)(v113 + 1);
                  v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29, v113 + 1, &v95);
                  if (v30[4] - v30[3] == 24)
                    break;
                }
              }
            }
          }
        }
      }
LABEL_101:
      if (v17)
      {
        v79 = (unint64_t *)&v17->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
LABEL_106:
      v81 = v112;
      if (v112)
      {
        v82 = (unint64_t *)&v112->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v4 = v113 + 1;
      v113 = v4;
      v2 = *(Espresso::net **)a1;
      v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if (v4 >= ((*(_QWORD *)(*(_QWORD *)a1 + 40) - v3) >> 4) - 1)
        goto LABEL_112;
    }
    v31 = *(_QWORD *)a1 + 56;
    v95 = &v113;
    v32 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v31, &v113, (uint64_t)&std::piecewise_construct, (uint64_t **)&v95)[3];
    if (*((char *)v32 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
    }
    else
    {
      v33 = *v32;
      v108.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v33;
    }
    v34 = *(_QWORD *)a1 + 96;
    v95 = &v113;
    v35 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v34, &v113, (uint64_t)&std::piecewise_construct, (uint64_t **)&v95)[3];
    if (*((char *)v35 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
    }
    else
    {
      v36 = *v35;
      v107.__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v36;
    }
    v37 = *(_QWORD *)a1 + 56;
    v95 = (unint64_t *)(v113 + 1);
    v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v113 + 1, &v95);
    memset(v106, 0, sizeof(v106));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v106, v38[3], v38[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38[4] - v38[3]) >> 3));
    v39 = *(_QWORD *)a1 + 96;
    v95 = (unint64_t *)(v113 + 1);
    v40 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v39, v113 + 1, &v95)[3];
    if (*((char *)v40 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
    }
    else
    {
      v41 = *v40;
      v105.__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v41;
    }
    v42 = (unsigned __int8 *)v106[0];
    v43 = *(unsigned __int8 *)(v106[0] + 23);
    if ((v43 & 0x80u) == 0)
      v44 = *(unsigned __int8 *)(v106[0] + 23);
    else
      v44 = *(_QWORD *)(v106[0] + 8);
    size = HIBYTE(v107.__r_.__value_.__r.__words[2]);
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v107.__r_.__value_.__l.__size_;
    if (v44 == size)
    {
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v107;
      else
        v46 = (std::string *)v107.__r_.__value_.__r.__words[0];
      if ((v43 & 0x80) == 0)
      {
        if (*(_BYTE *)(v106[0] + 23))
        {
          while (*v42 == v46->__r_.__value_.__s.__data_[0])
          {
            ++v42;
            v46 = (std::string *)((char *)v46 + 1);
            if (!--v43)
              goto LABEL_46;
          }
          goto LABEL_94;
        }
        goto LABEL_46;
      }
      if (!memcmp(*(const void **)v106[0], v46, *(_QWORD *)(v106[0] + 8)))
      {
LABEL_46:
        v101 = 0;
        v102 = xmmword_191A93340;
        v104 = 0;
        v100 = *v22;
        v103 = 1;
        LODWORD(v95) = 0;
        v96 = 0u;
        v97 = 0u;
        v98 = 0u;
        v99 = 0u;
        v47 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v47 + 1) = 0;
        *((_QWORD *)v47 + 2) = 0;
        *(_QWORD *)v47 = &off_1E2DBF0D0;
        *((_QWORD *)v47 + 3) = &off_1E2DA1A38;
        *(_OWORD *)(v47 + 40) = 0u;
        *(_OWORD *)(v47 + 56) = 0u;
        *(_OWORD *)(v47 + 72) = 0u;
        *(_OWORD *)(v47 + 88) = 0u;
        *(_OWORD *)(v47 + 104) = 0u;
        *(_OWORD *)(v47 + 120) = 0u;
        *(_OWORD *)(v47 + 136) = 0u;
        *(_OWORD *)(v47 + 152) = 0u;
        *(_OWORD *)(v47 + 161) = 0u;
        *((_OWORD *)v47 + 13) = 0u;
        *((_OWORD *)v47 + 14) = 0u;
        *((_QWORD *)v47 + 30) = 0;
        *(_QWORD *)&v96 = v47 + 24;
        *((_QWORD *)&v96 + 1) = v47;
        v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v113);
        if (*(char *)(v48 + 39) >= 0)
          v49 = *(unsigned __int8 *)(v48 + 39);
        else
          v49 = *(_QWORD *)(v48 + 24);
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v49 + 11);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v49)
        {
          if (*(char *)(v48 + 39) >= 0)
            v51 = (const void *)(v48 + 16);
          else
            v51 = *(const void **)(v48 + 16);
          memmove(p_str, v51, v49);
        }
        strcpy((char *)p_str + v49, "@gumbel_max");
        v52 = v96;
        v53 = v96 + 16;
        if (*(char *)(v96 + 39) < 0)
        {
          operator delete(*(void **)v53);
          v52 = v96;
        }
        v54 = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)v53 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(v53 + 16) = v54;
        MEMORY[0x19401C808](v52 + 40, "gumbel_max");
        v55 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
        v56 = (**v55)(v55);
        v57 = v96;
        *(_DWORD *)(v96 + 8) = v56;
        *(_DWORD *)(v57 + 12) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v113) + 12);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__str, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
        else
          __str = v108;
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v97, &__str, &v117, 1uLL);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__str, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
        else
          __str = v105;
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&v98 + 8), &__str, &v117, 1uLL);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        Espresso::abstract_engine_factory::shared(&v114);
        v58 = v114;
        v59 = *(Espresso::net **)a1;
        std::string::basic_string[abi:ne180100]<0>(&__str, "gumbel_max");
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v58, (uint64_t)v59 + 16, (uint64_t)&__str, (uint64_t)&v100, (int *)(v96 + 8));
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v96 + 64, &v92);
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
        if (*((_QWORD *)&v92 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v63 = v115;
        if (v115)
        {
          v64 = (unint64_t *)&v115->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        LODWORD(v95) = v113;
        v66 = *(char **)(v96 + 64);
        v67 = v111;
        v68 = v109;
        v69 = operator new(0x10uLL);
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v69 + 2);
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v69 + 2);
        *v69 = v67;
        v69[1] = v68;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
        Espresso::merge_kernel_attributes(v66, (uint64_t *)&__str);
        operator delete(v69);
        Espresso::net::remove_layer(*(Espresso::net **)a1, v113);
        Espresso::net::remove_layer(*(Espresso::net **)a1, v113);
        v70 = *(Espresso::net **)a1;
        v94 = v113;
        LODWORD(__str.__r_.__value_.__l.__data_) = (_DWORD)v95;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v96;
        if (*((_QWORD *)&v96 + 1))
        {
          v71 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v117 = 0uLL;
        v118 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v117, v97, *((uint64_t *)&v97 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v97 + 1) - v97) >> 3));
        memset(v119, 0, sizeof(v119));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v119, *((uint64_t *)&v98 + 1), v99, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3));
        v92 = 0uLL;
        v93 = 0;
        v114 = (void **)&v92;
        LOBYTE(v115) = 0;
        *(_QWORD *)&v92 = operator new(0x48uLL);
        *((_QWORD *)&v92 + 1) = v92;
        v93 = v92 + 72;
        *((_QWORD *)&v92 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v93, (uint64_t)&__str, (uint64_t)v120, v92);
        Espresso::net::insert_layers((uint64_t)v70, &v94, (uint64_t *)&v92);
        v114 = (void **)&v92;
        std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v114);
        v114 = (void **)v119;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v114);
        v114 = (void **)&v117;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v114);
        v73 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
        if (__str.__r_.__value_.__r.__words[2])
        {
          v74 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        ++v113;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        v76 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v77 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
      }
    }
LABEL_94:
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    v95 = v106;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    v17 = v110;
    goto LABEL_101;
  }
LABEL_112:
  v84 = *(char **)(a1 + 8);
  v91[0] = (char *)v2;
  v91[1] = v84;
  if (v84)
  {
    v85 = (unint64_t *)(v84 + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    v2 = *(Espresso::net **)a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v89, (__int128 **)v2 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v90, (__int128 **)v2 + 26);
  reshape_network(v91, v89);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v90, v90[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v89, (char *)v89[1]);
  if (v84)
  {
    v87 = (unint64_t *)(v84 + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      (*(void (**)(char *))(*(_QWORD *)v84 + 16))(v84);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v84);
    }
  }
}

void sub_191318408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a33);
  if (a52 < 0)
    operator delete(__p);
  a33 = &a53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a61 < 0)
    operator delete(a56);
  if (*(char *)(v61 - 233) < 0)
    operator delete(*(void **)(v61 - 256));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v61 - 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v61 - 216);
  _Unwind_Resume(a1);
}

void Espresso::low_precision_accumulation_fc(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *__p;
  std::__shared_weak_count *v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v1 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 40);
  if (v1 != v2)
  {
    while (1)
    {
      v4 = *v1;
      v3 = (std::__shared_weak_count *)v1[1];
      v46 = *v1;
      v47 = v3;
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v7 = *(const void **)(v4 + 64);
      if (!v7)
        goto LABEL_46;
      if (!v8)
        goto LABEL_46;
      v9 = v8;
      v10 = *(std::__shared_weak_count **)(v4 + 72);
      v44 = v8;
      v45 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      if (!*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v8 + 384))(v8) + 32))
        break;
      if (v10)
        goto LABEL_42;
LABEL_46:
      v30 = v47;
      if (v47)
      {
        v31 = (unint64_t *)&v47->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v1 += 2;
      if (v1 == v2)
        return;
    }
    *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v9 + 384))(v9) + 116) = 1;
    quantize_to_fp16<Espresso::generic_inner_product_kernel,2>((uint64_t *)&v44);
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v9 + 472))(&v42, v9);
    if (v42)
    {
      Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(&v40, &v42);
      v38 = 0;
      v39 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "w_f16_t");
      (*(void (**)(void *, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v9 + 160))(v9, &v38, &__p, *(_QWORD *)(v40 + 16), 2 * *(int *)(v40 + 8) * (uint64_t)*(int *)(v40 + 12), 0);
      if (v37 < 0)
        operator delete(__p);
      v13 = v39;
      if (v39)
      {
        v14 = (unint64_t *)&v39->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v33 = 0;
      v34 = 0;
      __p = 0;
      v36 = 0;
      (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v44 + 464))(v44, &v33, &__p);
      v16 = v36;
      if (v36)
      {
        v17 = (unint64_t *)&v36->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v34;
      if (v34)
      {
        v20 = (unint64_t *)&v34->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v41;
      if (v41)
      {
        v23 = (unint64_t *)&v41->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    v25 = v43;
    if (v43)
    {
      v26 = (unint64_t *)&v43->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v10 = v45;
    if (!v45)
      goto LABEL_46;
LABEL_42:
    v28 = (unint64_t *)&v10->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_46;
  }
}

void sub_1913188C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24 - 80);
  _Unwind_Resume(a1);
}

void Espresso::low_precision_accumulation_conv(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *i;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v1 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  for (i = *(uint64_t **)(*(_QWORD *)a1 + 40); v1 != i; v1 += 2)
  {
    v4 = *v1;
    v3 = (std::__shared_weak_count *)v1[1];
    v38 = *v1;
    v39 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = *(const void **)(v4 + 64);
    if (v7)
    {
      if (v8)
      {
        v9 = v8;
        v10 = *(std::__shared_weak_count **)(v4 + 72);
        v36 = v8;
        v37 = v10;
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v8 + 384))(v8) + 144) = 1;
        quantize_to_fp16<Espresso::generic_convolution_kernel,4>((uint64_t *)&v36);
        (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v9 + 552))(&v34, v9);
        if (v34)
        {
          v32 = v34;
          v33 = v35;
          if (v35)
          {
            v13 = (unint64_t *)&v35->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          v30 = 0;
          v31 = 0;
          (*(void (**)(void *, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 544))(v9, &v32, &v30);
          v15 = v31;
          if (v31)
          {
            v16 = (unint64_t *)&v31->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v18 = v33;
          if (v33)
          {
            v19 = (unint64_t *)&v33->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        v21 = v35;
        if (v35)
        {
          v22 = (unint64_t *)&v35->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = v37;
        if (v37)
        {
          v25 = (unint64_t *)&v37->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
    }
    v27 = v39;
    if (v39)
    {
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_191318B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void quantize_to_fp16<Espresso::generic_convolution_kernel,4>(uint64_t *a1)
{
  uint64_t v2;
  int *v3;
  _WORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 456))(&v36);
  if (v36)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v34, v36 + 8);
    v2 = 0;
    v3 = *(int **)(v36 + 24);
    v4 = *(_WORD **)(v34 + 24);
    v5 = *(int *)(v36 + 8);
    do
    {
      v5 *= *(int *)(v36 + 12 + v2);
      v2 += 4;
    }
    while (v2 != 12);
    for (; v5; --v5)
    {
      v6 = *v3++;
      _S0 = v6;
      __asm { FCVT            H0, S0 }
      *v4++ = _S0;
    }
    v12 = *a1;
    v32 = 0;
    v33 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 400))(v12, &v32);
    v13 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *a1;
    v30 = 0;
    v31 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
    v17 = 0;
    v18 = *(int *)(v34 + 8);
    do
    {
      v18 *= *(int *)(v34 + 12 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v16 + 160))(v16, &v30, __p, *(_QWORD *)(v34 + 24), 2 * v18, 0);
    if (v29 < 0)
      operator delete(__p[0]);
    v19 = v31;
    if (v31)
    {
      v20 = (unint64_t *)&v31->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v35;
    if (v35)
    {
      v23 = (unint64_t *)&v35->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_191318DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 32);
  _Unwind_Resume(a1);
}

void quantize_to_fp16<Espresso::generic_inner_product_kernel,2>(uint64_t *a1)
{
  uint64_t v2;
  int *v3;
  _WORD *v4;
  int v5;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 416))(&v33);
  if (v33)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(&v31, (int *)(v33 + 8));
    v2 = *(int *)(v33 + 12) * (uint64_t)*(int *)(v33 + 8);
    if (v2)
    {
      v3 = *(int **)(v33 + 16);
      v4 = *(_WORD **)(v31 + 16);
      do
      {
        v5 = *v3++;
        _S0 = v5;
        __asm { FCVT            H0, S0 }
        *v4++ = _S0;
        --v2;
      }
      while (v2);
    }
    v11 = *a1;
    v29 = 0;
    v30 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 400))(v11, &v29);
    v12 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *a1;
    v27 = 0;
    v28 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
    (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v15 + 160))(v15, &v27, __p, *(_QWORD *)(v31 + 16), 2 * *(int *)(v31 + 8) * (uint64_t)*(int *)(v31 + 12), 0);
    if (v26 < 0)
      operator delete(__p[0]);
    v16 = v28;
    if (v28)
    {
      v17 = (unint64_t *)&v28->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v32;
    if (v32)
    {
      v20 = (unint64_t *)&v32->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v22 = v34;
  if (v34)
  {
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_191318FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 32);
  _Unwind_Resume(a1);
}

void Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;

  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(a1, *(_DWORD *)(*a2 + 12), *(_DWORD *)(*a2 + 8), 1, 1);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 12);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(unsigned int *)(v4 + 8);
    v10 = *a2;
    do
    {
      if ((int)v9 >= 1)
      {
        v11 = (_WORD *)(*(_QWORD *)(v4 + 16) + v7);
        v12 = (_WORD *)(*(_QWORD *)(v10 + 16) + v6);
        v13 = v9;
        do
        {
          *v11++ = *v12;
          v12 += v5;
          --v13;
        }
        while (v13);
      }
      ++v8;
      v7 += 2 * (int)v9;
      v6 += 2;
    }
    while (v8 != v5);
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  Espresso *v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEFF0;
  *((_QWORD *)v10 + 3) = &off_1E2DA13D0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1913191A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<unsigned short,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA13D0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<unsigned short,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA13D0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEFF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEFF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(_QWORD *a1, int *a2)
{
  char *v4;
  int v5;
  int v6;
  Espresso *v7;
  void *v8;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = &off_1E2DA13D0;
  *(_QWORD *)v4 = &off_1E2DBEFF0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  v5 = *a2;
  v6 = a2[1];
  *((_DWORD *)v4 + 8) = *a2;
  *((_DWORD *)v4 + 9) = v6;
  v7 = (Espresso *)(2 * v5 * (uint64_t)v6);
  v8 = Espresso::kern_alloc_uninitialized(v7);
  bzero(v8, (size_t)v7);
  *((_QWORD *)v4 + 5) = v8;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_19131938C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

BOOL Espresso::is_kernel_generating_output(Espresso *this, const Espresso::base_kernel *a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *__p[2];
  char v7;

  v2 = (_QWORD *)((char *)this + 240);
  std::string::basic_string[abi:ne180100]<0>(__p, "is_output");
  v3 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return *((_DWORD *)v4 + 10) != 0;
  }
  else if (v3)
  {
    return *((_DWORD *)v4 + 10) != 0;
  }
  return 0;
}

void sub_191319424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_14:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_14;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1913195C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *Espresso::merge_kernel_attributes(char *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 *i;
  int v6;
  __int128 *v7;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result + 240;
    do
    {
      for (i = *(unsigned __int8 **)(*(_QWORD *)v2 + 256); i; i = *(unsigned __int8 **)i)
      {
        result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v4, i + 16);
        if (!result)
        {
          v6 = *((_DWORD *)i + 10);
          v7 = (__int128 *)(i + 16);
          result = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v4, i + 16, (uint64_t)&std::piecewise_construct, &v7);
          *((_DWORD *)result + 10) = v6;
        }
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_191319900(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *,false>(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  BOOL v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  BOOL v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *v9;
        if (*v8 > *v9)
        {
          *v9 = *v8;
          *v8 = v38;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        v39 = v9 + 1;
        v40 = v9 + 2;
        v41 = v9 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v9, v9 + 1, v9 + 2, v9 + 3);
        v42 = v9[3];
        if (*v8 > v42)
        {
          *v41 = *v8;
          *v8 = v42;
          v43 = *v41;
          v44 = *v40;
          if (*v41 > *v40)
          {
            *v40 = v43;
            *v41 = v44;
            v45 = *v39;
            if (v43 > *v39)
            {
              v9[1] = v43;
              v9[2] = v45;
              v46 = *v9;
              if (v43 > *v9)
              {
                *v9 = v43;
                v9[1] = v46;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v47 = v9 + 1;
          v49 = v9 == a2 || v47 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v49)
            {
              v50 = 8;
              v51 = v9;
              do
              {
                v53 = *v51;
                v52 = v51[1];
                v51 = v47;
                if (v52 > v53)
                {
                  v54 = v50;
                  while (1)
                  {
                    *(unint64_t *)((char *)v9 + v54) = v53;
                    v55 = v54 - 8;
                    if (v54 == 8)
                      break;
                    v53 = *(unint64_t *)((char *)v9 + v54 - 16);
                    v54 -= 8;
                    if (v52 <= v53)
                    {
                      v56 = (unint64_t *)((char *)v9 + v55);
                      goto LABEL_76;
                    }
                  }
                  v56 = v9;
LABEL_76:
                  *v56 = v52;
                }
                v47 = v51 + 1;
                v50 += 8;
              }
              while (v51 + 1 != a2);
            }
          }
          else if (!v49)
          {
            do
            {
              v82 = *v7;
              v81 = v7[1];
              v7 = v47;
              if (v81 > v82)
              {
                do
                {
                  *v47 = v82;
                  v82 = *(v47 - 2);
                  --v47;
                }
                while (v81 > v82);
                *v47 = v81;
              }
              v47 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v57 = (v11 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v9[v60];
                if (2 * v59 + 2 >= (uint64_t)v11)
                {
                  v62 = *v61;
                }
                else
                {
                  v62 = v61[1];
                  v63 = *v61 > v62;
                  if (*v61 < v62)
                    v62 = *v61;
                  if (v63)
                  {
                    ++v61;
                    v60 = 2 * v59 + 2;
                  }
                }
                v64 = &v9[v59];
                v65 = *v64;
                if (v62 <= *v64)
                {
                  do
                  {
                    *v64 = v62;
                    v64 = v61;
                    if (v57 < v60)
                      break;
                    v66 = (2 * v60) | 1;
                    v61 = &v9[v66];
                    v60 = 2 * v60 + 2;
                    if (v60 >= (uint64_t)v11)
                    {
                      v62 = *v61;
                      v60 = v66;
                    }
                    else
                    {
                      v62 = *v61;
                      result = v61 + 1;
                      v67 = v61[1];
                      if (*v61 >= v67)
                        v62 = v61[1];
                      if (*v61 <= v67)
                        v60 = v66;
                      else
                        ++v61;
                    }
                  }
                  while (v62 <= v65);
                  *v64 = v65;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v68 = (unint64_t)v10 >> 3;
            do
            {
              v69 = 0;
              v70 = *v9;
              v71 = v9;
              do
              {
                v72 = &v71[v69 + 1];
                v73 = (2 * v69) | 1;
                v69 = 2 * v69 + 2;
                if (v69 >= v68)
                {
                  v74 = *v72;
                  v69 = v73;
                }
                else
                {
                  v74 = *v72;
                  v75 = v72[1];
                  if (*v72 >= v75)
                    v74 = v72[1];
                  if (*v72 <= v75)
                    v69 = v73;
                  else
                    ++v72;
                }
                *v71 = v74;
                v71 = v72;
              }
              while (v69 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
              if (v72 == --a2)
              {
                *v72 = v70;
              }
              else
              {
                *v72 = *a2;
                *a2 = v70;
                v76 = (char *)v72 - (char *)v9 + 8;
                if (v76 >= 9)
                {
                  v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
                  v78 = &v9[v77];
                  v79 = *v78;
                  v80 = *v72;
                  if (*v78 > *v72)
                  {
                    do
                    {
                      *v72 = v79;
                      v72 = v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = &v9[v77];
                      v79 = *v78;
                    }
                    while (*v78 > v80);
                    *v72 = v80;
                  }
                }
              }
              v63 = v68-- <= 2;
            }
            while (!v63);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        v16 = v7;
        if ((a4 & 1) == 0)
        {
          v16 = v7;
          if (*(v7 - 1) <= v15)
          {
            if (v15 <= *v8)
            {
              v30 = v7 + 1;
              do
              {
                v9 = v30;
                if (v30 >= a2)
                  break;
                ++v30;
              }
              while (v15 <= *v9);
            }
            else
            {
              v9 = v7;
              do
              {
                v29 = v9[1];
                ++v9;
              }
              while (v15 <= v29);
            }
            v31 = a2;
            if (v9 < a2)
            {
              v31 = a2;
              do
                v32 = *--v31;
              while (v15 > v32);
            }
            if (v9 < v31)
            {
              v33 = *v9;
              v34 = *v31;
              do
              {
                *v9 = v34;
                *v31 = v33;
                do
                {
                  v35 = v9[1];
                  ++v9;
                  v33 = v35;
                }
                while (v15 <= v35);
                do
                {
                  v36 = *--v31;
                  v34 = v36;
                }
                while (v15 > v36);
              }
              while (v9 < v31);
            }
            v37 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v37;
            a4 = 0;
            *v37 = v15;
            continue;
          }
        }
        do
        {
          v17 = v16;
          v19 = v16[1];
          ++v16;
          v18 = v19;
        }
        while (v19 > v15);
        v20 = a2;
        if (v17 == v7)
        {
          v20 = a2;
          do
          {
            if (v16 >= v20)
              break;
            v22 = *--v20;
          }
          while (v22 <= v15);
        }
        else
        {
          do
            v21 = *--v20;
          while (v21 <= v15);
        }
        if (v16 < v20)
        {
          v23 = *v20;
          v24 = v16;
          v25 = v20;
          do
          {
            *v24 = v23;
            *v25 = v18;
            do
            {
              v17 = v24;
              v26 = v24[1];
              ++v24;
              v18 = v26;
            }
            while (v26 > v15);
            do
            {
              v27 = *--v25;
              v23 = v27;
            }
            while (v27 <= v15);
          }
          while (v24 < v25);
        }
        if (v17 != v7)
          *v7 = *v17;
        *v17 = v15;
        if (v16 < v20)
        {
LABEL_29:
          result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *,false>(v7, v17, a3, a4 & 1);
          a4 = 0;
          v9 = v17 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v7, v17);
        v9 = v17 + 1;
        result = (unint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v17 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

void pattern_matcher::~pattern_matcher(pattern_matcher *this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 200);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)this + 120);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 80);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this);
}

void ___ZN8Espresso24transformer_optimizationENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t **v11;
  char *v12;
  __int128 v13;
  const void *v14;
  uint64_t **v15;
  char *v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  int v45;
  _OWORD v46[2];
  uint64_t v47;
  void *__p;
  void *v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;

  v4 = *(_QWORD *)(a1 + 32) + 96;
  *(_QWORD *)&v51[0] = *(int *)(a2 + 128);
  v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, *(unint64_t *)&v51[0], v51);
  v6 = *(_QWORD *)(a1 + 32) + 56;
  v7 = *(int *)(a2 + 120);
  *(_QWORD *)&v51[0] = v7;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v51);
  v9 = (_QWORD *)v5[3];
  if (v5[4] - (_QWORD)v9 != 24)
    return;
  v10 = v8;
  if (v8[4] - v8[3] != 24)
    return;
  v11 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 184);
  *(_QWORD *)&v46[0] = v5[3];
  v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v9, (__int128 **)v46);
  v13 = *(_OWORD *)(v12 + 72);
  v51[0] = *(_OWORD *)(v12 + 56);
  v51[1] = v13;
  v14 = (const void *)*((_QWORD *)v12 + 12);
  v52 = *((_QWORD *)v12 + 11);
  v53 = 0;
  v54 = 0;
  v55 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v53, v14, *((_QWORD *)v12 + 13), (uint64_t)(*((_QWORD *)v12 + 13) - (_QWORD)v14) >> 2);
  v15 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 184);
  v56 = v10[3];
  v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (_QWORD *)v56, (__int128 **)&v56);
  v17 = *(_OWORD *)(v16 + 72);
  v46[0] = *(_OWORD *)(v16 + 56);
  v46[1] = v17;
  v18 = (const void *)*((_QWORD *)v16 + 12);
  v47 = *((_QWORD *)v16 + 11);
  __p = 0;
  v49 = 0;
  v50 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18, *((_QWORD *)v16 + 13), (uint64_t)(*((_QWORD *)v16 + 13) - (_QWORD)v18) >> 2);
  if (Espresso::layer_shape::operator==((uint64_t)v51, (uint64_t)v46))
  {
    v19 = *(_QWORD *)(a1 + 32) + 96;
    v56 = *(int *)(a2 + 124);
    v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19, v56, &v56);
    if (v20 != v5)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v20 + 3), (std::string *)v5[3], (std::string *)v5[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4] - v5[3]) >> 3));
    v21 = *(_QWORD *)(a1 + 32) + 56;
    v56 = *(int *)(a2 + 124);
    v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v56, &v56);
    if (v22 != v10)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v22 + 3), (std::string *)v10[3], (std::string *)v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    v23 = (void **)(a2 + 96);
    v25 = *(char **)(a2 + 104);
    v24 = *(_QWORD *)(a2 + 112);
    if ((unint64_t)v25 >= v24)
    {
      v27 = (char *)*v23;
      v28 = (v25 - (_BYTE *)*v23) >> 2;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62)
        goto LABEL_44;
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 1 > v29)
        v29 = v30 >> 1;
      v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL;
      v32 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v31)
        v32 = v29;
      if (v32)
      {
        v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v32);
        v27 = *(char **)(a2 + 96);
        v25 = *(char **)(a2 + 104);
      }
      else
      {
        v33 = 0;
      }
      v34 = (_DWORD *)(v32 + 4 * v28);
      v24 = v32 + 4 * v33;
      *v34 = *(_DWORD *)(a2 + 120);
      v26 = (char *)(v34 + 1);
      while (v25 != v27)
      {
        v35 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *--v34 = v35;
      }
      *(_QWORD *)(a2 + 96) = v34;
      *(_QWORD *)(a2 + 104) = v26;
      *(_QWORD *)(a2 + 112) = v24;
      if (v27)
      {
        operator delete(v27);
        v24 = *(_QWORD *)(a2 + 112);
      }
    }
    else
    {
      *(_DWORD *)v25 = *(_DWORD *)(a2 + 120);
      v26 = v25 + 4;
    }
    *(_QWORD *)(a2 + 104) = v26;
    if ((unint64_t)v26 < v24)
    {
      *(_DWORD *)v26 = *(_DWORD *)(a2 + 128);
      v36 = v26 + 4;
LABEL_38:
      *(_QWORD *)(a2 + 104) = v36;
      goto LABEL_39;
    }
    v37 = (char *)*v23;
    v38 = (v26 - (_BYTE *)*v23) >> 2;
    v39 = v38 + 1;
    if (!((unint64_t)(v38 + 1) >> 62))
    {
      v40 = v24 - (_QWORD)v37;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      v31 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL;
      v41 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v31)
        v41 = v39;
      if (v41)
      {
        v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v41);
        v37 = *(char **)(a2 + 96);
        v26 = *(char **)(a2 + 104);
      }
      else
      {
        v42 = 0;
      }
      v43 = (_DWORD *)(v41 + 4 * v38);
      v44 = v41 + 4 * v42;
      *v43 = *(_DWORD *)(a2 + 128);
      v36 = v43 + 1;
      while (v26 != v37)
      {
        v45 = *((_DWORD *)v26 - 1);
        v26 -= 4;
        *--v43 = v45;
      }
      *(_QWORD *)(a2 + 96) = v43;
      *(_QWORD *)(a2 + 104) = v36;
      *(_QWORD *)(a2 + 112) = v44;
      if (v37)
        operator delete(v37);
      goto LABEL_38;
    }
LABEL_44:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_39:
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
}

void sub_19131A310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::fuse_vertical_state<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>::~fuse_vertical_state(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 88);
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1);
}

void ___ZN8Espresso24transformer_optimizationENSt3__110shared_ptrINS_3netEEE_block_invoke_45(uint64_t a1, uint64_t a2)
{
  void *v3;
  int32x4_t *v4;
  int32x4_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30[3];

  if (!Espresso::is_kernel_generating_output(*(Espresso **)a2, (const Espresso::base_kernel *)a2))
  {
    v4 = (int32x4_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v3 + 320))(v3);
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(*v4, v5))) & 1) == 0 && v4[1].i32[0] != -1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 32);
      v7 = *(char **)(*(_QWORD *)(v6 + 16 * *(int *)(a2 + 116)) + 64);
      v8 = *(_QWORD *)(*(_QWORD *)(v6 + 16 * *(int *)(a2 + 112)) + 64);
      v9 = operator new(8uLL);
      *v9 = v8;
      v30[1] = (uint64_t)(v9 + 1);
      v30[2] = (uint64_t)(v9 + 1);
      v30[0] = (uint64_t)v9;
      Espresso::merge_kernel_attributes(v7, v30);
      operator delete(v9);
      v10 = *(_QWORD *)(a2 + 120) + 56;
      v11 = *(int *)(a2 + 112);
      v30[0] = v11;
      v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, v30);
      v13 = *(_QWORD *)(a2 + 120) + 56;
      v14 = *(int *)(a2 + 116);
      v29 = v14;
      v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, &v29);
      if (v15 != v12)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v15 + 3), (std::string *)v12[3], (std::string *)v12[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 3));
      v16 = *(char **)(a2 + 72);
      v17 = *(_QWORD *)(a2 + 80);
      if ((unint64_t)v16 >= v17)
      {
        v19 = *(char **)(a2 + 64);
        v20 = (v16 - v19) >> 2;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v21 = v17 - (_QWORD)v19;
        v22 = (uint64_t)(v17 - (_QWORD)v19) >> 1;
        if (v22 <= v20 + 1)
          v22 = v20 + 1;
        v23 = v21 >= 0x7FFFFFFFFFFFFFFCLL;
        v24 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v23)
          v24 = v22;
        if (v24)
        {
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v24);
          v19 = *(char **)(a2 + 64);
          v16 = *(char **)(a2 + 72);
        }
        else
        {
          v25 = 0;
        }
        v26 = (_DWORD *)(v24 + 4 * v20);
        v27 = v24 + 4 * v25;
        *v26 = *(_DWORD *)(a2 + 112);
        v18 = v26 + 1;
        while (v16 != v19)
        {
          v28 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--v26 = v28;
        }
        *(_QWORD *)(a2 + 64) = v26;
        *(_QWORD *)(a2 + 72) = v18;
        *(_QWORD *)(a2 + 80) = v27;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v16 = *(_DWORD *)(a2 + 112);
        v18 = v16 + 4;
      }
      *(_QWORD *)(a2 + 72) = v18;
    }
  }
}

void sub_19131A5A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::fuse_vertical_3_state<Espresso::generic_reshape_kernel,Espresso::generic_activation_kernel,Espresso::generic_reshape_kernel>::~fuse_vertical_3_state(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1);
}

uint64_t __copy_helper_block_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 <= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 > *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 > *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (v20 > v21)
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (*v19 > *v18)
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if (v22 > *v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (v22 > *a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 > *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 <= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void std::deque<pattern_matcher::match_at(unsigned long)::state_t,std::allocator<pattern_matcher::match_at(unsigned long)::state_t>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_72:
      *(_QWORD *)v6 = v8;
      goto LABEL_73;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v34 = 1;
      else
        v34 = (v6 - v10) >> 2;
      if (!(v34 >> 61))
      {
        v35 = (char *)operator new(8 * v34);
        v36 = &v35[8 * (v34 >> 2)];
        v37 = &v35[8 * v34];
        v39 = v6 - v7;
        v38 = v6 == v7;
        v6 = v36;
        if (!v38)
        {
          v6 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = 8 * (v39 >> 3);
          v41 = &v35[8 * (v34 >> 2)];
          do
          {
            v42 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v42;
            v41 += 8;
            v40 -= 8;
          }
          while (v40);
        }
        goto LABEL_30;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_72;
  }
  v19 = *(char **)(a1 + 16);
  v18 = *(char **)(a1 + 24);
  v21 = *(char **)a1;
  v20 = *(char **)(a1 + 8);
  v22 = v19 - v20;
  v23 = (v19 - v20) >> 3;
  v24 = (uint64_t)&v18[-*(_QWORD *)a1];
  if (v23 < (unint64_t)(v24 >> 3))
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v18 != v19)
    {
      *(_QWORD *)v19 = v25;
LABEL_73:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v20 == v21)
    {
      if (v19 == v20)
        v60 = 1;
      else
        v60 = (v18 - v20) >> 2;
      if (v60 >> 61)
        goto LABEL_85;
      v61 = (char *)operator new(8 * v60);
      v43 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
      v62 = v43;
      if (v19 != v20)
      {
        v63 = 8 * v23;
        v64 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
        v65 = v20;
        v62 = &v43[8 * v23];
        do
        {
          v66 = *(_QWORD *)v65;
          v65 += 8;
          *(_QWORD *)v64 = v66;
          v64 += 8;
          v63 -= 8;
        }
        while (v63);
      }
      *(_QWORD *)a1 = v61;
      *(_QWORD *)(a1 + 8) = v43;
      *(_QWORD *)(a1 + 16) = v62;
      *(_QWORD *)(a1 + 24) = &v61[8 * v60];
      if (v20)
      {
        operator delete(v20);
        v43 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v43 = v20;
    }
    *((_QWORD *)v43 - 1) = v26;
    v7 = *(char **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_72;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v67 = 1;
      else
        v67 = (v6 - v10) >> 2;
      if (!(v67 >> 61))
      {
        v35 = (char *)operator new(8 * v67);
        v36 = &v35[8 * (v67 >> 2)];
        v37 = &v35[8 * v67];
        v68 = v6 - v7;
        v38 = v6 == v7;
        v6 = v36;
        if (!v38)
        {
          v6 = &v36[v68 & 0xFFFFFFFFFFFFFFF8];
          v69 = 8 * (v68 >> 3);
          v70 = &v35[8 * (v67 >> 2)];
          do
          {
            v71 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v70 = v71;
            v70 += 8;
            v69 -= 8;
          }
          while (v69);
        }
LABEL_30:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v37;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_72;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v18 == v21)
    v28 = 1;
  else
    v28 = v27;
  if (v28 >> 61)
    goto LABEL_85;
  v29 = (char *)operator new(8 * v28);
  v30 = operator new(0x1000uLL);
  v31 = &v29[8 * v23];
  v32 = &v29[8 * v28];
  if (v23 == v28)
  {
    if (v22 < 1)
    {
      if (v19 == v20)
        v44 = 1;
      else
        v44 = v22 >> 2;
      if (v44 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v31 = (char *)operator new(8 * v44);
      v32 = &v31[8 * v44];
      operator delete(v29);
      v20 = *(char **)(a1 + 8);
      v19 = *(char **)(a1 + 16);
      v29 = v31;
    }
    else
    {
      v33 = v23 + 2;
      if (v23 >= -1)
        v33 = v23 + 1;
      v31 -= 8 * (v33 >> 1);
    }
  }
  *(_QWORD *)v31 = v30;
  v45 = v31 + 8;
  if (v19 == v20)
  {
    v58 = v31;
    v47 = v31 + 8;
  }
  else
  {
    do
    {
      if (v31 == v29)
      {
        if (v45 >= v32)
        {
          if (v32 == v31)
            v50 = 1;
          else
            v50 = (v32 - v31) >> 2;
          if (v50 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v51 = (char *)operator new(8 * v50);
          v29 = v51;
          v46 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
          v47 = v46;
          v52 = v45 - v31;
          if (v45 != v31)
          {
            v47 = &v46[v52 & 0xFFFFFFFFFFFFFFF8];
            v53 = 8 * (v52 >> 3);
            v54 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
            v55 = v31;
            do
            {
              v56 = *(_QWORD *)v55;
              v55 += 8;
              *(_QWORD *)v54 = v56;
              v54 += 8;
              v53 -= 8;
            }
            while (v53);
          }
          v32 = &v51[8 * v50];
          operator delete(v31);
        }
        else
        {
          v48 = (v32 - v45) >> 3;
          if (v48 >= -1)
            v49 = v48 + 1;
          else
            v49 = v48 + 2;
          v47 = &v45[8 * (v49 >> 1)];
          v46 = &v31[8 * (v49 >> 1)];
          if (v45 == v31)
          {
            v29 = v45;
          }
          else
          {
            memmove(&v31[8 * (v49 >> 1)], v31, v45 - v31);
            v29 = v31;
          }
        }
      }
      else
      {
        v46 = v31;
        v47 = v45;
      }
      v57 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *((_QWORD *)v46 - 1) = v57;
      v58 = v46 - 8;
      v45 = v47;
      v31 = v58;
    }
    while (v19 != *(char **)(a1 + 8));
  }
  v59 = *(char **)a1;
  *(_QWORD *)a1 = v29;
  *(_QWORD *)(a1 + 8) = v58;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v32;
  if (v59)
    operator delete(v59);
}

void sub_19131ADCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void pattern_matcher::producers_of_layer(uint64_t **a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;

  v35 = a4;
  v7 = *(_QWORD *)a2 + 56;
  v36 = &v35;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v7, &v35, (uint64_t)&std::piecewise_construct, (uint64_t **)&v36);
  v33 = 0;
  v34 = 0;
  v32 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, v8[3], v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = v32;
  for (i = v33; v9 != i; v9 += 24)
  {
    v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a3, v9);
    v12 = v11;
    if (v11)
    {
      v14 = a1[1];
      v13 = (unint64_t)a1[2];
      if ((unint64_t)v14 >= v13)
      {
        v20 = *a1;
        v21 = v14 - *a1;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v23 = v13 - (_QWORD)v20;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24);
          v20 = *a1;
          v14 = a1[1];
        }
        else
        {
          v25 = 0;
        }
        v29 = (uint64_t *)(v24 + 8 * v21);
        *v29 = v12[5];
        v19 = v29 + 1;
        while (v14 != v20)
        {
          v30 = *--v14;
          *--v29 = v30;
        }
LABEL_32:
        *a1 = v29;
        a1[1] = v19;
        a1[2] = (uint64_t *)(v24 + 8 * v25);
        if (v20)
          operator delete(v20);
        goto LABEL_34;
      }
      *v14 = v11[5];
      v15 = v14 + 1;
    }
    else
    {
      v16 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 40) - *(_QWORD *)(*(_QWORD *)a2 + 32)) >> 4;
      v18 = a1[1];
      v17 = (unint64_t)a1[2];
      if ((unint64_t)v18 >= v17)
      {
        v20 = *a1;
        v26 = v18 - *a1;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v28 = v17 - (_QWORD)v20;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v27;
        if (v24)
        {
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24);
          v20 = *a1;
          v18 = a1[1];
        }
        else
        {
          v25 = 0;
        }
        v29 = (uint64_t *)(v24 + 8 * v26);
        *v29 = v16;
        v19 = v29 + 1;
        while (v18 != v20)
        {
          v31 = *--v18;
          *--v29 = v31;
        }
        goto LABEL_32;
      }
      *v18 = v16;
      v15 = v18 + 1;
    }
    v19 = v15;
LABEL_34:
    a1[1] = v19;
  }
  v36 = (unint64_t *)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_19131B0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_19131B320(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pattern_matcher::match_blob_names(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  const std::string *v16;
  uint64_t *v17;
  __int128 *v19;

  v3 = *a2;
  if (a2[1] == *a2)
    return 1;
  v7 = 0;
  while (1)
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1, v3 + 24 * v7);
    if (!v8)
    {
      v16 = (const std::string *)(*a3 + 24 * v7);
      v19 = (__int128 *)(*a2 + 24 * v7);
      v17 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (uint64_t)v19, (uint64_t)&std::piecewise_construct, &v19);
      std::string::operator=((std::string *)(v17 + 5), v16);
      goto LABEL_20;
    }
    v9 = *a3 + 24 * v7;
    v10 = *((unsigned __int8 *)v8 + 63);
    if ((v10 & 0x80u) == 0)
      v11 = *((unsigned __int8 *)v8 + 63);
    else
      v11 = v8[6];
    v12 = *(unsigned __int8 *)(v9 + 23);
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(v9 + 8);
    if (v11 != v12)
      return 0;
    v14 = (const void **)(v8 + 5);
    v15 = v13 >= 0 ? (unsigned __int8 *)(*a3 + 24 * v7) : *(unsigned __int8 **)v9;
    if ((v10 & 0x80) == 0)
      break;
    if (memcmp(*v14, v15, v8[6]))
      return 0;
LABEL_20:
    ++v7;
    v3 = *a2;
    if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
      return 1;
  }
  if (!*((_BYTE *)v8 + 63))
    goto LABEL_20;
  while (*(unsigned __int8 *)v14 == *v15)
  {
    v14 = (const void **)((char *)v14 + 1);
    ++v15;
    if (!--v10)
      goto LABEL_20;
  }
  return 0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void ___ZN8Espresso28fuse_transpose_inner_productENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  int32x4_t *v3;
  _DWORD *v4;
  const Espresso::base_kernel *v5;
  unsigned int (***v6)(_QWORD);
  unsigned int (***v7)(_QWORD);
  BOOL v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33[3];

  v3 = (int32x4_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2);
  v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 320))(a2[2]);
  (*(void (**)(_QWORD))(*(_QWORD *)a2[4] + 384))(a2[4]);
  if (Espresso::is_kernel_generating_output((Espresso *)*a2, v5))
    return;
  v6 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(a2[4] + 8) + 8);
  if ((**v6)(v6) == 100)
  {
    if (*v4 != 1)
      return;
  }
  else
  {
    v7 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(a2[4] + 8) + 8);
    if ((**v7)(v7))
      v8 = 0;
    else
      v8 = *v4 == 1;
    if (!v8)
      return;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v3, (int32x4_t)xmmword_191A93350)))) & 1) == 0
    && v3[1].i32[0] == 1)
  {
    v9 = *(_QWORD *)(a2[17] + 32);
    v10 = *(char **)(*(_QWORD *)(v9 + 16 * *((int *)a2 + 31)) + 64);
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 16 * *((int *)a2 + 30)) + 64);
    v12 = operator new(8uLL);
    *v12 = v11;
    v33[1] = (uint64_t)(v12 + 1);
    v33[2] = (uint64_t)(v12 + 1);
    v33[0] = (uint64_t)v12;
    Espresso::merge_kernel_attributes(v10, v33);
    operator delete(v12);
    v13 = a2[17] + 56;
    v14 = *((int *)a2 + 30);
    v33[0] = v14;
    v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, v33);
    v16 = a2[17] + 56;
    v17 = *((int *)a2 + 31);
    v32 = v17;
    v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, v17, &v32);
    if (v18 != v15)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v18 + 3), (std::string *)v15[3], (std::string *)v15[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[4] - v15[3]) >> 3));
    v19 = (char *)a2[13];
    v20 = a2[14];
    if ((unint64_t)v19 >= v20)
    {
      v22 = (char *)a2[12];
      v23 = (v19 - v22) >> 2;
      if ((unint64_t)(v23 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v24 = v20 - (_QWORD)v22;
      v25 = (uint64_t)(v20 - (_QWORD)v22) >> 1;
      if (v25 <= v23 + 1)
        v25 = v23 + 1;
      v26 = v24 >= 0x7FFFFFFFFFFFFFFCLL;
      v27 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v26)
        v27 = v25;
      if (v27)
      {
        v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
        v22 = (char *)a2[12];
        v19 = (char *)a2[13];
      }
      else
      {
        v28 = 0;
      }
      v29 = (_DWORD *)(v27 + 4 * v23);
      v30 = v27 + 4 * v28;
      *v29 = *((_DWORD *)a2 + 30);
      v21 = v29 + 1;
      while (v19 != v22)
      {
        v31 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--v29 = v31;
      }
      a2[12] = v29;
      a2[13] = v21;
      a2[14] = v30;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_DWORD *)v19 = *((_DWORD *)a2 + 30);
      v21 = v19 + 4;
    }
    a2[13] = v21;
  }
}

void sub_19131B8A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso20transform_dequantizeENSt3__110shared_ptrINS_3netEEERKNS0_13unordered_setINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_4hashISA_EENS0_8equal_toISA_EENS8_ISA_EEEE_block_invoke(uint64_t a1, int *a2)
{
  unsigned int (***v4)(_QWORD);
  unsigned int (***v5)(_QWORD);
  std::__shared_weak_count *height;
  void *data;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  vImagePixelCount v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  vImagePixelCount v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  vImage_Buffer dest;
  vImage_Buffer src;

  v4 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
  if ((**v4)(v4))
  {
    v5 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
    if ((**v5)(v5) != 100)
      return;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 16 * a2[14]) + 16))
  {
    return;
  }
  (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 472))(&src);
  data = src.data;
  height = (std::__shared_weak_count *)src.height;
  if (!src.height)
    goto LABEL_8;
  v8 = (unint64_t *)(src.height + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
    std::__shared_weak_count::__release_weak(height);
    if (data)
    {
LABEL_9:
      (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 416))(&src);
      v11 = src.data;
      v10 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v12 = (unint64_t *)(src.height + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (!v11)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 424))(&v74);
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 472))(&v72);
        v36 = *(void **)(v74 + 16);
        v37 = *(int *)(v74 + 12) * (uint64_t)*(int *)(v74 + 8);
        src.data = *(void **)(v72 + 16);
        src.height = 1;
        src.width = v37;
        src.rowBytes = 2 * v37;
        dest.data = v36;
        dest.height = 1;
        dest.width = v37;
        dest.rowBytes = 4 * v37;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        v38 = v73;
        if (v73)
        {
          p_shared_owners = (unint64_t *)&v73->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = *(_QWORD *)a2;
        v70 = v74;
        v71 = v75;
        if (v75)
        {
          v42 = (unint64_t *)&v75->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v41 + 400))(v41, &v70);
        v44 = v71;
        if (v71)
        {
          v45 = (unint64_t *)&v71->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v75;
        if (v75)
        {
          v48 = (unint64_t *)&v75->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      v14 = *(_QWORD *)a2;
      v68 = 0;
      v69 = 0;
      src.data = 0;
      src.height = 0;
      (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *))(*(_QWORD *)v14 + 464))(v14, &v68, &src);
      v15 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v16 = (unint64_t *)(src.height + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v69;
      if (v69)
      {
        v19 = (unint64_t *)&v69->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
  else
  {
LABEL_8:
    if (data)
      goto LABEL_9;
  }
  v21 = *(_QWORD *)a2;
  v22 = *(_QWORD **)(*(_QWORD *)a2 + 440);
  if (v22 && *v22 && (v22[4] || v22[6] || v22[8] || v22[10]))
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(*(_QWORD *)v21 + 416))(&src);
    v24 = src.data;
    v23 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v25 = (unint64_t *)(src.height + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (!v24)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 424))(&src);
      Espresso::quantized_weights_helper::dequantize_to_float32_2d(*(Espresso::quantized_weights_helper **)(*(_QWORD *)a2 + 440), &dest);
      v50 = *(_OWORD *)&dest.data;
      dest.data = 0;
      dest.height = 0;
      v51 = (std::__shared_weak_count *)src.height;
      *(_OWORD *)&src.data = v50;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)dest.height;
      if (dest.height)
      {
        v55 = (unint64_t *)(dest.height + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = *(_QWORD *)a2;
      v66 = src.data;
      v67 = src.height;
      if (src.height)
      {
        v58 = (unint64_t *)(src.height + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v57 + 400))(v57, &v66);
      v60 = (std::__shared_weak_count *)v67;
      if (v67)
      {
        v61 = (unint64_t *)(v67 + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v64 = (unint64_t *)(src.height + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    src.data = 0;
    src.height = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)a2 + 440, (__int128 *)&src);
    v27 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v28 = (unint64_t *)(src.height + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v21 = *(_QWORD *)a2;
  }
  (*(void (**)(vImage_Buffer *__return_ptr))(*(_QWORD *)v21 + 416))(&src);
  v31 = src.data;
  v30 = (std::__shared_weak_count *)src.height;
  if (src.height)
  {
    v32 = (unint64_t *)(src.height + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v31)
  {
    v34 = *(_QWORD **)a2;
    v35 = (_QWORD *)v34[20];
    v34 += 20;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v35);
    *(v34 - 1) = v34;
    *v34 = 0;
    v34[1] = 0;
  }
}

void sub_19131BE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9 - 64);
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_19131C298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::single_match_state<Espresso::generic_inner_product_kernel>::~single_match_state(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1);
}

void ___Z15dequantize_convIN8Espresso28generic_deconvolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERNS2_6vectorIiNS2_9allocatorIiEEEERKNS2_13unordered_setINS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS2_4hashISG_EENS2_8equal_toISG_EENS7_ISG_EEEE_block_invoke(uint64_t a1, int *a2)
{
  int **v2;
  int *v3;
  int *v4;
  char v7;
  uint64_t (***v8)(_QWORD);
  int v9;
  int v10;
  std::__shared_weak_count *height;
  void *data;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  vImagePixelCount v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116;
  vImagePixelCount v117;
  void *v118;
  vImagePixelCount v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  vImage_Buffer dest;
  vImage_Buffer src;

  v2 = *(int ***)(a1 + 32);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return;
  v7 = 0;
  do
  {
    v8 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
    v9 = (**v8)(v8);
    v10 = *v3++;
    v7 |= v9 == v10;
  }
  while (v3 != v4);
  if ((v7 & 1) == 0
    || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[14]) + 16))
  {
    return;
  }
  (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 552))(&src);
  data = src.data;
  height = (std::__shared_weak_count *)src.height;
  if (src.height)
  {
    v13 = (unint64_t *)(src.height + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
      std::__shared_weak_count::__release_weak(height);
    }
  }
  if (data)
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 456))(&src);
    v16 = src.data;
    v15 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v17 = (unint64_t *)(src.height + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!v16)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 472))(&v126);
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 552))(&v124);
      v64 = 0;
      v65 = *(void **)(v126 + 24);
      v66 = *(int *)(v126 + 8);
      do
      {
        v66 *= *(int *)(v126 + 12 + v64);
        v64 += 4;
      }
      while (v64 != 12);
      src.data = *(void **)(v124 + 24);
      src.height = 1;
      src.width = v66;
      src.rowBytes = 2 * v66;
      dest.data = v65;
      dest.height = 1;
      dest.width = v66;
      dest.rowBytes = 4 * v66;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      v67 = v125;
      if (v125)
      {
        p_shared_owners = (unint64_t *)&v125->__shared_owners_;
        do
          v69 = __ldaxr(p_shared_owners);
        while (__stlxr(v69 - 1, p_shared_owners));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = *(_QWORD *)a2;
      v122 = v126;
      v123 = v127;
      if (v127)
      {
        v71 = (unint64_t *)&v127->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v70 + 400))(v70, &v122);
      v73 = v123;
      if (v123)
      {
        v74 = (unint64_t *)&v123->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v127;
      if (v127)
      {
        v77 = (unint64_t *)&v127->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
    v19 = *(_QWORD *)a2;
    v120 = 0;
    v121 = 0;
    src.data = 0;
    src.height = 0;
    (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *))(*(_QWORD *)v19 + 544))(v19, &v120, &src);
    v20 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v21 = (unint64_t *)(src.height + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v121;
    if (v121)
    {
      v24 = (unint64_t *)&v121->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = *(_QWORD **)a2;
  v27 = *(_QWORD **)(*(_QWORD *)a2 + 472);
  if (v27 && *v27 && (v27[4] || v27[6] || v27[8] || v27[10]))
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(*v26 + 456))(&src);
    v29 = src.data;
    v28 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v30 = (unint64_t *)(src.height + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (!v29)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 472))(&src);
      Espresso::quantized_weights_helper::dequantize_to_float32_4d(*(Espresso::quantized_weights_helper **)(*(_QWORD *)a2 + 472), &dest);
      v88 = *(_OWORD *)&dest.data;
      dest.data = 0;
      dest.height = 0;
      v89 = (std::__shared_weak_count *)src.height;
      *(_OWORD *)&src.data = v88;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = (std::__shared_weak_count *)dest.height;
      if (dest.height)
      {
        v93 = (unint64_t *)(dest.height + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = *(_QWORD *)a2;
      v118 = src.data;
      v119 = src.height;
      if (src.height)
      {
        v96 = (unint64_t *)(src.height + 8);
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v95 + 400))(v95, &v118);
      v98 = (std::__shared_weak_count *)v119;
      if (v119)
      {
        v99 = (unint64_t *)(v119 + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v102 = (unint64_t *)(src.height + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
    }
    src.data = 0;
    src.height = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)a2 + 472, (__int128 *)&src);
    v32 = (std::__shared_weak_count *)src.height;
    if (!src.height)
      goto LABEL_81;
    v33 = (unint64_t *)(src.height + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
  }
  else
  {
    if (!v26[63])
      goto LABEL_81;
    (*(void (**)(vImage_Buffer *__return_ptr))(*v26 + 456))(&src);
    v36 = src.data;
    v35 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v37 = (unint64_t *)(src.height + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (!v36)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 608))(&src);
      v79 = *(_QWORD *)a2;
      v116 = src.data;
      v117 = src.height;
      if (src.height)
      {
        v80 = (unint64_t *)(src.height + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 400))(v79, &v116);
      v82 = (std::__shared_weak_count *)v117;
      if (v117)
      {
        v83 = (unint64_t *)(v117 + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v86 = (unint64_t *)(src.height + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
    }
    v39 = *(_QWORD *)a2;
    v114 = 0;
    v115 = 0;
    v112 = 0;
    v113 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v39 + 576))(v39, &v114, &v112);
    v40 = v113;
    if (v113)
    {
      v41 = (unint64_t *)&v113->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v115;
    if (v115)
    {
      v44 = (unint64_t *)&v115->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = *(_QWORD *)a2;
    v110 = 0;
    v111 = 0;
    v108 = 0;
    v109 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v46 + 560))(v46, &v110, &v108);
    v47 = v109;
    if (v109)
    {
      v48 = (unint64_t *)&v109->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v111;
    if (v111)
    {
      v51 = (unint64_t *)&v111->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = *(_QWORD *)a2;
    v106 = 0;
    v107 = 0;
    v104 = 0;
    v105 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 592))(v53, &v106, &v104);
    v54 = v105;
    if (v105)
    {
      v55 = (unint64_t *)&v105->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v32 = v107;
    if (!v107)
      goto LABEL_81;
    v57 = (unint64_t *)&v107->__shared_owners_;
    do
      v34 = __ldaxr(v57);
    while (__stlxr(v34 - 1, v57));
  }
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_81:
  (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 456))(&src);
  v59 = src.data;
  v58 = (std::__shared_weak_count *)src.height;
  if (src.height)
  {
    v60 = (unint64_t *)(src.height + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v59)
  {
    v62 = *(_QWORD **)a2;
    v63 = (_QWORD *)v62[20];
    v62 += 20;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v63);
    *(v62 - 1) = v62;
    *v62 = 0;
    v62[1] = 0;
  }
}

void sub_19131CBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 80);
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::generic_deconvolution_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_19131D064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___Z15dequantize_convIN8Espresso26generic_convolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERNS2_6vectorIiNS2_9allocatorIiEEEERKNS2_13unordered_setINS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS2_4hashISG_EENS2_8equal_toISG_EENS7_ISG_EEEE_block_invoke(uint64_t a1, int *a2)
{
  int **v2;
  int *v3;
  int *v4;
  char v7;
  uint64_t (***v8)(_QWORD);
  int v9;
  int v10;
  std::__shared_weak_count *height;
  void *data;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  vImagePixelCount v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116;
  vImagePixelCount v117;
  void *v118;
  vImagePixelCount v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  vImage_Buffer dest;
  vImage_Buffer src;

  v2 = *(int ***)(a1 + 32);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return;
  v7 = 0;
  do
  {
    v8 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
    v9 = (**v8)(v8);
    v10 = *v3++;
    v7 |= v9 == v10;
  }
  while (v3 != v4);
  if ((v7 & 1) == 0
    || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[14]) + 16))
  {
    return;
  }
  (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 552))(&src);
  data = src.data;
  height = (std::__shared_weak_count *)src.height;
  if (src.height)
  {
    v13 = (unint64_t *)(src.height + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
      std::__shared_weak_count::__release_weak(height);
    }
  }
  if (data)
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 456))(&src);
    v16 = src.data;
    v15 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v17 = (unint64_t *)(src.height + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!v16)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 472))(&v126);
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 552))(&v124);
      v64 = 0;
      v65 = *(void **)(v126 + 24);
      v66 = *(int *)(v126 + 8);
      do
      {
        v66 *= *(int *)(v126 + 12 + v64);
        v64 += 4;
      }
      while (v64 != 12);
      src.data = *(void **)(v124 + 24);
      src.height = 1;
      src.width = v66;
      src.rowBytes = 2 * v66;
      dest.data = v65;
      dest.height = 1;
      dest.width = v66;
      dest.rowBytes = 4 * v66;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      v67 = v125;
      if (v125)
      {
        p_shared_owners = (unint64_t *)&v125->__shared_owners_;
        do
          v69 = __ldaxr(p_shared_owners);
        while (__stlxr(v69 - 1, p_shared_owners));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = *(_QWORD *)a2;
      v122 = v126;
      v123 = v127;
      if (v127)
      {
        v71 = (unint64_t *)&v127->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v70 + 400))(v70, &v122);
      v73 = v123;
      if (v123)
      {
        v74 = (unint64_t *)&v123->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v127;
      if (v127)
      {
        v77 = (unint64_t *)&v127->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
    v19 = *(_QWORD *)a2;
    v120 = 0;
    v121 = 0;
    src.data = 0;
    src.height = 0;
    (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *))(*(_QWORD *)v19 + 544))(v19, &v120, &src);
    v20 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v21 = (unint64_t *)(src.height + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v121;
    if (v121)
    {
      v24 = (unint64_t *)&v121->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = *(_QWORD **)a2;
  v27 = *(_QWORD **)(*(_QWORD *)a2 + 472);
  if (v27 && *v27 && (v27[4] || v27[6] || v27[8] || v27[10]))
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(*v26 + 456))(&src);
    v29 = src.data;
    v28 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v30 = (unint64_t *)(src.height + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (!v29)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 472))(&src);
      Espresso::quantized_weights_helper::dequantize_to_float32_4d(*(Espresso::quantized_weights_helper **)(*(_QWORD *)a2 + 472), &dest);
      v88 = *(_OWORD *)&dest.data;
      dest.data = 0;
      dest.height = 0;
      v89 = (std::__shared_weak_count *)src.height;
      *(_OWORD *)&src.data = v88;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = (std::__shared_weak_count *)dest.height;
      if (dest.height)
      {
        v93 = (unint64_t *)(dest.height + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = *(_QWORD *)a2;
      v118 = src.data;
      v119 = src.height;
      if (src.height)
      {
        v96 = (unint64_t *)(src.height + 8);
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v95 + 400))(v95, &v118);
      v98 = (std::__shared_weak_count *)v119;
      if (v119)
      {
        v99 = (unint64_t *)(v119 + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v102 = (unint64_t *)(src.height + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
    }
    src.data = 0;
    src.height = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)a2 + 472, (__int128 *)&src);
    v32 = (std::__shared_weak_count *)src.height;
    if (!src.height)
      goto LABEL_81;
    v33 = (unint64_t *)(src.height + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
  }
  else
  {
    if (!v26[63])
      goto LABEL_81;
    (*(void (**)(vImage_Buffer *__return_ptr))(*v26 + 456))(&src);
    v36 = src.data;
    v35 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v37 = (unint64_t *)(src.height + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (!v36)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 608))(&src);
      v79 = *(_QWORD *)a2;
      v116 = src.data;
      v117 = src.height;
      if (src.height)
      {
        v80 = (unint64_t *)(src.height + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 400))(v79, &v116);
      v82 = (std::__shared_weak_count *)v117;
      if (v117)
      {
        v83 = (unint64_t *)(v117 + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v86 = (unint64_t *)(src.height + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
    }
    v39 = *(_QWORD *)a2;
    v114 = 0;
    v115 = 0;
    v112 = 0;
    v113 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v39 + 576))(v39, &v114, &v112);
    v40 = v113;
    if (v113)
    {
      v41 = (unint64_t *)&v113->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v115;
    if (v115)
    {
      v44 = (unint64_t *)&v115->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = *(_QWORD *)a2;
    v110 = 0;
    v111 = 0;
    v108 = 0;
    v109 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v46 + 560))(v46, &v110, &v108);
    v47 = v109;
    if (v109)
    {
      v48 = (unint64_t *)&v109->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v111;
    if (v111)
    {
      v51 = (unint64_t *)&v111->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = *(_QWORD *)a2;
    v106 = 0;
    v107 = 0;
    v104 = 0;
    v105 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 592))(v53, &v106, &v104);
    v54 = v105;
    if (v105)
    {
      v55 = (unint64_t *)&v105->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v32 = v107;
    if (!v107)
      goto LABEL_81;
    v57 = (unint64_t *)&v107->__shared_owners_;
    do
      v34 = __ldaxr(v57);
    while (__stlxr(v34 - 1, v57));
  }
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_81:
  (*(void (**)(vImage_Buffer *__return_ptr))(**(_QWORD **)a2 + 456))(&src);
  v59 = src.data;
  v58 = (std::__shared_weak_count *)src.height;
  if (src.height)
  {
    v60 = (unint64_t *)(src.height + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v59)
  {
    v62 = *(_QWORD **)a2;
    v63 = (_QWORD *)v62[20];
    v62 += 20;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v63);
    *(v62 - 1) = v62;
    *v62 = 0;
    v62[1] = 0;
  }
}

void sub_19131D974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 80);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso20fuse_transpose_chainENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29[3];
  __int128 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2);
  v4 = (int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 320))(a2[2]);
  v30 = *(_OWORD *)v3;
  v31 = *(_DWORD *)(v3 + 16);
  *(_DWORD *)v3 = *((_DWORD *)&v30 + *v4);
  *(_DWORD *)(v3 + 4) = *((_DWORD *)&v30 + v4[1]);
  *(_DWORD *)(v3 + 8) = *((_DWORD *)&v30 + v4[2]);
  *(_DWORD *)(v3 + 12) = *((_DWORD *)&v30 + v4[3]);
  *(_DWORD *)(v3 + 16) = *((_DWORD *)&v30 + v4[4]);
  v5 = *(_QWORD *)(a2[15] + 32);
  v6 = *(char **)(*(_QWORD *)(v5 + 16 * *((int *)a2 + 28)) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 16 * *((int *)a2 + 29)) + 64);
  v8 = operator new(8uLL);
  *v8 = v7;
  v29[1] = (uint64_t)(v8 + 1);
  v29[2] = (uint64_t)(v8 + 1);
  v29[0] = (uint64_t)v8;
  Espresso::merge_kernel_attributes(v6, v29);
  operator delete(v8);
  v9 = a2[15] + 96;
  v10 = *((int *)a2 + 29);
  v29[0] = v10;
  v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v29);
  v12 = a2[15] + 96;
  v13 = *((int *)a2 + 28);
  v28 = v13;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v13, &v28);
  if (v14 != v11)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v14 + 3), (std::string *)v11[3], (std::string *)v11[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[4] - v11[3]) >> 3));
  v15 = (char *)a2[9];
  v16 = a2[10];
  if ((unint64_t)v15 >= v16)
  {
    v18 = (char *)a2[8];
    v19 = (v15 - v18) >> 2;
    if ((unint64_t)(v19 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v20 = v16 - (_QWORD)v18;
    v21 = (uint64_t)(v16 - (_QWORD)v18) >> 1;
    if (v21 <= v19 + 1)
      v21 = v19 + 1;
    v22 = v20 >= 0x7FFFFFFFFFFFFFFCLL;
    v23 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v22)
      v23 = v21;
    if (v23)
    {
      v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
      v18 = (char *)a2[8];
      v15 = (char *)a2[9];
    }
    else
    {
      v24 = 0;
    }
    v25 = (_DWORD *)(v23 + 4 * v19);
    v26 = v23 + 4 * v24;
    *v25 = *((_DWORD *)a2 + 29);
    v17 = v25 + 1;
    while (v15 != v18)
    {
      v27 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *--v25 = v27;
    }
    a2[8] = v25;
    a2[9] = v17;
    a2[10] = v26;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_DWORD *)v15 = *((_DWORD *)a2 + 29);
    v17 = v15 + 4;
  }
  a2[9] = v17;
}

void sub_19131DC68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::blob<unsigned short,5>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1430;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return a1;
}

void Espresso::blob<unsigned short,5>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1430;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,5>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,5>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,5>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN8Espresso26optimize_network_with_ruleINS_23rule_convolution_groupsEEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, int64x2_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  char *v30;
  void **v31;
  int64x2_t v32;
  char *v33;
  char **v34;

  v29 = 0uLL;
  v30 = 0;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBD0A8;
  v6 = v4 + 3;
  v7 = *(void ***)a1;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  v31 = v7;
  v32.i64[0] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  Espresso::rule_convolution_groups::rule_convolution_groups(v4 + 3, (uint64_t)&v31);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)&v28 = v6;
  *((_QWORD *)&v28 + 1) = v5;
  v13 = v29.i64[1];
  if (v29.i64[1] >= (unint64_t)v30)
  {
    v15 = (v29.i64[1] - v29.i64[0]) >> 4;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v16 = (uint64_t)&v30[-v29.i64[0]] >> 3;
    if (v16 <= v15 + 1)
      v16 = v15 + 1;
    if ((unint64_t)&v30[-v29.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v34 = &v30;
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v17);
    v20 = &v18[16 * v15];
    *(_OWORD *)v20 = v28;
    v21 = (_QWORD *)v29.i64[1];
    v22 = (_QWORD *)v29.i64[0];
    if (v29.i64[1] == v29.i64[0])
    {
      v25 = vdupq_n_s64(v29.u64[1]);
      v23 = &v18[16 * v15];
    }
    else
    {
      v23 = &v18[16 * v15];
      do
      {
        v24 = *((_OWORD *)v21 - 1);
        v21 -= 2;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *v21 = 0;
        v21[1] = 0;
      }
      while (v21 != v22);
      v25 = v29;
    }
    v14 = v20 + 16;
    v29.i64[0] = (uint64_t)v23;
    v29.i64[1] = (uint64_t)(v20 + 16);
    v32 = v25;
    v26 = v30;
    v30 = &v18[16 * v19];
    v33 = v26;
    v31 = (void **)v25.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
  }
  else
  {
    *(_OWORD *)v29.i64[1] = v28;
    v14 = (_OWORD *)(v13 + 16);
  }
  v27 = v30;
  v29.i64[1] = (uint64_t)v14;
  v30 = 0;
  *a2 = v29;
  a2[1].i64[0] = (uint64_t)v27;
  v29 = 0uLL;
  v31 = (void **)&v29;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v31);
}

void sub_19131DFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a13 = (void **)&a15;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::rule_convolution_groups>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD0A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rule_convolution_groups>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD0A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_convolution_groups>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN8Espresso26optimize_network_with_ruleI20rule_input_underflowEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, int64x2_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  char *v33;
  void **v34;
  int64x2_t v35;
  char *v36;
  char **v37;
  void **v38;
  std::__shared_weak_count *v39;

  v32 = 0uLL;
  v33 = 0;
  v4 = operator new(0x48uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB5820;
  v6 = v4 + 3;
  v7 = *(void ***)a1;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  v38 = v7;
  v39 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v34 = v7;
    v35.i64[0] = (uint64_t)v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v34 = v7;
    v35.i64[0] = 0;
  }
  Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v5[3] = &off_1E2D56D60;
  *((_DWORD *)v5 + 16) = 1065353216;
  if (v39)
  {
    v14 = &v39->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = v5;
  v16 = v32.i64[1];
  if (v32.i64[1] >= (unint64_t)v33)
  {
    v18 = (v32.i64[1] - v32.i64[0]) >> 4;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (uint64_t)&v33[-v32.i64[0]] >> 3;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if ((unint64_t)&v33[-v32.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v37 = &v33;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v20);
    v23 = &v21[16 * v18];
    *(_OWORD *)v23 = v31;
    v24 = (_QWORD *)v32.i64[1];
    v25 = (_QWORD *)v32.i64[0];
    if (v32.i64[1] == v32.i64[0])
    {
      v28 = vdupq_n_s64(v32.u64[1]);
      v26 = &v21[16 * v18];
    }
    else
    {
      v26 = &v21[16 * v18];
      do
      {
        v27 = *((_OWORD *)v24 - 1);
        v24 -= 2;
        *((_OWORD *)v26 - 1) = v27;
        v26 -= 16;
        *v24 = 0;
        v24[1] = 0;
      }
      while (v24 != v25);
      v28 = v32;
    }
    v17 = v23 + 16;
    v32.i64[0] = (uint64_t)v26;
    v32.i64[1] = (uint64_t)(v23 + 16);
    v35 = v28;
    v29 = v33;
    v33 = &v21[16 * v22];
    v36 = v29;
    v34 = (void **)v28.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    *(_OWORD *)v32.i64[1] = v31;
    v17 = (_OWORD *)(v16 + 16);
  }
  v30 = v33;
  v32.i64[1] = (uint64_t)v17;
  v33 = 0;
  *a2 = v32;
  a2[1].i64[0] = (uint64_t)v30;
  v32 = 0uLL;
  v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

void sub_19131E28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a13 = (void **)&a15;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(_QWORD *a1, _QWORD *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = off_1E2D901E0;
    a1[1] = a2;
    a1[2] = a3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    *a1 = off_1E2D901E0;
    a1[1] = a2;
    a1[2] = 0;
  }
  v8 = a2[1];
  a1[3] = *a2;
  a1[4] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = off_1E2D9B168;
  return a1;
}

void rule_input_underflow::~rule_input_underflow(rule_input_underflow *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void rule_input_underflow::transform(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  vDSP_Length v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  float v19;
  unint64_t *v20;
  unint64_t v21;
  size_t v22;
  std::string *v23;
  void **v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::string *v58[3];
  std::string *v59[3];
  uint64_t v60[2];
  uint64_t v61[3];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string v67;
  __int128 v68;
  int64_t v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73[2];
  unsigned __int8 v74;
  void *__p;
  float v76;
  uint64_t v77;
  int v78;
  char v79;
  int v80;
  int v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  float __B;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  void **v95;

  v5 = *a3;
  if (*a3)
  {
    v6 = a3[1];
    v93 = *a3;
    v94 = (std::__shared_weak_count *)v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    v93 = 0;
    v94 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(&v91, v5, &__p);
  if (SHIBYTE(v78) < 0)
    operator delete(__p);
  v10 = *(_QWORD *)(v91 + 8);
  v9 = *(_QWORD *)(v91 + 16);
  v89 = v10;
  v90 = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v10 + 456))(&v87, v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v10 + 472))(&v85, v10);
  v13 = 0;
  if ((float)(0.0039062 / *(float *)(a1 + 40)) <= 64.0)
    v14 = 0.0039062 / *(float *)(a1 + 40);
  else
    v14 = 64.0;
  __B = v14;
  v15 = *(int *)(v87 + 8);
  do
  {
    v15 *= *(int *)(v87 + 12 + v13);
    v13 += 4;
  }
  while (v13 != 12);
  vDSP_vsmul(*(const float **)(v87 + 24), 1, &__B, *(float **)(v85 + 24), 1, v15);
  v82 = v85;
  v83 = v86;
  if (v86)
  {
    p_shared_owners = (unint64_t *)&v86->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 400))(v10, &v82);
  v18 = v83;
  v19 = 1.0 / v14;
  if (v83)
  {
    v20 = (unint64_t *)&v83->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v77 = 0x358637BD00000000;
  v78 = 0;
  v79 = 0;
  v81 = 0;
  v80 = 0;
  __p = (void *)3;
  v76 = v19;
  std::string::basic_string[abi:ne180100]<0>(v73, "__fix__underflow___");
  v71 = 0;
  v72 = 0;
  v70 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v70, *(_QWORD *)(v91 + 96), *(_QWORD *)(v91 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v91 + 104) - *(_QWORD *)(v91 + 96)) >> 3));
  if ((v74 & 0x80u) == 0)
    v22 = v74;
  else
    v22 = (size_t)v73[1];
  v23 = &v67;
  std::string::basic_string[abi:ne180100]((uint64_t)&v67, v22 + 2);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if (v22)
  {
    if ((v74 & 0x80u) == 0)
      v24 = v73;
    else
      v24 = (void **)v73[0];
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, "__");
  v25 = *(char *)(v91 + 47);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)(v91 + 24);
  else
    v26 = *(const std::string::value_type **)(v91 + 24);
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(v91 + 47);
  else
    v27 = *(_QWORD *)(v91 + 32);
  v28 = std::string::append(&v67, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v69 = v28->__r_.__value_.__r.__words[2];
  v68 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (v69 >= 0)
    v30 = (const std::string::value_type *)&v68;
  else
    v30 = (const std::string::value_type *)v68;
  if (v69 >= 0)
    v31 = HIBYTE(v69);
  else
    v31 = *((_QWORD *)&v68 + 1);
  std::string::append(v70, v30, v31);
  if (SHIBYTE(v69) < 0)
    operator delete((void *)v68);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v32 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v68, "elementwise");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v91 + 24), (const void **)v73, (uint64_t)&v67);
  v63 = 0;
  v64 = 0;
  v62 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, *(_QWORD *)(v91 + 96), *(_QWORD *)(v91 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v91 + 104) - *(_QWORD *)(v91 + 96)) >> 3));
  memset(v61, 0, sizeof(v61));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v61, (uint64_t)v70, v71, 0xAAAAAAAAAAAAAAABLL * ((v71 - (uint64_t)v70) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v65, v32, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&__p, v62, v63, v61);
  v33 = v66;
  if (v66)
  {
    v34 = (unint64_t *)&v66->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v95 = (void **)v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
  v95 = (void **)&v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69) < 0)
    operator delete((void *)v68);
  v36 = (uint64_t)*a2;
  v37 = (std::__shared_weak_count *)v90;
  v60[0] = v89;
  v60[1] = v90;
  if (v90)
  {
    v38 = (unint64_t *)(v90 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = v91;
  memset(v59, 0, sizeof(v59));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v59, (uint64_t)v70, v71, 0xAAAAAAAAAAAAAAABLL * ((v71 - (uint64_t)v70) >> 3));
  memset(v58, 0, sizeof(v58));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v58, *(_QWORD *)(v91 + 72), *(_QWORD *)(v91 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v91 + 80) - *(_QWORD *)(v91 + 72)) >> 3));
  Espresso::sequential_builder::add_kernel(v36, v60, v40 + 48, v40 + 24, v59, v58);
  *(_QWORD *)&v68 = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  *(_QWORD *)&v68 = v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if (v37)
  {
    v41 = (unint64_t *)&v37->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *(_QWORD *)&v68 = &v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if ((char)v74 < 0)
    operator delete(v73[0]);
  v43 = v86;
  if (v86)
  {
    v44 = (unint64_t *)&v86->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v88;
  if (v88)
  {
    v47 = (unint64_t *)&v88->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (std::__shared_weak_count *)v90;
  if (v90)
  {
    v50 = (unint64_t *)(v90 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v92;
  if (v92)
  {
    v53 = (unint64_t *)&v92->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v94;
  if (v94)
  {
    v56 = (unint64_t *)&v94->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_19131EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a32 = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (a46 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 88);
  _Unwind_Resume(a1);
}

void sub_19131EBCC()
{
  JUMPOUT(0x19131EBA4);
}

void sub_19131EBD4()
{
  JUMPOUT(0x19131EBACLL);
}

void sub_19131EBDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
    operator delete(__p);
  JUMPOUT(0x19131EBBCLL);
}

void sub_19131EBF4()
{
  JUMPOUT(0x19131EBBCLL);
}

void rule_input_underflow::match(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double i;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  __int128 *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t **v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  const void *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  float v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  void *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _QWORD v86[2];
  std::string __p;
  uint64_t v88;
  std::__shared_weak_count *v89;
  int v90;

  v90 = a2;
  v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v86[0] = *(_QWORD *)(a1 + 24);
  v86[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>((uint64_t)&v88, v6, &__p, v86, a2);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = v88;
  if (!v88)
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_105;
    v31 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v31);
    while (__stlxr(v21 - 1, v31));
    goto LABEL_103;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16 * v90);
  v14 = *(const void **)(v13 + 64);
  if (v14
  {
    v15 = *(std::__shared_weak_count **)(v13 + 72);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_103;
    }
    goto LABEL_105;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v12 + 456))(&__p, v12);
  v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_28;
  v23 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_28:
    if ((_QWORD)v22)
      goto LABEL_29;
LABEL_52:
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_105;
    v45 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v45);
    while (__stlxr(v21 - 1, v45));
    goto LABEL_103;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
  if (!(_QWORD)v22)
    goto LABEL_52;
LABEL_29:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v88 + 456))(&v84);
  v25 = 0;
  v26 = *(int *)(v84 + 8);
  do
  {
    v26 *= *(int *)(v84 + 12 + v25);
    v25 += 4;
  }
  while (v25 != 12);
  v27 = 0;
  for (i = 0.0; ; i = i + (float)((float)(1.0 / (float)v26) * fabsf(*(float *)(*(_QWORD *)(v84 + 24) + 4 * v27++))))
  {
    v29 = 0;
    v30 = *(int *)(v84 + 8);
    do
    {
      v30 *= *(int *)(v84 + 12 + v29);
      v29 += 4;
    }
    while (v29 != 12);
    if (v30 <= v27)
      break;
  }
  v32 = *(uint64_t **)(a1 + 8);
  v34 = *v32;
  v33 = (std::__shared_weak_count *)v32[1];
  v82 = v34;
  v83 = v33;
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = v34 + 56;
  v38 = v90;
  __p.__r_.__value_.__r.__words[0] = v90;
  v39 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34 + 56, v90, &__p);
  if (v39[4] - v39[3] == 24)
  {
    *(_QWORD *)&v81 = v38;
    v40 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34 + 56, v38, &v81)[3];
    if (*((char *)v40 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
    }
    else
    {
      v41 = *v40;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v41;
    }
    v46 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 8) + 40), v38, &v90);
    if ((char *)v46[6] - (char *)v46[5] == 4)
    {
      v47 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 8) + 40), v38, &v90)[5];
      v48 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16 * v47);
      v81 = v48;
      if (*((_QWORD *)&v48 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v51 = v48;
      v52 = *(const void **)(v48 + 64);
      if (v52
      {
        v54 = *(std::__shared_weak_count **)(v51 + 72);
        v79 = v53;
        v80 = v54;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v53 + 320))(v53) + 4)) < 0.00001)
        {
          *(_QWORD *)&v78 = v47;
          v57 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v47, &v78);
          if (v57[4] - v57[3] != 24)
          {
            v78 = 0uLL;
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v78);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v78);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v79);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v81);
            goto LABEL_93;
          }
          v58 = *(_QWORD *)(a1 + 24) + 56;
          *(_QWORD *)&v78 = v47;
          v59 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v58, v47, &v78);
          std::string::operator=(&__p, (const std::string *)v59[3]);
        }
      }
      else
      {
        v79 = 0;
        v80 = 0;
      }
      v60 = v80;
      if (v80)
      {
        v61 = (unint64_t *)&v80->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
      if (*((_QWORD *)&v81 + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v34 = v82;
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v34 + 240), &__p))
    {
      v66 = i;
      *(float *)(a1 + 40) = v66;
      if (i > 0.00390625)
      {
        v81 = 0uLL;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v81);
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
        if (*((_QWORD *)&v81 + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          goto LABEL_90;
        }
      }
    }
    else
    {
      v81 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v81);
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
      if (*((_QWORD *)&v81 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
        do
          v69 = __ldaxr(v70);
        while (__stlxr(v69 - 1, v70));
LABEL_90:
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
    }
LABEL_93:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_95;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&__p);
  v42 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
LABEL_95:
  v71 = v83;
  if (v83)
  {
    v72 = (unint64_t *)&v83->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  size = v85;
  if (v85)
  {
    v74 = (unint64_t *)&v85->__shared_owners_;
    do
      v21 = __ldaxr(v74);
    while (__stlxr(v21 - 1, v74));
LABEL_103:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_105:
  v75 = v89;
  if (v89)
  {
    v76 = (unint64_t *)&v89->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_19131F2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 88);
  _Unwind_Resume(a1);
}

_BYTE *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *result;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29[4];
  std::__shared_weak_count *v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  char v38;
  __int128 v39;
  int v40;
  void **v41;

  v40 = a5;
  v10 = *a4;
  v11 = *(_QWORD *)(*(_QWORD *)(*a4 + 32) + 16 * a5);
  result = *(_BYTE **)(v11 + 64);
  if (result
  {
    v13 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)&v39 = result;
    *((_QWORD *)&v39 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *a4;
    }
    v16 = (std::__shared_weak_count *)a4[1];
    v27 = v10;
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(v29, (uint64_t)&v27, a5);
    v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v19 + 7), (uint64_t)v29);
    if (v38 < 0)
      operator delete(__p);
    v41 = (void **)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v28;
    if (v28)
    {
      v24 = (unint64_t *)&v28->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v40;
    if (v40 == -1)
      *(_DWORD *)(a2 + 8) = -1;
    result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), v26, &v40);
    result[32] = 1;
    *(_OWORD *)a1 = v39;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

void sub_19131F564(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

int *Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(int *a1, uint64_t a2, int a3)
{
  std::string *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string::size_type v11;
  unint64_t *v12;
  unint64_t v13;
  int *v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v26;

  *(_OWORD *)(a1 + 2) = 0u;
  *(_OWORD *)(a1 + 6) = 0u;
  v6 = (std::string *)(a1 + 6);
  *(_OWORD *)(a1 + 18) = 0u;
  v7 = (uint64_t)(a1 + 18);
  *(_OWORD *)(a1 + 30) = 0u;
  v8 = (void **)(a1 + 30);
  *((_QWORD *)a1 + 17) = 0;
  *(_OWORD *)(a1 + 26) = 0u;
  *(_OWORD *)(a1 + 22) = 0u;
  *(_OWORD *)(a1 + 14) = 0u;
  *(_OWORD *)(a1 + 10) = 0u;
  *a1 = a3;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 16 * a3);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 72);
    v26.__r_.__value_.__r.__words[0] = v10;
    v26.__r_.__value_.__l.__size_ = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
  }
  v14 = a1 + 24;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 2), (__int128 *)&v26);
  size = (std::__shared_weak_count *)v26.__r_.__value_.__l.__size_;
  if (v26.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v26.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::string::operator=(v6, (const std::string *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 16 * *a1) + 16));
  v18 = *(_QWORD *)a2 + 96;
  v19 = *a1;
  v26.__r_.__value_.__r.__words[0] = v19;
  v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, v19, &v26);
  if ((_QWORD *)v7 != v20 + 3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v7, (std::string *)v20[3], (std::string *)v20[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
  v21 = *(_QWORD *)a2 + 56;
  v22 = *a1;
  v26.__r_.__value_.__r.__words[0] = v22;
  v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v22, &v26);
  if (v14 != (int *)(v23 + 3))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(a1 + 24), (std::string *)v23[3], (std::string *)v23[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23[4] - v23[3]) >> 3));
  std::string::operator=((std::string *)a1 + 2, (const std::string *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 16 * *a1) + 40));
  *a1 = a3;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 16 * a3);
  if (*(char *)(v24 + 223) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v24 + 200), *(_QWORD *)(v24 + 208));
  else
    v26 = *(std::string *)(v24 + 200);
  if (*((char *)a1 + 143) < 0)
    operator delete(*v8);
  *(std::string *)v8 = v26;
  return a1;
}

void sub_19131F7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  char *v9;
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;

  if (v9[143] < 0)
    operator delete(*v13);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (v9[71] < 0)
    operator delete(*v12);
  if (v9[47] < 0)
    operator delete(*v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  char *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = (char *)operator new(0xC8uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
    }
    *((_DWORD *)v11 + 14) = 0;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 11) = 0u;
    *((_QWORD *)v11 + 24) = 0;
    v17 = 1;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v7;
    *v8 = (uint64_t *)v11;
    v13 = (uint64_t *)v11;
    v14 = (uint64_t *)**a1;
    if (v14)
    {
      *a1 = v14;
      v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_19131F984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::graph_node_t<Espresso::base_kernel>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;

  v4 = (__int128 *)(a2 + 24);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 8, (__int128 *)(a2 + 8));
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *v4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a2 + 71) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 72));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v9 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v9);
  v10 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)v9 = v10;
  *(_BYTE *)(a2 + 143) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  return a1;
}

uint64_t Espresso::graph_node_t<Espresso::base_kernel>::~graph_node_t(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

uint64_t **std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((_BYTE *)v9 + 32) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::graph_node_t<Espresso::base_kernel>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::graph_node_t<Espresso::base_kernel>>,0>(uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v2 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  unint64_t *v14;
  unint64_t v15;

  v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 40, a3);
  if ((_QWORD *)(a2 + 48) != v5
    && (v6 = v5, (v7 = (const void *)v5[8]) != 0)
  {
    v9 = (uint64_t)v8;
    v10 = (std::__shared_weak_count *)v6[9];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (std::string *)operator new(0xA8uLL);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB6C78;
    LODWORD(v13[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v13[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v13[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v13[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v13[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v13[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v13[6].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v13[2].__r_.__value_.__l.__data_ = 0u;
    v13[6].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v13[1].__r_.__value_.__r.__words[1] = 0u;
    *a1 = v13 + 1;
    a1[1] = v13;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v13[1].__r_.__value_.__l.__size_, v9, (uint64_t)v10);
    std::string::operator=(v13 + 2, (const std::string *)(v6 + 10));
    if (v13 != (std::string *)(v6 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v13[4], (std::string *)v6[16], (std::string *)v6[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[17] - v6[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v13[5], (std::string *)v6[19], (std::string *)v6[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[20] - v6[19]) >> 3));
    }
    std::string::operator=(v13 + 3, (const std::string *)(v6 + 13));
    LODWORD(v13[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 14);
    std::string::operator=(v13 + 6, (const std::string *)(v6 + 22));
    if (v10)
    {
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_19131FE50(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add<Espresso::elementwise_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191320094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_convolution_kernel>>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<rule_input_underflow>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_input_underflow>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_input_underflow>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN8Espresso13auto_optimizeENSt3__110shared_ptrINS_3netEEENS_21auto_optimize_optionsE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  Espresso *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  int v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  int v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t v49;
  uint64_t v50[3];

  v4 = *(Espresso **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v48 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(std::__shared_weak_count **)(a2 + 24);
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (!Espresso::is_kernel_generating_output(*(Espresso **)a2, (const Espresso::base_kernel *)a2))
  {
    v11 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v4 + 320))(v4);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8);
    v13 = v12;
    v15 = v12 + 36;
    v14 = *(unsigned __int16 *)(v12 + 36);
    if (*(_WORD *)(v12 + 36))
      v16 = (v14 & 0xFFFE) == 2;
    else
      v16 = 1;
    v18 = v16 && (*(unsigned __int16 *)(v12 + 38) | *(unsigned __int16 *)(v11 + 2)) == 0;
    if (*(_DWORD *)(v12 + 28))
      v19 = 1;
    else
      v19 = v14 == 0;
    if (!v19)
    {
      if (!v18)
        goto LABEL_45;
      goto LABEL_27;
    }
    if (*(unsigned __int16 *)(v12 + 46) | *(unsigned __int16 *)(v12 + 44) | *(unsigned __int16 *)(v12 + 48) | *(unsigned __int16 *)(v12 + 50))
      LOBYTE(v18) = 0;
    if ((v18 & 1) != 0)
    {
LABEL_27:
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 32);
      v21 = *(char **)(*(_QWORD *)(v20 + 16 * *(int *)(a2 + 116)) + 64);
      v22 = *(_QWORD *)(*(_QWORD *)(v20 + 16 * *(int *)(a2 + 112)) + 64);
      v23 = operator new(8uLL);
      *v23 = v22;
      v50[1] = (uint64_t)(v23 + 1);
      v50[2] = (uint64_t)(v23 + 1);
      v50[0] = (uint64_t)v23;
      Espresso::merge_kernel_attributes(v21, v50);
      operator delete(v23);
      v24 = *(_QWORD *)(a2 + 120) + 56;
      v25 = *(int *)(a2 + 112);
      v50[0] = v25;
      v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v25, v50);
      v27 = *(_QWORD *)(a2 + 120) + 56;
      v28 = *(int *)(a2 + 116);
      v49 = v28;
      v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v28, &v49);
      if (v29 != v26)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v29 + 3), (std::string *)v26[3], (std::string *)v26[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26[4] - v26[3]) >> 3));
      v30 = *(char **)(a2 + 72);
      v31 = *(_QWORD *)(a2 + 80);
      if ((unint64_t)v30 >= v31)
      {
        v33 = *(char **)(a2 + 64);
        v34 = (v30 - v33) >> 2;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v35 = v31 - (_QWORD)v33;
        v36 = (uint64_t)(v31 - (_QWORD)v33) >> 1;
        if (v36 <= v34 + 1)
          v36 = v34 + 1;
        v37 = v35 >= 0x7FFFFFFFFFFFFFFCLL;
        v38 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v37)
          v38 = v36;
        if (v38)
        {
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v38);
          v33 = *(char **)(a2 + 64);
          v30 = *(char **)(a2 + 72);
        }
        else
        {
          v39 = 0;
        }
        v40 = (_DWORD *)(v38 + 4 * v34);
        v41 = v38 + 4 * v39;
        *v40 = *(_DWORD *)(a2 + 112);
        v32 = v40 + 1;
        while (v30 != v33)
        {
          v42 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *--v40 = v42;
        }
        *(_QWORD *)(a2 + 64) = v40;
        *(_QWORD *)(a2 + 72) = v32;
        *(_QWORD *)(a2 + 80) = v41;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_DWORD *)v30 = *(_DWORD *)(a2 + 112);
        v32 = v30 + 4;
      }
      *(_QWORD *)(a2 + 72) = v32;
      v43 = *(_OWORD *)v11;
      *(_DWORD *)(v15 + 16) = *(_DWORD *)(v11 + 16);
      *(_OWORD *)v15 = v43;
      *(_DWORD *)(v13 + 28) = 0;
    }
  }
LABEL_45:
  if (v7)
  {
    v44 = (unint64_t *)&v7->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v48)
  {
    v46 = (unint64_t *)&v48->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_191320564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso13auto_optimizeENSt3__110shared_ptrINS_3netEEENS_21auto_optimize_optionsE_block_invoke(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  Espresso *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  const void *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  BOOL v17;
  int v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v4 = *(Espresso **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v26 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(const void **)(a2 + 16);
  v7 = *(std::__shared_weak_count **)(a2 + 24);
  v25 = v7;
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (Espresso::is_kernel_generating_output(*(Espresso **)a2, (const Espresso::base_kernel *)a2))
    goto LABEL_32;
  if (v8
  {
    if (!v7)
      goto LABEL_37;
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v14 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v4 + 320))(v4);
    v15 = (_WORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v8 + 384))(v8);
    v16 = v15 + 36;
    if (v15[36])
      v17 = (v15[36] & 0xFFFE) == 2;
    else
      v17 = 1;
    v19 = v17 && ((unsigned __int16)v15[37] | *(unsigned __int16 *)(v14 + 2)) == 0;
    if (v15[36])
    {
      if (!v19)
        goto LABEL_32;
    }
    else
    {
      if ((unsigned __int16)v15[41] | (unsigned __int16)v15[40] | (unsigned __int16)v15[42] | (unsigned __int16)v15[43])
        LOBYTE(v19) = 0;
      if ((v19 & 1) == 0)
        goto LABEL_32;
    }
    Espresso::fuse_vertical_state<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>::remove_first_layer(a2);
    v20 = *(_OWORD *)v14;
    *((_DWORD *)v16 + 4) = *(_DWORD *)(v14 + 16);
    *(_OWORD *)v16 = v20;
  }
LABEL_32:
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
LABEL_37:
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191320798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::fuse_vertical_state<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>::remove_first_layer(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26[3];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32);
  v3 = *(char **)(*(_QWORD *)(v2 + 16 * *(int *)(a1 + 116)) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16 * *(int *)(a1 + 112)) + 64);
  v5 = operator new(8uLL);
  *v5 = v4;
  v26[1] = (uint64_t)(v5 + 1);
  v26[2] = (uint64_t)(v5 + 1);
  v26[0] = (uint64_t)v5;
  Espresso::merge_kernel_attributes(v3, v26);
  operator delete(v5);
  v6 = *(_QWORD *)(a1 + 120) + 56;
  v7 = *(int *)(a1 + 112);
  v26[0] = v7;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v26);
  v9 = *(_QWORD *)(a1 + 120) + 56;
  v10 = *(int *)(a1 + 116);
  v25 = v10;
  v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v25);
  if (v11 != v8)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v11 + 3), (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  v12 = *(char **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v12 >= v13)
  {
    v15 = *(char **)(a1 + 64);
    v16 = (v12 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)v15;
    v18 = (uint64_t)(v13 - (_QWORD)v15) >> 1;
    if (v18 <= v16 + 1)
      v18 = v16 + 1;
    v19 = v17 >= 0x7FFFFFFFFFFFFFFCLL;
    v20 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v19)
      v20 = v18;
    if (v20)
    {
      v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
      v15 = *(char **)(a1 + 64);
      v12 = *(char **)(a1 + 72);
    }
    else
    {
      v21 = 0;
    }
    v22 = (_DWORD *)(v20 + 4 * v16);
    v23 = v20 + 4 * v21;
    *v22 = *(_DWORD *)(a1 + 112);
    v14 = v22 + 1;
    while (v12 != v15)
    {
      v24 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--v22 = v24;
    }
    *(_QWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v23;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_DWORD *)v12 = *(_DWORD *)(a1 + 112);
    v14 = v12 + 4;
  }
  *(_QWORD *)(a1 + 72) = v14;
}

void sub_191320954(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso26optimize_network_with_ruleI20rule_fuse_scale_convEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, int64x2_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  char *v33;
  void **v34;
  int64x2_t v35;
  char *v36;
  char **v37;
  void **v38;
  std::__shared_weak_count *v39;

  v32 = 0uLL;
  v33 = 0;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB57E8;
  v6 = v4 + 3;
  v7 = *(void ***)a1;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  v38 = v7;
  v39 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v34 = v7;
    v35.i64[0] = (uint64_t)v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v34 = v7;
    v35.i64[0] = 0;
  }
  Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *v6 = &off_1E2D56D20;
  if (v39)
  {
    v14 = &v39->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = v5;
  v16 = v32.i64[1];
  if (v32.i64[1] >= (unint64_t)v33)
  {
    v18 = (v32.i64[1] - v32.i64[0]) >> 4;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (uint64_t)&v33[-v32.i64[0]] >> 3;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if ((unint64_t)&v33[-v32.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v37 = &v33;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v20);
    v23 = &v21[16 * v18];
    *(_OWORD *)v23 = v31;
    v24 = (_QWORD *)v32.i64[1];
    v25 = (_QWORD *)v32.i64[0];
    if (v32.i64[1] == v32.i64[0])
    {
      v28 = vdupq_n_s64(v32.u64[1]);
      v26 = &v21[16 * v18];
    }
    else
    {
      v26 = &v21[16 * v18];
      do
      {
        v27 = *((_OWORD *)v24 - 1);
        v24 -= 2;
        *((_OWORD *)v26 - 1) = v27;
        v26 -= 16;
        *v24 = 0;
        v24[1] = 0;
      }
      while (v24 != v25);
      v28 = v32;
    }
    v17 = v23 + 16;
    v32.i64[0] = (uint64_t)v26;
    v32.i64[1] = (uint64_t)(v23 + 16);
    v35 = v28;
    v29 = v33;
    v33 = &v21[16 * v22];
    v36 = v29;
    v34 = (void **)v28.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    *(_OWORD *)v32.i64[1] = v31;
    v17 = (_OWORD *)(v16 + 16);
  }
  v30 = v33;
  v32.i64[1] = (uint64_t)v17;
  v33 = 0;
  *a2 = v32;
  a2[1].i64[0] = (uint64_t)v30;
  v32 = 0uLL;
  v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

void sub_191320B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a13 = (void **)&a15;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void rule_fuse_scale_conv::~rule_fuse_scale_conv(rule_fuse_scale_conv *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void rule_fuse_scale_conv::transform(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  void *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float *v55;
  float *v56;
  uint64_t v57;
  float v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112[3];
  std::string *v113[3];
  void *__p;
  std::__shared_weak_count *v115;
  char v116;
  uint64_t v117[2];
  uint64_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  _QWORD v121[2];
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __int128 v139;
  char v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;

  v4 = *a3;
  if (*a3)
  {
    v5 = a3[1];
    v143 = *a3;
    v144 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    v143 = 0;
    v144 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v139, "conv");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(&v141, v4, &v139);
  if (v140 < 0)
    operator delete((void *)v139);
  std::string::basic_string[abi:ne180100]<0>(&v139, "scale");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_elementwise_kernel>(&v137, v4, &v139);
  if (v140 < 0)
    operator delete((void *)v139);
  std::string::basic_string[abi:ne180100]<0>(&v139, "const");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_load_constant_kernel>(&v135, v4, &v139);
  if (v140 < 0)
    operator delete((void *)v139);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v141 + 8) + 456))(&v133);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v141 + 8) + 448))(&v132);
  if (!(_QWORD)v132)
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v141 + 8) + 488))(&v139);
    v8 = v139;
    v139 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
    v132 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
    if (*((_QWORD *)&v139 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(int *)(v132 + 8);
    if ((_DWORD)v15)
      bzero(*(void **)(v132 + 16), 4 * v15);
  }
  std::string::operator=((std::string *)(*a2 + 56), (const std::string *)(v141 + 120));
  v131 = 0uLL;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v129, (int *)(v132 + 8));
  v16 = *(_QWORD *)(v135 + 8);
  v17 = *(_QWORD *)(v16 + 344);
  if (v17 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17))
  {
    v109 = *(_QWORD *)(v16 + 344);
    v19 = *(_QWORD *)(v109 + 160);
    v18 = *(std::__shared_weak_count **)(v109 + 168);
    v127 = v19;
    v128 = v18;
    if (v18)
    {
      v110 = (unint64_t *)&v18->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v127 = 0;
    v128 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v139, "convolution");
  v20 = v141;
  v21 = *(const void **)(v141 + 8);
  if (v21
  {
    v23 = v22;
    v24 = *(std::__shared_weak_count **)(v20 + 16);
    __p = v22;
    v115 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    MEMORY[0x19401C808](&v139, "deconvolution");
    v124 = v23;
    v125 = v24;
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v122 = v19;
    v123 = v18;
    if (v18)
    {
      v29 = (unint64_t *)&v18->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = v134;
    v121[0] = v133;
    v121[1] = v134;
    if (v134)
    {
      v32 = (unint64_t *)&v134->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    scale_deconv_weights((uint64_t *)&v126, &v124, (uint64_t)&v122, (uint64_t)v121);
    v34 = v126;
    v126 = 0uLL;
    v131 = v34;
    if (v31)
    {
      v35 = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v37 = v123;
    if (v123)
    {
      v38 = (unint64_t *)&v123->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v125;
    if (v125)
    {
      v41 = (unint64_t *)&v125->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = 0;
    v44 = __p;
    while (v43 < *(int *)((*(uint64_t (**)(void *))(*(_QWORD *)v44 + 384))(v44) + 40))
    {
      *(float *)(*(_QWORD *)(v129 + 16) + 4 * v43) = *(float *)(*(_QWORD *)(v127 + 24) + 4 * v43)
                                                   * *(float *)(*(_QWORD *)(v132 + 16) + 4 * v43);
      ++v43;
    }
    if (v115)
    {
      v59 = &v115->__shared_owners_;
      do
        v60 = __ldaxr((unint64_t *)v59);
      while (__stlxr(v60 - 1, (unint64_t *)v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
  }
  else
  {
    __p = 0;
    v115 = 0;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v126, v133 + 8);
    v131 = v126;
    v45 = *(unsigned int *)(v133 + 20);
    if ((int)v45 >= 1)
    {
      v46 = 0;
      v47 = (*(_DWORD *)(v133 + 12) * *(_DWORD *)(v133 + 8) * *(_DWORD *)(v133 + 16));
      v48 = *(float **)(v126 + 24);
      v49 = *(float **)(v133 + 24);
      v50 = *(_QWORD *)(v19 + 24);
      v51 = *(_QWORD *)(v132 + 16);
      v52 = *(_QWORD *)(v129 + 16);
      v53 = 4 * (int)v47;
      do
      {
        v54 = *(float *)(v50 + 4 * v46);
        v55 = v49;
        v56 = v48;
        v57 = v47;
        if ((int)v47 >= 1)
        {
          do
          {
            v58 = *v55++;
            *v56++ = v54 * v58;
            --v57;
          }
          while (v57);
        }
        *(float *)(v52 + 4 * v46) = v54 * *(float *)(v51 + 4 * v46);
        ++v46;
        v48 = (float *)((char *)v48 + v53);
        v49 = (float *)((char *)v49 + v53);
      }
      while (v46 != v45);
    }
  }
  v61 = *(_QWORD *)(v141 + 8);
  v120 = v131;
  if (*((_QWORD *)&v131 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v61 + 400))(v61, &v120);
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = *(_QWORD *)(v141 + 8);
  v118 = v129;
  v119 = v130;
  if (v130)
  {
    v68 = (unint64_t *)&v130->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 392))(v67, &v118);
  v70 = v119;
  if (v119)
  {
    v71 = (unint64_t *)&v119->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a2;
  v74 = *(std::__shared_weak_count **)(v141 + 16);
  v117[0] = *(_QWORD *)(v141 + 8);
  v117[1] = (uint64_t)v74;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  if (v140 >= 0)
    v77 = (char *)&v139;
  else
    v77 = (char *)v139;
  std::string::basic_string[abi:ne180100]<0>(&__p, v77);
  v78 = v141;
  memset(v113, 0, sizeof(v113));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v113, *(_QWORD *)(v141 + 96), *(_QWORD *)(v141 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v141 + 104) - *(_QWORD *)(v141 + 96)) >> 3));
  memset(v112, 0, sizeof(v112));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v112, *(_QWORD *)(v137 + 72), *(_QWORD *)(v137 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v137 + 80) - *(_QWORD *)(v137 + 72)) >> 3));
  Espresso::sequential_builder::add_kernel(v73, v117, (uint64_t)&__p, v78 + 24, v113, v112);
  *(_QWORD *)&v126 = v112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  *(_QWORD *)&v126 = v113;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (v116 < 0)
    operator delete(__p);
  if (v74)
  {
    v79 = (unint64_t *)&v74->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v81 = *a2;
  if (*(char *)(*a2 + 79) < 0)
  {
    **(_BYTE **)(v81 + 56) = 0;
    *(_QWORD *)(v81 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(v81 + 56) = 0;
    *(_BYTE *)(v81 + 79) = 0;
  }
  if (v140 < 0)
    operator delete((void *)v139);
  v82 = v128;
  if (v128)
  {
    v83 = (unint64_t *)&v128->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v130;
  if (v130)
  {
    v86 = (unint64_t *)&v130->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v136;
  if (v136)
  {
    v98 = (unint64_t *)&v136->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v138;
  if (v138)
  {
    v101 = (unint64_t *)&v138->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v142;
  if (v142)
  {
    v104 = (unint64_t *)&v142->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v144;
  if (v144)
  {
    v107 = (unint64_t *)&v144->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
}

void sub_1913215C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 80);
  _Unwind_Resume(a1);
}

void rule_fuse_scale_conv::match(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  int v24;
  uint64_t **v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  int *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  int v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  int v66;
  _QWORD v67[2];
  void *__p[2];
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  int v72;

  v72 = a2;
  v6 = *(_QWORD *)a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  v7 = (std::__shared_weak_count *)a1[4];
  v67[0] = a1[3];
  v67[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>((uint64_t)&v70, v6, __p, v67, a2);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v69 < 0)
    operator delete(__p[0]);
  v12 = v70;
  if (!v70)
  {
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_37;
    v16 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v16);
    while (__stlxr(v15 - 1, v16));
    goto LABEL_35;
  }
  if (!*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 384))(v70) + 24))
  {
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 28))
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      v13 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_37;
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v17);
      while (__stlxr(v15 - 1, v17));
      goto LABEL_35;
    }
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 60) != -1)
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      v13 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_37;
      v18 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v18);
      while (__stlxr(v15 - 1, v18));
      goto LABEL_35;
    }
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 112))
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      v13 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_37;
      v19 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v19);
      while (__stlxr(v15 - 1, v19));
      goto LABEL_35;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v12 + 456))(__p, v12);
    v23 = __p[0];
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v23
      || (v24 = v72,
          v25 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), v72, &v72), (char *)v25[6] - (char *)v25[5] != 4))
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      goto LABEL_37;
    }
    v26 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), v24, &v72)[5];
    v66 = v26;
    v27 = *(_QWORD *)a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "scale");
    v28 = a1[4];
    v64[0] = a1[3];
    v64[1] = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_elementwise_kernel>(v65, v27, __p, v64, v26, &__block_literal_global_67_420);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v64);
    if (v69 < 0)
      operator delete(__p[0]);
    if (!v65[0]
      || (v31 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v26, &v66), (char *)v31[6] - (char *)v31[5] != 8)|| *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v26, &v66)[5] != v24)
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      goto LABEL_66;
    }
    v32 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v26, &v66)[5]+ 1);
    v33 = *(_QWORD *)a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "const");
    v34 = a1[4];
    v62[0] = a1[3];
    v62[1] = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_load_constant_kernel>((uint64_t)v63, v33, __p, v62, v32);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v62);
    if (v69 < 0)
      operator delete(__p[0]);
    v37 = v63[0];
    if (v63[0])
    {
      v38 = *(_QWORD *)(v63[0] + 344);
      if (v38 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38))
      {
        v39 = *(_QWORD *)(v37 + 344);
        v41 = *(void **)(v39 + 160);
        v40 = *(unint64_t **)(v39 + 168);
        __p[0] = v41;
        __p[1] = v40;
        if (v40)
        {
          v42 = v40 + 1;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        if (v41)
        {
          v44 = v63[0];
          (*(void (**)(_QWORD))(**(_QWORD **)(v63[0] + 344) + 32))(*(_QWORD *)(v63[0] + 344));
          v45 = *(_QWORD *)(v44 + 344);
          v47 = *(int **)(v45 + 160);
          v46 = *(unint64_t **)(v45 + 168);
          __p[0] = v47;
          __p[1] = v46;
          if (v46)
          {
            v48 = v46 + 1;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          v50 = 0;
          v51 = v47[2];
          v52 = v47 + 3;
          do
            v51 *= v52[v50++];
          while (v50 != 3);
          v53 = *(int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 40);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          if (v51 == v53)
          {
            v54 = v63[0];
            (*(void (**)(_QWORD))(**(_QWORD **)(v63[0] + 344) + 32))(*(_QWORD *)(v63[0] + 344));
            v55 = *(_QWORD *)(v54 + 344);
            v56 = *(_DWORD **)(v55 + 160);
            v57 = *(unint64_t **)(v55 + 168);
            __p[0] = v56;
            __p[1] = v57;
            if (v57)
            {
              v58 = v57 + 1;
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
            }
            v60 = v56[4];
            v61 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 40);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            if (v60 == v61 && *(_QWORD *)(*(_QWORD *)a3 + 56) == 3)
              goto LABEL_63;
          }
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
LABEL_63:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v63);
LABEL_66:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v65);
    goto LABEL_37;
  }
  __p[0] = 0;
  __p[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
  v13 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_37;
  v14 = (unint64_t *)((char *)__p[1] + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
LABEL_35:
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_37:
  v20 = v71;
  if (v71)
  {
    v21 = (unint64_t *)&v71->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_191321D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 72);
  _Unwind_Resume(a1);
}

void Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_elementwise_kernel>(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5, void *a6)
{
  uint64_t (**v11)(id, void *);
  uint64_t v12;
  const void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  int v33[4];
  std::__shared_weak_count *v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  char v42;
  __int128 v43;
  int v44;
  void **v45;

  v44 = a5;
  v11 = a6;
  v12 = *(_QWORD *)(*(_QWORD *)(*a4 + 32) + 16 * a5);
  v13 = *(const void **)(v12 + 64);
  if (v13
  {
    v15 = *(std::__shared_weak_count **)(v12 + 72);
    *(_QWORD *)&v43 = v14;
    *((_QWORD *)&v43 + 1) = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    if (v11 && (v11[2](v11, v14) & 1) == 0)
    {
      *a1 = 0;
      a1[1] = 0;
      if (v15)
      {
        v29 = (unint64_t *)&v15->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      v18 = (std::__shared_weak_count *)a4[1];
      v31 = *a4;
      v32 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(v33, (uint64_t)&v31, a5);
      v21 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
      Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v21 + 7), (uint64_t)v33);
      if (v42 < 0)
        operator delete(__p);
      v45 = (void **)&v40;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v45);
      v45 = (void **)&v39;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v45);
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
      v22 = v34;
      if (v34)
      {
        v23 = (unint64_t *)&v34->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v32;
      if (v32)
      {
        v26 = (unint64_t *)&v32->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v44;
      if (v44 == -1)
        *(_DWORD *)(a2 + 8) = -1;
      *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), v28, &v44)+ 32) = 1;
      *(_OWORD *)a1 = v43;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }

}

void sub_191322040(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 96);

  _Unwind_Resume(a1);
}

_BYTE *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_load_constant_kernel>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *result;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29[4];
  std::__shared_weak_count *v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  char v38;
  __int128 v39;
  int v40;
  void **v41;

  v40 = a5;
  v10 = *a4;
  v11 = *(_QWORD *)(*(_QWORD *)(*a4 + 32) + 16 * a5);
  result = *(_BYTE **)(v11 + 64);
  if (result
  {
    v13 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)&v39 = result;
    *((_QWORD *)&v39 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *a4;
    }
    v16 = (std::__shared_weak_count *)a4[1];
    v27 = v10;
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(v29, (uint64_t)&v27, a5);
    v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v19 + 7), (uint64_t)v29);
    if (v38 < 0)
      operator delete(__p);
    v41 = (void **)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v28;
    if (v28)
    {
      v24 = (unint64_t *)&v28->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v40;
    if (v40 == -1)
      *(_DWORD *)(a2 + 8) = -1;
    result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), v26, &v40);
    result[32] = 1;
    *(_OWORD *)a1 = v39;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

void sub_19132226C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

BOOL ___ZN20rule_fuse_scale_conv5matchEiRNSt3__110shared_ptrIN8Espresso30graph_optimization_rule_statusEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2) == 8
      || *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2) == 1;
}

void Espresso::graph_optimization_rule_status::get_match<Espresso::generic_elementwise_kernel>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  void *v8;
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 40, a3);
  if ((_QWORD *)(a2 + 48) != v5
    && (v6 = v5, (v7 = (const void *)v5[8]) != 0)
  {
    v9 = (std::string::size_type)v8;
    v10 = (std::__shared_weak_count *)v6[9];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (std::string *)operator new(0xA8uLL);
    v14 = v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB6CB0;
    LODWORD(v13[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v13[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v13[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v13[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v13[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v13[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v13[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v13[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v13[6].__r_.__value_.__l.__data_ = 0u;
    v13[6].__r_.__value_.__r.__words[2] = 0;
    *a1 = v13 + 1;
    a1[1] = v13;
    if (v10)
    {
      v15 = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v13[1].__r_.__value_.__l.__size_ = v9;
    v13[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
    std::string::operator=(v13 + 2, (const std::string *)(v6 + 10));
    if (v14 != (std::string *)(v6 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v14[4], (std::string *)v6[16], (std::string *)v6[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[17] - v6[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v14[5], (std::string *)v6[19], (std::string *)v6[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[20] - v6[19]) >> 3));
    }
    std::string::operator=(v14 + 3, (const std::string *)(v6 + 13));
    LODWORD(v14[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 14);
    std::string::operator=(v14 + 6, (const std::string *)(v6 + 22));
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1913224B0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::graph_optimization_rule_status::get_match<Espresso::generic_load_constant_kernel>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  void *v8;
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 40, a3);
  if ((_QWORD *)(a2 + 48) != v5
    && (v6 = v5, (v7 = (const void *)v5[8]) != 0)
  {
    v9 = (std::string::size_type)v8;
    v10 = (std::__shared_weak_count *)v6[9];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (std::string *)operator new(0xA8uLL);
    v14 = v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB6D20;
    LODWORD(v13[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v13[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v13[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v13[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v13[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v13[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v13[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v13[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v13[6].__r_.__value_.__l.__data_ = 0u;
    v13[6].__r_.__value_.__r.__words[2] = 0;
    *a1 = v13 + 1;
    a1[1] = v13;
    if (v10)
    {
      v15 = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v13[1].__r_.__value_.__l.__size_ = v9;
    v13[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
    std::string::operator=(v13 + 2, (const std::string *)(v6 + 10));
    if (v14 != (std::string *)(v6 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v14[4], (std::string *)v6[16], (std::string *)v6[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[17] - v6[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v14[5], (std::string *)v6[19], (std::string *)v6[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[20] - v6[19]) >> 3));
    }
    std::string::operator=(v14 + 3, (const std::string *)(v6 + 13));
    LODWORD(v14[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 14);
    std::string::operator=(v14 + 6, (const std::string *)(v6 + 22));
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1913226B4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void scale_deconv_weights(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v8 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 40);
  v9 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 116);
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  v11 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 44);
  v12 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 48);
  v13 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 52);
  v14 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 116);
  if (v14 <= 1)
    v15 = 1;
  else
    v15 = v14;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(a1, *(_QWORD *)a4 + 8);
  if (v11 >= 1)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    v18 = (v8 / v10);
    do
    {
      if ((int)v18 >= 1)
      {
        v19 = 0;
        v20 = *(_QWORD *)(*(_QWORD *)a3 + 24);
        do
        {
          if (v13 >= 1)
          {
            v21 = 0;
            v22 = *(float *)(v20 + 4 * (v19 + v16 / (int)(v11 / v15) * (int)v18));
            v23 = *a1;
            do
            {
              if (v12 >= 1)
              {
                v24 = *(_QWORD *)(*(_QWORD *)a4 + 24);
                v25 = *(_QWORD *)(v23 + 24);
                v17 = (int)v17;
                v26 = v12;
                do
                {
                  *(float *)(v25 + 4 * v17) = v22 * *(float *)(v24 + 4 * v17);
                  ++v17;
                  --v26;
                }
                while (v26);
              }
              ++v21;
            }
            while (v21 != v13);
          }
          ++v19;
        }
        while (v19 != v18);
      }
      ++v16;
    }
    while (v16 != v11);
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v4 = operator new(0x60uLL);
  v5 = v4;
  v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBECA8;
  v4[3] = &off_1E2DA11F0;
  v7 = (char *)(v4 + 3);
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  v8 = 1;
  do
  {
    v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  v10 = 4 * v8;
  v11 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v8));
  bzero(v11, v10);
  v5[6] = v11;
  *((_BYTE *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_191322944(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_load_constant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_load_constant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_load_constant_kernel>>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_elementwise_kernel>>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<rule_fuse_scale_conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB57E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_fuse_scale_conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB57E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_fuse_scale_conv>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void Espresso::sequential_builder::add<Espresso::convolution_uniforms>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191322D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void *Espresso::blob<float,4>::copy(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(a1, a2 + 8);
  v4 = 0;
  v5 = *(int *)(a2 + 8);
  do
  {
    v5 *= *(int *)(a2 + 12 + v4);
    v4 += 4;
  }
  while (v4 != 12);
  return memcpy(*(void **)(*a1 + 24), *(const void **)(a2 + 24), 4 * v5);
}

void ___ZN8Espresso26optimize_network_with_ruleI17rule_fuse_bn_convEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, int64x2_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  char *v33;
  void **v34;
  int64x2_t v35;
  char *v36;
  char **v37;
  void **v38;
  std::__shared_weak_count *v39;

  v32 = 0uLL;
  v33 = 0;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB5698;
  v6 = v4 + 3;
  v7 = *(void ***)a1;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  v38 = v7;
  v39 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v34 = v7;
    v35.i64[0] = (uint64_t)v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v34 = v7;
    v35.i64[0] = 0;
  }
  Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *v6 = &off_1E2D565F0;
  if (v39)
  {
    v14 = &v39->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = v5;
  v16 = v32.i64[1];
  if (v32.i64[1] >= (unint64_t)v33)
  {
    v18 = (v32.i64[1] - v32.i64[0]) >> 4;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (uint64_t)&v33[-v32.i64[0]] >> 3;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if ((unint64_t)&v33[-v32.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v37 = &v33;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v20);
    v23 = &v21[16 * v18];
    *(_OWORD *)v23 = v31;
    v24 = (_QWORD *)v32.i64[1];
    v25 = (_QWORD *)v32.i64[0];
    if (v32.i64[1] == v32.i64[0])
    {
      v28 = vdupq_n_s64(v32.u64[1]);
      v26 = &v21[16 * v18];
    }
    else
    {
      v26 = &v21[16 * v18];
      do
      {
        v27 = *((_OWORD *)v24 - 1);
        v24 -= 2;
        *((_OWORD *)v26 - 1) = v27;
        v26 -= 16;
        *v24 = 0;
        v24[1] = 0;
      }
      while (v24 != v25);
      v28 = v32;
    }
    v17 = v23 + 16;
    v32.i64[0] = (uint64_t)v26;
    v32.i64[1] = (uint64_t)(v23 + 16);
    v35 = v28;
    v29 = v33;
    v33 = &v21[16 * v22];
    v36 = v29;
    v34 = (void **)v28.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    *(_OWORD *)v32.i64[1] = v31;
    v17 = (_OWORD *)(v16 + 16);
  }
  v30 = v33;
  v32.i64[1] = (uint64_t)v17;
  v33 = 0;
  *a2 = v32;
  a2[1].i64[0] = (uint64_t)v30;
  v32 = 0uLL;
  v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

void sub_191323050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a13 = (void **)&a15;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void rule_fuse_bn_conv::~rule_fuse_bn_conv(rule_fuse_bn_conv *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void rule_fuse_bn_conv::transform(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  std::string *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  const std::string::value_type *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  _DWORD *v43;
  float *v44;
  float *v45;
  float v46;
  float v47;
  double v48;
  float v49;
  float v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t i;
  unint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t *v122;
  uint64_t v123;
  size_t v124;
  void *v125;
  const void *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151[3];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  std::__shared_weak_count *v156;
  char v157;
  void *v158;
  std::__shared_weak_count *v159;
  char v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  _BYTE __p[20];
  uint64_t v164;
  uint64_t v165;
  std::string *v166[3];
  std::string *v167[3];
  uint64_t v168[2];
  uint64_t v169;
  std::__shared_weak_count *v170;
  std::string *v171[3];
  std::string *v172[3];
  uint64_t v173[2];
  uint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  _QWORD v178[2];
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  __int128 v189;
  std::string *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  char *v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  std::string **v205;

  v4 = *a3;
  if (*a3)
  {
    v5 = a3[1];
    v203 = *a3;
    v204 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    v203 = 0;
    v204 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(&v201, v4, __p);
  if (SBYTE3(v164) < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "bn");
  v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v4 + 40, __p);
  if ((_QWORD *)(v4 + 48) != v8
    && (v9 = v8, (v10 = (const void *)v8[8]) != 0)
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[9];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (char *)operator new(0xA8uLL);
    v17 = (std::string *)v16;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &off_1E2DB6C40;
    *((_DWORD *)v16 + 6) = 0;
    *((_OWORD *)v16 + 2) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    *((_OWORD *)v16 + 9) = 0u;
    *((_QWORD *)v16 + 20) = 0;
    v199 = v16 + 24;
    v200 = (std::__shared_weak_count *)v16;
    if (v13)
    {
      v18 = (unint64_t *)&v13->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = (std::__shared_weak_count *)*((_QWORD *)v16 + 5);
      *((_QWORD *)v16 + 4) = v12;
      *((_QWORD *)v16 + 5) = v13;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    else
    {
      *((_QWORD *)v16 + 4) = v12;
      *((_QWORD *)v16 + 5) = 0;
    }
    std::string::operator=(v17 + 2, (const std::string *)(v9 + 10));
    if (v17 != (std::string *)(v9 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v17[4], (std::string *)v9[16], (std::string *)v9[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[17] - v9[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v17[5], (std::string *)v9[19], (std::string *)v9[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[20] - v9[19]) >> 3));
    }
    std::string::operator=(v17 + 3, (const std::string *)(v9 + 13));
    LODWORD(v17[1].__r_.__value_.__l.__data_) = *((_DWORD *)v9 + 14);
    std::string::operator=(v17 + 6, (const std::string *)(v9 + 22));
    if (v13)
    {
      v149 = (unint64_t *)&v13->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v199 = 0;
    v200 = 0;
  }
  if (SBYTE3(v164) < 0)
    operator delete(*(void **)__p);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)v199 + 1) + 408))(&v197);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v195, *(_DWORD *)(v197 + 8), 1, 1, 1);
  v23 = v195;
  memcpy(*(void **)(v195 + 16), *(const void **)(v197 + 16), 4 * *(int *)(v197 + 8));
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v201 + 8) + 448))(&v193);
  if (*(_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v199 + 1) + 384))(*((_QWORD *)v199 + 1)) + 28))
    v24 = 1;
  else
    v24 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v199 + 1) + 384))(*((_QWORD *)v199 + 1)) + 24) != 0;
  v191 = 0;
  v192 = 0;
  v190 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v190, *((_QWORD *)v199 + 9), *((_QWORD *)v199 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v199 + 10) - *((_QWORD *)v199 + 9)) >> 3));
  if (v24)
    v25 = "_pre_act";
  else
    v25 = "";
  std::string::append(v190, v25);
  std::string::operator=((std::string *)(*a2 + 56), (const std::string *)(v201 + 120));
  v26 = v201;
  v27 = *(_QWORD *)(v201 + 8);
  if (v27
  {
    v29 = v28;
    v30 = *(std::__shared_weak_count **)(v26 + 16);
    v158 = v28;
    v159 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v28 + 456))(&v155, v28);
    (*(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v29 + 448))(&v189, v29);
    if (!(_QWORD)v189)
    {
      (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v29 + 488))(__p, v29);
      v33 = *(_OWORD *)__p;
      *(_QWORD *)__p = 0;
      *(_QWORD *)&__p[8] = 0;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
      v189 = v33;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v38 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(int *)(v189 + 8);
      if ((_DWORD)v40)
        bzero(*(void **)(v189 + 16), 4 * v40);
    }
    v41 = *(unsigned int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v201 + 8) + 384))(*(_QWORD *)(v201 + 8))
                          + 40);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v187, v41, 1, 1, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v185, (int *)(v189 + 8));
    if ((int)v41 >= 1)
    {
      v42 = *(float **)(v189 + 16);
      v43 = *(_DWORD **)(v185 + 16);
      v44 = *(float **)(v187 + 24);
      v45 = (float *)(*(_QWORD *)(v195 + 16) + 8);
      do
      {
        v46 = *(v45 - 2);
        v47 = *v42++;
        v48 = *(v45 - 1);
        v49 = *v45;
        v50 = v45[1];
        v45 += 4;
        *(float *)&v48 = v48 - v46 * (float)(v49 - v47) / v50;
        *v43++ = LODWORD(v48);
        *v44++ = v46 / v50;
        --v41;
      }
      while (v41);
    }
    v181 = v158;
    v182 = v159;
    if (v159)
    {
      v51 = (unint64_t *)&v159->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v179 = v187;
    v180 = v188;
    if (v188)
    {
      v53 = (unint64_t *)&v188->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = v156;
    v178[0] = v155;
    v178[1] = v156;
    if (v156)
    {
      v56 = (unint64_t *)&v156->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    scale_deconv_weights(&v183, &v181, (uint64_t)&v179, (uint64_t)v178);
    if (v55)
    {
      v58 = (unint64_t *)&v55->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v60 = v180;
    if (v180)
    {
      v61 = (unint64_t *)&v180->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v182;
    if (v182)
    {
      v64 = (unint64_t *)&v182->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = v158;
    v176 = v183;
    v177 = v184;
    if (v184)
    {
      v67 = (unint64_t *)&v184->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v66 + 400))(v66, &v176);
    v69 = v177;
    if (v177)
    {
      v70 = (unint64_t *)&v177->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = v158;
    v174 = v185;
    v175 = v186;
    if (v186)
    {
      v73 = (unint64_t *)&v186->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v72 + 392))(v72, &v174);
    v75 = v175;
    if (v175)
    {
      v76 = (unint64_t *)&v175->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = *a2;
    v79 = *(std::__shared_weak_count **)(v201 + 16);
    v173[0] = *(_QWORD *)(v201 + 8);
    v173[1] = (uint64_t)v79;
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
    v82 = v201;
    memset(v172, 0, sizeof(v172));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v172, *(_QWORD *)(v201 + 96), *(_QWORD *)(v201 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v201 + 104) - *(_QWORD *)(v201 + 96)) >> 3));
    memset(v171, 0, sizeof(v171));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v171, (uint64_t)v190, v191, 0xAAAAAAAAAAAAAAABLL * ((v191 - (uint64_t)v190) >> 3));
    Espresso::sequential_builder::add_kernel(v78, v173, (uint64_t)__p, v82 + 24, v172, v171);
    v205 = v171;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
    v205 = v172;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
    if (SBYTE3(v164) < 0)
      operator delete(*(void **)__p);
    if (v79)
    {
      v83 = (unint64_t *)&v79->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v85 = v184;
    if (v184)
    {
      v86 = (unint64_t *)&v184->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = v186;
    if (v186)
    {
      v89 = (unint64_t *)&v186->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = v188;
    if (v188)
    {
      v92 = (unint64_t *)&v188->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
    if (*((_QWORD *)&v189 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v97 = v156;
    if (v156)
    {
      v98 = (unint64_t *)&v156->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      goto LABEL_148;
    }
  }
  else
  {
    v158 = 0;
    v159 = 0;
    if (v193)
    {
      v100 = 0;
      for (i = 0; i < *(int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 384))(v27) + 40); ++i)
      {
        v102 = (16 * (((unint64_t)(v100 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 8;
        *(float *)(*(_QWORD *)(v23 + 16) + v102) = *(float *)(*(_QWORD *)(v197 + 16) + v102)
                                                 - *(float *)(*(_QWORD *)(v193 + 16) + v100);
        v27 = *(_QWORD *)(v201 + 8);
        v100 += 4;
      }
      v27 = *(_QWORD *)(v201 + 8);
    }
    *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 384))(v27) + 112) = 1;
    v103 = *(_QWORD *)(v201 + 8);
    v169 = v23;
    v170 = v196;
    if (v196)
    {
      v104 = (unint64_t *)&v196->__shared_owners_;
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v103 + 392))(v103, &v169);
    v106 = v170;
    if (v170)
    {
      v107 = (unint64_t *)&v170->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = *a2;
    v97 = *(std::__shared_weak_count **)(v201 + 16);
    v168[0] = *(_QWORD *)(v201 + 8);
    v168[1] = (uint64_t)v97;
    if (v97)
    {
      v110 = (unint64_t *)&v97->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
    v112 = v201;
    memset(v167, 0, sizeof(v167));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v167, *(_QWORD *)(v201 + 96), *(_QWORD *)(v201 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v201 + 104) - *(_QWORD *)(v201 + 96)) >> 3));
    memset(v166, 0, sizeof(v166));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v166, (uint64_t)v190, v191, 0xAAAAAAAAAAAAAAABLL * ((v191 - (uint64_t)v190) >> 3));
    Espresso::sequential_builder::add_kernel(v109, v168, (uint64_t)__p, v112 + 24, v167, v166);
    v155 = v166;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
    v155 = v167;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
    if (SBYTE3(v164) < 0)
      operator delete(*(void **)__p);
    if (v97)
    {
      v113 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v113);
      while (__stlxr(v99 - 1, v113));
LABEL_148:
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  v114 = v159;
  if (!v159)
    goto LABEL_154;
  v115 = (unint64_t *)&v159->__shared_owners_;
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    if (!v24)
      goto LABEL_182;
  }
  else
  {
LABEL_154:
    if (!v24)
      goto LABEL_182;
  }
  *(_DWORD *)__p = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_OWORD *)&__p[4] = _D0;
  v165 = 0;
  v164 = 0;
  if (*(_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v199 + 1) + 384))(*((_QWORD *)v199 + 1)) + 28) == 1)
  {
    *(_DWORD *)__p = 0;
  }
  else if (*(_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v199 + 1) + 384))(*((_QWORD *)v199 + 1)) + 28) == 2)
  {
    *(_DWORD *)__p = 2;
    *(_DWORD *)&__p[4] = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v199 + 1) + 384))(*((_QWORD *)v199 + 1))
                                   + 36);
  }
  else if (*(_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v199 + 1) + 384))(*((_QWORD *)v199 + 1)) + 24))
  {
    *(_DWORD *)__p = 1;
  }
  v122 = (uint64_t *)*a2;
  std::string::basic_string[abi:ne180100]<0>(&v158, "activation");
  v123 = v201;
  if (*(char *)(v201 + 47) >= 0)
    v124 = *(unsigned __int8 *)(v201 + 47);
  else
    v124 = *(_QWORD *)(v201 + 32);
  v125 = &v155;
  std::string::basic_string[abi:ne180100]((uint64_t)&v155, v124 + 4);
  if (v157 < 0)
    v125 = v155;
  if (v124)
  {
    if (*(char *)(v123 + 47) >= 0)
      v126 = (const void *)(v123 + 24);
    else
      v126 = *(const void **)(v123 + 24);
    memmove(v125, v126, v124);
  }
  strcpy((char *)v125 + v124, "_act");
  v152 = 0;
  v153 = 0;
  v154 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v152, (uint64_t)v190, v191, 0xAAAAAAAAAAAAAAABLL * ((v191 - (uint64_t)v190) >> 3));
  memset(v151, 0, sizeof(v151));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v151, *((_QWORD *)v199 + 9), *((_QWORD *)v199 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v199 + 10) - *((_QWORD *)v199 + 9)) >> 3));
  Espresso::sequential_builder::add<Espresso::activation_params>(&v161, v122, (uint64_t)&v158, (uint64_t)&v155, (uint64_t)__p, v152, v153, v151);
  v127 = v162;
  if (v162)
  {
    v128 = (unint64_t *)&v162->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  *(_QWORD *)&v189 = v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
  *(_QWORD *)&v189 = &v152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
  if (v157 < 0)
    operator delete(v155);
  if (v160 < 0)
    operator delete(v158);
LABEL_182:
  v130 = *a2;
  if (*(char *)(*a2 + 79) < 0)
  {
    **(_BYTE **)(v130 + 56) = 0;
    *(_QWORD *)(v130 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(v130 + 56) = 0;
    *(_BYTE *)(v130 + 79) = 0;
  }
  *(_QWORD *)__p = &v190;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v131 = v194;
  if (v194)
  {
    v132 = (unint64_t *)&v194->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v196;
  if (v196)
  {
    v135 = (unint64_t *)&v196->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v198;
  if (v198)
  {
    v138 = (unint64_t *)&v198->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v200;
  if (v200)
  {
    v141 = (unint64_t *)&v200->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v202;
  if (v202)
  {
    v144 = (unint64_t *)&v202->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v204;
  if (v204)
  {
    v147 = (unint64_t *)&v204->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
}

void sub_191324070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  uint64_t v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  __p = (void *)(v23 - 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 88);
  _Unwind_Resume(a1);
}

void rule_fuse_bn_conv::match(_QWORD *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  _QWORD *v24;
  _BOOL4 v25;
  int v26;
  uint64_t **v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[2];
  void *v34[2];
  char v35;
  _QWORD v36[2];
  void *__p[2];
  char v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  int v41;
  void **v42;

  v41 = a2;
  v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  v7 = (std::__shared_weak_count *)a1[4];
  v36[0] = a1[3];
  v36[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>((uint64_t)&v39, v6, __p, v36, a2);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v38 < 0)
    operator delete(__p[0]);
  v12 = v39;
  if (!v39)
  {
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_37;
    v16 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v16);
    while (__stlxr(v15 - 1, v16));
    goto LABEL_35;
  }
  if (*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v39 + 384))(v39) + 24))
  {
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_37;
    v14 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_35:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_37;
  }
  if (*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v12 + 384))(v12) + 28))
  {
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_37;
    v17 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v17);
    while (__stlxr(v15 - 1, v17));
    goto LABEL_35;
  }
  if (*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v12 + 384))(v12) + 60) != -1)
  {
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_37;
    v18 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v18);
    while (__stlxr(v15 - 1, v18));
    goto LABEL_35;
  }
  if (*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v12 + 384))(v12) + 112))
  {
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_37;
    v19 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v19);
    while (__stlxr(v15 - 1, v19));
    goto LABEL_35;
  }
  (*(void (**)(void **__return_ptr, _QWORD *))(*v12 + 456))(__p, v12);
  v23 = __p[0];
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
  if (!v23)
    goto LABEL_62;
  std::string::basic_string[abi:ne180100]<0>(__p, "is_output");
  v24 = v12 + 30;
  if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v24, (unsigned __int8 *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(v34, "is_output");
    v42 = v34;
    v25 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v24, (unsigned __int8 *)v34, (uint64_t)&std::piecewise_construct, (__int128 **)&v42)+ 10) != 0;
    if (v35 < 0)
      operator delete(v34[0]);
  }
  else
  {
    v25 = 0;
  }
  if (v38 < 0)
    operator delete(__p[0]);
  if (!v25
    && (v26 = v41,
        v27 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), v41, &v41), (char *)v27[6] - (char *)v27[5] == 4))
  {
    v28 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), v26, &v41)[5];
    v29 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "bn");
    v30 = a1[4];
    v33[0] = a1[3];
    v33[1] = v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_batchnorm_kernel>((uint64_t)v34, v29, __p, v33, v28);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v33);
    if (v38 < 0)
      operator delete(__p[0]);
    if (!v34[0]
      || *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v34[0] + 384))(v34[0]) + 4)
      || *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v34[0] + 384))(v34[0]) + 8))
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    }
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v34);
  }
  else
  {
LABEL_62:
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
  }
LABEL_37:
  v20 = v40;
  if (v40)
  {
    v21 = (unint64_t *)&v40->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19132476C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v16 = *a4;
  v17 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *((_DWORD *)i + 10) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_191324A40(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

_BYTE *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_batchnorm_kernel>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *result;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29[4];
  std::__shared_weak_count *v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  char v38;
  __int128 v39;
  int v40;
  void **v41;

  v40 = a5;
  v10 = *a4;
  v11 = *(_QWORD *)(*(_QWORD *)(*a4 + 32) + 16 * a5);
  result = *(_BYTE **)(v11 + 64);
  if (result
  {
    v13 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)&v39 = result;
    *((_QWORD *)&v39 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *a4;
    }
    v16 = (std::__shared_weak_count *)a4[1];
    v27 = v10;
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(v29, (uint64_t)&v27, a5);
    v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v19 + 7), (uint64_t)v29);
    if (v38 < 0)
      operator delete(__p);
    v41 = (void **)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v28;
    if (v28)
    {
      v24 = (unint64_t *)&v28->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v40;
    if (v40 == -1)
      *(_DWORD *)(a2 + 8) = -1;
    result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), v26, &v40);
    result[32] = 1;
    *(_OWORD *)a1 = v39;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

void sub_191324C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::activation_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191324E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6C40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_batchnorm_kernel>>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<rule_fuse_bn_conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_fuse_bn_conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_fuse_bn_conv>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN8Espresso26optimize_network_with_ruleI28rule_fuse_bias_inner_productEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, int64x2_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  char *v33;
  void **v34;
  int64x2_t v35;
  char *v36;
  char **v37;
  void **v38;
  std::__shared_weak_count *v39;

  v32 = 0uLL;
  v33 = 0;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB5890;
  v6 = v4 + 3;
  v7 = *(void ***)a1;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  v38 = v7;
  v39 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v34 = v7;
    v35.i64[0] = (uint64_t)v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v34 = v7;
    v35.i64[0] = 0;
  }
  Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *v6 = &off_1E2D57900;
  if (v39)
  {
    v14 = &v39->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = v5;
  v16 = v32.i64[1];
  if (v32.i64[1] >= (unint64_t)v33)
  {
    v18 = (v32.i64[1] - v32.i64[0]) >> 4;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (uint64_t)&v33[-v32.i64[0]] >> 3;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if ((unint64_t)&v33[-v32.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v37 = &v33;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v20);
    v23 = &v21[16 * v18];
    *(_OWORD *)v23 = v31;
    v24 = (_QWORD *)v32.i64[1];
    v25 = (_QWORD *)v32.i64[0];
    if (v32.i64[1] == v32.i64[0])
    {
      v28 = vdupq_n_s64(v32.u64[1]);
      v26 = &v21[16 * v18];
    }
    else
    {
      v26 = &v21[16 * v18];
      do
      {
        v27 = *((_OWORD *)v24 - 1);
        v24 -= 2;
        *((_OWORD *)v26 - 1) = v27;
        v26 -= 16;
        *v24 = 0;
        v24[1] = 0;
      }
      while (v24 != v25);
      v28 = v32;
    }
    v17 = v23 + 16;
    v32.i64[0] = (uint64_t)v26;
    v32.i64[1] = (uint64_t)(v23 + 16);
    v35 = v28;
    v29 = v33;
    v33 = &v21[16 * v22];
    v36 = v29;
    v34 = (void **)v28.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    *(_OWORD *)v32.i64[1] = v31;
    v17 = (_OWORD *)(v16 + 16);
  }
  v30 = v33;
  v32.i64[1] = (uint64_t)v17;
  v33 = 0;
  *a2 = v32;
  a2[1].i64[0] = (uint64_t)v30;
  v32 = 0uLL;
  v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

void sub_19132524C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a13 = (void **)&a15;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void rule_fuse_bias_inner_product::~rule_fuse_bias_inner_product(rule_fuse_bias_inner_product *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void rule_fuse_bias_inner_product::transform(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float v34;
  std::string::size_type size;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string *v71[3];
  std::string *v72[3];
  uint64_t v73[2];
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  char v84;
  std::string *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string **v89;

  v4 = *a3;
  if (*a3)
  {
    v5 = a3[1];
    v87 = *a3;
    v88 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    v87 = 0;
    v88 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v83, "inner_product");
  v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v4 + 40, &v83);
  if ((_QWORD *)(v4 + 48) != v8
    && (v9 = v8, (v10 = (const void *)v8[8]) != 0)
  {
    v12 = (uint64_t)v11;
    v13 = (std::__shared_weak_count *)v9[9];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (std::string *)operator new(0xA8uLL);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB6CE8;
    LODWORD(v16[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v16[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v16[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v16[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v16[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v16[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v16[6].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v16[2].__r_.__value_.__l.__data_ = 0u;
    v16[6].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v16[1].__r_.__value_.__r.__words[1] = 0u;
    v85 = v16 + 1;
    v86 = (std::__shared_weak_count *)v16;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v16[1].__r_.__value_.__l.__size_, v12, (uint64_t)v13);
    std::string::operator=(v16 + 2, (const std::string *)(v9 + 10));
    if (v16 != (std::string *)(v9 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v16[4], (std::string *)v9[16], (std::string *)v9[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[17] - v9[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v16[5], (std::string *)v9[19], (std::string *)v9[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[20] - v9[19]) >> 3));
    }
    std::string::operator=(v16 + 3, (const std::string *)(v9 + 13));
    LODWORD(v16[1].__r_.__value_.__l.__data_) = *((_DWORD *)v9 + 14);
    std::string::operator=(v16 + 6, (const std::string *)(v9 + 22));
    if (v13)
    {
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v85 = 0;
    v86 = 0;
  }
  if (v84 < 0)
    operator delete((void *)v83);
  std::string::basic_string[abi:ne180100]<0>(&v83, "bias");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_elementwise_kernel>(&v81, v4, &v83);
  if (v84 < 0)
    operator delete((void *)v83);
  std::string::basic_string[abi:ne180100]<0>(&v83, "const");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_load_constant_kernel>(&v79, v4, &v83);
  if (v84 < 0)
    operator delete((void *)v83);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v85->__r_.__value_.__l.__size_ + 408))(&v78);
  if (!(_QWORD)v78)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v85->__r_.__value_.__l.__size_ + 432))(&v83);
    v19 = v83;
    v83 = 0uLL;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    v78 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = *(int *)(v78 + 8);
    if ((_DWORD)v26)
      bzero(*(void **)(v78 + 16), 4 * v26);
  }
  v27 = *(_QWORD *)(v79 + 8);
  v28 = *(_QWORD *)(v27 + 344);
  if (v28 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28))
  {
    v67 = *(_QWORD *)(v27 + 344);
    v29 = *(_QWORD *)(v67 + 160);
    v68 = *(std::__shared_weak_count **)(v67 + 168);
    v76 = v29;
    v77 = v68;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
  }
  else
  {
    v29 = 0;
    v76 = 0;
    v77 = 0;
  }
  v30 = v78;
  v31 = *(unsigned int *)(v78 + 8);
  if ((_DWORD)v31)
  {
    v32 = *(float **)(v29 + 24);
    v33 = *(float **)(v78 + 16);
    do
    {
      v34 = *v32++;
      *v33 = v34 + *v33;
      ++v33;
      --v31;
    }
    while (v31);
  }
  size = v85->__r_.__value_.__l.__size_;
  v74 = v30;
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)size + 392))(size, &v74);
  v38 = v75;
  if (v75)
  {
    v39 = (unint64_t *)&v75->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  std::string::operator=((std::string *)(*a2 + 56), v85 + 5);
  v41 = *a2;
  v42 = (std::__shared_weak_count *)v85->__r_.__value_.__r.__words[2];
  v73[0] = v85->__r_.__value_.__l.__size_;
  v73[1] = (uint64_t)v42;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  std::string::basic_string[abi:ne180100]<0>(&v83, "inner_product");
  v45 = v85;
  memset(v72, 0, sizeof(v72));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v72, (uint64_t)v85[4].__r_.__value_.__l.__data_, v85[4].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85[4].__r_.__value_.__l.__size_ - v85[4].__r_.__value_.__r.__words[0]) >> 3));
  memset(v71, 0, sizeof(v71));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v71, *(_QWORD *)(v81 + 72), *(_QWORD *)(v81 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v81 + 80) - *(_QWORD *)(v81 + 72)) >> 3));
  Espresso::sequential_builder::add_kernel(v41, v73, (uint64_t)&v83, (uint64_t)&v45[1], v72, v71);
  v89 = v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  v89 = v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  if (v84 < 0)
    operator delete((void *)v83);
  if (v42)
  {
    v46 = (unint64_t *)&v42->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v48 = *a2;
  if (*(char *)(*a2 + 79) < 0)
  {
    **(_BYTE **)(v48 + 56) = 0;
    *(_QWORD *)(v48 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(v48 + 56) = 0;
    *(_BYTE *)(v48 + 79) = 0;
  }
  v49 = v77;
  if (v77)
  {
    v50 = (unint64_t *)&v77->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v80;
  if (v80)
  {
    v56 = (unint64_t *)&v80->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v82;
  if (v82)
  {
    v59 = (unint64_t *)&v82->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v86;
  if (v86)
  {
    v62 = (unint64_t *)&v86->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v88;
  if (v88)
  {
    v65 = (unint64_t *)&v88->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
}

void sub_1913259D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (*(char *)(v2 - 105) < 0)
    operator delete(*(void **)(v2 - 128));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 88);
  _Unwind_Resume(a1);
}

void rule_fuse_bias_inner_product::match(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t **v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  int v78;
  _QWORD v79[2];
  _QWORD v80[3];
  std::__shared_weak_count *v81;
  void *v82[2];
  char v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  void *v90;
  char v91;
  void *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  void *__p;
  char v97;
  __int128 v98;
  int v99;
  void **v100;

  v85 = a2;
  v6 = *(_QWORD *)a3;
  std::string::basic_string[abi:ne180100]<0>(v82, "inner_product");
  v8 = a1[3];
  v7 = (std::__shared_weak_count *)a1[4];
  v80[2] = v8;
  v81 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v99 = a2;
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 16 * a2);
  v12 = *(const void **)(v11 + 64);
  if (!v12
  {
    v84 = 0uLL;
    if (!v7)
      goto LABEL_37;
    goto LABEL_33;
  }
  v14 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v98 = v13;
  *((_QWORD *)&v98 + 1) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v86 = v8;
  v87 = v7;
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v88, (uint64_t)&v86, a2);
  v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 40), v82, (uint64_t)v82);
  Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v19 + 7), (uint64_t)&v88);
  if (v97 < 0)
    operator delete(__p);
  v100 = (void **)&v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v100);
  v100 = (void **)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v100);
  if (v93 < 0)
    operator delete(v92);
  if (v91 < 0)
    operator delete(v90);
  v20 = v89;
  if (v89)
  {
    v21 = (unint64_t *)&v89->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v87;
  if (v87)
  {
    v24 = (unint64_t *)&v87->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v99;
  if (v99 == -1)
    *(_DWORD *)(v6 + 8) = -1;
  *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v6 + 16), v26, &v99)+ 32) = 1;
  v84 = v98;
  v7 = v81;
  if (v81)
  {
LABEL_33:
    v27 = (unint64_t *)&v7->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_37:
  if (v83 < 0)
    operator delete(v82[0]);
  v29 = v84;
  if (!(_QWORD)v84)
  {
    v88 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v88);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (!*((_QWORD *)&v88 + 1))
      goto LABEL_55;
    v36 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v35 = __ldaxr(v36);
    while (__stlxr(v35 - 1, v36));
    goto LABEL_53;
  }
  v30 = v85;
  v31 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), v85, &v85);
  if ((char *)v31[6] - (char *)v31[5] != 4)
  {
    v88 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v88);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (!*((_QWORD *)&v88 + 1))
      goto LABEL_55;
    v37 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v35 = __ldaxr(v37);
    while (__stlxr(v35 - 1, v37));
    goto LABEL_53;
  }
  v32 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), v30, &v85)[5];
  LODWORD(v86) = v32;
  if (!*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 384))(v29) + 16))
  {
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 384))(v29) + 12))
    {
      v88 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v88);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (!*((_QWORD *)&v88 + 1))
        goto LABEL_55;
      v41 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v35 = __ldaxr(v41);
      while (__stlxr(v35 - 1, v41));
      goto LABEL_53;
    }
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 384))(v29) + 52) != -1)
    {
      v88 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v88);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (!*((_QWORD *)&v88 + 1))
        goto LABEL_55;
      v42 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v35 = __ldaxr(v42);
      while (__stlxr(v35 - 1, v42));
      goto LABEL_53;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v29 + 416))(&v88, v29);
    v43 = v88;
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v88);
    if (!v43)
    {
      v88 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v88);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v88);
      goto LABEL_55;
    }
    v44 = *(_QWORD *)a3;
    std::string::basic_string[abi:ne180100]<0>(&v88, "bias");
    v45 = a1[4];
    v80[0] = a1[3];
    v80[1] = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_elementwise_kernel>(v82, v44, &v88, v80, v32, &__block_literal_global_64);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v80);
    if (SHIBYTE(v89) < 0)
      operator delete((void *)v88);
    if (!v82[0]
      || (v48 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v32, &v86), (char *)v48[6] - (char *)v48[5] != 8)|| *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v32, &v86)[5] != v30)
    {
      v88 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v88);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v88);
      goto LABEL_92;
    }
    v49 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v32, &v86)[5]+ 1);
    v50 = *(_QWORD *)a3;
    std::string::basic_string[abi:ne180100]<0>(&v88, "const");
    v51 = a1[4];
    v79[0] = a1[3];
    v79[1] = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_load_constant_kernel>((uint64_t)&v98, v50, &v88, v79, v49);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v79);
    if (SHIBYTE(v89) < 0)
      operator delete((void *)v88);
    v54 = v98;
    if ((_QWORD)v98)
    {
      v55 = *(_QWORD *)(v98 + 344);
      if (v55 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55))
      {
        v56 = *(_QWORD *)(v54 + 344);
        v58 = *(_QWORD *)(v56 + 160);
        v57 = *(_QWORD *)(v56 + 168);
        *(_QWORD *)&v88 = v58;
        *((_QWORD *)&v88 + 1) = v57;
        if (v57)
        {
          v59 = (unint64_t *)(v57 + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v88);
        if (v58)
        {
          v61 = v98;
          (*(void (**)(_QWORD))(**(_QWORD **)(v98 + 344) + 32))(*(_QWORD *)(v98 + 344));
          v62 = *(_QWORD *)(v61 + 344);
          v64 = *(_QWORD *)(v62 + 160);
          v63 = *(_QWORD *)(v62 + 168);
          *(_QWORD *)&v88 = v64;
          *((_QWORD *)&v88 + 1) = v63;
          if (v63)
          {
            v65 = (unint64_t *)(v63 + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          v67 = 0;
          v68 = *(int *)(v64 + 8);
          v69 = v64 + 12;
          do
          {
            v68 *= *(int *)(v69 + v67);
            v67 += 4;
          }
          while (v67 != 12);
          v70 = *(unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 384))(v29);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v88);
          if (v68 == v70)
          {
            v71 = v98;
            (*(void (**)(_QWORD))(**(_QWORD **)(v98 + 344) + 32))(*(_QWORD *)(v98 + 344));
            v72 = *(_QWORD *)(v71 + 344);
            v73 = *(_QWORD *)(v72 + 160);
            v74 = *(_QWORD *)(v72 + 168);
            *(_QWORD *)&v88 = v73;
            *((_QWORD *)&v88 + 1) = v74;
            if (v74)
            {
              v75 = (unint64_t *)(v74 + 8);
              do
                v76 = __ldxr(v75);
              while (__stxr(v76 + 1, v75));
            }
            v77 = *(_DWORD *)(v73 + 16);
            v78 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 384))(v29);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v88);
            if (v77 == v78 && *(_QWORD *)(*(_QWORD *)a3 + 56) == 3)
              goto LABEL_90;
          }
        }
      }
      else
      {
        v88 = 0uLL;
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v88);
      }
    }
    v88 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v88);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v88);
LABEL_90:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v98);
LABEL_92:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v82);
    goto LABEL_55;
  }
  v88 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v88);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (!*((_QWORD *)&v88 + 1))
    goto LABEL_55;
  v34 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
LABEL_53:
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_55:
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_19132627C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

BOOL ___ZN28rule_fuse_bias_inner_product5matchEiRNSt3__110shared_ptrIN8Espresso30graph_optimization_rule_statusEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2) == 5
      || *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2) == 0;
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_inner_product_kernel>>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<rule_fuse_bias_inner_product>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_fuse_bias_inner_product>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_fuse_bias_inner_product>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN8Espresso26optimize_network_with_ruleI19rule_fuse_bias_convEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, int64x2_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  char *v33;
  void **v34;
  int64x2_t v35;
  char *v36;
  char **v37;
  void **v38;
  std::__shared_weak_count *v39;

  v32 = 0uLL;
  v33 = 0;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB5778;
  v6 = v4 + 3;
  v7 = *(void ***)a1;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  v38 = v7;
  v39 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v34 = v7;
    v35.i64[0] = (uint64_t)v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v34 = v7;
    v35.i64[0] = 0;
  }
  Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *v6 = &off_1E2D56CE0;
  if (v39)
  {
    v14 = &v39->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = v5;
  v16 = v32.i64[1];
  if (v32.i64[1] >= (unint64_t)v33)
  {
    v18 = (v32.i64[1] - v32.i64[0]) >> 4;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (uint64_t)&v33[-v32.i64[0]] >> 3;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if ((unint64_t)&v33[-v32.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v37 = &v33;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v20);
    v23 = &v21[16 * v18];
    *(_OWORD *)v23 = v31;
    v24 = (_QWORD *)v32.i64[1];
    v25 = (_QWORD *)v32.i64[0];
    if (v32.i64[1] == v32.i64[0])
    {
      v28 = vdupq_n_s64(v32.u64[1]);
      v26 = &v21[16 * v18];
    }
    else
    {
      v26 = &v21[16 * v18];
      do
      {
        v27 = *((_OWORD *)v24 - 1);
        v24 -= 2;
        *((_OWORD *)v26 - 1) = v27;
        v26 -= 16;
        *v24 = 0;
        v24[1] = 0;
      }
      while (v24 != v25);
      v28 = v32;
    }
    v17 = v23 + 16;
    v32.i64[0] = (uint64_t)v26;
    v32.i64[1] = (uint64_t)(v23 + 16);
    v35 = v28;
    v29 = v33;
    v33 = &v21[16 * v22];
    v36 = v29;
    v34 = (void **)v28.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    *(_OWORD *)v32.i64[1] = v31;
    v17 = (_OWORD *)(v16 + 16);
  }
  v30 = v33;
  v32.i64[1] = (uint64_t)v17;
  v33 = 0;
  *a2 = v32;
  a2[1].i64[0] = (uint64_t)v30;
  v32 = 0uLL;
  v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

void sub_191326720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a13 = (void **)&a15;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void rule_fuse_bias_conv::~rule_fuse_bias_conv(rule_fuse_bias_conv *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void rule_fuse_bias_conv::transform(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::string *v77[3];
  std::string *v78[3];
  uint64_t v79[2];
  std::string *v80[3];
  std::string *v81[3];
  uint64_t v82[2];
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  char v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string **v100;

  v4 = *a3;
  if (*a3)
  {
    v5 = a3[1];
    v98 = *a3;
    v99 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    v98 = 0;
    v99 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v94, "conv");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(&v96, v4, &v94);
  if (v95 < 0)
    operator delete((void *)v94);
  std::string::basic_string[abi:ne180100]<0>(&v94, "bias");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_elementwise_kernel>(&v92, v4, &v94);
  if (v95 < 0)
    operator delete((void *)v94);
  std::string::basic_string[abi:ne180100]<0>(&v94, "const");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_load_constant_kernel>(&v90, v4, &v94);
  if (v95 < 0)
    operator delete((void *)v94);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v96 + 8) + 448))(&v89);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v96 + 8) + 488))(&v87);
  if (!(_QWORD)v89)
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v96 + 8) + 488))(&v94);
    v8 = v94;
    v94 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
    v89 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
    if (*((_QWORD *)&v94 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(int *)(v89 + 8);
    if ((_DWORD)v15)
      bzero(*(void **)(v89 + 16), 4 * v15);
  }
  v16 = *(_QWORD *)(v90 + 8);
  v17 = *(_QWORD *)(v16 + 344);
  if (v17 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17))
  {
    v73 = *(_QWORD *)(v16 + 344);
    v18 = *(_QWORD *)(v73 + 160);
    v74 = *(std::__shared_weak_count **)(v73 + 168);
    v85 = v18;
    v86 = v74;
    if (v74)
    {
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
  }
  else
  {
    v18 = 0;
    v85 = 0;
    v86 = 0;
  }
  v19 = *(unsigned int *)(v89 + 8);
  v20 = v87;
  if ((_DWORD)v19)
  {
    v21 = *(float **)(v89 + 16);
    v22 = *(float **)(v18 + 24);
    v23 = *(float **)(v87 + 16);
    do
    {
      v24 = *v21++;
      v25 = v24;
      v26 = *v22++;
      *v23++ = v25 + v26;
      --v19;
    }
    while (v19);
  }
  v27 = *(_QWORD *)(v96 + 8);
  v83 = v20;
  v84 = v88;
  if (v88)
  {
    v28 = (unint64_t *)&v88->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 392))(v27, &v83);
  v30 = v84;
  if (v84)
  {
    v31 = (unint64_t *)&v84->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::string::operator=((std::string *)(*a2 + 56), (const std::string *)(v96 + 120));
  v33 = v96;
  v34 = *(_QWORD *)(v96 + 8);
  if (v34
  {
    v35 = *(std::__shared_weak_count **)(v33 + 16);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v39 = *a2;
    v40 = *(std::__shared_weak_count **)(v96 + 16);
    v82[0] = *(_QWORD *)(v96 + 8);
    v82[1] = (uint64_t)v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, "deconvolution");
    v43 = v96;
    memset(v81, 0, sizeof(v81));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v81, *(_QWORD *)(v96 + 96), *(_QWORD *)(v96 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v96 + 104) - *(_QWORD *)(v96 + 96)) >> 3));
    memset(v80, 0, sizeof(v80));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v80, *(_QWORD *)(v92 + 72), *(_QWORD *)(v92 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v92 + 80) - *(_QWORD *)(v92 + 72)) >> 3));
    Espresso::sequential_builder::add_kernel(v39, v82, (uint64_t)&v94, v43 + 24, v81, v80);
    v100 = v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    v100 = v81;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if (v95 < 0)
      operator delete((void *)v94);
    if (v40)
    {
      v44 = (unint64_t *)&v40->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      goto LABEL_65;
    }
  }
  else
  {
    v46 = *a2;
    v40 = *(std::__shared_weak_count **)(v33 + 16);
    v79[0] = v34;
    v79[1] = (uint64_t)v40;
    if (v40)
    {
      v47 = (unint64_t *)&v40->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, "convolution");
    v49 = v96;
    memset(v78, 0, sizeof(v78));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v78, *(_QWORD *)(v96 + 96), *(_QWORD *)(v96 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v96 + 104) - *(_QWORD *)(v96 + 96)) >> 3));
    memset(v77, 0, sizeof(v77));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v77, *(_QWORD *)(v92 + 72), *(_QWORD *)(v92 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v92 + 80) - *(_QWORD *)(v92 + 72)) >> 3));
    Espresso::sequential_builder::add_kernel(v46, v79, (uint64_t)&v94, v49 + 24, v78, v77);
    v100 = v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    v100 = v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if (v95 < 0)
      operator delete((void *)v94);
    if (v40)
    {
      v50 = (unint64_t *)&v40->__shared_owners_;
      do
        v45 = __ldaxr(v50);
      while (__stlxr(v45 - 1, v50));
LABEL_65:
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  v51 = *a2;
  if (*(char *)(*a2 + 79) < 0)
  {
    **(_BYTE **)(v51 + 56) = 0;
    *(_QWORD *)(v51 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(v51 + 56) = 0;
    *(_BYTE *)(v51 + 79) = 0;
  }
  v52 = v86;
  if (v86)
  {
    v53 = (unint64_t *)&v86->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v88;
  if (v88)
  {
    v56 = (unint64_t *)&v88->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v91;
  if (v91)
  {
    v62 = (unint64_t *)&v91->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v93;
  if (v93)
  {
    v65 = (unint64_t *)&v93->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v97;
  if (v97)
  {
    v68 = (unint64_t *)&v97->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v99;
  if (v99)
  {
    v71 = (unint64_t *)&v99->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_191326EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 56) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 56));
  *(_QWORD *)(v30 - 56) = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 56));
  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 88);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 72);
  _Unwind_Resume(a1);
}

void sub_191327000()
{
  JUMPOUT(0x191326FD0);
}

void sub_191327008()
{
  JUMPOUT(0x191326FD8);
}

void sub_191327010()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x191326FE0);
}

void sub_191327028()
{
  JUMPOUT(0x191326FE0);
}

void sub_191327030()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x191326FE8);
}

void sub_191327048()
{
  JUMPOUT(0x191326FE8);
}

void sub_191327050()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x191326FF0);
}

void sub_191327068()
{
  JUMPOUT(0x191326FF0);
}

void rule_fuse_bias_conv::match(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  int v24;
  uint64_t **v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  int *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  int v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  int v66;
  _QWORD v67[2];
  void *__p[2];
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  int v72;

  v72 = a2;
  v6 = *(_QWORD *)a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  v7 = (std::__shared_weak_count *)a1[4];
  v67[0] = a1[3];
  v67[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>((uint64_t)&v70, v6, __p, v67, a2);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v69 < 0)
    operator delete(__p[0]);
  v12 = v70;
  if (!v70)
  {
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_37;
    v16 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v16);
    while (__stlxr(v15 - 1, v16));
    goto LABEL_35;
  }
  if (!*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 384))(v70) + 24))
  {
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 28))
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      v13 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_37;
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v17);
      while (__stlxr(v15 - 1, v17));
      goto LABEL_35;
    }
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 60) != -1)
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      v13 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_37;
      v18 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v18);
      while (__stlxr(v15 - 1, v18));
      goto LABEL_35;
    }
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 112))
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      v13 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_37;
      v19 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v19);
      while (__stlxr(v15 - 1, v19));
      goto LABEL_35;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v12 + 456))(__p, v12);
    v23 = __p[0];
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v23
      || (v24 = v72,
          v25 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), v72, &v72), (char *)v25[6] - (char *)v25[5] != 4))
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      goto LABEL_37;
    }
    v26 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), v24, &v72)[5];
    v66 = v26;
    v27 = *(_QWORD *)a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "bias");
    v28 = a1[4];
    v64[0] = a1[3];
    v64[1] = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_elementwise_kernel>(v65, v27, __p, v64, v26, &__block_literal_global_61_432);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v64);
    if (v69 < 0)
      operator delete(__p[0]);
    if (!v65[0]
      || (v31 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v26, &v66), (char *)v31[6] - (char *)v31[5] != 8)|| *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v26, &v66)[5] != v24)
    {
      __p[0] = 0;
      __p[1] = 0;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      goto LABEL_66;
    }
    v32 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v26, &v66)[5]+ 1);
    v33 = *(_QWORD *)a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "const");
    v34 = a1[4];
    v62[0] = a1[3];
    v62[1] = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_load_constant_kernel>((uint64_t)v63, v33, __p, v62, v32);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v62);
    if (v69 < 0)
      operator delete(__p[0]);
    v37 = v63[0];
    if (v63[0])
    {
      v38 = *(_QWORD *)(v63[0] + 344);
      if (v38 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38))
      {
        v39 = *(_QWORD *)(v37 + 344);
        v41 = *(void **)(v39 + 160);
        v40 = *(unint64_t **)(v39 + 168);
        __p[0] = v41;
        __p[1] = v40;
        if (v40)
        {
          v42 = v40 + 1;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        if (v41)
        {
          v44 = v63[0];
          (*(void (**)(_QWORD))(**(_QWORD **)(v63[0] + 344) + 32))(*(_QWORD *)(v63[0] + 344));
          v45 = *(_QWORD *)(v44 + 344);
          v47 = *(int **)(v45 + 160);
          v46 = *(unint64_t **)(v45 + 168);
          __p[0] = v47;
          __p[1] = v46;
          if (v46)
          {
            v48 = v46 + 1;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          v50 = 0;
          v51 = v47[2];
          v52 = v47 + 3;
          do
            v51 *= v52[v50++];
          while (v50 != 3);
          v53 = *(int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 40);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          if (v51 == v53)
          {
            v54 = v63[0];
            (*(void (**)(_QWORD))(**(_QWORD **)(v63[0] + 344) + 32))(*(_QWORD *)(v63[0] + 344));
            v55 = *(_QWORD *)(v54 + 344);
            v56 = *(_DWORD **)(v55 + 160);
            v57 = *(unint64_t **)(v55 + 168);
            __p[0] = v56;
            __p[1] = v57;
            if (v57)
            {
              v58 = v57 + 1;
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
            }
            v60 = v56[4];
            v61 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) + 40);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            if (v60 == v61 && *(_QWORD *)(*(_QWORD *)a3 + 56) == 3)
              goto LABEL_63;
          }
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__p);
LABEL_63:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v63);
LABEL_66:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v65);
    goto LABEL_37;
  }
  __p[0] = 0;
  __p[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__p);
  v13 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_37;
  v14 = (unint64_t *)((char *)__p[1] + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
LABEL_35:
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_37:
  v20 = v71;
  if (v71)
  {
    v21 = (unint64_t *)&v71->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_191327644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 72);
  _Unwind_Resume(a1);
}

BOOL ___ZN19rule_fuse_bias_conv5matchEiRNSt3__110shared_ptrIN8Espresso30graph_optimization_rule_statusEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2) == 5
      || *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2) == 0;
}

void std::__shared_ptr_emplace<rule_fuse_bias_conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_fuse_bias_conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_fuse_bias_conv>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void Espresso::optimize_mlkit(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _OWORD v8[3];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *__p_8[2];
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16;

  v2 = (std::__shared_weak_count *)a1[1];
  v14 = *a1;
  v15 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  *(_QWORD *)((char *)v8 + 4) = 1109393408;
  *(_DWORD *)((char *)v8 + 11) = 0;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)__p_8 = 0u;
  v13 = 4096;
  Espresso::auto_optimize((uint64_t)&v14, (uint64_t)v8, a2);
  if (SHIBYTE(__p_8[1]) < 0)
    operator delete(*((void **)&v11 + 1));
  v16 = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
  v5 = v15;
  if (v15)
  {
    v6 = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1913278BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  Espresso::auto_optimize_options::~auto_optimize_options(&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9 - 40);
  _Unwind_Resume(a1);
}

void Espresso::auto_optimize_options::~auto_optimize_options(void **this)
{
  void **v2;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void Espresso::add_auto_context_transfers(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  v19 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(std::__shared_weak_count **)(v2 + 24);
  v21 = *(_QWORD *)(v2 + 16);
  v22 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 12);
  v20[0] = v2;
  v20[1] = v3;
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::optimize_network(&v21, v9, (uint64_t)v20, &__block_literal_global_72_433, a2);
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v19)
  {
    v17 = (unint64_t *)&v19->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_191327A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso26optimize_network_with_ruleI31rule_add_auto_context_transfersEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, int64x2_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  char *v33;
  void **v34;
  int64x2_t v35;
  char *v36;
  char **v37;
  void **v38;
  std::__shared_weak_count *v39;

  v32 = 0uLL;
  v33 = 0;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB58C8;
  v6 = v4 + 3;
  v7 = *(void ***)a1;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  v38 = v7;
  v39 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v34 = v7;
    v35.i64[0] = (uint64_t)v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v34 = v7;
    v35.i64[0] = 0;
  }
  Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *v6 = &off_1E2D57940;
  if (v39)
  {
    v14 = &v39->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = v5;
  v16 = v32.i64[1];
  if (v32.i64[1] >= (unint64_t)v33)
  {
    v18 = (v32.i64[1] - v32.i64[0]) >> 4;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (uint64_t)&v33[-v32.i64[0]] >> 3;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if ((unint64_t)&v33[-v32.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v37 = &v33;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v20);
    v23 = &v21[16 * v18];
    *(_OWORD *)v23 = v31;
    v24 = (_QWORD *)v32.i64[1];
    v25 = (_QWORD *)v32.i64[0];
    if (v32.i64[1] == v32.i64[0])
    {
      v28 = vdupq_n_s64(v32.u64[1]);
      v26 = &v21[16 * v18];
    }
    else
    {
      v26 = &v21[16 * v18];
      do
      {
        v27 = *((_OWORD *)v24 - 1);
        v24 -= 2;
        *((_OWORD *)v26 - 1) = v27;
        v26 -= 16;
        *v24 = 0;
        v24[1] = 0;
      }
      while (v24 != v25);
      v28 = v32;
    }
    v17 = v23 + 16;
    v32.i64[0] = (uint64_t)v26;
    v32.i64[1] = (uint64_t)(v23 + 16);
    v35 = v28;
    v29 = v33;
    v33 = &v21[16 * v22];
    v36 = v29;
    v34 = (void **)v28.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    *(_OWORD *)v32.i64[1] = v31;
    v17 = (_OWORD *)(v16 + 16);
  }
  v30 = v33;
  v32.i64[1] = (uint64_t)v17;
  v33 = 0;
  *a2 = v32;
  a2[1].i64[0] = (uint64_t)v30;
  v32 = 0uLL;
  v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

void sub_191327CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a13 = (void **)&a15;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void rule_add_auto_context_transfers::~rule_add_auto_context_transfers(rule_add_auto_context_transfers *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void rule_add_auto_context_transfers::transform(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  unint64_t *v15;
  unint64_t v16;
  const std::string *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  std::string *v22;
  size_t v23;
  void *v24;
  std::string *data;
  const void **v26;
  size_t v27;
  __int128 *v28;
  const void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string *v37;
  const void **v38;
  size_t v39;
  __int128 *v40;
  const void *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string *v54[3];
  std::string *v55;
  std::string *v56;
  std::string *v57;
  uint64_t v58[2];
  std::string *v59;
  std::string *v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char v66;
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 __p;
  __int128 v71;
  uint64_t size;
  uint64_t v73;
  std::string *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::string **v78;
  char v79;
  __int128 v80;
  char v81;
  __int128 v82;
  char v83;
  __int128 v84;

  *(_QWORD *)&v84 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  if (*a3)
  {
    v5 = (std::__shared_weak_count *)a3[1];
    v76 = *a3;
    v77 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v76 = 0;
    v77 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "any");
  v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v4 + 40, &__p);
  if ((_QWORD *)(v4 + 48) == v8 || (v9 = v8, (v10 = v8[8]) == 0))
  {
    v74 = 0;
    v75 = 0;
  }
  else
  {
    v11 = (std::__shared_weak_count *)v8[9];
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = (std::string *)operator new(0xA8uLL);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB6C08;
    LODWORD(v14[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v14[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v14[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v14[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v14[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v14[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v14[6].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v14[2].__r_.__value_.__l.__data_ = 0u;
    v14[6].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v14[1].__r_.__value_.__r.__words[1] = 0u;
    v74 = v14 + 1;
    v75 = (std::__shared_weak_count *)v14;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v14[1].__r_.__value_.__l.__size_, v10, (uint64_t)v11);
    std::string::operator=(v14 + 2, (const std::string *)(v9 + 10));
    if (&v14[1] != (std::string *)(v9 + 7))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v14[4], (std::string *)v9[16], (std::string *)v9[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[17] - v9[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v14[5], (std::string *)v9[19], (std::string *)v9[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[20] - v9[19]) >> 3));
    }
    std::string::operator=(v14 + 3, (const std::string *)(v9 + 13));
    LODWORD(v14[1].__r_.__value_.__l.__data_) = *((_DWORD *)v9 + 14);
    std::string::operator=(v14 + 6, (const std::string *)(v9 + 22));
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (SBYTE7(v71) < 0)
    operator delete((void *)__p);
  v17 = v74;
  if (v74)
  {
    v18 = v74->__r_.__value_.__r.__words[2];
    size = v74->__r_.__value_.__l.__size_;
    v73 = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    __p = 0u;
    v71 = 0u;
    std::string::operator=((std::string *)(*a2 + 7), v17 + 5);
    v21 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&v82, "context_transfer");
    v22 = v74;
    if ((v74[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v74[1].__r_.__value_.__r.__words[2]);
    else
      v23 = v74[1].__r_.__value_.__l.__size_;
    v24 = &v65;
    std::string::basic_string[abi:ne180100]((uint64_t)&v65, v23 + 4);
    if (v67 < 0)
      v24 = v65;
    if (v23)
    {
      if ((v22[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        data = v22 + 1;
      else
        data = (std::string *)v22[1].__r_.__value_.__l.__data_;
      memmove(v24, data, v23);
    }
    strcpy((char *)v24 + v23, "_ctx");
    v63 = 0;
    v64 = 0;
    v62 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, (uint64_t)v74[4].__r_.__value_.__l.__data_, v74[4].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74[4].__r_.__value_.__l.__size_ - v74[4].__r_.__value_.__r.__words[0]) >> 3));
    v26 = (const void **)v74[3].__r_.__value_.__l.__data_;
    if (*((char *)v26 + 23) >= 0)
      v27 = *((unsigned __int8 *)v26 + 23);
    else
      v27 = (size_t)v26[1];
    v28 = &v80;
    std::string::basic_string[abi:ne180100]((uint64_t)&v80, v27 + 4);
    if (v81 < 0)
      v28 = (__int128 *)v80;
    if (v27)
    {
      if (*((char *)v26 + 23) >= 0)
        v29 = v26;
      else
        v29 = *v26;
      memmove(v28, v29, v27);
    }
    strcpy((char *)v28 + v27, "_ctx");
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v78 = &v59;
    v79 = 0;
    v59 = (std::string *)operator new(0x18uLL);
    v60 = v59;
    v61 = v59 + 1;
    v60 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v61, &v80, &v82, v59);
    Espresso::sequential_builder::add<Espresso::context_transfer_params>(&v68, v21, (uint64_t)&v82, (uint64_t)&v65, (uint64_t)&__p, v62, v63, (uint64_t *)&v59);
    v30 = v69;
    if (v69)
    {
      v31 = (unint64_t *)&v69->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v78 = &v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
    if (v81 < 0)
      operator delete((void *)v80);
    *(_QWORD *)&v80 = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (v67 < 0)
      operator delete(v65);
    if (v83 < 0)
      operator delete((void *)v82);
    v33 = (uint64_t)*a2;
    v34 = (std::__shared_weak_count *)v73;
    v58[0] = size;
    v58[1] = v73;
    if (v73)
    {
      v35 = (unint64_t *)(v73 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = v74;
    v38 = (const void **)v74[3].__r_.__value_.__l.__data_;
    if (*((char *)v38 + 23) >= 0)
      v39 = *((unsigned __int8 *)v38 + 23);
    else
      v39 = (size_t)v38[1];
    v40 = &v82;
    std::string::basic_string[abi:ne180100]((uint64_t)&v82, v39 + 4);
    if (v83 < 0)
      v40 = (__int128 *)v82;
    if (v39)
    {
      if (*((char *)v38 + 23) >= 0)
        v41 = v38;
      else
        v41 = *v38;
      memmove(v40, v41, v39);
    }
    strcpy((char *)v40 + v39, "_ctx");
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v65 = &v55;
    v66 = 0;
    v55 = (std::string *)operator new(0x18uLL);
    v56 = v55;
    v57 = v55 + 1;
    v56 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57, &v82, &v84, v55);
    memset(v54, 0, sizeof(v54));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v54, (uint64_t)v74[3].__r_.__value_.__l.__data_, v74[3].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74[3].__r_.__value_.__l.__size_ - v74[3].__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel(v33, v58, (uint64_t)&v37[2], (uint64_t)&v37[1], &v55, v54);
    v65 = v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    v65 = &v55;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    if (v83 < 0)
      operator delete((void *)v82);
    if (v34)
    {
      v42 = (unint64_t *)&v34->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v44 = *a2;
    if (*((char *)*a2 + 79) < 0)
    {
      *(_BYTE *)v44[7] = 0;
      v44[8] = 0;
    }
    else
    {
      *((_BYTE *)v44 + 56) = 0;
      *((_BYTE *)v44 + 79) = 0;
    }
    v45 = (std::__shared_weak_count *)v73;
    if (v73)
    {
      v46 = (unint64_t *)(v73 + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  v48 = v75;
  if (v75)
  {
    v49 = (unint64_t *)&v75->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v77;
  if (v77)
  {
    v52 = (unint64_t *)&v77->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_19132843C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v44;

  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (a37 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41 - 168);
  _Unwind_Resume(a1);
}

void rule_add_auto_context_transfers::match(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  const void *v35;
  void *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  const void *v60;
  void *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  const void *v85;
  void *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t **v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  __int128 v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  __int128 v173;
  std::__shared_weak_count *v174;
  void *v175;
  char v176;
  void *v177;
  char v178;
  _BYTE v179[24];
  _BYTE v180[24];
  void *__p;
  char v182;
  __int128 v183;
  int v184;
  void **v185;

  v170 = 0uLL;
  v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(v168, "any");
  v8 = *(_QWORD *)(a1 + 24);
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v166 = v8;
  v167 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v184 = a2;
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 16 * a2);
  v12 = *(const void **)(v11 + 64);
  if (v12
  {
    v14 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)&v183 = v13;
    *((_QWORD *)&v183 + 1) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v171 = v8;
    v172 = v7;
    if (v7)
    {
      v17 = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v173, (uint64_t)&v171, a2);
    v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 40), v168, (uint64_t)v168);
    Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v19 + 7), (uint64_t)&v173);
    if (v182 < 0)
      operator delete(__p);
    v185 = (void **)v180;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v185);
    v185 = (void **)v179;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v185);
    if (v178 < 0)
      operator delete(v177);
    if (v176 < 0)
      operator delete(v175);
    v20 = v174;
    if (v174)
    {
      v21 = (unint64_t *)&v174->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v172;
    if (v172)
    {
      v24 = (unint64_t *)&v172->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v184;
    if (v184 == -1)
      *(_DWORD *)(v6 + 8) = -1;
    *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v6 + 16), v26, &v184)+ 32) = 1;
    v150 = v183;
    v7 = v167;
  }
  else
  {
    v150 = 0u;
  }
  v170 = v150;
  if (v7)
  {
    v27 = (unint64_t *)&v7->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v169 < 0)
    operator delete(v168[0]);
  v29 = *a3;
  if (!(_QWORD)v170)
  {
    std::string::basic_string[abi:ne180100]<0>(v168, "any");
    v31 = *(_QWORD *)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v164 = v31;
    v165 = v30;
    if (v30)
    {
      v32 = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v184 = a2;
    v34 = *(_QWORD *)(*(_QWORD *)(v31 + 32) + 16 * a2);
    v35 = *(const void **)(v34 + 64);
    v151 = 0u;
    if (v35)
    {
      if (v36)
      {
        v37 = *(_QWORD *)(v34 + 72);
        *(_QWORD *)&v183 = v36;
        *((_QWORD *)&v183 + 1) = v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v171 = v31;
        v172 = v30;
        if (v30)
        {
          v40 = (unint64_t *)&v30->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v173, (uint64_t)&v171, a2);
        v42 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v29 + 40), v168, (uint64_t)v168);
        Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v42 + 7), (uint64_t)&v173);
        if (v182 < 0)
          operator delete(__p);
        v185 = (void **)v180;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v185);
        v185 = (void **)v179;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v185);
        if (v178 < 0)
          operator delete(v177);
        if (v176 < 0)
          operator delete(v175);
        v43 = v174;
        if (v174)
        {
          v44 = (unint64_t *)&v174->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = v172;
        if (v172)
        {
          v47 = (unint64_t *)&v172->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = v184;
        if (v184 == -1)
          *(_DWORD *)(v29 + 8) = -1;
        *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v29 + 16), v49, &v184)+ 32) = 1;
        v151 = v183;
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
    v170 = v151;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v165)
    {
      v53 = &v165->__shared_owners_;
      do
        v54 = __ldaxr((unint64_t *)v53);
      while (__stlxr(v54 - 1, (unint64_t *)v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    if (v169 < 0)
      operator delete(v168[0]);
    v29 = *a3;
    if (!(_QWORD)v170)
    {
      std::string::basic_string[abi:ne180100]<0>(v168, "any");
      v56 = *(_QWORD *)(a1 + 24);
      v55 = *(std::__shared_weak_count **)(a1 + 32);
      v162 = v56;
      v163 = v55;
      if (v55)
      {
        v57 = (unint64_t *)&v55->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v184 = a2;
      v59 = *(_QWORD *)(*(_QWORD *)(v56 + 32) + 16 * a2);
      v60 = *(const void **)(v59 + 64);
      v152 = 0u;
      if (v60)
      {
        if (v61)
        {
          v62 = *(_QWORD *)(v59 + 72);
          *(_QWORD *)&v183 = v61;
          *((_QWORD *)&v183 + 1) = v62;
          if (v62)
          {
            v63 = (unint64_t *)(v62 + 8);
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
          }
          v171 = v56;
          v172 = v55;
          if (v55)
          {
            v65 = (unint64_t *)&v55->__shared_owners_;
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v173, (uint64_t)&v171, a2);
          v67 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v29 + 40), v168, (uint64_t)v168);
          Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v67 + 7), (uint64_t)&v173);
          if (v182 < 0)
            operator delete(__p);
          v185 = (void **)v180;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v185);
          v185 = (void **)v179;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v185);
          if (v178 < 0)
            operator delete(v177);
          if (v176 < 0)
            operator delete(v175);
          v68 = v174;
          if (v174)
          {
            v69 = (unint64_t *)&v174->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v71 = v172;
          if (v172)
          {
            v72 = (unint64_t *)&v172->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v74 = v184;
          if (v184 == -1)
            *(_DWORD *)(v29 + 8) = -1;
          *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v29 + 16), v74, &v184)+ 32) = 1;
          v152 = v183;
        }
      }
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
      v170 = v152;
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      if (v163)
      {
        v78 = &v163->__shared_owners_;
        do
          v79 = __ldaxr((unint64_t *)v78);
        while (__stlxr(v79 - 1, (unint64_t *)v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      if (v169 < 0)
        operator delete(v168[0]);
      v29 = *a3;
      if (!(_QWORD)v170)
      {
        std::string::basic_string[abi:ne180100]<0>(v168, "any");
        v81 = *(_QWORD *)(a1 + 24);
        v80 = *(std::__shared_weak_count **)(a1 + 32);
        v160 = v81;
        v161 = v80;
        if (v80)
        {
          v82 = (unint64_t *)&v80->__shared_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        v184 = a2;
        v84 = *(_QWORD *)(*(_QWORD *)(v81 + 32) + 16 * a2);
        v85 = *(const void **)(v84 + 64);
        v153 = 0u;
        if (v85)
        {
          if (v86)
          {
            v87 = *(_QWORD *)(v84 + 72);
            *(_QWORD *)&v183 = v86;
            *((_QWORD *)&v183 + 1) = v87;
            if (v87)
            {
              v88 = (unint64_t *)(v87 + 8);
              do
                v89 = __ldxr(v88);
              while (__stxr(v89 + 1, v88));
            }
            v171 = v81;
            v172 = v80;
            if (v80)
            {
              v90 = (unint64_t *)&v80->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v173, (uint64_t)&v171, a2);
            v92 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v29 + 40), v168, (uint64_t)v168);
            Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v92 + 7), (uint64_t)&v173);
            if (v182 < 0)
              operator delete(__p);
            v185 = (void **)v180;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v185);
            v185 = (void **)v179;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v185);
            if (v178 < 0)
              operator delete(v177);
            if (v176 < 0)
              operator delete(v175);
            v93 = v174;
            if (v174)
            {
              v94 = (unint64_t *)&v174->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            v96 = v172;
            if (v172)
            {
              v97 = (unint64_t *)&v172->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            v99 = v184;
            if (v184 == -1)
              *(_DWORD *)(v29 + 8) = -1;
            *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v29 + 16), v99, &v184)+ 32) = 1;
            v153 = v183;
          }
        }
        v100 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
        v170 = v153;
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        if (v161)
        {
          v103 = &v161->__shared_owners_;
          do
            v104 = __ldaxr((unint64_t *)v103);
          while (__stlxr(v104 - 1, (unint64_t *)v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        if (v169 < 0)
          operator delete(v168[0]);
        v29 = *a3;
        if (!(_QWORD)v170)
        {
          std::string::basic_string[abi:ne180100]<0>(&v173, "any");
          v105 = *(std::__shared_weak_count **)(a1 + 32);
          v158 = *(_QWORD *)(a1 + 24);
          v159 = v105;
          if (v105)
          {
            v106 = (unint64_t *)&v105->__shared_owners_;
            do
              v107 = __ldxr(v106);
            while (__stxr(v107 + 1, v106));
          }
          Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_reduce_kernel>((uint64_t)v168, v29, &v173, &v158, a2);
          v108 = *(_OWORD *)v168;
          v168[0] = 0;
          v168[1] = 0;
          v109 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
          v170 = v108;
          if (v109)
          {
            v110 = (unint64_t *)&v109->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          v112 = (std::__shared_weak_count *)v168[1];
          if (v168[1])
          {
            v113 = (unint64_t *)((char *)v168[1] + 8);
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          v115 = v159;
          if (v159)
          {
            v116 = (unint64_t *)&v159->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          if (SHIBYTE(v174) < 0)
            operator delete((void *)v173);
          v29 = *a3;
          if (!(_QWORD)v170)
          {
            std::string::basic_string[abi:ne180100]<0>(&v173, "any");
            v118 = *(std::__shared_weak_count **)(a1 + 32);
            v156 = *(_QWORD *)(a1 + 24);
            v157 = v118;
            if (v118)
            {
              v119 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldxr(v119);
              while (__stxr(v120 + 1, v119));
            }
            Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_axpby_kernel>((uint64_t)v168, v29, &v173, &v156, a2);
            v121 = *(_OWORD *)v168;
            v168[0] = 0;
            v168[1] = 0;
            v122 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
            v170 = v121;
            if (v122)
            {
              v123 = (unint64_t *)&v122->__shared_owners_;
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            v125 = (std::__shared_weak_count *)v168[1];
            if (v168[1])
            {
              v126 = (unint64_t *)((char *)v168[1] + 8);
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            v128 = v157;
            if (v157)
            {
              v129 = (unint64_t *)&v157->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            if (SHIBYTE(v174) < 0)
              operator delete((void *)v173);
            v29 = *a3;
            if (!(_QWORD)v170)
            {
              std::string::basic_string[abi:ne180100]<0>(&v173, "any");
              v131 = *(std::__shared_weak_count **)(a1 + 32);
              v154 = *(_QWORD *)(a1 + 24);
              v155 = v131;
              if (v131)
              {
                v132 = (unint64_t *)&v131->__shared_owners_;
                do
                  v133 = __ldxr(v132);
                while (__stxr(v133 + 1, v132));
              }
              Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_l2_normalize_kernel>((uint64_t)v168, v29, &v173, &v154, a2);
              v134 = *(_OWORD *)v168;
              v168[0] = 0;
              v168[1] = 0;
              v135 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
              v170 = v134;
              if (v135)
              {
                v136 = (unint64_t *)&v135->__shared_owners_;
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                }
              }
              v138 = (std::__shared_weak_count *)v168[1];
              if (v168[1])
              {
                v139 = (unint64_t *)((char *)v168[1] + 8);
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              v141 = v155;
              if (v155)
              {
                v142 = (unint64_t *)&v155->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              if (SHIBYTE(v174) < 0)
                operator delete((void *)v173);
              v29 = *a3;
            }
          }
        }
      }
    }
  }
  if (*(_QWORD *)(v29 + 56) != 1)
  {
    v173 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v173);
    v144 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
    if (*((_QWORD *)&v173 + 1))
    {
      v145 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
  }
  v147 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v148 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
}

void sub_191329300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a41 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

_BYTE *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_reduce_kernel>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *result;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29[4];
  std::__shared_weak_count *v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  char v38;
  __int128 v39;
  int v40;
  void **v41;

  v40 = a5;
  v10 = *a4;
  v11 = *(_QWORD *)(*(_QWORD *)(*a4 + 32) + 16 * a5);
  result = *(_BYTE **)(v11 + 64);
  if (result
  {
    v13 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)&v39 = result;
    *((_QWORD *)&v39 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *a4;
    }
    v16 = (std::__shared_weak_count *)a4[1];
    v27 = v10;
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(v29, (uint64_t)&v27, a5);
    v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v19 + 7), (uint64_t)v29);
    if (v38 < 0)
      operator delete(__p);
    v41 = (void **)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v28;
    if (v28)
    {
      v24 = (unint64_t *)&v28->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v40;
    if (v40 == -1)
      *(_DWORD *)(a2 + 8) = -1;
    result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), v26, &v40);
    result[32] = 1;
    *(_OWORD *)a1 = v39;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

void sub_191329634(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

_BYTE *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_axpby_kernel>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *result;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29[4];
  std::__shared_weak_count *v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  char v38;
  __int128 v39;
  int v40;
  void **v41;

  v40 = a5;
  v10 = *a4;
  v11 = *(_QWORD *)(*(_QWORD *)(*a4 + 32) + 16 * a5);
  result = *(_BYTE **)(v11 + 64);
  if (result
  {
    v13 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)&v39 = result;
    *((_QWORD *)&v39 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *a4;
    }
    v16 = (std::__shared_weak_count *)a4[1];
    v27 = v10;
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(v29, (uint64_t)&v27, a5);
    v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v19 + 7), (uint64_t)v29);
    if (v38 < 0)
      operator delete(__p);
    v41 = (void **)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v28;
    if (v28)
    {
      v24 = (unint64_t *)&v28->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v40;
    if (v40 == -1)
      *(_DWORD *)(a2 + 8) = -1;
    result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), v26, &v40);
    result[32] = 1;
    *(_OWORD *)a1 = v39;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

void sub_191329858(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

_BYTE *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_l2_normalize_kernel>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *result;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29[4];
  std::__shared_weak_count *v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  char v38;
  __int128 v39;
  int v40;
  void **v41;

  v40 = a5;
  v10 = *a4;
  v11 = *(_QWORD *)(*(_QWORD *)(*a4 + 32) + 16 * a5);
  result = *(_BYTE **)(v11 + 64);
  if (result
  {
    v13 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)&v39 = result;
    *((_QWORD *)&v39 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *a4;
    }
    v16 = (std::__shared_weak_count *)a4[1];
    v27 = v10;
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(v29, (uint64_t)&v27, a5);
    v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    Espresso::graph_node_t<Espresso::base_kernel>::operator=((uint64_t)(v19 + 7), (uint64_t)v29);
    if (v38 < 0)
      operator delete(__p);
    v41 = (void **)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v28;
    if (v28)
    {
      v24 = (unint64_t *)&v28->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v40;
    if (v40 == -1)
      *(_DWORD *)(a2 + 8) = -1;
    result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), v26, &v40);
    result[32] = 1;
    *(_OWORD *)a1 = v39;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

void sub_191329A7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::context_transfer_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191329CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::base_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::base_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::base_kernel>>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<rule_add_auto_context_transfers>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB58C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_add_auto_context_transfers>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB58C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_add_auto_context_transfers>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191329EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::net_number_of_bits(uint64_t a1)
{
  _QWORD *v2;
  Espresso::net *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  Espresso::net *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  Espresso::net *v17;
  uint64_t v18;
  _QWORD v20[9];
  void *__p;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void *v31;
  void **p_p;
  _QWORD *v33;

  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 32;
  v2 = operator new(8uLL);
  __p = v2;
  *v2 = 100;
  v22 = v2 + 1;
  v23 = v2 + 1;
  v3 = *(Espresso::net **)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  v20[7] = *(_QWORD *)a1;
  v20[8] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v25;
  }
  else
  {
    v7 = &v24;
  }
  v8 = MEMORY[0x1E0C809B0];
  v28 = MEMORY[0x1E0C809B0];
  v29 = 3221225472;
  v30 = ___Z26update_number_of_bits_convIN8Espresso26generic_convolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERiRNS2_6vectorIiNS2_9allocatorIiEEEE_block_invoke;
  v31 = &__block_descriptor_48_e9_v16__0_v8l;
  p_p = &__p;
  v33 = v7 + 3;
  Espresso::single_match_replace<Espresso::generic_convolution_kernel>(v3, &v28);
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v11 = *(Espresso::net **)a1;
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  v20[5] = *(_QWORD *)a1;
  v20[6] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v28 = v8;
  v29 = 3221225472;
  v30 = ___Z26update_number_of_bits_convIN8Espresso28generic_deconvolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERiRNS2_6vectorIiNS2_9allocatorIiEEEE_block_invoke;
  v31 = &__block_descriptor_48_e9_v16__0_v8l;
  p_p = &__p;
  v33 = v25 + 3;
  Espresso::single_match_replace<Espresso::generic_deconvolution_kernel>(v11, &v28);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = *(Espresso::net **)a1;
  v20[0] = v8;
  v20[1] = 3221225472;
  v20[2] = ___ZN8Espresso18net_number_of_bitsENSt3__110shared_ptrINS_3netEEE_block_invoke;
  v20[3] = &unk_1E2DD1D30;
  v20[4] = &v24;
  Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(v17, v20);
  v18 = *((unsigned int *)v25 + 6);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v24, 8);
  return v18;
}

void sub_19132A0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void ___Z26update_number_of_bits_convIN8Espresso26generic_convolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERiRNS2_6vectorIiNS2_9allocatorIiEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  int **v2;
  int *v3;
  int *v4;
  char v7;
  uint64_t (***v8)(_QWORD);
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  int v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = *(int ***)(a1 + 32);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    v7 = 0;
    do
    {
      v8 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
      v9 = (**v8)(v8);
      v10 = *v3++;
      v7 |= v9 == v10;
    }
    while (v3 != v4);
    if ((v7 & 1) != 0)
    {
      v11 = *(_QWORD **)a2;
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 472);
      if (v12
        && *(_QWORD *)v12
        && (*(_QWORD *)(v12 + 32) || *(_QWORD *)(v12 + 48) || *(_QWORD *)(v12 + 64) || *(_QWORD *)(v12 + 80)))
      {
        v13 = *(_DWORD *)(v12 + 156);
        v14 = *(int **)(a1 + 40);
        if (*v14 < v13)
          v13 = *v14;
        *v14 = v13;
      }
      if (v11[63])
      {
        v15 = *(int **)(a1 + 40);
        v16 = *v15;
        if (*v15 >= 8)
          v16 = 8;
        *v15 = v16;
      }
      (*(void (**)(uint64_t *__return_ptr))(*v11 + 552))(&v23);
      v18 = v23;
      v17 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v18)
      {
        v21 = *(int **)(a1 + 40);
        v22 = *v21;
        if (*v21 >= 16)
          v22 = 16;
        *v21 = v22;
      }
    }
  }
}

void ___Z26update_number_of_bits_convIN8Espresso28generic_deconvolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERiRNS2_6vectorIiNS2_9allocatorIiEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  int **v2;
  int *v3;
  int *v4;
  char v7;
  uint64_t (***v8)(_QWORD);
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  int v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = *(int ***)(a1 + 32);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    v7 = 0;
    do
    {
      v8 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
      v9 = (**v8)(v8);
      v10 = *v3++;
      v7 |= v9 == v10;
    }
    while (v3 != v4);
    if ((v7 & 1) != 0)
    {
      v11 = *(_QWORD **)a2;
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 472);
      if (v12
        && *(_QWORD *)v12
        && (*(_QWORD *)(v12 + 32) || *(_QWORD *)(v12 + 48) || *(_QWORD *)(v12 + 64) || *(_QWORD *)(v12 + 80)))
      {
        v13 = *(_DWORD *)(v12 + 156);
        v14 = *(int **)(a1 + 40);
        if (*v14 < v13)
          v13 = *v14;
        *v14 = v13;
      }
      if (v11[63])
      {
        v15 = *(int **)(a1 + 40);
        v16 = *v15;
        if (*v15 >= 8)
          v16 = 8;
        *v15 = v16;
      }
      (*(void (**)(uint64_t *__return_ptr))(*v11 + 552))(&v23);
      v18 = v23;
      v17 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v18)
      {
        v21 = *(int **)(a1 + 40);
        v22 = *v21;
        if (*v21 >= 16)
          v22 = 16;
        *v21 = v22;
      }
    }
  }
}

void ___ZN8Espresso18net_number_of_bitsENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  unsigned int (***v4)(_QWORD);
  unsigned int (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  if (!(**v4)(v4) || (v5 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8), (**v5)(v5) == 100))
  {
    v6 = *a2;
    v7 = *(_QWORD *)(*a2 + 440);
    if (v7
      && *(_QWORD *)v7
      && (*(_QWORD *)(v7 + 32) || *(_QWORD *)(v7 + 48) || *(_QWORD *)(v7 + 64) || *(_QWORD *)(v7 + 80)))
    {
      v8 = *(_DWORD *)(v7 + 156);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (*(_DWORD *)(v9 + 24) < v8)
        v8 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v8;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 472))(&v16);
    v11 = v16;
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v11)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v15 = *(_DWORD *)(v14 + 24);
      if (v15 >= 16)
        v15 = 16;
      *(_DWORD *)(v14 + 24) = v15;
    }
  }
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19132A51C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  void *result;

  v10 = operator new(0x60uLL);
  *v10 = &off_1E2DBECA8;
  v10[1] = 0;
  v10[3] = &off_1E2DA11F0;
  *((_OWORD *)v10 + 4) = 0u;
  v10[2] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  v10[6] = result;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_19132A62C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke(uint64_t a1)
{
  char v2[4];
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2[0] = 1;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v3 = 723714176;
  kdebug_trace();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v2);
}

void sub_19132A6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke_2(uint64_t a1)
{
  char v2[4];
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2[0] = 1;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v3 = 723714176;
  kdebug_trace();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v2);
}

void sub_19132A75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_19132A854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19132AC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v22 = v20;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19132AE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19132AF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ETImagePreprocessor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19132B1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,void>(uint64_t *a1, _QWORD *a2, int a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x118uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1868;
  result = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

uint64_t Espresso::blob_cpu::blob_cpu(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)result = off_1E2D8F108;
  *(_DWORD *)(result + 28) = -1;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 0;
  v3 = a2[1];
  *(_QWORD *)(result + 72) = *a2;
  *(_QWORD *)(result + 80) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 1065353216;
  *(_QWORD *)(result + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(result + 124) = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 128) = 0uLL;
  *(_OWORD *)(result + 144) = 0uLL;
  *(_QWORD *)result = &off_1E2DA6B80;
  *(_QWORD *)(result + 248) = 0;
  *(_OWORD *)(result + 160) = 0uLL;
  *(_OWORD *)(result + 176) = 0uLL;
  *(_OWORD *)(result + 192) = 0uLL;
  *(_OWORD *)(result + 208) = 0uLL;
  *(_OWORD *)(result + 224) = 0uLL;
  *(_DWORD *)(result + 240) = a3;
  return result;
}

void sub_19132BBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;

  _Unwind_Resume(a1);
}

void sub_19132BE74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a2[1];
  v5 = result - *a2;
  if (result != *a2)
  {
    v6 = v5 + 1;
    if (v5 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, 0x40uLL);
      return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v6);
      v8 = 63;
      if (((v6 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v6);
      return *a2 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(_QWORD *)(result + 32) = v3 - a3 + (v3 << 6);
      *(_QWORD *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(_QWORD *)(result + 48) = 0;
    v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(_QWORD *)(result + 48) = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  v6 = -1;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E)
    v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    result = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
        v12 = v6 - 1;
      }
      while (*(_QWORD *)(a1 + 40) <= v12);
      v13 = result << v5;
      if (v5 >= 0x40)
        v13 = 0;
      result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (v2 < v14)
  {
    v15 = *(unsigned int **)a1;
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(a1 + 60);
    v19 = *v15;
    while (1)
    {
      v20 = v19 / 0xADC8;
      v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      v9 = v21 >= v20;
      v22 = v21 - v20;
      if (v9)
        v23 = 0;
      else
        v23 = 0x7FFFFFFF;
      v19 = v23 + v22;
      v24 = v19 - 1;
      if (v16 > v24)
      {
        v25 = result << (v17 + 1);
        if (v17 >= 0x3F)
          v25 = 0;
        result = v25 + (v18 & v24);
        if (++v2 == v14)
          break;
      }
    }
    *v15 = v19;
  }
  return result;
}

void Espresso::analysis_make_ssa::~analysis_make_ssa(Espresso::analysis_make_ssa *this)
{
  Espresso::analysis_make_ssa::~analysis_make_ssa(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D815E8;
  v2 = (char *)this + 8;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)v2);
}

uint64_t Espresso::analysis_make_ssa::deserialize()
{
  return 0;
}

void Espresso::analysis_make_ssa::serialize(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void Espresso::pass_make_ssa::~pass_make_ssa(Espresso::pass_make_ssa *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_make_ssa::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::pass_make_ssa::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::string::size_type v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  std::string::size_type is_blob_defined_in_predecessors;
  const char *v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  uint64_t v64;
  std::string::size_type v65;
  __int128 v66;
  char *v67;
  std::__shared_weak_count *size;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::string::size_type v77;
  Espresso *v78;
  uint64_t v79;
  const char *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  char *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  std::string::size_type v104;
  _QWORD *v105;
  std::string *p_p;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const std::string *v116;
  const std::string *v117;
  uint64_t v118;
  std::string *v119;
  NSObject *v120;
  std::string::size_type v121;
  uint64_t v122;
  std::string::size_type v123;
  void *v124;
  void **v125;
  std::string::size_type v126;
  std::string::size_type v127;
  std::string **v128;
  std::string **v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unsigned __int8 *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint8x8_t v144;
  unint64_t v145;
  unint64_t v146;
  unsigned __int8 **v147;
  unsigned __int8 *v148;
  unint64_t v149;
  _BOOL8 v150;
  const char *v151;
  NSObject *v152;
  _QWORD *j;
  uint64_t v155;
  uint64_t v156;
  unint64_t k;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  unsigned __int8 *v163;
  _QWORD *v164;
  uint64_t *v165;
  unint64_t *v166;
  unint64_t v167;
  std::string *v168;
  std::string::size_type v169;
  std::string::size_type v170;
  unint64_t v171;
  std::string *v172;
  std::string::size_type v173;
  _BOOL4 v174;
  std::string *v175;
  _BOOL4 v176;
  std::string::size_type v177;
  uint64_t v178;
  std::string::size_type v179;
  uint64_t v180;
  uint64_t v181;
  std::string::size_type v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  const void *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  std::string *v194;
  std::string *v195;
  unint64_t v196;
  uint64_t *v197;
  uint8x8_t v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  _QWORD *v205;
  uint64_t v206;
  const std::string *v207;
  const std::string *v208;
  uint64_t *v209;
  uint64_t *v210;
  __int128 *v211;
  __int128 *v212;
  unint64_t v213;
  unint64_t v214;
  uint8x8_t v215;
  __int128 *v216;
  __int128 *v217;
  unint64_t v218;
  __int128 *v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *m;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  std::__shared_weak_count_vtbl *v226;
  uint64_t v227;
  uint64_t n;
  uint64_t v229;
  BOOL v230;
  void **v231;
  BOOL v232;
  char *v233;
  uint64_t v234;
  _OWORD *v235;
  __int128 v236;
  unsigned __int8 *ii;
  char *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  void *v245;
  unint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  uint64_t *v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  std::string::size_type v262;
  uint64_t *v263;
  uint64_t v264;
  std::string::size_type v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t **v271;
  std::__shared_weak_count *v272;
  std::__shared_weak_count *v273;
  Espresso::net *v274;
  _QWORD *v275;
  _QWORD v276[3];
  std::string __p;
  unint64_t v278;
  std::__shared_weak_count *v279;
  __int128 v280;
  __int128 v281;
  int v282;
  __int128 v283;
  __int128 v284;
  int v285;
  std::string __str;
  std::string::pointer data;
  int v288;
  __int128 v289;
  __int128 v290;
  int v291;
  __int128 v292;
  __int128 v293;
  int v294;
  __int128 v295;
  __int128 v296;
  int v297;
  std::string *v298;
  std::string v299[2];
  uint64_t v300;

  v300 = *MEMORY[0x1E0C80C00];
  v255 = Espresso::net::get_analysis<Espresso::control_flow_graph>((uint64_t)a1);
  v4 = (char *)operator new(0x98uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBB400;
  *((_QWORD *)v4 + 3) = &off_1E2D815E8;
  v248 = v4 + 24;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_QWORD *)v4 + 18) = 0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  v6 = v4 + 112;
  *((_OWORD *)v4 + 2) = 0u;
  v275 = v4 + 32;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_DWORD *)v4 + 16) = 1065353216;
  *(_OWORD *)(v4 + 72) = 0u;
  v251 = (uint64_t)(v4 + 72);
  v252 = (std::__shared_weak_count *)v4;
  *(_OWORD *)(v4 + 88) = 0u;
  *((_DWORD *)v4 + 26) = 1065353216;
  *((_DWORD *)v4 + 36) = 1065353216;
  v295 = 0u;
  v296 = 0u;
  v297 = 1065353216;
  v292 = 0u;
  v293 = 0u;
  v294 = 1065353216;
  v289 = 0u;
  v290 = 0u;
  v291 = 1065353216;
  v7 = *((_QWORD *)a1 + 80);
  v274 = a1;
  for (i = *((_QWORD *)a1 + 81); v7 != i; v7 += 24)
  {
    v299[0].__r_.__value_.__r.__words[0] = v7;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v295, v7, (uint64_t)&std::piecewise_construct, (__int128 **)v299)[5] = 1;
  }
  v250 = (uint64_t)v6;
  v9 = (uint64_t *)*((_QWORD *)v255 + 1);
  v260 = (uint64_t *)*((_QWORD *)v255 + 2);
  if (v9 != v260)
  {
    v271 = (uint64_t **)((char *)a1 + 352);
    v10 = (char *)a1 + 408;
    do
    {
      v263 = v9;
      v11 = *v9;
      v12 = *(_QWORD *)(*v9 + 8);
      v266 = v11;
      while (v12 != v11)
      {
        v269 = v12;
        v13 = *(_QWORD *)(v12 + 16);
        v14 = *(_QWORD *)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        while (v14 != v15)
        {
          v299[0].__r_.__value_.__r.__words[0] = v14;
          v16 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v295, v14, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
          v17 = v16[5];
          if (v17)
          {
            v299[0].__r_.__value_.__s.__data_[0] = 1;
            if (*(char *)(v14 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v299[0].__r_.__value_.__r.__words[1], *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
            }
            else
            {
              v18 = *(_OWORD *)v14;
              v299[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(v14 + 16);
              *(_OWORD *)&v299[0].__r_.__value_.__r.__words[1] = v18;
            }
            v299[1].__r_.__value_.__l.__size_ = v17;
            Espresso::ssa_blob_name::repr(&__str, (uint64_t)v299);
            if (v299[1].__r_.__value_.__s.__data_[7] < 0)
              operator delete((void *)v299[0].__r_.__value_.__l.__size_);
            v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v292, (uint64_t)&__str, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
            std::string::operator=((std::string *)(v20 + 5), (const std::string *)v14);
            v299[0].__r_.__value_.__r.__words[0] = v14;
            v21 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v292, v14, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
            std::string::operator=((std::string *)(v21 + 5), (const std::string *)v14);
            v22 = v16[5];
            v299[0].__r_.__value_.__r.__words[0] = v14;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v275, v14, (uint64_t)&std::piecewise_construct, (__int128 **)v299)[5] = v22 + 1;
            v299[0].__r_.__value_.__r.__words[0] = v14;
            v23 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v289, (unsigned __int8 *)v14, (__int128 **)v299);
            if (*((_QWORD *)v23 + 5) == *((_QWORD *)v23 + 6))
            {
              v299[0].__r_.__value_.__r.__words[0] = v14;
              v24 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v289, (unsigned __int8 *)v14, (__int128 **)v299);
              Espresso::unique_vector<std::string>::push_back_if_not_present((uint64_t)(v24 + 40), (__int128 *)v14);
            }
            v299[0].__r_.__value_.__r.__words[0] = v14;
            v25 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v289, (unsigned __int8 *)v14, (__int128 **)v299);
            Espresso::unique_vector<std::string>::push_back_if_not_present((uint64_t)(v25 + 40), (__int128 *)&__str);
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v274 + 45), (_QWORD *)v14))
            {
              v299[0].__r_.__value_.__r.__words[0] = v14;
              v26 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v271, (_QWORD *)v14, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
              v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              v27 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v271, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
              *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
              if (v27 != v26)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v27 + 72, *((char **)v26 + 9), *((_QWORD *)v26 + 10), (uint64_t)(*((_QWORD *)v26 + 10) - *((_QWORD *)v26 + 9)) >> 2);
            }
            v28 = (char *)*((_QWORD *)v274 + 50);
            if (v28 != v10)
            {
              do
              {
                LODWORD(v299[0].__r_.__value_.__l.__data_) = *((_DWORD *)v28 + 8);
                std::map<std::string,Espresso::blob_numerical_properties>::map[abi:ne180100]((uint64_t)&v299[0].__r_.__value_.__l.__size_, (_QWORD *)v28 + 5);
                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((_QWORD *)v299[0].__r_.__value_.__r.__words[2], (_QWORD *)v14))
                {
                  *(_QWORD *)&v283 = v14;
                  v29 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v299[0].__r_.__value_.__l.__size_, (_QWORD *)v14, (uint64_t)&std::piecewise_construct, (__int128 **)&v283);
                  *(_QWORD *)&v283 = &__str;
                  v30 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v299[0].__r_.__value_.__l.__size_, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&v283);
                  *(_OWORD *)(v30 + 56) = *(_OWORD *)(v29 + 56);
                  if (v30 != v29)
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30 + 72, *((char **)v29 + 9), *((_QWORD *)v29 + 10), (uint64_t)(*((_QWORD *)v29 + 10) - *((_QWORD *)v29 + 9)) >> 2);
                }
                std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy((_QWORD *)v299[0].__r_.__value_.__r.__words[2]);
                v31 = (char *)*((_QWORD *)v28 + 1);
                if (v31)
                {
                  do
                  {
                    v32 = v31;
                    v31 = *(char **)v31;
                  }
                  while (v31);
                }
                else
                {
                  do
                  {
                    v32 = (char *)*((_QWORD *)v28 + 2);
                    v230 = *(_QWORD *)v32 == (_QWORD)v28;
                    v28 = v32;
                  }
                  while (!v230);
                }
                v28 = v32;
              }
              while (v32 != v10);
            }
            std::string::operator=((std::string *)v14, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v19 = v16[5];
          }
          else
          {
            v19 = 0;
          }
          v16[5] = v19 + 1;
          v14 += 24;
        }
        v11 = v266;
        v12 = *(_QWORD *)(v269 + 8);
      }
      v9 = v263 + 2;
    }
    while (v263 + 2 != v260);
  }
  is_blob_defined_in_predecessors = (std::string::size_type)Espresso::control_flow_graph::blob_defined_in_block((char *)&__str, (uint64_t)v255);
  v35 = *((_QWORD *)v274 + 121);
  v253 = (std::__shared_weak_count *)*((_QWORD *)v274 + 122);
  if (v253)
  {
    p_shared_owners = (unint64_t *)&v253->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  if (!v35)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot do pass_make_ssa without an interpreter");
  v38 = (uint64_t *)*((_QWORD *)v255 + 1);
  v254 = (uint64_t *)*((_QWORD *)v255 + 2);
  v247 = v35;
  if (v38 == v254)
  {
    v283 = 0u;
    v284 = 0u;
    v285 = 1065353216;
  }
  else
  {
    v257 = v35 + 144;
    v259 = (uint64_t **)((char *)v274 + 352);
    v39 = (_QWORD *)((char *)v274 + 408);
    do
    {
      v283 = 0u;
      v284 = 0u;
      v285 = 1065353216;
      v280 = 0u;
      v281 = 0u;
      v282 = 1065353216;
      v258 = v38;
      v40 = *v38;
      v41 = *(_QWORD *)(*v38 + 8);
      v256 = *v38;
      while (v41 != v40)
      {
        v42 = *(_QWORD **)(v41 + 16);
        v43 = v42[5];
        v44 = v42[6];
        v261 = v44;
        v264 = v41;
        if (v43 != v44)
        {
          do
          {
            if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v275, v43)&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v283, v43)&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v280, v43))
            {
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v283, v43, v43);
              v299[0].__r_.__value_.__r.__words[0] = v43;
              v270 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v295, v43, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
              v45 = **(_QWORD **)(v41 + 16);
              v46 = *(_DWORD *)(v45 + 12);
              v47 = *(_QWORD **)(v45 + 64);
              v48 = (std::__shared_weak_count *)v47[2];
              v278 = v47[1];
              v279 = v48;
              if (!v48)
                goto LABEL_391;
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
              v51 = *(uint64_t **)(v41 + 16);
              v45 = *v51;
              v47 = *(_QWORD **)(*v51 + 64);
              if (v47)
              {
LABEL_391:
                if (v52)
                {
                  v53 = *(std::__shared_weak_count **)(v45 + 72);
                  v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
                  v299[0].__r_.__value_.__l.__size_ = (std::string::size_type)v53;
                  if (v53)
                  {
                    v54 = (unint64_t *)&v53->__shared_owners_;
                    do
                      v55 = __ldxr(v54);
                    while (__stxr(v55 + 1, v54));
                  }
                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v278, v52[41], v52[42]);
                  v56 = !(***(unsigned int (****)(_QWORD))(v278 + 8))(*(_QWORD *)(v278 + 8))
                     || (***(unsigned int (****)(_QWORD))(v278 + 8))(*(_QWORD *)(v278 + 8)) == 100
                     || (***(uint64_t (****)(_QWORD))(v278 + 8))(*(_QWORD *)(v278 + 8)) == 50002;
                  v46 = !v56;
                  if (v53)
                  {
                    v57 = (unint64_t *)&v53->__shared_owners_;
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                      std::__shared_weak_count::__release_weak(v53);
                    }
                  }
                }
              }
              v59 = (std::__shared_weak_count *)operator new(0x150uLL);
              v267 = v46;
              v59->__shared_owners_ = 0;
              v60 = (unint64_t *)&v59->__shared_owners_;
              v59->__shared_weak_owners_ = 0;
              v59->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD818;
              v61 = &v59[1].__vftable;
              Espresso::base_kernel::base_kernel((uint64_t)&v59[1], &v278);
              v59[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D94120;
              v59[13].__shared_owners_ = 0;
              v59[13].__shared_weak_owners_ = 0;
              v59[13].__vftable = 0;
              v62 = (std::__shared_weak_count *)operator new(0x58uLL);
              v272 = v59;
              v62->__shared_owners_ = 0;
              v63 = (unint64_t *)&v62->__shared_owners_;
              v62->__shared_weak_owners_ = 0;
              v62->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A80;
              v62[1].std::__shared_count = 0u;
              v64 = (uint64_t)&v62[1];
              *(_OWORD *)&v62[1].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v62[2].__shared_owners_ = 0u;
              v62[3].std::__shared_count = 0u;
              v65 = v270[5];
              v299[0].__r_.__value_.__s.__data_[0] = 1;
              if (*(char *)(v43 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v299[0].__r_.__value_.__r.__words[1], *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
              }
              else
              {
                v66 = *(_OWORD *)v43;
                v299[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(v43 + 16);
                *(_OWORD *)&v299[0].__r_.__value_.__r.__words[1] = v66;
              }
              v299[1].__r_.__value_.__l.__size_ = v65;
              Espresso::ssa_blob_name::repr(&__p, (uint64_t)v299);
              if (v299[1].__r_.__value_.__s.__data_[7] < 0)
                operator delete((void *)v299[0].__r_.__value_.__l.__size_);
              std::string::operator=((std::string *)&v272[13], (const std::string *)v43);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(v299, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v299[0] = __p;
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v62[1].__shared_weak_owners_, v299, (__int128 *)&v299[1], 1uLL);
              if (SHIBYTE(v299[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v299[0].__r_.__value_.__l.__data_);
              v67 = (char *)operator new(0xF8uLL);
              *((_QWORD *)v67 + 1) = 0;
              *((_QWORD *)v67 + 2) = 0;
              *(_QWORD *)v67 = &off_1E2DBF0D0;
              *((_QWORD *)v67 + 3) = &off_1E2DA1A38;
              *(_OWORD *)(v67 + 40) = 0u;
              *(_OWORD *)(v67 + 56) = 0u;
              *(_OWORD *)(v67 + 72) = 0u;
              *(_OWORD *)(v67 + 88) = 0u;
              *(_OWORD *)(v67 + 104) = 0u;
              *(_OWORD *)(v67 + 120) = 0u;
              *(_OWORD *)(v67 + 136) = 0u;
              *(_OWORD *)(v67 + 152) = 0u;
              *(_OWORD *)(v67 + 161) = 0u;
              *((_OWORD *)v67 + 13) = 0u;
              *((_OWORD *)v67 + 14) = 0u;
              *((_QWORD *)v67 + 30) = 0;
              v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v67 + 24);
              v299[0].__r_.__value_.__l.__size_ = (std::string::size_type)v67;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v64, (__int128 *)v299);
              size = (std::__shared_weak_count *)v299[0].__r_.__value_.__l.__size_;
              if (v299[0].__r_.__value_.__l.__size_)
              {
                v69 = (unint64_t *)(v299[0].__r_.__value_.__l.__size_ + 8);
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
              v71 = *(_QWORD *)v64;
              do
                v72 = __ldxr(v60);
              while (__stxr(v72 + 1, v60));
              v73 = *(std::__shared_weak_count **)(v71 + 72);
              *(_QWORD *)(v71 + 64) = v61;
              *(_QWORD *)(v71 + 72) = v272;
              if (v73)
              {
                v74 = (unint64_t *)&v73->__shared_owners_;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
              MEMORY[0x19401C808](*(_QWORD *)v64 + 40, "phi_virtual");
              std::operator+<char>();
              v76 = *(_QWORD *)v64 + 16;
              if (*(char *)(*(_QWORD *)v64 + 39) < 0)
                operator delete(*(void **)v76);
              v77 = v299[0].__r_.__value_.__r.__words[2];
              *(_OWORD *)v76 = *(_OWORD *)&v299[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v76 + 16) = v77;
              v78 = (Espresso *)(***(uint64_t (****)(_QWORD))(v278 + 8))(*(_QWORD *)(v278 + 8));
              v79 = *(_QWORD *)v64;
              *(_DWORD *)(v79 + 8) = (_DWORD)v78;
              *(_DWORD *)(v79 + 12) = v267;
              Espresso::espresso_os_log_subsystem(v78, v80);
              v81 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
              {
                v102 = **(_QWORD **)(v264 + 16);
                v103 = (_QWORD *)(v102 + 40);
                if (*(char *)(v102 + 63) < 0)
                  v103 = (_QWORD *)*v103;
                v104 = (std::string::size_type)&v272[13];
                v105 = (_QWORD *)(v102 + 16);
                if (*(char *)(v102 + 39) < 0)
                  v105 = (_QWORD *)*v105;
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v272[13].__shared_weak_owners_) < 0)
                  v104 = (std::string::size_type)v272[13].__vftable;
                v107 = *(_DWORD *)(*(_QWORD *)v64 + 8);
                LODWORD(v299[0].__r_.__value_.__l.__data_) = 67110146;
                HIDWORD(v299[0].__r_.__value_.__r.__words[0]) = v107;
                LOWORD(v299[0].__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v299[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v103;
                WORD1(v299[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&v299[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v105;
                WORD2(v299[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)v299[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)p_p;
                HIWORD(v299[1].__r_.__value_.__r.__words[1]) = 2080;
                v299[1].__r_.__value_.__r.__words[2] = v104;
                _os_log_debug_impl(&dword_190DAF000, v81, OS_LOG_TYPE_DEBUG, "adding phi: pl=%d kernel_type=%s kernel_name=%s top=%s k->original_blob_name=%s\n", (uint8_t *)v299, 0x30u);
              }

              v82 = *v258;
              v83 = *(uint64_t **)(*v258 + 8);
              v84 = operator new(0x20uLL);
              v84[2] = v64;
              v84[3] = v62;
              do
                v85 = __ldxr(v63);
              while (__stxr(v85 + 1, v63));
              v86 = *v83;
              *(_QWORD *)(v86 + 8) = v84;
              *v84 = v86;
              *v83 = (uint64_t)v84;
              v84[1] = v83;
              ++*(_QWORD *)(v82 + 16);
              v87 = v270[5] + 1;
              v270[5] = v87;
              v299[0].__r_.__value_.__r.__words[0] = v43;
              std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v257, v43, (uint64_t)&std::piecewise_construct, (__int128 **)v299)[5] = v87;
              v299[0].__r_.__value_.__r.__words[0] = v43;
              v88 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v289, (unsigned __int8 *)v43, (__int128 **)v299);
              Espresso::unique_vector<std::string>::push_back_if_not_present((uint64_t)(v88 + 40), (__int128 *)&__p);
              v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              v89 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v292, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
              std::string::operator=((std::string *)(v89 + 5), (const std::string *)v43);
              if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v274 + 45), (_QWORD *)v43))
              {
                v299[0].__r_.__value_.__r.__words[0] = v43;
                v90 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v259, (_QWORD *)v43, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
                v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                v91 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v259, &__p, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
                *(_OWORD *)(v91 + 56) = *(_OWORD *)(v90 + 56);
                if (v91 != v90)
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v91 + 72, *((char **)v90 + 9), *((_QWORD *)v90 + 10), (uint64_t)(*((_QWORD *)v90 + 10) - *((_QWORD *)v90 + 9)) >> 2);
              }
              v92 = (_QWORD *)*((_QWORD *)v274 + 50);
              if (v92 != v39)
              {
                do
                {
                  LODWORD(v299[0].__r_.__value_.__l.__data_) = *((_DWORD *)v92 + 8);
                  std::map<std::string,Espresso::blob_numerical_properties>::map[abi:ne180100]((uint64_t)&v299[0].__r_.__value_.__l.__size_, v92 + 5);
                  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((_QWORD *)v299[0].__r_.__value_.__r.__words[2], (_QWORD *)v43))
                  {
                    v298 = (std::string *)v43;
                    v93 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v299[0].__r_.__value_.__l.__size_, (_QWORD *)v43, (uint64_t)&std::piecewise_construct, (__int128 **)&v298);
                    v298 = &__p;
                    v94 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v299[0].__r_.__value_.__l.__size_, &__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v298);
                    *(_OWORD *)(v94 + 56) = *(_OWORD *)(v93 + 56);
                    if (v94 != v93)
                      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v94 + 72, *((char **)v93 + 9), *((_QWORD *)v93 + 10), (uint64_t)(*((_QWORD *)v93 + 10) - *((_QWORD *)v93 + 9)) >> 2);
                  }
                  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy((_QWORD *)v299[0].__r_.__value_.__r.__words[2]);
                  v95 = (_QWORD *)v92[1];
                  if (v95)
                  {
                    do
                    {
                      v96 = v95;
                      v95 = (_QWORD *)*v95;
                    }
                    while (v95);
                  }
                  else
                  {
                    do
                    {
                      v96 = (_QWORD *)v92[2];
                      v230 = *v96 == (_QWORD)v92;
                      v92 = v96;
                    }
                    while (!v230);
                  }
                  v92 = v96;
                }
                while (v96 != v39);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v41 = v264;
              do
                v97 = __ldaxr(v63);
              while (__stlxr(v97 - 1, v63));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
              do
                v98 = __ldaxr(v60);
              while (__stlxr(v98 - 1, v60));
              v44 = v261;
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                std::__shared_weak_count::__release_weak(v272);
              }
              v99 = v279;
              if (v279)
              {
                v100 = (unint64_t *)&v279->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
              }
            }
            v43 += 24;
          }
          while (v43 != v44);
          v42 = *(_QWORD **)(v41 + 16);
        }
        v108 = v42[2];
        v109 = v42[3];
        while (v108 != v109)
        {
          Espresso::map_const_get<std::unordered_map<std::string,std::string>>(v299, &v292, v108, v108);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v280, (uint64_t)v299, (uint64_t)v299);
          if (SHIBYTE(v299[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v299[0].__r_.__value_.__l.__data_);
          v108 += 24;
        }
        v41 = *(_QWORD *)(v41 + 8);
        v40 = v256;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v280);
      is_blob_defined_in_predecessors = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v283);
      v38 = v258 + 2;
    }
    while (v258 + 2 != v254);
    v111 = *((_QWORD *)v255 + 1);
    v110 = *((_QWORD *)v255 + 2);
    v283 = 0u;
    v284 = 0u;
    v285 = 1065353216;
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v110 != v111)
    {
      v112 = 0;
      do
      {
        v113 = *(_QWORD *)(v111 + 16 * v112);
        v114 = *(_QWORD *)(v113 + 8);
        if (v114 != v113)
        {
          do
          {
            v115 = *(_QWORD *)(v114 + 16);
            v116 = *(const std::string **)(v115 + 16);
            v117 = *(const std::string **)(v115 + 24);
            while (v116 != v117)
            {
              is_blob_defined_in_predecessors = Espresso::ssa_blob_name::ssa_blob_name((uint64_t)v299, (uint64_t)v116);
              if (v299[0].__r_.__value_.__s.__data_[0])
              {
                *(_QWORD *)&v280 = &v299[0].__r_.__value_.__l.__size_;
                v118 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v283, (unsigned __int8 *)&v299[0].__r_.__value_.__s.__data_[8], (uint64_t)&std::piecewise_construct, (__int128 **)&v280);
                *(_QWORD *)&v280 = &__p;
                v119 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v118 + 40, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v280);
                is_blob_defined_in_predecessors = (std::string::size_type)std::string::operator=(v119 + 1, v116);
              }
              if (v299[1].__r_.__value_.__s.__data_[7] < 0)
                operator delete((void *)v299[0].__r_.__value_.__l.__size_);
              ++v116;
            }
            v114 = *(_QWORD *)(v114 + 8);
          }
          while (v114 != v113);
          v112 = __p.__r_.__value_.__r.__words[0];
          v111 = *((_QWORD *)v255 + 1);
          v110 = *((_QWORD *)v255 + 2);
        }
        __p.__r_.__value_.__r.__words[0] = ++v112;
      }
      while (v112 < (v110 - v111) >> 4);
    }
  }
  v280 = 0u;
  v281 = 0u;
  v282 = 1065353216;
  LODWORD(v298) = 1;
  do
  {
    Espresso::espresso_os_log_subsystem((Espresso *)is_blob_defined_in_predecessors, v34);
    v120 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v299[0].__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_190DAF000, v120, OS_LOG_TYPE_DEBUG, "pass_make_ssa: phi simplify iteration", (uint8_t *)v299, 2u);
    }

    Espresso::control_flow_graph::blob_defined_in_block((char *)v299, (uint64_t)v255);
    if (data)
    {
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__str.__r_.__value_.__r.__words[2]);
      __str.__r_.__value_.__r.__words[2] = 0;
      v121 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v122 = 0;
        do
          *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8 * v122++) = 0;
        while (v121 != v122);
      }
      data = 0;
    }
    v123 = v299[0].__r_.__value_.__r.__words[0];
    v299[0].__r_.__value_.__r.__words[0] = 0;
    v124 = (void *)__str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = v123;
    if (v124)
      operator delete(v124);
    v125 = (void **)v299[0].__r_.__value_.__r.__words[2];
    v126 = v299[0].__r_.__value_.__l.__size_;
    v299[0].__r_.__value_.__l.__size_ = 0;
    __str.__r_.__value_.__r.__words[2] = v299[0].__r_.__value_.__r.__words[2];
    data = v299[1].__r_.__value_.__l.__data_;
    v288 = v299[1].__r_.__value_.__r.__words[1];
    __str.__r_.__value_.__l.__size_ = v126;
    if (v299[1].__r_.__value_.__r.__words[0])
    {
      v127 = *(_QWORD *)(v299[0].__r_.__value_.__r.__words[2] + 8);
      if ((v126 & (v126 - 1)) != 0)
      {
        if (v127 >= v126)
          v127 %= v126;
      }
      else
      {
        v127 &= v126 - 1;
      }
      v125 = 0;
      *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8 * v127) = (char *)&__str.__r_.__value_.__l + 16;
      v299[0].__r_.__value_.__r.__words[2] = 0;
      v299[1].__r_.__value_.__r.__words[0] = 0;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(v125);
    is_blob_defined_in_predecessors = v299[0].__r_.__value_.__r.__words[0];
    v299[0].__r_.__value_.__r.__words[0] = 0;
    if (is_blob_defined_in_predecessors)
      operator delete((void *)is_blob_defined_in_predecessors);
    LODWORD(v298) = 0;
    v278 = 0;
    v129 = (std::string **)*((_QWORD *)v255 + 1);
    v128 = (std::string **)*((_QWORD *)v255 + 2);
    if (v128 == v129)
      continue;
    v130 = 0;
    do
    {
      v131 = (uint64_t *)&v129[2 * v130];
      v132 = *v131;
      v133 = *(_QWORD *)(*v131 + 8);
      if (v133 == *v131)
        goto LABEL_239;
      v268 = *v131;
      do
      {
        v135 = (uint64_t *)(v133 + 16);
        v134 = *(_QWORD **)(v133 + 16);
        v136 = *v134;
        is_blob_defined_in_predecessors = *(_QWORD *)(*v134 + 64);
        if (!is_blob_defined_in_predecessors)
          goto LABEL_229;
        if (!is_blob_defined_in_predecessors)
          goto LABEL_229;
        v137 = *(std::__shared_weak_count **)(v136 + 72);
        v273 = v137;
        if (v137)
        {
          v138 = (unint64_t *)&v137->__shared_owners_;
          do
            v139 = __ldxr(v138);
          while (__stxr(v139 + 1, v138));
          v134 = (_QWORD *)*v135;
        }
        v262 = is_blob_defined_in_predecessors;
        v265 = v134[2];
        v140 = (unsigned __int8 *)(is_blob_defined_in_predecessors + 288);
        v141 = std::__string_hash<char>::operator()[abi:ne180100](is_blob_defined_in_predecessors + 288);
        v142 = *((_QWORD *)&v289 + 1);
        if (!*((_QWORD *)&v289 + 1))
          goto LABEL_387;
        v143 = v141;
        v144 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v289 + 8));
        v144.i16[0] = vaddlv_u8(v144);
        v145 = v144.u32[0];
        if (v144.u32[0] > 1uLL)
        {
          v146 = v141;
          if (v141 >= *((_QWORD *)&v289 + 1))
            v146 = v141 % *((_QWORD *)&v289 + 1);
        }
        else
        {
          v146 = (*((_QWORD *)&v289 + 1) - 1) & v141;
        }
        v147 = *(unsigned __int8 ***)(v289 + 8 * v146);
        if (!v147 || (v148 = *v147) == 0)
LABEL_387:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        while (1)
        {
          v149 = *((_QWORD *)v148 + 1);
          if (v149 == v143)
            break;
          if (v145 > 1)
          {
            if (v149 >= v142)
              v149 %= v142;
          }
          else
          {
            v149 &= v142 - 1;
          }
          if (v149 != v146)
            goto LABEL_387;
LABEL_196:
          v148 = *(unsigned __int8 **)v148;
          if (!v148)
            goto LABEL_387;
        }
        v150 = std::equal_to<std::string>::operator()[abi:ne180100](v148 + 16, v140);
        if (!v150)
          goto LABEL_196;
        Espresso::espresso_os_log_subsystem((Espresso *)v150, v151);
        v152 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
        {
          Espresso::basic_block::debug_name((Espresso::basic_block *)&__p, *v131);
          v168 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v168 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v169 = (std::string::size_type)v140;
          if (*(char *)(v262 + 311) < 0)
            v169 = *(_QWORD *)v140;
          v170 = v265;
          if (*(char *)(v265 + 23) < 0)
            v170 = *(_QWORD *)v265;
          v171 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v148 + 6) - *((_QWORD *)v148 + 5)) >> 3);
          LODWORD(v299[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)v299[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v168;
          WORD2(v299[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v299[0].__r_.__value_.__r.__words[1] + 6) = v169;
          HIWORD(v299[0].__r_.__value_.__r.__words[2]) = 2080;
          v299[1].__r_.__value_.__r.__words[0] = v170;
          LOWORD(v299[1].__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v299[1].__r_.__value_.__r.__words[1] + 2) = v171;
          _os_log_debug_impl(&dword_190DAF000, v152, OS_LOG_TYPE_DEBUG, "\tpass_make_ssa: block=%s original_blob=%s phi=%s versions=%zu", (uint8_t *)v299, 0x2Au);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }

        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*v135 + 40));
        std::vector<std::string>::reserve((std::vector<std::string> *)(*v135 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v148 + 6) - *((_QWORD *)v148 + 5)) >> 3));
        check_and_insert_phi_bottom(v135, (uint64_t)v140, (uint64_t *)v140, (unint64_t *)v131, (uint64_t)&__str);
        v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
        is_blob_defined_in_predecessors = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v283, v140, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
        for (j = (_QWORD *)(is_blob_defined_in_predecessors + 56);
              ;
              check_and_insert_phi_bottom(v135, (uint64_t)(j + 3), (uint64_t *)v140, (unint64_t *)v131, (uint64_t)&__str))
        {
          j = (_QWORD *)*j;
          if (!j)
            break;
        }
        v155 = *(_QWORD *)(*v135 + 40);
        if (*(_QWORD *)(*v135 + 48) - v155 == 24)
        {
          v156 = *((_QWORD *)v148 + 5);
          if (*((_QWORD *)v148 + 6) != v156)
          {
            for (k = 0; k < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v148 + 6) - v156) >> 3); ++k)
            {
              v158 = v156 + 24 * k;
              v159 = *(unsigned __int8 *)(v158 + 23);
              if ((v159 & 0x80u) == 0)
                v160 = *(unsigned __int8 *)(v158 + 23);
              else
                v160 = *(_QWORD *)(v158 + 8);
              v161 = *(unsigned __int8 *)(v155 + 23);
              v162 = (char)v161;
              if ((v161 & 0x80u) != 0)
                v161 = *(_QWORD *)(v155 + 8);
              if (v160 != v161)
                goto LABEL_221;
              if (v162 >= 0)
                v34 = (const char *)v155;
              else
                v34 = *(const char **)v155;
              if ((v159 & 0x80) != 0)
              {
                is_blob_defined_in_predecessors = memcmp(*(const void **)v158, v34, *(_QWORD *)(v158 + 8));
                if ((_DWORD)is_blob_defined_in_predecessors)
                  goto LABEL_221;
              }
              else if (*(_BYTE *)(v158 + 23))
              {
                v163 = (unsigned __int8 *)v158;
                while (*v163 == *(unsigned __int8 *)v34)
                {
                  ++v163;
                  ++v34;
                  if (!--v159)
                    goto LABEL_223;
                }
LABEL_221:
                is_blob_defined_in_predecessors = Espresso::basic_block::is_blob_defined_in_predecessors(*v131, (_QWORD *)v158, (uint64_t)&__str);
                if ((_DWORD)is_blob_defined_in_predecessors)
                {
                  v164 = std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v280, v278, &v278);
                  v299[0].__r_.__value_.__r.__words[0] = v158;
                  v165 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v164 + 3), v158, (uint64_t)&std::piecewise_construct, (__int128 **)v299);
                  is_blob_defined_in_predecessors = (std::string::size_type)std::string::operator=((std::string *)(v165 + 5), (const std::string *)v155);
                }
              }
LABEL_223:
              v156 = *((_QWORD *)v148 + 5);
            }
          }
        }
        v132 = v268;
        if (v273)
        {
          v166 = (unint64_t *)&v273->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
            std::__shared_weak_count::__release_weak(v273);
          }
        }
LABEL_229:
        v133 = *(_QWORD *)(v133 + 8);
      }
      while (v133 != v132);
      v130 = v278;
      v129 = (std::string **)*((_QWORD *)v255 + 1);
      v128 = (std::string **)*((_QWORD *)v255 + 2);
LABEL_239:
      v278 = ++v130;
    }
    while (v130 < ((char *)v128 - (char *)v129) >> 4);
    while (v129 != v128)
    {
      v172 = *v129;
      v276[0] = &v289;
      v276[1] = &v292;
      v276[2] = &v298;
      v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v299;
      v299[0].__r_.__value_.__l.__size_ = (std::string::size_type)v299;
      v299[0].__r_.__value_.__r.__words[2] = 0;
      v173 = v172->__r_.__value_.__l.__size_;
      if ((std::string *)v173 != v172)
      {
        do
        {
          v174 = Espresso::pass_make_ssa::run_on_network(Espresso::net &)::$_0::operator()((uint64_t)v276, (uint64_t **)(v173 + 16));
          v175 = *(std::string **)(v173 + 8);
          if (v174)
          {
            if (v175 == v172)
            {
              LOBYTE(v176) = 1;
LABEL_248:
              v175 = v172;
            }
            else
            {
              while (1)
              {
                v176 = Espresso::pass_make_ssa::run_on_network(Espresso::net &)::$_0::operator()((uint64_t)v276, (uint64_t **)&v175->__r_.__value_.__r.__words[2]);
                if (!v176)
                  break;
                v175 = (std::string *)v175->__r_.__value_.__l.__size_;
                if (v175 == v172)
                  goto LABEL_248;
              }
            }
            if ((std::string *)v173 != v175)
            {
              v177 = v175->__r_.__value_.__r.__words[0];
              if (v299 != v172)
              {
                if (v177 == v173)
                {
                  v180 = 1;
                }
                else
                {
                  v178 = -1;
                  v179 = v173;
                  do
                  {
                    v179 = *(_QWORD *)(v179 + 8);
                    ++v178;
                  }
                  while (v179 != v177);
                  v180 = v178 + 2;
                }
                v172->__r_.__value_.__r.__words[2] -= v180;
                v299[0].__r_.__value_.__r.__words[2] += v180;
              }
              v181 = *(_QWORD *)v173;
              *(_QWORD *)(v181 + 8) = *(_QWORD *)(v177 + 8);
              **(_QWORD **)(v177 + 8) = v181;
              v182 = v299[0].__r_.__value_.__r.__words[0];
              *(_QWORD *)(v299[0].__r_.__value_.__r.__words[0] + 8) = v173;
              *(_QWORD *)v173 = v182;
              v299[0].__r_.__value_.__r.__words[0] = v177;
              *(_QWORD *)(v177 + 8) = v299;
            }
            if (!v176)
              v175 = (std::string *)v175->__r_.__value_.__l.__size_;
          }
          v173 = (std::string::size_type)v175;
        }
        while (v175 != v172);
      }
      std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear((uint64_t *)v299);
      v129 += 2;
    }
  }
  while ((_DWORD)v298);
  v278 = 0;
  v183 = *((_QWORD *)v255 + 1);
  if (*((_QWORD *)v255 + 2) == v183)
    goto LABEL_308;
  v184 = 0;
  while (2)
  {
    memset(v299, 0, 32);
    LODWORD(v299[1].__r_.__value_.__r.__words[1]) = 1065353216;
    v185 = *(_QWORD *)(v183 + 16 * v184);
    v186 = *(_QWORD *)(v185 + 8);
    if (v186 == v185)
      goto LABEL_307;
    while (2)
    {
      v187 = *(_QWORD **)(v186 + 16);
      v188 = *v187;
      v189 = *(const void **)(*v187 + 64);
      if (v189
      {
        v190 = *(std::__shared_weak_count **)(v188 + 72);
        if (v190)
        {
          v191 = (unint64_t *)&v190->__shared_owners_;
          do
            v192 = __ldxr(v191);
          while (__stxr(v192 + 1, v191));
          do
            v193 = __ldaxr(v191);
          while (__stlxr(v193 - 1, v191));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
        goto LABEL_300;
      }
      v194 = (std::string *)v187[5];
      v195 = (std::string *)v187[6];
      if (v194 == v195)
        goto LABEL_300;
      v196 = v278;
      while (2)
      {
        v197 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v299, (uint64_t)v194);
        if (v197)
          goto LABEL_278;
        if (!*((_QWORD *)&v280 + 1))
          goto LABEL_279;
        v198 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v280 + 8));
        v198.i16[0] = vaddlv_u8(v198);
        if (v198.u32[0] > 1uLL)
        {
          v199 = v196;
          if (v196 >= *((_QWORD *)&v280 + 1))
            v199 = v196 % *((_QWORD *)&v280 + 1);
        }
        else
        {
          v199 = (*((_QWORD *)&v280 + 1) - 1) & v196;
        }
        v200 = *(_QWORD **)(v280 + 8 * v199);
        if (!v200)
          goto LABEL_279;
        v201 = (_QWORD *)*v200;
        if (!v201)
          goto LABEL_279;
        while (2)
        {
          v202 = v201[1];
          if (v202 != v196)
          {
            if (v198.u32[0] > 1uLL)
            {
              if (v202 >= *((_QWORD *)&v280 + 1))
                v202 %= *((_QWORD *)&v280 + 1);
            }
            else
            {
              v202 &= *((_QWORD *)&v280 + 1) - 1;
            }
            if (v202 != v199)
              goto LABEL_279;
            goto LABEL_296;
          }
          if (v201[2] != v196)
          {
LABEL_296:
            v201 = (_QWORD *)*v201;
            if (!v201)
              goto LABEL_279;
            continue;
          }
          break;
        }
        v203 = std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v280, v196, &v278);
        v204 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v203 + 3, (uint64_t)v194);
        std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v280, v196, &v278);
        if (v204)
        {
          v205 = std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v280, v196, &v278);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
          v197 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v205 + 3), (uint64_t)v194, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
LABEL_278:
          std::string::operator=(v194, (const std::string *)(v197 + 5));
        }
LABEL_279:
        if (++v194 != v195)
          continue;
        break;
      }
LABEL_300:
      v206 = *(_QWORD *)(v186 + 16);
      v207 = *(const std::string **)(v206 + 16);
      v208 = *(const std::string **)(v206 + 24);
      while (v207 != v208)
      {
        v209 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v292, (uint64_t)v207);
        if (v209)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v209 + 5);
          v210 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v299, (uint64_t)(v209 + 5), (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
          std::string::operator=((std::string *)(v210 + 5), v207);
        }
        ++v207;
      }
      v186 = *(_QWORD *)(v186 + 8);
      if (v186 != v185)
        continue;
      break;
    }
    v184 = v278;
LABEL_307:
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v299);
    v278 = ++v184;
    v183 = *((_QWORD *)v255 + 1);
    if (v184 < (*((_QWORD *)v255 + 2) - v183) >> 4)
      continue;
    break;
  }
LABEL_308:
  v211 = (__int128 *)v290;
  if ((_QWORD)v290)
  {
    while (2)
    {
      v212 = *(__int128 **)v211;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v211 + 6) - *((_QWORD *)v211 + 5)) >> 3) <= 1)
      {
        v213 = *((_QWORD *)&v289 + 1);
        v214 = *((_QWORD *)v211 + 1);
        v215 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v289 + 8));
        v215.i16[0] = vaddlv_u8(v215);
        if (v215.u32[0] > 1uLL)
        {
          if (v214 >= *((_QWORD *)&v289 + 1))
            v214 %= *((_QWORD *)&v289 + 1);
        }
        else
        {
          v214 &= *((_QWORD *)&v289 + 1) - 1;
        }
        v216 = *(__int128 **)(v289 + 8 * v214);
        do
        {
          v217 = v216;
          v216 = *(__int128 **)v216;
        }
        while (v216 != v211);
        if (v217 == &v290)
          goto LABEL_392;
        v218 = *((_QWORD *)v217 + 1);
        if (v215.u32[0] > 1uLL)
        {
          if (v218 >= *((_QWORD *)&v289 + 1))
            v218 %= *((_QWORD *)&v289 + 1);
        }
        else
        {
          v218 &= *((_QWORD *)&v289 + 1) - 1;
        }
        v219 = *(__int128 **)v211;
        if (v218 == v214)
        {
LABEL_329:
          if (v219)
            goto LABEL_330;
        }
        else
        {
LABEL_392:
          if (!v212)
            goto LABEL_328;
          v220 = *((_QWORD *)v212 + 1);
          if (v215.u32[0] > 1uLL)
          {
            if (v220 >= *((_QWORD *)&v289 + 1))
              v220 %= *((_QWORD *)&v289 + 1);
          }
          else
          {
            v220 &= *((_QWORD *)&v289 + 1) - 1;
          }
          v219 = *(__int128 **)v211;
          if (v220 != v214)
          {
LABEL_328:
            *(_QWORD *)(v289 + 8 * v214) = 0;
            v219 = *(__int128 **)v211;
            goto LABEL_329;
          }
LABEL_330:
          v221 = *((_QWORD *)v219 + 1);
          if (v215.u32[0] > 1uLL)
          {
            if (v221 >= v213)
              v221 %= v213;
          }
          else
          {
            v221 &= v213 - 1;
          }
          if (v221 != v214)
          {
            *(_QWORD *)(v289 + 8 * v221) = v217;
            v219 = *(__int128 **)v211;
          }
        }
        *(_QWORD *)v217 = v219;
        *(_QWORD *)v211 = 0;
        --*((_QWORD *)&v290 + 1);
        v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v211;
        v299[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v290;
        v299[0].__r_.__value_.__s.__data_[16] = 1;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v299);
      }
      v211 = v212;
      if (!v212)
        break;
      continue;
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear((uint64_t)v275);
  for (m = (_QWORD *)v290; m; m = (_QWORD *)*m)
  {
    v224 = m[5];
    v223 = m[6];
    v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(m + 2);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v275, (uint64_t)(m + 2), (uint64_t)&std::piecewise_construct, (__int128 **)v299)[5] = 0xAAAAAAAAAAAAAAABLL * ((v223 - v224) >> 3);
  }
  if ((__int128 *)(v247 + 184) != &v292)
  {
    *(_DWORD *)(v247 + 216) = v294;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)(v247 + 184), (uint64_t *)v293, 0);
  }
  v225 = (_QWORD *)(v247 + 144);
  if ((_QWORD *)(v247 + 144) != v275)
  {
    *(_DWORD *)(v247 + 176) = v252[2].__shared_weak_owners_;
    v226 = v252[2].__vftable;
    v227 = *(_QWORD *)(v247 + 152);
    if (v227)
    {
      for (n = 0; n != v227; ++n)
        *(_QWORD *)(*v225 + 8 * n) = 0;
      v229 = *(_QWORD *)(v247 + 160);
      *(_QWORD *)(v247 + 160) = 0;
      *(_QWORD *)(v247 + 168) = 0;
      if (v229)
        v230 = v226 == 0;
      else
        v230 = 1;
      if (v230)
      {
        v231 = (void **)v229;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v229 + 16), (const std::string *)&v226->__on_zero_shared);
          *(_QWORD *)(v229 + 40) = v226[1].~__shared_weak_count;
          v231 = *(void ***)v229;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)v225, v229);
          v226 = (std::__shared_weak_count_vtbl *)v226->~__shared_weak_count;
          if (v231)
            v232 = v226 == 0;
          else
            v232 = 1;
          v229 = (uint64_t)v231;
        }
        while (!v232);
      }
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(v231);
    }
    for (; v226; v226 = (std::__shared_weak_count_vtbl *)v226->~__shared_weak_count)
    {
      v233 = (char *)operator new(0x30uLL);
      v234 = (uint64_t)v233;
      v235 = v233 + 16;
      *(_QWORD *)v233 = 0;
      *((_QWORD *)v233 + 1) = 0;
      if (SHIBYTE(v226->__on_zero_shared_weak) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v233 + 16), (const std::string::value_type *)v226->__on_zero_shared, (std::string::size_type)v226->__get_deleter);
      }
      else
      {
        v236 = *(_OWORD *)&v226->__on_zero_shared;
        *((_QWORD *)v233 + 4) = v226->__on_zero_shared_weak;
        *v235 = v236;
      }
      *(_QWORD *)(v234 + 40) = v226[1].~__shared_weak_count;
      *(_QWORD *)(v234 + 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v235);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)v225, v234);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(v251, (uint64_t *)&v292);
  for (ii = (unsigned __int8 *)v290; ii; ii = *(unsigned __int8 **)ii)
  {
    v299[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(ii + 16);
    v238 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v250, ii + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v299)+ 40;
    if (v238 != (char *)(ii + 40))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v238, *((std::string **)ii + 5), *((std::string **)ii + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)ii + 6) - *((_QWORD *)ii + 5)) >> 3));
  }
  Espresso::net::_tag_inputs_and_outputs(v274);
  do
    v239 = __ldxr(v5);
  while (__stxr(v239 + 1, v5));
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v248;
  *(_QWORD *)(a2 + 16) = v252;
  do
    v240 = __ldxr(v5);
  while (__stxr(v240 + 1, v5));
  do
    v241 = __ldaxr(v5);
  while (__stlxr(v241 - 1, v5));
  if (!v241)
  {
    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
    std::__shared_weak_count::__release_weak(v252);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)&v280);
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&v283);
  if (v253)
  {
    v242 = (unint64_t *)&v253->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__str.__r_.__value_.__r.__words[2]);
  v244 = (void *)__str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v244)
    operator delete(v244);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::~__hash_table((uint64_t)&v289);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v292);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v296);
  v245 = (void *)v295;
  *(_QWORD *)&v295 = 0;
  if (v245)
    operator delete(v245);
  do
    v246 = __ldaxr(v5);
  while (__stlxr(v246 - 1, v5));
  if (!v246)
  {
    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
    std::__shared_weak_count::__release_weak(v252);
  }
}

void sub_19132E0F0()
{
  JUMPOUT(0x19132E410);
}

void sub_19132E0FC()
{
  void **v0;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v0);
  JUMPOUT(0x19132E400);
}

void sub_19132E108(void *a1, int a2)
{
  void **v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x19132E4BCLL);
}

void sub_19132E12C()
{
  __cxa_end_catch();
  JUMPOUT(0x19132E400);
}

void sub_19132E138(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x19132E4BCLL);
}

void sub_19132E14C()
{
  JUMPOUT(0x19132E154);
}

void sub_19132E168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  unint64_t *v65;
  uint64_t v66;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  unint64_t v72;

  std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)&a43);
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a49);
  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)a56);
  v70 = __p;
  __p = 0;
  if (v70)
    operator delete(v70);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::~__hash_table((uint64_t)&a59);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a65);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(v66 - 208));
  v71 = *(void **)(v66 - 224);
  *(_QWORD *)(v66 - 224) = 0;
  if (v71)
    operator delete(v71);
  do
    v72 = __ldaxr(v65);
  while (__stlxr(v72 - 1, v65));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(a1);
}

void *Espresso::net::get_analysis<Espresso::control_flow_graph>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::runtime_error *v19;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  const void *v24;
  std::__shared_weak_count *v25;

  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  v1 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a1 + 1120), (uint64_t)&v22);
  v2 = v1;
  if (!v1)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_20;
  }
  v3 = (const void *)v1[3];
  v4 = (std::__shared_weak_count *)v2[4];
  v24 = v3;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!v3)
  {
LABEL_20:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "Analysis missing: ");
    v17 = std::string::append(&v22, (const std::string::value_type *)((unint64_t)"N8Espresso18control_flow_graphE" & 0x7FFFFFFFFFFFFFFFLL));
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v7)
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "Analysis mismatch: ");
    v20 = std::string::append(&v22, (const std::string::value_type *)((unint64_t)"N8Espresso18control_flow_graphE" & 0x7FFFFFFFFFFFFFFFLL));
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v19, &v23);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = v7;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v8;
}

void sub_19132E6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x68uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    *((_QWORD *)v16 + 4) = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 24) = 1065353216;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v15;
          if (*v15)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v15;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v37 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v38 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_19132EC00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *Espresso::unique_vector<std::string>::push_back_if_not_present(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  std::string *result;
  std::string *v6;

  v4 = a1 + 24;
  result = (std::string *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a1 + 24), (uint64_t)a2);
  if (!result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v4, (uint64_t)a2, (uint64_t)a2);
    v6 = *(std::string **)(a1 + 8);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 16))
    {
      result = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, (uint64_t)a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1, a2);
      result = v6 + 1;
    }
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

uint64_t std::map<std::string,Espresso::blob_numerical_properties>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15[3];
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v16 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__construct_node<std::pair<std::string const,Espresso::blob_numerical_properties> const&>((uint64_t)v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15[0]);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19132EDDC(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t i;
  unint64_t v15;
  char *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v33[2];
  char v34;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(_QWORD *)i)
      {
        v15 = *(_QWORD *)(i + 8);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(i + 16), a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x50uLL);
  v33[0] = (uint64_t)v16;
  v33[1] = a1 + 16;
  v34 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  v17 = (std::string *)(v16 + 16);
  v18 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    *((_QWORD *)v16 + 4) = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  v34 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v26)
      goto LABEL_33;
    if (prime < *(_QWORD *)&v26)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v26 < 3uLL || (v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < *(_QWORD *)&v26)
LABEL_33:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *(_QWORD *)v33[0] = *v30;
    *v30 = v33[0];
  }
  else
  {
    *(_QWORD *)v33[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v33[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v33[0])
    {
      v31 = *(_QWORD *)(*(_QWORD *)v33[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v31 >= v10)
          v31 %= v10;
      }
      else
      {
        v31 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v33[0];
    }
  }
  i = v33[0];
  v33[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>>>>::reset[abi:ne180100](v33, 0);
  return i;
}

void sub_19132F12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void check_and_insert_phi_bottom(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unsigned __int8 **v10;
  uint64_t v11;
  size_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  Espresso *is_blob_defined_in_predecessors;
  const char *v19;
  uint64_t v20;
  char **v21;
  std::string *v22;
  std::string *v23;
  NSObject *v24;
  void **v25;
  uint64_t *v26;
  const void *v27;
  void *__p[2];
  char v29;
  uint8_t buf[4];
  void **v31;
  __int16 v32;
  uint64_t *v33;
  __int16 v34;
  const void *v35;
  __int16 v36;
  unsigned __int8 **v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 ***)(*a1 + 16);
  v11 = *(unsigned __int8 *)(a2 + 23);
  v12 = *(_QWORD *)(a2 + 8);
  if ((v11 & 0x80u) == 0)
    v13 = (unsigned __int8 *)*(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(unsigned __int8 **)(a2 + 8);
  v14 = (unsigned __int8 *)*((unsigned __int8 *)v10 + 23);
  v15 = (char)v14;
  if ((char)v14 < 0)
    v14 = v10[1];
  if (v13 == v14)
  {
    if (v15 >= 0)
      v16 = *(unsigned __int8 ***)(*a1 + 16);
    else
      v16 = (unsigned __int8 **)*v10;
    if ((v11 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a2, v16, v12))
        return;
    }
    else
    {
      if (!(_DWORD)v11)
        return;
      for (i = (unsigned __int8 *)a2; *i == *(unsigned __int8 *)v16; ++i)
      {
        v16 = (unsigned __int8 **)((char *)v16 + 1);
        if (!--v11)
          return;
      }
    }
  }
  is_blob_defined_in_predecessors = (Espresso *)Espresso::basic_block::is_blob_defined_in_predecessors(*a4, (_QWORD *)a2, a5);
  if ((_DWORD)is_blob_defined_in_predecessors)
  {
    v20 = *a1;
    v21 = (char **)(*a1 + 40);
    v22 = *(std::string **)(*a1 + 48);
    if ((unint64_t)v22 >= *(_QWORD *)(*a1 + 56))
    {
      v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v21, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v21, (__int128 *)a2);
      v23 = v22 + 1;
    }
    *(_QWORD *)(v20 + 48) = v23;
  }
  else
  {
    Espresso::espresso_os_log_subsystem(is_blob_defined_in_predecessors, v19);
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      Espresso::basic_block::debug_name((Espresso::basic_block *)__p, *a4);
      if (v29 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      if (*((char *)a3 + 23) >= 0)
        v26 = a3;
      else
        v26 = (uint64_t *)*a3;
      if (*(char *)(a2 + 23) >= 0)
        v27 = (const void *)a2;
      else
        v27 = *(const void **)a2;
      if (*((char *)v10 + 23) < 0)
        v10 = (unsigned __int8 **)*v10;
      *(_DWORD *)buf = 136315906;
      v31 = v25;
      v32 = 2080;
      v33 = v26;
      v34 = 2080;
      v35 = v27;
      v36 = 2080;
      v37 = v10;
      _os_log_debug_impl(&dword_190DAF000, v24, OS_LOG_TYPE_DEBUG, "\t\tpass_make_ssa: block=%s original_blob=%s version=%s not reachable from phi=%s", buf, 0x2Au);
      if (v29 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_19132F348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v5;
  *((_QWORD *)v13 + 2) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  i = (_QWORD *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_19132F770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::pass_make_ssa::run_on_network(Espresso::net &)::$_0::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  const void *v5;
  Espresso *v7;
  const char *v8;
  Espresso *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  __int128 v38;
  unsigned __int8 *v39;
  unint64_t *v40;
  unint64_t v41;
  const void *v43;
  unint64_t v44;
  _BYTE buf[12];
  __int16 v46;
  unint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = **a2;
  v5 = *(const void **)(v4 + 64);
  if (!v5)
    return 0;
  if (!v7)
    return 0;
  v9 = v7;
  v10 = *(std::__shared_weak_count **)(v4 + 72);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v3 = *a2;
  }
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v3[6] - v3[5]) >> 3);
  v14 = v13 < 2;
  if (v13 <= 1)
  {
    v15 = v3[2];
    Espresso::espresso_os_log_subsystem(v7, v8);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v43 = (const void *)v15;
      if (*(char *)(v15 + 23) < 0)
        v43 = *(const void **)v15;
      v44 = 0xAAAAAAAAAAAAAAABLL * (((*a2)[6] - (*a2)[5]) >> 3);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v43;
      v46 = 2048;
      v47 = v44;
      _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "\tpass_make_ssa: removing phi=%s bottom_names.size()=%zu", buf, 0x16u);
    }

    v17 = *(_QWORD *)a1;
    *(_QWORD *)buf = (char *)v9 + 288;
    v18 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (unsigned __int8 *)v9 + 288, (__int128 **)buf);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v18 + 8, v15);
    v20 = (unsigned __int8 *)*((_QWORD *)v18 + 5);
    v19 = (unsigned __int8 *)*((_QWORD *)v18 + 6);
    if (v20 == v19)
    {
      v19 = (unsigned __int8 *)*((_QWORD *)v18 + 5);
    }
    else
    {
      v21 = *(unsigned __int8 *)(v15 + 23);
      v22 = *(_QWORD *)(v15 + 8);
      if ((v21 & 0x80u) == 0)
        v23 = *(unsigned __int8 *)(v15 + 23);
      else
        v23 = *(_QWORD *)(v15 + 8);
      while (1)
      {
        v24 = v20[23];
        v25 = (char)v24;
        if ((v24 & 0x80u) != 0)
          v24 = *((_QWORD *)v20 + 1);
        if (v23 == v24)
        {
          if (v25 >= 0)
            v26 = v20;
          else
            v26 = *(unsigned __int8 **)v20;
          if ((v21 & 0x80) == 0)
          {
            if (!(_DWORD)v21)
              break;
            v27 = (unsigned __int8 *)v15;
            v28 = v21;
            while (*v27 == *v26)
            {
              ++v27;
              ++v26;
              if (!--v28)
                goto LABEL_29;
            }
            goto LABEL_26;
          }
          if (!memcmp(*(const void **)v15, v26, v22))
            break;
        }
LABEL_26:
        v20 += 24;
        if (v20 == v19)
          goto LABEL_55;
      }
LABEL_29:
      if (v20 == v19)
      {
LABEL_55:
        v30 = v19;
        goto LABEL_56;
      }
      v29 = v20 + 24;
      if (v20 + 24 != v19)
      {
        v30 = v20;
        while (1)
        {
          v31 = v20;
          v20 = v29;
          v32 = *(unsigned __int8 *)(v15 + 23);
          if ((v32 & 0x80u) == 0)
            v33 = *(unsigned __int8 *)(v15 + 23);
          else
            v33 = *(_QWORD *)(v15 + 8);
          v34 = v31[47];
          v35 = (char)v34;
          if ((v34 & 0x80u) != 0)
            v34 = *((_QWORD *)v31 + 4);
          if (v33 != v34)
            goto LABEL_48;
          if (v35 >= 0)
            v36 = v20;
          else
            v36 = *(unsigned __int8 **)v20;
          if ((v32 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v15, v36, *(_QWORD *)(v15 + 8)))
              goto LABEL_48;
          }
          else if (*(_BYTE *)(v15 + 23))
          {
            v37 = (unsigned __int8 *)v15;
            while (*v37 == *v36)
            {
              ++v37;
              ++v36;
              if (!--v32)
                goto LABEL_51;
            }
LABEL_48:
            if ((char)v30[23] < 0)
              operator delete(*(void **)v30);
            v38 = *(_OWORD *)v20;
            *((_QWORD *)v30 + 2) = *((_QWORD *)v20 + 2);
            *(_OWORD *)v30 = v38;
            v30 += 24;
            v31[47] = 0;
            *v20 = 0;
          }
LABEL_51:
          v29 = v20 + 24;
          if (v20 + 24 == v19)
          {
            v19 = (unsigned __int8 *)*((_QWORD *)v18 + 6);
            goto LABEL_56;
          }
        }
      }
    }
    v30 = v20;
LABEL_56:
    if (v30 + 24 != v19)
    {
      do
      {
        if ((char)v30[23] < 0)
          operator delete(*(void **)v30);
        *(_OWORD *)v30 = *(_OWORD *)(v30 + 24);
        *((_QWORD *)v30 + 2) = *((_QWORD *)v30 + 5);
        v30[47] = 0;
        v39 = v30 + 48;
        v30[24] = 0;
        v30 += 24;
      }
      while (v39 != v19);
      v19 = (unsigned __int8 *)*((_QWORD *)v18 + 6);
    }
    while (v19 != v30)
    {
      if ((char)*(v19 - 1) < 0)
        operator delete(*((void **)v19 - 3));
      v19 -= 24;
    }
    *((_QWORD *)v18 + 6) = v30;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(*(_QWORD **)(a1 + 8), v15);
    ++**(_DWORD **)(a1 + 16);
  }
  if (v10)
  {
    v40 = (unint64_t *)&v10->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v14;
}

void sub_19132FB70(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::unique_vector<std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x40uLL);
  v30[0] = v14;
  v30[1] = a1 + 16;
  v31 = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v17 = (std::string *)(v14 + 16);
  v18 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 7) = 0;
  v31 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v14 = *v27;
LABEL_41:
    *v27 = v14;
    goto LABEL_42;
  }
  *(_QWORD *)v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v26 + 8 * v4) = v16;
  if (*(_QWORD *)v14)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return v14;
}

void sub_19132FEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::unique_vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::unique_vector<std::string>>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 48);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1913300F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[2];
  char v14;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_19;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3)
        goto LABEL_20;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    v13[0] = v3;
    v13[1] = a1 + 2;
    v14 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      a3 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return a3;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_191330378(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__shared_ptr_emplace<Espresso::basic_block::instruction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::basic_block::instruction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::basic_block::instruction>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = a1 + 24;
  v4 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__construct_node<std::pair<std::string const,Espresso::blob_numerical_properties> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  _QWORD *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  v8 = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v7 + 9) = 0;
  *(_OWORD *)(v7 + 56) = v8;
  *((_QWORD *)v7 + 10) = 0;
  *((_QWORD *)v7 + 11) = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v7 + 9, *(const void **)(a3 + 40), *(_QWORD *)(a3 + 48), (uint64_t)(*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_191330614(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<Espresso::analysis_make_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_make_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_make_ssa>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1913308A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_wavernn_ane::~pass_wavernn_ane(Espresso::pass_wavernn_ane *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_wavernn_ane::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_wavernn_ane::run_on_network(Espresso::pass_wavernn_ane *this@<X0>, Espresso::net *a2@<X1>, Espresso::pass_wavernn_ane *a3@<X8>)
{
  Espresso::pass_wavernn_ane::run_v3(a3, this, (uint64_t)a2);
}

void Espresso::pass_wavernn_ane::run_v3(Espresso::pass_wavernn_ane *this, Espresso::net *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t i;
  void **v14;
  uint64_t v15;
  int v16;
  _OWORD *v17;
  void *v18;
  __int128 v19;
  _OWORD *v20;
  void *v21;
  __int128 v22;
  _OWORD *v23;
  void *v24;
  __int128 v25;
  int v26;
  _OWORD *v27;
  void *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  size_t v74;
  void **v75;
  const void *v76;
  size_t v77;
  void **v78;
  const void *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  char v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void **v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  unint64_t *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  void *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  void *v124;
  size_t v125;
  void **v126;
  const void *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t *v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  _QWORD *v156;
  uint64_t *v157;
  uint64_t *v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  size_t v179;
  void **v180;
  const void *v181;
  Espresso::net *v182;
  _QWORD *v183;
  uint64_t v184;
  size_t v185;
  void **v186;
  const void *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  char v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  const std::string::value_type *v212;
  uint64_t v213;
  const std::string::value_type *v214;
  std::string::value_type *v215;
  const std::string::value_type *v216;
  _OWORD *v219;
  __int128 v220;
  const std::string::value_type *v221;
  uint64_t v222;
  int v223;
  const std::string::value_type *v224;
  std::string::value_type *v225;
  const std::string::value_type *v226;
  _OWORD *v228;
  __int128 v229;
  const std::string::value_type *v230;
  uint64_t v231;
  int v232;
  const std::string::value_type *v233;
  std::string::value_type *v234;
  const std::string::value_type *v235;
  _OWORD *v237;
  __int128 v238;
  std::string *v239;
  std::string *v240;
  std::string *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  char *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  const std::string::value_type **v252;
  __int128 v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  void **v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  _OWORD *v278;
  _OWORD *v279;
  _OWORD *v280;
  _OWORD *v281;
  _OWORD *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  _QWORD *v300;
  unint64_t *v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  void *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  __int128 *v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v336;
  Espresso::net *v337;
  uint64_t v338;
  Espresso::net *v339;
  std::string **v340;
  void **v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD v344[2];
  uint64_t v345;
  std::__shared_weak_count *v346;
  void *v347[2];
  char v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  void *v351[2];
  char v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  _QWORD v355[2];
  uint64_t v356;
  std::__shared_weak_count *v357;
  void *v358[2];
  char v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  _QWORD v362[2];
  uint64_t v363;
  std::__shared_weak_count *v364;
  void *v365[2];
  char v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  void *v369[2];
  char v370;
  uint64_t v371;
  std::__shared_weak_count *v372;
  void *v373;
  size_t v374;
  unsigned __int8 v375;
  std::string *v376;
  uint64_t v377;
  _QWORD v378[4];
  __int128 v379;
  __int128 v380;
  int v381;
  int v382;
  int v383;
  __int16 v384;
  _QWORD *v385;
  std::string *v386;
  std::string *v387;
  std::string *v388;
  int v389;
  uint64_t v390;
  std::__shared_weak_count *v391;
  uint64_t v392;
  std::__shared_weak_count *v393;
  int v394;
  __int16 v395;
  void **v396[2];
  std::string **v397;
  std::string *v398;
  std::string *v399;
  void **p_data;
  void *v401;
  void *v402;
  char *v403;
  uint64_t v404;
  std::__shared_weak_count *v405;
  std::string **v406;
  std::__shared_weak_count *v407;
  void *__p[2];
  __int128 v409;
  _BYTE v410[32];
  uint64_t v411;
  char v412;
  std::__shared_weak_count *v413;
  std::__shared_weak_count *v414;
  std::__shared_weak_count *v415;
  _BYTE v416[72];
  _BYTE v417[24];
  _BYTE *v418;
  _BYTE v419[24];
  _BYTE *v420;
  void *v421[2];
  __int128 v422;
  uint64_t v423;
  void *v424[2];
  uint64_t v425;
  _QWORD v426[2];
  uint64_t v427;
  void *v428[2];
  __int128 v429;
  void (*v430)(uint64_t);
  const char *v431;
  char **v432;
  char *v433;
  uint64_t v434;
  void *v435[2];
  char v436;
  std::string v437;
  __int128 v438;
  uint64_t v439;
  __int128 v440;
  __int128 v441;
  int v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  _BYTE v449[24];
  __int128 v450;

  *(_QWORD *)&v450 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v373, "/tmp/");
  std::string::basic_string[abi:ne180100]<0>(__p, "hidden_state");
  v421[0] = __p;
  *((_DWORD *)a2 + 6) = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3 + 136, (unsigned __int8 *)__p, (__int128 **)v421)+ 5)+ 8);
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v421[0] = __p;
  *((_DWORD *)a2 + 7) = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3 + 136, (unsigned __int8 *)__p, (__int128 **)v421)+ 5)+ 8);
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  std::__tree<std::string>::destroy(a3 + 280, *(char **)(a3 + 288));
  *(_QWORD *)(a3 + 288) = 0;
  *(_QWORD *)(a3 + 296) = 0;
  *(_QWORD *)(a3 + 280) = a3 + 288;
  std::__tree<std::string>::destroy(a3 + 304, *(char **)(a3 + 312));
  *(_QWORD *)(a3 + 312) = 0;
  *(_QWORD *)(a3 + 320) = 0;
  *(_QWORD *)(a3 + 304) = a3 + 312;
  v5 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)&v447 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)&v447 + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v399 = 0;
  v398 = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)__p, (uint64_t *)&v447, 0, (uint64_t *)&v398);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  WORD2(v438) = 0;
  LODWORD(v438) = 0;
  std::string::basic_string[abi:ne180100]<0>(v428, "general_concat");
  std::string::basic_string[abi:ne180100]<0>(&v379, "input_concat");
  v336 = a3 + 136;
  std::string::basic_string[abi:ne180100]<0>(v421, "mel");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v422 + 1, "in_fine_bit_scaled");
  std::string::basic_string[abi:ne180100]<0>(&v424[1], "in_coarse_bit_scaled");
  v376 = 0;
  v377 = 0;
  v378[0] = 0;
  *(_QWORD *)&v440 = &v376;
  BYTE8(v440) = 0;
  v376 = (std::string *)operator new(0x48uLL);
  v377 = (uint64_t)v376;
  v378[0] = v376 + 3;
  v377 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v378, (__int128 *)v421, (__int128 *)&v427, v376);
  std::string::basic_string[abi:ne180100]<0>(v449, "input");
  v440 = 0uLL;
  *(_QWORD *)&v441 = 0;
  v401 = &v440;
  LOBYTE(v402) = 0;
  *(_QWORD *)&v440 = operator new(0x18uLL);
  *((_QWORD *)&v440 + 1) = v440;
  *(_QWORD *)&v441 = v440 + 24;
  *((_QWORD *)&v440 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v441, (__int128 *)v449, &v450, (std::string *)v440);
  Espresso::sequential_builder::add<Espresso::general_concat_params_t>((uint64_t *)&v445, (uint64_t *)__p, (uint64_t)v428, (uint64_t)&v379, (uint64_t)&v438, (uint64_t)v376, v377, (uint64_t *)&v440);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v445 + 1);
  if (*((_QWORD *)&v445 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v401 = &v440;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v401);
  if ((v449[23] & 0x80000000) != 0)
    operator delete(*(void **)v449);
  *(_QWORD *)v449 = &v376;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v426[i]) < 0)
      operator delete(v424[i + 1]);
  }
  if (SBYTE7(v380) < 0)
    operator delete((void *)v379);
  if (SBYTE7(v429) < 0)
    operator delete(v428[0]);
  *(_OWORD *)v421 = 0u;
  v422 = 0u;
  LODWORD(v423) = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)__p, (__int128 **)a3, 0, (uint64_t)v421);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  std::string::basic_string[abi:ne180100]<0>(v421, "");
  *((_QWORD *)&v429 + 1) = 0;
  Espresso::net::pprint(a3, (uint64_t)v421, (uint64_t)v428);
  v14 = (void **)*((_QWORD *)&v429 + 1);
  if (*((void ***)&v429 + 1) == v428)
  {
    v15 = 4;
    v14 = v428;
  }
  else
  {
    if (!*((_QWORD *)&v429 + 1))
      goto LABEL_33;
    v15 = 5;
  }
  (*((void (**)(void))*v14 + v15))();
LABEL_33:
  if (SBYTE7(v422) < 0)
    operator delete(v421[0]);
  *((_QWORD *)&v379 + 1) = 0;
  *(_QWORD *)&v380 = 0;
  *(_QWORD *)&v379 = (char *)&v379 + 8;
  v16 = *((_DWORD *)a2 + 7) - 2;
  *(_OWORD *)&v449[4] = 0uLL;
  *(_DWORD *)v449 = v16;
  *(_DWORD *)&v449[20] = 1;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v449, 0, (uint64_t)v421);
  std::string::basic_string[abi:ne180100]<0>(&v401, "mel");
  *(_QWORD *)&v443 = &v401;
  v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v379, &v401, (_OWORD **)&v443);
  v18 = (void *)*((_QWORD *)v17 + 12);
  v19 = v422;
  *(_OWORD *)((char *)v17 + 56) = *(_OWORD *)v421;
  *(_OWORD *)((char *)v17 + 72) = v19;
  *((_QWORD *)v17 + 11) = v423;
  if (v18)
  {
    *((_QWORD *)v17 + 13) = v18;
    operator delete(v18);
    *((_QWORD *)v17 + 12) = 0;
    *((_QWORD *)v17 + 13) = 0;
    *((_QWORD *)v17 + 14) = 0;
  }
  v17[6] = *(_OWORD *)v424;
  *((_QWORD *)v17 + 14) = v425;
  v425 = 0;
  *(_OWORD *)v424 = 0uLL;
  if (SHIBYTE(v403) < 0)
  {
    operator delete(v401);
    if (v424[0])
    {
      v424[1] = v424[0];
      operator delete(v424[0]);
    }
  }
  *(_QWORD *)&v449[12] = 0;
  *(_QWORD *)&v449[4] = 0;
  *(_DWORD *)v449 = 1;
  *(_DWORD *)&v449[20] = 1;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v449, 0, (uint64_t)v421);
  std::string::basic_string[abi:ne180100]<0>(&v401, "in_coarse_bit_scaled");
  *(_QWORD *)&v443 = &v401;
  v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v379, &v401, (_OWORD **)&v443);
  v21 = (void *)*((_QWORD *)v20 + 12);
  v22 = v422;
  *(_OWORD *)((char *)v20 + 56) = *(_OWORD *)v421;
  *(_OWORD *)((char *)v20 + 72) = v22;
  *((_QWORD *)v20 + 11) = v423;
  if (v21)
  {
    *((_QWORD *)v20 + 13) = v21;
    operator delete(v21);
    *((_QWORD *)v20 + 12) = 0;
    *((_QWORD *)v20 + 13) = 0;
    *((_QWORD *)v20 + 14) = 0;
  }
  v20[6] = *(_OWORD *)v424;
  *((_QWORD *)v20 + 14) = v425;
  v425 = 0;
  *(_OWORD *)v424 = 0uLL;
  if (SHIBYTE(v403) < 0)
  {
    operator delete(v401);
    if (v424[0])
    {
      v424[1] = v424[0];
      operator delete(v424[0]);
    }
  }
  *(_QWORD *)&v449[12] = 0;
  *(_QWORD *)&v449[4] = 0;
  *(_DWORD *)v449 = 1;
  *(_DWORD *)&v449[20] = 1;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v449, 0, (uint64_t)v421);
  std::string::basic_string[abi:ne180100]<0>(&v401, "in_fine_bit_scaled");
  *(_QWORD *)&v443 = &v401;
  v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v379, &v401, (_OWORD **)&v443);
  v24 = (void *)*((_QWORD *)v23 + 12);
  v25 = v422;
  *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)v421;
  *(_OWORD *)((char *)v23 + 72) = v25;
  *((_QWORD *)v23 + 11) = v423;
  if (v24)
  {
    *((_QWORD *)v23 + 13) = v24;
    operator delete(v24);
    *((_QWORD *)v23 + 12) = 0;
    *((_QWORD *)v23 + 13) = 0;
    *((_QWORD *)v23 + 14) = 0;
  }
  v23[6] = *(_OWORD *)v424;
  *((_QWORD *)v23 + 14) = v425;
  v425 = 0;
  *(_OWORD *)v424 = 0uLL;
  if (SHIBYTE(v403) < 0)
  {
    operator delete(v401);
    if (v424[0])
    {
      v424[1] = v424[0];
      operator delete(v424[0]);
    }
  }
  v26 = *((_DWORD *)a2 + 7);
  *(_QWORD *)&v449[12] = 0;
  *(_QWORD *)&v449[4] = 0;
  *(_DWORD *)v449 = v26;
  *(_DWORD *)&v449[20] = 1;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v449, 0, (uint64_t)v421);
  std::string::basic_string[abi:ne180100]<0>(&v401, "input");
  *(_QWORD *)&v443 = &v401;
  v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v379, &v401, (_OWORD **)&v443);
  v28 = (void *)*((_QWORD *)v27 + 12);
  v29 = v422;
  *(_OWORD *)((char *)v27 + 56) = *(_OWORD *)v421;
  *(_OWORD *)((char *)v27 + 72) = v29;
  *((_QWORD *)v27 + 11) = v423;
  if (v28)
  {
    *((_QWORD *)v27 + 13) = v28;
    operator delete(v28);
    *((_QWORD *)v27 + 12) = 0;
    *((_QWORD *)v27 + 13) = 0;
    *((_QWORD *)v27 + 14) = 0;
  }
  v27[6] = *(_OWORD *)v424;
  *((_QWORD *)v27 + 14) = v425;
  v425 = 0;
  *(_OWORD *)v424 = 0uLL;
  if (SHIBYTE(v403) < 0)
  {
    operator delete(v401);
    if (v424[0])
    {
      v424[1] = v424[0];
      operator delete(v424[0]);
    }
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v421, (__int128 **)&v379);
  reshape_network_with_additional_inputs(a3, (uint64_t **)v421);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v421, (char *)v421[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v379, *((char **)&v379 + 1));
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v416);
  v30 = v415;
  if (v415)
  {
    v31 = (unint64_t *)&v415->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v414;
  if (v414)
  {
    v34 = (unint64_t *)&v414->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v413;
  if (v413)
  {
    v37 = (unint64_t *)&v413->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v412 < 0)
    operator delete(*(void **)&v410[24]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v409, *((_QWORD **)&v409 + 1));
  v39 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v40 = (unint64_t *)((char *)__p[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v428[0] = 0;
  v428[1] = v428;
  *(_QWORD *)&v429 = 0x4812000000;
  *((_QWORD *)&v429 + 1) = __Block_byref_object_copy_;
  v430 = __Block_byref_object_dispose_;
  v434 = 0;
  v433 = 0;
  v431 = "";
  v432 = &v433;
  v42 = (void *)MEMORY[0x1E0C809B0];
  v376 = (std::string *)MEMORY[0x1E0C809B0];
  v377 = 3221225472;
  v378[0] = ___ZN8Espresso16pass_wavernn_ane13gumbal_to_aneERNS_3netE_block_invoke;
  v378[1] = &unk_1E2DD1E78;
  v378[2] = v428;
  v378[3] = a3;
  v340 = &v376;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v379, (Espresso::net *)a3);
  v409 = 0u;
  memset(v410, 0, 28);
  *(_OWORD *)__p = 0u;
  v411 = a3;
  v43 = *(_QWORD *)(a3 + 32);
  v337 = a2;
  v339 = (Espresso::net *)a3;
  if (*(_QWORD *)(a3 + 40) != v43)
  {
    v44 = 0;
    do
    {
      *(_DWORD *)&v410[24] = v44;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v409, *(_QWORD *)(v43 + 16 * v44), *(_QWORD *)(v43 + 16 * v44 + 8));
      v45 = v409;
      v46 = *(void **)(v409 + 64);
      if (v46
      {
        v47 = *(unint64_t **)(v45 + 72);
        if (v47)
        {
          v48 = v47 + 1;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
      }
      else
      {
        v47 = 0;
      }
      v50 = (std::__shared_weak_count *)__p[1];
      __p[0] = v46;
      __p[1] = v47;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        v46 = __p[0];
      }
      if (v46)
        ((void (*)(std::string **, void **))v378[0])(v340, __p);
      ++v44;
      v43 = *(_QWORD *)(a3 + 32);
    }
    while (v44 < (*(_QWORD *)(a3 + 40) - v43) >> 4);
    v53 = *(_QWORD *)&v410[8];
    v54 = *(_QWORD *)v410;
    if (*(_QWORD *)v410 == *(_QWORD *)&v410[8])
    {
      v42 = (void *)MEMORY[0x1E0C809B0];
    }
    else
    {
      v55 = 0;
      do
      {
        v56 = *(_DWORD *)v54 + v55;
        *(_DWORD *)v54 = v56;
        v57 = *(void **)(v54 + 8);
        if (v57)
        {
          LODWORD(v421[0]) = v56;
          v58 = *(_QWORD *)(v54 + 16);
          v421[1] = v57;
          *(_QWORD *)&v422 = v58;
          if (v58)
          {
            v59 = (unint64_t *)(v58 + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          *((_QWORD *)&v422 + 1) = 0;
          v423 = 0;
          v424[0] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v422 + 1, *(_QWORD *)(v54 + 24), *(_QWORD *)(v54 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v54 + 32) - *(_QWORD *)(v54 + 24)) >> 3));
          v424[1] = 0;
          v425 = 0;
          v426[0] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v424[1], *(_QWORD *)(v54 + 48), *(_QWORD *)(v54 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v54 + 56) - *(_QWORD *)(v54 + 48)) >> 3));
          v440 = 0uLL;
          *(_QWORD *)&v441 = 0;
          *(_QWORD *)v449 = &v440;
          v449[8] = 0;
          *(_QWORD *)&v440 = operator new(0x48uLL);
          *((_QWORD *)&v440 + 1) = v440;
          *(_QWORD *)&v441 = v440 + 72;
          *((_QWORD *)&v440 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v441, (uint64_t)v421, (uint64_t)&v427, v440);
          Espresso::net::insert_layers(a3, (uint64_t *)&v440);
          *(_QWORD *)v449 = &v440;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
          *(_QWORD *)v449 = &v424[1];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
          *(_QWORD *)v449 = (char *)&v422 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
          v61 = (std::__shared_weak_count *)v422;
          if ((_QWORD)v422)
          {
            v62 = (unint64_t *)(v422 + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v64 = 1;
        }
        else
        {
          Espresso::net::remove_layer((Espresso::net *)a3, v56);
          v64 = -1;
        }
        v55 += v64;
        v54 += 72;
      }
      while (v54 != v53);
      a2 = v337;
      v42 = (void *)MEMORY[0x1E0C809B0];
    }
  }
  v421[0] = v410;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v421);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
  if (*((_QWORD *)&v409 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v69 = (unint64_t *)((char *)__p[1] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v385);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v380 + 1));
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
  if (*((_QWORD *)&v379 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }

  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)__p, (__int128 **)v428[1] + 6);
  reshape_network_with_additional_inputs(a3, (uint64_t **)__p);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, (char *)__p[1]);
  _Block_object_dispose(v428, 8);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v432, v433);
  if ((v375 & 0x80u) == 0)
    v74 = v375;
  else
    v74 = v374;
  std::string::basic_string[abi:ne180100]((uint64_t)v369, v74 + 23);
  if (v370 >= 0)
    v75 = v369;
  else
    v75 = (void **)v369[0];
  if (v74)
  {
    if ((v375 & 0x80u) == 0)
      v76 = &v373;
    else
      v76 = v373;
    memmove(v75, v76, v74);
  }
  strcpy((char *)v75 + v74, "/new_input.espresso.net");
  checkpoint_net(&v371, a3, (uint64_t)v369);
  if (v370 < 0)
    operator delete(v369[0]);
  Espresso::pass_wavernn_ane::initial_inner_product_to_add(a2, (Espresso::net *)a3);
  if ((v375 & 0x80u) == 0)
    v77 = v375;
  else
    v77 = v374;
  std::string::basic_string[abi:ne180100]((uint64_t)v365, v77 + 17);
  if (v366 >= 0)
    v78 = v365;
  else
    v78 = (void **)v365[0];
  if (v77)
  {
    if ((v375 & 0x80u) == 0)
      v79 = &v373;
    else
      v79 = v373;
    memmove(v78, v79, v77);
  }
  strcpy((char *)v78 + v77, "/tmp.espresso.net");
  checkpoint_net(&v367, a3, (uint64_t)v365);
  if (v366 < 0)
    operator delete(v365[0]);
  v363 = v367;
  v364 = v368;
  if (v368)
  {
    v80 = (unint64_t *)&v368->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = v372;
  v362[0] = v371;
  v362[1] = v372;
  if (v372)
  {
    v83 = (unint64_t *)&v372->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  v85 = util_compare(&v363, v362);
  if (v82)
  {
    v86 = (unint64_t *)&v82->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v88 = v364;
  if (v364)
  {
    v89 = (unint64_t *)&v364->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if ((v85 & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("validation_failed after splitting inner product");
  *(_OWORD *)__p = 0u;
  v409 = 0u;
  *(_DWORD *)v410 = 1065353216;
  Espresso::net::get_consumers_of_blobs((_QWORD *)a3, __p, (uint64_t)&v440);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  v421[0] = v42;
  v421[1] = (void *)3321888768;
  *(_QWORD *)&v422 = ___ZN8Espresso16pass_wavernn_ane14split_to_sliceERNS_3netE_block_invoke;
  *((_QWORD *)&v422 + 1) = &__block_descriptor_80_ea8_40c166_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorImNS4_ImEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S9_EEEEEE_e9_v16__0_v8l;
  v423 = a3;
  std::unordered_map<std::string,std::vector<unsigned long>>::unordered_map((uint64_t)v424, (uint64_t)&v440);
  v91 = v421;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v379, (Espresso::net *)a3);
  v409 = 0u;
  memset(v410, 0, 28);
  *(_OWORD *)__p = 0u;
  v411 = a3;
  v92 = *(_QWORD *)(a3 + 32);
  if (*(_QWORD *)(a3 + 40) != v92)
  {
    v93 = 0;
    v341 = v91;
    do
    {
      *(_DWORD *)&v410[24] = v93;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v409, *(_QWORD *)(v92 + 16 * v93), *(_QWORD *)(v92 + 16 * v93 + 8));
      v94 = v409;
      v95 = *(void **)(v409 + 64);
      if (v95
      {
        v96 = *(unint64_t **)(v94 + 72);
        if (v96)
        {
          v97 = v96 + 1;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
        }
      }
      else
      {
        v96 = 0;
      }
      v99 = (std::__shared_weak_count *)__p[1];
      __p[0] = v95;
      __p[1] = v96;
      if (v99)
      {
        v100 = (unint64_t *)&v99->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
        v95 = __p[0];
      }
      if (v95)
        ((void (*)(uint64_t, int64x2_t *))v422)((uint64_t)v91, (int64x2_t *)__p);
      ++v93;
      v92 = *(_QWORD *)(a3 + 32);
    }
    while (v93 < (*(_QWORD *)(a3 + 40) - v92) >> 4);
    v102 = *(_QWORD *)&v410[8];
    v103 = *(_QWORD *)v410;
    if (*(_QWORD *)v410 == *(_QWORD *)&v410[8])
    {
      a2 = v337;
      v91 = v341;
    }
    else
    {
      v104 = 0;
      do
      {
        v105 = *(_DWORD *)v103 + v104;
        *(_DWORD *)v103 = v105;
        v106 = *(void **)(v103 + 8);
        if (v106)
        {
          LODWORD(v428[0]) = v105;
          v107 = *(_QWORD *)(v103 + 16);
          v428[1] = v106;
          *(_QWORD *)&v429 = v107;
          if (v107)
          {
            v108 = (unint64_t *)(v107 + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
          *((_QWORD *)&v429 + 1) = 0;
          v430 = 0;
          v431 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v429 + 1, *(_QWORD *)(v103 + 24), *(_QWORD *)(v103 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v103 + 32) - *(_QWORD *)(v103 + 24)) >> 3));
          v432 = 0;
          v433 = 0;
          v434 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v432, *(_QWORD *)(v103 + 48), *(_QWORD *)(v103 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v103 + 56) - *(_QWORD *)(v103 + 48)) >> 3));
          memset(v449, 0, sizeof(v449));
          v401 = v449;
          LOBYTE(v402) = 0;
          *(_QWORD *)v449 = operator new(0x48uLL);
          *(_QWORD *)&v449[8] = *(_QWORD *)v449;
          *(_QWORD *)&v449[16] = *(_QWORD *)v449 + 72;
          *(_QWORD *)&v449[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v449[16], (uint64_t)v428, (uint64_t)v435, *(uint64_t *)v449);
          Espresso::net::insert_layers(a3, (uint64_t *)v449);
          v401 = v449;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v401);
          v401 = &v432;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v401);
          v401 = (char *)&v429 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v401);
          v110 = (std::__shared_weak_count *)v429;
          if ((_QWORD)v429)
          {
            v111 = (unint64_t *)(v429 + 8);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          v113 = 1;
        }
        else
        {
          Espresso::net::remove_layer((Espresso::net *)a3, v105);
          v113 = -1;
        }
        v104 += v113;
        v103 += 72;
      }
      while (v103 != v102);
      a2 = v337;
      v91 = v341;
    }
  }
  v428[0] = v410;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
  if (*((_QWORD *)&v409 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v118 = (unint64_t *)((char *)__p[1] + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v385);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v380 + 1));
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
  if (*((_QWORD *)&v379 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }

  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(v91[7]);
  v123 = v424[0];
  v424[0] = 0;
  if (v123)
    operator delete(v123);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v441);
  v124 = (void *)v440;
  *(_QWORD *)&v440 = 0;
  if (v124)
    operator delete(v124);
  if ((v375 & 0x80u) == 0)
    v125 = v375;
  else
    v125 = v374;
  std::string::basic_string[abi:ne180100]((uint64_t)v358, v125 + 22);
  if (v359 >= 0)
    v126 = v358;
  else
    v126 = (void **)v358[0];
  if (v125)
  {
    if ((v375 & 0x80u) == 0)
      v127 = &v373;
    else
      v127 = v373;
    memmove(v126, v127, v125);
  }
  strcpy((char *)v126 + v125, "/pre_loop.espresso.net");
  checkpoint_net(&v360, a3, (uint64_t)v358);
  if (v359 < 0)
    operator delete(v358[0]);
  v356 = v360;
  v357 = v361;
  if (v361)
  {
    v128 = (unint64_t *)&v361->__shared_owners_;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  v130 = v368;
  v355[0] = v367;
  v355[1] = v368;
  if (v368)
  {
    v131 = (unint64_t *)&v368->__shared_owners_;
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  v133 = util_compare(&v356, v355);
  if (v130)
  {
    v134 = (unint64_t *)&v130->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v136 = v357;
  if (v357)
  {
    v137 = (unint64_t *)&v357->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  if ((v133 & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("validation_failed after split to slice");
  Espresso::pass_wavernn_ane::create_loop(a2, (Espresso::net *)a3);
  v428[0] = 0;
  if (*(_QWORD *)(a3 + 40) != *(_QWORD *)(a3 + 32))
  {
    v342 = a3 + 56;
    v338 = a3 + 96;
LABEL_256:
    __p[0] = v428;
    v139 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v342, (unint64_t *)v428, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    v140 = (uint64_t *)v139[3];
    v141 = (uint64_t *)v139[4];
    while (v140 != v141)
    {
      v142 = *((unsigned __int8 *)v140 + 23);
      if (*((char *)v140 + 23) < 0)
      {
        v144 = v140[1];
        if (v144 != 17)
          goto LABEL_275;
        v143 = (uint64_t *)*v140;
      }
      else
      {
        v143 = v140;
        if (v142 != 17)
          goto LABEL_271;
      }
      v145 = *v143;
      v146 = v143[1];
      v147 = *((unsigned __int8 *)v143 + 16);
      if (v145 == 0x6E5F74757074756FLL && v146 == 0x65646469685F7765 && v147 == 110)
      {
        MEMORY[0x19401C808](v140, "hidden_state");
        v142 = *((unsigned __int8 *)v140 + 23);
        if ((v142 & 0x80) == 0)
        {
LABEL_271:
          v150 = v140;
          if (v142 != 18)
            goto LABEL_286;
          goto LABEL_277;
        }
      }
      else if ((v142 & 0x80) == 0)
      {
        goto LABEL_271;
      }
      v144 = v140[1];
LABEL_275:
      if (v144 != 18)
        goto LABEL_286;
      v150 = (uint64_t *)*v140;
LABEL_277:
      v151 = *v150;
      v152 = v150[1];
      v153 = *((unsigned __int16 *)v150 + 8);
      if (v151 == 0x5F656E69665F6E69 && v152 == 0x6C6163735F746962 && v153 == 25701)
        MEMORY[0x19401C808](v140, "fine_bit_scaled");
LABEL_286:
      v140 += 3;
    }
    __p[0] = v428;
    v156 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v338, (unint64_t *)v428, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    v157 = (uint64_t *)v156[3];
    v158 = (uint64_t *)v156[4];
    while (1)
    {
      if (v157 == v158)
      {
        ++v428[0];
        a3 = (uint64_t)v339;
        if (v428[0] >= (void *)((uint64_t)(*((_QWORD *)v339 + 5) - *((_QWORD *)v339 + 4)) >> 4))
          break;
        goto LABEL_256;
      }
      v159 = *((unsigned __int8 *)v157 + 23);
      if (*((char *)v157 + 23) < 0)
      {
        v161 = v157[1];
        if (v161 != 17)
          goto LABEL_306;
        v160 = (uint64_t *)*v157;
      }
      else
      {
        v160 = v157;
        if (v159 != 17)
          goto LABEL_302;
      }
      v162 = *v160;
      v163 = v160[1];
      v164 = *((unsigned __int8 *)v160 + 16);
      if (v162 == 0x6E5F74757074756FLL && v163 == 0x65646469685F7765 && v164 == 110)
      {
        MEMORY[0x19401C808](v157, "hidden_state");
        v159 = *((unsigned __int8 *)v157 + 23);
        if ((v159 & 0x80) == 0)
        {
LABEL_302:
          if (v159 != 18)
            goto LABEL_316;
          v167 = v157;
          goto LABEL_308;
        }
      }
      else if ((v159 & 0x80) == 0)
      {
        goto LABEL_302;
      }
      v161 = v157[1];
LABEL_306:
      if (v161 != 18)
        goto LABEL_320;
      v167 = (uint64_t *)*v157;
LABEL_308:
      v168 = *v167;
      v169 = v167[1];
      v170 = *((unsigned __int16 *)v167 + 8);
      if (v168 == 0x5F656E69665F6E69 && v169 == 0x6C6163735F746962 && v170 == 25701)
      {
        MEMORY[0x19401C808](v157, "fine_bit_scaled");
        v159 = *((unsigned __int8 *)v157 + 23);
        if ((v159 & 0x80) == 0)
        {
LABEL_316:
          v173 = v157;
          if (v159 != 20)
            goto LABEL_331;
          goto LABEL_322;
        }
      }
      else if ((v159 & 0x80) == 0)
      {
        goto LABEL_316;
      }
      v161 = v157[1];
LABEL_320:
      if (v161 != 20)
        goto LABEL_331;
      v173 = (uint64_t *)*v157;
LABEL_322:
      v174 = *v173;
      v175 = v173[1];
      v176 = *((_DWORD *)v173 + 4);
      if (v174 == 0x7372616F635F6E69 && v175 == 0x63735F7469625F65 && v176 == 1684368481)
        MEMORY[0x19401C808](v157, "coarse_bit_scaled");
LABEL_331:
      v157 += 3;
    }
  }
  recompile((Espresso::net *)a3);
  if ((v375 & 0x80u) == 0)
    v179 = v375;
  else
    v179 = v374;
  std::string::basic_string[abi:ne180100]((uint64_t)v351, v179 + 22);
  if (v352 >= 0)
    v180 = v351;
  else
    v180 = (void **)v351[0];
  if (v179)
  {
    if ((v375 & 0x80u) == 0)
      v181 = &v373;
    else
      v181 = v373;
    memmove(v180, v181, v179);
  }
  strcpy((char *)v180 + v179, "/loop_net.espresso.net");
  checkpoint_net(&v353, a3, (uint64_t)v351);
  if (v352 < 0)
    operator delete(v351[0]);
  Espresso::util_unroll_loop((Espresso *)a3, v182);
  std::string::basic_string[abi:ne180100]<0>(__p, "unroll_loop");
  v420 = 0;
  Espresso::net::pprint(a3, (uint64_t)__p, (uint64_t)v419);
  v183 = v420;
  if (v420 == v419)
  {
    v184 = 4;
    v183 = v419;
  }
  else
  {
    if (!v420)
      goto LABEL_351;
    v184 = 5;
  }
  (*(void (**)(_QWORD *))(*v183 + 8 * v184))(v183);
LABEL_351:
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  if ((v375 & 0x80u) == 0)
    v185 = v375;
  else
    v185 = v374;
  std::string::basic_string[abi:ne180100]((uint64_t)v347, v185 + 26);
  if (v348 >= 0)
    v186 = v347;
  else
    v186 = (void **)v347[0];
  if (v185)
  {
    if ((v375 & 0x80u) == 0)
      v187 = &v373;
    else
      v187 = v373;
    memmove(v186, v187, v185);
  }
  strcpy((char *)v186 + v185, "/unrolled_net.espresso.net");
  checkpoint_net(&v349, a3, (uint64_t)v347);
  if (v348 < 0)
    operator delete(v347[0]);
  v188 = v349;
  std::string::basic_string[abi:ne180100]<0>(__p, "unrolled");
  v418 = 0;
  Espresso::net::pprint(v188, (uint64_t)__p, (uint64_t)v417);
  v189 = v418;
  if (v418 == v417)
  {
    v190 = 4;
    v189 = v417;
  }
  else
  {
    if (!v418)
      goto LABEL_371;
    v190 = 5;
  }
  (*(void (**)(_QWORD *))(*v189 + 8 * v190))(v189);
LABEL_371:
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  v345 = v349;
  v346 = v350;
  if (v350)
  {
    v191 = (unint64_t *)&v350->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v193 = v354;
  v344[0] = v353;
  v344[1] = v354;
  if (v354)
  {
    v194 = (unint64_t *)&v354->__shared_owners_;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  v196 = util_compare(&v345, v344);
  if (v193)
  {
    v197 = (unint64_t *)&v193->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v199 = v346;
  if (v346)
  {
    v200 = (unint64_t *)&v346->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  if ((v196 & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("validation_failed after loop unroll");
  v202 = *(std::__shared_weak_count **)(a3 + 24);
  v404 = *(_QWORD *)(a3 + 16);
  v405 = v202;
  if (v202)
  {
    v203 = (unint64_t *)&v202->__shared_owners_;
    do
      v204 = __ldxr(v203);
    while (__stxr(v204 + 1, v203));
  }
  v396[1] = 0;
  v396[0] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)__p, &v404, 0, (uint64_t *)v396);
  if (v202)
  {
    v205 = (unint64_t *)&v202->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v379 = 0uLL;
  *(_QWORD *)&v380 = 0;
  v440 = 0uLL;
  *(_QWORD *)&v441 = 0;
  memset(v449, 0, sizeof(v449));
  v401 = 0;
  if (*(_QWORD *)(a3 + 40) == *(_QWORD *)(a3 + 32))
  {
    v243 = 0;
    v242 = 0;
  }
  else
  {
    do
    {
      v428[0] = &v401;
      v207 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a3 + 96, (unint64_t *)&v401, (uint64_t)&std::piecewise_construct, (uint64_t **)v428);
      v209 = v207[3];
      v208 = v207[4];
      v343 = v208;
      while (v209 != v208)
      {
        v210 = *(char *)(v209 + 23);
        v211 = *(unsigned __int8 *)(v209 + 23);
        if (v210 < 0)
        {
          v212 = *(const std::string::value_type **)v209;
          v213 = *(_QWORD *)(v209 + 8);
        }
        else
        {
          v212 = (const std::string::value_type *)v209;
          v213 = *(unsigned __int8 *)(v209 + 23);
        }
        if (v213 >= 17)
        {
          v214 = &v212[v213];
          v215 = (std::string::value_type *)v212;
          do
          {
            v216 = (const std::string::value_type *)memchr(v215, 99, v213 - 16);
            if (!v216)
              break;
            if (*(_QWORD *)v216 == 0x625F657372616F63
              && *((_QWORD *)v216 + 1) == 0x656C6163735F7469
              && v216[16] == 100)
            {
              if (v216 != v214 && v216 == v212)
              {
                v219 = (_OWORD *)*((_QWORD *)&v440 + 1);
                if (*((_QWORD *)&v440 + 1) >= (unint64_t)v441)
                {
                  v239 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v440, v209);
                }
                else
                {
                  if (v210 < 0)
                  {
                    std::string::__init_copy_ctor_external(*((std::string **)&v440 + 1), *(const std::string::value_type **)v209, *(_QWORD *)(v209 + 8));
                  }
                  else
                  {
                    v220 = *(_OWORD *)v209;
                    *(_QWORD *)(*((_QWORD *)&v440 + 1) + 16) = *(_QWORD *)(v209 + 16);
                    *v219 = v220;
                  }
                  v239 = (std::string *)((char *)v219 + 24);
                }
                *((_QWORD *)&v440 + 1) = v239;
                v211 = *(unsigned __int8 *)(v209 + 23);
              }
              break;
            }
            v215 = (std::string::value_type *)(v216 + 1);
            v213 = v214 - v215;
          }
          while (v214 - v215 >= 17);
        }
        v221 = (const std::string::value_type *)v209;
        v222 = v211;
        if ((v211 & 0x80) != 0)
        {
          v221 = *(const std::string::value_type **)v209;
          v222 = *(_QWORD *)(v209 + 8);
        }
        if (v222 >= 15)
        {
          v223 = (char)v211;
          v224 = &v221[v222];
          v225 = (std::string::value_type *)v221;
          do
          {
            v226 = (const std::string::value_type *)memchr(v225, 102, v222 - 14);
            if (!v226)
              break;
            if (*(_QWORD *)v226 == 0x7469625F656E6966 && *(_QWORD *)(v226 + 7) == 0x64656C6163735F74)
            {
              if (v226 != v224 && v226 == v221)
              {
                v228 = (_OWORD *)*((_QWORD *)&v379 + 1);
                if (*((_QWORD *)&v379 + 1) >= (unint64_t)v380)
                {
                  v240 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v379, v209);
                }
                else
                {
                  if (v223 < 0)
                  {
                    std::string::__init_copy_ctor_external(*((std::string **)&v379 + 1), *(const std::string::value_type **)v209, *(_QWORD *)(v209 + 8));
                  }
                  else
                  {
                    v229 = *(_OWORD *)v209;
                    *(_QWORD *)(*((_QWORD *)&v379 + 1) + 16) = *(_QWORD *)(v209 + 16);
                    *v228 = v229;
                  }
                  v240 = (std::string *)((char *)v228 + 24);
                }
                *((_QWORD *)&v379 + 1) = v240;
                v211 = *(unsigned __int8 *)(v209 + 23);
              }
              break;
            }
            v225 = (std::string::value_type *)(v226 + 1);
            v222 = v224 - v225;
          }
          while (v224 - v225 >= 15);
        }
        v230 = (const std::string::value_type *)v209;
        v231 = v211;
        if ((v211 & 0x80) != 0)
        {
          v230 = *(const std::string::value_type **)v209;
          v231 = *(_QWORD *)(v209 + 8);
        }
        if (v231 >= 12)
        {
          v232 = (char)v211;
          v233 = &v230[v231];
          v234 = (std::string::value_type *)v230;
          do
          {
            v235 = (const std::string::value_type *)memchr(v234, 104, v231 - 11);
            if (!v235)
              break;
            if (*(_QWORD *)v235 == 0x735F6E6564646968 && *((_DWORD *)v235 + 2) == 1702125940)
            {
              if (v235 != v233 && v235 == v230)
              {
                v237 = *(_OWORD **)&v449[8];
                if (*(_QWORD *)&v449[8] >= *(_QWORD *)&v449[16])
                {
                  v241 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v449, v209);
                }
                else
                {
                  if (v232 < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)&v449[8], *(const std::string::value_type **)v209, *(_QWORD *)(v209 + 8));
                  }
                  else
                  {
                    v238 = *(_OWORD *)v209;
                    *(_QWORD *)(*(_QWORD *)&v449[8] + 16) = *(_QWORD *)(v209 + 16);
                    *v237 = v238;
                  }
                  v241 = (std::string *)((char *)v237 + 24);
                }
                *(_QWORD *)&v449[8] = v241;
              }
              break;
            }
            v234 = (std::string::value_type *)(v235 + 1);
            v231 = v233 - v234;
          }
          while (v233 - v234 >= 12);
        }
        v209 += 24;
        v208 = v343;
      }
      v401 = (char *)v401 + 1;
    }
    while ((unint64_t)v401 < (uint64_t)(*((_QWORD *)v339 + 5) - *((_QWORD *)v339 + 4)) >> 4);
    v242 = *((_QWORD *)&v379 + 1);
    v243 = v379;
    a3 = (uint64_t)v339;
  }
  v395 = 0;
  v394 = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v242 - v243) >> 3) <= 1)
    v244 = "copy";
  else
    v244 = "general_concat";
  std::string::basic_string[abi:ne180100]<0>(v428, v244);
  std::string::basic_string[abi:ne180100]<0>(&v401, "coarse_bit_scaled_concat");
  v447 = 0uLL;
  v448 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v447, v440, *((uint64_t *)&v440 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v440 + 1) - v440) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&v445, "out_coarse_bit_scaled");
  v399 = 0;
  v398 = 0;
  p_data = 0;
  *(_QWORD *)&v443 = &v398;
  BYTE8(v443) = 0;
  v398 = (std::string *)operator new(0x18uLL);
  v399 = v398;
  p_data = (void **)&v398[1].__r_.__value_.__l.__data_;
  v399 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v445, &v447, v398);
  Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v392, (uint64_t *)__p, (uint64_t)v428, (uint64_t)&v401, (uint64_t)&v394, v447, *((uint64_t *)&v447 + 1), (uint64_t *)&v398);
  v245 = v393;
  if (v393)
  {
    v246 = (unint64_t *)&v393->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  *(_QWORD *)&v443 = &v398;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
  if (SHIBYTE(v446) < 0)
    operator delete((void *)v445);
  *(_QWORD *)&v445 = &v447;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v445);
  if (SHIBYTE(v403) < 0)
    operator delete(v401);
  if (SBYTE7(v429) < 0)
    operator delete(v428[0]);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v379 + 1) - v379) >> 3) <= 1)
    v248 = "copy";
  else
    v248 = "general_concat";
  std::string::basic_string[abi:ne180100]<0>(v428, v248);
  std::string::basic_string[abi:ne180100]<0>(&v401, "fine_bit_scaled_concat");
  v445 = 0uLL;
  v446 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v445, v379, *((uint64_t *)&v379 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v379 + 1) - v379) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&v438, "out_fine_bit_scaled");
  v443 = 0uLL;
  v444 = 0;
  v437.__r_.__value_.__r.__words[0] = (std::string::size_type)&v443;
  v437.__r_.__value_.__s.__data_[8] = 0;
  *(_QWORD *)&v443 = operator new(0x18uLL);
  *((_QWORD *)&v443 + 1) = v443;
  v444 = v443 + 24;
  *((_QWORD *)&v443 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v444, &v438, &v440, (std::string *)v443);
  Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v390, (uint64_t *)__p, (uint64_t)v428, (uint64_t)&v401, (uint64_t)&v394, v445, *((uint64_t *)&v445 + 1), (uint64_t *)&v443);
  v249 = v391;
  if (v391)
  {
    v250 = (unint64_t *)&v391->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v437.__r_.__value_.__r.__words[0] = (std::string::size_type)&v443;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v437);
  if (SHIBYTE(v439) < 0)
    operator delete((void *)v438);
  *(_QWORD *)&v438 = &v445;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
  if (SHIBYTE(v403) < 0)
    operator delete(v401);
  if (SBYTE7(v429) < 0)
    operator delete(v428[0]);
  std::string::basic_string[abi:ne180100]<0>(v428, "copy");
  std::string::basic_string[abi:ne180100]<0>(&v401, "hidden_state_out");
  v389 = 0;
  v252 = (const std::string::value_type **)(*(_QWORD *)&v449[8] - 24);
  if (*(char *)(*(_QWORD *)&v449[8] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(&v437, *v252, *(_QWORD *)(*(_QWORD *)&v449[8] - 16));
  }
  else
  {
    v253 = *(_OWORD *)v252;
    v437.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)&v449[8] - 8);
    *(_OWORD *)&v437.__r_.__value_.__l.__data_ = v253;
  }
  v438 = 0uLL;
  v439 = 0;
  v386 = (std::string *)&v438;
  LOBYTE(v387) = 0;
  *(_QWORD *)&v438 = operator new(0x18uLL);
  *((_QWORD *)&v438 + 1) = v438;
  v439 = v438 + 24;
  *((_QWORD *)&v438 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v439, (__int128 *)&v437, &v438, (std::string *)v438);
  std::string::basic_string[abi:ne180100]<0>(v435, "out_hidden_state");
  v386 = 0;
  v387 = 0;
  v388 = 0;
  v406 = &v386;
  LOBYTE(v407) = 0;
  v386 = (std::string *)operator new(0x18uLL);
  v387 = v386;
  v388 = v386 + 1;
  v387 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v388, (__int128 *)v435, (__int128 *)&v437, v386);
  Espresso::sequential_builder::add<Espresso::copy_params_t>((uint64_t *)&v406, (uint64_t *)__p, (uint64_t)v428, (uint64_t)&v401, (uint64_t)&v389, v438, *((uint64_t *)&v438 + 1), (uint64_t *)&v386);
  v254 = v407;
  if (v407)
  {
    v255 = (unint64_t *)&v407->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v397 = &v386;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v397);
  if (v436 < 0)
    operator delete(v435[0]);
  v435[0] = &v438;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
  if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v437.__r_.__value_.__l.__data_);
  if (SHIBYTE(v403) < 0)
    operator delete(v401);
  if (SBYTE7(v429) < 0)
    operator delete(v428[0]);
  v257 = (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 4;
  v429 = 0u;
  *(_OWORD *)v428 = 0u;
  LODWORD(v430) = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)__p, (__int128 **)a3, v257, (uint64_t)v428);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  recompile((Espresso::net *)a3);
  std::string::basic_string[abi:ne180100]<0>(&v401, "");
  *((_QWORD *)&v429 + 1) = 0;
  Espresso::net::pprint(a3, (uint64_t)&v401, (uint64_t)v428);
  v258 = (void **)*((_QWORD *)&v429 + 1);
  if (*((void ***)&v429 + 1) == v428)
  {
    v259 = 4;
    v258 = v428;
  }
  else
  {
    if (!*((_QWORD *)&v429 + 1))
      goto LABEL_518;
    v259 = 5;
  }
  (*((void (**)(void **))*v258 + v259))(v258);
LABEL_518:
  if (SHIBYTE(v403) < 0)
    operator delete(v401);
  v401 = v449;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v401);
  *(_QWORD *)v449 = &v440;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
  *(_QWORD *)&v440 = &v379;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v440);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v416);
  v260 = v415;
  if (v415)
  {
    v261 = (unint64_t *)&v415->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = v414;
  if (v414)
  {
    v264 = (unint64_t *)&v414->__shared_owners_;
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  v266 = v413;
  if (v413)
  {
    v267 = (unint64_t *)&v413->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  if (v412 < 0)
    operator delete(*(void **)&v410[24]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v409, *((_QWORD **)&v409 + 1));
  v269 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v270 = (unint64_t *)((char *)__p[1] + 8);
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "find_shared_weights");
  Espresso::run_custom_pass_on_network((uint64_t *)__p, a3);
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  v272 = v350;
  if (v350)
  {
    v273 = (unint64_t *)&v350->__shared_owners_;
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  v275 = v354;
  if (v354)
  {
    v276 = (unint64_t *)&v354->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  if (!getenv("ESPRESSO_PASS_WAVERNN_NORANDOM"))
  {
    v295 = *(std::__shared_weak_count **)(a3 + 24);
    v437.__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 16);
    v437.__r_.__value_.__l.__size_ = (std::string::size_type)v295;
    if (v295)
    {
      v296 = (unint64_t *)&v295->__shared_owners_;
      do
        v297 = __ldxr(v296);
      while (__stxr(v297 + 1, v296));
    }
    v386 = 0;
    v387 = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)__p, (uint64_t *)&v437, 0, (uint64_t *)&v386);
    if (v295)
    {
      v298 = (unint64_t *)&v295->__shared_owners_;
      do
        v299 = __ldaxr(v298);
      while (__stlxr(v299 - 1, v298));
      if (!v299)
      {
        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
        std::__shared_weak_count::__release_weak(v295);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v428, "O2__rand_v");
    *(_QWORD *)&v379 = v428;
    v300 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v336, (unsigned __int8 *)v428, (__int128 **)&v379);
    v302 = v300[5];
    v301 = (unint64_t *)v300[6];
    v435[0] = (void *)v302;
    v435[1] = v301;
    if (v301)
    {
      v303 = v301 + 1;
      do
        v304 = __ldxr(v303);
      while (__stxr(v304 + 1, v303));
    }
    if (SBYTE7(v429) < 0)
      operator delete(v428[0]);
    std::string::basic_string[abi:ne180100]<0>(v428, "O4__rand_v");
    *(_QWORD *)&v379 = v428;
    v305 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v336, (unsigned __int8 *)v428, (__int128 **)&v379);
    v306 = (std::__shared_weak_count *)*((_QWORD *)v305 + 6);
    v406 = (std::string **)*((_QWORD *)v305 + 5);
    v407 = v306;
    if (v306)
    {
      v307 = (unint64_t *)&v306->__shared_owners_;
      do
        v308 = __ldxr(v307);
      while (__stxr(v308 + 1, v307));
    }
    if (SBYTE7(v429) < 0)
      operator delete(v428[0]);
    HIDWORD(v430) = 1;
    WORD2(v431) = 0;
    HIDWORD(v428[1]) = -1;
    LODWORD(v428[0]) = 3;
    *(void **)((char *)v428 + 4) = (void *)0x3C23D70A3F800000;
    v429 = *(_OWORD *)(v302 + 8);
    LODWORD(v430) = *(_DWORD *)(v302 + 24);
    LODWORD(v431) = *(_DWORD *)(v302 + 28);
    std::string::basic_string[abi:ne180100]<0>(&v379, "load_random");
    std::string::basic_string[abi:ne180100]<0>(&v440, "gumbel_noise_2");
    memset(v449, 0, sizeof(v449));
    std::string::basic_string[abi:ne180100]<0>(&v447, "O2__rand_v");
    v402 = 0;
    v401 = 0;
    v403 = 0;
    v398 = (std::string *)&v401;
    LOBYTE(v399) = 0;
    v401 = operator new(0x18uLL);
    v402 = v401;
    v403 = (char *)v401 + 24;
    v402 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v403, &v447, (__int128 *)v449, (std::string *)v401);
    Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v404, (uint64_t *)__p, (uint64_t)&v379, (uint64_t)&v440, (uint64_t)v428, *(uint64_t *)v449, *(uint64_t *)&v449[8], (uint64_t *)&v401);
    v309 = v405;
    if (v405)
    {
      v310 = (unint64_t *)&v405->__shared_owners_;
      do
        v311 = __ldaxr(v310);
      while (__stlxr(v311 - 1, v310));
      if (!v311)
      {
        ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
        std::__shared_weak_count::__release_weak(v309);
      }
    }
    v398 = (std::string *)&v401;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v398);
    if (SHIBYTE(v448) < 0)
      operator delete((void *)v447);
    *(_QWORD *)&v447 = v449;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v447);
    if (SBYTE7(v441) < 0)
      operator delete((void *)v440);
    if (SBYTE7(v380) < 0)
      operator delete((void *)v379);
    HIDWORD(v379) = -1;
    v382 = 1;
    v384 = 0;
    LODWORD(v379) = 3;
    *(_QWORD *)((char *)&v379 + 4) = 0x3C23D70A3F800000;
    v380 = *(_OWORD *)(v406 + 1);
    v381 = *((_DWORD *)v406 + 6);
    v383 = *((_DWORD *)v406 + 7);
    std::string::basic_string[abi:ne180100]<0>(&v440, "load_random");
    std::string::basic_string[abi:ne180100]<0>(&v447, "gumbel_noise_4");
    v399 = 0;
    v398 = 0;
    p_data = 0;
    std::string::basic_string[abi:ne180100]<0>(&v443, "O4__rand_v");
    v445 = 0uLL;
    v446 = 0;
    *(_QWORD *)&v438 = &v445;
    BYTE8(v438) = 0;
    *(_QWORD *)&v445 = operator new(0x18uLL);
    *((_QWORD *)&v445 + 1) = v445;
    v446 = v445 + 24;
    *((_QWORD *)&v445 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v446, &v443, &v445, (std::string *)v445);
    Espresso::sequential_builder::add<Espresso::load_random_params_t>((uint64_t *)&v438, (uint64_t *)__p, (uint64_t)&v440, (uint64_t)&v447, (uint64_t)&v379, (uint64_t)v398, (uint64_t)v399, (uint64_t *)&v445);
    v312 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
    if (*((_QWORD *)&v438 + 1))
    {
      v313 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
      do
        v314 = __ldaxr(v313);
      while (__stlxr(v314 - 1, v313));
      if (!v314)
      {
        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
        std::__shared_weak_count::__release_weak(v312);
      }
    }
    v396[0] = (void **)&v445;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v396);
    if (SHIBYTE(v444) < 0)
      operator delete((void *)v443);
    *(_QWORD *)&v443 = &v398;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
    if (SHIBYTE(v448) < 0)
      operator delete((void *)v447);
    if (SBYTE7(v441) < 0)
      operator delete((void *)v440);
    v440 = 0u;
    v441 = 0u;
    v442 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)__p, (__int128 **)a3, 0, (uint64_t)&v440);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    std::string::basic_string[abi:ne180100]<0>(&v447, "");
    *((_QWORD *)&v441 + 1) = 0;
    Espresso::net::pprint(a3, (uint64_t)&v447, (uint64_t)&v440);
    v315 = (__int128 *)*((_QWORD *)&v441 + 1);
    if (*((__int128 **)&v441 + 1) == &v440)
    {
      v316 = 4;
      v315 = &v440;
    }
    else
    {
      if (!*((_QWORD *)&v441 + 1))
      {
LABEL_633:
        if (SHIBYTE(v448) < 0)
          operator delete((void *)v447);
        v317 = v407;
        if (v407)
        {
          v318 = (unint64_t *)&v407->__shared_owners_;
          do
            v319 = __ldaxr(v318);
          while (__stlxr(v319 - 1, v318));
          if (!v319)
          {
            ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
            std::__shared_weak_count::__release_weak(v317);
          }
        }
        v320 = (std::__shared_weak_count *)v435[1];
        if (v435[1])
        {
          v321 = (unint64_t *)((char *)v435[1] + 8);
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
        std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v416);
        v323 = v415;
        if (v415)
        {
          v324 = (unint64_t *)&v415->__shared_owners_;
          do
            v325 = __ldaxr(v324);
          while (__stlxr(v325 - 1, v324));
          if (!v325)
          {
            ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
            std::__shared_weak_count::__release_weak(v323);
          }
        }
        v326 = v414;
        if (v414)
        {
          v327 = (unint64_t *)&v414->__shared_owners_;
          do
            v328 = __ldaxr(v327);
          while (__stlxr(v328 - 1, v327));
          if (!v328)
          {
            ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
            std::__shared_weak_count::__release_weak(v326);
          }
        }
        v329 = v413;
        if (v413)
        {
          v330 = (unint64_t *)&v413->__shared_owners_;
          do
            v331 = __ldaxr(v330);
          while (__stlxr(v331 - 1, v330));
          if (!v331)
          {
            ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
            std::__shared_weak_count::__release_weak(v329);
          }
        }
        if (v412 < 0)
          operator delete(*(void **)&v410[24]);
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v409, *((_QWORD **)&v409 + 1));
        v332 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v333 = (unint64_t *)((char *)__p[1] + 8);
          do
            v334 = __ldaxr(v333);
          while (__stlxr(v334 - 1, v333));
          if (!v334)
          {
            ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
            std::__shared_weak_count::__release_weak(v332);
          }
        }
        goto LABEL_555;
      }
      v316 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v315 + 8 * v316))(v315);
    goto LABEL_633;
  }
LABEL_555:
  std::string::basic_string[abi:ne180100]<0>(__p, "anec_flags");
  v428[0] = __p;
  v278 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v428);
  MEMORY[0x19401C808]((char *)v278 + 56, "EnableSingleChannelEWOpCopyRemoval,EnableAggressiveTensorCaching");
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hint_no_mutable_weights");
  v428[0] = __p;
  v279 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v428);
  MEMORY[0x19401C808]((char *)v279 + 56, "1");
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.use_faux_dispatch");
  v428[0] = __p;
  v280 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v428);
  MEMORY[0x19401C808]((char *)v280 + 56, "1");
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.skip_network_transform_pre_allocation");
  v428[0] = __p;
  v281 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v428);
  MEMORY[0x19401C808]((char *)v281 + 56, "1");
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.use_high_precision_activations");
  v428[0] = __p;
  v282 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v428);
  MEMORY[0x19401C808]((char *)v282 + 56, "1");
  if (SBYTE7(v409) < 0)
    operator delete(__p[0]);
  __p[1] = 0;
  __p[0] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3 + 968, (__int128 *)__p);
  v283 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v284 = (unint64_t *)((char *)__p[1] + 8);
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v286 = v361;
  if (v361)
  {
    v287 = (unint64_t *)&v361->__shared_owners_;
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  v289 = v368;
  if (v368)
  {
    v290 = (unint64_t *)&v368->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  v292 = v372;
  if (v372)
  {
    v293 = (unint64_t *)&v372->__shared_owners_;
    do
      v294 = __ldaxr(v293);
    while (__stlxr(v294 - 1, v293));
    if (!v294)
    {
      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
      std::__shared_weak_count::__release_weak(v292);
    }
  }
  if ((char)v375 < 0)
    operator delete(v373);
}

void sub_1913337BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;

  v62 = *(_QWORD **)(v60 - 232);
  if (v62 == v59)
  {
    v63 = 4;
    v62 = (_QWORD *)(v60 - 256);
  }
  else
  {
    if (!v62)
      goto LABEL_6;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_6:
  if (*(char *)(v60 - 145) < 0)
    operator delete(*(void **)(v60 - 168));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x448]);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x2A0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  if (a59 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v16 = *a3;
  v17 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)i + 5) = 0;
  *((_QWORD *)i + 6) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v15;
  *v15 = i;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_191334384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void checkpoint_net(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  std::string __str;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  Espresso::net::pprint(a2, a3, (uint64_t)v18);
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v16, *(_QWORD *)a2, *(std::__shared_weak_count **)(a2 + 8));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __str = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::dump_network(&v16, &__str, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  Espresso::load_network(a3, (uint64_t *)(a2 + 16), 0, 0, a1);
}

void sub_191334524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void Espresso::pass_wavernn_ane::initial_inner_product_to_add(Espresso::pass_wavernn_ane *this, Espresso::net *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  __int128 *v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  size_t size;
  std::string *v38;
  std::string *v39;
  std::string *p_str;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  size_t v44;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  __int128 v51;
  int v52;
  std::string::size_type v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  void **v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void **v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  int v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  char *v96;
  __int128 v97;
  std::string *v98;
  unint64_t v99;
  std::string *v100;
  __int128 v101;
  std::string::size_type *v102;
  std::string::size_type v103;
  size_t v104;
  std::string *v105;
  std::string *v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  char *v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t i;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::string::size_type v135;
  uint64_t v141;
  const void *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  const void *v149;
  char *v150;
  std::string *v151;
  unint64_t *p_size;
  unint64_t v153;
  char *v154;
  const char *v155;
  char *v156;
  char *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  char *v163;
  const char *v164;
  uint64_t v165;
  __int128 *v166;
  __int128 v167;
  _QWORD *v168;
  void *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::string::size_type v175;
  void *v176;
  std::__shared_weak_count *v177;
  uint64_t shared_owners;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::string::size_type v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::string::size_type v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  void *v225;
  void *v226;
  std::runtime_error *exception;
  Espresso::pass_wavernn_ane *v228;
  char *v229;
  std::__shared_weak_count *v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233[3];
  std::string *v234;
  std::string *v235;
  std::string *v236;
  uint64_t v237[2];
  uint64_t v238[2];
  std::string v239;
  std::string *v240;
  std::string *v241;
  std::string *v242;
  std::string *v243;
  std::string *v244;
  std::string *v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  __int128 v248;
  std::string::size_type v249;
  std::string::size_type v250;
  std::string *v251;
  std::string *v252;
  std::string *v253;
  std::string *v254;
  std::string *v255;
  std::string *v256;
  std::string v257;
  std::string v258;
  std::string __str;
  std::string v260;
  __int128 v261;
  _BYTE v262[48];
  __int128 v263;
  __int128 v264;
  _BYTE v265[36];
  char *v266;
  std::string *v267;
  unint64_t v268;
  uint64_t v269[2];
  uint64_t v270[2];
  void *v271[2];
  __int128 v272;
  int v273;
  void *__p;
  char v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count *v278;
  _BYTE v279[64];
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  uint64_t v282;
  std::string v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  _QWORD *v286;
  std::__shared_weak_count *v287;
  int v288[2];
  void *v289[5];
  std::string **v290;
  std::__shared_weak_count *v291;
  _BYTE v292[24];
  _BYTE *v293;
  std::string::size_type __sz[2];
  _BYTE v295[24];
  void *v296;
  __int128 v297;
  std::string v298;
  uint64_t v299;
  std::string v300;
  uint64_t v301;
  std::string v302;
  uint64_t v303;
  std::string v304;
  __int128 v305;

  *(_QWORD *)&v305 = *MEMORY[0x1E0C80C00];
  Espresso::net::get_producers_of_blobs(a2, (uint64_t)v289);
  *(_QWORD *)v288 = 0;
  v4 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v4)
  {
    v5 = 0;
    v229 = (char *)a2 + 56;
    do
    {
      v6 = *(_QWORD *)(v4 + 16 * v5);
      v7 = *(const void **)(v6 + 64);
      if (v7)
      {
        if (v8)
        {
          v9 = v8;
          v10 = *(std::__shared_weak_count **)(v6 + 72);
          v286 = v8;
          v287 = v10;
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldxr(p_shared_owners);
            while (__stxr(v12 + 1, p_shared_owners));
          }
          if ((!(***(unsigned int (****)(_QWORD))(v8[1] + 8))(*(_QWORD *)(v8[1] + 8))
             || (***(unsigned int (****)(_QWORD))(v9[1] + 8))(*(_QWORD *)(v9[1] + 8)) == 100)
            && *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v9 + 384))(v9) + 4) == *((_DWORD *)this + 7)
            && !*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v9 + 384))(v9) + 12)
            && !*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v9 + 384))(v9) + 16))
          {
            v13 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v9 + 384))(v9) + 4);
            (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v9 + 416))(&v284, v9);
            v271[0] = v288;
            v14 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)v288, (uint64_t)&std::piecewise_construct, (uint64_t **)v271)[3];
            if (*((char *)v14 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
            }
            else
            {
              v15 = *v14;
              v239.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
              *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v15;
            }
            v271[0] = v288;
            v16 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v229, (unint64_t *)v288, (uint64_t)&std::piecewise_construct, (uint64_t **)v271)[3];
            if (*((char *)v16 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
            }
            else
            {
              v17 = *v16;
              v304.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
              *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v17;
            }
            v18 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * *(_QWORD *)v288);
            if (*(char *)(v18 + 39) < 0)
              std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)(v18 + 16), *(_QWORD *)(v18 + 24));
            else
              v283 = *(std::string *)(v18 + 16);
            if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v289, (uint64_t)&v304))
            {
              v271[0] = &v304;
              v19 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v289, (uint64_t)&v304, (uint64_t)&std::piecewise_construct, (__int128 **)v271);
              if (v19[5] == *(_QWORD *)v288 - 1)
              {
                v271[0] = &v304;
                v271[0] = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v289, (uint64_t)&v304, (uint64_t)&std::piecewise_construct, (__int128 **)v271)+ 5;
                v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v229, (unint64_t *)v271[0], (uint64_t)&std::piecewise_construct, (uint64_t **)v271);
                v282 = 0;
                v280 = 0;
                v281 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v280, v20[3], v20[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v281 - (char *)v280) >> 3) >= 2)
                {
                  Espresso::net::remove_layer(a2, v288[0]);
                  Espresso::net::remove_layer(a2, v288[0] - 1);
                  v21 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
                  v270[0] = *((_QWORD *)a2 + 2);
                  v270[1] = (uint64_t)v21;
                  if (v21)
                  {
                    v22 = (unint64_t *)&v21->__shared_owners_;
                    do
                      v23 = __ldxr(v22);
                    while (__stxr(v23 + 1, v22));
                  }
                  v269[1] = 0;
                  v269[0] = 0;
                  Espresso::sequential_builder::sequential_builder((uint64_t)v271, v270, 0, v269);
                  if (v21)
                  {
                    v24 = (unint64_t *)&v21->__shared_owners_;
                    do
                      v25 = __ldaxr(v24);
                    while (__stlxr(v25 - 1, v24));
                    if (!v25)
                    {
                      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                      std::__shared_weak_count::__release_weak(v21);
                    }
                  }
                  v267 = 0;
                  v266 = 0;
                  v268 = 0;
                  v26 = (std::string::size_type)v280;
                  v230 = v281;
                  if (v280 == v281)
                  {
                    v96 = 0;
                  }
                  else
                  {
                    v228 = this;
                    v27 = 0;
                    v28 = 0;
                    do
                    {
                      v29 = v286;
                      v30 = (*(uint64_t (**)(_QWORD *))(*v286 + 384))(v286);
                      v261 = *(_OWORD *)v30;
                      v31 = *(_OWORD *)(v30 + 16);
                      v32 = *(_OWORD *)(v30 + 32);
                      v33 = *(_OWORD *)(v30 + 64);
                      *(_OWORD *)&v262[32] = *(_OWORD *)(v30 + 48);
                      v263 = v33;
                      *(_OWORD *)v262 = v31;
                      *(_OWORD *)&v262[16] = v32;
                      v34 = *(_OWORD *)(v30 + 80);
                      v35 = *(_OWORD *)(v30 + 96);
                      v36 = *(_OWORD *)(v30 + 112);
                      *(_DWORD *)&v265[32] = *(_DWORD *)(v30 + 128);
                      *(_OWORD *)v265 = v35;
                      *(_OWORD *)&v265[16] = v36;
                      v264 = v34;
                      __sz[0] = v26;
                      DWORD1(v261) = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)v26, (__int128 **)__sz)+ 5)+ 8);
                      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        size = HIBYTE(v239.__r_.__value_.__r.__words[2]);
                      else
                        size = v239.__r_.__value_.__l.__size_;
                      std::string::basic_string[abi:ne180100]((uint64_t)&v260, size + 2);
                      if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v38 = &v260;
                      else
                        v38 = (std::string *)v260.__r_.__value_.__r.__words[0];
                      if (size)
                      {
                        if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v39 = &v239;
                        else
                          v39 = (std::string *)v239.__r_.__value_.__r.__words[0];
                        memmove(v38, v39, size);
                      }
                      strcpy((char *)v38 + size, "__");
                      std::to_string(&__str, v28);
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_str = &__str;
                      else
                        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                      else
                        v41 = __str.__r_.__value_.__l.__size_;
                      v42 = std::string::append(&v260, (const std::string::value_type *)p_str, v41);
                      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
                      *(_QWORD *)v295 = *((_QWORD *)&v42->__r_.__value_.__l + 2);
                      *(_OWORD *)__sz = v43;
                      v42->__r_.__value_.__l.__size_ = 0;
                      v42->__r_.__value_.__r.__words[2] = 0;
                      v42->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v260.__r_.__value_.__l.__data_);
                      std::string::basic_string[abi:ne180100]<0>(&v260, "inner_product");
                      if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v44 = HIBYTE(v283.__r_.__value_.__r.__words[2]);
                      else
                        v44 = v283.__r_.__value_.__l.__size_;
                      std::string::basic_string[abi:ne180100]((uint64_t)&v258, v44 + 2);
                      if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v45 = &v258;
                      else
                        v45 = (std::string *)v258.__r_.__value_.__r.__words[0];
                      if (v44)
                      {
                        if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v46 = &v283;
                        else
                          v46 = (std::string *)v283.__r_.__value_.__r.__words[0];
                        memmove(v45, v46, v44);
                      }
                      strcpy((char *)v45 + v44, "__");
                      std::to_string(&v257, v28);
                      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v47 = &v257;
                      else
                        v47 = (std::string *)v257.__r_.__value_.__r.__words[0];
                      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v48 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
                      else
                        v48 = v257.__r_.__value_.__l.__size_;
                      v49 = std::string::append(&v258, (const std::string::value_type *)v47, v48);
                      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                      __str.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v50;
                      v49->__r_.__value_.__l.__size_ = 0;
                      v49->__r_.__value_.__r.__words[2] = 0;
                      v49->__r_.__value_.__r.__words[0] = 0;
                      if (*(char *)(v26 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)v26, *(_QWORD *)(v26 + 8));
                      }
                      else
                      {
                        v51 = *(_OWORD *)v26;
                        v302.__r_.__value_.__r.__words[2] = *(_QWORD *)(v26 + 16);
                        *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v51;
                      }
                      v254 = 0;
                      v255 = 0;
                      v256 = 0;
                      v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
                      v300.__r_.__value_.__s.__data_[8] = 0;
                      v254 = (std::string *)operator new(0x18uLL);
                      v255 = v254;
                      v256 = v254 + 1;
                      v255 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v256, (__int128 *)&v302, (__int128 *)&v303, v254);
                      if ((v295[7] & 0x80000000) != 0)
                      {
                        std::string::__init_copy_ctor_external(&v300, (const std::string::value_type *)__sz[0], __sz[1]);
                      }
                      else
                      {
                        *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *(_OWORD *)__sz;
                        v300.__r_.__value_.__r.__words[2] = *(_QWORD *)v295;
                      }
                      v251 = 0;
                      v252 = 0;
                      v253 = 0;
                      v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
                      v298.__r_.__value_.__s.__data_[8] = 0;
                      v251 = (std::string *)operator new(0x18uLL);
                      v252 = v251;
                      v253 = v251 + 1;
                      v252 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v253, (__int128 *)&v300, (__int128 *)&v301, v251);
                      Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v290, (uint64_t *)v271, (uint64_t)&v260, (uint64_t)&__str, (uint64_t)&v261, (uint64_t *)&v254, (uint64_t *)&v251);
                      v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v300.__r_.__value_.__l.__data_);
                      v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v300);
                      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v302.__r_.__value_.__l.__data_);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v257.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v258.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v260.__r_.__value_.__l.__data_);
                      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v260, SDWORD1(v261), v261, 1, 1);
                      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__str, v261, 1, 1, 1);
                      printf("initial_inner_product_to_add: i=%d start_ch=%d nB=%d nC=%d\n", v28, v27, DWORD1(v261), (_DWORD)v261);
                      if (!v28)
                      {
                        (*(void (**)(std::string *__return_ptr, _QWORD *))(*v29 + 408))(&v258, v29);
                        v79 = *(_OWORD *)&v258.__r_.__value_.__l.__data_;
                        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = 0uLL;
                        v80 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v79;
                        if (v80)
                        {
                          v81 = (unint64_t *)&v80->__shared_owners_;
                          do
                            v82 = __ldaxr(v81);
                          while (__stlxr(v82 - 1, v81));
                          if (!v82)
                          {
                            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                            std::__shared_weak_count::__release_weak(v80);
                          }
                        }
                        v83 = (std::__shared_weak_count *)v258.__r_.__value_.__l.__size_;
                        if (v258.__r_.__value_.__l.__size_)
                        {
                          v84 = (unint64_t *)(v258.__r_.__value_.__l.__size_ + 8);
                          do
                            v85 = __ldaxr(v84);
                          while (__stlxr(v85 - 1, v84));
                          if (!v85)
                          {
                            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                            std::__shared_weak_count::__release_weak(v83);
                          }
                        }
                      }
                      v52 = v261;
                      v53 = v260.__r_.__value_.__r.__words[0];
                      if ((_DWORD)v261)
                      {
                        v54 = 0;
                        v55 = 0;
                        v56 = DWORD1(v261);
                        v57 = v284;
                        v58 = v27;
                        do
                        {
                          if ((_DWORD)v56)
                          {
                            v59 = *(_QWORD *)(v57 + 16);
                            v60 = *(_QWORD *)(v53 + 16);
                            v61 = v58;
                            v62 = v54;
                            v63 = v56;
                            do
                            {
                              *(_DWORD *)(v60 + 4 * v62++) = *(_DWORD *)(v59 + 4 * v61++);
                              --v63;
                            }
                            while (v63);
                          }
                          ++v55;
                          v54 += v56;
                          v58 += v13;
                        }
                        while (v55 != v52);
                      }
                      v64 = (void **)v290;
                      v249 = v53;
                      v250 = v260.__r_.__value_.__l.__size_;
                      if (v260.__r_.__value_.__l.__size_)
                      {
                        v65 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
                        do
                          v66 = __ldxr(v65);
                        while (__stxr(v66 + 1, v65));
                      }
                      (*((void (**)(void **, std::string::size_type *))*v64 + 50))(v64, &v249);
                      v67 = (std::__shared_weak_count *)v250;
                      if (v250)
                      {
                        v68 = (unint64_t *)(v250 + 8);
                        do
                          v69 = __ldaxr(v68);
                        while (__stlxr(v69 - 1, v68));
                        if (!v69)
                        {
                          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                          std::__shared_weak_count::__release_weak(v67);
                        }
                      }
                      v70 = (void **)v290;
                      v248 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                      if (__str.__r_.__value_.__l.__size_)
                      {
                        v71 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                        do
                          v72 = __ldxr(v71);
                        while (__stxr(v72 + 1, v71));
                      }
                      (*((void (**)(void **, __int128 *))*v70 + 49))(v70, &v248);
                      v73 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
                      if (*((_QWORD *)&v248 + 1))
                      {
                        v74 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
                        do
                          v75 = __ldaxr(v74);
                        while (__stlxr(v75 - 1, v74));
                        if (!v75)
                        {
                          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                          std::__shared_weak_count::__release_weak(v73);
                        }
                      }
                      v76 = v267;
                      if ((unint64_t)v267 >= v268)
                      {
                        v78 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v266, (uint64_t)__sz);
                      }
                      else
                      {
                        if ((v295[7] & 0x80000000) != 0)
                        {
                          std::string::__init_copy_ctor_external(v267, (const std::string::value_type *)__sz[0], __sz[1]);
                        }
                        else
                        {
                          v77 = *(_OWORD *)__sz;
                          v267->__r_.__value_.__r.__words[2] = *(_QWORD *)v295;
                          *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
                        }
                        v78 = v76 + 1;
                      }
                      v267 = v78;
                      v86 = DWORD1(v261);
                      v87 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                      if (__str.__r_.__value_.__l.__size_)
                      {
                        v88 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                        do
                          v89 = __ldaxr(v88);
                        while (__stlxr(v89 - 1, v88));
                        if (!v89)
                        {
                          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                          std::__shared_weak_count::__release_weak(v87);
                        }
                      }
                      v90 = (std::__shared_weak_count *)v260.__r_.__value_.__l.__size_;
                      if (v260.__r_.__value_.__l.__size_)
                      {
                        v91 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
                        do
                          v92 = __ldaxr(v91);
                        while (__stlxr(v92 - 1, v91));
                        if (!v92)
                        {
                          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                          std::__shared_weak_count::__release_weak(v90);
                        }
                      }
                      v93 = v291;
                      if (v291)
                      {
                        v94 = (unint64_t *)&v291->__shared_owners_;
                        do
                          v95 = __ldaxr(v94);
                        while (__stlxr(v95 - 1, v94));
                        if (!v95)
                        {
                          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                          std::__shared_weak_count::__release_weak(v93);
                        }
                      }
                      if ((v295[7] & 0x80000000) != 0)
                        operator delete((void *)__sz[0]);
                      v27 += v86;
                      ++v28;
                      v26 += 24;
                    }
                    while ((std::__shared_weak_count *)v26 != v230);
                    v96 = v266;
                    this = v228;
                  }
                  if (v96[23] < 0)
                  {
                    std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)v96, *((_QWORD *)v96 + 1));
                    v96 = v266;
                  }
                  else
                  {
                    v97 = *(_OWORD *)v96;
                    v260.__r_.__value_.__r.__words[2] = *((_QWORD *)v96 + 2);
                    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v97;
                  }
                  v98 = v267;
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v267 - v96) >> 3) >= 2)
                  {
                    v99 = 1;
                    do
                    {
                      *(_QWORD *)&v261 = 0;
                      *((_QWORD *)&v261 + 1) = 1065353216;
                      *(_QWORD *)v262 = 897988541;
                      v262[8] = 0;
                      *(_QWORD *)&v262[28] = 0;
                      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                      {
                        std::string::__init_copy_ctor_external(&__str, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
                        v98 = v267;
                        v96 = v266;
                      }
                      else
                      {
                        __str = v239;
                      }
                      if (0xAAAAAAAAAAAAAAABLL * (((char *)v98 - v96) >> 3) - 1 > v99)
                      {
                        std::to_string(&v258, v99);
                        v100 = std::string::insert(&v258, 0, "__tmp_");
                        v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
                        *(_QWORD *)v295 = *((_QWORD *)&v100->__r_.__value_.__l + 2);
                        *(_OWORD *)__sz = v101;
                        v100->__r_.__value_.__l.__size_ = 0;
                        v100->__r_.__value_.__r.__words[2] = 0;
                        v100->__r_.__value_.__r.__words[0] = 0;
                        if (v295[7] >= 0)
                          v102 = __sz;
                        else
                          v102 = (std::string::size_type *)__sz[0];
                        if (v295[7] >= 0)
                          v103 = v295[7];
                        else
                          v103 = __sz[1];
                        std::string::append(&__str, (const std::string::value_type *)v102, v103);
                        if ((v295[7] & 0x80000000) != 0)
                          operator delete((void *)__sz[0]);
                        if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v258.__r_.__value_.__l.__data_);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v258, "elementwise");
                      if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v104 = HIBYTE(v283.__r_.__value_.__r.__words[2]);
                      else
                        v104 = v283.__r_.__value_.__l.__size_;
                      std::string::basic_string[abi:ne180100]((uint64_t)&v302, v104 + 5);
                      if ((v302.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v105 = &v302;
                      else
                        v105 = (std::string *)v302.__r_.__value_.__r.__words[0];
                      if (v104)
                      {
                        if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v106 = &v283;
                        else
                          v106 = (std::string *)v283.__r_.__value_.__r.__words[0];
                        memmove(v105, v106, v104);
                      }
                      strcpy((char *)v105 + v104, "__add");
                      std::to_string(&v300, v99);
                      if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v107 = &v300;
                      else
                        v107 = (std::string *)v300.__r_.__value_.__r.__words[0];
                      if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v108 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
                      else
                        v108 = v300.__r_.__value_.__l.__size_;
                      v109 = std::string::append(&v302, (const std::string::value_type *)v107, v108);
                      v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                      v257.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v110;
                      v109->__r_.__value_.__l.__size_ = 0;
                      v109->__r_.__value_.__r.__words[2] = 0;
                      v109->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)__sz, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
                      }
                      else
                      {
                        *(_OWORD *)__sz = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
                        *(_QWORD *)v295 = *((_QWORD *)&v260.__r_.__value_.__l + 2);
                      }
                      v111 = &v266[24 * v99];
                      if (v111[23] < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)&v295[8], *(const std::string::value_type **)v111, *((_QWORD *)v111 + 1));
                      }
                      else
                      {
                        v112 = *(_OWORD *)v111;
                        v296 = (void *)*((_QWORD *)v111 + 2);
                        *(_OWORD *)&v295[8] = v112;
                      }
                      v243 = 0;
                      v244 = 0;
                      v245 = 0;
                      v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v243;
                      v298.__r_.__value_.__s.__data_[8] = 0;
                      v243 = (std::string *)operator new(0x30uLL);
                      v244 = v243;
                      v245 = v243 + 2;
                      v244 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v245, (__int128 *)__sz, &v297, v243);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        std::string::__init_copy_ctor_external(&v298, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                      else
                        v298 = __str;
                      v240 = 0;
                      v241 = 0;
                      v242 = 0;
                      v290 = &v240;
                      LOBYTE(v291) = 0;
                      v240 = (std::string *)operator new(0x18uLL);
                      v241 = v240;
                      v242 = v240 + 1;
                      v241 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v242, (__int128 *)&v298, (__int128 *)&v299, v240);
                      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v246, (uint64_t *)v271, (uint64_t)&v258, (uint64_t)&v257, (uint64_t)&v261, (uint64_t)v243, (uint64_t)v244, (uint64_t *)&v240);
                      v113 = v247;
                      if (v247)
                      {
                        v114 = (unint64_t *)&v247->__shared_owners_;
                        do
                          v115 = __ldaxr(v114);
                        while (__stlxr(v115 - 1, v114));
                        if (!v115)
                        {
                          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                          std::__shared_weak_count::__release_weak(v113);
                        }
                      }
                      v290 = &v240;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v290);
                      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v298.__r_.__value_.__l.__data_);
                      v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v243;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                      for (i = 0; i != -48; i -= 24)
                      {
                        if (*((char *)&v296 + i + 7) < 0)
                          operator delete(*(void **)&v295[i + 8]);
                      }
                      if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v257.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v300.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v302.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v258.__r_.__value_.__l.__data_);
                      std::string::operator=(&v260, &__str);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      ++v99;
                      v98 = v267;
                      v96 = v266;
                    }
                    while (0xAAAAAAAAAAAAAAABLL * (((char *)v267 - v266) >> 3) > v99);
                  }
                  v261 = 0u;
                  *(_OWORD *)v262 = 0u;
                  *(_DWORD *)&v262[16] = 1065353216;
                  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v271, (__int128 **)a2, v288[0] - 1, (uint64_t)&v261);
                  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
                  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v260.__r_.__value_.__l.__data_);
                  *(_QWORD *)&v261 = &v266;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v261);
                  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v279);
                  v117 = v278;
                  if (v278)
                  {
                    v118 = (unint64_t *)&v278->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  v120 = v277;
                  if (v277)
                  {
                    v121 = (unint64_t *)&v277->__shared_owners_;
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                  v123 = v276;
                  if (v276)
                  {
                    v124 = (unint64_t *)&v276->__shared_owners_;
                    do
                      v125 = __ldaxr(v124);
                    while (__stlxr(v125 - 1, v124));
                    if (!v125)
                    {
                      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                      std::__shared_weak_count::__release_weak(v123);
                    }
                  }
                  if (v275 < 0)
                    operator delete(__p);
                  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v272, *((_QWORD **)&v272 + 1));
                  v126 = (std::__shared_weak_count *)v271[1];
                  if (v271[1])
                  {
                    v127 = (unint64_t *)((char *)v271[1] + 8);
                    do
                      v128 = __ldaxr(v127);
                    while (__stlxr(v128 - 1, v127));
                    if (!v128)
                    {
                      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                      std::__shared_weak_count::__release_weak(v126);
                    }
                  }
                }
                v271[0] = &v280;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v271);
              }
            }
            if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v283.__r_.__value_.__l.__data_);
            if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v304.__r_.__value_.__l.__data_);
            if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v239.__r_.__value_.__l.__data_);
            v129 = v285;
            if (v285)
            {
              v130 = (unint64_t *)&v285->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v10 = v287;
          }
          if (v10)
          {
            v132 = (unint64_t *)&v10->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
        }
      }
      v5 = *(_QWORD *)v288 + 1;
      *(_QWORD *)v288 = v5;
      v4 = *((_QWORD *)a2 + 4);
    }
    while (v5 < (*((_QWORD *)a2 + 5) - v4) >> 4);
  }
  *(_OWORD *)v271 = 0u;
  v272 = 0u;
  v273 = 1065353216;
  Espresso::net::get_consumers_of_blobs(a2, v271, (uint64_t)&v239);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v271);
  v258.__r_.__value_.__r.__words[0] = 0;
  v134 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) - v134 != 16)
  {
    v135 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      v141 = *(_QWORD *)(v134 + 16 * v135);
      v142 = *(const void **)(v141 + 64);
      if (v142
      {
        v144 = v143;
        v145 = *(std::__shared_weak_count **)(v141 + 72);
        v280 = v143;
        v281 = v145;
        if (v145)
        {
          v146 = (unint64_t *)&v145->__shared_owners_;
          do
            v147 = __ldxr(v146);
          while (__stxr(v147 + 1, v146));
          v134 = *((_QWORD *)a2 + 4);
        }
      }
      else
      {
        v144 = 0;
        v281 = 0;
        v280 = 0;
      }
      v148 = *(_QWORD *)(v134 + 16 * v135 + 16);
      v149 = *(const void **)(v148 + 64);
      if (!v149)
        goto LABEL_379;
      if (!v150)
        goto LABEL_379;
      v151 = *(std::string **)(v148 + 72);
      v266 = v150;
      v267 = v151;
      if (v151)
      {
        p_size = &v151->__r_.__value_.__l.__size_;
        do
          v153 = __ldxr(p_size);
        while (__stxr(v153 + 1, p_size));
      }
      if (v144)
      {
        if (*(_DWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v150 + 320))(v150) == 1)
        {
          v271[0] = &v258;
          v271[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)&v258, (uint64_t)&std::piecewise_construct, (uint64_t **)v271)+ 3);
          v154 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v239, (unsigned __int8 *)v271[0], (__int128 **)v271);
          if (*((_QWORD *)v154 + 6) - *((_QWORD *)v154 + 5) == 8)
          {
            v271[0] = &v258;
            v155 = (const char *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)&v258, (uint64_t)&std::piecewise_construct, (uint64_t **)v271)[3];
            if (v155[23] < 0)
              v155 = *(const char **)v155;
            v271[0] = &v258;
            v271[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)&v258, (uint64_t)&std::piecewise_construct, (uint64_t **)v271)+ 3);
            v156 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v239, (unsigned __int8 *)v271[0], (__int128 **)v271);
            printf("consumer k=%s consumer_of_constant=%zu ilayer=%zu\n", v155, **((_QWORD **)v156 + 5), v258.__r_.__value_.__r.__words[0]);
            v271[0] = &v258;
            v271[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)&v258, (uint64_t)&std::piecewise_construct, (uint64_t **)v271)+ 3);
            v157 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v239, (unsigned __int8 *)v271[0], (__int128 **)v271);
            if (**((_QWORD **)v157 + 5) == v258.__r_.__value_.__r.__words[0] + 1)
              break;
          }
        }
      }
LABEL_374:
      if (v151)
      {
        v218 = &v151->__r_.__value_.__l.__size_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          (*(void (**)(std::string *))(v151->__r_.__value_.__r.__words[0] + 16))(v151);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v151);
        }
      }
LABEL_379:
      v220 = v281;
      if (v281)
      {
        v221 = (unint64_t *)&v281->__shared_owners_;
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v135 = v258.__r_.__value_.__r.__words[0] + 1;
      v258.__r_.__value_.__r.__words[0] = v135;
      v134 = *((_QWORD *)a2 + 4);
      if (v135 >= ((*((_QWORD *)a2 + 5) - v134) >> 4) - 1)
        goto LABEL_385;
    }
    v158 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
    v238[0] = *((_QWORD *)a2 + 2);
    v238[1] = (uint64_t)v158;
    if (v158)
    {
      v159 = (unint64_t *)&v158->__shared_owners_;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
    v237[0] = 0;
    v237[1] = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)v271, v238, 0, v237);
    if (v158)
    {
      v161 = (unint64_t *)&v158->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    v262[24] = 0;
    *(_DWORD *)&v262[36] = -1;
    *(_QWORD *)&v262[40] = _D8;
    *(_OWORD *)&v262[4] = _D8;
    *(_QWORD *)((char *)&v264 + 4) = 0;
    *(_QWORD *)&v262[28] = 0;
    *(_DWORD *)v262 = 0;
    *(_DWORD *)&v262[20] = 0;
    memset(&v265[4], 0, 32);
    v261 = xmmword_191A93320;
    v283.__r_.__value_.__r.__words[0] = v258.__r_.__value_.__r.__words[0] + 1;
    v304.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 96, v258.__r_.__value_.__r.__words[0] + 1, &v283)[3];
    v163 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)v304.__r_.__value_.__l.__data_, (__int128 **)&v304);
    Espresso::abstract_blob_container::shape((char *)__sz, *((_QWORD *)v163 + 5));
    LODWORD(v261) = __sz[0];
    if (v296)
    {
      *(_QWORD *)&v297 = v296;
      operator delete(v296);
    }
    __sz[0] = v258.__r_.__value_.__r.__words[0] + 1;
    v164 = (const char *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 96, v258.__r_.__value_.__r.__words[0] + 1, __sz)[3];
    if (v164[23] < 0)
      v164 = *(const char **)v164;
    printf("%s %d\n", v164, (_DWORD)v261);
    *((_QWORD *)&v261 + 1) = 0;
    std::string::basic_string[abi:ne180100]<0>(__sz, "inner_product");
    v165 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * (v258.__r_.__value_.__r.__words[0] + 1));
    v257.__r_.__value_.__r.__words[0] = v258.__r_.__value_.__r.__words[0] + 1;
    v166 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v258.__r_.__value_.__r.__words[0] + 1, &v257)[3];
    if (*((char *)v166 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)v166, *((_QWORD *)v166 + 1));
    }
    else
    {
      v167 = *v166;
      v304.__r_.__value_.__r.__words[2] = *((_QWORD *)v166 + 2);
      *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v167;
    }
    v234 = 0;
    v235 = 0;
    v236 = 0;
    v283.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234;
    v283.__r_.__value_.__s.__data_[8] = 0;
    v234 = (std::string *)operator new(0x18uLL);
    v235 = v234;
    v236 = v234 + 1;
    v235 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v236, (__int128 *)&v304, &v305, v234);
    v302.__r_.__value_.__r.__words[0] = v258.__r_.__value_.__r.__words[0] + 1;
    v168 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 96, v258.__r_.__value_.__r.__words[0] + 1, &v302);
    memset(v233, 0, sizeof(v233));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v233, v168[3], v168[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v168[4] - v168[3]) >> 3));
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&__str, (uint64_t *)v271, (uint64_t)__sz, v165 + 16, (uint64_t)&v261, (uint64_t)v234, (uint64_t)v235, v233);
    if (__str.__r_.__value_.__r.__words[0]
    {
      v260.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
      v260.__r_.__value_.__l.__size_ = __str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_)
      {
LABEL_307:
        v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v233;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v283);
        v283.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v283);
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v304.__r_.__value_.__l.__data_);
        if ((v295[7] & 0x80000000) != 0)
          operator delete((void *)__sz[0]);
        if (!v260.__r_.__value_.__r.__words[0])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Cannot insert inner_product kernel");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v304, SDWORD1(v261), v261, 1, 1);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v283, v261, 1, 1, 1);
        v175 = v304.__r_.__value_.__r.__words[0];
        v176 = *(void **)(v304.__r_.__value_.__r.__words[0] + 16);
        v177 = v280;
        (*(void (**)(uint64_t))(*(_QWORD *)v280[14].__shared_owners_ + 32))(v280[14].__shared_owners_);
        shared_owners = v177[14].__shared_owners_;
        v179 = *(_QWORD *)(shared_owners + 160);
        v180 = *(std::__shared_weak_count **)(shared_owners + 168);
        if (v180)
        {
          v181 = (unint64_t *)&v180->__shared_owners_;
          do
            v182 = __ldxr(v181);
          while (__stxr(v182 + 1, v181));
        }
        memcpy(v176, *(const void **)(v179 + 24), 4 * *(int *)(v175 + 8) * (uint64_t)*(int *)(v175 + 12));
        if (v180)
        {
          v183 = (unint64_t *)&v180->__shared_owners_;
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
        v185 = v260.__r_.__value_.__r.__words[0];
        v232 = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
        if (v304.__r_.__value_.__l.__size_)
        {
          v186 = (unint64_t *)(v304.__r_.__value_.__l.__size_ + 8);
          do
            v187 = __ldxr(v186);
          while (__stxr(v187 + 1, v186));
        }
        (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)v185 + 400))(v185, &v232);
        v188 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
        if (*((_QWORD *)&v232 + 1))
        {
          v189 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
        v191 = v260.__r_.__value_.__r.__words[0];
        v231 = *(_OWORD *)&v283.__r_.__value_.__l.__data_;
        if (v283.__r_.__value_.__l.__size_)
        {
          v192 = (unint64_t *)(v283.__r_.__value_.__l.__size_ + 8);
          do
            v193 = __ldxr(v192);
          while (__stxr(v193 + 1, v192));
        }
        (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)v191 + 392))(v191, &v231);
        v194 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
        if (*((_QWORD *)&v231 + 1))
        {
          v195 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        Espresso::net::remove_layer(a2, LODWORD(v258.__r_.__value_.__l.__data_) + 1);
        Espresso::net::remove_layer(a2, (int)v258.__r_.__value_.__l.__data_);
        *(_OWORD *)v295 = 0u;
        *(_OWORD *)__sz = 0u;
        *(_DWORD *)&v295[16] = 1065353216;
        Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v271, (__int128 **)a2, (int)v258.__r_.__value_.__l.__data_, (uint64_t)__sz);
        std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
        v197 = (std::__shared_weak_count *)v283.__r_.__value_.__l.__size_;
        if (v283.__r_.__value_.__l.__size_)
        {
          v198 = (unint64_t *)(v283.__r_.__value_.__l.__size_ + 8);
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        v200 = (std::__shared_weak_count *)v304.__r_.__value_.__l.__size_;
        if (v304.__r_.__value_.__l.__size_)
        {
          v201 = (unint64_t *)(v304.__r_.__value_.__l.__size_ + 8);
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        v203 = (std::__shared_weak_count *)v260.__r_.__value_.__l.__size_;
        if (v260.__r_.__value_.__l.__size_)
        {
          v204 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
            std::__shared_weak_count::__release_weak(v203);
          }
        }
        std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v279);
        v206 = v278;
        if (v278)
        {
          v207 = (unint64_t *)&v278->__shared_owners_;
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        v209 = v277;
        if (v277)
        {
          v210 = (unint64_t *)&v277->__shared_owners_;
          do
            v211 = __ldaxr(v210);
          while (__stlxr(v211 - 1, v210));
          if (!v211)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
        }
        v212 = v276;
        if (v276)
        {
          v213 = (unint64_t *)&v276->__shared_owners_;
          do
            v214 = __ldaxr(v213);
          while (__stlxr(v214 - 1, v213));
          if (!v214)
          {
            ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
            std::__shared_weak_count::__release_weak(v212);
          }
        }
        if (v275 < 0)
          operator delete(__p);
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v272, *((_QWORD **)&v272 + 1));
        v215 = (std::__shared_weak_count *)v271[1];
        if (v271[1])
        {
          v216 = (unint64_t *)((char *)v271[1] + 8);
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
            std::__shared_weak_count::__release_weak(v215);
          }
        }
        v151 = v267;
        goto LABEL_374;
      }
      v170 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
    }
    else
    {
      *(_OWORD *)&v260.__r_.__value_.__l.__data_ = 0uLL;
    }
    v172 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v173 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    goto LABEL_307;
  }
LABEL_385:
  std::string::basic_string[abi:ne180100]<0>(v271, "xxx");
  v293 = 0;
  Espresso::net::pprint((uint64_t)a2, (uint64_t)v271, (uint64_t)v292);
  v223 = v293;
  if (v293 == v292)
  {
    v224 = 4;
    v223 = v292;
  }
  else
  {
    if (!v293)
      goto LABEL_390;
    v224 = 5;
  }
  (*(void (**)(void))(*v223 + 8 * v224))();
LABEL_390:
  if (SBYTE7(v272) < 0)
    operator delete(v271[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v239.__r_.__value_.__r.__words[2]);
  v225 = (void *)v239.__r_.__value_.__r.__words[0];
  v239.__r_.__value_.__r.__words[0] = 0;
  if (v225)
    operator delete(v225);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v289[2]);
  v226 = v289[0];
  v289[0] = 0;
  if (v226)
    operator delete(v226);
}

void sub_1913361F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  STACK[0x260] = (unint64_t)&STACK[0x2E8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x3E8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (a50 < 0)
    operator delete(a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&STACK[0x448]);
  _Unwind_Resume(a1);
}

uint64_t util_compare(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 *v22;
  int v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  void (***v39)(uint64_t *__return_ptr, _QWORD);
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string::size_type v47;
  uint64_t v48;
  float v49;
  char v50;
  uint64_t v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  __int128 *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  float *v74;
  float *v75;
  float v76;
  float v77;
  const char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  float *v83;
  float *v84;
  float v85;
  float v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  float v91;
  float v92;
  float *v93;
  float v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  float v99;
  float v100;
  unint64_t v101;
  double v102;
  double v103;
  double v104;
  float v105;
  double v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  float v111;
  float v112;
  BOOL v113;
  uint64_t v114;
  unint64_t v115;
  double v116;
  const char *v117;
  uint64_t v118;
  float v119;
  float v120;
  unint64_t v121;
  float *v122;
  float v123;
  float v124;
  double v125;
  uint64_t v126;
  double v127;
  double v128;
  uint64_t v129;
  unint64_t v130;
  float v131;
  float v132;
  double v133;
  uint64_t i;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD v159[2];
  _QWORD v160[2];
  _QWORD v161[5];
  std::__shared_weak_count *v162;
  _QWORD v163[5];
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  int v169;
  char v170;
  int v171;
  id v172;
  void (***v173)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v174;
  __int128 *v175;
  uint64_t v176;
  void (*v177)(uint64_t, _QWORD *);
  void *v178;
  uint64_t *v179;
  std::string __p;
  char v181;
  int v182;
  uint64_t v183;
  _QWORD v184[2];
  __int128 *v185;
  uint64_t v186;
  void (*v187)(uint64_t, _QWORD *);
  void *v188;
  uint64_t *v189;
  std::string v190;
  char v191;
  int v192;
  int v193;
  _QWORD v194[2];
  std::string v195;
  char v196;
  __int128 *v197[2];

  v2 = *a1;
  v3 = *(std::__shared_weak_count **)(*a1 + 24);
  v173 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a1 + 16);
  v174 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v2 = *a1;
  }
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v165 = v2;
  v166 = v6;
  if (v6)
  {
    v13 = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v167 = v9;
  v168 = v10;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v169 = 1;
    v170 = 0;
    v171 = -887581056;
    v172 = 0;
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v169 = 1;
    v170 = 0;
    v171 = -887581056;
    v172 = 0;
  }
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v20 = *(_QWORD **)(v167 + 232);
  v21 = (_QWORD *)(v167 + 240);
  v22 = (__int128 *)MEMORY[0x1E0C809B0];
  if (v20 != (_QWORD *)(v167 + 240))
  {
    v23 = 0;
    do
    {
      if (*((char *)v20 + 55) < 0)
        std::string::__init_copy_ctor_external(&v195, (const std::string::value_type *)v20[4], v20[5]);
      else
        v195 = *(std::string *)(v20 + 4);
      v196 = *((_BYTE *)v20 + 56);
      v197[0] = (__int128 *)&v195;
      v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v167 + 136, (unsigned __int8 *)&v195, v197);
      v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
      v194[0] = *((_QWORD *)v24 + 5);
      v194[1] = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v185 = v22;
      v186 = 3321888768;
      v187 = ___ZN8Espresso9net_bench17fill_random_inputEff_block_invoke;
      v188 = &__block_descriptor_80_ea8_40c79_ZTSNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbEE_e70_v24__0_shared_ptr_Espresso::blob_float__4____v____shared_weak_count__8l;
      v189 = &v165;
      v192 = v23;
      v193 = 1065353216;
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v190, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
      else
        v190 = v195;
      v191 = v196;
      Espresso::sync_copy_from_host(v194, &v185);
      if (v25)
      {
        v28 = (unint64_t *)&v25->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v165 + 136), (unsigned __int8 *)&v195))
      {
        v197[0] = (__int128 *)&v195;
        v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v165 + 136, (unsigned __int8 *)&v195, v197);
        v31 = (std::__shared_weak_count *)*((_QWORD *)v30 + 6);
        v184[0] = *((_QWORD *)v30 + 5);
        v184[1] = v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v175 = v22;
        v176 = 3321888768;
        v177 = ___ZN8Espresso9net_bench17fill_random_inputEff_block_invoke_129;
        v178 = &__block_descriptor_84_ea8_40c79_ZTSNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbEE_e70_v24__0_shared_ptr_Espresso::blob_float__4____v____shared_weak_count__8l;
        v179 = &v165;
        v182 = v23;
        v183 = 1065353216;
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
        else
          __p = v195;
        v181 = v196;
        Espresso::sync_copy_from_host(v184, &v175);
        if (v31)
        {
          v34 = (unint64_t *)&v31->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        ++v23;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v190.__r_.__value_.__l.__data_);
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
      v36 = (_QWORD *)v20[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v20[2];
          v38 = *v37 == (_QWORD)v20;
          v20 = v37;
        }
        while (!v38);
      }
      v20 = v37;
    }
    while (v37 != v21);
  }
  v170 = 1;
  v39 = v173;
  v163[0] = v22;
  v163[1] = 3321888768;
  v163[2] = ___ZL12util_compareNSt3__110shared_ptrIN8Espresso3netEEES3__block_invoke;
  v163[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v40 = a1;
  v41 = (std::__shared_weak_count *)a1[1];
  v163[4] = *a1;
  v164 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  Espresso::abstract_context::compute_batch_sync(v39, v163);
  v161[0] = v22;
  v161[1] = 3321888768;
  v161[2] = ___ZL12util_compareNSt3__110shared_ptrIN8Espresso3netEEES3__block_invoke_124;
  v161[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v44 = (std::__shared_weak_count *)a2[1];
  v161[4] = *a2;
  v162 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  Espresso::abstract_context::compute_batch_sync(v39, v161);
  v47 = *(_QWORD *)(*a2 + 664);
  v48 = *(_QWORD *)(*a2 + 672);
  if (v47 == v48)
  {
    v50 = 1;
  }
  else
  {
    v49 = 0.0;
    v50 = 1;
    do
    {
      v51 = *a2 + 136;
      v185 = (__int128 *)v47;
      v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v51, (unsigned __int8 *)v47, &v185);
      v53 = (std::__shared_weak_count *)*((_QWORD *)v52 + 6);
      v160[0] = *((_QWORD *)v52 + 5);
      v160[1] = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      Espresso::sync_copy_to_host(&v175, v160);
      if (v53)
      {
        v56 = (unint64_t *)&v53->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*v40 + 136), (unsigned __int8 *)v47))
      {
        v58 = *v40 + 136;
        v195.__r_.__value_.__r.__words[0] = v47;
        v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v58, (unsigned __int8 *)v47, (__int128 **)&v195);
        v60 = (std::__shared_weak_count *)*((_QWORD *)v59 + 6);
        v159[0] = *((_QWORD *)v59 + 5);
        v159[1] = v60;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        Espresso::sync_copy_to_host(&v185, v159);
        if (v60)
        {
          v63 = (unint64_t *)&v60->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v65 = 0;
        v66 = v185;
        v67 = *((int *)v185 + 2);
        v68 = (char *)v185 + 12;
        v69 = v67;
        do
        {
          v69 *= *(int *)&v68[v65];
          v65 += 4;
        }
        while (v65 != 12);
        v70 = 0;
        v71 = *((int *)v175 + 2);
        v72 = (char *)v175 + 12;
        v73 = v71;
        do
        {
          v73 *= *(int *)&v72[v70];
          v70 += 4;
        }
        while (v70 != 12);
        if (v73 < v69)
          v69 = v73;
        if (v69)
        {
          v74 = (float *)*((_QWORD *)v185 + 3);
          v75 = (float *)*((_QWORD *)v175 + 3);
          v76 = 0.0;
          do
          {
            v77 = vabds_f32(*v74, *v75);
            if (v77 > v76)
              v76 = v77;
            ++v75;
            ++v74;
            --v69;
          }
          while (v69);
        }
        else
        {
          v76 = 0.0;
        }
        v79 = 0;
        v80 = *((int *)v185 + 2);
        do
        {
          v80 *= *(int *)&v68[v79];
          v79 += 4;
        }
        while (v79 != 12);
        v81 = 0;
        v82 = *((int *)v175 + 2);
        do
        {
          v82 *= *(int *)&v72[v81];
          v81 += 4;
        }
        while (v81 != 12);
        if (v82 < v80)
          v80 = v82;
        if (v80)
        {
          v83 = (float *)*((_QWORD *)v185 + 3);
          v84 = (float *)*((_QWORD *)v175 + 3);
          v85 = 0.0;
          do
          {
            v86 = vabds_f32(*v83, *v84);
            if (v86 > v85)
              v85 = v86;
            ++v84;
            ++v83;
            --v80;
          }
          while (v80);
          v87 = v85;
        }
        else
        {
          v87 = 0.0;
        }
        v88 = 0;
        v89 = *((int *)v175 + 2);
        do
        {
          v89 *= *(int *)&v72[v88];
          v88 += 4;
        }
        while (v88 != 12);
        v90 = (float *)*((_QWORD *)v175 + 3);
        v91 = *v90;
        v92 = *v90;
        if (v89)
        {
          v93 = (float *)*((_QWORD *)v175 + 3);
          v92 = *v90;
          do
          {
            v94 = *v93++;
            v95 = v94;
            if (v94 > v92)
              v92 = v95;
            --v89;
          }
          while (v89);
        }
        v96 = 0;
        v97 = *((int *)v175 + 2);
        do
        {
          v97 *= *(int *)&v72[v96];
          v96 += 4;
        }
        while (v96 != 12);
        if (v97)
        {
          v98 = (float *)*((_QWORD *)v175 + 3);
          do
          {
            v99 = *v98++;
            v100 = v99;
            if (v99 < v91)
              v91 = v100;
            --v97;
          }
          while (v97);
        }
        v101 = 0;
        v102 = v92;
        v103 = -v91;
        if (v102 >= v103)
          v103 = v102;
        v104 = fabs(v103);
        v105 = 0.0;
        v106 = 0.0;
        while (1)
        {
          v107 = 0;
          v108 = *((int *)v185 + 2);
          do
          {
            v108 *= *(int *)&v68[v107];
            v107 += 4;
          }
          while (v107 != 12);
          v109 = 0;
          v110 = *((int *)v175 + 2);
          do
          {
            v110 *= *(int *)&v72[v109];
            v109 += 4;
          }
          while (v109 != 12);
          if (v110 < v108)
            v108 = v110;
          if (v108 <= v101)
            break;
          v111 = v90[v101];
          v106 = v106
               + (float)((float)(*(float *)(*((_QWORD *)v185 + 3) + 4 * v101) - v111)
                       * (float)(*(float *)(*((_QWORD *)v185 + 3) + 4 * v101) - v111));
          v112 = fabsf(v111);
          if (v101)
            v113 = v112 <= v105;
          else
            v113 = 0;
          if (!v113)
            v105 = v112;
          ++v101;
        }
        v114 = 0;
        v115 = *((int *)v185 + 2);
        do
        {
          v115 *= *(int *)&v68[v114];
          v114 += 4;
        }
        while (v114 != 12);
        v116 = log10((v105 + 0.00001) / (sqrt(v106 / (double)v115) + 1.0e-10));
        if (v76 >= v49)
          v49 = v76;
        v117 = (const char *)v47;
        if (*(char *)(v47 + 23) < 0)
          v117 = *(const char **)v47;
        v118 = 0;
        v120 = v116 * 20.0;
        v121 = v67;
        do
        {
          v121 *= *(int *)&v68[v118];
          v118 += 4;
        }
        while (v118 != 12);
        if (v121)
        {
          v122 = (float *)*((_QWORD *)v66 + 3);
          v123 = 0.0;
          do
          {
            v124 = *v122++;
            v123 = v123 + v124;
            --v121;
          }
          while (v121);
          v125 = v123;
        }
        else
        {
          v125 = 0.0;
        }
        v126 = 0;
        v127 = v120;
        v119 = v87 / v104;
        v128 = v119;
        do
        {
          v67 *= *(int *)&v68[v126];
          v126 += 4;
        }
        while (v126 != 12);
        v129 = 0;
        v130 = v71;
        do
        {
          v130 *= *(int *)&v72[v129];
          v129 += 4;
        }
        while (v129 != 12);
        if (v130)
        {
          v131 = 0.0;
          do
          {
            v132 = *v90++;
            v131 = v131 + v132;
            --v130;
          }
          while (v130);
          v133 = v131;
        }
        else
        {
          v133 = 0.0;
        }
        for (i = 0; i != 12; i += 4)
          v71 *= *(int *)&v72[i];
        printf("[Espresso::net_bench] blob: %s\terr: %.4e\tpsnr: %.2f\tmaxreldiff=%.2f\tavg1: %.4e avgr: %.4e\n", v117, v76, v127, v128, v125 / (double)v67, v133 / (double)v71);
        v135 = (std::__shared_weak_count *)v186;
        v40 = a1;
        if (v186)
        {
          v136 = (unint64_t *)(v186 + 8);
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        v50 &= v49 <= 0.0001;
      }
      else
      {
        v78 = (const char *)v47;
        if (*(char *)(v47 + 23) < 0)
          v78 = *(const char **)v47;
        printf("blob missing: %s\n", v78);
      }
      v138 = (std::__shared_weak_count *)v176;
      if (v176)
      {
        v139 = (unint64_t *)(v176 + 8);
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      v47 += 24;
    }
    while (v47 != v48);
  }
  v141 = v162;
  if (v162)
  {
    v142 = (unint64_t *)&v162->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v164;
  if (v164)
  {
    v145 = (unint64_t *)&v164->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }

  v147 = v168;
  if (v168)
  {
    v148 = (unint64_t *)&v168->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v166;
  if (v166)
  {
    v151 = (unint64_t *)&v166->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v174;
  if (v174)
  {
    v154 = (unint64_t *)&v174->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  return v50 & 1;
}

void sub_1913372D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42);
  Espresso::net_bench::~net_bench(&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void Espresso::pass_wavernn_ane::create_loop(Espresso::pass_wavernn_ane *this, Espresso::net *a2)
{
  uint64_t v2;
  unint64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unsigned int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t i;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _OWORD *v43;
  void *v44;
  __int128 v45;
  _OWORD *v46;
  void *v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t j;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t k;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126[2];
  uint64_t *v127[3];
  std::string *v128[3];
  std::string *v129[3];
  uint64_t v130[2];
  uint64_t v131[2];
  uint64_t v132[2];
  uint64_t v133[3];
  _QWORD v134[3];
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137[3];
  _QWORD v138[3];
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141[3];
  _QWORD v142[3];
  uint64_t v143;
  std::__shared_weak_count *v144;
  std::string *v145;
  std::string *v146;
  std::string *v147;
  std::string *v148;
  std::string *v149;
  std::string *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153[2];
  uint64_t v154[2];
  std::string *v155;
  std::string *v156;
  std::string *v157;
  std::string *v158;
  std::string *v159;
  std::string *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  std::string *v163;
  std::string *v164;
  std::string *v165;
  std::string *v166;
  std::string *v167;
  std::string *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  uint64_t v171[3];
  std::string *v172;
  std::string *v173;
  std::string *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  std::string *v177;
  std::string *v178;
  std::string *v179;
  std::string *v180;
  std::string *v181;
  std::string *v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  __int128 __p;
  __int128 v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192[3];
  _QWORD v193[3];
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196[2];
  uint64_t v197[2];
  __int128 v198;
  uint64_t v199;
  _QWORD *v200;
  void *v201;
  char v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count *v205;
  _BYTE v206[64];
  char **v207;
  char *v208[2];
  std::string v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  std::string **v218;
  char v219;
  _BYTE v220[24];
  _BYTE *v221;
  void *v222[2];
  char v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  __int128 v229;
  char v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;

  *(_QWORD *)&v233 = *MEMORY[0x1E0C80C00];
  v217 = 0;
  v216 = 0;
  v214 = 0;
  v213 = 0;
  v215 = 0;
  v211 = 0;
  v210 = 0;
  v212 = 0;
  memset(&v209, 0, sizeof(v209));
  *(_QWORD *)&__p = 0;
  v2 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) - v2 == 16)
    goto LABEL_273;
  v5 = 0;
  v6 = (char *)a2 + 56;
  v7 = (char *)a2 + 96;
  do
  {
    v8 = *(_OWORD *)(v2 + 16 * v5);
    v198 = v8;
    if (*((_QWORD *)&v8 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v8;
    v12 = *(void **)(v8 + 64);
    if (v12
    {
      v13 = *(_QWORD *)(v11 + 72);
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v13 = 0;
    }
    v16 = (std::__shared_weak_count *)v217;
    v216 = (uint64_t)v12;
    v217 = v13;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v12 = (void *)v216;
    }
    if (v12
      && (v19 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v12 + 384))(v12),
          v19[1] == *((_DWORD *)this + 7) - 2)
      && *v19 == 3 * *((_DWORD *)this + 6))
    {
      *(_QWORD *)&v224 = &__p;
      v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v224);
      if (&v213 != v20 + 3)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v213, (std::string *)v20[3], (std::string *)v20[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
      *(_QWORD *)&v224 = &__p;
      v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v224);
      if (&v210 != v21 + 3)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v210, (std::string *)v21[3], (std::string *)v21[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[4] - v21[3]) >> 3));
      std::string::operator=(&v209, (const std::string *)(v198 + 16));
      Espresso::net::remove_layer(a2, __p);
      v22 = 0;
    }
    else
    {
      v22 = 1;
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
    if (*((_QWORD *)&v198 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (!v22)
      break;
    v5 = __p + 1;
    *(_QWORD *)&__p = v5;
    v2 = *((_QWORD *)a2 + 4);
  }
  while (v5 < ((*((_QWORD *)a2 + 5) - v2) >> 4) - 1);
  if (!v216)
LABEL_273:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Input inner product not found");
  v26 = getenv("ESPRESSO_N_ITERS");
  if (v26)
    v27 = atoi(v26);
  else
    v27 = 2;
  v208[1] = 0;
  v208[0] = 0;
  v207 = v208;
  v28 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v197[0] = *((_QWORD *)a2 + 2);
  v197[1] = (uint64_t)v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v196[1] = 0;
  v196[0] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v198, v197, 0, v196);
  if (v28)
  {
    v31 = (unint64_t *)&v28->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v224, "i");
  Espresso::add_constant((uint64_t *)&v198, (uint64_t)&v224, 1, 1u, 1u, 1u, 0.0);
  if (SBYTE7(v225) < 0)
    operator delete((void *)v224);
  std::string::basic_string[abi:ne180100]<0>(&v224, "max_iter");
  Espresso::add_constant((uint64_t *)&v198, (uint64_t)&v224, 1, 1u, 1u, 1u, (float)(int)v27);
  if (SBYTE7(v225) < 0)
    operator delete((void *)v224);
  std::string::basic_string[abi:ne180100]<0>(&v224, "cf_loop");
  std::string::basic_string[abi:ne180100]<0>(&__p, "loop");
  LODWORD(v231) = 0;
  memset(v193, 0, sizeof(v193));
  memset(v192, 0, sizeof(v192));
  Espresso::sequential_builder::add<Espresso::cf_loop_params_t>(&v194, (uint64_t *)&v198, (uint64_t)&v224, (uint64_t)&__p, (uint64_t)&v231, 0, 0, v192);
  v33 = v195;
  if (v195)
  {
    v34 = (unint64_t *)&v195->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *(_QWORD *)&v183 = v192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
  *(_QWORD *)&v183 = v193;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
  if (SBYTE7(v188) < 0)
    operator delete((void *)__p);
  if (SBYTE7(v225) < 0)
    operator delete((void *)v224);
  *(_QWORD *)&v188 = 897988541;
  BYTE8(v188) = 0;
  v191 = 0;
  v190 = 0;
  *((_QWORD *)&__p + 1) = 1065353216;
  *(_QWORD *)&__p = 103;
  std::string::basic_string[abi:ne180100]<0>(&v183, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(&v231, "loop_cond");
  std::string::basic_string[abi:ne180100]<0>(&v224, "i");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v225 + 1, "max_iter");
  v181 = 0;
  v180 = 0;
  v182 = 0;
  *(_QWORD *)&v229 = &v180;
  BYTE8(v229) = 0;
  v180 = (std::string *)operator new(0x30uLL);
  v181 = v180;
  v182 = v180 + 2;
  v181 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v182, &v224, (__int128 *)((char *)&v227 + 8), v180);
  std::string::basic_string[abi:ne180100]<0>(&v229, "loop_cond");
  v178 = 0;
  v177 = 0;
  v179 = 0;
  v222[0] = &v177;
  LOBYTE(v222[1]) = 0;
  v177 = (std::string *)operator new(0x18uLL);
  v178 = v177;
  v179 = v177 + 1;
  v178 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v179, &v229, &v231, v177);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v185, (uint64_t *)&v198, (uint64_t)&v183, (uint64_t)&v231, (uint64_t)&__p, (uint64_t)v180, (uint64_t)v181, (uint64_t *)&v177);
  v36 = v186;
  if (v186)
  {
    v37 = (unint64_t *)&v186->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v222[0] = &v177;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v222);
  if (v230 < 0)
    operator delete((void *)v229);
  *(_QWORD *)&v229 = &v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
  for (i = 0; i != -48; i -= 24)
  {
    if (*((char *)&v227 + i + 7) < 0)
      operator delete(*(void **)((char *)&v225 + i + 8));
  }
  if (SHIBYTE(v232) < 0)
    operator delete((void *)v231);
  if (SHIBYTE(v184) < 0)
    operator delete((void *)v183);
  std::string::basic_string[abi:ne180100]<0>(&v224, "cf_if");
  std::string::basic_string[abi:ne180100]<0>(&v183, "loop_if");
  std::string::basic_string[abi:ne180100]<0>(&v231, "loop_cond");
  v173 = 0;
  v172 = 0;
  v174 = 0;
  *(_QWORD *)&v229 = &v172;
  BYTE8(v229) = 0;
  v172 = (std::string *)operator new(0x18uLL);
  v173 = v172;
  v174 = v172 + 1;
  v173 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v174, &v231, &v233, v172);
  memset(v171, 0, sizeof(v171));
  Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v175, (uint64_t *)&v198, (uint64_t)&v224, (uint64_t)&v183, (uint64_t)v222, (uint64_t)v172, (uint64_t)v173, v171);
  v40 = v176;
  if (v176)
  {
    v41 = (unint64_t *)&v176->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *(_QWORD *)&v229 = v171;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
  *(_QWORD *)&v229 = &v172;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
  if (SHIBYTE(v232) < 0)
    operator delete((void *)v231);
  if (SHIBYTE(v184) < 0)
    operator delete((void *)v183);
  if (SBYTE7(v225) < 0)
    operator delete((void *)v224);
  v184 = 0x100000001;
  v183 = xmmword_191A93360;
  v231 = v27 | 0x10000000000uLL;
  v232 = 0x200000000;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v231, 0, (uint64_t)&v224);
  std::string::basic_string[abi:ne180100]<0>(&v229, "O2__rand_v");
  v222[0] = &v229;
  v43 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v207, &v229, (_OWORD **)v222);
  v44 = (void *)*((_QWORD *)v43 + 12);
  v45 = v225;
  *(_OWORD *)((char *)v43 + 56) = v224;
  *(_OWORD *)((char *)v43 + 72) = v45;
  *((_QWORD *)v43 + 11) = v226;
  if (v44)
  {
    *((_QWORD *)v43 + 13) = v44;
    operator delete(v44);
    *((_QWORD *)v43 + 12) = 0;
    *((_QWORD *)v43 + 13) = 0;
    *((_QWORD *)v43 + 14) = 0;
  }
  v43[6] = v227;
  *((_QWORD *)v43 + 14) = v228;
  v228 = 0;
  v227 = 0uLL;
  if (v230 < 0)
  {
    operator delete((void *)v229);
    if ((_QWORD)v227)
    {
      *((_QWORD *)&v227 + 1) = v227;
      operator delete((void *)v227);
    }
  }
  v231 = v27 | 0x10000000000uLL;
  v232 = 0x200000000;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v231, 0, (uint64_t)&v224);
  std::string::basic_string[abi:ne180100]<0>(&v229, "O4__rand_v");
  v222[0] = &v229;
  v46 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v207, &v229, (_OWORD **)v222);
  v47 = (void *)*((_QWORD *)v46 + 12);
  v48 = v225;
  *(_OWORD *)((char *)v46 + 56) = v224;
  *(_OWORD *)((char *)v46 + 72) = v48;
  *((_QWORD *)v46 + 11) = v226;
  if (v47)
  {
    *((_QWORD *)v46 + 13) = v47;
    operator delete(v47);
    *((_QWORD *)v46 + 12) = 0;
    *((_QWORD *)v46 + 13) = 0;
    *((_QWORD *)v46 + 14) = 0;
  }
  v46[6] = v227;
  *((_QWORD *)v46 + 14) = v228;
  v228 = 0;
  v227 = 0uLL;
  if (v230 < 0)
  {
    operator delete((void *)v229);
    if ((_QWORD)v227)
    {
      *((_QWORD *)&v227 + 1) = v227;
      operator delete((void *)v227);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v231, "slice");
  std::string::basic_string[abi:ne180100]<0>(&v229, "O2_rand_sliced");
  std::string::basic_string[abi:ne180100]<0>(&v224, "O2__rand_v");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v225 + 1, "i");
  v167 = 0;
  v166 = 0;
  v168 = 0;
  v222[0] = &v166;
  LOBYTE(v222[1]) = 0;
  v166 = (std::string *)operator new(0x30uLL);
  v167 = v166;
  v168 = v166 + 2;
  v167 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v168, &v224, (__int128 *)((char *)&v227 + 8), v166);
  std::string::basic_string[abi:ne180100]<0>(v222, "O2__rand");
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v218 = &v163;
  v219 = 0;
  v163 = (std::string *)operator new(0x18uLL);
  v164 = v163;
  v165 = v163 + 1;
  v164 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v165, (__int128 *)v222, &v224, v163);
  Espresso::sequential_builder::add<Espresso::slice_params_t>(&v169, (uint64_t *)&v198, (uint64_t)&v231, (uint64_t)&v229, (uint64_t)&v183, (uint64_t)v166, (uint64_t)v167, (uint64_t *)&v163);
  v49 = v170;
  if (v170)
  {
    v50 = (unint64_t *)&v170->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v218 = &v163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
  if (v223 < 0)
    operator delete(v222[0]);
  v222[0] = &v166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v222);
  for (j = 0; j != -48; j -= 24)
  {
    if (*((char *)&v227 + j + 7) < 0)
      operator delete(*(void **)((char *)&v225 + j + 8));
  }
  if (v230 < 0)
    operator delete((void *)v229);
  if (SHIBYTE(v232) < 0)
    operator delete((void *)v231);
  std::string::basic_string[abi:ne180100]<0>(&v231, "slice");
  std::string::basic_string[abi:ne180100]<0>(&v229, "O4_rand_sliced");
  std::string::basic_string[abi:ne180100]<0>(&v224, "O4__rand_v");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v225 + 1, "i");
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v222[0] = &v158;
  LOBYTE(v222[1]) = 0;
  v158 = (std::string *)operator new(0x30uLL);
  v159 = v158;
  v160 = v158 + 2;
  v159 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v160, &v224, (__int128 *)((char *)&v227 + 8), v158);
  std::string::basic_string[abi:ne180100]<0>(v222, "O4__rand");
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v218 = &v155;
  v219 = 0;
  v155 = (std::string *)operator new(0x18uLL);
  v156 = v155;
  v157 = v155 + 1;
  v156 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v157, (__int128 *)v222, &v224, v155);
  Espresso::sequential_builder::add<Espresso::slice_params_t>(&v161, (uint64_t *)&v198, (uint64_t)&v231, (uint64_t)&v229, (uint64_t)&v183, (uint64_t)v158, (uint64_t)v159, (uint64_t *)&v155);
  v53 = v162;
  if (v162)
  {
    v54 = (unint64_t *)&v162->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v218 = &v155;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
  if (v223 < 0)
    operator delete(v222[0]);
  v222[0] = &v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v222);
  for (k = 0; k != -48; k -= 24)
  {
    if (*((char *)&v227 + k + 7) < 0)
      operator delete(*(void **)((char *)&v225 + k + 8));
  }
  if (v230 < 0)
    operator delete((void *)v229);
  if (SHIBYTE(v232) < 0)
    operator delete((void *)v231);
  v224 = 0u;
  v225 = 0u;
  LODWORD(v226) = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&v198, (__int128 **)a2, 0, (uint64_t)&v224);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v206);
  v57 = v205;
  if (v205)
  {
    v58 = (unint64_t *)&v205->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v204;
  if (v204)
  {
    v61 = (unint64_t *)&v204->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v203;
  if (v203)
  {
    v64 = (unint64_t *)&v203->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v202 < 0)
    operator delete(v201);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v199, v200);
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
  if (*((_QWORD *)&v198 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v154[0] = *((_QWORD *)a2 + 2);
  v154[1] = (uint64_t)v69;
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v153[0] = 0;
  v153[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v198, v154, 0, v153);
  if (v69)
  {
    v72 = (unint64_t *)&v69->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  *(_QWORD *)&v225 = 897988541;
  BYTE8(v225) = 0;
  *(_QWORD *)((char *)&v227 + 4) = 0;
  *(_QWORD *)&v224 = 2;
  *((_QWORD *)&v224 + 1) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(&v183, "i_inc");
  std::string::basic_string[abi:ne180100]<0>(&v231, "i");
  v148 = 0;
  v149 = 0;
  v150 = 0;
  *(_QWORD *)&v229 = &v148;
  BYTE8(v229) = 0;
  v148 = (std::string *)operator new(0x18uLL);
  v149 = v148;
  v150 = v148 + 1;
  v149 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, &v231, &v233, v148);
  std::string::basic_string[abi:ne180100]<0>(&v229, "i");
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v222[0] = &v145;
  LOBYTE(v222[1]) = 0;
  v145 = (std::string *)operator new(0x18uLL);
  v146 = v145;
  v147 = v145 + 1;
  v146 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v147, &v229, &v231, v145);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v151, (uint64_t *)&v198, (uint64_t)&__p, (uint64_t)&v183, (uint64_t)&v224, (uint64_t)v148, (uint64_t)v149, (uint64_t *)&v145);
  v74 = v152;
  if (v152)
  {
    v75 = (unint64_t *)&v152->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v222[0] = &v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v222);
  if (v230 < 0)
    operator delete((void *)v229);
  *(_QWORD *)&v229 = &v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
  if (SHIBYTE(v232) < 0)
    operator delete((void *)v231);
  if (SHIBYTE(v184) < 0)
    operator delete((void *)v183);
  if (SBYTE7(v188) < 0)
    operator delete((void *)__p);
  LODWORD(v229) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "cf_jump");
  std::string::basic_string[abi:ne180100]<0>(&v183, "loop_if_jump");
  memset(v142, 0, sizeof(v142));
  memset(v141, 0, sizeof(v141));
  Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v143, (uint64_t *)&v198, (uint64_t)&__p, (uint64_t)&v183, (uint64_t)&v229, 0, 0, v141);
  v77 = v144;
  if (v144)
  {
    v78 = (unint64_t *)&v144->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  *(_QWORD *)&v231 = v141;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
  *(_QWORD *)&v231 = v142;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
  if (SHIBYTE(v184) < 0)
    operator delete((void *)v183);
  if (SBYTE7(v188) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "cf_end");
  std::string::basic_string[abi:ne180100]<0>(&v183, "loop_if_end");
  memset(v138, 0, sizeof(v138));
  memset(v137, 0, sizeof(v137));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v139, (uint64_t *)&v198, (uint64_t)&__p, (uint64_t)&v183, (uint64_t)v222, 0, 0, v137);
  v80 = v140;
  if (v140)
  {
    v81 = (unint64_t *)&v140->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  *(_QWORD *)&v231 = v137;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
  *(_QWORD *)&v231 = v138;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
  if (SHIBYTE(v184) < 0)
    operator delete((void *)v183);
  if (SBYTE7(v188) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "cf_end");
  std::string::basic_string[abi:ne180100]<0>(&v183, "loop_if_end");
  memset(v134, 0, sizeof(v134));
  memset(v133, 0, sizeof(v133));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v135, (uint64_t *)&v198, (uint64_t)&__p, (uint64_t)&v183, (uint64_t)v222, 0, 0, v133);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  *(_QWORD *)&v231 = v133;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
  *(_QWORD *)&v231 = v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
  if (SHIBYTE(v184) < 0)
    operator delete((void *)v183);
  if (SBYTE7(v188) < 0)
    operator delete((void *)__p);
  v86 = (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4;
  __p = 0u;
  v188 = 0u;
  v189 = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&v198, (__int128 **)a2, v86, (uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v206);
  v87 = v205;
  if (v205)
  {
    v88 = (unint64_t *)&v205->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v204;
  if (v204)
  {
    v91 = (unint64_t *)&v204->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v203;
  if (v203)
  {
    v94 = (unint64_t *)&v203->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v202 < 0)
    operator delete(v201);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v199, v200);
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
  if (*((_QWORD *)&v198 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v132[0] = *((_QWORD *)a2 + 2);
  v132[1] = (uint64_t)v99;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v131[0] = 0;
  v131[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v198, v132, 0, v131);
  if (v99)
  {
    v102 = (unint64_t *)&v99->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v104 = (std::__shared_weak_count *)v217;
  v130[0] = v216;
  v130[1] = v217;
  if (v217)
  {
    v105 = (unint64_t *)(v217 + 8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  std::string::basic_string[abi:ne180100]<0>(&v224, "inner_product");
  memset(v129, 0, sizeof(v129));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v129, v213, v214, 0xAAAAAAAAAAAAAAABLL * ((v214 - v213) >> 3));
  memset(v128, 0, sizeof(v128));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v128, v210, v211, 0xAAAAAAAAAAAAAAABLL * ((v211 - v210) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)&v198, v130, (uint64_t)&v224, (uint64_t)&v209, v129, v128);
  *(_QWORD *)&__p = v128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p = v129;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SBYTE7(v225) < 0)
    operator delete((void *)v224);
  if (v104)
  {
    v107 = (unint64_t *)&v104->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v224 = 0u;
  v225 = 0u;
  LODWORD(v226) = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&v198, (__int128 **)a2, 0, (uint64_t)&v224);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v127, (__int128 **)&v207);
  reshape_network_with_additional_inputs((uint64_t)a2, v127);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v127, (char *)v127[1]);
  std::string::basic_string[abi:ne180100]<0>(&v224, "");
  v221 = 0;
  Espresso::net::pprint((uint64_t)a2, (uint64_t)&v224, (uint64_t)v220);
  v109 = v221;
  if (v221 == v220)
  {
    v110 = 4;
    v109 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_241;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_241:
  if (SBYTE7(v225) < 0)
    operator delete((void *)v224);
  v126[0] = 0;
  v126[1] = 0;
  Espresso::net::setup_script((uint64_t)a2, v126, 0);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v206);
  v111 = v205;
  if (v205)
  {
    v112 = (unint64_t *)&v205->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v204;
  if (v204)
  {
    v115 = (unint64_t *)&v204->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v203;
  if (v203)
  {
    v118 = (unint64_t *)&v203->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v202 < 0)
    operator delete(v201);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v199, v200);
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
  if (*((_QWORD *)&v198 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v207, v208[0]);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  *(_QWORD *)&v198 = &v210;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
  *(_QWORD *)&v198 = &v213;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
  v123 = (std::__shared_weak_count *)v217;
  if (v217)
  {
    v124 = (unint64_t *)(v217 + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
}

void sub_191338BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x370]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x438], (char *)STACK[0x440]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  STACK[0x370] = (unint64_t)&STACK[0x468];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x370]);
  STACK[0x370] = (unint64_t)&STACK[0x480];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x370]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x498]);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::load_random_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1913393A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::general_concat_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19133961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::copy_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191339890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void recompile(Espresso::net *a1)
{
  __int128 *v2;
  __int128 *v3;
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  __int128 *v13[3];
  char *v14[3];
  char **i;
  char *v16[2];
  uint64_t v17[2];

  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)a1);
  v17[0] = 0;
  v17[1] = 0;
  Espresso::net::setup_script((uint64_t)a1, v17, 0);
  v2 = (__int128 *)*((_QWORD *)a1 + 80);
  v3 = (__int128 *)*((_QWORD *)a1 + 81);
  v16[0] = 0;
  v16[1] = 0;
  for (i = v16; v2 != v3; v2 = (__int128 *)((char *)v2 + 24))
  {
    v13[0] = v2;
    v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 23, v2, v13);
    v13[0] = v2;
    v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&i, v2, v13);
    v6 = *(_OWORD *)(v4 + 56);
    v7 = *(_OWORD *)(v4 + 72);
    *((_QWORD *)v5 + 11) = *((_QWORD *)v4 + 11);
    *(_OWORD *)(v5 + 72) = v7;
    *(_OWORD *)(v5 + 56) = v6;
    if (v5 != v4)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5 + 96, *((char **)v4 + 12), *((_QWORD *)v4 + 13), (uint64_t)(*((_QWORD *)v4 + 13) - *((_QWORD *)v4 + 12)) >> 2);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)a1 + 184, *((char **)a1 + 24));
  *((_QWORD *)a1 + 23) = (char *)a1 + 192;
  *((_QWORD *)a1 + 25) = 0;
  *((_QWORD *)a1 + 24) = 0;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v11, *(_QWORD *)a1, *((std::__shared_weak_count **)a1 + 1));
  Espresso::compute_network_shape_starting_from_data_shapes(&v11, (uint64_t)&i, (uint64_t)v13);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_BYTE *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)v13, 0, 0);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v14, v14[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v13, (char *)v13[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&i, v16[0]);
}

void sub_191339A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
  Espresso::network_shape::~network_shape(&a12);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint8_t buf[4];
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBBB00;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D83E10;
  v3 = (_QWORD *)((char *)v2 + 24);
  v13 = (_QWORD *)((char *)v2 + 24);
  v14 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v16 = (unint64_t)"N8Espresso18pass_reset_pre_ssaE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v12 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v12);
  if (v12)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v16 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso22analysis_reset_pre_ssaE");
  }
  v6 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_191339CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_reset_pre_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_reset_pre_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBB00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_reset_pre_ssa>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::sequential_builder::add<Espresso::cf_loop_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191339F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_if_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19133A18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x78uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v6[5] = 0u;
    v6[6] = 0u;
    *((_QWORD *)v6 + 14) = 0;
    *(_OWORD *)((char *)v6 + 56) = xmmword_191A8AA80;
    *((_QWORD *)v6 + 9) = 0xFFFFFFFF00000001;
    v12 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void Espresso::sequential_builder::add<Espresso::slice_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19133A4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19133A744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_end_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19133A9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void reshape_network_with_additional_inputs(uint64_t a1, uint64_t **a2)
{
  __int128 *v4;
  __int128 *i;
  char *v6;
  __int128 v7;
  const void *v8;
  char *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  __int128 *v22;

  v4 = *(__int128 **)(a1 + 640);
  for (i = *(__int128 **)(a1 + 648); v4 != i; v4 = (__int128 *)((char *)v4 + 24))
  {
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a1 + 192), v4)&& !std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[1], v4))
    {
      v22 = v4;
      v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), v4, &v22);
      v7 = *(_OWORD *)(v6 + 72);
      v16 = *(_OWORD *)(v6 + 56);
      v17 = v7;
      v8 = (const void *)*((_QWORD *)v6 + 12);
      v18 = (char *)*((_QWORD *)v6 + 11);
      __p = 0;
      v20 = 0;
      v21 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v8, *((_QWORD *)v6 + 13), (uint64_t)(*((_QWORD *)v6 + 13) - (_QWORD)v8) >> 2);
      v22 = v4;
      v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v4, &v22);
      v10 = v17;
      *(_OWORD *)(v9 + 56) = v16;
      *(_OWORD *)(v9 + 72) = v10;
      *((_QWORD *)v9 + 11) = v18;
      if (v9 + 56 != (char *)&v16)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9 + 96, (char *)__p, (uint64_t)v20, (v20 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 184, *(char **)(a1 + 192));
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v14, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  Espresso::compute_network_shape_starting_from_data_shapes(&v14, (uint64_t)a2, (uint64_t)&v16);
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_BYTE *)(a1 + 180) = 0;
  Espresso::shape_network_recursive((Espresso *)a1, (Espresso::net *)&v16, 0, 0);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v17 + 8, v18);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v16, *((char **)&v16 + 1));
}

void sub_19133AC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  Espresso::network_shape::~network_shape(&a11);
  _Unwind_Resume(a1);
}

void sub_19133B484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,char a52)
{
  uint64_t v52;

  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v52 - 216));
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::vector<unsigned long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16))
                goto LABEL_44;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = (char *)operator new(0x40uLL);
      v16 = v15;
      v28[0] = v15;
      v28[1] = a1 + 16;
      v29 = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v8;
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v15 + 16), *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        *((_QWORD *)v15 + 4) = *((_QWORD *)v5 + 4);
        *((_OWORD *)v15 + 1) = v17;
      }
      v16[5] = 0;
      v16[6] = 0;
      v16[7] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v16 + 5, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 3);
      v29 = 1;
      v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v20 = 1;
        v21 = v20 | (2 * v9);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v23);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v25)
      {
        *v16 = *v25;
      }
      else
      {
        *v16 = *v6;
        *v6 = v16;
        *(_QWORD *)(v24 + 8 * v2) = v6;
        if (!*v16)
          goto LABEL_43;
        v26 = *(_QWORD *)(*v16 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9)
            v26 %= v9;
        }
        else
        {
          v26 &= v9 - 1;
        }
        v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
      }
      *v25 = v16;
LABEL_43:
      v28[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
LABEL_44:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_19133B878(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c166_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorImNS4_ImEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S9_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,std::vector<unsigned long>>::unordered_map(a1 + 40, a2 + 40);
}

uint64_t __destroy_helper_block_ea8_40c166_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorImNS4_ImEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S9_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(a1 + 40);
}

void ___ZL12util_compareNSt3__110shared_ptrIN8Espresso3netEEES3__block_invoke(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void ___ZL12util_compareNSt3__110shared_ptrIN8Espresso3netEEES3__block_invoke_124(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void Espresso::net_bench::~net_bench(id *this)
{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

__n128 __Block_byref_object_copy__131(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__132(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

uint64_t __copy_helper_block_ea8_40c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN8Espresso9net_bench17fill_random_inputEff_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[2];
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = *(_QWORD *)(a1 + 32);
  srand(*(_DWORD *)(a1 + 72) + 1993);
  v6 = 0;
  v7 = *(float *)(a1 + 76);
  v8 = *(float **)(*a2 + 24);
  v9 = *(int *)(*a2 + 8);
  do
  {
    v9 *= *(int *)(*a2 + 12 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  for (; v9; --v9)
  {
    v5 = rand();
    *v8++ = (float)((float)((float)(int)v5 * 4.6566e-10) * v7) + 0.0;
  }
  v21 = 0;
  v22 = 0;
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v20 = *(std::string *)(a1 + 40);
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v19[0] = v10;
  v19[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  Espresso::prepare_blob_for_network(v5, (uint64_t *)(v4 + 16), (std::string::size_type)&v20, (uint64_t)v19, 0);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_19133BB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void Espresso::sync_copy_from_host(_QWORD *a1, void *a2)
{
  void (**v3)(id, _QWORD *);
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  void (***v12)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __n128 (*v28)(__n128 *, __n128 *);
  uint64_t (*v29)(uint64_t);
  const char *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v3 = a2;
  v25 = 0;
  v26 = &v25;
  v27 = 0x4012000000;
  v28 = __Block_byref_object_copy__131;
  v29 = __Block_byref_object_dispose__132;
  v30 = "";
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 56))(&v31);
  v4 = (std::__shared_weak_count *)v26[7];
  v23 = v26[6];
  v24 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v3[2](v3, &v23);
  v7 = v24;
  if (v24)
  {
    v8 = (unint64_t *)&v24->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v11 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v12 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a1 + 72);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3321888768;
  v21[2] = ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEEU13block_pointerFvNS1_INS_4blobIfLi4EEEEEE_block_invoke;
  v21[3] = &unk_1E2DC3FF0;
  v21[5] = v11;
  v22 = v10;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v21[4] = &v25;
  Espresso::abstract_context::compute_batch_sync(v12, v21);
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Block_object_dispose(&v25, 8);
  v18 = v32;
  if (v32)
  {
    v19 = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

}

void sub_19133BD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  _Block_object_dispose(va, 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12);

  _Unwind_Resume(a1);
}

void ___ZN8Espresso9net_bench17fill_random_inputEff_block_invoke_129(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::string v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = *(uint64_t **)(a1 + 32);
  srand(*(_DWORD *)(a1 + 72) + 1993);
  v6 = 0;
  v7 = *(float *)(a1 + 76);
  v8 = *(float *)(a1 + 80);
  v9 = *(float **)(*a2 + 24);
  v10 = *(int *)(*a2 + 8);
  do
  {
    v10 *= *(int *)(*a2 + 12 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  for (; v10; --v10)
  {
    v5 = rand();
    *v9++ = v8 + (float)((float)((float)(int)v5 * 4.6566e-10) * v7);
  }
  v22 = 0;
  v23 = 0;
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v21 = *(std::string *)(a1 + 40);
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v20[0] = v11;
  v20[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  Espresso::prepare_blob_for_network(v5, v4, (std::string::size_type)&v21, (uint64_t)v20, 0);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_19133BF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c79_ZTSNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
}

void __destroy_helper_block_ea8_40c79_ZTSNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEEU13block_pointerFvNS1_INS_4blobIfLi4EEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
}

void Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19133C230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  Espresso *v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEC38;
  *((_QWORD *)v10 + 3) = &off_1E2DA11B0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_19133C37C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19133C598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<float,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA11B0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<float,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA11B0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<float,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<float,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *__Block_byref_object_copy_(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 48, *(char **)(a1 + 56));
}

void ___ZN8Espresso16pass_wavernn_ane13gumbal_to_aneERNS_3netE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const void **v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  const void **v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t **v24;
  char *v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  std::string *p_p;
  const void *v45;
  uint64_t v46;
  unint64_t v47;
  __int128 *v48;
  __int128 v49;
  uint64_t i;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  size_t v71;
  std::string *p_lpsrc;
  const void *v73;
  uint64_t v74;
  unint64_t v75;
  std::string **v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  std::string *v83;
  std::string *v84;
  void **p_data;
  unint64_t v86;
  std::string __p;
  std::string lpsrc;
  uint64_t v89[2];
  uint64_t v90;
  std::string::size_type size;
  std::string v92;
  std::string v93;
  void ***v94;
  char v95;
  _BYTE v96[40];
  __int128 v97;
  __int128 v98;
  std::string v99;
  uint64_t v100;
  std::string v101;
  std::string v102;
  std::string v103;
  __int128 v104;

  *(_QWORD *)&v104 = *MEMORY[0x1E0C80C00];
  v97 = 0u;
  v98 = 0u;
  *(_DWORD *)v96 = a2[3].i32[2];
  memset(&v96[8], 0, 32);
  v4 = a2[2].u64[1];
  if (v4 >= a2[3].i64[0])
  {
    v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v96);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)v96);
    v5 = v4 + 72;
    a2[2].i64[1] = v4 + 72;
  }
  a2[2].i64[1] = v5;
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  v6 = *(std::__shared_weak_count **)&v96[16];
  if (*(_QWORD *)&v96[16])
  {
    v7 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(_QWORD *)(a1 + 40) + 56;
  v10 = a2[3].i32[2];
  *(_QWORD *)v96 = v10;
  v11 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v96)[3];
  if (*((char *)v11 + 23) >= 0)
    v12 = *((unsigned __int8 *)v11 + 23);
  else
    v12 = (size_t)v11[1];
  v13 = &v93;
  std::string::basic_string[abi:ne180100]((uint64_t)&v93, v12 + 6);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v93.__r_.__value_.__r.__words[0];
  if (v12)
  {
    if (*((char *)v11 + 23) >= 0)
      v14 = v11;
    else
      v14 = *v11;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "__rand");
  v15 = *(_QWORD *)(a1 + 40) + 96;
  v16 = a2[3].i32[2];
  *(_QWORD *)v96 = v16;
  v17 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, v16, v96)[3];
  if (*((char *)v17 + 23) >= 0)
    v18 = *((unsigned __int8 *)v17 + 23);
  else
    v18 = (size_t)v17[1];
  v19 = &v92;
  std::string::basic_string[abi:ne180100]((uint64_t)&v92, v18 + 11);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v92.__r_.__value_.__r.__words[0];
  if (v18)
  {
    if (*((char *)v17 + 23) >= 0)
      v20 = v17;
    else
      v20 = *v17;
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "__plus_rand");
  v21 = *(_QWORD *)(a1 + 40);
  v22 = a2[3].i32[2];
  lpsrc.__r_.__value_.__r.__words[0] = v22;
  v101.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21 + 56, v22, &lpsrc)[3];
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21 + 136, (unsigned __int8 *)v101.__r_.__value_.__l.__data_, (__int128 **)&v101);
  Espresso::abstract_blob_container::shape(v96, *((_QWORD *)v23 + 5));
  v24 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
  v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, &v93, (__int128 **)&v101);
  v26 = *(_OWORD *)&v96[16];
  *(_OWORD *)(v25 + 56) = *(_OWORD *)v96;
  *(_OWORD *)(v25 + 72) = v26;
  *((_QWORD *)v25 + 11) = *(_QWORD *)&v96[32];
  v27 = (void *)*((_QWORD *)v25 + 12);
  if (v27)
  {
    *((_QWORD *)v25 + 13) = v27;
    operator delete(v27);
    *((_QWORD *)v25 + 12) = 0;
    *((_QWORD *)v25 + 13) = 0;
    *((_QWORD *)v25 + 14) = 0;
  }
  *((_OWORD *)v25 + 6) = v97;
  *((_QWORD *)v25 + 14) = v98;
  *(_QWORD *)v96 = 0;
  *(_QWORD *)&v96[8] = 1065353216;
  *(_QWORD *)&v96[16] = 897988541;
  v96[24] = 0;
  *(_QWORD *)((char *)&v97 + 4) = 0;
  Espresso::abstract_engine_factory::shared(&__p);
  v28 = __p.__r_.__value_.__r.__words[0];
  v29 = *(_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v101, "elementwise");
  LODWORD(v103.__r_.__value_.__l.__data_) = 0;
  LODWORD(v83) = 0;
  Espresso::abstract_engine_factory::make_kernel_priv(v28, v29 + 16, (uint64_t)&v101, (uint64_t)v96, (int *)&v103);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    v90 = (uint64_t)v30;
    size = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    v90 = 0;
    size = 0;
  }
  v33 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  v36 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)size;
  v89[0] = v90;
  v89[1] = size;
  if (size)
  {
    v40 = (unint64_t *)(size + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
  v42 = a2[1].i64[0];
  if (*(char *)(v42 + 39) >= 0)
    v43 = *(unsigned __int8 *)(v42 + 39);
  else
    v43 = *(_QWORD *)(v42 + 24);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v43 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v43)
  {
    if (*(char *)(v42 + 39) >= 0)
      v45 = (const void *)(v42 + 16);
    else
      v45 = *(const void **)(v42 + 16);
    memmove(p_p, v45, v43);
  }
  strcpy((char *)p_p + v43, "__plus_rand");
  v46 = *(_QWORD *)(a1 + 40) + 56;
  v47 = a2[3].i32[2];
  v86 = v47;
  v48 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v46, v47, &v86)[3];
  if (*((char *)v48 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)v48, *((_QWORD *)v48 + 1));
  }
  else
  {
    v49 = *v48;
    v101.__r_.__value_.__r.__words[2] = *((_QWORD *)v48 + 2);
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v49;
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v102, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v102 = v93;
  memset(&v103, 0, sizeof(v103));
  v83 = &v103;
  LOBYTE(v84) = 0;
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v103.__r_.__value_.__l.__size_ = v103.__r_.__value_.__r.__words[0];
  v103.__r_.__value_.__r.__words[2] = v103.__r_.__value_.__r.__words[0] + 48;
  v103.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v103.__r_.__value_.__r.__words[2], (__int128 *)&v101, (__int128 *)&v103, (std::string *)v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v99, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v99 = v92;
  v83 = 0;
  v84 = 0;
  p_data = 0;
  v94 = (void ***)&v83;
  v95 = 0;
  v83 = (std::string *)operator new(0x18uLL);
  v84 = v83;
  p_data = (void **)&v83[1].__r_.__value_.__l.__data_;
  v84 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v99, (__int128 *)&v100, v83);
  Espresso::single_match_state<Espresso::generic_gumbel_max_kernel>::add_kernel(a2, v89, &lpsrc, &__p, (std::string **)&v103, &v83);
  v94 = (void ***)&v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  v83 = &v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v102.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v101 + i * 8 + 24));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
    operator delete(lpsrc.__r_.__value_.__l.__data_);
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v53 = (std::__shared_weak_count *)size;
  if (size)
  {
    v54 = (unint64_t *)(size + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *(_OWORD *)&v96[16] = 0uLL;
  *(_QWORD *)&v96[32] = 0xFFFFFFFF00000000;
  LOBYTE(v97) = 0;
  *(_QWORD *)&v96[8] = 0x100000001;
  *(_QWORD *)v96 = 0x358637BD0000000BLL;
  Espresso::abstract_engine_factory::shared(&__p);
  v56 = __p.__r_.__value_.__r.__words[0];
  v57 = *(_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v101, "reduce");
  LODWORD(v103.__r_.__value_.__l.__data_) = 0;
  LODWORD(v83) = 0;
  Espresso::abstract_engine_factory::make_kernel_priv(v56, v57 + 16, (uint64_t)&v101, (uint64_t)v96, (int *)&v103);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    v99.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v59 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
  }
  else
  {
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = 0uLL;
  }
  v61 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v62 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  v64 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v65 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)v99.__r_.__value_.__l.__size_;
  v82 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
  if (v99.__r_.__value_.__l.__size_)
  {
    v68 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  std::string::basic_string[abi:ne180100]<0>(&v101, "reduce");
  v70 = a2[1].i64[0];
  if (*(char *)(v70 + 39) >= 0)
    v71 = *(unsigned __int8 *)(v70 + 39);
  else
    v71 = *(_QWORD *)(v70 + 24);
  p_lpsrc = &lpsrc;
  std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v71 + 8);
  if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
  if (v71)
  {
    if (*(char *)(v70 + 39) >= 0)
      v73 = (const void *)(v70 + 16);
    else
      v73 = *(const void **)(v70 + 16);
    memmove(p_lpsrc, v73, v71);
  }
  strcpy((char *)p_lpsrc + v71, "__argmax");
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v103, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v103 = v92;
  memset(&__p, 0, sizeof(__p));
  v83 = &__p;
  LOBYTE(v84) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (__int128 *)&v103, &v104, (std::string *)__p.__r_.__value_.__l.__data_);
  v74 = *(_QWORD *)(a1 + 40) + 96;
  v75 = a2[3].i32[2];
  v83 = (std::string *)v75;
  v76 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v74, v75, &v83);
  Espresso::single_match_state<Espresso::generic_gumbel_max_kernel>::add_kernel(a2, (uint64_t *)&v82, &v101, &lpsrc, (std::string **)&__p, v76 + 3);
  v83 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
    operator delete(lpsrc.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (v67)
  {
    v77 = (unint64_t *)&v67->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v79 = (std::__shared_weak_count *)v99.__r_.__value_.__l.__size_;
  if (v99.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
}

void sub_19133D1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  uint64_t v52;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v52 - 192);
  if (a37 < 0)
    operator delete(a32);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(a1);
}

uint64_t Espresso::single_match_state<Espresso::generic_gumbel_max_kernel>::~single_match_state(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v6;

  v6 = (void **)(a1 + 32);
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void Espresso::single_match_state<Espresso::generic_gumbel_max_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19133D6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_wavernn_ane>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_wavernn_ane>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_wavernn_ane>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::single_match_replace<Espresso::generic_load_constant_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_19133DB34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_24:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      do
      {
        v19 = *v6;
        v20 = v6[1];
        v6 += 2;
        result = (uint64_t)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, v19, v20);
        v8 += 2;
      }
      while (v6 != v18);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v21 = v18[1];
        *v13 = *v18;
        v13[1] = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_24;
  }
  if (a2 != a3)
  {
    do
    {
      v24 = *v6;
      v25 = v6[1];
      v6 += 2;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, v24, v25);
      v8 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v8)
    result = std::shared_ptr<void>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v8;
  return result;
}

char *std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  Espresso *v11;
  void *v12;

  v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E2DBEC70;
  v10[3] = &off_1E2DA11D0;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_19133DE50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<float,3>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA11D0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return a1;
}

void Espresso::blob<float,3>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA11D0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<float,3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<float,3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(char *a1, _QWORD *a2)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>(a1, *a2);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;

  v4 = MEMORY[0x1E0DE4FD8];
  v5 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v6 = (uint64_t)(a1 + 2);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v7;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v7 - 24)) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *a1 = v4 + 24;
  a1[15] = v5;
  std::stringbuf::basic_stringbuf[abi:ne180100](v6, a2, 8);
  return a1;
}

void sub_19133E060(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x19401CCD0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19401CCD0](a1 + 120);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_19133E178(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

std::string *Espresso::string_join(std::string *this, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  std::string *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2[1] - *a2;
  if (v3)
  {
    v6 = this;
    v7 = 0;
    v8 = 0;
    v9 = v3 / 24;
    v10 = v9 - 1;
    if (v9 <= 1)
      v11 = 1;
    else
      v11 = v9;
    do
    {
      v12 = *a2 + v7;
      v13 = *(char *)(v12 + 23);
      if (v13 >= 0)
        v14 = (const std::string::value_type *)(*a2 + v7);
      else
        v14 = *(const std::string::value_type **)v12;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(v12 + 23);
      else
        v15 = *(_QWORD *)(v12 + 8);
      this = std::string::append(v6, v14, v15);
      if (v10 > v8)
      {
        v16 = *(char *)(a3 + 23);
        if (v16 >= 0)
          v17 = (const std::string::value_type *)a3;
        else
          v17 = *(const std::string::value_type **)a3;
        if (v16 >= 0)
          v18 = *(unsigned __int8 *)(a3 + 23);
        else
          v18 = *(_QWORD *)(a3 + 8);
        this = std::string::append(v6, v17, v18);
      }
      ++v8;
      v7 += 24;
    }
    while (v11 != v8);
  }
  return this;
}

void sub_19133E274(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,signed char const&>(char a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("Invalid decompression algorithm %c", a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>(char *a1, _QWORD *a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(a1, *a2);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>(char *a1, uint64_t a2, uint64_t a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(a1, a2, a3);
}

void sub_19133E538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19133E784(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void sub_19133E9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19133ECA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{

  _Unwind_Resume(a1);
}

void sub_19133F23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_19133F764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{

  _Unwind_Resume(a1);
}

void sub_191343490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  __cxa_end_catch();
  STACK[0x850] = (unint64_t)&STACK[0xA40];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x850]);

  if (SLOBYTE(STACK[0x4DF]) < 0)
    operator delete((void *)STACK[0x4C8]);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x510]);
  Espresso::network_shape::~network_shape((char **)&STACK[0x5F8]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x628], (char *)STACK[0x630]);
  STACK[0x850] = (unint64_t)&STACK[0x698];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x850]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table((uint64_t)&STACK[0x6B0]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&STACK[0x6E0]);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&STACK[0x728]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x818]);
  _Unwind_Resume(a1);
}

void sub_1913434CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1913434D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  JUMPOUT(0x191343830);
}

void sub_1913434E8()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x850]);
  JUMPOUT(0x191343730);
}

void sub_1913434F8()
{
  JUMPOUT(0x191343730);
}

void sub_191343500()
{
  JUMPOUT(0x191343740);
}

void sub_191343508()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4E0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4F0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x500]);
  JUMPOUT(0x191343748);
}

void sub_191343540()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5E8]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x628], (char *)STACK[0x630]);
  JUMPOUT(0x191343800);
}

void sub_19134355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x640]);
  STACK[0x850] = (unint64_t)&STACK[0x698];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x850]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table((uint64_t)&STACK[0x6B0]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&STACK[0x6E0]);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&STACK[0x728]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x818]);
  _Unwind_Resume(a1);
}

void sub_191343570()
{
  JUMPOUT(0x191343820);
}

void sub_191343578()
{
  JUMPOUT(0x191343694);
}

void sub_191343588()
{
  void *v0;
  void *v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x7E8]);
  if (SLOBYTE(STACK[0x867]) < 0)
    operator delete((void *)STACK[0x850]);

  JUMPOUT(0x191343828);
}

void sub_191343630()
{
  void *v0;

  JUMPOUT(0x191343828);
}

void sub_19134363C()
{
  void *v0;
  void *v1;

  JUMPOUT(0x191343830);
}

void sub_191343658()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x510]);
  JUMPOUT(0x1913437F8);
}

void sub_19134367C()
{
  void *v0;

  JUMPOUT(0x191343684);
}

void sub_1913436A0()
{
  void *v0;
  void *v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x808]);
  if (SLOBYTE(STACK[0x867]) < 0)
    operator delete((void *)STACK[0x850]);

  JUMPOUT(0x191343830);
}

void sub_1913436C8()
{
  JUMPOUT(0x191343704);
}

void sub_1913436DC()
{
  JUMPOUT(0x191343830);
}

void sub_1913436E4()
{
  void *v0;
  void *v1;

  JUMPOUT(0x191343838);
}

void sub_19134370C()
{
  void *v0;

  STACK[0x850] = (unint64_t)&STACK[0xA40];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x850]);

  if (SLOBYTE(STACK[0x4DF]) < 0)
    operator delete((void *)STACK[0x4C8]);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x510]);
  Espresso::network_shape::~network_shape((Espresso::network_shape *)&STACK[0x5F8]);
  JUMPOUT(0x19134376CLL);
}

void sub_191343714()
{
  void *v0;

  JUMPOUT(0x19134371CLL);
}

void sub_19134377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23)
{
  STACK[0x850] = (unint64_t)&STACK[0x698];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x850]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table(&STACK[0x6B0]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(&STACK[0x6E0]);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&STACK[0x728]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&STACK[0x818]);
  _Unwind_Resume(a1);
}

void sub_191343788()
{
  JUMPOUT(0x191343838);
}

void sub_191343798()
{
  JUMPOUT(0x191343828);
}

void sub_1913437A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void **v21;
  uint64_t v22;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, v21);
  if (SLOBYTE(STACK[0xA57]) < 0)
    operator delete((void *)STACK[0xA40]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&v22);
  JUMPOUT(0x191343800);
}

void sub_1913440F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,char a40)
{
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 144);
  if (a31 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a40);

  _Unwind_Resume(a1);
}

void sub_19134438C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_191344A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a59);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_1913457F0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)&v6);

  _Block_object_dispose(&v7, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)&v8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 224);

  _Unwind_Resume(a1);
}

void sub_191345A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a21);
  JUMPOUT(0x191345A88);
}

void sub_191345B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1913463F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,char a59,uint64_t a60,char a61)
{
  void *v61;
  uint64_t v62;

  if (*(char *)(v62 - 233) < 0)
    operator delete(*(void **)(v62 - 256));
  if (*(char *)(v62 - 209) < 0)
    operator delete(*(void **)(v62 - 232));
  if (*(char *)(v62 - 185) < 0)
    operator delete(*(void **)(v62 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v62 - 184);

  _Unwind_Resume(a1);
}

void sub_191346A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38)
{
  void *v38;
  void *v39;
  uint64_t v40;
  void *v43;
  void *v44;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  a30 = (void *)(v40 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (a2 == 1)
  {
    v43 = __cxa_begin_catch(a1);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("Failed to save the training network %@"));

    __cxa_end_catch();
    JUMPOUT(0x1913469C0);
  }

  _Unwind_Resume(a1);
}

void sub_191348624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a44 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 208);
  _Unwind_Resume(a1);
}

void sub_191348F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;
  uint64_t v58;

  if (a46 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  if (a57 < 0)
    operator delete(a52);
  if (*(char *)(v58 - 201) < 0)
    operator delete(*(void **)(v58 - 224));
  if (*(char *)(v58 - 161) < 0)
    operator delete(*(void **)(v58 - 184));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 144);

  _Unwind_Resume(a1);
}

void sub_19134921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191349698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_19134A05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  void *v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);

  _Unwind_Resume(a1);
}

void sub_19134A860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_19134AC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  void *v19;
  void *v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);

  _Unwind_Resume(a1);
}

void sub_19134B04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a6);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property_(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property_(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void Espresso::sync_copy_from_host(uint64_t a1, std::__shared_weak_count *a2, uint64_t *a3)
{
  void (***v4)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[5];
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(void (****)(uint64_t *__return_ptr, _QWORD))(a1 + 72);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke;
  v16[3] = &__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
  v16[4] = a1;
  v17 = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::abstract_context::compute_batch_sync(v4, v16);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19134B3EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32), a2, a1 + 48);
}

_QWORD *__copy_helper_block_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(_QWORD *a1, int a2)
{
  char *v4;
  Espresso *v5;
  void *v6;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBEC00;
  *((_QWORD *)v4 + 3) = &off_1E2DA1190;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  v5 = (Espresso *)(4 * a2);
  *((_DWORD *)v4 + 8) = a2;
  v6 = Espresso::kern_alloc_uninitialized(v5);
  bzero(v6, (size_t)v5);
  *((_QWORD *)v4 + 5) = v6;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_19134B524(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(_QWORD *a1, int a2, int a3)
{
  char *v6;
  Espresso *v7;
  void *v8;

  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)v6 = &off_1E2DBEC38;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DA11B0;
  *(_OWORD *)(v6 + 56) = 0u;
  *((_QWORD *)v6 + 2) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 8) = a2;
  *((_DWORD *)v6 + 9) = a3;
  v7 = (Espresso *)(4 * a2 * (uint64_t)a3);
  v8 = Espresso::kern_alloc_uninitialized(v7);
  bzero(v8, (size_t)v7);
  *((_QWORD *)v6 + 5) = v8;
  v6[48] = 1;
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_19134B5EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,unsigned long,void>(_QWORD *a1, int a2)
{
  char *v4;
  Espresso *v5;
  void *v6;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBEC00;
  *((_QWORD *)v4 + 3) = &off_1E2DA1190;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  v5 = (Espresso *)(4 * a2);
  *((_DWORD *)v4 + 8) = a2;
  v6 = Espresso::kern_alloc_uninitialized(v5);
  bzero(v6, (size_t)v5);
  *((_QWORD *)v4 + 5) = v6;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_19134B6AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::net::apply_to_all_globals(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::string __p;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v24 = 0;
  v4 = (std::__shared_weak_count *)a1[137];
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v24 = v5;
    if (v5)
    {
      v6 = a1[136];
      v23 = v6;
      if (v6)
      {
        v7 = a2[3];
        if (v7)
        {
          if ((_QWORD *)v7 == a2)
          {
            v26 = v25;
            (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v25);
LABEL_29:
            Espresso::net::apply_to_all_globals(v6, v25);
            v16 = v26;
            if (v26 == v25)
            {
              v17 = 4;
              v16 = v25;
            }
            else
            {
              if (!v26)
                goto LABEL_34;
              v17 = 5;
            }
            (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_34:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        }
        v26 = (_BYTE *)v7;
        goto LABEL_29;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v8 = (uint64_t *)a1[182];
  if (v8)
  {
    do
    {
      if (*((char *)v8 + 39) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v8[2], v8[3]);
      else
        __p = *(std::string *)(v8 + 2);
      v9 = (std::__shared_weak_count *)v8[6];
      v21 = v8[5];
      v22 = v9;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = a2[3];
      if (!v12)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 48))(v12, &__p);
      v13 = v22;
      if (v22)
      {
        v14 = (unint64_t *)&v22->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = (uint64_t *)*v8;
    }
    while (v8);
    v5 = v24;
  }
  if (v5)
    goto LABEL_34;
}

void sub_19134B8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v16 = *a3;
  v17 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)i + 5) = 0;
  *((_QWORD *)i + 6) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v15;
  *v15 = i;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_19134BB88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair(uint64_t a1)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t __Block_byref_object_copy__739(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__740(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 48);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x38uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::string *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_QWORD *)v13 + 5) = 0;
  *((_QWORD *)v13 + 6) = 0;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_19134C020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_19134C4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16))
                goto LABEL_41;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = (char *)operator new(0x38uLL);
      v26[0] = v15;
      v26[1] = a1 + 16;
      v27 = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v8;
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v15 + 16), (__int128 *)v5 + 1);
      v27 = 1;
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v17 = *(float *)(a1 + 32);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v18 = 1;
        v19 = v18 | (2 * v9);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v21);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v23)
      {
        *(_QWORD *)v15 = *v23;
      }
      else
      {
        *(_QWORD *)v15 = *v6;
        *v6 = v15;
        *(_QWORD *)(v22 + 8 * v2) = v6;
        if (!*(_QWORD *)v15)
          goto LABEL_40;
        v24 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v24 >= v9)
            v24 %= v9;
        }
        else
        {
          v24 &= v9 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v15;
LABEL_40:
      v26[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
LABEL_41:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_19134C794(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

uint64_t __copy_helper_block_ea8_48c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(a1 + 48, a2 + 48);
}

uint64_t __destroy_helper_block_ea8_48c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 48);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::espresso_training_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDFF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::espresso_training_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDFF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::espresso_training_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_19134CCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

BOOL find_or_create_error<std::string,std::shared_ptr<Espresso::abstract_blob_container>>(_QWORD *a1, unsigned __int8 *a2, _QWORD *a3, void *a4)
{
  id v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a1, a2);
  v9 = v8;
  if (a3 && !v8)
  {
    v10 = (void *)MEMORY[0x1E0CB35C8];
    v13 = *MEMORY[0x1E0CB2D50];
    v14[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("EspressoError"), 1, v11);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v9 != 0;
}

void sub_19134CE50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *update_layer_index(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;

  v2 = *(_QWORD *)(*result + 32);
  if (*(_QWORD *)(*result + 40) != v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (__int128 *)(*(_QWORD *)(v2 + v5) + 16);
      result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v7, (uint64_t)&std::piecewise_construct, &v7);
      result[5] = v6++;
      v2 = *(_QWORD *)(*v4 + 32);
      v5 += 16;
    }
    while (v6 < (*(_QWORD *)(*v4 + 40) - v2) >> 4);
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v13[40] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v13 = *v25;
LABEL_41:
    *v25 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_19134D16C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  char *v9;
  std::string *v10;
  _QWORD v11[2];
  char v12;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = (_QWORD *)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        if ((uint64_t *)v6 != v2)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6 + 40, (std::string *)v2[5], (std::string *)v2[6], 0xAAAAAAAAAAAAAAABLL * ((v2[6] - v2[5]) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6 + 64, (std::string *)v2[8], (std::string *)v2[9], 0xAAAAAAAAAAAAAAABLL * ((v2[9] - v2[8]) >> 3));
        }
        v8 = *(_QWORD **)v6;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (!v8)
          break;
        v6 = (uint64_t)v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v9 = (char *)operator new(0x58uLL);
    v11[0] = v9;
    v11[1] = a1 + 2;
    v12 = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v10 = std::pair<std::string const,Espresso::layer_training_transform_info>::pair[abi:ne180100]((std::string *)(v9 + 16), (__int128 *)v2 + 1);
    v12 = 1;
    *((_QWORD *)v9 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v10);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v9);
    v11[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
}

void sub_19134D2D8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_19134D304()
{
  __cxa_end_catch();
  JUMPOUT(0x19134D30CLL);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_19134D3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::softmax_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19134D5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::reduce_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19134D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t Espresso::sgd_optimizer_builder::sgd_optimizer_builder(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, std::string *a6, float a7, float a8)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16[2];

  v16[0] = a2;
  v16[1] = (uint64_t)a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::optimizer_builder::optimizer_builder(a1, v16, a4, a5, a6, a7);
  if (a3)
  {
    v13 = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = off_1E2D8C368;
  *(float *)(a1 + 280) = a8;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 312) = a8 > 0.00000001;
  return a1;
}

void sub_19134D9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::adam_optimizer_builder::adam_optimizer_builder(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, std::string *a6, float a7, float a8, float a9, float a10)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20[2];

  v20[0] = a2;
  v20[1] = (uint64_t)a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  Espresso::optimizer_builder::optimizer_builder(a1, v20, a4, a5, a6, a7);
  if (a3)
  {
    v17 = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = off_1E2D8C9D0;
  *(float *)(a1 + 280) = a8;
  *(float *)(a1 + 284) = a9;
  *(float *)(a1 + 288) = a10;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 320), "beta1_accum");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 344), "beta2_accum");
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  return a1;
}

void sub_19134DAC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 343) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 319) < 0)
    operator delete(*(void **)(v1 + 296));
  Espresso::optimizer_builder::~optimizer_builder((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void Espresso::gradient_builder::~gradient_builder(Espresso::gradient_builder *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 64);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((_QWORD *)this + 6));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_training_transform_info>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_training_transform_info>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  v3 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_training_transform_info>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,Espresso::layer_training_transform_info>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[2].__r_.__value_.__r.__words, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  return this;
}

void sub_19134DD38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void Espresso::layer_data::shapes(Espresso::layer_data *this, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[5];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = (char *)this + 16;
    do
    {
      v7 = *v4;
      v8 = (std::__shared_weak_count *)v4[1];
      v33 = *v4;
      v34 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      Espresso::abstract_blob_container::shape((char *)&v28, v7);
      v11 = *((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
      if (v11 >= v12)
      {
        v15 = (uint64_t)(v11 - *(_QWORD *)this) >> 6;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v17 = v12 - *(_QWORD *)this;
        if (v17 >> 5 > v16)
          v16 = v17 >> 5;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFC0)
          v18 = 0x3FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v35[4] = v6;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v18);
        v20 = &v19[64 * v15];
        v35[0] = v19;
        v35[1] = v20;
        v35[3] = &v19[64 * v21];
        v22 = v29;
        v23 = v30;
        *(_OWORD *)v20 = v28;
        *((_OWORD *)v20 + 1) = v22;
        *((_QWORD *)v20 + 4) = v23;
        *((_QWORD *)v20 + 5) = 0;
        *((_QWORD *)v20 + 6) = 0;
        *((_QWORD *)v20 + 7) = 0;
        *(_OWORD *)(v20 + 40) = *(_OWORD *)__p;
        *((_QWORD *)v20 + 7) = v32;
        __p[0] = 0;
        __p[1] = 0;
        v32 = 0;
        v35[2] = v20 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)this, v35);
        v24 = *((_QWORD *)this + 1);
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v35);
        v25 = __p[0];
        *((_QWORD *)this + 1) = v24;
        if (v25)
        {
          __p[1] = v25;
          operator delete(v25);
        }
      }
      else
      {
        v13 = v29;
        v14 = v30;
        *(_OWORD *)v11 = v28;
        *(_OWORD *)(v11 + 16) = v13;
        *(_QWORD *)(v11 + 32) = v14;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        *(_OWORD *)(v11 + 40) = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 56) = v32;
        __p[0] = 0;
        __p[1] = 0;
        v32 = 0;
        *((_QWORD *)this + 1) = v11 + 64;
      }
      if (v8)
      {
        v26 = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void sub_19134DF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

std::string *Espresso::layer_nd_shape::repr(std::string *this, uint64_t a2)
{
  unint64_t v4;
  std::string *v5;
  std::string::size_type size;
  uint64_t v7;
  std::string v9;

  std::string::basic_string[abi:ne180100]<0>(this, "(");
  if (*(_DWORD *)(a2 + 20))
  {
    v4 = 0;
    do
    {
      std::to_string(&v9, *(_DWORD *)(a2 + 4 * v4));
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v9;
      else
        v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
      else
        size = v9.__r_.__value_.__l.__size_;
      std::string::append(this, (const std::string::value_type *)v5, size);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      v7 = *(int *)(a2 + 20);
      if (v4 < v7 - 1)
      {
        std::string::append(this, ", ");
        LODWORD(v7) = *(_DWORD *)(a2 + 20);
      }
      ++v4;
    }
    while (v4 < (int)v7);
  }
  return std::string::append(this, ")");
}

void sub_19134E050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::context,std::allocator<Espresso::MPSEngine::context>,std::shared_ptr<Espresso::abstract_engine>,objc_object  {objcproto9MTLDevice}* {__strong},void>(uint64_t *a1, _QWORD *a2, void *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x108uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC2588;
  result = Espresso::MPSEngine::context::context<objc_object  {objcproto9MTLDevice}* {__strong}>((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19134E0E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::universal_dropout_augment_kernel::~universal_dropout_augment_kernel(Espresso::universal_dropout_augment_kernel *this)
{
  *(_QWORD *)this = &off_1E2D9D1B8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D9D1B8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::universal_dropout_augment_kernel::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t **a4)
{
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  size_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  void *__src;
  uint64_t v57;
  uint64_t v58;
  unsigned int **v59;
  __int128 v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)**a4 + 56))(&v63);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)**a3 + 56))(&v61);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)**a4 + 40))(**a4, a2, &v63);
  if (*(_QWORD *)a2)
  {
    if (v8)
    {
      v9 = *(std::__shared_weak_count **)(a2 + 8);
      *(_QWORD *)&v60 = v8;
      *((_QWORD *)&v60 + 1) = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      (*(void (**)(void *))(*(_QWORD *)v8 + 40))(v8);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  v52 = a2;
  v59 = (unsigned int **)(a1 + 304);
  if (!*(_QWORD *)(a1 + 304))
  {
    v47 = operator new(0x20uLL);
    v47[1] = 0;
    v47[2] = 0;
    *v47 = &off_1E2DC27F0;
    v48 = *(_DWORD *)(a1 + 288)
        + ((*(_DWORD *)(a1 + 288) / 0x7FFFFFFFu) | ((*(_DWORD *)(a1 + 288) / 0x7FFFFFFFu) << 31));
    if (v48 <= 1)
      v48 = 1;
    *((_DWORD *)v47 + 6) = v48;
    *(_QWORD *)&v60 = v47 + 3;
    *((_QWORD *)&v60 + 1) = v47;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v59, &v60);
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    if (*((_QWORD *)&v60 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  v14 = **a4;
  if (*(int *)(v14 + 20) >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = *(int *)(v61 + 12) * (uint64_t)*(int *)(v61 + 8);
    v58 = v17 * *(int *)(v61 + 16);
    v18 = 4 * v58;
    if (v17 <= 1)
      v19 = 1;
    else
      v19 = *(_DWORD *)(v61 + 12) * *(_DWORD *)(v61 + 8);
    v20 = v19;
    v21 = *(_DWORD *)(a1 + 284);
    v53 = a4;
    v55 = v20;
    do
    {
      v22 = *(_DWORD *)(a1 + 288)
          + ((*(_DWORD *)(a1 + 288) / 0x7FFFFFFFu) | ((*(_DWORD *)(a1 + 288) / 0x7FFFFFFFu) << 31));
      if (v22 <= 1)
        v22 = 1;
      **(_DWORD **)(a1 + 304) = v22;
      if (v21 >= 1)
      {
        v23 = 0;
        v24 = *(_QWORD *)(v63 + 24);
        __src = (void *)(v24 + 4 * v16 * v58);
        v57 = v16;
        v54 = v15;
        v25 = v24 + v15;
        do
        {
          v26 = v61;
          v27 = *(_QWORD *)(v61 + 24);
          if (v23)
          {
            v28 = *(_DWORD *)(v61 + 16);
            if (v28 >= 1)
            {
              v29 = 0;
              LODWORD(v30) = 0;
              v31 = v27 + v18 * (v23 + (int)v16 * v21);
              do
              {
                if ((_DWORD)v17)
                {
                  v32 = *v59;
                  v33 = **v59;
                  v30 = (int)v30;
                  v34 = v20;
                  do
                  {
                    v35 = v33 / 0xADC8;
                    v36 = 48271 * (v33 % 0xADC8);
                    v35 *= 3399;
                    v37 = v36 >= v35;
                    v38 = v36 - v35;
                    if (v37)
                      v39 = 0;
                    else
                      v39 = 0x7FFFFFFF;
                    v33 = v39 + v38;
                    v40 = 0;
                    if ((float)((float)((float)(v33 - 1) * 4.6566e-10) + 0.0) <= *(float *)(a1 + 280))
                      v40 = *(_DWORD *)(v25 + 4 * v30);
                    *(_DWORD *)(v31 + 4 * v30++) = v40;
                    --v34;
                  }
                  while (v34);
                  *v32 = v33;
                  v28 = *(_DWORD *)(v26 + 16);
                }
                ++v29;
              }
              while (v29 < v28);
            }
          }
          else
          {
            memcpy((void *)(v27 + 4 * v21 * (int)v16 * v58), __src, v18);
            v20 = v55;
            v16 = v57;
          }
          ++v23;
          v21 = *(_DWORD *)(a1 + 284);
        }
        while (v23 < v21);
        v15 = v54;
        v14 = **v53;
      }
      ++v16;
      v15 += v18;
    }
    while (v16 < *(int *)(v14 + 20));
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)**a3 + 48))(**a3, v52, &v61);
  v41 = v62;
  if (v62)
  {
    v42 = (unint64_t *)&v62->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v64;
  if (v64)
  {
    v45 = (unint64_t *)&v64->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_19134E5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  if (a24)
  {
    v27 = (unint64_t *)&a24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *Espresso::universal_dropout_augment_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  v6 = *a3;
  v7 = a3[1];
  if (*a3 != v7)
  {
    v8 = *(_DWORD *)(a1 + 284);
    do
    {
      *(_DWORD *)(v6 + 12) *= v8;
      v6 += 64;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dropout_augment_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void std::__shared_ptr_emplace<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC27F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC27F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::universal_dropout_augment_join_kernel::~universal_dropout_augment_join_kernel(Espresso::universal_dropout_augment_join_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::universal_dropout_augment_join_kernel::__launch(uint64_t a1, uint64_t a2, _QWORD **a3, _QWORD **a4)
{
  int v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  int v45;
  void *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  v8 = *(_DWORD *)(**a3 + 20);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)**a4 + 56))(&v52);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)**a3 + 56))(&v50);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*a3)[2] + 56))(&v48);
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)**a4 + 40))(**a4, a2, &v52);
  if (*(_QWORD *)a2)
  {
    if (v9)
    {
      v10 = *(std::__shared_weak_count **)(a2 + 8);
      v46 = v9;
      v47 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(void *))(*(_QWORD *)v9 + 40))(v9);
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  v45 = *(_DWORD *)(a1 + 296);
  v44 = *(_OWORD *)(a1 + 280);
  v42 = v52;
  v43 = v53;
  if (v53)
  {
    v15 = (unint64_t *)&v53->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v40 = v50;
  v41 = v51;
  if (v51)
  {
    v17 = (unint64_t *)&v51->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = v49;
  v39[0] = v48;
  v39[1] = v49;
  if (v49)
  {
    v20 = (unint64_t *)&v49->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  combine_dropout_augment_outputs((uint64_t)&v44, (uint64_t)&v42, (uint64_t)&v40, (uint64_t)v39, v8);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v24 = v41;
  if (v41)
  {
    v25 = (unint64_t *)&v41->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v43;
  if (v43)
  {
    v28 = (unint64_t *)&v43->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)**a3 + 48))(**a3, a2, &v50);
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)(*a3)[2] + 48))((*a3)[2], a2, &v48);
  v30 = v49;
  if (v49)
  {
    v31 = (unint64_t *)&v49->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v51;
  if (v51)
  {
    v34 = (unint64_t *)&v51->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v53;
  if (v53)
  {
    v37 = (unint64_t *)&v53->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_19134EAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 64);
  _Unwind_Resume(a1);
}

uint64_t Espresso::universal_dropout_augment_join_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t result;
  std::runtime_error *exception;
  std::runtime_error *v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  _BYTE v19[32];
  uint64_t v20;
  void *__p;
  void *v22;
  uint64_t v23;
  __int128 v24;

  *((_QWORD *)&v24 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  *(_OWORD *)v19 = **a2;
  *(_OWORD *)&v19[16] = v7;
  v20 = v6;
  __p = 0;
  v22 = 0;
  v23 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v18.__r_.__value_.__s.__data_[8] = 0;
  v8 = operator new(0x40uLL);
  *a3 = (uint64_t)v8;
  a3[1] = (uint64_t)v8;
  a3[2] = (uint64_t)v8 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v19, &v24, (uint64_t)v8);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v9 = *(_DWORD *)(a1 + 284);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid parameter");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v11 = *(_DWORD *)(*a3 + 12);
  if (v11 != v11 / v9 * v9)
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v18, *(_DWORD *)(*a3 + 12));
    v16 = std::string::insert(&v18, 0, "Invalid parameter: ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)&v19[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)v19 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v15, (const std::string *)v19);
    __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_DWORD *)(v10 + 12) = v11 / v9;
  v12 = a3[1];
  if (v12 >= a3[2])
  {
    result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (__int128 *)v10);
  }
  else
  {
    std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, (__int128 *)v10);
    result = v12 + 64;
  }
  a3[1] = result;
  return result;
}

void sub_19134ECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v26 & 1) == 0)
    {
LABEL_8:
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t Espresso::universal_dropout_augment_join_kernel::number_of_top_blobs(Espresso::universal_dropout_augment_join_kernel *this)
{
  return 2;
}

_QWORD *std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(v3 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v3 + 40), *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_19134EDEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[2];
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v17 = a1 + 2;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v7);
  else
    v8 = 0;
  v9 = v7 + (v3 << 6);
  v14[0] = v7;
  v14[1] = v9;
  v15 = v9;
  v16 = v7 + (v8 << 6);
  v10 = *a2;
  v11 = a2[1];
  *(_QWORD *)(v9 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v9 = v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v9 + 40), *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  v15 += 64;
  std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_19134EEE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void combine_dropout_augment_outputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int i;
  int v7;
  vDSP_Length v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  const float *v32;
  float v33;
  float *v34;
  uint64_t v35;
  float v36;
  float *v37;
  uint64_t v38;
  float v39;
  unint64_t v40;
  float v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  float v45;
  const float *v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  int v54;
  uint64_t v55;
  float __C;
  void *__p[3];

  if (a5 >= 1)
  {
    for (i = 0; i != a5; ++i)
    {
      v7 = *(_DWORD *)(*(_QWORD *)a2 + 12) * *(_DWORD *)(*(_QWORD *)a2 + 8) * *(_DWORD *)(*(_QWORD *)a2 + 16);
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v10 = *(unsigned int *)(a1 + 4);
      v11 = *(_DWORD *)(a1 + 4);
      v12 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      v13 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      v14 = *(_DWORD *)(*(_QWORD *)a3 + 12);
      v15 = *(_DWORD *)(*(_QWORD *)a3 + 16);
      v16 = 4 * v7;
      if (*(_BYTE *)(a1 + 16))
      {
        if (v7)
        {
          v17 = 0;
          v18 = v12 + 4 * v13 * i * v14 * v15;
          v19 = (float *)(v9 + v16 * v11 * i);
          do
          {
            v20 = 0.0;
            if ((int)v10 >= 1)
            {
              v21 = v19;
              v22 = v10;
              do
              {
                v20 = v20 + (float)(*v21 * (float)(1.0 / (float)(int)v10));
                v21 = (float *)((char *)v21 + v16);
                --v22;
              }
              while (v22);
            }
            *(float *)(v18 + 4 * v17++) = v20;
            ++v19;
          }
          while (v17 != v7);
        }
      }
      else if (v7)
      {
        v23 = v7;
        v24 = (_DWORD *)(v12 + 4 * v14 * v15 * v13 * i);
        v25 = (int *)(v9 + 4 * v7 * (uint64_t)((int)v10 * i));
        do
        {
          v26 = *v25++;
          *v24++ = v26;
          --v23;
        }
        while (v23);
      }
      v55 = *(_QWORD *)(*(_QWORD *)a4 + 24);
      v27 = *(_DWORD *)(*(_QWORD *)a4 + 12);
      v54 = *(_DWORD *)(*(_QWORD *)a4 + 8);
      v28 = *(_DWORD *)(*(_QWORD *)a4 + 16);
      std::vector<float>::vector(__p, (int)v10);
      *(_DWORD *)(a1 + 12) = 2;
      v29 = *(unsigned int *)(a1 + 4);
      v30 = 0.0;
      if ((int)v29 >= 1)
      {
        v31 = 0;
        v32 = (const float *)(v9 + 4 * (int)v10 * i * (uint64_t)v7);
        v33 = 1.0 / (float)(v29 - 1);
        v34 = (float *)(v9 + v16 * v11 * i);
        v35 = 4 * v8;
        do
        {
          if ((int)v8 >= 1)
          {
            v36 = 0.0;
            v37 = v34;
            v38 = v8;
            do
            {
              v39 = *v37++;
              v36 = v36 + v39;
              --v38;
            }
            while (v38);
            v40 = 0;
            v41 = v36 / (float)(int)v8;
            do
            {
              v34[v40 / 4] = v34[v40 / 4] - v41;
              v40 += 4;
            }
            while (v35 != v40);
            v42 = 0;
            v43 = 0.0;
            do
            {
              v43 = v43 + (float)(v34[v42 / 4] * v34[v42 / 4]);
              v42 += 4;
            }
            while (v35 != v42);
            v44 = 0;
            if (v43 < 0.000001)
              v43 = 0.000001;
            v45 = 1.0 / sqrtf(v43);
            do
            {
              v34[v44 / 4] = v45 * v34[v44 / 4];
              v44 += 4;
            }
            while (v35 != v44);
          }
          ++v31;
          v34 = (float *)((char *)v34 + v16);
        }
        while (v31 != v29);
        if ((int)v29 >= 2)
        {
          v46 = (const float *)(v9 + (4 * v11 * i + 4) * v8);
          v30 = 0.0;
          v47 = 1;
          do
          {
            __C = 0.0;
            vDSP_dotpr(v46, 1, v32, 1, &__C, v8);
            v30 = v30 + (float)(__C * v33);
            ++v47;
            v46 = (const float *)((char *)v46 + v16);
          }
          while (v47 < *(int *)(a1 + 4));
        }
      }
      if ((_DWORD)v8)
      {
        v48 = v8;
        v49 = (float *)(v55 + 4 * v27 * v28 * v54 * i);
        do
        {
          *v49++ = v30;
          --v48;
        }
        while (v48);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_19134F210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::add_dropout_augment_layer(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[5];
  std::string __p;
  _QWORD v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;

  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  v21 = *(_QWORD *)(*a1 + 16);
  v22 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v5 = *a1;
  }
  v9 = *(_DWORD *)(**(_QWORD **)(v5 + 32) + 12);
  v10 = (std::__shared_weak_count *)a1[1];
  v20[0] = v5;
  v20[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3321888768;
  v18[2] = ___ZN8Espresso25add_dropout_augment_layerENSt3__110shared_ptrINS_3netEEERKNS_22dropout_augment_paramsENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v18[3] = &__block_descriptor_64_ea8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e385__vector_std::shared_ptr_Espresso::graph_optimization_rule___std::allocator_std::shared_ptr_Espresso::graph_optimization_rule_____v_v___compressed_pair_std::shared_ptr_Espresso::graph_optimization_rule_____std::allocator_std::shared_ptr_Espresso::graph_optimization_rule_____v__24__0_shared_ptr_Espresso::network_optimization_graph____network_optimization_graph_____shared_weak_count__8l;
  v18[4] = a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  Espresso::optimize_network(&v21, v9, (uint64_t)v20, v18, a4);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19134F39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 48);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso25add_dropout_augment_layerENSt3__110shared_ptrINS_3netEEERKNS_22dropout_augment_paramsENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  __int128 *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  __int128 v30;
  std::string v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *(__int128 **)(a1 + 32);
  v7 = operator new(0x70uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E2DBD498;
  v9 = *(_QWORD **)a2;
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  v34 = v9;
  v35 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v31 = *(std::string *)(a1 + 40);
  Espresso::rule_add_dropout_augment::rule_add_dropout_augment((uint64_t)(v7 + 3), v9, v8, v6, (__int128 *)&v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)&v30 = v7 + 3;
  *((_QWORD *)&v30 + 1) = v7;
  v14 = (unint64_t)a3[2];
  v15 = a3[1];
  if ((unint64_t)v15 >= v14)
  {
    v17 = (v15 - *a3) >> 4;
    if ((unint64_t)(v17 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v18 = v14 - (_QWORD)*a3;
    v19 = v18 >> 3;
    if (v18 >> 3 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v33 = a3 + 2;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v20);
    v23 = &v21[16 * v17];
    *(_OWORD *)v23 = v30;
    v25 = *a3;
    v24 = a3[1];
    if (v24 == *a3)
    {
      v28 = vdupq_n_s64((unint64_t)v24);
      v26 = &v21[16 * v17];
    }
    else
    {
      v26 = &v21[16 * v17];
      do
      {
        v27 = *((_OWORD *)v24 - 1);
        v24 -= 16;
        *((_OWORD *)v26 - 1) = v27;
        v26 -= 16;
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
      }
      while (v24 != v25);
      v28 = *(int64x2_t *)a3;
    }
    v16 = v23 + 16;
    *a3 = v26;
    a3[1] = v23 + 16;
    *(int64x2_t *)&v31.__r_.__value_.__r.__words[1] = v28;
    v29 = a3[2];
    a3[2] = &v21[16 * v22];
    v32 = v29;
    v31.__r_.__value_.__r.__words[0] = v28.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
  }
  else
  {
    *(_OWORD *)v15 = v30;
    v16 = v15 + 16;
  }
  a3[1] = v16;
}

void sub_19134F5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  uint64_t v21;
  void *v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 64);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v23);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t Espresso::rule_add_dropout_augment::rule_add_dropout_augment(uint64_t a1, _QWORD *a2, std::__shared_weak_count *a3, __int128 *a4, __int128 *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string *v17;
  __int128 v18;
  __int128 v19;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_QWORD *)a1 = off_1E2D901E0;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = a3;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)a1 = off_1E2D901E0;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v12 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = off_1E2D92288;
  v17 = (std::string *)(a1 + 40);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v18 = *a5;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  v19 = *a4;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 64) = v19;
  return a1;
}

void sub_19134F798(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 1));
  _Unwind_Resume(a1);
}

void Espresso::rule_add_dropout_augment::~rule_add_dropout_augment(void **this)
{
  *this = off_1E2D92288;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

{
  *this = off_1E2D92288;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::rule_add_dropout_augment::match_at_layer@<X0>(Espresso::rule_add_dropout_augment *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  char *v15;
  uint64_t *v16;
  _QWORD v17[2];
  int v18;

  v18 = a2;
  v6 = *((_QWORD *)this + 3) + 96;
  v7 = a2;
  v17[0] = a2;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, a2, v17);
  v9 = *(unsigned __int8 **)(result + 24);
  v10 = v9[23];
  if ((v10 & 0x80u) == 0)
    v11 = v9[23];
  else
    v11 = *((_QWORD *)v9 + 1);
  v12 = *((unsigned __int8 *)this + 63);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)this + 6);
  if (v11 != v12)
    goto LABEL_16;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)this + 40;
  else
    v14 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if ((v10 & 0x80) != 0)
  {
    result = memcmp(*(const void **)v9, v14, *((_QWORD *)v9 + 1));
    if (!(_DWORD)result)
      goto LABEL_17;
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  if (v9[23])
  {
    while (*v9 == *v14)
    {
      ++v9;
      ++v14;
      if (!--v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_17:
  v15 = (char *)operator new(0x98uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E2DBD460;
  *((_QWORD *)v15 + 3) = off_1E2D92268;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 5) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 6) = 0u;
  *((_DWORD *)v15 + 8) = -1;
  *((_QWORD *)v15 + 6) = 0;
  *((_QWORD *)v15 + 7) = 0;
  *((_QWORD *)v15 + 5) = v15 + 48;
  *((_QWORD *)v15 + 10) = 0;
  *((_QWORD *)v15 + 9) = 0;
  *((_QWORD *)v15 + 8) = v15 + 72;
  *((_QWORD *)v15 + 11) = 0;
  *((_QWORD *)v15 + 12) = 0;
  *((_OWORD *)v15 + 7) = 0u;
  *((_QWORD *)v15 + 18) = 0;
  *((_OWORD *)v15 + 8) = 0u;
  v17[0] = v15 + 24;
  v17[1] = v15;
  *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v15 + 5, a2, &v18)+ 32) = 0;
  v16 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * v7);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v15 + 11, *v16, v16[1]);
  result = (uint64_t)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v15 + 14, *((_QWORD *)this + 3), *((_QWORD *)this + 4));
  *((_DWORD *)v15 + 26) = a2;
  *a3 = v15 + 24;
  a3[1] = v15;
  return result;
}

void sub_19134FA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::rule_add_dropout_augment::transform_and_return_skip_layers(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  int *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  __int128 *v17;
  const void *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  void **v36;
  const void *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *__p[2];
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string *v56[3];
  std::string *v57[3];
  uint64_t v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  std::__shared_weak_count *v66;
  void **v67;

  if (*(_QWORD *)a3
  {
    v9 = v8;
    v10 = *(std::__shared_weak_count **)(a3 + 8);
    v65 = v8;
    v66 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v65 = 0;
    v66 = 0;
  }
  v13 = *(_QWORD *)(a1 + 24) + 96;
  *(_QWORD *)&v60 = v9[20];
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v60, &v60);
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, v14[3], v14[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[4] - v14[3]) >> 3));
  v15 = v62;
  if (*(char *)(v62 + 23) >= 0)
    v16 = *(unsigned __int8 *)(v62 + 23);
  else
    v16 = *(_QWORD *)(v62 + 8);
  v17 = &v60;
  std::string::basic_string[abi:ne180100]((uint64_t)&v60, v16 + 16);
  if (v61 < 0)
    v17 = (__int128 *)v60;
  if (v16)
  {
    if (*(char *)(v15 + 23) >= 0)
      v18 = (const void *)v15;
    else
      v18 = *(const void **)v15;
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, "_dropout_augment");
  v19 = v62;
  if (*(char *)(v62 + 23) < 0)
    operator delete(*(void **)v62);
  v20 = v60;
  *(_QWORD *)(v19 + 16) = v61;
  *(_OWORD *)v19 = v20;
  v21 = *a2;
  v22 = *((_QWORD *)v9 + 8);
  v23 = *(std::__shared_weak_count **)(v22 + 72);
  v58 = *(_QWORD *)(v22 + 64);
  v59 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v22 = *((_QWORD *)v9 + 8);
  }
  v26 = *((_QWORD *)v9 + 11) + 56;
  v27 = v9[20];
  __p[0] = (void *)v27;
  v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v27, __p);
  memset(v57, 0, sizeof(v57));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v57, v28[3], v28[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[4] - v28[3]) >> 3));
  memset(v56, 0, sizeof(v56));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v56, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((v63 - v62) >> 3));
  Espresso::sequential_builder::add_kernel(v21, &v58, v22 + 40, v22 + 16, v57, v56);
  *(_QWORD *)&v60 = v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  *(_QWORD *)&v60 = v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  v29 = v59;
  if (v59)
  {
    v30 = (unint64_t *)&v59->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (uint64_t *)*a2;
  std::string::basic_string[abi:ne180100]<0>(&v60, "dropout_augment");
  v33 = v65;
  v34 = *((_QWORD *)v65 + 8);
  if (*(char *)(v34 + 39) >= 0)
    v35 = *(unsigned __int8 *)(v34 + 39);
  else
    v35 = *(_QWORD *)(v34 + 24);
  v36 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v35 + 16);
  if (v53 < 0)
    v36 = (void **)__p[0];
  if (v35)
  {
    if (*(char *)(v34 + 39) >= 0)
      v37 = (const void *)(v34 + 16);
    else
      v37 = *(const void **)(v34 + 16);
    memmove(v36, v37, v35);
  }
  strcpy((char *)v36 + v35, "_dropout_augment");
  v50 = 0;
  v51 = 0;
  v49 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((v63 - v62) >> 3));
  v38 = *(_QWORD *)(a1 + 24) + 96;
  v39 = *((int *)v33 + 20);
  v47 = v39;
  v40 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v38, v39, &v47);
  memset(v48, 0, sizeof(v48));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v48, v40[3], v40[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40[4] - v40[3]) >> 3));
  Espresso::sequential_builder::add<Espresso::dropout_augment_params>(&v54, v32, (uint64_t)&v60, (uint64_t)__p, a1 + 64, v49, v50, v48);
  v41 = v55;
  if (v55)
  {
    v42 = (unint64_t *)&v55->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v67 = (void **)v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v67);
  v67 = (void **)&v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v67);
  if (v53 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v61) < 0)
    operator delete((void *)v60);
  std::map<int,BOOL>::map[abi:ne180100](a4, (_QWORD *)v65 + 2);
  *(_QWORD *)&v60 = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  v44 = v66;
  if (v66)
  {
    v45 = (unint64_t *)&v66->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_19134FE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  *(_QWORD *)(v30 - 136) = v30 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 136));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 88);
  _Unwind_Resume(a1);
}

void sub_19134FF60()
{
  JUMPOUT(0x19134FF50);
}

void Espresso::sequential_builder::add<Espresso::dropout_augment_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19135015C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t std::map<int,BOOL>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  BOOL v10;
  int v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(uint64_t **)(a1 + 8);
      v7 = v3;
      if (*(uint64_t ***)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v3;
      if (v6)
      {
        do
        {
          v7 = (uint64_t **)v8;
          v8 = *(_QWORD *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (uint64_t **)v9[2];
          v10 = *v7 == (uint64_t *)v9;
          v9 = v7;
        }
        while (v10);
      }
      v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6)
          v12 = v7;
        else
          v12 = v3;
        if (v6)
          v13 = v7 + 1;
        else
          v13 = v3;
      }
      else
      {
        v12 = v3;
        v13 = v3;
        if (v6)
        {
          v13 = v3;
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v6;
              v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17)
                break;
              v6 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_15;
            }
            if (v17 >= v11)
              break;
            v13 = v12 + 1;
            v6 = v12[1];
            if (!v6)
              goto LABEL_15;
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        v14 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v14 + 28) = *(_QWORD *)((char *)v5 + 28);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v10 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v10);
      }
      v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_19135033C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<int>::destroy(*v1);
  _Unwind_Resume(a1);
}

void Espresso::rule_add_dropout_augment::status_t::~status_t(void **this)
{
  *this = off_1E2D92268;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

{
  *this = off_1E2D92268;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::add_dropout_augment_join_layer(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];
  std::string __p;
  _QWORD v24[2];
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t v27;
  std::string v28;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v28.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  else if (*((_BYTE *)&v28.__r_.__value_.__s + 23))
  {
    goto LABEL_9;
  }
  v7 = *a1 + 96;
  v27 = *(_DWORD *)(*a1 + 120) - 1;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v27, &v27);
  std::string::operator=(&v28, (const std::string *)v8[3]);
LABEL_9:
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  v25 = *(_QWORD *)(*a1 + 16);
  v26 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v9 = *a1;
  }
  v13 = *(_DWORD *)(**(_QWORD **)(v9 + 32) + 12);
  v14 = (std::__shared_weak_count *)a1[1];
  v24[0] = v9;
  v24[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3321888768;
  v22[2] = ___ZN8Espresso30add_dropout_augment_join_layerENSt3__110shared_ptrINS_3netEEERKNS_22dropout_augment_paramsENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v22[3] = &__block_descriptor_64_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e385__vector_std::shared_ptr_Espresso::graph_optimization_rule___std::allocator_std::shared_ptr_Espresso::graph_optimization_rule_____v_v___compressed_pair_std::shared_ptr_Espresso::graph_optimization_rule_____std::allocator_std::shared_ptr_Espresso::graph_optimization_rule_____v__24__0_shared_ptr_Espresso::network_optimization_graph____network_optimization_graph_____shared_weak_count__8l;
  v22[4] = a2;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    __p = v28;
  Espresso::optimize_network(&v25, v13, (uint64_t)v24, v22, a4);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_1913506C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void ___ZN8Espresso30add_dropout_augment_join_layerENSt3__110shared_ptrINS_3netEEERKNS_22dropout_augment_paramsENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  __int128 *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  char *v34;
  __int128 v35;
  std::string v36;
  char *v37;
  _QWORD *v38;
  std::string v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *(__int128 **)(a1 + 32);
  v7 = operator new(0x70uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E2DBE0A0;
  v9 = *(_QWORD **)a2;
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  v40 = v9;
  v41 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v39 = *(std::string *)(a1 + 40);
  v42 = v9;
  v43 = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v36 = v39;
  Espresso::rule_add_dropout_augment::rule_add_dropout_augment((uint64_t)(v7 + 3), v9, v8, v6, (__int128 *)&v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v7[3] = off_1E2D9A090;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v16 = v41;
  if (v41)
  {
    v17 = (unint64_t *)&v41->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)&v35 = v7 + 3;
  *((_QWORD *)&v35 + 1) = v7;
  v19 = (unint64_t)a3[2];
  v20 = a3[1];
  if ((unint64_t)v20 >= v19)
  {
    v22 = (v20 - *a3) >> 4;
    if ((unint64_t)(v22 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v23 = v19 - (_QWORD)*a3;
    v24 = v23 >> 3;
    if (v23 >> 3 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    v38 = a3 + 2;
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v25);
    v28 = &v26[16 * v22];
    *(_OWORD *)v28 = v35;
    v30 = *a3;
    v29 = a3[1];
    if (v29 == *a3)
    {
      v33 = vdupq_n_s64((unint64_t)v29);
      v31 = &v26[16 * v22];
    }
    else
    {
      v31 = &v26[16 * v22];
      do
      {
        v32 = *((_OWORD *)v29 - 1);
        v29 -= 16;
        *((_OWORD *)v31 - 1) = v32;
        v31 -= 16;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
      }
      while (v29 != v30);
      v33 = *(int64x2_t *)a3;
    }
    v21 = v28 + 16;
    *a3 = v31;
    a3[1] = v28 + 16;
    *(int64x2_t *)&v36.__r_.__value_.__r.__words[1] = v33;
    v34 = a3[2];
    a3[2] = &v26[16 * v27];
    v37 = v34;
    v36.__r_.__value_.__r.__words[0] = v33.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v36);
  }
  else
  {
    *(_OWORD *)v20 = v35;
    v21 = v20 + 16;
  }
  a3[1] = v21;
}

void sub_1913509A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;
  void *v32;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 64);
  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 80);
  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v32);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void Espresso::rule_add_dropout_augment_join::~rule_add_dropout_augment_join(void **this)
{
  *this = off_1E2D92288;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

{
  *this = off_1E2D92288;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_1E2D901E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
  JUMPOUT(0x19401CD90);
}

void Espresso::rule_add_dropout_augment_join::transform_and_return_skip_layers(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  int *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::vector<std::string>::pointer begin;
  size_t size;
  void *p_v;
  std::vector<std::string>::pointer v18;
  std::vector<std::string>::pointer v19;
  __int128 v20;
  std::vector<std::string>::pointer v21;
  size_t v22;
  __int128 *p_p;
  std::vector<std::string>::pointer v24;
  std::vector<std::string>::pointer end;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  __int128 *v52;
  const void *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63[3];
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::string *v70[3];
  std::string *v71[3];
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 __p;
  int64_t v75;
  std::vector<std::string> v76;
  int *v77;
  std::__shared_weak_count *v78;
  std::__split_buffer<std::string> __v;
  void **v80;

  if (*(_QWORD *)a3
  {
    v9 = v8;
    v10 = *(std::__shared_weak_count **)(a3 + 8);
    v77 = v8;
    v78 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v77 = 0;
    v78 = 0;
  }
  v13 = *(_QWORD *)(a1 + 24) + 96;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v9[20];
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, (unint64_t)__v.__first_, &__v);
  memset(&v76, 0, sizeof(v76));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v76, v14[3], v14[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[4] - v14[3]) >> 3));
  begin = v76.__begin_;
  if ((v76.__begin_->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v76.__begin_->__r_.__value_.__r.__words[2]);
  else
    size = v76.__begin_->__r_.__value_.__l.__size_;
  p_v = &__v;
  std::string::basic_string[abi:ne180100]((uint64_t)&__v, size + 5);
  if (SHIBYTE(__v.__end_) < 0)
    p_v = __v.__first_;
  if (size)
  {
    if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = begin;
    else
      v18 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
    memmove(p_v, v18, size);
  }
  strcpy((char *)p_v + size, "_prob");
  v19 = v76.__begin_;
  if (SHIBYTE(v76.__begin_->__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__begin_->__r_.__value_.__l.__data_);
  v20 = *(_OWORD *)&__v.__first_;
  v19->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  v21 = v76.__begin_;
  if ((v76.__begin_->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v76.__begin_->__r_.__value_.__r.__words[2]);
  else
    v22 = v76.__begin_->__r_.__value_.__l.__size_;
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v22 + 12);
  if (v75 < 0)
    p_p = (__int128 *)__p;
  if (v22)
  {
    if ((v21->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = v21;
    else
      v24 = (std::vector<std::string>::pointer)v21->__r_.__value_.__r.__words[0];
    memmove(p_p, v24, v22);
  }
  strcpy((char *)p_p + v22, "_uncertainty");
  end = v76.__end_;
  if (v76.__end_ >= v76.__end_cap_.__value_)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76.__end_ - (char *)v76.__begin_) >> 3);
    v28 = v27 + 1;
    if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v76.__end_cap_.__value_ - (char *)v76.__begin_) >> 3) > v28)
      v28 = 0x5555555555555556 * (((char *)v76.__end_cap_.__value_ - (char *)v76.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v76.__end_cap_.__value_ - (char *)v76.__begin_) >> 3) >= 0x555555555555555)
      v29 = 0xAAAAAAAAAAAAAAALL;
    else
      v29 = v28;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v76.__end_cap_;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v29);
    else
      v30 = 0;
    v31 = (std::string *)(v29 + 24 * v27);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v29;
    __v.__begin_ = v31;
    __v.__end_cap_.__value_ = (std::string *)(v29 + 24 * v30);
    v32 = __p;
    v31->__r_.__value_.__r.__words[2] = v75;
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
    v75 = 0;
    __p = 0uLL;
    __v.__end_ = v31 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v76, &__v);
    v33 = v76.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v76.__end_ = v33;
    if (SHIBYTE(v75) < 0)
      operator delete((void *)__p);
  }
  else
  {
    v26 = __p;
    v76.__end_->__r_.__value_.__r.__words[2] = v75;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v26;
    v76.__end_ = end + 1;
  }
  v34 = *a2;
  v35 = *((_QWORD *)v9 + 8);
  v36 = *(std::__shared_weak_count **)(v35 + 72);
  v72 = *(_QWORD *)(v35 + 64);
  v73 = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v35 = *((_QWORD *)v9 + 8);
  }
  v39 = *((_QWORD *)v9 + 11) + 56;
  v40 = v9[20];
  *(_QWORD *)&__p = v40;
  v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v39, v40, &__p);
  memset(v71, 0, sizeof(v71));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v71, v41[3], v41[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41[4] - v41[3]) >> 3));
  v42 = *(_QWORD *)(a1 + 24) + 96;
  v43 = v9[20];
  v80 = (void **)v43;
  v44 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v42, v43, &v80);
  memset(v70, 0, sizeof(v70));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v70, v44[3], v44[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44[4] - v44[3]) >> 3));
  Espresso::sequential_builder::add_kernel(v34, &v72, v35 + 40, v35 + 16, v71, v70);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  v45 = v73;
  if (v73)
  {
    v46 = (unint64_t *)&v73->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (uint64_t *)*a2;
  std::string::basic_string[abi:ne180100]<0>(&__v, "dropout_augment_join");
  v49 = v77;
  v50 = *((_QWORD *)v77 + 8);
  if (*(char *)(v50 + 39) >= 0)
    v51 = *(unsigned __int8 *)(v50 + 39);
  else
    v51 = *(_QWORD *)(v50 + 24);
  v52 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v51 + 21);
  if (v75 < 0)
    v52 = (__int128 *)__p;
  if (v51)
  {
    if (*(char *)(v50 + 39) >= 0)
      v53 = (const void *)(v50 + 16);
    else
      v53 = *(const void **)(v50 + 16);
    memmove(v52, v53, v51);
  }
  strcpy((char *)v52 + v51, "_dropout_augment_join");
  v54 = *(_QWORD *)(a1 + 24) + 96;
  v55 = *((int *)v49 + 20);
  v64 = v55;
  v56 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v54, v55, &v64);
  v65 = 0;
  v66 = 0;
  v67 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v65, v56[3], v56[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[4] - v56[3]) >> 3));
  memset(v63, 0, sizeof(v63));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v63, (uint64_t)v76.__begin_, (uint64_t)v76.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v76.__end_ - (char *)v76.__begin_) >> 3));
  Espresso::sequential_builder::add<Espresso::dropout_augment_params>(&v68, v48, (uint64_t)&__v, (uint64_t)&__p, a1 + 64, v65, v66, v63);
  v57 = v69;
  if (v69)
  {
    v58 = (unint64_t *)&v69->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v80 = (void **)v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v80);
  v80 = (void **)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v80);
  if (SHIBYTE(v75) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  std::map<int,BOOL>::map[abi:ne180100](a4, (_QWORD *)v77 + 2);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  v60 = v78;
  if (v78)
  {
    v61 = (unint64_t *)&v78->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_191351138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;

  if (a32 < 0)
    operator delete(__p);
  __p = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 144);
  _Unwind_Resume(a1);
}

void sub_191351214()
{
  JUMPOUT(0x191351204);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment_join>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE0A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment_join>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE0A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment_join>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::dropout_multiply_closure::operator()(uint64_t a1, int64x2_t **a2, std::__shared_weak_count **a3, uint64_t *a4, int a5, uint64_t a6)
{
  std::__shared_weak_count *v7;
  int shared_owners;
  int shared_owners_high;
  int shared_weak_owners;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  _DWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int32x2_t *v53;
  void *v54;
  int v55;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  int32x2_t v60;
  int v61;
  __int32 v62;
  __int32 v63;
  __int32 v64;
  int v65;
  int v66;
  int32x2_t v67;
  int32x2_t v68;
  __int128 v69;
  void *v70;
  int64x2_t *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  int v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  int v79;
  int v80;
  int v81;
  int32x2_t v82;
  int32x2_t v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::runtime_error *exception;
  std::runtime_error *v97;
  std::runtime_error *v98;
  std::runtime_error *v99;
  std::runtime_error *v100;
  std::runtime_error *v101;
  int64x2_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  int64x2_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  id v120;
  std::__shared_weak_count *v121;
  _QWORD *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  if (HIDWORD((*a3)->__shared_weak_owners_) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid argument");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  shared_owners = v7->__shared_owners_;
  shared_owners_high = HIDWORD(v7->__shared_owners_);
  shared_weak_owners = v7->__shared_weak_owners_;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v126, v7, a3[1]);
  v15 = (shared_owners_high * shared_owners * shared_weak_owners);
  v16 = v126;
  if (!v126)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v124, *a3, a3[1]);
    v24 = v124;
    if (v124)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v110, *(void **)a6, *(std::__shared_weak_count **)(a6 + 8));
      if ((int)v15 >= 1)
      {
        v25 = 0;
        v26 = v110[3];
        v27 = *(_QWORD *)(*a4 + 16) + a5;
        do
        {
          v28 = *(unsigned __int8 *)(v27 + v25);
          if (*(_BYTE *)(v27 + v25))
            v28 = *(_WORD *)(*(_QWORD *)(v24 + 24) + 2 * v25);
          *(_WORD *)(v26 + 2 * v25++) = v28;
        }
        while (v15 != v25);
      }
      v29 = (std::__shared_weak_count *)v111;
      if (!v111)
        goto LABEL_76;
      v30 = (unint64_t *)(v111 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (v31)
        goto LABEL_76;
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      v32 = v29;
      goto LABEL_75;
    }
    v33 = *a3;
    if (*a3)
    {
      if (v34)
      {
        v35 = v34;
        v36 = a3[1];
        v122 = v34;
        v123 = v36;
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(p_shared_owners);
          while (__stxr(v38 + 1, p_shared_owners));
        }
        Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<unsigned char,1>>>((uint64_t)(v34 + 9), *a2, a4);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = v35[9];
        Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v120, (uint64_t)*a2);
        v41 = v120;
        if (*a3)
        else
          v42 = 0;
        if (*(_QWORD *)a6)
        else
          v53 = 0;
        if ((*(unsigned int (**)(_QWORD *))(*v35 + 32))(v35) != 1)
        {
          v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v98, "cp not supported");
          __cxa_throw(v98, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        objc_msgSend(*(id *)(v40 + 160), "kernelForFunction:cacheString:withConstants:", "v9_dropout_multiply", 0, 0);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v54)
        {
          v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v99, "Kernel not found");
          __cxa_throw(v99, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        objc_msgSend(v41, "setComputePipelineState:", v54);
        v55 = v53[2].i32[0];
        v57 = v55 - 1;
        v56 = v55 < 1;
        v58 = v55 + 2;
        if (!v56)
          v58 = v57;
        v59 = (v58 >> 2) + 1;
        v118 = 0;
        v119 = 1065353216;
        v60 = v53[1];
        v111 = __PAIR64__(v53[2].i32[1], v59);
        v61 = v42[63];
        v112 = v42[62] / 4;
        v113 = v61 / 4;
        v62 = v53[31].i32[0];
        v63 = v53[31].i32[1];
        v114 = v42[65] / 4;
        v115 = v62 / 4;
        v64 = v53[32].i32[1];
        v110 = (_QWORD *)v60;
        v116 = v63 / 4;
        v117 = v64 / 4;
        objc_msgSend(v41, "setBuffer:offset:atIndex:", *(_QWORD *)&v53[20], 0, 0);
        objc_msgSend(v41, "setBuffer:offset:atIndex:", *((_QWORD *)v42 + 20), 0, 1);
        objc_msgSend(v41, "setBytes:length:atIndex:", &v110, 52, 2);
        objc_msgSend(v41, "setBuffer:offset:atIndex:", v39, 0, 3);
        v65 = v53[3].i32[0];
        if (v65 <= 1)
          v65 = 1;
        v66 = v53[2].i32[1] * v59 * v65;
        if (v66 >= 1)
          --v66;
        v67 = vadd_s32(v53[1], (int32x2_t)-1);
        v68 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v67, (uint32x2_t)vcltz_s32(v67), 0x1EuLL), 2uLL);
        *(_QWORD *)&v69 = v68.i32[0];
        *((_QWORD *)&v69 + 1) = v68.i32[1];
        v108 = v69;
        v109 = (v66 >> 1) + 1;
        v106 = vdupq_n_s64(4uLL);
        v107 = 2;
        objc_msgSend(v41, "dispatchThreadgroups:threadsPerThreadgroup:", &v108, &v106);

        Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&v120);
        if (!v36)
          goto LABEL_76;
        goto LABEL_71;
      }
      v122 = 0;
      v123 = 0;
      if (v43)
      {
        v44 = v43;
        v45 = a3[1];
        v110 = v43;
        v111 = (unint64_t)v45;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        if (*(_QWORD *)a6
        {
          v49 = v48;
          v50 = *(std::__shared_weak_count **)(a6 + 8);
          v120 = v48;
          v121 = v50;
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
        }
        else
        {
          v50 = 0;
          v49 = 0;
          v120 = 0;
          v121 = 0;
        }
        Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<unsigned char,1>>>((uint64_t)(v44 + 9), *a2, a4);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = *a2;
        v72 = v44[9];
        if ((*(unsigned int (**)(_QWORD *))(*v44 + 32))(v44) != 1)
        {
          v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v100, "cp not supported");
          __cxa_throw(v100, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v73 = *a3;
        v128 = (*a3)->__shared_owners_;
        v74 = v73->__shared_weak_owners_;
        LODWORD(v73) = HIDWORD(v73->__shared_weak_owners_);
        v129 = v74 / 4;
        v130 = (int)v73;
        v75 = (void *)objc_msgSend(*(id *)(v72 + 144), "newBufferWithBytes:length:options:", &v128, 16, 0);
        objc_msgSend(*(id *)(v72 + 160), "kernelForFunction:cacheString:withConstants:", "dropout_multiply", 0, 0);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = (id)v71[9].i64[1];
        v78 = v77;
        if (!v76)
        {
          v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v101, "Kernel not found");
          __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        objc_msgSend(v77, "setComputePipelineState:", v76);
        objc_msgSend(v78, "setTexture:atIndex:", v49[21], 0);
        objc_msgSend(v78, "setTexture:atIndex:", v44[21], 1);
        objc_msgSend(v78, "setBuffer:offset:atIndex:", v75, 0, 0);
        objc_msgSend(v78, "setBuffer:offset:atIndex:", v70, a5, 1);
        v79 = (*a3)->__shared_weak_owners_;
        v80 = v79 - 1;
        v56 = v79 < 1;
        v81 = v79 + 14;
        if (!v56)
          v81 = v80;
        v82 = vadd_s32((int32x2_t)(*a3)->__shared_owners_, (int32x2_t)-1);
        v83 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v82, (uint32x2_t)vcltz_s32(v82), 0x1EuLL), 2uLL);
        *(_QWORD *)&v84 = v83.i32[0];
        *((_QWORD *)&v84 + 1) = v83.i32[1];
        v104 = v84;
        v105 = (v81 >> 4) + 1;
        v102 = vdupq_n_s64(4uLL);
        v103 = 4;
        objc_msgSend(v78, "dispatchThreadgroups:threadsPerThreadgroup:", &v104, &v102);

        if (v50)
        {
          v85 = (unint64_t *)&v50->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v87 = (std::__shared_weak_count *)v111;
        if (v111)
        {
          v88 = (unint64_t *)(v111 + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v36 = v123;
        if (!v123)
          goto LABEL_76;
LABEL_71:
        v90 = (unint64_t *)&v36->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (v91)
          goto LABEL_76;
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        v32 = v36;
LABEL_75:
        std::__shared_weak_count::__release_weak(v32);
LABEL_76:
        v21 = v125;
        if (!v125)
          goto LABEL_81;
        v92 = (unint64_t *)&v125->__shared_owners_;
        do
          v23 = __ldaxr(v92);
        while (__stlxr(v23 - 1, v92));
        goto LABEL_79;
      }
    }
    else
    {
      v122 = 0;
      v123 = 0;
    }
    v110 = 0;
    v111 = 0;
    v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v97, "not supported");
    __cxa_throw(v97, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v110, *(void **)a6, *(std::__shared_weak_count **)(a6 + 8));
  if ((int)v15 >= 1)
  {
    v17 = 0;
    v18 = v110[3];
    v19 = *(_QWORD *)(*a4 + 16) + a5;
    do
    {
      if (*(_BYTE *)(v19 + v17))
        v20 = *(_DWORD *)(*(_QWORD *)(v16 + 24) + 4 * v17);
      else
        v20 = 0;
      *(_DWORD *)(v18 + 4 * v17++) = v20;
    }
    while (v15 != v17);
  }
  v21 = (std::__shared_weak_count *)v111;
  if (v111)
  {
    v22 = (unint64_t *)(v111 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
LABEL_79:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_81:
  v93 = v127;
  if (v127)
  {
    v94 = (unint64_t *)&v127->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_191351B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  __cxa_free_exception(v26);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 120);
  _Unwind_Resume(a1);
}

id Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<unsigned char,1>>>(uint64_t a1, int64x2_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  int64x2_t *v31;

  v4 = *a3;
  if (a2)
  {
    v7 = a3[1];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = a2[11].u64[0];
    v11 = (_QWORD *)a2[10].i64[1];
    if ((unint64_t)v11 >= v10)
    {
      v13 = a2[10].i64[0];
      v14 = ((uint64_t)v11 - v13) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v16 = v10 - v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      v31 = a2 + 11;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v17);
      v20 = &v18[16 * v14];
      *(_QWORD *)v20 = v4;
      *((_QWORD *)v20 + 1) = v7;
      v22 = (_QWORD *)a2[10].i64[0];
      v21 = (_QWORD *)a2[10].i64[1];
      if (v21 == v22)
      {
        v25 = vdupq_n_s64((unint64_t)v21);
        v23 = &v18[16 * v14];
      }
      else
      {
        v23 = &v18[16 * v14];
        do
        {
          v24 = *((_OWORD *)v21 - 1);
          v21 -= 2;
          *((_OWORD *)v23 - 1) = v24;
          v23 -= 16;
          *v21 = 0;
          v21[1] = 0;
        }
        while (v21 != v22);
        v25 = a2[10];
      }
      v12 = v20 + 16;
      a2[10].i64[0] = (uint64_t)v23;
      a2[10].i64[1] = (uint64_t)(v20 + 16);
      v29 = v25;
      v26 = a2[11].i64[0];
      a2[11].i64[0] = (uint64_t)&v18[16 * v19];
      v30 = v26;
      v28 = v25.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v28);
    }
    else
    {
      *v11 = v4;
      v11[1] = v7;
      v12 = v11 + 2;
    }
    a2[10].i64[1] = (uint64_t)v12;
    v4 = *a3;
  }
  return (id)objc_msgSend(*(id *)(*(_QWORD *)a1 + 144), "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(v4 + 16), (*(int *)(v4 + 8) + 4095) & 0xFFFFFFFFFFFFF000, 0, 0);
}

void sub_191351DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

int *Espresso::dropout_augment_lowmem::dropout_augment_lowmem(int *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  unsigned __int8 *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  int v15;
  int64x2_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  int *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *size;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  float v49;
  unsigned int v50;
  int v51;
  std::__shared_weak_count *v52;
  unsigned int *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  std::string::size_type v60;
  uint64_t v61;
  uint64_t i;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  std::string::size_type v100;
  _QWORD *v101;
  _QWORD *v102;
  __int128 v103;
  int64x2_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::runtime_error *exception;
  std::runtime_error *v119;
  std::string *v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  std::string v125;
  __int128 v126;
  void *__p[2];
  uint64_t v128;
  unsigned int v129;
  std::string v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  int *v133;
  std::__shared_weak_count *v134;

  *a1 = 0;
  v7 = (unsigned __int8 *)(a1 + 2);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    *((_QWORD *)a1 + 3) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v7 = v8;
  }
  v9 = *a2;
  *((_QWORD *)a1 + 4) = *a2;
  v10 = a1 + 8;
  v11 = a2[1];
  *((_QWORD *)a1 + 5) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v9 = *(_QWORD *)v10;
  }
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  v14 = *a3;
  v15 = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 22) = 0u;
  *(_OWORD *)(a1 + 26) = 0u;
  *(_OWORD *)(a1 + 30) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  v16 = (int64x2_t *)(a1 + 34);
  a1[20] = v15;
  *((_OWORD *)a1 + 4) = v14;
  *a1 = 0;
  *((_QWORD *)a1 + 19) = 0;
  if (*(_QWORD *)(v9 + 40) != *(_QWORD *)(v9 + 32))
  {
    v17 = 0;
    do
    {
      v125.__r_.__value_.__r.__words[0] = v17;
      v18 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 96, v17, &v125)[3];
      v19 = v18[23];
      if ((v19 & 0x80u) == 0)
        v20 = v18[23];
      else
        v20 = *((_QWORD *)v18 + 1);
      v21 = *((unsigned __int8 *)a1 + 31);
      v22 = (char)v21;
      if ((v21 & 0x80u) != 0)
        v21 = *((_QWORD *)a1 + 2);
      if (v20 == v21)
      {
        if (v22 >= 0)
          v23 = v7;
        else
          v23 = *(unsigned __int8 **)v7;
        if ((v19 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v18, v23, *((_QWORD *)v18 + 1)))
            break;
        }
        else
        {
          if (!v18[23])
            break;
          while (*v18 == *v23)
          {
            ++v18;
            ++v23;
            if (!--v19)
              goto LABEL_26;
          }
        }
      }
      v17 = *a1 + 1;
      *a1 = v17;
      v9 = *((_QWORD *)a1 + 4);
    }
    while (v17 < (uint64_t)(*(_QWORD *)(v9 + 40) - *(_QWORD *)(v9 + 32)) >> 4);
  }
LABEL_26:
  v24 = *((_QWORD *)a1 + 4);
  if (*a1 == *a1 < (unint64_t)((uint64_t)(*(_QWORD *)(v24 + 40) - *(_QWORD *)(v24 + 32)) >> 4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v125);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24 + 136, v7, (__int128 **)&v125);
  v27 = (int *)*((_QWORD *)v25 + 5);
  v26 = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v133 = v27;
  v134 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  v30 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 40) - 16) + 104);
  v32 = *v30;
  v31 = (std::__shared_weak_count *)v30[1];
  v131 = v32;
  v132 = v31;
  if (v31)
  {
    v33 = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  if (v27[5] != 1)
  {
    v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v130, v27[5]);
    v120 = std::string::insert(&v130, 0, "invalid batch_n ");
    v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v121;
    v120->__r_.__value_.__l.__size_ = 0;
    v120->__r_.__value_.__r.__words[2] = 0;
    v120->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v119, &v125);
    __cxa_throw(v119, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v35 = *(_QWORD *)v10;
  LODWORD(v130.__r_.__value_.__l.__data_) = (*(uint64_t (**)(int *))(*(_QWORD *)v27 + 24))(v27);
  v129 = (*(uint64_t (**)(int *))(*(_QWORD *)v27 + 32))(v27);
  Espresso::abstract_blob_container::make(v35 + 16, (int *)&v130, &v129, &v125);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 22), (__int128 *)&v125);
  size = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
  if (v125.__r_.__value_.__l.__size_)
  {
    v37 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v39 = *((_QWORD *)a1 + 11);
  v40 = *(_OWORD *)(v133 + 2);
  v128 = 0;
  *(_OWORD *)__p = 0u;
  v126 = 0u;
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v40;
  v125.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
  v123 = 0;
  v124 = 0;
  (*(void (**)(uint64_t, std::string *, uint64_t *))(*(_QWORD *)v39 + 16))(v39, &v125, &v123);
  v41 = v124;
  if (v124)
  {
    v42 = (unint64_t *)&v124->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v44 = operator new(0x20uLL);
  v44[1] = 0;
  v44[2] = 0;
  *v44 = &off_1E2DC27F0;
  v45 = a1[18] + ((a1[18] / 0x7FFFFFFFu) | ((a1[18] / 0x7FFFFFFFu) << 31));
  if (v45 <= 1)
    v45 = 1;
  *((_DWORD *)v44 + 6) = v45;
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)(v44 + 3);
  v125.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 12), (__int128 *)&v125);
  v46 = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
  if (v125.__r_.__value_.__l.__size_)
  {
    v47 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *((float *)a1 + 16);
  v50 = a1[18];
  v51 = a1[17];
  v53 = (unsigned int *)*((_QWORD *)a1 + 6);
  v52 = (std::__shared_weak_count *)*((_QWORD *)a1 + 7);
  v122 = v52;
  if (v52)
  {
    v54 = (unint64_t *)&v52->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = v133[4];
  v57 = v133[5];
  v58 = v133[3] * v133[2];
  v59 = v58 * v56;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v125, v57 * v51 * v58 * v56, 1, 1, 1);
  v60 = v125.__r_.__value_.__r.__words[0];
  v61 = *(int *)(v125.__r_.__value_.__r.__words[0] + 8);
  if ((_DWORD)v61)
  {
    for (i = 0; i != v61; ++i)
      *(_BYTE *)(*(_QWORD *)(v60 + 16) + i) = 0;
  }
  if ((int)v57 >= 1)
  {
    v63 = 0;
    v64 = 0;
    if (v58 <= 1)
      v65 = 1;
    else
      v65 = v58;
    v66 = v50 + ((v50 / 0x7FFFFFFF) | ((v50 / 0x7FFFFFFF) << 31));
    if (v66 <= 1)
      v66 = 1;
    v67 = v59;
    v68 = v51 * (uint64_t)v59;
    do
    {
      *v53 = v66;
      if (v51 >= 1)
      {
        v69 = 0;
        v70 = v63;
        do
        {
          if (v69)
          {
            if (v56 >= 1)
            {
              v71 = 0;
              LODWORD(v72) = 0;
              do
              {
                if (v58)
                {
                  v72 = (int)v72;
                  v73 = v65;
                  do
                  {
                    v74 = 48271 * (*v53 % 0xADC8);
                    v75 = 3399 * (*v53 / 0xADC8);
                    v76 = v74 >= v75;
                    v77 = v74 - v75;
                    if (v76)
                      v78 = 0;
                    else
                      v78 = 0x7FFFFFFF;
                    v79 = v78 + v77;
                    *v53 = v79;
                    *(_BYTE *)(*(_QWORD *)(v60 + 16) + v70 + v72++) = (float)((float)((float)(v79 - 1) * 4.6566e-10)
                                                                            + 0.0) <= v49;
                    --v73;
                  }
                  while (v73);
                }
                ++v71;
              }
              while (v71 != v56);
            }
          }
          else if (v56 >= 1)
          {
            v80 = 0;
            LODWORD(v81) = 0;
            do
            {
              if (v58)
              {
                v81 = (int)v81;
                v82 = v65;
                do
                {
                  *(_BYTE *)(*(_QWORD *)(v60 + 16) + v70 + v81++) = 1;
                  --v82;
                }
                while (v82);
              }
              ++v80;
            }
            while (v80 != v56);
          }
          ++v69;
          v70 += v67;
        }
        while (v69 != v51);
      }
      ++v64;
      v63 += v68;
    }
    while (v64 != v57);
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 26), (__int128 *)&v125);
  v83 = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
  if (v125.__r_.__value_.__l.__size_)
  {
    v84 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v122)
  {
    v86 = (unint64_t *)&v122->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v88 = a1[17];
  v89 = *((_QWORD *)a1 + 17);
  v90 = *((_QWORD *)a1 + 18);
  v91 = (v90 - v89) >> 4;
  if (v88 <= v91)
  {
    if (v88 < v91)
    {
      v105 = v89 + 16 * v88;
      while (v90 != v105)
      {
        v90 -= 16;
        std::shared_ptr<void>::~shared_ptr[abi:ne180100](v90);
      }
      *((_QWORD *)a1 + 18) = v105;
    }
  }
  else
  {
    v92 = v88 - v91;
    v93 = *((_QWORD *)a1 + 19);
    if (v88 - v91 <= (v93 - v90) >> 4)
    {
      bzero(*((void **)a1 + 18), 16 * v92);
      *((_QWORD *)a1 + 18) = v90 + 16 * v92;
    }
    else
    {
      if ((v88 & 0x80000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      *((_QWORD *)&v126 + 1) = a1 + 38;
      v94 = v93 - v89;
      if (v94 >> 3 > v88)
        v88 = v94 >> 3;
      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
        v95 = 0xFFFFFFFFFFFFFFFLL;
      else
        v95 = v88;
      v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v95);
      v97 = &v96[16 * v91];
      v99 = &v96[16 * v98];
      *(_QWORD *)&v126 = v99;
      bzero(v97, 16 * v92);
      v100 = (std::string::size_type)&v97[16 * v92];
      v125.__r_.__value_.__r.__words[2] = v100;
      v102 = (_QWORD *)*((_QWORD *)a1 + 17);
      v101 = (_QWORD *)*((_QWORD *)a1 + 18);
      if (v101 == v102)
      {
        v104 = vdupq_n_s64((unint64_t)v101);
      }
      else
      {
        do
        {
          v103 = *((_OWORD *)v101 - 1);
          v101 -= 2;
          *((_OWORD *)v97 - 1) = v103;
          v97 -= 16;
          *v101 = 0;
          v101[1] = 0;
        }
        while (v101 != v102);
        v104 = *v16;
        v100 = v125.__r_.__value_.__r.__words[2];
        v99 = (char *)v126;
      }
      *((_QWORD *)a1 + 17) = v97;
      *((_QWORD *)a1 + 18) = v100;
      *(int64x2_t *)&v125.__r_.__value_.__r.__words[1] = v104;
      v106 = *((_QWORD *)a1 + 19);
      *((_QWORD *)a1 + 19) = v99;
      *(_QWORD *)&v126 = v106;
      v125.__r_.__value_.__r.__words[0] = v104.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v125);
    }
  }
  if (a1[17] >= 1)
  {
    v107 = 0;
    do
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v131 + 56))(&v125);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v16->i64[0] + 16 * v107, (__int128 *)&v125);
      v108 = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
      if (v125.__r_.__value_.__l.__size_)
      {
        v109 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      ++v107;
    }
    while (v107 < a1[17]);
  }
  v111 = v132;
  if (v132)
  {
    v112 = (unint64_t *)&v132->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v134;
  if (v134)
  {
    v115 = (unint64_t *)&v134->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  return a1;
}

void sub_191352704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;

  if (a24 < 0)
    operator delete(__p);
  if (a37 < 0)
  {
    operator delete(a32);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 136);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 120);
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a10);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a14);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a11);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a12);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a13);
      if (*(char *)(v37 + 31) < 0)
        operator delete(*a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  size_t v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = &off_1E2DA1250;
  *(_QWORD *)v10 = &off_1E2DBED50;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  v11 = a3 * (uint64_t)a2 * a4 * a5;
  v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_191352900(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<unsigned char,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1250;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<unsigned char,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1250;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned char,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::dropout_augment_lowmem::__forward(int *a1@<X0>, int64x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD v83[2];
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  int v89;
  __int128 v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  __int128 *v95;
  std::__shared_weak_count *v96;
  __int128 *v97;
  std::__shared_weak_count *v98;
  _DWORD *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;

  v6 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 32) + 16 * *a1) + 104);
  v7 = *v6;
  v8 = v6[1];
  v101 = *v6;
  v102 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v6 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 32) + 16 * *a1) + 104);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6, *((_QWORD *)a1 + 11), *((_QWORD *)a1 + 12));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  Espresso::net::__forward(*((_QWORD *)a1 + 4), a2, 0, (*a1 + 1));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 32) + 16 * *a1) + 104), v7, v8);
  v11 = *((_QWORD *)a1 + 4) + 136;
  v97 = (__int128 *)(a1 + 2);
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)a1 + 8, &v97);
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v99 = (_DWORD *)*((_QWORD *)v12 + 5);
  v100 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *((_QWORD *)a1 + 4);
  v91 = *a1 + 1;
  v95 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16 + 56, v91, &v91)[3];
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16 + 136, (unsigned __int8 *)v95, &v95);
  v18 = (std::__shared_weak_count *)*((_QWORD *)v17 + 6);
  v97 = (__int128 *)*((_QWORD *)v17 + 5);
  v98 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 40) - 16) + 104);
  v23 = *(__int128 **)v21;
  v22 = *(std::__shared_weak_count **)(v21 + 8);
  v95 = v23;
  v96 = v22;
  if (v22)
  {
    v24 = (unint64_t *)&v22->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (a1[17] >= 1)
  {
    v26 = 0;
    do
    {
      v27 = (std::__shared_weak_count *)*((_QWORD *)a1 + 14);
      v93 = *((_QWORD *)a1 + 13);
      v94 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      Espresso::dropout_multiply_closure::operator()((uint64_t)v17, a2, (std::__shared_weak_count **)a1 + 11, &v93, v99[2] * v26 * v99[3] * v99[4], (uint64_t)&v97);
      v30 = v94;
      if (v94)
      {
        v31 = (unint64_t *)&v94->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      Espresso::net::__forward(*((_QWORD *)a1 + 4), a2, (*a1 + 1), 0xFFFFFFFFLL);
      v17 = (char *)(*(uint64_t (**)(__int128 *, int64x2_t **, uint64_t))(*(_QWORD *)v95 + 40))(v95, a2, *((_QWORD *)a1 + 17) + 16 * v26++);
    }
    while (v26 < a1[17]);
  }
  if (*a2)
  {
    if (v33)
    {
      v34 = (std::__shared_weak_count *)a2[1];
      v91 = (unint64_t)v33;
      v92 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      (*(void (**)(void *))(*(_QWORD *)v33 + 40))(v33);
      if (v34)
      {
        v37 = (unint64_t *)&v34->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
  }
  v39 = v95;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v91, *((_DWORD *)v95 + 2), *((_DWORD *)v95 + 3), *((_DWORD *)v95 + 4), a1[17]);
  if (a1[17] >= 1)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 4 * *((_DWORD *)v39 + 3) * *((_DWORD *)v39 + 2) * *((_DWORD *)v39 + 4);
    v44 = v91;
    do
    {
      memcpy((void *)(*(_QWORD *)(v44 + 24) + v40), *(const void **)(*(_QWORD *)(*((_QWORD *)a1 + 17) + v41) + 24), v43);
      ++v42;
      v41 += 16;
      v40 += v43;
    }
    while (v42 < a1[17]);
  }
  (*(void (**)(__int128 *__return_ptr, __int128 *))(*(_QWORD *)v39 + 56))(&v90, v39);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &v90);
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v95 + 56))(&v90);
  v48 = a1 + 16;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3 + 16, &v90);
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v88 = *(_OWORD *)v48;
  v89 = v48[4];
  v86 = v91;
  v87 = v92;
  if (v92)
  {
    v52 = (unint64_t *)&v92->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = *(std::__shared_weak_count **)(a3 + 8);
  v84 = *(_QWORD *)a3;
  v85 = v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = *(std::__shared_weak_count **)(a3 + 24);
  v83[0] = *(_QWORD *)(a3 + 16);
  v83[1] = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  combine_dropout_augment_outputs((uint64_t)&v88, (uint64_t)&v86, (uint64_t)&v84, (uint64_t)v83, 1);
  if (v57)
  {
    v60 = (unint64_t *)&v57->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v62 = v85;
  if (v85)
  {
    v63 = (unint64_t *)&v85->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v87;
  if (v87)
  {
    v66 = (unint64_t *)&v87->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v92;
  if (v92)
  {
    v69 = (unint64_t *)&v92->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v96;
  if (v96)
  {
    v72 = (unint64_t *)&v96->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v98;
  if (v98)
  {
    v75 = (unint64_t *)&v98->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v100;
  if (v100)
  {
    v78 = (unint64_t *)&v100->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v102;
  if (v102)
  {
    v81 = (unint64_t *)&v102->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
}

void sub_1913530C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v14 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v14 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13 + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v14 - 96);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::crop_kernel::~crop_kernel(Espresso::MPSGraphEngine::Kernels::crop_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::crop_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel::~tensor_zero_pad_kernel(Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int64x2_t *v28;
  std::__shared_weak_count *v29;
  int64x2_t *v30;
  std::__shared_weak_count *v31;
  void *v32[2];
  char v33;
  std::string __p;
  _BYTE v35[24];
  _BYTE v36[32];
  std::__shared_weak_count *v37;
  int64x2_t *v38;
  std::__shared_weak_count *v39;
  void **v40;

  if (a3[1] - *a3 >= 0x81uLL)
  {
    v4 = *(std::__shared_weak_count **)(a2 + 8);
    v38 = *(int64x2_t **)a2;
    v39 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "[Dispatch::MPSGraph::tensor_zero_pad_kernel] unsupported: number of inputs > 2");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v32, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v7 = v37;
    if (v37)
    {
      v8 = (unint64_t *)&v37->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v40 = (void **)v36;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
    v40 = (void **)v35;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(v32[0]);
    v10 = v39;
    if (!v39)
      return 0;
    v11 = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_52;
  }
  if (a3[4] - a3[3] >= 0x41uLL)
  {
    v13 = *(std::__shared_weak_count **)(a2 + 8);
    v30 = *(int64x2_t **)a2;
    v31 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "[Dispatch::MPSGraph::tensor_zero_pad_kernel] unsupported: number of outputs > 1");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v32, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v30, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v16 = v37;
    if (v37)
    {
      v17 = (unint64_t *)&v37->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v40 = (void **)v36;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
    v40 = (void **)v35;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(v32[0]);
    v10 = v31;
    if (!v31)
      return 0;
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v19);
    while (__stlxr(v12 - 1, v19));
    goto LABEL_52;
  }
  if (*(_BYTE *)(a1 + 280))
    return 1;
  v21 = *(std::__shared_weak_count **)(a2 + 8);
  v28 = *(int64x2_t **)a2;
  v29 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "[Dispatch::MPSGraph::tensor_zero_pad_kernel] unsupported: nd_mode != 1");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v32, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v28, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v24 = v37;
  if (v37)
  {
    v25 = (unint64_t *)&v37->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v40 = (void **)v36;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
  v40 = (void **)v35;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v33 < 0)
    operator delete(v32[0]);
  v10 = v29;
  if (v29)
  {
    v27 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v27);
    while (__stlxr(v12 - 1, v27));
LABEL_52:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 0;
}

void sub_191353594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a19);
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_tensor_zero_pad_kernel::has_dynamic_top_shape(Espresso::generic_tensor_zero_pad_kernel *this, unint64_t a2)
{
  return a2 > 1;
}

const char *Espresso::generic_tensor_zero_pad_kernel::kernel_type_str(Espresso::generic_tensor_zero_pad_kernel *this)
{
  return "tensor_zero_pad";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::tensor_zero_pad_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel::~space_to_depth_kernel(Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 284);
}

void Espresso::analysis_to_preserve_mil_types::~analysis_to_preserve_mil_types(Espresso::analysis_to_preserve_mil_types *this)
{
  *(_QWORD *)this = &off_1E2D9A0C0;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2D9A0C0;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::analysis_to_preserve_mil_types::deserialize(uint64_t a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  (*(void (**)(_QWORD, __int128 **))(*(_QWORD *)*a2 + 32))(*a2, &v16);
  v4 = v16;
  v5 = v17;
  if (v16 != v17)
  {
    v6 = a1 + 8;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(*(_QWORD *)*a2 + 120))(&v14, *a2, v4);
      v7 = v14;
      std::string::basic_string[abi:ne180100]<0>(__p, "compute_path");
      LODWORD(v7) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
      v19 = v4;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, &v19)+ 10) = v7;
      if (v13 < 0)
        operator delete(__p[0]);
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
  __p[0] = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return 1;
}

void sub_191353858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void Espresso::analysis_to_preserve_mil_types::serialize(Espresso::analysis_to_preserve_mil_types *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  _QWORD *i;
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 4))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 3); i; i = (_QWORD *)*i)
    {
      v6 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      std::string::basic_string[abi:ne180100]<0>(__p, "json");
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v11, (uint64_t)v6, __p);
      if (v14 < 0)
        operator delete(__p[0]);
      v7 = v11;
      std::string::basic_string[abi:ne180100]<0>(__p, "compute_path");
      (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v7 + 160))(v7, __p, i + 5);
      if (v14 < 0)
        operator delete(__p[0]);
      (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a2 + 240))(*a2, i + 2, &v11);
      v8 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1913539F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::~factory_t(Espresso::generic_factory_t *a1)
{
  Espresso::generic_factory_t::~generic_factory_t(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::generic_serdes_object>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::generic_serdes_object>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::generic_serdes_object>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANECompilerEngine::chop_topk_kernel::~chop_topk_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_topk_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::chop_topk_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  int64x2_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t is_valid_for_engine;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  int64x2_t *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int64x2_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  int64x2_t *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  const __CFString *v51;
  std::string::size_type v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  Espresso::base_kernel::validate_for_engine_args_t *v58;
  int v59;
  const __CFString *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  BOOL v75;
  unint64_t *v76;
  unint64_t v77;
  Espresso::base_kernel::validate_for_engine_args_t *v78;
  _OWORD *v79;
  char v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::string *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *size;
  unint64_t *v92;
  unint64_t v93;
  uint64_t *v94;
  int64x2_t *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  void *v102;
  uint64_t *v103;
  std::string::size_type v104;
  uint64_t v105;
  const __CFString *v106;
  int v107;
  _OWORD *v108;
  int v109;
  int v110;
  int v111;
  Espresso::base_kernel::validate_for_engine_args_t *v112;
  int v113;
  const __CFString *v114;
  const __CFString *vector_dimension;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  _OWORD *v119;
  uint64_t v120;
  __int128 v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  int v125;
  int v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::string *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  int64x2_t *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  void *v153;
  int64x2_t *v154;
  std::__shared_weak_count *v155;
  _QWORD v156[2];
  _OWORD v157[2];
  uint64_t v158;
  void *v159;
  void *v160;
  uint64_t v161;
  Espresso::base_kernel::validate_for_engine_args_t *v162;
  std::__shared_weak_count *v163;
  std::string v164;
  std::string v165;
  int64x2_t *v166;
  std::__shared_weak_count *v167;
  _OWORD v168[2];
  uint64_t v169;
  void *v170;
  void *v171;
  uint64_t v172;
  Espresso::base_kernel::validate_for_engine_args_t *v173;
  std::__shared_weak_count *v174;
  void **v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  void **v181;
  std::__shared_weak_count *v182;
  void *v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  std::string v187;
  _BYTE v188[24];
  _BYTE v189[32];
  std::__shared_weak_count *v190;
  int64x2_t *v191;
  std::__shared_weak_count *v192;
  std::string v193;
  int64x2_t *v194[2];
  int64x2_t *v195;
  uint64_t v196;
  int64x2_t *v197;
  uint64_t v198;
  int64x2_t *v199;
  uint64_t v200;
  int64x2_t *v201;
  uint64_t v202;
  _QWORD v203[2];
  Espresso::base_kernel::validate_for_engine_args_t *v204;
  std::__shared_weak_count *v205;
  void **v206;
  std::string __p;
  _BYTE v208[24];
  _BYTE v209[32];
  std::__shared_weak_count *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = (_OWORD *)*((_QWORD *)a3 + 6);
  v205 = 0;
  v204 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v205 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v6 + 9);
    v204 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_c(v9, v10))
  {
    v11 = *a2;
    v12 = (std::__shared_weak_count *)a2[1];
    v203[0] = v11;
    v203[1] = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    is_valid_for_engine = Espresso::ANECompilerEngine::mix_topk_kernel::is_valid_for_engine(a1, (uint64_t)v203, a3);
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    goto LABEL_70;
  }
  if (!*(_BYTE *)(a1 + 285))
  {
    v27 = a2[1];
    v201 = *a2;
    v202 = (uint64_t)v27;
    if (v27)
    {
      v28 = &v27->u64[1];
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    std::string::basic_string[abi:ne180100]<0>(&v187, "TopK kernel: single_axis_topk required to run on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v187, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v201, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v30 = v210;
    if (v210)
    {
      v31 = (unint64_t *)&v210->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v183 = v209;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    v183 = v208;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    is_valid_for_engine = v202;
    if (!v202)
      goto LABEL_70;
    v33 = (unint64_t *)(v202 + 8);
    do
      v26 = __ldaxr(v33);
    while (__stlxr(v26 - 1, v33));
LABEL_67:
    if (!v26)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)is_valid_for_engine + 16))(is_valid_for_engine);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)is_valid_for_engine);
    }
    goto LABEL_69;
  }
  if (!*(_BYTE *)(a1 + 293))
  {
    v34 = a2[1];
    v199 = *a2;
    v200 = (uint64_t)v34;
    if (v34)
    {
      v35 = &v34->u64[1];
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    std::string::basic_string[abi:ne180100]<0>(&v187, "TopK kernel: sort must be true for TopK to run on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v187, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v199, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v37 = v210;
    if (v210)
    {
      v38 = (unint64_t *)&v210->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v183 = v209;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    v183 = v208;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    is_valid_for_engine = v200;
    if (!v200)
      goto LABEL_70;
    v40 = (unint64_t *)(v200 + 8);
    do
      v26 = __ldaxr(v40);
    while (__stlxr(v26 - 1, v40));
    goto LABEL_67;
  }
  if (!*(_BYTE *)(a1 + 284) && (*(_DWORD *)(a1 + 288) & 0x80000000) != 0)
  {
    v95 = a2[1];
    v197 = *a2;
    v198 = (uint64_t)v95;
    if (v95)
    {
      v96 = &v95->u64[1];
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    std::string::basic_string[abi:ne180100]<0>(&v187, "TopK kernel: nd_mode is false but axis is less than zero.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v187, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v197, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v98 = v210;
    if (v210)
    {
      v99 = (unint64_t *)&v210->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v183 = v209;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    v183 = v208;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    is_valid_for_engine = v198;
    if (!v198)
      goto LABEL_70;
    v101 = (unint64_t *)(v198 + 8);
    do
      v26 = __ldaxr(v101);
    while (__stlxr(v26 - 1, v101));
    goto LABEL_67;
  }
  v18 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v204, 0);
  if (v18 >= 8 || ((0x97u >> v18) & 1) == 0)
  {
    v19 = a2[1];
    v195 = *a2;
    v196 = (uint64_t)v19;
    if (v19)
    {
      v20 = &v19->u64[1];
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    std::string::basic_string[abi:ne180100]<0>(&v187, "TopK kernel: invalid compute path for input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v187, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v195, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v22 = v210;
    if (v210)
    {
      v23 = (unint64_t *)&v210->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v183 = v209;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    v183 = v208;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    is_valid_for_engine = v196;
    if (!v196)
      goto LABEL_70;
    v25 = (unint64_t *)(v196 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    goto LABEL_67;
  }
  v153 = *(&off_1E2DD1EC8 + v18);
  if (*(_DWORD *)(a1 + 280) != -1)
  {
    v45 = operator new(8uLL);
    *v45 = *MEMORY[0x1E0C9AE40];
    v46 = v45 + 1;
    if (*(_BYTE *)(a1 + 294))
    {
      v47 = operator new(0x10uLL);
      v46 = v47 + 2;
      v48 = *MEMORY[0x1E0C9AE50];
      *v47 = *v45;
      v47[1] = v48;
      operator delete(v45);
      v45 = v47;
    }
    v152 = v45;
    v49 = v45;
    while (1)
    {
      v50 = *v49;
      ANECTopKLayerDescInitialize();
      v51 = CFSTR("Min");
      if (!*(_BYTE *)(a1 + 292))
        v51 = CFSTR("Max");
      v52 = *(int *)(a1 + 280);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
      __p.__r_.__value_.__l.__size_ = v52;
      *(_OWORD *)&v208[8] = xmmword_191A92A30;
      v53 = *(_DWORD *)(a1 + 288);
      v54 = *(_QWORD *)a3;
      v55 = *(_DWORD *)(*(_QWORD *)a3 + 20);
      if ((v53 & 0x80000000) != 0)
      {
        v56 = *(_DWORD *)(*(_QWORD *)a3 + 20);
        if (v55 == -1)
        {
          if (*(_DWORD *)(v54 + 16) == 1)
            v56 = 4;
          else
            v56 = 5;
        }
        v53 += v56;
      }
      v57 = *(_DWORD *)(*(_QWORD *)a3 + 20);
      if (v55 == -1)
      {
        if (*(_DWORD *)(v54 + 16) == 1)
          v57 = 4;
        else
          v57 = 5;
      }
      if ((v53 & 0x80000000) != 0 || (int)v53 > v57)
      {
LABEL_186:
        v102 = v152;
        goto LABEL_187;
      }
      if (*(_BYTE *)(a1 + 284))
      {
        if (v55 == -1)
        {
          if (*(_DWORD *)(v54 + 16) == 1)
            v55 = 4;
          else
            v55 = 5;
        }
        v58 = v204;
        v59 = *((unsigned __int8 *)v204 + 1281);
        v60 = CFSTR("Height");
        switch(v55 + ~v53)
        {
          case 0u:
            goto LABEL_108;
          case 1u:
            goto LABEL_119;
          case 2u:
            goto LABEL_112;
          case 3u:
            goto LABEL_115;
          case 4u:
            goto LABEL_109;
          default:
            goto LABEL_284;
        }
      }
      if (v55 == -1)
      {
        if (*(_DWORD *)(v54 + 16) == 1)
          v55 = 4;
        else
          v55 = 5;
      }
      else if (v55 > 5)
      {
        goto LABEL_284;
      }
      if (v53 > 4)
LABEL_284:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      v58 = v204;
      v59 = *((unsigned __int8 *)v204 + 1281);
      v60 = CFSTR("Height");
      switch(v53)
      {
        case 0u:
LABEL_108:
          v60 = CFSTR("Width");
          break;
        case 1u:
          break;
        case 2u:
LABEL_112:
          if (v55 == 5 && v59)
            goto LABEL_114;
          goto LABEL_117;
        case 3u:
LABEL_115:
          if (v55 != 5 || !v59)
            goto LABEL_118;
LABEL_117:
          v60 = CFSTR("Channel");
          break;
        case 4u:
LABEL_109:
          if (v55 == 5 && v59)
          {
            v59 = 1;
LABEL_118:
            v60 = CFSTR("Batch");
          }
          else
          {
LABEL_114:
            v60 = CFSTR("Depth");
          }
          break;
        default:
          goto LABEL_284;
      }
LABEL_119:
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v60;
      v212 = v50;
      ANECTensorDescInitialize();
      Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v164, (NSString *)(a1 + 296), v9);
      v206 = 0;
      v180 = 0;
      v61 = v205;
      v162 = v58;
      v163 = v205;
      if (v205)
      {
        v62 = (unint64_t *)&v205->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v64 = *(_QWORD *)a3;
      v65 = *(_QWORD *)(*(_QWORD *)a3 + 32);
      v66 = *(_OWORD *)(*(_QWORD *)a3 + 16);
      v157[0] = *(_OWORD *)*(_QWORD *)a3;
      v157[1] = v66;
      v158 = v65;
      v160 = 0;
      v161 = 0;
      v159 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v159, *(const void **)(v64 + 40), *(_QWORD *)(v64 + 48), (uint64_t)(*(_QWORD *)(v64 + 48) - *(_QWORD *)(v64 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v175, v58, (const Espresso::layer_shape *)v157, 1);
      if (v159)
      {
        v160 = v159;
        operator delete(v159);
      }
      if (v61)
      {
        v67 = (unint64_t *)&v61->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      *(_QWORD *)&v69 = v177;
      *((_QWORD *)&v69 + 1) = v178;
      v185 = v69;
      v183 = v153;
      v186 = v176;
      *(_QWORD *)&v69 = (int)v175;
      *((_QWORD *)&v69 + 1) = SHIDWORD(v175);
      v184 = v69;
      v70 = ANECValidateTopKLayer();
      if (!v70)
        goto LABEL_140;
      v71 = (std::__shared_weak_count *)a2[1];
      v156[0] = *a2;
      v156[1] = v71;
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      v74 = Espresso::ANECompilerEngine::mix_topk_kernel::is_valid_for_engine(a1, (uint64_t)v156, a3);
      v75 = v74;
      if (!v71)
        goto LABEL_137;
      v76 = (unint64_t *)&v71->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        if (v75)
        {
LABEL_138:
          v78 = v204;
          std::string::basic_string[abi:ne180100]<0>(&v187, "ane.force_generic_topk");
          v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
          v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v78 + 59, &v187, (uint64_t)&std::piecewise_construct, &v193);
          MEMORY[0x19401C808]((char *)v79 + 56, "1");
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v187.__r_.__value_.__l.__data_);
LABEL_140:
          v80 = 1;
          goto LABEL_162;
        }
      }
      else
      {
LABEL_137:
        if (v74)
          goto LABEL_138;
      }
      v81 = (std::__shared_weak_count *)a2[1];
      v154 = *a2;
      v155 = v81;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      std::to_string(&v165, v70);
      v84 = std::string::insert(&v165, 0, "TopK kernel: ANECValidateTopKLayer failed with status ");
      v193 = *v84;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v187, (__int128 *)&v193, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v154, (Espresso::base_kernel::validate_for_engine_warning_t *)&v187);
      v85 = v190;
      if (v190)
      {
        v86 = (unint64_t *)&v190->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v181 = (void **)v189;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v181);
      v181 = (void **)v188;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v181);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v187.__r_.__value_.__l.__data_);
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v193.__r_.__value_.__l.__data_);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      v88 = v155;
      if (v155)
      {
        v89 = (unint64_t *)&v155->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v80 = 0;
LABEL_162:
      size = (std::__shared_weak_count *)v164.__r_.__value_.__l.__size_;
      if (v164.__r_.__value_.__l.__size_)
      {
        v92 = (unint64_t *)(v164.__r_.__value_.__l.__size_ + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if ((v80 & 1) == 0)
        goto LABEL_186;
      if (++v49 == v46)
      {
        v94 = (uint64_t *)v152;
        goto LABEL_257;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 284))
  {
    v140 = a2[1];
    v194[0] = *a2;
    v194[1] = v140;
    if (v140)
    {
      v141 = &v140->u64[1];
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
    }
    std::string::basic_string[abi:ne180100]<0>(&v187, "TopK kernel: unsupported configuration (nd_mode == false).");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v187, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v194, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v194);
    goto LABEL_69;
  }
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C9AE40];
  std::vector<__CFBoolean const*>::vector[abi:ne180100](&v193, &__p, 1uLL);
  if (*(_BYTE *)(a1 + 294))
    std::vector<__CFBoolean const*>::push_back[abi:ne180100]((void **)&v193.__r_.__value_.__l.__data_);
  v104 = v193.__r_.__value_.__l.__size_;
  v103 = (uint64_t *)v193.__r_.__value_.__r.__words[0];
  if (v193.__r_.__value_.__r.__words[0] == v193.__r_.__value_.__l.__size_)
  {
LABEL_255:
    if (v103)
    {
      v193.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
      v94 = v103;
LABEL_257:
      operator delete(v94);
    }
    is_valid_for_engine = 1;
    goto LABEL_70;
  }
  while (2)
  {
    v105 = *v103;
    ANECSortLayerDescInitialize();
    v106 = CFSTR("Ascending");
    if (!*(_BYTE *)(a1 + 292))
      v106 = CFSTR("Descending");
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
    v107 = *(_DWORD *)(a1 + 288);
    v108 = *(_OWORD **)a3;
    v109 = *(_DWORD *)(*(_QWORD *)a3 + 20);
    if (v107 < 0)
    {
      v110 = *(_DWORD *)(*(_QWORD *)a3 + 20);
      if (v109 == -1)
      {
        if (*((_DWORD *)v108 + 4) == 1)
          v110 = 4;
        else
          v110 = 5;
      }
      v107 += v110;
    }
    if (v109 == -1)
    {
      if (*((_DWORD *)v108 + 4) == 1)
        v109 = 4;
      else
        v109 = 5;
    }
    if (v107 < 0)
LABEL_285:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    v111 = v109 + ~v107;
    v112 = v204;
    v113 = *((unsigned __int8 *)v204 + 1281);
    v114 = CFSTR("Height");
    switch(v111)
    {
      case 0:
        v114 = CFSTR("Width");
        goto LABEL_216;
      case 1:
        goto LABEL_216;
      case 2:
        if (v109 == 5 && *((_BYTE *)v204 + 1281))
          goto LABEL_212;
        goto LABEL_215;
      case 3:
        v114 = CFSTR("Batch");
        if (v109 == 5 && *((_BYTE *)v204 + 1281))
LABEL_215:
          v114 = CFSTR("Channel");
        goto LABEL_216;
      case 4:
        if (v109 != 5 || (v114 = CFSTR("Batch"), !*((_BYTE *)v204 + 1281)))
LABEL_212:
          v114 = CFSTR("Depth");
LABEL_216:
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
        if (vector_dimension)
        {
          *(_OWORD *)v208 = xmmword_191A92A30;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)vector_dimension;
          v211 = v105;
          ANECTensorDescInitialize();
          Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v181, (NSString *)(a1 + 296), v9);
          v179 = 0;
          v180 = 0;
          v116 = v205;
          v173 = v112;
          v174 = v205;
          if (v205)
          {
            v117 = (unint64_t *)&v205->__shared_owners_;
            do
              v118 = __ldxr(v117);
            while (__stxr(v118 + 1, v117));
          }
          v119 = *(_OWORD **)a3;
          v120 = *(_QWORD *)(*(_QWORD *)a3 + 32);
          v121 = *(_OWORD *)(*(_QWORD *)a3 + 16);
          v168[0] = *(_OWORD *)*(_QWORD *)a3;
          v168[1] = v121;
          v169 = v120;
          v171 = 0;
          v172 = 0;
          v170 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v170, *((const void **)v119 + 5), *((_QWORD *)v119 + 6), (uint64_t)(*((_QWORD *)v119 + 6) - *((_QWORD *)v119 + 5)) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v175, v112, (const Espresso::layer_shape *)v168, 1);
          if (v170)
          {
            v171 = v170;
            operator delete(v170);
          }
          if (v116)
          {
            v122 = (unint64_t *)&v116->__shared_owners_;
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          *(_QWORD *)&v124 = v177;
          *((_QWORD *)&v124 + 1) = v178;
          v185 = v124;
          v183 = v153;
          v186 = v176;
          *(_QWORD *)&v124 = (int)v175;
          *((_QWORD *)&v124 + 1) = SHIDWORD(v175);
          v184 = v124;
          v125 = ANECValidateSortLayer();
          v126 = v125;
          if (v125)
          {
            v127 = (std::__shared_weak_count *)a2[1];
            v166 = *a2;
            v167 = v127;
            if (v127)
            {
              v128 = (unint64_t *)&v127->__shared_owners_;
              do
                v129 = __ldxr(v128);
              while (__stxr(v129 + 1, v128));
            }
            std::to_string(&v164, v125);
            v130 = std::string::insert(&v164, 0, "TopK kernel: ANECValidateSortLayer failed with status ");
            v165 = *v130;
            v130->__r_.__value_.__l.__size_ = 0;
            v130->__r_.__value_.__r.__words[2] = 0;
            v130->__r_.__value_.__r.__words[0] = 0;
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v187, (__int128 *)&v165, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v166, (Espresso::base_kernel::validate_for_engine_warning_t *)&v187);
            v131 = v190;
            if (v190)
            {
              v132 = (unint64_t *)&v190->__shared_owners_;
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            v206 = (void **)v189;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v206);
            v206 = (void **)v188;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v206);
            if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v187.__r_.__value_.__l.__data_);
            if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v165.__r_.__value_.__l.__data_);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v164.__r_.__value_.__l.__data_);
            v134 = v167;
            if (v167)
            {
              v135 = (unint64_t *)&v167->__shared_owners_;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
          }
          v137 = v182;
          if (v182)
          {
            v138 = (unint64_t *)&v182->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          if (v126)
            goto LABEL_282;
          if (++v103 == (uint64_t *)v104)
          {
            v103 = (uint64_t *)v193.__r_.__value_.__r.__words[0];
            goto LABEL_255;
          }
          continue;
        }
        v143 = (std::__shared_weak_count *)a2[1];
        v191 = *a2;
        v192 = v143;
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
        }
        std::string::basic_string[abi:ne180100]<0>(&v183, "TopK kernel: unsupported input shape, expect size 1 for vector dimension.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v187, (__int128 *)&v183, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v191, (Espresso::base_kernel::validate_for_engine_warning_t *)&v187);
        v146 = v190;
        if (v190)
        {
          v147 = (unint64_t *)&v190->__shared_owners_;
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        v175 = (void **)v189;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v175);
        v175 = (void **)v188;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v175);
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
        if (SHIBYTE(v184) < 0)
          operator delete(v183);
        v149 = v192;
        if (v192)
        {
          v150 = (unint64_t *)&v192->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
LABEL_282:
        v102 = (void *)v193.__r_.__value_.__r.__words[0];
        if (v193.__r_.__value_.__r.__words[0])
        {
          v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
LABEL_187:
          operator delete(v102);
        }
LABEL_69:
        is_valid_for_engine = 0;
LABEL_70:

        v41 = v205;
        if (v205)
        {
          v42 = (unint64_t *)&v205->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        return is_valid_for_engine;
      default:
        goto LABEL_285;
    }
  }
}

void sub_191354D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a70;
  void *v70;
  void *v72;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a70);
  if (a64 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  v72 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v72;
    operator delete(v72);
  }

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_topk_kernel::has_dynamic_top_shape(Espresso::generic_topk_kernel *this, unint64_t a2)
{
  return a2 > 1;
}

const char *Espresso::generic_topk_kernel::kernel_type_str(Espresso::generic_topk_kernel *this)
{
  return "topk";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::topk_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::chop_topk_kernel::compile(Espresso::ANECompilerEngine::chop_topk_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  NSString *v19;
  _BOOL4 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t i;
  __CFString *v31;
  void *v32;
  void *v33;
  const __CFString *v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  int v40;
  unint64_t v41;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v42;
  unsigned int v43;
  const __CFString *v44;
  uint64_t v45;
  uint64_t n;
  __CFString *v47;
  void *v48;
  void *v49;
  const __CFString *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  const __CFString *v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  __int128 *v61;
  __int128 v62;
  unsigned int v63;
  __int128 *j;
  __int128 *v65;
  char *v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _OWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  int64x2_t *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  NSString *v93;
  BOOL v94;
  const __CFString *v95;
  unint64_t v96;
  unsigned int v97;
  const __CFString *v98;
  unint64_t *v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t m;
  uint64_t v104;
  uint64_t k;
  __CFString *v106;
  void *v107;
  void *v108;
  const __CFString *v109;
  unsigned int v110;
  const __CFString *v111;
  __CFString *v112;
  void *v113;
  Espresso::ANECompilerEngine::compiler *v114;
  uint64_t v115;
  uint64_t ii;
  __CFString *v117;
  void *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  __int128 v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  const char *v138;
  __int128 *v139;
  int v140;
  Espresso::ANECompilerEngine *v141;
  void *v142;
  Espresso::ANECompilerEngine::compiler *v143;
  Espresso::ANECompilerEngine::chop_topk_kernel *v144;
  std::__shared_weak_count *v145;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v146;
  _OWORD v147[2];
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  _OWORD *v158;
  unint64_t v159;
  std::string v160;
  void *v161[2];
  _OWORD v162[2];
  __int128 v163;
  int v164;
  uint64_t v165;
  int64x2_t *v166;
  std::__shared_weak_count *v167;
  _BYTE v168[32];
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  void *v172;
  char v173;
  id v174;
  __CFString *v175;
  id v176[2];
  std::string __p;
  uint64_t v178;
  uint64_t v179;
  _BYTE v180[32];
  void *v181;
  char v182;
  id v183;
  __CFString *v184;
  id v185[3];
  std::__shared_weak_count *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  int64x2_t *v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  __int128 *v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  const __CFString *v203;
  const __CFString *v204;
  void **v205[3];

  v190 = 0;
  v189 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v190 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v189 = v8) == 0))
  {
    v138 = "Inconsistent state: null network";
    goto LABEL_279;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v138 = "Inconsistent state: blob_storage";
LABEL_279:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v138);
  }
  v145 = v7;
  __p.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)__p.__r_.__value_.__l.__data_, (__int128 **)&__p);
  v11 = *((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v187 = v11;
  v188 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)&__p);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v185[2] = *((id *)v14 + 5);
  v186 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v146 = a3;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ((Espresso::ANECompilerEngine::is_mix_c((Espresso::ANECompilerEngine *)v18, v19) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v168, "ane.force_generic_topk");
    std::string::basic_string[abi:ne180100]<0>(v161, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)v168, (uint64_t)v161, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = __p.__r_.__value_.__l.__size_ == 1 && *__p.__r_.__value_.__l.__data_ == 49;
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1 && __p.__r_.__value_.__s.__data_[0] == 49;
    }
    if (SBYTE7(v162[0]) < 0)
      operator delete(v161[0]);
    if ((v168[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v168);
      if (v20)
        goto LABEL_24;
    }
    else if (v20)
    {
      goto LABEL_24;
    }
    v144 = this;
    if (*((_DWORD *)this + 70) != -1)
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, (id *)v146);
      v29 = v178;
      for (i = v179; i != v29; i -= 24)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
      }
      v31 = v184;
      v179 = v29;
      v184 = CFSTR("TopK");

      v32 = (void *)objc_opt_new();
      v142 = v32;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)v144 + 70));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "setObject:forKeyedSubscript:", v33, CFSTR("K"));

      if (*((_BYTE *)v144 + 292))
        v34 = CFSTR("Min");
      else
        v34 = CFSTR("Max");
      objc_msgSend(v32, "setObject:forKeyedSubscript:", v34, CFSTR("Type"));
      v35 = *((_DWORD *)v144 + 72);
      Espresso::abstract_blob_container::shape(v168, v11);
      v36 = *(_DWORD *)&v168[20];
      if (*(_DWORD *)&v168[16] == 1)
        v37 = 4;
      else
        v37 = 5;
      if (*(_DWORD *)&v168[20] == -1)
        v36 = v37;
      v38 = v36;
      if ((_QWORD)v170)
      {
        *((_QWORD *)&v170 + 1) = v170;
        operator delete((void *)v170);
      }
      if (v35 >= 0 || *((_BYTE *)v144 + 284) == 0)
        v40 = 0;
      else
        v40 = v38;
      v41 = (v40 + v35);
      v141 = (Espresso::ANECompilerEngine *)v41;
      if (*((_BYTE *)v144 + 284))
      {
        v42 = v146;
        if ((v41 & 0x80000000) == 0 && v41 < v38 && v38 <= 5)
        {
          v43 = v38 + ~(_DWORD)v41;
          if (v43 <= 4)
          {
            v44 = CFSTR("Height");
            switch(v43)
            {
              case 0u:
                goto LABEL_91;
              case 1u:
                goto LABEL_101;
              case 2u:
                goto LABEL_95;
              case 3u:
                goto LABEL_98;
              case 4u:
                goto LABEL_92;
              default:
                break;
            }
          }
        }
      }
      else
      {
        v42 = v146;
        if (v38 <= 5 && v41 <= 4)
        {
          v44 = CFSTR("Height");
          switch((int)v41)
          {
            case 0:
LABEL_91:
              v44 = CFSTR("Width");
              goto LABEL_101;
            case 1:
              goto LABEL_101;
            case 2:
LABEL_95:
              if ((_DWORD)v38 == 5 && *(_BYTE *)(v8 + 1281))
                goto LABEL_97;
              goto LABEL_100;
            case 3:
LABEL_98:
              v44 = CFSTR("Batch");
              if ((_DWORD)v38 == 5 && *(_BYTE *)(v8 + 1281))
LABEL_100:
                v44 = CFSTR("Channel");
              goto LABEL_101;
            case 4:
LABEL_92:
              if ((_DWORD)v38 == 5 && *(_BYTE *)(v8 + 1281))
                v44 = CFSTR("Batch");
              else
LABEL_97:
                v44 = CFSTR("Depth");
LABEL_101:
              objc_msgSend(v32, "setObject:forKeyedSubscript:", v44, CFSTR("SortDimension"));
              objc_msgSend(v32, "setObject:forKeyedSubscript:", &unk_1E2DEDF80, CFSTR("SortIndices"));
              Espresso::abstract_blob_container::shape(v168, v11);
              if ((_QWORD)v170)
              {
                *((_QWORD *)&v170 + 1) = v170;
                operator delete((void *)v170);
              }
              objc_msgSend(v32, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("Indices"));
              objc_storeStrong(v185, v32);
              Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);
              v166 = 0;
              v167 = 0;
              v163 = 0u;
              *(_OWORD *)v161 = 0u;
              memset(v162, 0, sizeof(v162));
              v164 = 1;
              v165 = 0;
              v57 = *(unsigned __int8 *)(v8 + 1281);
              Espresso::abstract_blob_container::shape(v168, v11);
              v58 = *(_DWORD *)&v168[20];
              if (*(_DWORD *)&v168[16] == 1)
                v59 = 4;
              else
                v59 = 5;
              if (*(_DWORD *)&v168[20] == -1)
                v58 = v59;
              v140 = v58;
              if ((_QWORD)v170)
              {
                *((_QWORD *)&v170 + 1) = v170;
                operator delete((void *)v170);
              }
              v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
              v61 = (__int128 *)*((_QWORD *)v42 + 6);
              if (*((char *)v61 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)v61, *((_QWORD *)v61 + 1));
              }
              else
              {
                v62 = *v61;
                v160.__r_.__value_.__r.__words[2] = *((_QWORD *)v61 + 2);
                *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v62;
              }
              if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v8 + 360), &v160))
              {
                v63 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at(v8 + 352, &v160) + 8);
                if (v63 == -1)
                  v60 = 1;
                else
                  v60 = v63;
              }
              if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v160.__r_.__value_.__l.__data_);
              v143 = a2;
              if (v60 >= 8 || ((0x97u >> v60) & 1) == 0)
                Espresso::throw_exception_selector<Espresso::generic_error>("TopK kernel: invalid compute path for input.");
              v139 = (__int128 *)*(&off_1E2DD1EC8 + v60);
              v157 = 0;
              v158 = 0;
              v159 = 0;
              v65 = (__int128 *)*((_QWORD *)v42 + 6);
              for (j = (__int128 *)*((_QWORD *)v42 + 7); v65 != j; v65 = (__int128 *)((char *)v65 + 24))
              {
                v199 = v65;
                v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v65, &v199);
                Espresso::abstract_blob_container::shape(v168, *((_QWORD *)v66 + 5));
                v67 = v158;
                if ((unint64_t)v158 >= v159)
                {
                  v70 = ((uint64_t)v158 - v157) >> 6;
                  v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 58)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v72 = v159 - v157;
                  if ((uint64_t)(v159 - v157) >> 5 > v71)
                    v71 = v72 >> 5;
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFC0)
                    v73 = 0x3FFFFFFFFFFFFFFLL;
                  else
                    v73 = v71;
                  *((_QWORD *)&v201 + 1) = &v159;
                  v74 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v73);
                  v75 = &v74[4 * v70];
                  v199 = v74;
                  *(_QWORD *)&v200 = v75;
                  *(_QWORD *)&v201 = &v74[4 * v76];
                  v77 = *(_OWORD *)&v168[16];
                  v78 = v169;
                  *v75 = *(_OWORD *)v168;
                  v75[1] = v77;
                  *((_QWORD *)v75 + 4) = v78;
                  *((_QWORD *)v75 + 5) = 0;
                  *((_QWORD *)v75 + 6) = 0;
                  *((_QWORD *)v75 + 7) = 0;
                  *(__int128 *)((char *)v75 + 40) = v170;
                  *((_QWORD *)v75 + 7) = v171;
                  v170 = 0uLL;
                  v171 = 0;
                  *((_QWORD *)&v200 + 1) = v75 + 4;
                  std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(&v157, &v199);
                  v79 = v158;
                  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v199);
                  v158 = v79;
                  if ((_QWORD)v170)
                  {
                    *((_QWORD *)&v170 + 1) = v170;
                    operator delete((void *)v170);
                  }
                }
                else
                {
                  v68 = *(_OWORD *)&v168[16];
                  v69 = v169;
                  *v158 = *(_OWORD *)v168;
                  v67[1] = v68;
                  *((_QWORD *)v67 + 4) = v69;
                  *((_QWORD *)v67 + 5) = 0;
                  *((_QWORD *)v67 + 6) = 0;
                  *((_QWORD *)v67 + 7) = 0;
                  *(_OWORD *)((char *)v67 + 40) = v170;
                  *((_QWORD *)v67 + 7) = v171;
                  v170 = 0uLL;
                  v171 = 0;
                  v158 = v67 + 4;
                }
              }
              v152 = v8;
              v153 = v145;
              v80 = (unint64_t *)&v145->__shared_owners_;
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
              v82 = *(_QWORD *)(v157 + 32);
              v83 = *(_OWORD *)(v157 + 16);
              v147[0] = *(_OWORD *)v157;
              v147[1] = v83;
              v148 = v82;
              v149 = 0;
              v150 = 0;
              v151 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v149, *(const void **)(v157 + 40), *(_QWORD *)(v157 + 48), (uint64_t)(*(_QWORD *)(v157 + 48) - *(_QWORD *)(v157 + 40)) >> 2);
              Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v154, (const Espresso::net *)v8, (const Espresso::layer_shape *)v147, 1);
              if (v149)
              {
                v150 = v149;
                operator delete(v149);
              }
              do
                v84 = __ldaxr(v80);
              while (__stlxr(v84 - 1, v80));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                std::__shared_weak_count::__release_weak(v145);
              }
              v86 = v166;
              v85 = v167;
              if (v167)
              {
                v87 = (unint64_t *)&v167->__shared_owners_;
                do
                  v88 = __ldxr(v87);
                while (__stxr(v88 + 1, v87));
              }
              v89 = v154;
              v90 = v155;
              v91 = v156;
              v92 = v18;
              if ((Espresso::ANECompilerEngine::is_mix_c((Espresso::ANECompilerEngine *)v92, v93) & 1) == 0
                && *((_DWORD *)v144 + 70) == 1
                && *((_BYTE *)v144 + 294))
              {
                v94 = 0;
                v95 = CFSTR("Min");
                if (!*((_BYTE *)v144 + 292))
                  v95 = CFSTR("Max");
                v203 = v95;
                v96 = (v140 & (*((int *)v144 + 72) >> 31)) + *((_DWORD *)v144 + 72);
                if ((int)v96 <= v140 && (v96 & 0x80000000) == 0)
                {
                  if (*((_BYTE *)v144 + 284))
                  {
                    if (v96 < v140 && v140 <= 5)
                    {
                      v97 = v140 + ~(_DWORD)v96;
                      if (v97 <= 4)
                      {
                        v98 = CFSTR("Height");
                        switch(v97)
                        {
                          case 0u:
                            goto LABEL_243;
                          case 1u:
                            goto LABEL_253;
                          case 2u:
                            goto LABEL_247;
                          case 3u:
                            goto LABEL_250;
                          case 4u:
                            goto LABEL_244;
                          default:
                            break;
                        }
                      }
                    }
                  }
                  else if (v140 <= 5 && v96 <= 4)
                  {
                    v98 = CFSTR("Height");
                    switch((int)v96)
                    {
                      case 0:
LABEL_243:
                        v98 = CFSTR("Width");
                        goto LABEL_253;
                      case 1:
                        goto LABEL_253;
                      case 2:
LABEL_247:
                        if (v140 == 5 && v57)
                          goto LABEL_249;
                        goto LABEL_252;
                      case 3:
LABEL_250:
                        v98 = CFSTR("Batch");
                        if (v140 == 5 && v57)
LABEL_252:
                          v98 = CFSTR("Channel");
                        goto LABEL_253;
                      case 4:
LABEL_244:
                        if (v140 == 5 && v57)
                          v98 = CFSTR("Batch");
                        else
LABEL_249:
                          v98 = CFSTR("Depth");
LABEL_253:
                        v204 = v98;
                        ANECTensorDescInitialize();
                        Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v197, (NSString *)v144 + 37, v92);
                        v195 = 0;
                        v196 = 0;
                        *(_QWORD *)&v125 = (int)v91;
                        *((_QWORD *)&v125 + 1) = SHIDWORD(v91);
                        v201 = v125;
                        v199 = v139;
                        v202 = v90;
                        *(_QWORD *)&v125 = (int)v89;
                        *((_QWORD *)&v125 + 1) = SHIDWORD(v89);
                        v200 = v125;
                        v126 = ANECValidateGlobalArgMinMaxLayer();
                        v94 = v126 == 0;
                        if (v126)
                        {
                          v193 = v86;
                          v194 = v85;
                          if (v85)
                          {
                            v127 = (unint64_t *)&v85->__shared_owners_;
                            do
                              v128 = __ldxr(v127);
                            while (__stxr(v128 + 1, v127));
                          }
                          std::string::basic_string[abi:ne180100]<0>(v191, "TopK kernel: Top1 is not valid to be converted to global argminmax.");
                          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v168, (__int128 *)v191, (uint64_t)v161, 0);
                          Espresso::emit_kernel_validation_warning(&v193, (Espresso::base_kernel::validate_for_engine_warning_t *)v168);
                          v129 = (std::__shared_weak_count *)v172;
                          if (v172)
                          {
                            v130 = (unint64_t *)((char *)v172 + 8);
                            do
                              v131 = __ldaxr(v130);
                            while (__stlxr(v131 - 1, v130));
                            if (!v131)
                            {
                              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                              std::__shared_weak_count::__release_weak(v129);
                            }
                          }
                          v205[0] = (void **)&v170 + 1;
                          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v205);
                          v205[0] = (void **)&v168[24];
                          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v205);
                          if ((v168[23] & 0x80000000) != 0)
                            operator delete(*(void **)v168);
                          if (v192 < 0)
                            operator delete(v191[0]);
                          v132 = v194;
                          if (v194)
                          {
                            v133 = (unint64_t *)&v194->__shared_owners_;
                            do
                              v134 = __ldaxr(v133);
                            while (__stlxr(v134 - 1, v133));
                            if (!v134)
                            {
                              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                              std::__shared_weak_count::__release_weak(v132);
                            }
                          }
                        }
                        v135 = v198;
                        if (v198)
                        {
                          v136 = (unint64_t *)&v198->__shared_owners_;
                          do
                            v137 = __ldaxr(v136);
                          while (__stlxr(v137 - 1, v136));
                          if (!v137)
                          {
                            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                            std::__shared_weak_count::__release_weak(v135);
                          }
                        }
                        goto LABEL_156;
                      default:
                        break;
                    }
                  }
                  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
                }
              }
              else
              {
                v94 = 0;
              }
LABEL_156:

              if (v85)
              {
                v99 = (unint64_t *)&v85->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              if (*((_BYTE *)v144 + 294))
              {
                v101 = !v94;
                if (*((_DWORD *)v144 + 70) != 1)
                  v101 = 1;
                if ((v101 & 1) != 0)
                {
                  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v168, (id *)v146);
                  v104 = *(_QWORD *)&v168[24];
                  for (k = v169; k != v104; k -= 24)
                  {
                    if (*(char *)(k - 1) < 0)
                      operator delete(*(void **)(k - 24));
                  }
                  v169 = v104;
                  std::string::operator=((std::string *)v168, *((const std::string **)v146 + 3));
                  v112 = v175;
                  v175 = CFSTR("TopK");

                  v113 = (void *)objc_msgSend(v142, "mutableCopy");
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Indices"));
                  objc_storeStrong(v176, v113);
                  Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v168);

                }
                else
                {
                  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v168, (id *)v146);
                  v102 = *(_QWORD *)&v168[24];
                  for (m = v169; m != v102; m -= 24)
                  {
                    if (*(char *)(m - 1) < 0)
                      operator delete(*(void **)(m - 24));
                  }
                  v169 = v102;
                  std::string::operator=((std::string *)v168, *((const std::string **)v146 + 3));
                  v106 = v175;
                  v175 = CFSTR("GlobalArgMinMax");

                  v107 = (void *)objc_opt_new();
                  v108 = v107;
                  if (*((_BYTE *)v144 + 292))
                    v109 = CFSTR("Min");
                  else
                    v109 = CFSTR("Max");
                  objc_msgSend(v107, "setObject:forKeyedSubscript:", v109, CFSTR("Type"));
                  if (*((_BYTE *)v144 + 284))
                  {
                    if ((v141 & 0x80000000) == 0 && (unint64_t)v141 < v38)
                    {
                      v110 = v38 + ~(_DWORD)v141;
                      if (v110 <= 4)
                      {
                        v111 = CFSTR("Height");
                        switch(v110)
                        {
                          case 0u:
                            v111 = CFSTR("Width");
                            goto LABEL_220;
                          case 1u:
                            goto LABEL_220;
                          case 2u:
                            if ((_DWORD)v38 == 5 && *(_BYTE *)(v189 + 1281))
                              goto LABEL_216;
                            goto LABEL_219;
                          case 3u:
                            v111 = CFSTR("Batch");
                            if ((_DWORD)v38 == 5 && *(_BYTE *)(v189 + 1281))
LABEL_219:
                              v111 = CFSTR("Channel");
                            goto LABEL_220;
                          case 4u:
                            if ((_DWORD)v38 == 5 && *(_BYTE *)(v189 + 1281))
                              v111 = CFSTR("Batch");
                            else
LABEL_216:
                              v111 = CFSTR("Depth");
                            goto LABEL_220;
                          default:
                            break;
                        }
                      }
                    }
                    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
                  }
                  v111 = Espresso::ANECompilerEngine::anec_axis_str_for_cnn_axis(v141, v38, *(_BYTE *)(v189 + 1281) != 0);
LABEL_220:
                  objc_msgSend(v108, "setObject:forKeyedSubscript:", v111, CFSTR("Dimension"));
                  objc_storeStrong(v176, v108);
                  Espresso::ANECompilerEngine::compiler::add_unit(v143, (const Espresso::ANECompilerEngine::compiler::unit_t *)v168);

                }
                if (v173 < 0)
                  operator delete(v172);
                v199 = (__int128 *)((char *)&v170 + 8);
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
                v199 = (__int128 *)&v168[24];
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
                if ((v168[23] & 0x80000000) != 0)
                  operator delete(*(void **)v168);
              }
              *(_QWORD *)v168 = &v157;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
              v119 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
              if (*((_QWORD *)&v163 + 1))
              {
                v120 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              *(_QWORD *)v168 = (char *)v162 + 8;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
              *(_QWORD *)v168 = v161;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
              v122 = v167;
              if (v167)
              {
                v123 = (unint64_t *)&v167->__shared_owners_;
                do
                  v124 = __ldaxr(v123);
                while (__stlxr(v124 - 1, v123));
                if (!v124)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }

              if (v182 < 0)
                operator delete(v181);
              *(_QWORD *)v168 = v180;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
              *(_QWORD *)v168 = &v178;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v15 = v186;
              goto LABEL_25;
            default:
              break;
          }
        }
      }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, (id *)v146);
    v45 = v178;
    for (n = v179; n != v45; n -= 24)
    {
      if (*(char *)(n - 1) < 0)
        operator delete(*(void **)(n - 24));
    }
    v47 = v184;
    v179 = v45;
    v184 = CFSTR("Sort");

    v48 = (void *)objc_opt_new();
    v49 = v48;
    if (*((_BYTE *)v144 + 292))
      v50 = CFSTR("Ascending");
    else
      v50 = CFSTR("Descending");
    objc_msgSend(v48, "setObject:forKeyedSubscript:", v50, CFSTR("Direction"));
    v51 = *((_DWORD *)v144 + 72);
    Espresso::abstract_blob_container::shape(v168, v11);
    v52 = *(_DWORD *)&v168[20];
    if (*(_DWORD *)&v168[16] == 1)
      v53 = 4;
    else
      v53 = 5;
    if (*(_DWORD *)&v168[20] == -1)
      v52 = v53;
    v54 = v52;
    if ((_QWORD)v170)
    {
      *((_QWORD *)&v170 + 1) = v170;
      operator delete((void *)v170);
    }
    v55 = (v54 & (v51 >> 31)) + v51;
    if (v55 >= 0)
    {
      v56 = CFSTR("Height");
      switch(v54 + ~v55)
      {
        case 0:
          v56 = CFSTR("Width");
          goto LABEL_194;
        case 1:
          goto LABEL_194;
        case 2:
          if (v54 == 5 && *(_BYTE *)(v8 + 1281))
            goto LABEL_190;
          goto LABEL_193;
        case 3:
          v56 = CFSTR("Batch");
          if (v54 == 5 && *(_BYTE *)(v8 + 1281))
LABEL_193:
            v56 = CFSTR("Channel");
          goto LABEL_194;
        case 4:
          if (v54 == 5 && *(_BYTE *)(v8 + 1281))
            v56 = CFSTR("Batch");
          else
LABEL_190:
            v56 = CFSTR("Depth");
LABEL_194:
          objc_msgSend(v49, "setObject:forKeyedSubscript:", v56, CFSTR("SortDimension"));
          objc_msgSend(v49, "setObject:forKeyedSubscript:", &unk_1E2DEDF68, CFSTR("SortIndices"));
          Espresso::abstract_blob_container::shape(v168, v11);
          if ((_QWORD)v170)
          {
            *((_QWORD *)&v170 + 1) = v170;
            operator delete((void *)v170);
          }
          objc_msgSend(v49, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("Indices"));
          objc_storeStrong(v185, v49);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);
          if (*((_BYTE *)v144 + 294))
          {
            v114 = a2;
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v168, (id *)v146);
            v115 = *(_QWORD *)&v168[24];
            for (ii = v169; ii != v115; ii -= 24)
            {
              if (*(char *)(ii - 1) < 0)
                operator delete(*(void **)(ii - 24));
            }
            v169 = v115;
            std::string::operator=((std::string *)v168, *((const std::string **)v146 + 3));
            v117 = v175;
            v175 = CFSTR("Sort");

            v118 = (void *)objc_msgSend(v49, "mutableCopy");
            objc_msgSend(v118, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Indices"));
            objc_storeStrong(v176, v118);
            Espresso::ANECompilerEngine::compiler::add_unit(v114, (const Espresso::ANECompilerEngine::compiler::unit_t *)v168);

            if (v173 < 0)
              operator delete(v172);
            v161[0] = (char *)&v170 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v161);
            v161[0] = &v168[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v161);
            if ((v168[23] & 0x80000000) != 0)
              operator delete(*(void **)v168);
          }

          if (v182 < 0)
            operator delete(v181);
          *(_QWORD *)v168 = v180;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
          *(_QWORD *)v168 = &v178;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_25;
        default:
          break;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
  }
LABEL_24:
  Espresso::ANECompilerEngine::mix_topk_kernel::compile(this, a2, v146);
LABEL_25:

  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v23 = v188;
  if (v188)
  {
    v24 = (unint64_t *)&v188->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v190;
  if (v190)
  {
    v27 = (unint64_t *)&v190->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191356394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,void *a57)
{
  void *v57;
  uint64_t v58;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a57);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 248);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 216);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  a57 = &a38;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(&a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x210]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::chop_topk_kernel::compile(Espresso::ANECompilerEngine::chop_topk_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::chop_topk_kernel::compile((Espresso::ANECompilerEngine::chop_topk_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::chop_topk_kernel::~chop_topk_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::get_anec_lowering_hint(Espresso::ANECompilerEngine::ane_kernel *this)
{
  return (uint64_t)this + 136;
}

double Espresso::ANECompilerEngine::ane_kernel::weights_helper_weights_shape@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = NAN;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000001;
  return result;
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::weights_helper_quantization_axis(Espresso::ANECompilerEngine::ane_kernel *this)
{
  return 0;
}

void Espresso::ANECompilerEngine::mix_topk_kernel::compile(Espresso::ANECompilerEngine::mix_topk_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string *v33;
  std::string *i;
  uint64_t v35;
  uint64_t j;
  __CFString *v37;
  std::string *v38;
  std::string *k;
  uint64_t v40;
  uint64_t m;
  __CFString *v42;
  __int128 *v43;
  __int128 v44;
  int v45;
  std::string *n;
  std::string *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  std::string *v51;
  const void **v52;
  size_t v53;
  std::string *v54;
  const void *v55;
  std::string *p_str;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  char v60;
  void *v61;
  void *v62;
  const __CFString *v63;
  unsigned int v64;
  int v65;
  BOOL v66;
  const __CFString *v67;
  __CFString *v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  std::string *ii;
  std::string *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::string *v77;
  const void **v78;
  size_t v79;
  std::string *v80;
  const void *v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  std::string::size_type v85;
  char v86;
  void *v87;
  void *v88;
  const __CFString *v89;
  __CFString *v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string *jj;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  uint64_t v100;
  uint64_t kk;
  const void **v102;
  size_t v103;
  std::string *v104;
  const void *v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  std::string::size_type v109;
  char v110;
  __CFString *v111;
  void *v112;
  std::string *mm;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  uint64_t v119;
  uint64_t nn;
  const void **v121;
  size_t v122;
  std::string *v123;
  const void *v124;
  std::string *v125;
  std::string::size_type v126;
  std::string *v127;
  std::string::size_type v128;
  char v129;
  __CFString *v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  const char *v144;
  id obj;
  std::string __str;
  uint64_t v148;
  uint64_t v149;
  std::string *v150;
  std::string *v151;
  unint64_t v152;
  void *v153;
  char v154;
  id v155;
  __CFString *v156;
  id v157;
  std::string v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  std::string *v162;
  std::string *v163;
  unint64_t v164;
  void *v165;
  char v166;
  id v167;
  __CFString *v168;
  id v169[2];
  std::string v170;
  _BYTE v171[24];
  uint64_t v172;
  uint64_t v173;
  std::string *v174;
  std::string *v175;
  unint64_t v176;
  void *v177;
  char v178;
  id v179;
  __CFString *v180;
  id v181;
  std::string v182;
  uint64_t v183;
  uint64_t v184;
  std::string *v185;
  std::string *v186;
  unint64_t v187;
  void *v188;
  char v189;
  id v190;
  __CFString *v191;
  id v192;
  std::string v193;
  uint64_t v194;
  uint64_t v195;
  void *__p;
  std::string *v197;
  std::string *v198;
  unint64_t v199;
  void *v200;
  char v201;
  id v202;
  __CFString *v203;
  id v204;
  _DWORD v205[2];
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  void *v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  std::string v219;
  _QWORD v220[2];
  std::string v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v217 = 0;
  v218 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v218 = std::__shared_weak_count::lock(v4)) == 0 || (v6 = *((_QWORD *)a2 + 1), (v217 = v6) == 0))
  {
    v144 = "Inconsistent state: null network";
    goto LABEL_353;
  }
  if (!*(_QWORD *)(v6 + 576))
  {
    v144 = "Inconsistent state: blob_storage";
LABEL_353:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v144);
  }
  v7 = v6 + 136;
  v193.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)v193.__r_.__value_.__l.__data_, (__int128 **)&v193);
  v9 = (const void *)*((_QWORD *)v8 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v215 = (uint64_t)v9;
  v216 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v193.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a3, (__int128 **)&v193);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v213 = *((_QWORD *)v13 + 5);
  v214 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v9
  {
    v211 = v17;
    v212 = v10;
    if (v10)
    {
      v18 = (unint64_t *)&v10->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  else
  {
    v211 = 0;
    v212 = 0;
  }
  v206 = 0x100000007;
  v207 = 0;
  v208 = 0;
  v209 = 0xFFFFFFFF00000000;
  v210 = 0;
  if (*((_BYTE *)this + 292))
    v20 = 10;
  else
    v20 = 9;
  v205[1] = 897988541;
  v205[0] = v20;
  v21 = *((_DWORD *)this + 72);
  if ((v21 & 0x80000000) != 0)
  {
    Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v9);
    v22 = HIDWORD(v193.__r_.__value_.__r.__words[2]);
    if (LODWORD(v193.__r_.__value_.__r.__words[2]) == 1)
      v23 = 4;
    else
      v23 = 5;
    if (HIDWORD(v193.__r_.__value_.__r.__words[2]) == -1)
      v22 = v23;
    v21 += v22;
    if (__p)
    {
      v197 = (std::string *)__p;
      operator delete(__p);
    }
  }
  if (*((_BYTE *)this + 284))
  {
    Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v9);
    v24 = HIDWORD(v193.__r_.__value_.__r.__words[2]);
    if (LODWORD(v193.__r_.__value_.__r.__words[2]) == 1)
      v25 = 4;
    else
      v25 = 5;
    if (HIDWORD(v193.__r_.__value_.__r.__words[2]) == -1)
      v24 = v25;
    v21 = v24 + ~v21;
    if (__p)
    {
      v197 = (std::string *)__p;
      operator delete(__p);
    }
  }
  if (*((_DWORD *)this + 70) == 1)
  {
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v193, a3);
    if (v21 >= 3)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported top-k axis");
    LODWORD(v206) = dword_191A97700[v21];
    (*(void (**)(const void *))(*(_QWORD *)v9 + 32))(v9);
    std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::mix_reduce_kernel,std::allocator<Espresso::ANECompilerEngine::mix_reduce_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::reduce_params_t &,void>(v171, (_QWORD *)this + 1, (uint64_t)v205);
    (*(void (**)(_QWORD, Espresso::ANECompilerEngine::compiler *, std::string *))(**(_QWORD **)v171 + 328))(*(_QWORD *)v171, a2, &v193);
    if (*((_BYTE *)this + 294))
    {
      if (*((_BYTE *)this + 292))
        v26 = 12;
      else
        v26 = 11;
      v205[0] = v26;
      Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v182, a3);
      std::string::operator=(&v182, *((const std::string **)a3 + 3));
      (*(void (**)(const void *))(*(_QWORD *)v9 + 32))(v9);
      std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::mix_reduce_kernel,std::allocator<Espresso::ANECompilerEngine::mix_reduce_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::reduce_params_t &,void>(&v158, (_QWORD *)this + 1, (uint64_t)v205);
      (*(void (**)(std::string::size_type, Espresso::ANECompilerEngine::compiler *, std::string *))(*(_QWORD *)v158.__r_.__value_.__l.__data_ + 328))(v158.__r_.__value_.__r.__words[0], a2, &v182);
      size = (std::__shared_weak_count *)v158.__r_.__value_.__l.__size_;
      if (v158.__r_.__value_.__l.__size_)
      {
        v28 = (unint64_t *)(v158.__r_.__value_.__l.__size_ + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }

      if (v189 < 0)
        operator delete(v188);
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v182.__r_.__value_.__l.__data_);
    }
    v30 = *(std::__shared_weak_count **)&v171[8];
    if (*(_QWORD *)&v171[8])
    {
      v31 = (unint64_t *)(*(_QWORD *)&v171[8] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    if (v201 < 0)
      operator delete(v200);
    v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v182);
    v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
  }
  else
  {
    if (v21 != 2)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported top-k axis with num_k > 1");
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v193.__r_.__value_.__l.__data_, (id *)a3);
    v33 = v197;
    for (i = v198; i != v33; --i)
    {
      if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(i[-1].__r_.__value_.__l.__data_);
    }
    v198 = v33;
    v35 = v194;
    for (j = v195; j != v35; j -= 24)
    {
      if (*(char *)(j - 1) < 0)
        operator delete(*(void **)(j - 24));
    }
    v37 = v203;
    v195 = v35;
    v203 = CFSTR("Concat");

    obj = (id)objc_opt_new();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("Dimension"));
    objc_storeStrong(&v204, obj);
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v182.__r_.__value_.__l.__data_, (id *)a3);
    if (*((_BYTE *)this + 294))
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v171, (id *)a3);
      Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&v182, (__int128 *)v171);

      if (v178 < 0)
        operator delete(v177);
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
      if ((v171[23] & 0x80000000) != 0)
        operator delete(*(void **)v171);
      v38 = v185;
      for (k = v186; k != v38; --k)
      {
        if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(k[-1].__r_.__value_.__l.__data_);
      }
      v186 = v38;
      v40 = v183;
      for (m = v184; m != v40; m -= 24)
      {
        if (*(char *)(m - 1) < 0)
          operator delete(*(void **)(m - 24));
      }
      v184 = v40;
      std::string::operator=(&v182, *((const std::string **)a3 + 3));
      v42 = v191;
      v191 = CFSTR("Concat");

      objc_storeStrong(&v192, obj);
    }
    v43 = (__int128 *)*((_QWORD *)a3 + 6);
    if (*((char *)v43 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
    }
    else
    {
      v44 = *v43;
      v170.__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
      *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v44;
    }
    if (*((int *)this + 70) >= 1)
    {
      v45 = 0;
      while (1)
      {
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v171, (id *)a3);
        v47 = v174;
        for (n = v175; n != v47; --n)
        {
          if (SHIBYTE(n[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(n[-1].__r_.__value_.__l.__data_);
        }
        v175 = v47;
        v49 = v172;
        v48 = v173;
        if (v173 != v172)
        {
          do
          {
            if (*(char *)(v48 - 1) < 0)
              operator delete(*(void **)(v48 - 24));
            v48 -= 24;
          }
          while (v48 != v49);
          v47 = v175;
        }
        v173 = v49;
        if ((unint64_t)v47 >= v176)
        {
          v51 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v174, (uint64_t)&v170);
        }
        else
        {
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v47, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
          }
          else
          {
            v50 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
            v47->__r_.__value_.__r.__words[2] = v170.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v50;
          }
          v51 = v47 + 1;
        }
        v175 = v51;
        v52 = (const void **)*((_QWORD *)a3 + 6);
        if (*((char *)v52 + 23) >= 0)
          v53 = *((unsigned __int8 *)v52 + 23);
        else
          v53 = (size_t)v52[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v158, v53 + 12);
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v158;
        else
          v54 = (std::string *)v158.__r_.__value_.__r.__words[0];
        if (v53)
        {
          if (*((char *)v52 + 23) >= 0)
            v55 = v52;
          else
            v55 = *v52;
          memmove(v54, v55, v53);
        }
        strcpy((char *)v54 + v53, "__@topk_max_");
        std::to_string(&__str, v45);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v57 = __str.__r_.__value_.__l.__size_;
        v58 = std::string::append(&v158, (const std::string::value_type *)p_str, v57);
        v59 = v58->__r_.__value_.__r.__words[0];
        v221.__r_.__value_.__r.__words[0] = v58->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v221.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v58->__r_.__value_.__r.__words[1] + 7);
        v60 = HIBYTE(v58->__r_.__value_.__r.__words[2]);
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        if ((v171[23] & 0x80000000) != 0)
          operator delete(*(void **)v171);
        *(_QWORD *)v171 = v59;
        *(_QWORD *)&v171[8] = v221.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v171[15] = *(std::string::size_type *)((char *)v221.__r_.__value_.__r.__words + 7);
        v171[23] = v60;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);
        v61 = (void *)objc_opt_new();
        v62 = v61;
        if (*((_BYTE *)this + 292))
          v63 = CFSTR("Min");
        else
          v63 = CFSTR("Max");
        objc_msgSend(v61, "setObject:forKeyedSubscript:", v63, CFSTR("Type"));
        Espresso::abstract_blob_container::shape((char *)&v158, v215);
        v64 = HIDWORD(v158.__r_.__value_.__r.__words[2]);
        if (LODWORD(v158.__r_.__value_.__r.__words[2]) == 1)
          v65 = 4;
        else
          v65 = 5;
        if (HIDWORD(v158.__r_.__value_.__r.__words[2]) == -1)
          v64 = v65;
        if (v64 > 5)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
        if (*(_BYTE *)(v217 + 1281))
          v66 = v64 == 5;
        else
          v66 = 0;
        if (v66)
          v67 = CFSTR("Depth");
        else
          v67 = CFSTR("Channel");
        objc_msgSend(v62, "setObject:forKeyedSubscript:", v67, CFSTR("Dimension"));
        if (v161)
        {
          v162 = (std::string *)v161;
          operator delete(v161);
        }
        v68 = v180;
        v180 = CFSTR("Reduction");

        objc_storeStrong(&v181, v62);
        Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v171);
        v69 = v198;
        if ((unint64_t)v198 >= v199)
        {
          v71 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v197, (uint64_t)v171);
        }
        else
        {
          if ((v171[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v198, *(const std::string::value_type **)v171, *(std::string::size_type *)&v171[8]);
          }
          else
          {
            v70 = *(_OWORD *)v171;
            v198->__r_.__value_.__r.__words[2] = *(_QWORD *)&v171[16];
            *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v70;
          }
          v71 = v69 + 1;
        }
        v198 = v71;
        if (*((_BYTE *)this + 294))
        {
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v158.__r_.__value_.__l.__data_, (id *)a3);
          v73 = v162;
          for (ii = v163; ii != v73; --ii)
          {
            if (SHIBYTE(ii[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(ii[-1].__r_.__value_.__l.__data_);
          }
          v163 = v73;
          v75 = v159;
          v74 = v160;
          if (v160 != v159)
          {
            do
            {
              if (*(char *)(v74 - 1) < 0)
                operator delete(*(void **)(v74 - 24));
              v74 -= 24;
            }
            while (v74 != v75);
            v73 = v163;
          }
          v160 = v75;
          if ((unint64_t)v73 >= v164)
          {
            v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v162, (uint64_t)&v170);
          }
          else
          {
            if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v73, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
            }
            else
            {
              v76 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
              v73->__r_.__value_.__r.__words[2] = v170.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v76;
            }
            v77 = v73 + 1;
          }
          v163 = v77;
          v78 = (const void **)*((_QWORD *)a3 + 6);
          if (*((char *)v78 + 23) >= 0)
            v79 = *((unsigned __int8 *)v78 + 23);
          else
            v79 = (size_t)v78[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, v79 + 15);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = &__str;
          else
            v80 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (v79)
          {
            if (*((char *)v78 + 23) >= 0)
              v81 = v78;
            else
              v81 = *v78;
            memmove(v80, v81, v79);
          }
          strcpy((char *)v80 + v79, "__@topk_argmax_");
          std::to_string(&v221, v45);
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = &v221;
          else
            v82 = (std::string *)v221.__r_.__value_.__r.__words[0];
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v83 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
          else
            v83 = v221.__r_.__value_.__l.__size_;
          v84 = std::string::append(&__str, (const std::string::value_type *)v82, v83);
          v85 = v84->__r_.__value_.__r.__words[0];
          v219.__r_.__value_.__r.__words[0] = v84->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v219.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
          v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v158.__r_.__value_.__l.__data_);
          v158.__r_.__value_.__r.__words[0] = v85;
          v158.__r_.__value_.__l.__size_ = v219.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v158.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v219.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v158.__r_.__value_.__s + 23) = v86;
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v221.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v87 = (void *)objc_opt_new();
          v88 = v87;
          if (*((_BYTE *)this + 292))
            v89 = CFSTR("ChannelArgMin");
          else
            v89 = CFSTR("ChannelArgMax");
          objc_msgSend(v87, "setObject:forKeyedSubscript:", v89, CFSTR("Mode"));
          v90 = v168;
          v168 = CFSTR("ArgMinMax");

          objc_storeStrong(v169, v88);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v158);
          v91 = v186;
          if ((unint64_t)v186 >= v187)
          {
            v93 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v185, (uint64_t)&v158);
          }
          else
          {
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v186, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
            }
            else
            {
              v92 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
              v186->__r_.__value_.__r.__words[2] = v158.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v92;
            }
            v93 = v91 + 1;
          }
          v186 = v93;

          if (v166 < 0)
            operator delete(v165);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v158.__r_.__value_.__l.__data_);
        }
        if (v45 == *((_DWORD *)this + 70) - 1)
          break;
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v158.__r_.__value_.__l.__data_, (id *)a3);
        v95 = v162;
        for (jj = v163; jj != v95; --jj)
        {
          if (SHIBYTE(jj[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(jj[-1].__r_.__value_.__l.__data_);
        }
        v163 = v95;
        if ((unint64_t)v95 >= v164)
        {
          v97 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v162, (uint64_t)&v170);
        }
        else
        {
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v95, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
          }
          else
          {
            v96 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
            v95->__r_.__value_.__r.__words[2] = v170.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v96;
          }
          v97 = v95 + 1;
        }
        v163 = v97;
        if ((unint64_t)v97 >= v164)
        {
          v99 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v162, (uint64_t)v171);
        }
        else
        {
          if ((v171[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)v171, *(std::string::size_type *)&v171[8]);
          }
          else
          {
            v98 = *(_OWORD *)v171;
            v97->__r_.__value_.__r.__words[2] = *(_QWORD *)&v171[16];
            *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v98;
          }
          v99 = v97 + 1;
        }
        v163 = v99;
        v100 = v159;
        for (kk = v160; kk != v100; kk -= 24)
        {
          if (*(char *)(kk - 1) < 0)
            operator delete(*(void **)(kk - 24));
        }
        v160 = v100;
        v102 = (const void **)*((_QWORD *)a3 + 6);
        if (*((char *)v102 + 23) >= 0)
          v103 = *((unsigned __int8 *)v102 + 23);
        else
          v103 = (size_t)v102[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v103 + 30);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v104 = &__str;
        else
          v104 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v103)
        {
          if (*((char *)v102 + 23) >= 0)
            v105 = v102;
          else
            v105 = *v102;
          memmove(v104, v105, v103);
        }
        strcpy((char *)v104 + v103, "__@topk_elementwise_not_equal_");
        std::to_string(&v221, v45);
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = &v221;
        else
          v106 = (std::string *)v221.__r_.__value_.__r.__words[0];
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
        else
          v107 = v221.__r_.__value_.__l.__size_;
        v108 = std::string::append(&__str, (const std::string::value_type *)v106, v107);
        v109 = v108->__r_.__value_.__r.__words[0];
        v219.__r_.__value_.__r.__words[0] = v108->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v219.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v108->__r_.__value_.__r.__words[1] + 7);
        v110 = HIBYTE(v108->__r_.__value_.__r.__words[2]);
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);
        v158.__r_.__value_.__r.__words[0] = v109;
        v158.__r_.__value_.__l.__size_ = v219.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v158.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v219.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v158.__r_.__value_.__s + 23) = v110;
        if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v221.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v111 = v168;
        v168 = CFSTR("ElementWise");

        v112 = (void *)objc_opt_new();
        objc_msgSend(v112, "setObject:forKeyedSubscript:", CFSTR("NotEqual"), CFSTR("Type"));
        objc_storeStrong(v169, v112);
        Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v158);
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
        v114 = v150;
        for (mm = v151; mm != v114; --mm)
        {
          if (SHIBYTE(mm[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(mm[-1].__r_.__value_.__l.__data_);
        }
        v151 = v114;
        if ((unint64_t)v114 >= v152)
        {
          v116 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v150, (uint64_t)&v170);
        }
        else
        {
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v114, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
          }
          else
          {
            v115 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
            v114->__r_.__value_.__r.__words[2] = v170.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v114->__r_.__value_.__l.__data_ = v115;
          }
          v116 = v114 + 1;
        }
        v151 = v116;
        if ((unint64_t)v116 >= v152)
        {
          v118 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v150, (uint64_t)&v158);
        }
        else
        {
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v116, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
          }
          else
          {
            v117 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
            v116->__r_.__value_.__r.__words[2] = v158.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v116->__r_.__value_.__l.__data_ = v117;
          }
          v118 = v116 + 1;
        }
        v151 = v118;
        v119 = v148;
        for (nn = v149; nn != v119; nn -= 24)
        {
          if (*(char *)(nn - 1) < 0)
            operator delete(*(void **)(nn - 24));
        }
        v149 = v119;
        v121 = (const void **)*((_QWORD *)a3 + 6);
        if (*((char *)v121 + 23) >= 0)
          v122 = *((unsigned __int8 *)v121 + 23);
        else
          v122 = (size_t)v121[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v221, v122 + 14);
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = &v221;
        else
          v123 = (std::string *)v221.__r_.__value_.__r.__words[0];
        if (v122)
        {
          if (*((char *)v121 + 23) >= 0)
            v124 = v121;
          else
            v124 = *v121;
          memmove(v123, v124, v122);
        }
        strcpy((char *)v123 + v122, "__@topk_input_");
        std::to_string(&v219, v45);
        if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v125 = &v219;
        else
          v125 = (std::string *)v219.__r_.__value_.__r.__words[0];
        if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v126 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
        else
          v126 = v219.__r_.__value_.__l.__size_;
        v127 = std::string::append(&v221, (const std::string::value_type *)v125, v126);
        v128 = v127->__r_.__value_.__r.__words[0];
        v220[0] = v127->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v220 + 7) = *(std::string::size_type *)((char *)&v127->__r_.__value_.__r.__words[1] + 7);
        v129 = HIBYTE(v127->__r_.__value_.__r.__words[2]);
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[0] = v128;
        __str.__r_.__value_.__l.__size_ = v220[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v220 + 7);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v129;
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v221.__r_.__value_.__l.__data_);
        v130 = v156;
        v156 = CFSTR("ElementWise");

        v131 = (void *)objc_opt_new();
        objc_msgSend(v131, "setObject:forKeyedSubscript:", CFSTR("Mult"), CFSTR("Type"));
        objc_storeStrong(&v157, v131);
        Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
        std::string::operator=(&v170, &__str);

        if (v154 < 0)
          operator delete(v153);
        v221.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
        v221.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);

        if (v166 < 0)
          operator delete(v165);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);

        if (v178 < 0)
          operator delete(v177);
        v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
        v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
        if ((v171[23] & 0x80000000) != 0)
          operator delete(*(void **)v171);
        if (++v45 >= *((_DWORD *)this + 70))
          goto LABEL_316;
      }

      if (v178 < 0)
        operator delete(v177);
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
      if ((v171[23] & 0x80000000) != 0)
        operator delete(*(void **)v171);
    }
LABEL_316:
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v193);
    if (*((_BYTE *)this + 294))
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v182);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);

    if (v189 < 0)
      operator delete(v188);
    *(_QWORD *)v171 = &v185;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
    *(_QWORD *)v171 = &v183;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
    if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v182.__r_.__value_.__l.__data_);

    if (v201 < 0)
      operator delete(v200);
    v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v182);
    v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v182);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  v132 = v212;
  if (v212)
  {
    v133 = (unint64_t *)&v212->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v214;
  if (v214)
  {
    v136 = (unint64_t *)&v214->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v216;
  if (v216)
  {
    v139 = (unint64_t *)&v216->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v218;
  if (v218)
  {
    v142 = (unint64_t *)&v218->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
}

void sub_191357B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x248]);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x2D8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10 - 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10 - 216);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10 - 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10 - 184);
  _Unwind_Resume(a1);
}

const __CFString *Espresso::ANECompilerEngine::`anonymous namespace'::get_vector_dimension(const __CFString *this, const __CFString *const *a2, const Espresso::layer_shape *a3)
{
  int v3;
  const __CFString *v4;
  BOOL v5;
  int v7;
  const __CFString *v8;

  v3 = *((_DWORD *)a2 + 5);
  if (*(_DWORD *)a2 == 1)
  {
    if ((v3 - 6) > 0xFFFFFFF8)
    {
      v4 = CFSTR("Width");
      goto LABEL_24;
    }
LABEL_50:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
  }
  if (v3 == -1)
  {
    if (*((_DWORD *)a2 + 1) != 1)
    {
      if (*((_DWORD *)a2 + 2) != 1)
      {
        if (*((_DWORD *)a2 + 3) != 1)
          return 0;
        if (*((_DWORD *)a2 + 4) == 1)
          v3 = 4;
        else
          v3 = 5;
LABEL_35:
        v5 = v3 == 5;
        v4 = CFSTR("Batch");
        v7 = v5;
        v8 = CFSTR("Channel");
LABEL_39:
        if ((v7 & a3) != 0)
          v4 = v8;
LABEL_41:
        if (v4 != this)
          return v4;
        return 0;
      }
      if (*((_DWORD *)a2 + 4) == 1)
        v3 = 4;
      else
        v3 = 5;
LABEL_27:
      v5 = v3 == 5;
      v4 = CFSTR("Channel");
      v7 = v5;
      v8 = CFSTR("Depth");
      goto LABEL_39;
    }
  }
  else
  {
    v5 = v3 >= 2 && *((_DWORD *)a2 + 1) == 1;
    if (!v5)
    {
      if (v3 <= 2 || *((_DWORD *)a2 + 2) != 1)
      {
        if (v3 < 4 || *((_DWORD *)a2 + 3) != 1)
        {
          if (v3 <= 4 || *((_DWORD *)a2 + 4) != 1)
            return 0;
          if (v3 > 5)
            goto LABEL_50;
          v4 = CFSTR("Depth");
          if ((_DWORD)a3)
            v4 = CFSTR("Batch");
          goto LABEL_41;
        }
        if (v3 > 5)
          goto LABEL_50;
        goto LABEL_35;
      }
      if (v3 > 5)
        goto LABEL_50;
      goto LABEL_27;
    }
    if (v3 >= 6)
      goto LABEL_50;
  }
  v4 = CFSTR("Height");
LABEL_24:
  if (this == v4)
    return 0;
  return v4;
}

void Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(id *this)
{
  void **v2;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

const __CFString *Espresso::ANECompilerEngine::anec_axis_str_for_cnn_axis(Espresso::ANECompilerEngine *this, unint64_t a2, char a3)
{
  int v3;
  const __CFString *result;

  if (a2 <= 5)
  {
    v3 = (int)this;
    if (this <= 4)
    {
      result = CFSTR("Height");
      switch(v3)
      {
        case 0:
          return CFSTR("Width");
        case 1:
          return result;
        case 2:
          if (a2 != 5 || (a3 & 1) == 0)
            return CFSTR("Channel");
          return CFSTR("Depth");
        case 3:
          result = CFSTR("Batch");
          if (a2 == 5 && (a3 & 1) != 0)
            return CFSTR("Channel");
          return result;
        case 4:
          if (a2 == 5 && (a3 & 1) != 0)
            return CFSTR("Batch");
          else
            return CFSTR("Depth");
        default:
          break;
      }
    }
  }
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
}

void Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(void **this)
{
  void **v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  v2 = this + 3;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v2);
}

std::string *Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(std::string *this, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[2].__r_.__value_.__r.__words, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  v5 = (std::string *)((char *)this + 80);
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 5);
    this[4].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 12);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[4].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 26);
  this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)*((id *)a2 + 14);
  return this;
}

void sub_1913581C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::mix_reduce_kernel,std::allocator<Espresso::ANECompilerEngine::mix_reduce_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::reduce_params_t &,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA1A0;
  Espresso::ANECompilerEngine::reduce_kernel::reduce_kernel((uint64_t)(v6 + 3), a2, a3);
  v6[3] = &off_1E2D779B8;
  v6[44] = &unk_1E2D77B18;
  *a1 = v7;
  a1[1] = v6;
}

void sub_191358278(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::layer_graph_info_t::~layer_graph_info_t(id *this)
{
  void **v2;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t Espresso::ANECompilerEngine::compiler::unit_t::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 48));
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  v5 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v5);
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 103) = 0;
  *((_BYTE *)a2 + 80) = 0;
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  v7 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  v8 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v7;

  v9 = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = 0;
  v10 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v9;

  v11 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  v12 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v11;

  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  return a1;
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA1A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA1A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reduce_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL Espresso::ANECompilerEngine::mix_topk_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  const Espresso::net *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  const Espresso::net *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  int v50;
  _BOOL4 v51;
  Espresso::ANECompilerEngine *v52;
  unsigned int v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int64x2_t *v77;
  std::__shared_weak_count *v78;
  char v79;
  void *v80[2];
  uint64_t v81;
  int64x2_t *v82;
  std::__shared_weak_count *v83;
  std::string v84;
  _OWORD v85[2];
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  const Espresso::net *v90;
  std::__shared_weak_count *v91;
  _DWORD v92[8];
  _OWORD v93[2];
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  const Espresso::net *v98;
  std::__shared_weak_count *v99;
  _DWORD v100[6];
  int v101;
  int64x2_t *v102;
  std::__shared_weak_count *v103;
  std::string __p;
  std::string::size_type v105;
  unint64_t v106;
  char v107;
  _BYTE v108[32];
  std::__shared_weak_count *v109;
  int64x2_t *v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string::size_type *v114;
  __int128 v115;
  uint64_t v116;
  std::string *v117;
  __int128 v118;
  uint64_t v119;

  v6 = a3[6];
  v112 = 0;
  v113 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v113 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v112 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v110 = *(int64x2_t **)a2;
    v111 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v117, "topk not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v117, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v110, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v14 = v109;
    if (v109)
    {
      v15 = (unint64_t *)&v109->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v114 = (std::string::size_type *)v108;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
    v114 = &v105;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v118) < 0)
      operator delete(v117);
    v17 = v111;
    if (!v111)
      goto LABEL_43;
    v18 = (unint64_t *)&v111->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
LABEL_41:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_43:
    v31 = 0;
    goto LABEL_136;
  }
  if (!*(_BYTE *)(a1 + 284))
  {
    v24 = *(std::__shared_weak_count **)(a2 + 8);
    v102 = *(int64x2_t **)a2;
    v103 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::string::basic_string[abi:ne180100]<0>(&v117, "TopK kernel: nd_mode required on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v117, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v102, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v27 = v109;
    if (v109)
    {
      v28 = (unint64_t *)&v109->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v114 = (std::string::size_type *)v108;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
    v114 = &v105;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v118) < 0)
      operator delete(v117);
    v17 = v103;
    if (!v103)
      goto LABEL_43;
    v30 = (unint64_t *)&v103->__shared_owners_;
    do
      v19 = __ldaxr(v30);
    while (__stlxr(v19 - 1, v30));
    goto LABEL_41;
  }
  v20 = a3[6];
  v98 = 0;
  v99 = 0;
  v21 = *(std::__shared_weak_count **)(v20 + 80);
  if (v21)
  {
    v22 = std::__shared_weak_count::lock(v21);
    v99 = v22;
    if (v22)
    {
      v23 = *(const Espresso::net **)(v20 + 72);
      v98 = v23;
      goto LABEL_46;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = 0;
LABEL_46:
  v32 = *a3;
  v33 = *(_QWORD *)(*a3 + 32);
  v34 = *(_OWORD *)(*a3 + 16);
  v93[0] = *(_OWORD *)*a3;
  v93[1] = v34;
  v94 = v33;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v95, *(const void **)(v32 + 40), *(_QWORD *)(v32 + 48), (uint64_t)(*(_QWORD *)(v32 + 48) - *(_QWORD *)(v32 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v100, v23, (const Espresso::layer_shape *)v93, 1);
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v22)
  {
    v35 = (unint64_t *)&v22->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v37 = a3[6];
  v90 = 0;
  v91 = 0;
  v38 = *(std::__shared_weak_count **)(v37 + 80);
  if (!v38)
  {
    v39 = 0;
    goto LABEL_57;
  }
  v39 = std::__shared_weak_count::lock(v38);
  v91 = v39;
  if (!v39)
  {
LABEL_57:
    v40 = 0;
    goto LABEL_58;
  }
  v40 = *(const Espresso::net **)(v37 + 72);
  v90 = v40;
LABEL_58:
  v41 = a3[3];
  v42 = *(_QWORD *)(v41 + 32);
  v43 = *(_OWORD *)(v41 + 16);
  v85[0] = *(_OWORD *)v41;
  v85[1] = v43;
  v86 = v42;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v87, *(const void **)(v41 + 40), *(_QWORD *)(v41 + 48), (uint64_t)(*(_QWORD *)(v41 + 48) - *(_QWORD *)(v41 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v92, v40, (const Espresso::layer_shape *)v85, 1);
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v39)
  {
    v44 = (unint64_t *)&v39->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v46 = *(__int128 **)(*(_QWORD *)a3[6] + 224 * a3[9] + 136);
  if (*((char *)v46 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)v46, *((_QWORD *)v46 + 1));
  }
  else
  {
    v47 = *v46;
    v84.__r_.__value_.__r.__words[2] = *((_QWORD *)v46 + 2);
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v47;
  }
  v48 = v112;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v112 + 360), &v84))
  {
    v117 = &v84;
    v49 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v48 + 352), &v84, (uint64_t)&std::piecewise_construct, (__int128 **)&v117);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v49 + 56);
    v105 = 0;
    v106 = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v49 + 9), *((_QWORD *)v49 + 10), (uint64_t)(*((_QWORD *)v49 + 10) - *((_QWORD *)v49 + 9)) >> 2);
    if (LODWORD(__p.__r_.__value_.__r.__words[1]) == -1)
      v50 = 1;
    else
      v50 = __p.__r_.__value_.__r.__words[1];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v105 = __p.__r_.__value_.__r.__words[2];
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    v50 = *((_DWORD *)a3 + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(&v117, "ane.enable_iterative_topk");
  std::string::basic_string[abi:ne180100]<0>(&v114, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v48 + 472, (uint64_t)&v117, (uint64_t)&v114, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v51 = __p.__r_.__value_.__l.__size_ == 1 && *__p.__r_.__value_.__l.__data_ == 49;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v51 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1 && __p.__r_.__value_.__s.__data_[0] == 49;
  }
  if (SHIBYTE(v115) < 0)
    operator delete(v114);
  if (SHIBYTE(v118) < 0)
    operator delete(v117);
  if (*(_DWORD *)(a1 + 280) == 1
    || v51
    && *(_DWORD *)(a1 + 288) == 1
    && *(_BYTE *)(a1 + 284)
    && ((v54 = *(_DWORD *)(*a3 + 20), v54 == 4) || v54 == -1 && *(_DWORD *)(*a3 + 16) == 1))
  {
    v52 = v9;
    if (*(_BYTE *)(a1 + 285))
    {
      v53 = (v101 & (*(int *)(a1 + 288) >> 31)) + *(_DWORD *)(a1 + 288);
      if (*(_BYTE *)(a1 + 284))
        v53 = v101 + ~v53;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = 897988541;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0x100000007uLL;
      v105 = 0;
      v106 = 0xFFFFFFFF00000000;
      v107 = 0;
      if (v53 >= 3)
      {
        v79 = 0;
        std::string::basic_string[abi:ne180100]<0>(v80, "Cannot perform Argmax/Argmin along Batch or Depth");
      }
      else
      {
        LODWORD(__p.__r_.__value_.__r.__words[1]) = dword_191A97700[v53];
        LODWORD(__p.__r_.__value_.__l.__data_) = 11;
        Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw((uint64_t)&v117, v52, v100, v92, (__int128 *)&__p, v50);
        if ((_BYTE)v117)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw((uint64_t)&v114, v52, v100, v92, (__int128 *)&__p, v50);
          if ((_BYTE)v114)
          {
            if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v100, v52))
            {
              if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v92, v52))
              {
                v79 = 1;
                std::string::basic_string[abi:ne180100]<0>(v80, "Success");
              }
              else
              {
                v79 = 0;
                std::string::basic_string[abi:ne180100]<0>(v80, "Output blob dimensions exceed ANE limit.");
              }
            }
            else
            {
              v79 = 0;
              std::string::basic_string[abi:ne180100]<0>(v80, "Input blob dimensions exceed ANE limit.");
            }
          }
          else
          {
            v79 = 0;
            *(_OWORD *)v80 = v115;
            v81 = v116;
            v115 = 0uLL;
            v116 = 0;
          }
          if (SHIBYTE(v116) < 0)
            operator delete((void *)v115);
          if (SHIBYTE(v119) < 0)
            operator delete((void *)v118);
        }
        else
        {
          v79 = 0;
          *(_OWORD *)v80 = v118;
          v81 = v119;
        }
      }
    }
    else
    {
      v79 = 0;
      std::string::basic_string[abi:ne180100]<0>(v80, "Only Channelwise or Spatial ArgMax/Min is supported on ANE");
    }

    v31 = v79 != 0;
    if (!v79)
    {
      v68 = *(std::__shared_weak_count **)(a2 + 8);
      v77 = *(int64x2_t **)a2;
      v78 = v68;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v80, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v77, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v71 = v109;
      if (v109)
      {
        v72 = (unint64_t *)&v109->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v117 = (std::string *)v108;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
      v117 = (std::string *)&v105;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v74 = v78;
      if (v78)
      {
        v75 = (unint64_t *)&v78->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
    }
    if (SHIBYTE(v81) < 0)
      operator delete(v80[0]);
  }
  else
  {
    v55 = *(std::__shared_weak_count **)(a2 + 8);
    v82 = *(int64x2_t **)a2;
    v83 = v55;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    std::string::basic_string[abi:ne180100]<0>(&v117, "TopK kernel: num_k > 1 not available on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v117, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v58 = v109;
    if (v109)
    {
      v59 = (unint64_t *)&v109->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v114 = (std::string::size_type *)v108;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
    v114 = &v105;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v118) < 0)
      operator delete(v117);
    v61 = v83;
    if (v83)
    {
      v62 = (unint64_t *)&v83->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v31 = 0;
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
LABEL_136:

  v64 = v113;
  if (v113)
  {
    v65 = (unint64_t *)&v113->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return v31;
}

void sub_191358E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,char a57)
{
  void *v57;
  void *v58;
  uint64_t v59;

  if (*(char *)(v59 - 97) < 0)
    operator delete(*(void **)(v59 - 120));
  if (*(char *)(v59 - 65) < 0)
    operator delete(*(void **)(v59 - 88));

  if (a25 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 144);
  _Unwind_Resume(a1);
}

void sub_191359034()
{
  JUMPOUT(0x191359024);
}

_QWORD *std::vector<__CFBoolean const*>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * v7];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1913590B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<__CFBoolean const*>::push_back[abi:ne180100](void **a1)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = ((char *)v3 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v5 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = v2 - (_QWORD)*a1;
    v7 = v6 >> 2;
    if (v6 >> 2 <= (unint64_t)(v5 + 1))
      v7 = v5 + 1;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v8 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    if (v8)
      v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8);
    else
      v9 = 0;
    v10 = (_QWORD *)(v8 + 8 * v5);
    v11 = v8 + 8 * v9;
    *v10 = *MEMORY[0x1E0C9AE50];
    v4 = v10 + 1;
    v13 = (char *)*a1;
    v12 = (char *)a1[1];
    if (v12 != *a1)
    {
      do
      {
        v14 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v10 = v14;
      }
      while (v12 != v13);
      v12 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v4;
    a1[2] = (void *)v11;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v3 = *MEMORY[0x1E0C9AE50];
    v4 = v3 + 1;
  }
  a1[1] = v4;
}

void Espresso::ANECompilerEngine::mix_topk_kernel::~mix_topk_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_topk_kernel::compile(Espresso::ANECompilerEngine::mix_topk_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_topk_kernel::compile((Espresso::ANECompilerEngine::mix_topk_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_topk_kernel::~mix_topk_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

double Espresso::ANECompilerEngine::mix_topk_kernel::mix_topk_kernel(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 5;
  *(_WORD *)(v5 + 284) = 0;
  *(_DWORD *)(v5 + 288) = -1;
  *(_WORD *)(v5 + 292) = 256;
  *(_BYTE *)(v5 + 294) = 1;
  *(_QWORD *)v5 = off_1E2D85338;
  v6 = *a3;
  *(_QWORD *)(v5 + 287) = *(uint64_t *)((char *)a3 + 7);
  *(_QWORD *)(v5 + 280) = v6;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_BYTE *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_BYTE *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(_BYTE *)(v5 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 476) = result;
  *(_BYTE *)(v5 + 484) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_QWORD *)(v5 + 496) = 0;
  *(_BYTE *)(v5 + 504) = v7;
  *(_QWORD *)v5 = &off_1E2D76080;
  *(_QWORD *)(v5 + 296) = &unk_1E2D761E0;
  return result;
}

void sub_19135949C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191359AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,pthread_mutex_t *a26)
{
  void *v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  pthread_mutex_locker::~pthread_mutex_locker(&a26);

  _Unwind_Resume(a1);
}

void sub_191359BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_191359C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191359CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)EspressoImage2Image;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19135B6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45)
{
  uint64_t v45;

  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v45 - 240));
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_19135BB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19135BB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_19135C0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, pthread_mutex_t *a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>>>>::reset[abi:ne180100](&a22);
  if (a19 < 0)
    operator delete(__p);
  pthread_mutex_locker::~pthread_mutex_locker(&a20);

  _Unwind_Resume(a1);
}

void sub_19135C188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_19135C28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_19135C344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_19135C62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  operator delete(v11);
  operator delete(v13);
  operator delete(v12);
  operator delete(v10);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a10);
  _Unwind_Resume(a1);
}

void sub_19135C918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19135CBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_19135CFA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)(v4 - 168));
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)(v4 - 160));

  _Unwind_Resume(a1);
}

void sub_19135D304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a21 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_19135DA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 120);
  _Unwind_Resume(a1);
}

void sub_19135DBD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19135DC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_19135DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19135DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19135E06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<int>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  return this;
}

void sub_19135E2D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19135E3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<int>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void pthread_mutex_locker::pthread_mutex_locker(pthread_mutex_locker *this, _opaque_pthread_mutex_t *a2)
{
  *(_QWORD *)this = &g_mutex;
  if (pthread_mutex_locker::pthread_mutex_locker(_opaque_pthread_mutex_t &)::onceToken != -1)
    dispatch_once(&pthread_mutex_locker::pthread_mutex_locker(_opaque_pthread_mutex_t &)::onceToken, &__block_literal_global_345);
  if (!pthread_mutex_locker::g_disabled)
    pthread_mutex_lock(*(pthread_mutex_t **)this);
}

void pthread_mutex_locker::~pthread_mutex_locker(pthread_mutex_t **this)
{
  if (!pthread_mutex_locker::g_disabled)
    pthread_mutex_unlock(*this);
}

void ___ZN20pthread_mutex_lockerC2ER23_opaque_pthread_mutex_t_block_invoke()
{
  void *v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v2 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("espresso.locker_disabled"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  pthread_mutex_locker::g_disabled = objc_msgSend(v1, "BOOLValue");

}

void sub_19135E56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2))
        break;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x40uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    v6[6] = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    *v9 = (uint64_t *)v6;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *a1 = v11;
      v12 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

std::chrono::steady_clock::time_point ___ZN8Espresso12time_secondsEv_block_invoke()
{
  std::chrono::steady_clock::time_point result;

  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Espresso::time_seconds(void)::t0 = result.__d_.__rep_;
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::V9Engine::context,Espresso::abstract_context>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v1 + 103) < 0)
        operator delete(*(void **)(v1 + 80));
      if (*(char *)(v1 + 79) < 0)
        operator delete(*(void **)(v1 + 56));
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  void *result;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEC00;
  *((_QWORD *)v10 + 3) = &off_1E2DA1190;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  *((_QWORD *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_19135E834(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_19135E99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_19135EAC4(_Unwind_Exception *a1, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x19135EA78);
  }

  _Unwind_Resume(a1);
}

void sub_19135EBD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19135EDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);

  _Unwind_Resume(a1);
}

void sub_19135EE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19135F108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  if (a32 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19135FD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_convolution_kernel,Espresso::convolution_uniforms>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1913603D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,Espresso::Image2Image::postprocessing_settings_t>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19136056C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1913607D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_191360880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)TwoNetsStyleTransfer;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_191360B40(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  __cxa_free_exception(v1);
  pthread_mutex_locker::~pthread_mutex_locker((pthread_mutex_t **)(v2 - 72));
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

void std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<std::string>>,std::unordered_set<std::string>*,std::unordered_set<std::string>*,std::unordered_set<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      std::unordered_set<std::string>::unordered_set(a3 + v6, a1 + v6);
      v6 += 40;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

char *std::vector<std::unordered_set<std::string>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_map<std::string,int>>,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      std::unordered_map<std::string,int>::unordered_map(a3 + v6, a1 + v6);
      v6 += 40;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void Espresso::MPSGraphEngine::Kernels::conv3d_kernel::~conv3d_kernel(Espresso::MPSGraphEngine::Kernels::conv3d_kernel *this)
{
  *(_QWORD *)this = &off_1E2D63930;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D63930;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphEngine::Kernels::conv3d_kernel::clear_weights(Espresso::MPSGraphEngine::Kernels::conv3d_kernel *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v8 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 440, &v8);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 424, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

BOOL Espresso::MPSGraphEngine::Kernels::conv3d_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  int v46;
  int v47;
  int64x2_t *v48;
  std::__shared_weak_count *v49;
  int64x2_t *v50;
  std::__shared_weak_count *v51;
  int64x2_t *v52;
  std::__shared_weak_count *v53;
  int64x2_t *v54;
  std::__shared_weak_count *v55;
  std::string v56;
  std::string v57;
  std::string __p;
  _BYTE v59[24];
  _BYTE v60[32];
  std::__shared_weak_count *v61;
  int64x2_t *v62;
  std::__shared_weak_count *v63;
  void **v64;

  v4 = a3[1] - *a3;
  if (v4 != 64)
  {
    v15 = *(std::__shared_weak_count **)(a2 + 8);
    v62 = *(int64x2_t **)a2;
    v63 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v4 = a3[1] - *a3;
    }
    std::to_string(&v56, v4 >> 6);
    v18 = std::string::insert(&v56, 0, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: number of inputs must be 1, received ");
    v57 = *v18;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v57, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v62, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v19 = v61;
    if (v61)
    {
      v20 = (unint64_t *)&v61->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v64 = (void **)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    v64 = (void **)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v12 = v63;
    if (!v63)
      return 0;
    v22 = (unint64_t *)&v63->__shared_owners_;
    do
      v14 = __ldaxr(v22);
    while (__stlxr(v14 - 1, v22));
LABEL_57:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return 0;
  }
  v5 = a3[4] - a3[3];
  if (v5 != 64)
  {
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    v54 = *(int64x2_t **)a2;
    v55 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v5 = a3[4] - a3[3];
    }
    std::to_string(&v56, v5 >> 6);
    v26 = std::string::insert(&v56, 0, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: number of outputs must be 1, received ");
    v57 = *v26;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v57, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v54, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v27 = v61;
    if (v61)
    {
      v28 = (unint64_t *)&v61->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v64 = (void **)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    v64 = (void **)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v12 = v55;
    if (!v55)
      return 0;
    v30 = (unint64_t *)&v55->__shared_owners_;
    do
      v14 = __ldaxr(v30);
    while (__stlxr(v14 - 1, v30));
    goto LABEL_57;
  }
  if (*(_DWORD *)(a1 + 400))
  {
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    v52 = *(int64x2_t **)a2;
    v53 = v6;
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    std::string::basic_string[abi:ne180100]<0>(&v57, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: low_precision_accumulation");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v57, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v52, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v9 = v61;
    if (v61)
    {
      v10 = (unint64_t *)&v61->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v12 = v53;
    if (!v53)
      return 0;
    v13 = (unint64_t *)&v53->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    goto LABEL_57;
  }
  if (*(unsigned __int16 *)(a1 + 348) >= 2u)
  {
    v39 = *(std::__shared_weak_count **)(a2 + 8);
    v50 = *(int64x2_t **)a2;
    v51 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    std::string::basic_string[abi:ne180100]<0>(&v57, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: padding configuration");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v57, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v42 = v61;
    if (v61)
    {
      v43 = (unint64_t *)&v61->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v12 = v51;
    if (!v51)
      return 0;
    v45 = (unint64_t *)&v51->__shared_owners_;
    do
      v14 = __ldaxr(v45);
    while (__stlxr(v14 - 1, v45));
    goto LABEL_57;
  }
  if (*(_DWORD *)(a1 + 332) != -1)
  {
    v32 = *(std::__shared_weak_count **)(a2 + 8);
    v48 = *(int64x2_t **)a2;
    v49 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    std::string::basic_string[abi:ne180100]<0>(&v57, "[Dispatch::MPSGraph::conv3d_kernel] unsupported: fused_activation_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v57, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v35 = v61;
    if (v61)
    {
      v36 = (unint64_t *)&v61->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v12 = v49;
    if (!v49)
      return 0;
    v38 = (unint64_t *)&v49->__shared_owners_;
    do
      v14 = __ldaxr(v38);
    while (__stlxr(v14 - 1, v38));
    goto LABEL_57;
  }
  v46 = *(_DWORD *)(a1 + 384);
  if (v46 >= 2 && v46 == *(_DWORD *)(a1 + 316))
    return 1;
  v47 = *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 320) == 1
    && (v47 == 1
     && *(_DWORD *)(a1 + 328) == 1
     && *(_WORD *)(a1 + 368) == 1
     && *(_WORD *)(a1 + 370) == 1
     && *(_WORD *)(a1 + 372) == 1
     && (*(_WORD *)(a1 + 348)
      || !*(_WORD *)(a1 + 364)
      && !*(_WORD *)(a1 + 366)
      && !*(_WORD *)(a1 + 356)
      && !*(_WORD *)(a1 + 358)
      && !*(_WORD *)(a1 + 360)
      && !*(_WORD *)(a1 + 362))
     || *(_WORD *)(a1 + 368) == 1))
  {
    return 1;
  }
  if (v47 == 1 && *(_WORD *)(a1 + 370) == 1)
    return 1;
  if (*(_DWORD *)(a1 + 328) == 1)
    return *(unsigned __int16 *)(a1 + 372) == 1;
  return 0;
}

void sub_1913618F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a30);
  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_conv3d_kernel::kernel_type_str(Espresso::generic_conv3d_kernel *this)
{
  return "conv3d";
}

uint64_t Espresso::MPSGraphEngine::Kernels::conv3d_kernel::num_weights_blob(Espresso::MPSGraphEngine::Kernels::conv3d_kernel *this)
{
  if (*((_DWORD *)this + 76))
    return 2;
  else
    return 1;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

_QWORD *Espresso::MPSGraphEngine::Kernels::conv3d_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 424), *a2, a2[1]);
  *(_DWORD *)(a1 + 304) = *a2 != 0;
  return result;
}

_QWORD *Espresso::MPSGraphEngine::Kernels::conv3d_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 440), *a2, a2[1]);
}

uint64_t Espresso::MPSGraphEngine::Kernels::conv3d_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 432);
  *a2 = *(_QWORD *)(this + 424);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::MPSGraphEngine::Kernels::conv3d_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 448);
  *a2 = *(_QWORD *)(this + 440);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::generic_conv3d_kernel::get_f16_weights(int8x8_t *this@<X0>, _QWORD *a2@<X8>)
{
  BOOL has_parameter_blob;
  BOOL v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
  has_parameter_blob = Espresso::base_kernel::has_parameter_blob(this, (unsigned __int8 *)__p);
  v5 = has_parameter_blob;
  if ((v7 & 0x80000000) == 0)
  {
    if (has_parameter_blob)
      goto LABEL_3;
LABEL_6:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  operator delete(__p[0]);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
  Espresso::base_kernel::get_parameter_blob<unsigned short,5>((unsigned __int8 *)__p, a2, (uint64_t)this);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_191361B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  __int128 v8;

  v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v2 + 280) = v2 + 288;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)v2 = off_1E2D8A750;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 304) = 1;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(v2 + 312) = v8;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v2 + 328) = 0xFFFFFFFF00000001;
  *(_QWORD *)(v2 + 336) = _D1;
  *(_DWORD *)(v2 + 344) = 0;
  *(_WORD *)(v2 + 348) = 1;
  *(_QWORD *)(v2 + 358) = 0;
  *(_QWORD *)(v2 + 350) = 0;
  *(_WORD *)(v2 + 366) = 0;
  WORD1(v8) = 1;
  WORD3(v8) = 1;
  *(_QWORD *)(v2 + 368) = v8;
  *(_DWORD *)(v2 + 376) = 65537;
  *(_QWORD *)(v2 + 380) = 0x100000000;
  *(_QWORD *)(v2 + 396) = 0;
  *(_QWORD *)(v2 + 388) = 0;
  return *(double *)&v8;
}

const char *espresso_get_version_string()
{
  return "3400.58.3.11.1";
}

const char *espresso_get_branch()
{
  return "x";
}

void Espresso::net_compiler::compile_network_to_cache_url_identifier(Espresso::net_compiler *this)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("Implementation for compile_network_to_cache_url_identifier is not supported by this compiler.");
}

uint64_t Espresso::net_compiler::rebuild(Espresso::net_compiler *this)
{
  return 0;
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void Espresso::pass_global_name_indexing_result::~pass_global_name_indexing_result(Espresso::pass_global_name_indexing_result *this)
{
  Espresso::pass_global_name_indexing_result::~pass_global_name_indexing_result(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2D9D128;
  v2 = (char *)this + 16;
  v3 = (void **)((char *)this + 80);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)v2);
}

void Espresso::net_compiler_segment_based::get_intermediate_buffer_handle(Espresso::net_compiler_segment_based *this)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_intermediate_buffer_handle() not implemented for the current compiler");
}

void Espresso::net_compiler_segment_based::set_priority()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("Implementation for set_priority must be overriden                                     for every engine that has a runtime compiler");
}

void Espresso::net_compiler_segment_based::clear_priority(Espresso::net_compiler_segment_based *this)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("Implementation for clear_priority must be overriden                                     for every engine that has a runtime compiler");
}

void Espresso::net_compiler_segment_based::compilation_cache_exists(Espresso::net_compiler_segment_based *this)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("compilation_cache_exists() not implemented for the current compiler");
}

uint64_t Espresso::net_compiler_segment_based::implements_compilation_cache_purge(Espresso::net_compiler_segment_based *this)
{
  return 0;
}

void Espresso::net_compiler_segment_based::compilation_cache_purge(Espresso::net_compiler_segment_based *this)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("compilation_cache_purge() not implemented for the current compiler");
}

uint64_t std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 16);
}

_QWORD *std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>(_OWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  *a1 = *(_OWORD *)a2;
  std::unordered_set<std::string>::unordered_set((uint64_t)(a1 + 1), a2 + 16);
  std::unordered_set<std::string>::unordered_set((uint64_t)(v3 + 7), a2 + 56);
  v3[12] = 0;
  v3[13] = 0;
  v3 += 12;
  v3[2] = 0;
  return std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(v3, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2);
}

void sub_1913620D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  char *v18;
  int64x2_t v19;
  char *v20;
  int64x2_t *v21;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v4;
  v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = v7;
  v19.i64[0] = (uint64_t)&v7[120 * v3];
  v20 = &v7[120 * v6];
  std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>(v19.i64[0], a2);
  v8 = v19.i64[0];
  v9 = v19.i64[0] + 120;
  v19.i64[1] = v19.i64[0] + 120;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v15 = vdupq_n_s64(v10);
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v8 + v12;
      v14 = v10 + v12;
      *(_OWORD *)(v8 + v12 - 120) = *(_OWORD *)(v10 + v12 - 120);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(v8 + v12 - 104, (uint64_t *)(v10 + v12 - 104));
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(v8 + v12 - 64, (uint64_t *)(v10 + v12 - 64));
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v13 - 8) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v10 + v12 - 24);
      *(_QWORD *)(v13 - 8) = *(_QWORD *)(v10 + v12 - 8);
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v14 - 8) = 0;
      v12 -= 120;
    }
    while (v10 + v12 != v11);
    v8 += v12;
    v15 = *a1;
    v9 = v19.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  v19 = v15;
  v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v20;
  v20 = v16;
  v18 = (char *)v15.i64[0];
  std::__split_buffer<Espresso::net_compiler_segment_based::segment_t>::~__split_buffer((uint64_t)&v18);
  return v9;
}

void sub_191362294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Espresso::net_compiler_segment_based::segment_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(a2 + 16, (uint64_t *)(a3 + 16));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(a2 + 56, (uint64_t *)(a3 + 56));
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  result = *(__n128 *)(a3 + 96);
  *(__n128 *)(a2 + 96) = result;
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  return result;
}

_QWORD *std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 4 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1913623C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net_compiler_segment_based::identify_segments_two_compilers(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t (***v5)(_QWORD);
  unsigned int v6;
  uint64_t (***v7)(_QWORD);
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  _BOOL4 v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  Espresso *v36;
  const char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  NSObject *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  const char *v65;
  NSObject *v66;
  Espresso *v67;
  const char *v68;
  uint64_t *v69;
  NSObject *v70;
  _BYTE *v71;
  uint64_t *v72;
  NSObject *v73;
  _BYTE *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  BOOL v88;
  _QWORD *v89;
  int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64x2_t *v100;
  _QWORD v101[2];
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  _BYTE lpsrc[22];
  _BYTE buf[32];
  __int128 v108;
  int v109;
  _BYTE v110[32];
  int v111;
  void *__p;
  void *v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v100 = (int64x2_t *)(a1 + 32);
  for (i = *(_QWORD *)(a1 + 40);
        i != v3;
        std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](i))
  {
    i -= 120;
  }
  *(_QWORD *)(a1 + 40) = v3;
  v5 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 16) + 8);
  v6 = (**v5)(v5);
  v7 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 1256) + 8);
  v8 = (**v7)(v7);
  v9 = *a2;
  v10 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(*a2 + 528), v6);
  if (v10)
  {
    v11 = v10[4];
    v104 = v10[3];
    v105 = (std::__shared_weak_count *)v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      v9 = *a2;
    }
  }
  else
  {
    v104 = 0;
    v105 = 0;
  }
  v14 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(v9 + 528), v8);
  if (v14)
  {
    v16 = v14[3];
    v15 = v14[4];
    v102 = v16;
    v103 = (std::__shared_weak_count *)v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    v16 = 0;
    v102 = 0;
    v103 = 0;
  }
  v98 = *a2;
  v19 = *(_QWORD *)(*a2 + 32);
  v20 = v16 != a1 || v16 == 0;
  v21 = 16;
  if (!v20)
    v21 = 1256;
  v97 = v21;
  if (*(_QWORD *)(*a2 + 40) != v19)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(v19 + 16 * v23);
      v25 = *(const void **)(v24 + 64);
      v26 = *(std::__shared_weak_count **)(v24 + 72);
      *(_QWORD *)lpsrc = v25;
      *(_QWORD *)&lpsrc[8] = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      if (v25)
      {
        v30 = v29 != 0;
        if (v29)
          v31 = v26 == 0;
        else
          v31 = 1;
        if (!v31)
        {
          v32 = (unint64_t *)&v26->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          v30 = 1;
        }
      }
      else
      {
        v30 = 0;
      }
      v35 = *(_QWORD *)(*(_QWORD *)lpsrc + 8) == *(_QWORD *)(v98 + v97);
      if (v36 && (v38 = *(std::__shared_weak_count **)&lpsrc[8]) != 0)
      {
        v39 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        do
          v41 = __ldaxr(v39);
        while (__stlxr(v41 - 1, v39));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
        v42 = 1;
      }
      else if (v36)
      {
        v42 = 1;
      }
      else
      {
        v42 = v30;
      }
      v43 = *(_QWORD *)(*a2 + 32);
      v44 = *(_QWORD *)(*a2 + 40);
      if (((v22 | !v35) & 1) == 0)
      {
        *(_OWORD *)&buf[16] = 0u;
        v108 = 0u;
        memset(v110, 0, sizeof(v110));
        v109 = 1065353216;
        v111 = 1065353216;
        v113 = 0;
        v114 = 0;
        __p = 0;
        *(_QWORD *)buf = v23 + v42;
        *(_QWORD *)&buf[8] = *(_QWORD *)buf + 1;
        v45 = *(_QWORD *)(a1 + 40);
        if (v45 >= *(_QWORD *)(a1 + 48))
        {
          v46 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t const&>(v100, (uint64_t)buf);
        }
        else
        {
          std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>(*(_OWORD **)(a1 + 40), (uint64_t)buf);
          v46 = v45 + 120;
          *(_QWORD *)(a1 + 40) = v45 + 120;
        }
        *(_QWORD *)(a1 + 40) = v46;
        if (__p)
        {
          v113 = __p;
          operator delete(__p);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v110);
        v36 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf[16]);
        v22 = 1;
      }
      v47 = ((v44 - v43) >> 4) - 1;
      if ((v22 & 1) != 0 && (!v35 || v23 == v47))
      {
        v48 = v23 == v47;
        if (!v35)
          v48 = v42;
        if (!v48)
        {
          Espresso::espresso_os_log_subsystem(v36, v37);
          v49 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&buf[4] = v42;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v35;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = v23 == v47;
            *(_WORD *)&buf[20] = 2048;
            *(_QWORD *)&buf[22] = v23;
            _os_log_error_impl(&dword_190DAF000, v49, OS_LOG_TYPE_ERROR, "identify_segments, logic error: is_context_transfer=%d is_default_context_layer=%d is_last_layer=%d ilayer=%zu", buf, 0x1Eu);
          }

        }
        v50 = *(_QWORD *)(a1 + 40);
        v52 = *(_QWORD *)(v50 - 120);
        v51 = (unint64_t *)(v50 - 120);
        v53 = v23 + (v42 ^ 1);
        v51[1] = v53;
        if (v53 >= v52)
        {
          v54 = (std::__shared_weak_count *)a2[1];
          v101[0] = *a2;
          v101[1] = v54;
          if (v54)
          {
            v55 = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          Espresso::net_compiler_segment_based::identify_segment_input_output((uint64_t)v36, (uint64_t)v101, v51);
          if (v54)
          {
            v57 = (unint64_t *)&v54->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          v22 = 0;
        }
        else
        {
          std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100]((uint64_t)v51);
          v22 = 0;
          *(_QWORD *)(a1 + 40) = v51;
        }
      }
      v59 = *(std::__shared_weak_count **)&lpsrc[8];
      if (*(_QWORD *)&lpsrc[8])
      {
        v60 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      ++v23;
      v19 = *(_QWORD *)(*a2 + 32);
    }
    while (v23 < (*(_QWORD *)(*a2 + 40) - v19) >> 4);
    v98 = *a2;
  }
  v62 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != v62)
  {
    v63 = 0;
    do
    {
      v64 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 56), *(_QWORD *)(v62 + 120 * v63), (uint64_t *)(v62 + 120 * v63));
      v64[5] = v63;
      Espresso::espresso_os_log_subsystem((Espresso *)v64, v65);
      v66 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        v75 = (uint64_t *)(v100->i64[0] + 120 * v63);
        v77 = *v75;
        v76 = v75[1];
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v63;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v77;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v76;
        _os_log_debug_impl(&dword_190DAF000, v66, OS_LOG_TYPE_DEBUG, "identify_segments: isegment %zu (%zu %zu)", buf, 0x20u);
      }

      v62 = v100->i64[0];
      v69 = *(uint64_t **)(v100->i64[0] + 120 * v63 + 32);
      if (v69)
      {
        do
        {
          if (*((char *)v69 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v69[2], v69[3]);
          }
          else
          {
            *(_OWORD *)buf = *((_OWORD *)v69 + 1);
            *(_QWORD *)&buf[16] = v69[4];
          }
          Espresso::espresso_os_log_subsystem(v67, v68);
          v70 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
          {
            if (buf[23] >= 0)
              v71 = buf;
            else
              v71 = *(_BYTE **)buf;
            *(_DWORD *)lpsrc = 134218242;
            *(_QWORD *)&lpsrc[4] = v63;
            *(_WORD *)&lpsrc[12] = 2080;
            *(_QWORD *)&lpsrc[14] = v71;
            _os_log_debug_impl(&dword_190DAF000, v70, OS_LOG_TYPE_DEBUG, "\tinput %zu %s", lpsrc, 0x16u);
          }

          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v69 = (uint64_t *)*v69;
        }
        while (v69);
        v62 = v100->i64[0];
      }
      v72 = *(uint64_t **)(v62 + 120 * v63 + 72);
      if (v72)
      {
        do
        {
          if (*((char *)v72 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v72[2], v72[3]);
          }
          else
          {
            *(_OWORD *)buf = *((_OWORD *)v72 + 1);
            *(_QWORD *)&buf[16] = v72[4];
          }
          Espresso::espresso_os_log_subsystem(v67, v68);
          v73 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
          {
            if (buf[23] >= 0)
              v74 = buf;
            else
              v74 = *(_BYTE **)buf;
            *(_DWORD *)lpsrc = 134218242;
            *(_QWORD *)&lpsrc[4] = v63;
            *(_WORD *)&lpsrc[12] = 2080;
            *(_QWORD *)&lpsrc[14] = v74;
            _os_log_debug_impl(&dword_190DAF000, v73, OS_LOG_TYPE_DEBUG, "\toutput %zu %s", lpsrc, 0x16u);
          }

          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v72 = (uint64_t *)*v72;
        }
        while (v72);
        v62 = v100->i64[0];
      }
      ++v63;
    }
    while (v63 < 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 40) - v62) >> 3));
    v98 = *a2;
  }
  std::vector<int>::resize((std::vector<int> *)(a1 + 80), (uint64_t)(*(_QWORD *)(v98 + 40) - *(_QWORD *)(v98 + 32)) >> 4);
  v78 = *(_QWORD *)(*a2 + 40) - *(_QWORD *)(*a2 + 32);
  if (v78)
  {
    v79 = 0;
    v80 = v78 >> 4;
    v83 = *(_QWORD **)(a1 + 64);
    v82 = (_QWORD *)(a1 + 64);
    v81 = v83;
    if (v80 <= 1)
      v80 = 1;
    v84 = v82[2];
    do
    {
      if (!v81)
        goto LABEL_129;
      v85 = v82;
      v86 = v81;
      do
      {
        v87 = v86[4];
        v88 = v87 >= v79;
        if (v87 >= v79)
          v89 = v86;
        else
          v89 = v86 + 1;
        if (v88)
          v85 = v86;
        v86 = (_QWORD *)*v89;
      }
      while (*v89);
      if (v85 != v82 && v79 >= v85[4])
        v90 = *((_DWORD *)v85 + 10);
      else
LABEL_129:
        v90 = -1;
      *(_DWORD *)(v84 + 4 * v79++) = v90;
    }
    while (v79 != v80);
  }
  v91 = v103;
  if (v103)
  {
    v92 = (unint64_t *)&v103->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v105;
  if (v105)
  {
    v95 = (unint64_t *)&v105->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
}

void sub_191362C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::pass_blob_name_indexing::~pass_blob_name_indexing(Espresso::pass_blob_name_indexing *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int &,unsigned long &>(uint64_t a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("index >= blob_shapes.size() %zu %zu", a1, a2);
}

void std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_global_name_indexing::~pass_global_name_indexing(Espresso::pass_global_name_indexing *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_global_name_indexing::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::pass_global_name_indexing::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t **v18;
  unint64_t v19;
  unint64_t *v20;
  __int128 *v21;
  __int128 *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t **v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 *v56[2];
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  __int128 *v61;

  v5 = (std::__shared_weak_count *)operator new(0x80uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D9D128;
  v6 = (unint64_t *)&v5[1];
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE3E8;
  v5[2].__shared_weak_owners_ = 0;
  v5[3].__vftable = 0;
  *(_OWORD *)&v5[1].__shared_owners_ = 0u;
  v5[2].std::__shared_count = 0u;
  LODWORD(v5[3].__vftable) = 1065353216;
  *(_OWORD *)&v5[3].__shared_owners_ = 0u;
  v5[4].std::__shared_count = 0u;
  *(_OWORD *)&v5[4].__shared_weak_owners_ = 0u;
  v59 = (unint64_t *)&v5[1];
  v60 = v5;
  v7 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) == v7)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)a2 = 1;
    goto LABEL_60;
  }
  v55 = a2;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(v7 + 16 * v8);
    v10 = *(const void **)(v9 + 64);
    if (!v10)
    {
      v57 = 0;
      v58 = 0;
      goto LABEL_11;
    }
    if (!v11)
    {
      v57 = 0;
      v58 = 0;
      if (v21)
      {
        v22 = *(__int128 **)(v9 + 72);
        v56[0] = v21;
        v56[1] = v22;
        if (v22)
        {
          v23 = (unint64_t *)v22 + 1;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = (__int128 *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v21 + 320))(v21);
        Espresso::check_if_global_indexed(v6, v25);
        v61 = v25;
        v26 = v5[4].__shared_owners_
            + 24
            * *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v5[1].__shared_weak_owners_, (unsigned __int8 *)v25, (uint64_t)&std::piecewise_construct, &v61)+ 10);
        v28 = (unint64_t **)(v26 + 8);
        v27 = *(unint64_t **)(v26 + 8);
        v29 = *(_QWORD *)(v26 + 16);
        if ((unint64_t)v27 >= v29)
        {
          v38 = *(unint64_t **)v26;
          v39 = ((uint64_t)v27 - *(_QWORD *)v26) >> 3;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v41 = v29 - (_QWORD)v38;
          if (v41 >> 2 > v40)
            v40 = v41 >> 2;
          v35 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8;
          v42 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v35)
            v42 = v40;
          if (v42)
          {
            v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
            v27 = *v28;
            v38 = *(unint64_t **)v26;
          }
          else
          {
            v43 = 0;
          }
          v48 = (unint64_t *)(v42 + 8 * v39);
          *v48 = v8;
          v30 = v48 + 1;
          while (v27 != v38)
          {
            v49 = *--v27;
            *--v48 = v49;
          }
          *(_QWORD *)v26 = v48;
          *v28 = v30;
          *(_QWORD *)(v26 + 16) = v42 + 8 * v43;
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v27 = v8;
          v30 = v27 + 1;
        }
        *v28 = v30;
        if (v22)
        {
          v50 = (unint64_t *)v22 + 1;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            (*(void (**)(__int128 *))(*(_QWORD *)v22 + 16))(v22);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
          }
        }
      }
LABEL_11:
      v12 = v58;
      if (!v58)
        goto LABEL_44;
LABEL_40:
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v47 = __ldaxr(p_shared_owners);
      while (__stlxr(v47 - 1, p_shared_owners));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_44;
    }
    v12 = *(std::__shared_weak_count **)(v9 + 72);
    v57 = v11;
    v58 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = (__int128 *)(*(uint64_t (**)(void *))(*(_QWORD *)v11 + 320))(v11);
    Espresso::check_if_global_indexed(v6, v15);
    v56[0] = v15;
    v16 = v5[3].__shared_owners_
        + 24
        * *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v5[1].__shared_weak_owners_, (unsigned __int8 *)v15, (uint64_t)&std::piecewise_construct, v56)+ 10);
    v18 = (unint64_t **)(v16 + 8);
    v17 = *(unint64_t **)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    if ((unint64_t)v17 >= v19)
    {
      v31 = *(unint64_t **)v16;
      v32 = ((uint64_t)v17 - *(_QWORD *)v16) >> 3;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v34 = v19 - (_QWORD)v31;
      if (v34 >> 2 > v33)
        v33 = v34 >> 2;
      v35 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8;
      v36 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v35)
        v36 = v33;
      if (v36)
      {
        v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36);
        v17 = *v18;
        v31 = *(unint64_t **)v16;
      }
      else
      {
        v37 = 0;
      }
      v44 = (unint64_t *)(v36 + 8 * v32);
      *v44 = v8;
      v20 = v44 + 1;
      while (v17 != v31)
      {
        v45 = *--v17;
        *--v44 = v45;
      }
      *(_QWORD *)v16 = v44;
      *v18 = v20;
      *(_QWORD *)(v16 + 16) = v36 + 8 * v37;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v17 = v8;
      v20 = v17 + 1;
    }
    *v18 = v20;
    if (v12)
      goto LABEL_40;
LABEL_44:
    ++v8;
    v7 = *((_QWORD *)a1 + 4);
  }
  while (v8 < (*((_QWORD *)a1 + 5) - v7) >> 4);
  v6 = v59;
  v5 = v60;
  a2 = v55;
  *(_QWORD *)(v55 + 8) = 0;
  *(_QWORD *)(v55 + 16) = 0;
  *(_BYTE *)v55 = 1;
  if (!v5)
  {
    *(_QWORD *)(v55 + 8) = v6;
    *(_QWORD *)(v55 + 16) = 0;
    return;
  }
LABEL_60:
  v52 = (unint64_t *)&v5->__shared_owners_;
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  do
    v54 = __ldaxr(v52);
  while (__stlxr(v54 - 1, v52));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_191363220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::check_if_global_indexed(unint64_t *a1, __int128 *a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;

  v2 = a1 + 7;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[8] - a1[7]) >> 3);
  if (v3 != a1[1] || (v5 = a1 + 10, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[11] - a1[10]) >> 3) != v3) || a1[5] != v3)
    Espresso::throw_exception_selector<Espresso::generic_error>("pass_global_name_indexing_result not synced");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a1 + 2, (unsigned __int8 *)a2))
  {
    v7 = a1[1];
    v9 = a2;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 2), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v9)+ 10) = v7;
    v8 = a1[1] + 1;
    a1[1] = v8;
    std::vector<std::vector<unsigned long>>::resize(v2, v8);
    std::vector<std::vector<unsigned long>>::resize(v5, a1[1]);
  }
}

void std::__shared_ptr_emplace<Espresso::pass_global_name_indexing_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE3E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_global_name_indexing_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE3E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_global_name_indexing_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::pass_constant_if_conditions::~pass_constant_if_conditions(Espresso::pass_constant_if_conditions *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_constant_if_conditions::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

uint64_t Espresso::pass_constant_if_conditions::run_on_network@<X0>(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  char *v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  const void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint8x8_t v62;
  unint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  int v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  __int128 **v72;
  __int128 *v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  __int128 *v77;
  __int128 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t *v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  uint64_t *v99;
  int v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  const char *v110;
  _BYTE *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  _QWORD *v115;
  uint64_t *v116[2];
  char v117;
  void *v118[2];
  char v119;
  unint64_t v120;
  void *__p;
  unint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[5];
  std::string *v126;
  std::string *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD v133[5];
  __int128 v134;
  __int128 v135;
  int v136;

  v134 = 0u;
  v135 = 0u;
  v136 = 1065353216;
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v133);
  v132 = 0;
  v5 = *((_QWORD *)a1 + 4);
  v111 = (_BYTE *)a2;
  if (*((_QWORD *)a1 + 5) == v5)
    goto LABEL_190;
  v6 = 0;
  do
  {
    v7 = 16 * v6;
    v8 = *(_QWORD *)(v5 + 16 * v6);
    v9 = *(const void **)(v8 + 64);
    if (!v9)
    {
      v10 = 0;
      v114 = 0;
      v15 = 0;
LABEL_18:
      v14 = 0;
      if (!v10)
        goto LABEL_22;
      goto LABEL_23;
    }
    if (v10 && (v11 = *(_QWORD *)(v8 + 72)) != 0)
    {
      v114 = *(std::__shared_weak_count **)(v8 + 72);
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      v8 = *(_QWORD *)(*((_QWORD *)a1 + 4) + v7);
      v9 = *(const void **)(v8 + 64);
      if (!v9)
      {
        v14 = 0;
        v15 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      v114 = 0;
    }
    if (!v15)
      goto LABEL_18;
    v16 = *(unint64_t **)(v8 + 72);
    if (v16)
    {
      v17 = v16 + 1;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v112 = (std::__shared_weak_count *)v16;
    if (*(_DWORD *)(((uint64_t (*)(std::__shared_weak_count *))v15->__vftable[8].~__shared_weak_count)(v15)
                   + 16) == 1)
    {
      v118[0] = &v132;
      v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v118);
      v14 = v19[4] - v19[3] == 48;
    }
    else
    {
      v14 = 0;
    }
    v15 = v112;
    if (!v10)
    {
LABEL_22:
      if (!v14)
        goto LABEL_174;
    }
LABEL_23:
    v113 = v15;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v126 = 0;
    v127 = 0;
    v128 = 0;
    v125[0] = MEMORY[0x1E0C809B0];
    v125[1] = 3221225472;
    v125[2] = ___ZN8Espresso27pass_constant_if_conditions14run_on_networkERNS_3netE_block_invoke;
    v125[3] = &__block_descriptor_40_e8_B16__0Q8l;
    v125[4] = a1;
    v20 = (void *)MEMORY[0x19401D648](v125);
    v21 = v132;
    v124 = v132;
    if (v14)
    {
      __p = &v124;
      __p = (void *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, (unint64_t *)&v124, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[3]+ 24);
      v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v133, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[5];
      v124 = v21;
    }
    Espresso::net::recurse_layer_producers((uint64_t)a1, v133, v21, (uint64_t)&v129, (uint64_t)&v126, v20);
    __p = 0;
    v122 = 0;
    v123 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v129, (uint64_t)v130, ((char *)v130 - (char *)v129) >> 3);
    v22 = (unint64_t *)__p;
    v23 = v122;
    while (v22 != v23)
    {
      v120 = 0;
      v120 = *v22;
      v116[0] = (uint64_t *)&v120;
      v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v120, (uint64_t)&std::piecewise_construct, v116);
      v26 = v24[3];
      v25 = v24[4];
      while (v26 != v25)
      {
        v27 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v133, v26);
        if (v27)
        {
          Espresso::net::recurse_layer_producers((uint64_t)a1, v133, v27[5], (uint64_t)&v129, (uint64_t)&v126, v20);
        }
        else
        {
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a1 + 30), (_QWORD *)v26))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v118);
            v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"cannot find producer for ", 25);
            v106 = *(char *)(v26 + 23);
            if (v106 >= 0)
              v107 = v26;
            else
              v107 = *(_QWORD *)v26;
            if (v106 >= 0)
              v108 = *(unsigned __int8 *)(v26 + 23);
            else
              v108 = *(_QWORD *)(v26 + 8);
            v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, v107, v108);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)".", 1);
            std::stringbuf::str();
            if (v117 >= 0)
              v110 = (const char *)v116;
            else
              v110 = (const char *)v116[0];
            Espresso::throw_exception_selector<Espresso::generic_error>(v110);
          }
          v28 = v127;
          if ((unint64_t)v127 >= v128)
          {
            v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v126, v26);
          }
          else
          {
            if (*(char *)(v26 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v26, *(_QWORD *)(v26 + 8));
            }
            else
            {
              v29 = *(_OWORD *)v26;
              v127->__r_.__value_.__r.__words[2] = *(_QWORD *)(v26 + 16);
              *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
            }
            v30 = v28 + 1;
          }
          v127 = v30;
        }
        v26 += 24;
      }
      ++v22;
    }
    v31 = (char *)v130;
    if (v126 != v127)
    {
      v32 = 0;
      goto LABEL_85;
    }
    v33 = &v129->__vftable;
    v32 = 30;
    if (v129 != v130)
    {
      while (1)
      {
        v34 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * *v33);
        v35 = *(const void **)(v34 + 64);
        if (v35)
        {
          {
            v36 = *(std::__shared_weak_count **)(v34 + 72);
            if (!v36)
              goto LABEL_79;
            p_shared_owners = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldxr(p_shared_owners);
            while (__stxr(v38 + 1, p_shared_owners));
            do
              v39 = __ldaxr(p_shared_owners);
            while (__stlxr(v39 - 1, p_shared_owners));
            v40 = 30;
            if (v39)
              goto LABEL_80;
LABEL_78:
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
            goto LABEL_80;
          }
          {
            v36 = *(std::__shared_weak_count **)(v34 + 72);
            if (!v36)
              goto LABEL_65;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            do
              v43 = __ldaxr(v41);
            while (__stlxr(v43 - 1, v41));
          }
          {
            v36 = *(std::__shared_weak_count **)(v34 + 72);
            if (!v36)
            {
LABEL_65:
              v40 = 10;
              goto LABEL_80;
            }
            v44 = (unint64_t *)&v36->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            do
              v43 = __ldaxr(v44);
            while (__stlxr(v43 - 1, v44));
          }
          {
            v36 = *(std::__shared_weak_count **)(v34 + 72);
            if (!v36)
              goto LABEL_84;
            v46 = (unint64_t *)&v36->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
            do
              v43 = __ldaxr(v46);
            while (__stlxr(v43 - 1, v46));
          }
          else
          {
            {
LABEL_79:
              v40 = 30;
              goto LABEL_80;
            }
            v36 = *(std::__shared_weak_count **)(v34 + 72);
            if (!v36)
            {
LABEL_84:
              v40 = 10;
              goto LABEL_80;
            }
            v48 = (unint64_t *)&v36->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            do
              v43 = __ldaxr(v48);
            while (__stlxr(v43 - 1, v48));
          }
          v40 = 10;
          if (!v43)
            goto LABEL_78;
        }
        else
        {
          v40 = 30;
        }
LABEL_80:
        if (v40 < v32)
          v32 = v40;
        if (++v33 == (_QWORD *)v31)
        {
          v31 = (char *)v130;
          break;
        }
      }
    }
LABEL_85:
    if ((unint64_t)v31 >= v131)
    {
      v51 = (char *)v129;
      v52 = (v31 - (char *)v129) >> 3;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v54 = v131 - (_QWORD)v129;
      if ((uint64_t)(v131 - (_QWORD)v129) >> 2 > v53)
        v53 = v54 >> 2;
      v55 = (unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8;
      v56 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v55)
        v56 = v53;
      if (v56)
      {
        v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v56);
        v51 = (char *)v129;
        v31 = (char *)v130;
      }
      else
      {
        v57 = 0;
      }
      v58 = (std::__shared_weak_count *)(v56 + 8 * v52);
      v58->__vftable = (std::__shared_weak_count_vtbl *)v124;
      v50 = (unint64_t *)&v58->__shared_owners_;
      while (v31 != v51)
      {
        v59 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        v58[-1].__shared_weak_owners_ = v59;
        v58 = (std::__shared_weak_count *)((char *)v58 - 8);
      }
      v129 = v58;
      v130 = (std::__shared_weak_count *)v50;
      v131 = v56 + 8 * v57;
      if (v51)
        operator delete(v51);
    }
    else
    {
      *(_QWORD *)v31 = v124;
      v50 = (unint64_t *)(v31 + 8);
    }
    v130 = (std::__shared_weak_count *)v50;
    v60 = (unint64_t *)v129;
LABEL_101:
    if (v60 != v50)
    {
      v61 = *v60;
      v118[0] = (void *)*v60;
      if (!*((_QWORD *)&v134 + 1))
        goto LABEL_118;
      v62 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v134 + 8));
      v62.i16[0] = vaddlv_u8(v62);
      if (v62.u32[0] > 1uLL)
      {
        v63 = v61;
        if (v61 >= *((_QWORD *)&v134 + 1))
          v63 = v61 % *((_QWORD *)&v134 + 1);
      }
      else
      {
        v63 = (*((_QWORD *)&v134 + 1) - 1) & v61;
      }
      v64 = *(uint64_t ***)(v134 + 8 * v63);
      if (!v64 || (v65 = *v64) == 0)
      {
LABEL_118:
        v76 = 30;
        goto LABEL_119;
      }
      while (1)
      {
        v66 = v65[1];
        if (v61 == v66)
        {
          if (v65[2] == v61)
          {
            v76 = *((_DWORD *)v65 + 6);
LABEL_119:
            v67 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::constant_type_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)&v134, v61, v118);
            if (v76 >= v32)
              v68 = v32;
            else
              v68 = v76;
            *((_DWORD *)v67 + 6) = v68;
            if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::constant_type_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)&v134, v61, v118)+ 6))
            {
              v69 = *((_QWORD *)&v134 + 1);
              if (*((_QWORD *)&v134 + 1))
              {
                v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v134 + 8));
                v70.i16[0] = vaddlv_u8(v70);
                if (v70.u32[0] > 1uLL)
                {
                  v71 = v61;
                  if (v61 >= *((_QWORD *)&v134 + 1))
                    v71 = v61 % *((_QWORD *)&v134 + 1);
                }
                else
                {
                  v71 = (*((_QWORD *)&v134 + 1) - 1) & v61;
                }
                v72 = *(__int128 ***)(v134 + 8 * v71);
                if (v72)
                {
                  v73 = *v72;
                  if (*v72)
                  {
                    v74 = *((_QWORD *)&v134 + 1) - 1;
                    do
                    {
                      v75 = *((_QWORD *)v73 + 1);
                      if (v75 == v61)
                      {
                        if (*((_QWORD *)v73 + 2) == v61)
                        {
                          if (v70.u32[0] > 1uLL)
                          {
                            if (v61 >= *((_QWORD *)&v134 + 1))
                              v61 %= *((_QWORD *)&v134 + 1);
                          }
                          else
                          {
                            v61 &= v74;
                          }
                          v77 = *(__int128 **)(v134 + 8 * v61);
                          do
                          {
                            v78 = v77;
                            v77 = *(__int128 **)v77;
                          }
                          while (v77 != v73);
                          if (v78 == &v135)
                            goto LABEL_159;
                          v79 = *((_QWORD *)v78 + 1);
                          if (v70.u32[0] > 1uLL)
                          {
                            if (v79 >= *((_QWORD *)&v134 + 1))
                              v79 %= *((_QWORD *)&v134 + 1);
                          }
                          else
                          {
                            v79 &= v74;
                          }
                          if (v79 != v61)
                          {
LABEL_159:
                            if (!*(_QWORD *)v73)
                              goto LABEL_160;
                            v80 = *(_QWORD *)(*(_QWORD *)v73 + 8);
                            if (v70.u32[0] > 1uLL)
                            {
                              if (v80 >= *((_QWORD *)&v134 + 1))
                                v80 %= *((_QWORD *)&v134 + 1);
                            }
                            else
                            {
                              v80 &= v74;
                            }
                            if (v80 != v61)
LABEL_160:
                              *(_QWORD *)(v134 + 8 * v61) = 0;
                          }
                          v81 = *(_QWORD *)v73;
                          if (*(_QWORD *)v73)
                          {
                            v82 = *(_QWORD *)(v81 + 8);
                            if (v70.u32[0] > 1uLL)
                            {
                              if (v82 >= v69)
                                v82 %= v69;
                            }
                            else
                            {
                              v82 &= v74;
                            }
                            if (v82 != v61)
                            {
                              *(_QWORD *)(v134 + 8 * v82) = v78;
                              v81 = *(_QWORD *)v73;
                            }
                          }
                          *(_QWORD *)v78 = v81;
                          --*((_QWORD *)&v135 + 1);
                          operator delete(v73);
                          break;
                        }
                      }
                      else
                      {
                        if (v70.u32[0] > 1uLL)
                        {
                          if (v75 >= *((_QWORD *)&v134 + 1))
                            v75 %= *((_QWORD *)&v134 + 1);
                        }
                        else
                        {
                          v75 &= v74;
                        }
                        if (v75 != v71)
                          break;
                      }
                      v73 = *(__int128 **)v73;
                    }
                    while (v73);
                  }
                }
              }
            }
            ++v60;
            goto LABEL_101;
          }
        }
        else
        {
          if (v62.u32[0] > 1uLL)
          {
            if (v66 >= *((_QWORD *)&v134 + 1))
              v66 %= *((_QWORD *)&v134 + 1);
          }
          else
          {
            v66 &= *((_QWORD *)&v134 + 1) - 1;
          }
          if (v66 != v63)
            goto LABEL_118;
        }
        v65 = (uint64_t *)*v65;
        if (!v65)
          goto LABEL_118;
      }
    }
    if (__p)
    {
      v122 = (unint64_t *)__p;
      operator delete(__p);
    }

    v118[0] = &v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v118);
    if (v129)
    {
      v130 = v129;
      operator delete(v129);
    }
    v15 = v113;
    if (!v15)
      goto LABEL_178;
LABEL_174:
    v83 = (unint64_t *)&v15->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      v87 = v15;
      ((void (*)(void))v15->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v87);
      if (v114)
      {
LABEL_179:
        v85 = (unint64_t *)&v114->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
    }
    else
    {
LABEL_178:
      if (v114)
        goto LABEL_179;
    }
    v6 = v132 + 1;
    v132 = v6;
    v5 = *((_QWORD *)a1 + 4);
    v88 = *((_QWORD *)a1 + 5);
  }
  while (v6 < (v88 - v5) >> 4);
  if (v88 != v5)
  {
    v89 = 0;
    v90 = 0;
    do
    {
      v91 = *(_QWORD *)(*(_QWORD *)(v5 + v89) + 64);
      std::string::basic_string[abi:ne180100]<0>(v118, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((_QWORD *)(v91 + 240), (unsigned __int8 *)v118);
      if (v119 < 0)
        operator delete(v118[0]);
      ++v90;
      v5 = *((_QWORD *)a1 + 4);
      v89 += 16;
    }
    while (v90 < (*((_QWORD *)a1 + 5) - v5) >> 4);
  }
LABEL_190:
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (!*((_QWORD *)&v135 + 1))
  {
    *(_BYTE *)a2 = 0;
    goto LABEL_207;
  }
  v92 = (std::__shared_weak_count *)operator new(0x48uLL);
  v92->__shared_owners_ = 0;
  v92->__shared_weak_owners_ = 0;
  v92->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE618;
  v92[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D9E910;
  v92[2].__shared_weak_owners_ = 0;
  *(_OWORD *)&v92[1].__shared_owners_ = 0u;
  v92[2].std::__shared_count = 0u;
  LODWORD(v92[2].__shared_weak_owners_) = 1065353216;
  v129 = v92 + 1;
  v130 = v92;
  v93 = (uint64_t *)v135;
  if (!(_QWORD)v135)
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a2 + 8), (uint64_t)&v92[1], (uint64_t)v92);
    *(_BYTE *)a2 = 1;
LABEL_203:
    v101 = (unint64_t *)&v92->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
    goto LABEL_207;
  }
  v115 = (_QWORD *)(a2 + 8);
  do
  {
    v94 = *((_DWORD *)v93 + 6);
    v95 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v93[2]) + 64);
    std::string::basic_string[abi:ne180100]<0>(v118, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
    v126 = (std::string *)v118;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v95 + 240, (unsigned __int8 *)v118, (uint64_t)&std::piecewise_construct, (__int128 **)&v126)+ 10) = v94;
    if (v119 < 0)
      operator delete(v118[0]);
    v118[0] = v93 + 2;
    v96 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 96, (unint64_t *)v93 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)v118);
    v97 = (char *)v96[3];
    v98 = (char *)v96[4];
    if (v97 != v98)
    {
      v99 = &v129->__shared_owners_;
      do
      {
        v100 = *((_DWORD *)v93 + 6);
        v118[0] = v97;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,Espresso::constant_type_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::constant_type_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v99, (unsigned __int8 *)v97, (__int128 **)v118)+ 10) = v100;
        v97 += 24;
      }
      while (v97 != v98);
    }
    v93 = (uint64_t *)*v93;
  }
  while (v93);
  v92 = v130;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v115, (uint64_t)v129, (uint64_t)v130);
  *v111 = 1;
  if (v92)
    goto LABEL_203;
LABEL_207:
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v133[2]);
  v103 = (void *)v133[0];
  v133[0] = 0;
  if (v103)
    operator delete(v103);
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v134);
}

void sub_191364038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v57);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v58 - 200);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v58 - 160);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso27pass_constant_if_conditions14run_on_networkERNS_3netE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 16 * a2);
  v3 = *(const void **)(v2 + 64);
  if (!v3
  {
    return 1;
  }
  v4 = *(std::__shared_weak_count **)(v2 + 72);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return 0;
}

void Espresso::net::recurse_layer_producers(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  unsigned int (**v10)(id, unint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::string v35;
  unint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  _OWORD v39[2];
  int v40;
  uint64_t v41;

  v41 = a3;
  v10 = a6;
  memset(v39, 0, sizeof(v39));
  v40 = 1065353216;
  v38 = 0u;
  memset(v37, 0, sizeof(v37));
  std::deque<unsigned long>::push_back(v37, &v41);
  v11 = *((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v12 = a1 + 56;
    do
    {
      v36 = 0;
      v13 = v11 - 1;
      v36 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v37[0] + 1)
                                  + (((unint64_t)(v38 + v13) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v38 + v13) & 0x1FF));
      *((_QWORD *)&v38 + 1) = v13;
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v37);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v39, &v36, &v36);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v12, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35);
      v16 = (__int128 *)v14[3];
      v15 = (__int128 *)v14[4];
      while (v16 != v15)
      {
        if (*((char *)v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
        }
        else
        {
          v17 = *v16;
          v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v17;
        }
        v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a2, (uint64_t)&v35);
        if (v18)
        {
          v19 = v18[5];
          v34 = v19;
          if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v39, v19))
          {
            std::deque<unsigned long>::push_back(v37, &v34);
            if (!v10 || v10[2](v10, v19))
            {
              v21 = *(unint64_t **)(a4 + 8);
              v20 = *(_QWORD *)(a4 + 16);
              if ((unint64_t)v21 >= v20)
              {
                v26 = *(unint64_t **)a4;
                v27 = ((uint64_t)v21 - *(_QWORD *)a4) >> 3;
                v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v29 = v20 - (_QWORD)v26;
                if (v29 >> 2 > v28)
                  v28 = v29 >> 2;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                  v30 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v30);
                  v26 = *(unint64_t **)a4;
                  v21 = *(unint64_t **)(a4 + 8);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (unint64_t *)(v30 + 8 * v27);
                *v32 = v19;
                v22 = v32 + 1;
                while (v21 != v26)
                {
                  v33 = *--v21;
                  *--v32 = v33;
                }
                *(_QWORD *)a4 = v32;
                *(_QWORD *)(a4 + 8) = v22;
                *(_QWORD *)(a4 + 16) = v30 + 8 * v31;
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *v21 = v19;
                v22 = v21 + 1;
              }
              *(_QWORD *)(a4 + 8) = v22;
            }
          }
        }
        else
        {
          v23 = *(_QWORD *)(a5 + 8);
          if (v23 >= *(_QWORD *)(a5 + 16))
          {
            v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v35);
          }
          else
          {
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
            }
            else
            {
              v24 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
              *(_QWORD *)(v23 + 16) = *((_QWORD *)&v35.__r_.__value_.__l + 2);
              *(_OWORD *)v23 = v24;
            }
            v25 = (std::string *)(v23 + 24);
            *(_QWORD *)(a5 + 8) = v23 + 24;
          }
          *(_QWORD *)(a5 + 8) = v25;
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        v16 = (__int128 *)((char *)v16 + 24);
      }
      v11 = *((_QWORD *)&v38 + 1);
    }
    while (*((_QWORD *)&v38 + 1));
  }
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)v37);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v39);

}

void sub_191364514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)&a18);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a24);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::constant_type_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_191364948(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = *((_QWORD *)v3 + 1);
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(unsigned __int8 **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = *(unsigned __int8 **)v7;
    }
    while (v7 != v3);
    if (v8 == (unsigned __int8 *)(a1 + 2))
      goto LABEL_20;
    v9 = *((_QWORD *)v8 + 1);
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*(_QWORD *)v3)
        goto LABEL_21;
      v10 = *(_QWORD *)(*(_QWORD *)v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_21:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *(_QWORD *)v3;
      }
    }
    *(_QWORD *)v8 = v11;
    *(_QWORD *)v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, (void **)v3);
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,Espresso::constant_type_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::constant_type_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v18 = a1 + 2;
  *((_DWORD *)v13 + 10) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v13 = *v37;
LABEL_75:
    *v37 = v13;
    goto LABEL_76;
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v13)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_191364ECC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_constant_if_conditions_result::~pass_constant_if_conditions_result(Espresso::pass_constant_if_conditions_result *this)
{
  *(_QWORD *)this = &off_1E2D9E910;
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2D9E910;
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::pass_constant_if_conditions_result::deserialize(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 *v17;
  void **p_p;

  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "constant_blobs");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v3 + 120))(&v15, v3, &__p);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  if (v15)
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 32))(v15, &__p);
    v4 = (__int128 *)__p;
    v5 = v13;
    if (__p != v13)
    {
      v6 = (uint64_t *)(a1 + 8);
      do
      {
        v7 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 40))(v15, v4);
        v17 = v4;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,Espresso::constant_type_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::constant_type_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)v4, &v17)+ 10) = v7;
        v4 = (__int128 *)((char *)v4 + 24);
      }
      while (v4 != v5);
    }
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 0;
}

void sub_191365080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 40) = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::pass_constant_if_conditions_result::serialize(Espresso::pass_constant_if_conditions_result *this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t *i;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  v5 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v11, (uint64_t)v5, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  for (i = (uint64_t *)*((_QWORD *)this + 3); i; i = (uint64_t *)*i)
  {
    LODWORD(__p[0]) = *((_DWORD *)i + 10);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v11 + 160))(v11, i + 2, __p);
  }
  v7 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "constant_blobs");
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v7 + 240))(v7, __p, &v11);
  if (v14 < 0)
    operator delete(__p[0]);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191365204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE618;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 6) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void Espresso::net_compiler::~net_compiler(Espresso::net_compiler *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = off_1E2D5FD08;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void Espresso::net::get_stride_configuration(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const void **v19;
  unsigned __int8 *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  char *v46;
  unint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type size;
  char v52;
  std::string *v53;
  void ***v54;
  void ***v55;
  void ***v56;
  void **v57;
  void **v58;
  void **v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  _DWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t (*v80)(void *);
  int v81;
  unint64_t v82;
  int *v83;
  int *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int *v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  char *v100;
  _DWORD *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  int v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  _DWORD *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  int v124;
  unint64_t v125;
  char *v126;
  _DWORD *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  _DWORD *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  int v148;
  unint64_t *v149;
  unint64_t v150;
  void **v151;
  void **v152;
  void **v153;
  std::string v154;
  int64x2_t v155;
  char *v156;
  void **v157;
  int64x2_t v158;
  char *v159;
  char **v160;

  *(_OWORD *)(a3 + 8) = 0u;
  v153 = (void **)(a3 + 8);
  *(_QWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)a3 = 0;
  v155 = 0uLL;
  v156 = 0;
  v4 = *(uint64_t **)(a1 + 32);
  v5 = *(uint64_t **)(a1 + 40);
  if (v4 == v5)
    goto LABEL_76;
  v8 = 0;
  v9 = 0xFFFFFFFFLL;
  do
  {
    v10 = *v4;
    v11 = (std::__shared_weak_count *)v4[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = *(unsigned __int8 *)(v10 + 39);
    v15 = *(_QWORD *)(v10 + 24);
    if ((v14 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v10 + 39);
    else
      v16 = *(_QWORD *)(v10 + 24);
    v17 = a2[23];
    v18 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *((_QWORD *)a2 + 1);
    if (v16 == v17)
    {
      v19 = (const void **)(v10 + 16);
      if (v18 >= 0)
        v20 = a2;
      else
        v20 = *(unsigned __int8 **)a2;
      if ((v14 & 0x80) != 0)
      {
        if (!memcmp(*v19, v20, v15))
LABEL_21:
          v9 = v8;
      }
      else
      {
        if (!(_DWORD)v14)
          goto LABEL_21;
        while (*(unsigned __int8 *)v19 == *v20)
        {
          v19 = (const void **)((char *)v19 + 1);
          ++v20;
          if (!--v14)
            goto LABEL_21;
        }
      }
    }
    if (v11)
    {
      v21 = (unint64_t *)&v11->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    ++v8;
    v4 += 2;
  }
  while (v4 != v5);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_76;
  while (1)
  {
LABEL_29:
    v157 = (void **)v9;
    v23 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v9, &v157)[3];
    if (*((char *)v23 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
    }
    else
    {
      v24 = *v23;
      v154.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v24;
    }
    v25 = *(_QWORD *)(a1 + 32);
    v26 = v155.i64[1];
    if (v155.i64[1] >= (unint64_t)v156)
    {
      v31 = (v155.i64[1] - v155.i64[0]) >> 4;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v33 = (uint64_t)&v156[-v155.i64[0]];
      if ((uint64_t)&v156[-v155.i64[0]] >> 3 > v32)
        v32 = v33 >> 3;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
        v34 = 0xFFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      v160 = &v156;
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v34);
      v37 = &v35[16 * v31];
      v38 = *(_OWORD *)(v25 + 16 * v9);
      *(_OWORD *)v37 = v38;
      if (*((_QWORD *)&v38 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = (_QWORD *)v155.i64[1];
      v42 = (_QWORD *)v155.i64[0];
      if (v155.i64[1] == v155.i64[0])
      {
        v45 = vdupq_n_s64(v155.u64[1]);
        v43 = &v35[16 * v31];
      }
      else
      {
        v43 = &v35[16 * v31];
        do
        {
          v44 = *((_OWORD *)v41 - 1);
          v41 -= 2;
          *((_OWORD *)v43 - 1) = v44;
          v43 -= 16;
          *v41 = 0;
          v41[1] = 0;
        }
        while (v41 != v42);
        v45 = v155;
      }
      v30 = v37 + 16;
      v155.i64[0] = (uint64_t)v43;
      v155.i64[1] = (uint64_t)(v37 + 16);
      v158 = v45;
      v46 = v156;
      v156 = &v35[16 * v36];
      v159 = v46;
      v157 = (void **)v45.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v157);
    }
    else
    {
      v27 = *(_OWORD *)(v25 + 16 * v9);
      *(_OWORD *)v155.i64[1] = v27;
      if (*((_QWORD *)&v27 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (_OWORD *)(v26 + 16);
    }
    v155.i64[1] = (uint64_t)v30;
    if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
      break;
    v47 = 0;
    v9 = 0xFFFFFFFFLL;
    do
    {
      v157 = (void **)v47;
      v48 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 96, v47, &v157)[3];
      v49 = v48[23];
      if ((v49 & 0x80u) == 0)
        v50 = v48[23];
      else
        v50 = *((_QWORD *)v48 + 1);
      size = HIBYTE(v154.__r_.__value_.__r.__words[2]);
      v52 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
      if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v154.__r_.__value_.__l.__size_;
      if (v50 == size)
      {
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v154;
        else
          v53 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if ((v49 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v48, v53, *((_QWORD *)v48 + 1)))
            goto LABEL_70;
LABEL_69:
          v9 = v47;
          goto LABEL_70;
        }
        if (!v48[23])
          goto LABEL_69;
        while (*v48 == v53->__r_.__value_.__s.__data_[0])
        {
          ++v48;
          v53 = (std::string *)((char *)v53 + 1);
          if (!--v49)
            goto LABEL_69;
        }
      }
LABEL_70:
      ++v47;
    }
    while (v47 < (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4);
    if ((v52 & 0x80) == 0)
      goto LABEL_72;
LABEL_75:
    operator delete(v154.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) != 0)
      goto LABEL_76;
  }
  v9 = 0xFFFFFFFFLL;
  if ((*((_BYTE *)&v154.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_75;
LABEL_72:
  if ((v9 & 0x80000000) == 0)
    goto LABEL_29;
LABEL_76:
  v54 = (void ***)v155.i64[1];
  v55 = (void ***)v155.i64[0];
  if (v155.i64[0] != v155.i64[1])
  {
    v56 = (void ***)(v155.i64[1] - 16);
    if ((unint64_t)(v155.i64[1] - 16) > v155.i64[0])
    {
      do
      {
        v57 = *v55;
        *v55 = *v56;
        *v56 = v57;
        v58 = v55[1];
        v55[1] = v56[1];
        v56[1] = v58;
        v55 += 2;
        v56 -= 2;
      }
      while (v55 < v56);
      v54 = (void ***)v155.i64[1];
      v55 = (void ***)v155.i64[0];
    }
  }
  if (v55 != v54)
  {
    v151 = (void **)(a3 + 32);
    v152 = (void **)(a3 + 56);
    while (2)
    {
      v59 = *v55;
      v60 = (std::__shared_weak_count *)v55[1];
      v157 = *v55;
      v158.i64[0] = (uint64_t)v60;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v63 = v59[8];
      if (!v63)
        goto LABEL_204;
      if (!v64)
        goto LABEL_154;
      v65 = v64;
      v66 = (*(uint64_t (**)(void *))(*(_QWORD *)v64 + 384))(v64);
      v67 = v66;
      v69 = *(char **)(a3 + 16);
      v68 = *(_QWORD *)(a3 + 24);
      if ((unint64_t)v69 >= v68)
      {
        v71 = (char *)*v153;
        v72 = (v69 - (_BYTE *)*v153) >> 2;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v74 = v68 - (_QWORD)v71;
        if (v74 >> 1 > v73)
          v73 = v74 >> 1;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
          v75 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v75);
          v71 = *(char **)(a3 + 8);
          v69 = *(char **)(a3 + 16);
        }
        else
        {
          v76 = 0;
        }
        v77 = (_DWORD *)(v75 + 4 * v72);
        *v77 = *(_DWORD *)(v67 + 48);
        v70 = v77 + 1;
        while (v69 != v71)
        {
          v78 = *((_DWORD *)v69 - 1);
          v69 -= 4;
          *--v77 = v78;
        }
        *(_QWORD *)(a3 + 8) = v77;
        *(_QWORD *)(a3 + 16) = v70;
        *(_QWORD *)(a3 + 24) = v75 + 4 * v76;
        if (v71)
          operator delete(v71);
      }
      else
      {
        *(_DWORD *)v69 = *(_DWORD *)(v66 + 48);
        v70 = v69 + 4;
      }
      *(_QWORD *)(a3 + 16) = v70;
      v79 = (*(uint64_t (**)(void *))(*(_QWORD *)v65 + 384))(v65);
      v80 = *(uint64_t (**)(void *))(*(_QWORD *)v65 + 384);
      if (*(_WORD *)(v79 + 72))
      {
        if (*(_WORD *)(v80(v65) + 72) == 2
          || *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v65 + 384))(v65) + 72) == 3)
        {
          v81 = 0;
        }
        else
        {
          v81 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v65 + 384))(v65) + 48) / 2;
        }
        v83 = *(int **)(a3 + 64);
        v90 = *(_QWORD *)(a3 + 72);
        if ((unint64_t)v83 < v90)
        {
LABEL_118:
          *v83 = v81;
          v91 = v83 + 1;
LABEL_137:
          *(_QWORD *)(a3 + 64) = v91;
          v98 = *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v65 + 384))(v65) + 92);
          v100 = *(char **)(a3 + 40);
          v99 = *(_QWORD *)(a3 + 48);
          if ((unint64_t)v100 >= v99)
          {
            v102 = (char *)*v151;
            v103 = (v100 - (_BYTE *)*v151) >> 2;
            v104 = v103 + 1;
            if ((unint64_t)(v103 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v105 = v99 - (_QWORD)v102;
            if (v105 >> 1 > v104)
              v104 = v105 >> 1;
            if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
              v106 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v106 = v104;
            if (v106)
            {
              v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v106);
              v102 = *(char **)(a3 + 32);
              v100 = *(char **)(a3 + 40);
            }
            else
            {
              v107 = 0;
            }
            v108 = (_DWORD *)(v106 + 4 * v103);
            *v108 = v98;
            v101 = v108 + 1;
            while (v100 != v102)
            {
              v109 = *((_DWORD *)v100 - 1);
              v100 -= 4;
              *--v108 = v109;
            }
            *(_QWORD *)(a3 + 32) = v108;
            *(_QWORD *)(a3 + 40) = v101;
            *(_QWORD *)(a3 + 48) = v106 + 4 * v107;
            if (v102)
              operator delete(v102);
          }
          else
          {
            *(_DWORD *)v100 = v98;
            v101 = v100 + 4;
          }
          *(_QWORD *)(a3 + 40) = v101;
          ++*(_DWORD *)a3;
          v63 = v59[8];
          if (v63)
          {
LABEL_154:
            if (v110)
            {
              v111 = v110;
              v112 = (*(uint64_t (**)(void *))(*(_QWORD *)v110 + 384))(v110);
              v113 = v112;
              v115 = *(char **)(a3 + 16);
              v114 = *(_QWORD *)(a3 + 24);
              if ((unint64_t)v115 >= v114)
              {
                v117 = (char *)*v153;
                v118 = (v115 - (_BYTE *)*v153) >> 2;
                v119 = v118 + 1;
                if ((unint64_t)(v118 + 1) >> 62)
                  goto LABEL_215;
                v120 = v114 - (_QWORD)v117;
                if (v120 >> 1 > v119)
                  v119 = v120 >> 1;
                if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
                  v121 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v121 = v119;
                if (v121)
                {
                  v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v121);
                  v117 = *(char **)(a3 + 8);
                  v115 = *(char **)(a3 + 16);
                }
                else
                {
                  v122 = 0;
                }
                v123 = (_DWORD *)(v121 + 4 * v118);
                *v123 = *(_DWORD *)(v113 + 4);
                v116 = v123 + 1;
                while (v115 != v117)
                {
                  v124 = *((_DWORD *)v115 - 1);
                  v115 -= 4;
                  *--v123 = v124;
                }
                *(_QWORD *)(a3 + 8) = v123;
                *(_QWORD *)(a3 + 16) = v116;
                *(_QWORD *)(a3 + 24) = v121 + 4 * v122;
                if (v117)
                  operator delete(v117);
              }
              else
              {
                *(_DWORD *)v115 = *(_DWORD *)(v112 + 4);
                v116 = v115 + 4;
              }
              *(_QWORD *)(a3 + 16) = v116;
              v126 = *(char **)(a3 + 64);
              v125 = *(_QWORD *)(a3 + 72);
              if ((unint64_t)v126 >= v125)
              {
                v128 = (char *)*v152;
                v129 = (v126 - (_BYTE *)*v152) >> 2;
                v130 = v129 + 1;
                if ((unint64_t)(v129 + 1) >> 62)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v131 = v125 - (_QWORD)v128;
                if (v131 >> 1 > v130)
                  v130 = v131 >> 1;
                if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
                  v132 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v132 = v130;
                if (v132)
                {
                  v132 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v132);
                  v128 = *(char **)(a3 + 56);
                  v126 = *(char **)(a3 + 64);
                }
                else
                {
                  v133 = 0;
                }
                v134 = (_DWORD *)(v132 + 4 * v129);
                *v134 = 0;
                v127 = v134 + 1;
                while (v126 != v128)
                {
                  v135 = *((_DWORD *)v126 - 1);
                  v126 -= 4;
                  *--v134 = v135;
                }
                *(_QWORD *)(a3 + 56) = v134;
                *(_QWORD *)(a3 + 64) = v127;
                *(_QWORD *)(a3 + 72) = v132 + 4 * v133;
                if (v128)
                  operator delete(v128);
              }
              else
              {
                *(_DWORD *)v126 = 0;
                v127 = v126 + 4;
              }
              *(_QWORD *)(a3 + 64) = v127;
              v136 = (*(uint64_t (**)(void *))(*(_QWORD *)v111 + 384))(v111);
              v137 = v136;
              v139 = *(char **)(a3 + 40);
              v138 = *(_QWORD *)(a3 + 48);
              if ((unint64_t)v139 >= v138)
              {
                v141 = (char *)*v151;
                v142 = (v139 - (_BYTE *)*v151) >> 2;
                v143 = v142 + 1;
                if ((unint64_t)(v142 + 1) >> 62)
LABEL_215:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v144 = v138 - (_QWORD)v141;
                if (v144 >> 1 > v143)
                  v143 = v144 >> 1;
                if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
                  v145 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v145 = v143;
                if (v145)
                {
                  v145 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v145);
                  v141 = *(char **)(a3 + 32);
                  v139 = *(char **)(a3 + 40);
                }
                else
                {
                  v146 = 0;
                }
                v147 = (_DWORD *)(v145 + 4 * v142);
                *v147 = *(_DWORD *)(v137 + 16);
                v140 = v147 + 1;
                while (v139 != v141)
                {
                  v148 = *((_DWORD *)v139 - 1);
                  v139 -= 4;
                  *--v147 = v148;
                }
                *(_QWORD *)(a3 + 32) = v147;
                *(_QWORD *)(a3 + 40) = v140;
                *(_QWORD *)(a3 + 48) = v145 + 4 * v146;
                if (v141)
                  operator delete(v141);
              }
              else
              {
                *(_DWORD *)v139 = *(_DWORD *)(v136 + 16);
                v140 = v139 + 4;
              }
              *(_QWORD *)(a3 + 40) = v140;
              ++*(_DWORD *)a3;
            }
          }
LABEL_204:
          if (v60)
          {
            v149 = (unint64_t *)&v60->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v55 += 2;
          if (v55 == v54)
            goto LABEL_210;
          continue;
        }
        v84 = (int *)*v152;
        v92 = ((char *)v83 - (_BYTE *)*v152) >> 2;
        v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v94 = v90 - (_QWORD)v84;
        if (v94 >> 1 > v93)
          v93 = v94 >> 1;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
          v88 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v88 = v93;
        if (v88)
        {
          v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v88);
          v84 = *(int **)(a3 + 56);
          v83 = *(int **)(a3 + 64);
        }
        else
        {
          v89 = 0;
        }
        v95 = (int *)(v88 + 4 * v92);
        *v95 = v81;
        v91 = v95 + 1;
        while (v83 != v84)
        {
          v96 = *--v83;
          *--v95 = v96;
        }
      }
      else
      {
        v81 = *(__int16 *)(v80(v65) + 80);
        v83 = *(int **)(a3 + 64);
        v82 = *(_QWORD *)(a3 + 72);
        if ((unint64_t)v83 < v82)
          goto LABEL_118;
        v84 = (int *)*v152;
        v85 = ((char *)v83 - (_BYTE *)*v152) >> 2;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v87 = v82 - (_QWORD)v84;
        if (v87 >> 1 > v86)
          v86 = v87 >> 1;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
          v88 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v88);
          v84 = *(int **)(a3 + 56);
          v83 = *(int **)(a3 + 64);
        }
        else
        {
          v89 = 0;
        }
        v95 = (int *)(v88 + 4 * v85);
        *v95 = v81;
        v91 = v95 + 1;
        while (v83 != v84)
        {
          v97 = *--v83;
          *--v95 = v97;
        }
      }
      break;
    }
    *(_QWORD *)(a3 + 56) = v95;
    *(_QWORD *)(a3 + 64) = v91;
    *(_QWORD *)(a3 + 72) = v88 + 4 * v89;
    if (v84)
      operator delete(v84);
    goto LABEL_137;
  }
LABEL_210:
  v157 = (void **)&v155;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v157);
}

