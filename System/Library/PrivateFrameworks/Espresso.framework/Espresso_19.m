void sub_19158BD54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *MMatrix<short>::MMatrix(_QWORD *a1, int a2, int a3, float a4)
{
  int v6;
  void *v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v12;
  float v13;

  v6 = a3 * a2;
  v7 = (void *)operator new[]();
  *a1 = v7;
  bzero(v7, 2 * v6);
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = a4 + a4;
    v10 = -a4;
    v11 = 2 * v6;
    do
    {
      rgen();
      v13 = (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
      rgen();
      *(_WORD *)(*a1 + v8) = (int)(float)(v10 + (float)(v9 * (float)(v13 * 2.3283e-10)));
      v8 += 2;
    }
    while (v11 != v8);
  }
  return a1;
}

uint64_t *VVector<short>::VVector(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v6;
  float v7;

  *a1 = operator new[]();
  if (a2 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    do
    {
      rgen();
      v7 = (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v6);
      rgen();
      *(_WORD *)(*a1 + v4) = (int)(float)((float)((float)(v7 * 2.3283e-10) * 0.2) + -0.1);
      v4 += 2;
    }
    while (v5 != v4);
  }
  return a1;
}

void GRU<short>::targets()
{
  exitFramework(1);
}

uint64_t GRU<short>::inputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t GRU<short>::outputs(uint64_t a1)
{
  return a1 + 112;
}

void GRU<short>::deltas()
{
  exitFramework(1);
}

uint64_t GRU<short>::inputDeltas(uint64_t a1)
{
  return a1 + 608;
}

uint64_t GRU<short>::weightsAreNaN()
{
  return 0;
}

uint64_t GRU<short>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  int v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  __int16 **v18;
  int v19;
  char v21[8];

  v5 = (int)a4;
  *(_QWORD *)v21 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v21[4], v21, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((_DWORD *)this + 18);
    v10 = *(_QWORD *)this;
    v11 = (int *)(*(_QWORD *)this + v9);
    v12 = *(_QWORD *)this + *((_QWORD *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      v13 = 0;
    }
    v14 = v9;
    *(_DWORD *)(a1 + 568) = v13;
    if (v10 + v9 <= v12)
    {
      v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      v14 = v9;
    }
    else
    {
      v15 = 0;
    }
    *(_DWORD *)(a1 + 572) = v15;
    v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v17 = 0;
    }
    *(_DWORD *)(a1 + 576) = v17;
  }
  v18 = (__int16 **)*(unsigned int *)(a1 + 52);
  if ((_DWORD)v18 != *(_DWORD *)&v21[4] || (v19 = *(_DWORD *)(a1 + 48), v19 != *(_DWORD *)v21))
    exitFramework(3);
  MMatrix<short>::read(*(char **)(a1 + 336), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), v18, v19);
  MMatrix<short>::read(*(char **)(a1 + 328), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 344), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 360), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<short>::read(*(char **)(a1 + 352), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  return MMatrix<short>::read(*(char **)(a1 + 368), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void GRU<short>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 568);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 572);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 576);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  MMatrix<short>::write(*(__int16 ***)(a1 + 336), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
}

void sub_19158C1A0()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 328), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_19158C1B8()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 344), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_19158C1D0()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 360), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_19158C1EC()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 352), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_19158C208(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int *v19;
  FILE *v20;
  uint64_t v21;

  MMatrix<short>::write(*(__int16 ***)(v21 + 368), v20, v19, v18, *(_DWORD *)(v21 + 52), *(_DWORD *)(v21 + 52));
}

_QWORD **GRU<short>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD **v5;
  _QWORD **result;
  int v7;
  uint64_t v8;
  __int16 *v9;
  __int16 *v10;
  _WORD *v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 *v16;
  __int16 *v17;
  _WORD *v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 *v23;
  __int16 *v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  uint64_t v29;
  __int16 *v30;
  __int16 *v31;
  _WORD *v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 *v37;
  __int16 *v38;
  _WORD *v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 *v44;
  __int16 *v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  result = 0;
LABEL_6:
  v7 = *(_DWORD *)(a1 + 52);
  v8 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v8 >= 1)
  {
    v9 = (__int16 *)*result[42];
    v10 = (__int16 *)*v5[42];
    v11 = **(_WORD ***)(a1 + 336);
    v12 = (*(_DWORD *)(a1 + 48) * v7);
    do
    {
      v14 = *v9++;
      v13 = v14;
      v15 = *v10++;
      *v11++ = v13 - v15;
      --v12;
    }
    while (v12);
    v16 = (__int16 *)*result[43];
    v17 = (__int16 *)*v5[43];
    v18 = **(_WORD ***)(a1 + 344);
    v19 = v8;
    do
    {
      v21 = *v16++;
      v20 = v21;
      v22 = *v17++;
      *v18++ = v20 - v22;
      --v19;
    }
    while (v19);
    v23 = (__int16 *)*result[41];
    v24 = (__int16 *)*v5[41];
    v25 = **(_WORD ***)(a1 + 328);
    do
    {
      v27 = *v23++;
      v26 = v27;
      v28 = *v24++;
      *v25++ = v26 - v28;
      --v8;
    }
    while (v8);
  }
  if (v7)
  {
    v29 = (v7 * v7);
    v30 = (__int16 *)*result[45];
    v31 = (__int16 *)*v5[45];
    v32 = **(_WORD ***)(a1 + 360);
    v33 = v29;
    do
    {
      v35 = *v30++;
      v34 = v35;
      v36 = *v31++;
      *v32++ = v34 - v36;
      --v33;
    }
    while (v33);
    v37 = (__int16 *)*result[46];
    v38 = (__int16 *)*v5[46];
    v39 = **(_WORD ***)(a1 + 368);
    v40 = v29;
    do
    {
      v42 = *v37++;
      v41 = v42;
      v43 = *v38++;
      *v39++ = v41 - v43;
      --v40;
    }
    while (v40);
    v44 = (__int16 *)*result[44];
    v45 = (__int16 *)*v5[44];
    v46 = **(_WORD ***)(a1 + 352);
    do
    {
      v48 = *v44++;
      v47 = v48;
      v49 = *v45++;
      *v46++ = v47 - v49;
      --v29;
    }
    while (v29);
  }
  return result;
}

void GRU<short>::compareModels(uint64_t a1, void *lpsrc, _QWORD **a3)
{
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  void *__p;

  v3 = a3;
  if (lpsrc)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
LABEL_3:
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  v6 = (*(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
  if ((int)v6 <= 0)
  {
    v11 = __p;
LABEL_15:
    v12 = *v11 | 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    do
    {
      while (!v8)
      {
        v8 = 0;
        if (++v7 == v6)
        {
          v11 = __p;
          goto LABEL_16;
        }
      }
      v9 = *(unsigned __int16 *)(*v3[42] + 2 * v7);
      v10 = *(unsigned __int16 *)(*v5[42] + 2 * v7);
      v8 = v9 == v10;
      ++v7;
    }
    while (v7 != v6);
    v11 = __p;
    if (v9 == v10)
      goto LABEL_15;
LABEL_16:
    v12 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  *v11 = v12;
  if ((int)v6 < 1)
  {
LABEL_25:
    v17 = v12 | 2;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    do
    {
      while (!v14)
      {
        v14 = 0;
        if (++v13 == v6)
          goto LABEL_26;
      }
      v15 = *(unsigned __int16 *)(*v3[43] + 2 * v13);
      v16 = *(unsigned __int16 *)(*v5[43] + 2 * v13);
      v14 = v15 == v16;
      ++v13;
    }
    while (v13 != v6);
    if (v15 == v16)
      goto LABEL_25;
LABEL_26:
    v17 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *v11 = v17;
  if ((int)v6 < 1)
  {
LABEL_35:
    v22 = v17 | 4;
  }
  else
  {
    v18 = 0;
    v19 = 1;
    do
    {
      while (!v19)
      {
        v19 = 0;
        if (++v18 == v6)
          goto LABEL_36;
      }
      v20 = *(unsigned __int16 *)(*v3[41] + 2 * v18);
      v21 = *(unsigned __int16 *)(*v5[41] + 2 * v18);
      v19 = v20 == v21;
      ++v18;
    }
    while (v18 != v6);
    if (v20 == v21)
      goto LABEL_35;
LABEL_36:
    v22 = v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *v11 = v22;
  if ((int)v6 < 1)
  {
LABEL_45:
    v27 = v22 | 1;
  }
  else
  {
    v23 = 0;
    v24 = 1;
    do
    {
      while (!v24)
      {
        v24 = 0;
        if (++v23 == v6)
          goto LABEL_46;
      }
      v25 = *(unsigned __int16 *)(*v3[45] + 2 * v23);
      v26 = *(unsigned __int16 *)(*v5[45] + 2 * v23);
      v24 = v25 == v26;
      ++v23;
    }
    while (v23 != v6);
    if (v25 == v26)
      goto LABEL_45;
LABEL_46:
    v27 = v22 & 0xFFFFFFFFFFFFFFFELL;
  }
  *v11 = v27;
  if ((int)v6 >= 1)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      v29 = v29 && *(unsigned __int16 *)(*v3[46] + 2 * v28) == *(unsigned __int16 *)(*v5[46] + 2 * v28);
      ++v28;
    }
    while (v28 != v6);
  }
  operator delete(v11);
}

_QWORD **GRU<short>::addGradient(uint64_t a1, void *lpsrc)
{
  _QWORD **result;
  int v4;
  uint64_t v5;
  _WORD *v6;
  __int16 *v7;
  uint64_t v8;
  __int16 v9;
  _WORD *v10;
  __int16 *v11;
  uint64_t v12;
  __int16 v13;
  _WORD *v14;
  __int16 *v15;
  __int16 v16;
  uint64_t v17;
  _WORD *v18;
  __int16 *v19;
  uint64_t v20;
  __int16 v21;
  _WORD *v22;
  __int16 *v23;
  uint64_t v24;
  __int16 v25;
  _WORD *v26;
  __int16 *v27;
  __int16 v28;

  if (lpsrc)
  else
    result = 0;
  v4 = *(_DWORD *)(a1 + 52);
  v5 = (*(_DWORD *)(a1 + 48) * v4);
  if ((int)v5 >= 1)
  {
    v6 = **(_WORD ***)(a1 + 336);
    v7 = (__int16 *)*result[42];
    v8 = (*(_DWORD *)(a1 + 48) * v4);
    do
    {
      v9 = *v7++;
      *v6++ += v9;
      --v8;
    }
    while (v8);
    v10 = **(_WORD ***)(a1 + 328);
    v11 = (__int16 *)*result[41];
    v12 = v5;
    do
    {
      v13 = *v11++;
      *v10++ += v13;
      --v12;
    }
    while (v12);
    v14 = **(_WORD ***)(a1 + 344);
    v15 = (__int16 *)*result[43];
    do
    {
      v16 = *v15++;
      *v14++ += v16;
      --v5;
    }
    while (v5);
  }
  if (v4)
  {
    v17 = (v4 * v4);
    v18 = **(_WORD ***)(a1 + 360);
    v19 = (__int16 *)*result[45];
    v20 = v17;
    do
    {
      v21 = *v19++;
      *v18++ += v21;
      --v20;
    }
    while (v20);
    v22 = **(_WORD ***)(a1 + 352);
    v23 = (__int16 *)*result[44];
    v24 = v17;
    do
    {
      v25 = *v23++;
      *v22++ += v25;
      --v24;
    }
    while (v24);
    v26 = **(_WORD ***)(a1 + 368);
    v27 = (__int16 *)*result[46];
    do
    {
      v28 = *v27++;
      *v26++ += v28;
      --v17;
    }
    while (v17);
  }
  return result;
}

void GRU<short>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1176) + 64))(*(_QWORD *)(a1 + 1176));
  exitFramework(23);
}

uint64_t GRU<short>::clipModel(uint64_t result, float a2)
{
  float v2;
  int v3;
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  float v7;
  float v8;
  __int16 *v9;
  uint64_t v10;
  float v11;
  float v12;
  __int16 *v13;
  float v14;
  float v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  float v19;
  float v20;
  __int16 *v21;
  uint64_t v22;
  float v23;
  float v24;
  __int16 *v25;
  float v26;
  float v27;

  v2 = -a2;
  v3 = *(_DWORD *)(result + 52);
  v4 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v4 >= 1)
  {
    v5 = **(__int16 ***)(result + 336);
    v6 = (*(_DWORD *)(result + 48) * v3);
    do
    {
      v7 = (float)*v5;
      v8 = -a2;
      if (v7 < v2 || (v8 = a2, v7 > a2))
        *v5 = (int)v8;
      ++v5;
      --v6;
    }
    while (v6);
    v9 = **(__int16 ***)(result + 328);
    v10 = v4;
    do
    {
      v11 = (float)*v9;
      v12 = -a2;
      if (v11 < v2 || (v12 = a2, v11 > a2))
        *v9 = (int)v12;
      ++v9;
      --v10;
    }
    while (v10);
    v13 = **(__int16 ***)(result + 344);
    do
    {
      v14 = (float)*v13;
      v15 = -a2;
      if (v14 < v2 || (v15 = a2, v14 > a2))
        *v13 = (int)v15;
      ++v13;
      --v4;
    }
    while (v4);
  }
  if (v3)
  {
    v16 = (v3 * v3);
    v17 = **(__int16 ***)(result + 360);
    v18 = v16;
    do
    {
      v19 = (float)*v17;
      v20 = -a2;
      if (v19 < v2 || (v20 = a2, v19 > a2))
        *v17 = (int)v20;
      ++v17;
      --v18;
    }
    while (v18);
    v21 = **(__int16 ***)(result + 352);
    v22 = v16;
    do
    {
      v23 = (float)*v21;
      v24 = -a2;
      if (v23 < v2 || (v24 = a2, v23 > a2))
        *v21 = (int)v24;
      ++v21;
      --v22;
    }
    while (v22);
    v25 = **(__int16 ***)(result + 368);
    do
    {
      v26 = (float)*v25;
      v27 = -a2;
      if (v26 < v2 || (v27 = a2, v26 > a2))
        *v25 = (int)v27;
      ++v25;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t GRU<short>::normalizeModel(uint64_t result, float a2)
{
  int v2;
  uint64_t v3;
  __int16 *v4;
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  uint64_t v13;
  __int16 *v14;

  v2 = *(_DWORD *)(result + 52);
  v3 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v3 >= 1)
  {
    v4 = **(__int16 ***)(result + 336);
    v5 = v4;
    v6 = (*(_DWORD *)(result + 48) * v2);
    do
    {
      *v5 = (int)(float)((float)*v5 * a2);
      ++v5;
      --v6;
    }
    while (v6);
    v7 = v3;
    do
    {
      *v4 = (int)(float)((float)*v4 * a2);
      ++v4;
      --v7;
    }
    while (v7);
    v8 = **(__int16 ***)(result + 344);
    do
    {
      *v8 = (int)(float)((float)*v8 * a2);
      ++v8;
      --v3;
    }
    while (v3);
  }
  if (v2)
  {
    v9 = (v2 * v2);
    v10 = **(__int16 ***)(result + 360);
    v11 = v9;
    do
    {
      *v10 = (int)(float)((float)*v10 * a2);
      ++v10;
      --v11;
    }
    while (v11);
    v12 = **(__int16 ***)(result + 352);
    v13 = v9;
    do
    {
      *v12 = (int)(float)((float)*v12 * a2);
      ++v12;
      --v13;
    }
    while (v13);
    v14 = **(__int16 ***)(result + 368);
    do
    {
      *v14 = (int)(float)((float)*v14 * a2);
      ++v14;
      --v9;
    }
    while (v9);
  }
  return result;
}

void GRU<short>::allocInitialState(uint64_t a1, void **a2)
{
  _QWORD *v4;
  int v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  int v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;

  v4 = (_QWORD *)operator new();
  VVector<float>::VVector(v4, *(_DWORD *)(a1 + 52), 0);
  v5 = *(_DWORD *)(a1 + 52);
  v7 = (char *)a2[1];
  v6 = (char *)a2[2];
  if (v7 >= v6)
  {
    v9 = (v7 - (_BYTE *)*a2) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      goto LABEL_34;
    v11 = v6 - (_BYTE *)*a2;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 16 * v9;
    v15 = v12 + 16 * v13;
    *(_DWORD *)v14 = v5;
    *(_QWORD *)(v14 + 8) = v4;
    v8 = (void *)(v14 + 16);
    v17 = (char *)*a2;
    v16 = (char *)a2[1];
    if (v16 != *a2)
    {
      do
      {
        *(_OWORD *)(v14 - 16) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a2;
    }
    *a2 = (void *)v14;
    a2[1] = v8;
    a2[2] = (void *)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v7 = v5;
    *((_QWORD *)v7 + 1) = v4;
    v8 = v7 + 16;
  }
  a2[1] = v8;
  v18 = (_QWORD *)operator new();
  VVector<float>::VVector(v18, *(_DWORD *)(a1 + 52), 0);
  v19 = *(_DWORD *)(a1 + 52);
  v21 = (char *)a2[1];
  v20 = (char *)a2[2];
  if (v21 < v20)
  {
    *(_DWORD *)v21 = v19;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    goto LABEL_33;
  }
  v23 = (v21 - (_BYTE *)*a2) >> 4;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 60)
LABEL_34:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v25 = v20 - (_BYTE *)*a2;
  if (v25 >> 3 > v24)
    v24 = v25 >> 3;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
    v26 = 0xFFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
    v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v26);
  else
    v27 = 0;
  v28 = v26 + 16 * v23;
  v29 = v26 + 16 * v27;
  *(_DWORD *)v28 = v19;
  *(_QWORD *)(v28 + 8) = v18;
  v22 = (void *)(v28 + 16);
  v31 = (char *)*a2;
  v30 = (char *)a2[1];
  if (v30 != *a2)
  {
    do
    {
      *(_OWORD *)(v28 - 16) = *((_OWORD *)v30 - 1);
      v28 -= 16;
      v30 -= 16;
    }
    while (v30 != v31);
    v30 = (char *)*a2;
  }
  *a2 = (void *)v28;
  a2[1] = v22;
  a2[2] = (void *)v29;
  if (v30)
    operator delete(v30);
LABEL_33:
  a2[1] = v22;
}

void sub_19158CD00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void *GRU<short>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;

  v8 = *(int *)(a1 + 52);
  v9 = *a2;
  *(_DWORD *)(v9 + 16 * *a4) = v8;
  memmove(**(void ***)(v9 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v8);
  v10 = *a4 + 1;
  *a4 = v10;
  v11 = *(int *)(a1 + 52);
  v12 = *a2;
  *(_DWORD *)(v12 + 16 * v10) = v11;
  result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 88) + 8 * a3), 4 * v11);
  ++*a4;
  return result;
}

void *GRU<short>::restoreState(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 112);
  v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v8 + 8 * a3), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *a4;
  *a4 = v11 + 1;
  return memmove(*(void **)(v10 + 8 * a3), **(const void ***)(*a2 + 16 * v11 + 8), 4 * *(int *)(a1 + 52));
}

void GRU<short>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;

  v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  v6 = *a3 + 1;
  *a3 = v6;
  bzero(**(void ***)(*a2 + 16 * v6 + 8), 4 * *(int *)(*a2 + 16 * v6));
  ++*a3;
}

void GRU<short>::resetForNewBatch(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v15;

  v2 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v3 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v4 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v5 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 40))(v5, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v6 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v7 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[146] + 16))(a1[146]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[147] + 16))(a1[147]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[148] + 16))(a1[148]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[149] + 16))(a1[149]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[150] + 16))(a1[150]);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[151] + 16))(a1[151]);
  v8 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v9 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 40))(v9, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v10 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 40))(v10, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v11 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v12 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 40))(v12, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v13 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, __p);
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_19158D1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *GRU<short>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  double v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *result;
  uint64_t v19;
  char *v20;

  v4 = **(_QWORD **)(a1 + 328);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v5;
  v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v6, v5)));
    v6 = *(_DWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(_QWORD *)v9 = v4;
    v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v5;
    *(_DWORD *)(v9 + 12) = v6;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = **(_QWORD **)(a1 + 336);
  if ((unint64_t)v10 >= *(_QWORD *)(a2 + 16))
  {
    v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    v6 = *(_DWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(_QWORD *)v10 = v11;
    v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v5;
    *((_DWORD *)v10 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v12;
  v13 = **(_QWORD **)(a1 + 344);
  if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
  {
    v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
  }
  else
  {
    *(_QWORD *)v12 = v13;
    v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v5;
    *((_DWORD *)v12 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v14;
  v15 = **(_QWORD **)(a1 + 352);
  HIDWORD(v7) = v5;
  if ((unint64_t)v14 >= *(_QWORD *)(a2 + 16))
  {
    v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v7);
    v5 = *(_DWORD *)(a1 + 52);
    v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(_QWORD *)v14 = v15;
    v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v5;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v16;
  v17 = **(_QWORD **)(a1 + 360);
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, v7);
    v5 = *(_DWORD *)(a1 + 52);
    v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(_QWORD *)v16 = v17;
    result = v16 + 16;
    *((_DWORD *)v16 + 2) = v5;
    *((_DWORD *)v16 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = result;
  v19 = **(_QWORD **)(a1 + 368);
  if ((unint64_t)result >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v19, v7);
    v20 = result;
  }
  else
  {
    *(_QWORD *)result = v19;
    v20 = result + 16;
    *((_DWORD *)result + 2) = v5;
    *((_DWORD *)result + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v20;
  return result;
}

uint64_t GRU<short>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t GRU<short>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void GRU<short>::allocAllBuffers(uint64_t a1)
{
  void *__p;
  char v3;

  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from allocAll");
  GRU<short>::init(a1);
  if (v3 < 0)
    operator delete(__p);
}

void sub_19158D444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GRU<short>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[256];
  v3 = a1[255];
  if (v2 == v3)
  {
    v3 = a1[256];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = a1[256];
        v3 = a1[255];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[259];
  v7 = a1[258];
  if (v6 == v7)
  {
    v7 = a1[259];
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C80BDFB0063);
        v6 = a1[259];
        v7 = a1[258];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    v3 = a1[255];
  }
  a1[256] = v3;
  a1[259] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 95);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 125);
  return SparseMatrix<float>::cleanupAllBuffers(a1 + 110);
}

uint64_t GRU<short>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t GRU<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t GRU<short>::update(uint64_t result, float a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  __int16 *v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  __int16 *v11;
  float *v12;
  uint64_t v13;
  float v14;
  __int16 *v15;
  float *v16;
  float v17;
  uint64_t v18;
  __int16 *v19;
  float *v20;
  float v21;
  uint64_t v22;
  float v23;
  __int16 *v24;
  float *v25;
  uint64_t v26;
  float v27;
  __int16 *v28;
  float *v29;
  float v30;

  v2 = result;
  v3 = (int)a2;
  v4 = *(_DWORD *)(result + 52);
  if (*(int *)(result + 56) < 1)
  {
    v5 = (v4 * *(_DWORD *)(result + 48));
    if ((int)v5 >= 1)
    {
      v6 = *(__int16 **)(result + 240);
      v7 = *(float **)(result + 1120);
      v8 = (v4 * *(_DWORD *)(result + 48));
      v9 = (float)v3;
      do
      {
        v10 = *v7++;
        *v6 = (int)(float)((float)*v6 + (float)(v10 * v9));
        ++v6;
        --v8;
      }
      while (v8);
      v11 = *(__int16 **)(result + 248);
      v12 = *(float **)(result + 1136);
      v13 = v5;
      do
      {
        v14 = *v12++;
        *v11 = (int)(float)((float)*v11 + (float)(v14 * v9));
        ++v11;
        --v13;
      }
      while (v13);
      v15 = *(__int16 **)(result + 232);
      v16 = *(float **)(result + 1128);
      do
      {
        v17 = *v16++;
        *v15 = (int)(float)((float)*v15 + (float)(v17 * v9));
        ++v15;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    SparseMatrix<float>::add<short>(result + 760, v4, (float)v3);
    SparseMatrix<float>::add<short>(v2 + 1000, *(_DWORD *)(v2 + 52), (float)v3);
    result = SparseMatrix<float>::add<short>(v2 + 880, *(_DWORD *)(v2 + 52), (float)v3);
  }
  if (v4)
  {
    v18 = (v4 * v4);
    v19 = *(__int16 **)(v2 + 264);
    v20 = *(float **)(v2 + 1144);
    v21 = (float)v3;
    v22 = v18;
    do
    {
      v23 = *v20++;
      *v19 = (int)(float)((float)*v19 + (float)(v23 * v21));
      ++v19;
      --v22;
    }
    while (v22);
    v24 = *(__int16 **)(v2 + 272);
    v25 = *(float **)(v2 + 1160);
    v26 = (v4 * v4);
    do
    {
      v27 = *v25++;
      *v24 = (int)(float)((float)*v24 + (float)(v27 * v21));
      ++v24;
      --v26;
    }
    while (v26);
    v28 = *(__int16 **)(v2 + 256);
    v29 = *(float **)(v2 + 1152);
    do
    {
      v30 = *v29++;
      *v28 = (int)(float)((float)*v28 + (float)(v30 * v21));
      ++v28;
      --v18;
    }
    while (v18);
  }
  return result;
}

void GRU<short>::backward(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  int v12;
  float32x4_t **v13;
  int v14;
  float *v15;
  float *v16;
  float32x4_t *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  void **v22;
  int v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float32x4_t **v33;
  uint64_t *v34;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t *v55;
  void **v58;
  int v59;
  int v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *__p;
  void *v68;
  uint64_t v69;

  v60 = a5 - 1;
  if (a5 >= 1)
  {
    v55 = (uint64_t *)(a1 + 752);
    v58 = (void **)(a1 + 1232);
    v6 = a5 - 1;
    do
    {
      v7 = *(unsigned __int8 *)(a1 + 2088);
      if (*(_BYTE *)(a1 + 2088))
        v8 = v60 - v6;
      else
        v8 = v6;
      if (*(_BYTE *)(a1 + 2088))
        v9 = v8 < v60;
      else
        v9 = v8 > 0;
      if (*(_BYTE *)(a1 + 2088))
        v10 = v8 > 0;
      else
        v10 = v8 < v60;
      v11 = v8 - 1;
      if (*(_BYTE *)(a1 + 2088))
        v12 = v8 + 1;
      else
        v12 = v8 - 1;
      v59 = v12;
      memmove(*(void **)(*(_QWORD *)(a1 + 632) + 8 * v8), *(const void **)(*a4 + 8 * v8), 4 * *(int *)(a1 + 52));
      if (v10)
      {
        if (!v7)
          v11 = v8 + 1;
        bzero(*(void **)(a1 + 752), 4 * *(int *)(a1 + 52));
        VVector<float>::internalMul(v55, (float **)(*(_QWORD *)(a1 + 656) + 8 * v11), *(__int16 ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
      }
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1216), *(float **)(*(_QWORD *)(a1 + 472) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 576));
      VVector<float>::applyPrimeDerivative(v58, *(float **)(*(_QWORD *)(a1 + 448) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 572));
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1224), *(float **)(*(_QWORD *)(a1 + 424) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 568));
      bzero(*(void **)(*(_QWORD *)(a1 + 656) + 8 * v8), 4 * *(int *)(a1 + 52));
      v13 = (float32x4_t **)(*(_QWORD *)(a1 + 656) + 8 * v8);
      v14 = *(_DWORD *)(a1 + 52);
      if (v14 >= 1)
      {
        v15 = *(float **)(*(_QWORD *)(a1 + 632) + 8 * v8);
        v16 = *(float **)(*(_QWORD *)(a1 + 496) + 8 * v8);
        v17 = *v13;
        v18 = *(unsigned int *)(a1 + 52);
        do
        {
          v19 = *v15++;
          v20 = v19;
          v21 = *v16++;
          v17->f32[0] = v17->f32[0] + (float)(v20 * (float)(1.0 - v21));
          v17 = (float32x4_t *)((char *)v17 + 4);
          --v18;
        }
        while (v18);
      }
      VVector<float>::mulV(v13, v13, (float32x4_t **)(a1 + 1216), v14);
      v22 = (void **)(*(_QWORD *)(a1 + 680) + 8 * v8);
      if (v9)
      {
        v23 = *(_DWORD *)(a1 + 52);
        if (v23 >= 1)
        {
          v24 = *(float **)(*(_QWORD *)(a1 + 112) + 8 * v59);
          v25 = *(float **)(*(_QWORD *)(a1 + 544) + 8 * v8);
          v26 = (float *)*v22;
          v27 = *(unsigned int *)(a1 + 52);
          do
          {
            v28 = *v24++;
            v29 = v28;
            v30 = *v25++;
            *v26++ = v29 - v30;
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        memmove(*v22, *(const void **)(*(_QWORD *)(a1 + 544) + 8 * v8), 4 * *(int *)(a1 + 52));
        v22 = (void **)(*(_QWORD *)(a1 + 680) + 8 * v8);
        v23 = *(_DWORD *)(a1 + 52);
        if (v23 >= 1)
        {
          v31 = (float *)*v22;
          v32 = *(unsigned int *)(a1 + 52);
          do
          {
            *v31 = -*v31;
            ++v31;
            --v32;
          }
          while (v32);
        }
      }
      VVector<float>::mulV((float32x4_t **)v22, (float32x4_t **)(*(_QWORD *)(a1 + 632) + 8 * v8), (float32x4_t **)v22, v23);
      v33 = (float32x4_t **)(*(_QWORD *)(a1 + 680) + 8 * v8);
      VVector<float>::mulV(v33, v33, (float32x4_t **)(a1 + 1224), *(_DWORD *)(a1 + 52));
      v34 = (uint64_t *)(*(_QWORD *)(a1 + 704) + 8 * v8);
      if (v9)
        VVector<float>::internalMul(v34, (float **)(*(_QWORD *)(a1 + 656) + 8 * v8), *(__int16 ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
      bzero((void *)*v34, 4 * *(int *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 608) + 8 * v8), 4 * *(int *)(a1 + 48));
        VVector<float>::internalMul((uint64_t *)(*(_QWORD *)(a1 + 608) + 8 * v8), (float **)(*(_QWORD *)(a1 + 680) + 8 * v8), *(__int16 ***)(a1 + 328), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
      }
    }
    while (v6-- > 0);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 1016) = 0;
    *(_DWORD *)(a1 + 896) = 0;
  }
  if (a5 > 1)
  {
    v36 = 1;
    v37 = a5 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2088))
        v38 = v37;
      else
        v38 = v36;
      if (*(_BYTE *)(a1 + 2088))
        v39 = 1;
      else
        v39 = -1;
      v40 = v38 + v39;
      if (*(_BYTE *)(a1 + 2088))
        v41 = a5 - 2;
      else
        v41 = 1;
      v42 = v38 == v41;
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 680) + 8 * v38), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v40), (void **)(a1 + 1152), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v42);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 704) + 8 * v38), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v40), (void **)(a1 + 1144), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v42);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 656) + 8 * v38), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v40), (void **)(a1 + 1160), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v42);
      ++v36;
      --v37;
    }
    while (v37 != -1);
  }
  if (a5 >= 1)
  {
    v43 = 0;
    v44 = v60;
    do
    {
      if (*(_BYTE *)(a1 + 2088))
        v45 = v44;
      else
        v45 = v43;
      v46 = v60;
      if (!*(_BYTE *)(a1 + 2088))
        v46 = 0;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        v53 = v45 == v46;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 704) + 8 * v45), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v45), (void **)(a1 + 1120), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v53);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 680) + 8 * v45), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v45), (void **)(a1 + 1128), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v53);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 656) + 8 * v45), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v45), (void **)(a1 + 1136), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v53);
      }
      else
      {
        v47 = *(_QWORD *)(a1 + 704);
        v48 = *(_QWORD *)(a1 + 208) + 24 * v45;
        v68 = 0;
        v69 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v48, *(_QWORD *)(v48 + 8), (uint64_t)(*(_QWORD *)(v48 + 8) - *(_QWORD *)v48) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 760, *(int **)(v47 + 8 * v45), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          v68 = __p;
          operator delete(__p);
        }
        v49 = *(_QWORD *)(a1 + 680);
        v50 = *(_QWORD *)(a1 + 208) + 24 * v45;
        v65 = 0;
        v66 = 0;
        v64 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, *(const void **)v50, *(_QWORD *)(v50 + 8), (uint64_t)(*(_QWORD *)(v50 + 8) - *(_QWORD *)v50) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 880, *(int **)(v49 + 8 * v45), (uint64_t)v64, *(_DWORD *)(a1 + 52));
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        v51 = *(_QWORD *)(a1 + 656);
        v52 = *(_QWORD *)(a1 + 208) + 24 * v45;
        v62 = 0;
        v63 = 0;
        v61 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)v52, *(_QWORD *)(v52 + 8), (uint64_t)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1000, *(int **)(v51 + 8 * v45), (uint64_t)v61, *(_DWORD *)(a1 + 52));
        if (v61)
        {
          v62 = v61;
          operator delete(v61);
        }
      }
      ++v43;
      --v44;
    }
    while (v44 != -1);
  }
}

void GRU<short>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v8;
  float v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  void *v13;
  char v14;
  char *p_p;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  void *v19;
  char v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  void *v25;
  char v26;
  char *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  void *v31;
  char v32;
  char *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  void *v37;
  char v38;
  char *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  void *v43;
  char v44;
  char *v45;
  uint64_t v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  void *v50;
  char v51;
  char *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  void *v56;
  char v57;
  char *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  void *v62;
  char v63;
  char *v64;
  unsigned int v65;
  float v66;
  int v67;
  int v68;
  _BOOL4 v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  float *v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  __int16 **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  float *v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  float *v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  __int16 **v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  __int16 **v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  int v126;
  __int16 **v127;
  int v130;
  void *v131;
  char v132;
  void *v133;
  void *v134;
  uint64_t v135;
  void *v136;
  char v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  char v142;
  std::string v143;
  void *__p;
  __int128 v145;
  void *v146[3];
  std::string v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
    v130 = 0;
  else
    v130 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v8 = *(_QWORD *)(a1 + 2096);
  if (!v8 || (v9 = *(float *)(v8 + 604), v9 <= 0.0))
    v9 = 50.0;
  __p = 0;
  v145 = 0uLL;
  i2s(&v143);
  v10 = std::string::insert(&v143, 0, "GRU Forward W_z[");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v147, "] WGZ:");
  v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v12->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v13;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v14;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  MMatrix<short>::print(*(__int16 ***)(a1 + 328), p_p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v143);
  v16 = std::string::insert(&v143, 0, "GRU Forward W_r[");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v147, "] WGR:");
  v19 = (void *)v18->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v18->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v19;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v20;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v21 = (char *)&__p;
  else
    v21 = (char *)__p;
  MMatrix<short>::print(*(__int16 ***)(a1 + 336), v21, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v143);
  v22 = std::string::insert(&v143, 0, "GRU Forward W_o[");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v147, "] WGO:");
  v25 = (void *)v24->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v24->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v25;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v26;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v27 = (char *)&__p;
  else
    v27 = (char *)__p;
  MMatrix<short>::print(*(__int16 ***)(a1 + 344), v27, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v143);
  v28 = std::string::insert(&v143, 0, "GRU Forward R_z[");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v147, "] RGZ:");
  v31 = (void *)v30->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v30->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
  v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v31;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v32;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v33 = (char *)&__p;
  else
    v33 = (char *)__p;
  MMatrix<short>::print(*(__int16 ***)(a1 + 352), v33, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v143);
  v34 = std::string::insert(&v143, 0, "GRU Forward R_r[");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v147, "] RGR:");
  v37 = (void *)v36->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v36->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
  v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v37;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v38;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v39 = (char *)&__p;
  else
    v39 = (char *)__p;
  MMatrix<short>::print(*(__int16 ***)(a1 + 360), v39, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v143);
  v40 = std::string::insert(&v143, 0, "GRU Forward R_o[");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v147, "] RGO:");
  v43 = (void *)v42->__r_.__value_.__r.__words[0];
  v146[0] = (void *)v42->__r_.__value_.__l.__size_;
  *(void **)((char *)v146 + 7) = *(void **)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
  v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  __p = v43;
  *(void **)&v145 = v146[0];
  *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
  HIBYTE(v145) = v44;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 >= 0)
    v45 = (char *)&__p;
  else
    v45 = (char *)__p;
  MMatrix<short>::print(*(__int16 ***)(a1 + 368), v45, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  v46 = *(_QWORD *)(a1 + 2096);
  if (v46 && *(_BYTE *)(v46 + 244))
  {
    i2s(&v143);
    v47 = std::string::insert(&v143, 0, "GRU Forward B_z[");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v147, "] :");
    v50 = (void *)v49->__r_.__value_.__r.__words[0];
    v146[0] = (void *)v49->__r_.__value_.__l.__size_;
    *(void **)((char *)v146 + 7) = *(void **)((char *)&v49->__r_.__value_.__r.__words[1] + 7);
    v51 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v145) < 0)
      operator delete(__p);
    __p = v50;
    *(void **)&v145 = v146[0];
    *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
    HIBYTE(v145) = v51;
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (v145 >= 0)
      v52 = (char *)&__p;
    else
      v52 = (char *)__p;
    VVector<short>::print(*(__int16 ***)(a1 + 376), v52, *(_DWORD *)(a1 + 52));
    i2s(&v143);
    v53 = std::string::insert(&v143, 0, "GRU Forward B_r[");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&v147, "] :");
    v56 = (void *)v55->__r_.__value_.__r.__words[0];
    v146[0] = (void *)v55->__r_.__value_.__l.__size_;
    *(void **)((char *)v146 + 7) = *(void **)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
    v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v145) < 0)
      operator delete(__p);
    __p = v56;
    *(void **)&v145 = v146[0];
    *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
    HIBYTE(v145) = v57;
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (v145 >= 0)
      v58 = (char *)&__p;
    else
      v58 = (char *)__p;
    VVector<short>::print(*(__int16 ***)(a1 + 384), v58, *(_DWORD *)(a1 + 52));
    i2s(&v143);
    v59 = std::string::insert(&v143, 0, "GRU Forward B_o[");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    v61 = std::string::append(&v147, "] :");
    v62 = (void *)v61->__r_.__value_.__r.__words[0];
    v146[0] = (void *)v61->__r_.__value_.__l.__size_;
    *(void **)((char *)v146 + 7) = *(void **)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
    v63 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v145) < 0)
      operator delete(__p);
    __p = v62;
    *(void **)&v145 = v146[0];
    *(void **)((char *)&v145 + 7) = *(void **)((char *)v146 + 7);
    HIBYTE(v145) = v63;
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (v145 >= 0)
      v64 = (char *)&__p;
    else
      v64 = (char *)__p;
    VVector<short>::print(*(__int16 ***)(a1 + 392), v64, *(_DWORD *)(a1 + 52));
  }
  v65 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v65)
  {
    v66 = -v9;
    if (*(_BYTE *)(a1 + 2088))
      v67 = (a4 & 0xFFFFFF) + ~v65;
    else
      v67 = a5 != 0;
    if (*(_BYTE *)(a1 + 2088))
      v68 = 1;
    else
      v68 = -1;
    if (*(_BYTE *)(a1 + 2088))
      v69 = v67 < (a4 & 0xFFFFFF) - 1;
    else
      v69 = v67 > 0;
    v70 = v67;
    memmove(*(void **)(*(_QWORD *)(a1 + 64) + 8 * v67), *(const void **)(*a2 + 8 * v67), 4 * *(int *)(a1 + 44));
    if (*(_BYTE *)(a1 + 40))
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v67) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    v71 = v67 + v68;
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * v71), "GRU output t-1 : ", *(_DWORD *)(a1 + 52));
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 64) + 8 * v67), "GRU input t: ", *(_DWORD *)(a1 + 44));
    if (v130)
    {
      v72 = *(unsigned __int8 *)(a1 + 40);
      v73 = *(_DWORD *)(a1 + 48);
      v74 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v67);
      *v74 = **(_DWORD **)(*a3 + 24 * v67);
      if (v72)
        v74[1] = v73 - 1;
    }
    bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v67), 4 * *(int *)(a1 + 52));
    bzero(*(void **)(*(_QWORD *)(a1 + 448) + 8 * v67), 4 * *(int *)(a1 + 52));
    bzero(*(void **)(*(_QWORD *)(a1 + 472) + 8 * v67), 4 * *(int *)(a1 + 52));
    v75 = *(_QWORD *)(a1 + 2096);
    if (v75)
    {
      if (!*(_BYTE *)(v75 + 20))
      {
        v104 = *(_DWORD *)(v75 + 40);
        if ((v104 == 4 || v104 == 2) && *(_DWORD *)(v75 + 44) == 3)
        {
          v105 = *(_QWORD *)(a1 + 64);
          v106 = *(__int16 ***)(a1 + 328);
          v107 = *(_QWORD *)(a1 + 208) + 24 * v67;
          memset(&v143, 0, sizeof(v143));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v143, *(const void **)v107, *(_QWORD *)(v107 + 8), (uint64_t)(*(_QWORD *)(v107 + 8) - *(_QWORD *)v107) >> 2);
          v108 = *(_DWORD *)(a1 + 48);
          v109 = *(_DWORD *)(a1 + 52);
          v110 = 3 * v109;
          if (!*(_QWORD *)(a1 + 600))
          {
            v126 = *(_DWORD *)(a1 + 48);
            v127 = v106;
            v111 = (void *)operator new[]();
            v112 = v111;
            if (v109 >= 1)
              bzero(v111, 4 * (3 * v109));
            *(_QWORD *)(a1 + 600) = v112;
            v113 = *(_QWORD **)(a1 + 2048);
            v114 = *(_QWORD *)(a1 + 2056);
            if ((unint64_t)v113 >= v114)
            {
              v116 = *(_QWORD *)(a1 + 2040);
              v117 = ((uint64_t)v113 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v118 = v114 - v116;
              v119 = v118 >> 2;
              if (v118 >> 2 <= (unint64_t)(v117 + 1))
                v119 = v117 + 1;
              if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
                v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v120);
              else
                v121 = 0;
              v122 = (_QWORD *)(v120 + 8 * v117);
              *v122 = v112;
              v115 = v122 + 1;
              v123 = *(char **)(a1 + 2048);
              v124 = *(char **)(a1 + 2040);
              if (v123 == v124)
              {
                v106 = v127;
              }
              else
              {
                v106 = v127;
                do
                {
                  v125 = *((_QWORD *)v123 - 1);
                  v123 -= 8;
                  *--v122 = v125;
                }
                while (v123 != v124);
                v123 = *(char **)(a1 + 2040);
              }
              *(_QWORD *)(a1 + 2040) = v122;
              *(_QWORD *)(a1 + 2048) = v115;
              *(_QWORD *)(a1 + 2056) = v120 + 8 * v121;
              if (v123)
                operator delete(v123);
            }
            else
            {
              *v113 = v112;
              v115 = v113 + 1;
              v106 = v127;
            }
            v110 = 3 * v109;
            *(_QWORD *)(a1 + 2048) = v115;
            v108 = v126;
          }
          VVector<float>::internalMul((uint64_t *)(a1 + 600), (float **)(v105 + 8 * v70), v106, v110, v108, 0.0);
        }
      }
    }
    sprintf((char *)&v147, "GRU[t=%d] input/source forwardNew1() vec ", v67);
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 64) + 8 * v67), (char *)&v147, *(_DWORD *)(a1 + 48));
    v76 = *(_QWORD *)(a1 + 424);
    v77 = *(_QWORD *)(a1 + 64);
    v78 = *(__int16 ***)(a1 + 328);
    v79 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
    memset(v146, 0, sizeof(v146));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v146, *(const void **)v79, *(_QWORD *)(v79 + 8), (uint64_t)(*(_QWORD *)(v79 + 8) - *(_QWORD *)v79) >> 2);
    GRU<short>::computeXTimesWSparseOrDense(a1, v130, (float32x4_t **)(v76 + 8 * v70), (float **)(v77 + 8 * v70), v78, v146[0], (uint64_t)v146[1], *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
    if (v146[0])
    {
      v146[1] = v146[0];
      operator delete(v146[0]);
    }
    v80 = *(_QWORD *)(a1 + 2096);
    std::string::basic_string[abi:ne180100]<0>(&v141, "gzx");
    if (!v80 || !*(_BYTE *)(v80 + 244))
    {
      if (v142 < 0)
        operator delete(v141);
      if (v69)
        VVector<float>::internalMul((uint64_t *)(*(_QWORD *)(a1 + 424) + 8 * v70), (float **)(*(_QWORD *)(a1 + 112) + 8 * v71), *(__int16 ***)(a1 + 352), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      v81 = *(_QWORD *)(a1 + 424);
      v82 = *(_DWORD *)(a1 + 52);
      v83 = *(float **)(v81 + 8 * v70);
      if (v82 >= 1)
      {
        v84 = *(unsigned int *)(a1 + 52);
        do
        {
          v85 = -v9;
          if (*v83 < v66 || (v85 = v9, *v83 > v9))
            *v83 = v85;
          ++v83;
          --v84;
        }
        while (v84);
        v83 = *(float **)(v81 + 8 * v70);
      }
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 496) + 8 * v70), v83, v82, *(_DWORD *)(a1 + 568));
      v86 = *(_QWORD *)(a1 + 448);
      v87 = *(_QWORD *)(a1 + 64);
      v88 = *(__int16 ***)(a1 + 336);
      v89 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
      v139 = 0;
      v140 = 0;
      v138 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v138, *(const void **)v89, *(_QWORD *)(v89 + 8), (uint64_t)(*(_QWORD *)(v89 + 8) - *(_QWORD *)v89) >> 2);
      GRU<short>::computeXTimesWSparseOrDense(a1, v130, (float32x4_t **)(v86 + 8 * v70), (float **)(v87 + 8 * v70), v88, v138, (uint64_t)v139, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      if (v138)
      {
        v139 = v138;
        operator delete(v138);
      }
      v90 = *(_QWORD *)(a1 + 2096);
      std::string::basic_string[abi:ne180100]<0>(&v136, "grx");
      if (!v90 || !*(_BYTE *)(v90 + 244))
      {
        if (v137 < 0)
          operator delete(v136);
        v91 = *(_QWORD *)(a1 + 448);
        v92 = *(_DWORD *)(a1 + 52);
        v93 = *(float **)(v91 + 8 * v70);
        if (v92 >= 1)
        {
          v94 = *(unsigned int *)(a1 + 52);
          do
          {
            v95 = -v9;
            if (*v93 < v66 || (v95 = v9, *v93 > v9))
              *v93 = v95;
            ++v93;
            --v94;
          }
          while (v94);
          v93 = *(float **)(v91 + 8 * v70);
        }
        VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 520) + 8 * v70), v93, v92, *(_DWORD *)(a1 + 572));
        bzero(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v70), 4 * *(int *)(a1 + 52));
        v96 = *(unsigned int *)(a1 + 52);
        if ((int)v96 >= 1)
        {
          v97 = *(float **)(*(_QWORD *)(a1 + 88) + 8 * v70);
          do
          {
            v98 = -v9;
            if (*v97 < v66 || (v98 = v9, *v97 > v9))
              *v97 = v98;
            ++v97;
            --v96;
          }
          while (v96);
        }
        v99 = *(_QWORD *)(a1 + 472);
        v100 = *(_QWORD *)(a1 + 64);
        v101 = *(__int16 ***)(a1 + 344);
        v102 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v134 = 0;
        v135 = 0;
        v133 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, *(const void **)v102, *(_QWORD *)(v102 + 8), (uint64_t)(*(_QWORD *)(v102 + 8) - *(_QWORD *)v102) >> 2);
        GRU<short>::computeXTimesWSparseOrDense(a1, v130, (float32x4_t **)(v99 + 8 * v70), (float **)(v100 + 8 * v70), v101, v133, (uint64_t)v134, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v103 = *(_QWORD *)(a1 + 2096);
        std::string::basic_string[abi:ne180100]<0>(&v131, "gox");
        if (!v103 || !*(_BYTE *)(v103 + 244))
        {
          if (v132 < 0)
            operator delete(v131);
          VVector<float>::internalMul((uint64_t *)(*(_QWORD *)(a1 + 472) + 8 * v70), (float **)(*(_QWORD *)(a1 + 88) + 8 * v70), *(__int16 ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        }
        exitFramework(76);
      }
      exitFramework(76);
    }
    exitFramework(76);
  }
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
}

void sub_19158F258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  _Unwind_Resume(a1);
}

uint64_t GRU<short>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2088] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      GRU<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A748 = 0;
      qword_1EE21A750 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &GRU<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &GRU<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2088] = 0;
  return result;
}

uint64_t GRU<short>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[2088] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2088] = 0;
  return result;
}

char *GRU<short>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2036) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 328) = result + 232;
  *(_QWORD *)(a1 + 336) = result + 240;
  *(_QWORD *)(a1 + 344) = result + 248;
  *(_QWORD *)(a1 + 352) = result + 256;
  *(_QWORD *)(a1 + 360) = result + 264;
  *(_QWORD *)(a1 + 368) = result + 272;
  *(_QWORD *)(a1 + 376) = result + 280;
  *(_QWORD *)(a1 + 384) = result + 288;
  *(_QWORD *)(a1 + 392) = result + 296;
  *(_QWORD *)(a1 + 400) = result + 304;
  *(_QWORD *)(a1 + 408) = result + 312;
  *(_QWORD *)(a1 + 416) = result + 320;
  return result;
}

void GRU<short>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2036))
  {
    exitFramework(34);
  }
  exitFramework(1);
}

void GRU<short>::computeError()
{
  exitFramework(1);
}

void GRU<short>::log2Probability()
{
  exitFramework(0);
}

void GRU<short>::~GRU(uint64_t a1)
{
  GRU<short>::~GRU(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t GRU<short>::~GRU(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v24;

  *(_QWORD *)a1 = off_1E2D57CC0;
  GRU<short>::cleanupAllBuffers((_QWORD *)a1);
  v2 = *(void **)(a1 + 2064);
  if (v2)
  {
    *(_QWORD *)(a1 + 2072) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 2040);
  if (v3)
  {
    *(_QWORD *)(a1 + 2048) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 1960) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1968));
  *(_QWORD *)(a1 + 1888) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1896));
  *(_QWORD *)(a1 + 1816) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1824));
  *(_QWORD *)(a1 + 1744) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1752));
  *(_QWORD *)(a1 + 1672) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1680));
  *(_QWORD *)(a1 + 1600) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1608));
  *(_QWORD *)(a1 + 1528) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1536));
  *(_QWORD *)(a1 + 1456) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1464));
  *(_QWORD *)(a1 + 1384) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1392));
  *(_QWORD *)(a1 + 1312) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1320));
  *(_QWORD *)(a1 + 1240) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1248));
  SparseMatrix<float>::~SparseMatrix(a1 + 1000);
  SparseMatrix<float>::~SparseMatrix(a1 + 880);
  SparseMatrix<float>::~SparseMatrix(a1 + 760);
  v4 = *(void **)(a1 + 728);
  if (v4)
  {
    *(_QWORD *)(a1 + 736) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 704);
  if (v5)
  {
    *(_QWORD *)(a1 + 712) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 680);
  if (v6)
  {
    *(_QWORD *)(a1 + 688) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 656);
  if (v7)
  {
    *(_QWORD *)(a1 + 664) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 632);
  if (v8)
  {
    *(_QWORD *)(a1 + 640) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 608);
  if (v9)
  {
    *(_QWORD *)(a1 + 616) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 544);
  if (v10)
  {
    *(_QWORD *)(a1 + 552) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 520);
  if (v11)
  {
    *(_QWORD *)(a1 + 528) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 496);
  if (v12)
  {
    *(_QWORD *)(a1 + 504) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 472);
  if (v13)
  {
    *(_QWORD *)(a1 + 480) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 448);
  if (v14)
  {
    *(_QWORD *)(a1 + 456) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 424);
  if (v15)
  {
    *(_QWORD *)(a1 + 432) = v15;
    operator delete(v15);
  }
  v24 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v24);
  v16 = *(void **)(a1 + 184);
  if (v16)
  {
    *(_QWORD *)(a1 + 192) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 160);
  if (v17)
  {
    *(_QWORD *)(a1 + 168) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 136);
  if (v18)
  {
    *(_QWORD *)(a1 + 144) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 112);
  if (v19)
  {
    *(_QWORD *)(a1 + 120) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 88);
  if (v20)
  {
    *(_QWORD *)(a1 + 96) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 64);
  if (v21)
  {
    *(_QWORD *)(a1 + 72) = v21;
    operator delete(v21);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v22 = *(void **)(a1 + 8);
  if (v22)
  {
    *(_QWORD *)(a1 + 16) = v22;
    operator delete(v22);
  }
  return a1;
}

void MMatrix<short>::print(__int16 **a1, char *a2, int a3, int a4, int a5)
{
  uint64_t v5;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  __int16 *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  uint64_t v45;
  _BYTE v46[56];
  void *__p;
  char v48;
  uint64_t v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  int64_t v53;
  char __s[100];
  uint64_t v55;

  LODWORD(v5) = a5;
  v55 = *MEMORY[0x1E0C80C00];
  sprintf(__s, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(&v51, __s);
  v9 = std::string::insert(&v51, 0, " (");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v44, ") ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v53 = v11->__r_.__value_.__r.__words[2];
  v52 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (a4 * a3 >= (int)v5)
    v5 = v5;
  else
    v5 = (a4 * a3);
  if ((int)v5 <= 0)
    goto LABEL_12;
  v13 = *a1;
  LOBYTE(v14) = 1;
  v15 = v5;
  do
  {
    v16 = *v13++;
    v14 = ((unsigned __int16)(v16 + 1) < 3u) & v14;
    --v15;
  }
  while (v15);
  if (v14)
LABEL_12:
    v17 = "yes";
  else
    v17 = "no";
  std::string::basic_string[abi:ne180100]<0>(&v50, v17);
  v18 = std::string::insert(&v50, 0, " (");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v44, ") ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v44);
  std::string::basic_string[abi:ne180100]<0>(&v41, a2);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v51;
  else
    v22 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  else
    size = v51.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v41, (const std::string::value_type *)v22, size);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v53 >= 0)
    v26 = (const std::string::value_type *)&v52;
  else
    v26 = (const std::string::value_type *)v52;
  if (v53 >= 0)
    v27 = HIBYTE(v53);
  else
    v27 = *((_QWORD *)&v52 + 1);
  v28 = std::string::append(&v42, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v43, "[");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if ((int)v5 >= 1)
  {
    v32 = 0;
    v33 = 2 * v5;
    do
    {
      memset(&v43, 0, sizeof(v43));
      std::ios_base::clear((std::ios_base *)((char *)&v44 + *(_QWORD *)(v44.__r_.__value_.__r.__words[0] - 24)), 0);
      *(_QWORD *)&v46[*(_QWORD *)(v44.__r_.__value_.__r.__words[2] - 24)] = 6;
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v44, (uint64_t)&v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        v34 = v43.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v34 + 1);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v42;
      else
        v35 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if (v34)
      {
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v43;
        else
          v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
        memmove(v35, v36, v34);
      }
      *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 32;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v42;
      else
        v37 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      else
        v38 = v42.__r_.__value_.__l.__size_;
      std::string::append(&v50, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v32 += 2;
    }
    while (v33 != v32);
  }
  std::string::append(&v50, " ]");
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v44.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v39 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + *(_QWORD *)(v44.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v44.__r_.__value_.__r.__words[2] = v39;
  v45 = MEMORY[0x1E0DE4FB8] + 16;
  if (v48 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v49);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
}

void sub_19158FD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  uint64_t v71;

  if (a64 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
  if (a71 < 0)
    operator delete(a66);
  if (*(char *)(v71 - 217) < 0)
    operator delete(*(void **)(v71 - 240));
  _Unwind_Resume(a1);
}

void VVector<short>::print(__int16 **a1, char *a2, int a3)
{
  __int16 *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  size_t size;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  uint64_t v49;
  void *__p;
  char v51;
  uint64_t v52;
  __int128 v53;
  int64_t v54;
  void *v55[2];
  uint64_t v56;
  std::string v57;
  uint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  __int128 v62;
  int64_t v63;
  void *v64[2];
  unsigned __int8 v65;
  char v66[100];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  sprintf(v66, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(v64, "() ");
  if (a3 <= 0)
    goto LABEL_5;
  v6 = *a1;
  v7 = a3;
  LOBYTE(v8) = 1;
  do
  {
    v9 = *v6++;
    v8 = ((unsigned __int16)(v9 + 1) < 3u) & v8;
    --v7;
  }
  while (v7);
  if (v8)
LABEL_5:
    v10 = "inRange:yes";
  else
    v10 = "inRange:no";
  std::string::basic_string[abi:ne180100]<0>(&v48, v10);
  v11 = std::string::insert(&v48, 0, " (");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v57, ") ");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v63 = v13->__r_.__value_.__r.__words[2];
  v62 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v57);
  v55[0] = 0;
  v55[1] = 0;
  v56 = 0;
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v57, (uint64_t)v55);
  std::operator+<char>();
  v15 = std::string::append(&v48, "] ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v54 = v15->__r_.__value_.__r.__words[2];
  v53 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v48);
  std::string::basic_string[abi:ne180100]<0>(&v43, a2);
  if (v63 >= 0)
    v17 = (const std::string::value_type *)&v62;
  else
    v17 = (const std::string::value_type *)v62;
  if (v63 >= 0)
    v18 = HIBYTE(v63);
  else
    v18 = *((_QWORD *)&v62 + 1);
  v19 = std::string::append(&v43, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if ((v65 & 0x80u) == 0)
    v21 = (const std::string::value_type *)v64;
  else
    v21 = (const std::string::value_type *)v64[0];
  if ((v65 & 0x80u) == 0)
    v22 = v65;
  else
    v22 = (std::string::size_type)v64[1];
  v23 = std::string::append(&v44, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (v54 >= 0)
    v25 = (const std::string::value_type *)&v53;
  else
    v25 = (const std::string::value_type *)v53;
  if (v54 >= 0)
    v26 = HIBYTE(v54);
  else
    v26 = *((_QWORD *)&v53 + 1);
  v27 = std::string::append(&v45, v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v46, "[ ");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (a3 >= 1)
  {
    v31 = 0;
    if (a3 >= 1000)
      v32 = 1000;
    else
      v32 = a3;
    v33 = 2 * v32;
    do
    {
      memset(&v46, 0, sizeof(v46));
      std::ios_base::clear((std::ios_base *)((char *)&v48 + *(_QWORD *)(v48.__r_.__value_.__r.__words[0] - 24)), 0);
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v48, (uint64_t)&v46);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        size = v46.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v45, size + 3);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v45;
      else
        v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v46;
        else
          v36 = (std::string *)v46.__r_.__value_.__r.__words[0];
        memmove(v35, v36, size);
      }
      *(_DWORD *)((char *)&v35->__r_.__value_.__l.__data_ + size) = 2108448;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v45;
      else
        v37 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v38 = v45.__r_.__value_.__l.__size_;
      std::string::append(&v47, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      v31 += 2;
    }
    while (v33 != v31);
  }
  std::string::append(&v47, "]");
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  v39 = *MEMORY[0x1E0DE4F50];
  v48.__r_.__value_.__r.__words[0] = v39;
  v41 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + *(_QWORD *)(v39 - 24)) = v41;
  v42 = MEMORY[0x1E0DE4FB8];
  v48.__r_.__value_.__r.__words[2] = v40;
  v49 = MEMORY[0x1E0DE4FB8] + 16;
  if (v51 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v52);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  v57.__r_.__value_.__r.__words[0] = v39;
  *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + *(_QWORD *)(v39 - 24)) = v41;
  v57.__r_.__value_.__r.__words[2] = v40;
  v58 = v42 + 16;
  if (v60 < 0)
    operator delete(v59);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v61);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  if ((char)v65 < 0)
    operator delete(v64[0]);
}

void sub_191590398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  uint64_t v74;

  if (a30 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  if (a71 < 0)
    operator delete(a66);
  if (a73 < 0)
    operator delete(a72);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a74);
  if (*(char *)(v74 - 233) < 0)
    operator delete(*(void **)(v74 - 256));
  if (*(char *)(v74 - 209) < 0)
    operator delete(*(void **)(v74 - 232));
  _Unwind_Resume(a1);
}

float32_t GRU<short>::computeXTimesWSparseOrDense(uint64_t a1, int a2, float32x4_t **a3, float **a4, __int16 **a5, const void *a6, uint64_t a7, int a8, int a9)
{
  float **v12;
  void *__p;
  int *v15;
  uint64_t v16;

  v12 = (float **)(a1 + 584);
  if (!a2)
    VVector<float>::internalMul((uint64_t *)(a1 + 584), a4, a5, a8, a9, 0.0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a6, a7, (a7 - (uint64_t)a6) >> 2);
  VVector<float>::internalMul(v12, (int *)__p, v15, (uint64_t)*a5, a8, a9);
  if (__p)
  {
    v15 = (int *)__p;
    operator delete(__p);
  }
  return VVector<float>::add<float>(a3, (float32x4_t **)v12, a8);
}

void VVector<float>::internalMul(uint64_t *a1, float **a2, __int16 **a3, int a4, int a5, float a6)
{
  __int16 *v12;
  __int16 *v13;
  float *v14;
  _WORD *v15;
  uint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 *v23;
  __int16 *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  float v29;
  float v30;

  v12 = (__int16 *)operator new[]();
  v13 = v12;
  if (a5 >= 1)
  {
    bzero(v12, 2 * a5);
    v14 = *a2;
    v15 = v13;
    v16 = a5;
    do
    {
      v17 = *v14;
      if (*v14 <= -5.0)
      {
        LOWORD(v18) = -32767;
      }
      else if (v17 < 5.0 && (v18 = llroundf(v17 * 6553.6), v18 < 0x8000))
      {
        if (v18 <= -32767)
          LOWORD(v18) = -32767;
      }
      else
      {
        LOWORD(v18) = 0x7FFF;
      }
      *v15++ = v18;
      ++v14;
      --v16;
    }
    while (v16);
  }
  if (a4 >= 1)
  {
    v19 = 0;
    v20 = *a3;
    v21 = *a1;
    do
    {
      if (a5 < 1)
      {
        v22 = 0;
      }
      else
      {
        v22 = 0;
        v23 = v13;
        v24 = v20;
        v25 = a5;
        do
        {
          v27 = *v23++;
          v26 = v27;
          v28 = *v24++;
          v22 += v28 * (uint64_t)v26;
          --v25;
        }
        while (v25);
      }
      v29 = 0.0;
      if (a6 != 0.0)
        v29 = *(float *)(v21 + 4 * v19);
      v30 = v29 + (double)v22 * 0.0000000232830644;
      *(float *)(v21 + 4 * v19++) = v30;
      v20 += a5;
    }
    while (v19 != a4);
  }
  JUMPOUT(0x19401CD78);
}

uint64_t SparseMatrix<float>::add<short>(uint64_t result, int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  v3 = *(unsigned int *)(result + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    while (1)
    {
      if (a2 >= 1)
      {
        v5 = *(float **)(*(_QWORD *)(result + 24) + 8 * v4);
        v6 = a2;
        do
        {
          *v5 = *v5 * a3;
          ++v5;
          --v6;
        }
        while (v6);
      }
      if (++v4 == v3)
      {
        v7 = *(_QWORD *)(result + 48);
        memset(v8, 0, sizeof(v8));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
        exitFramework(67);
      }
    }
  }
  return result;
}

void sub_1915908E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MMatrix<short>::write(__int16 **a1, FILE *__stream, int *a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  void *v14;
  char __ptr;

  if (a4 == 32)
  {
    if (__stream)
    {
      v11 = *a3 & 0xF;
      if (*a3 <= 0)
        v11 = -(-*a3 & 0xF);
      if (v11 >= 15)
        v12 = 16;
      else
        v12 = 15 - v11;
      __ptr = v12;
      fwrite(&__ptr, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v12);
      if ((*(_BYTE *)a3 & 0xF) == 0)
      {
        v13 = a6 * a5;
        v14 = (void *)operator new[]();
        bzero(v14, 4 * v13);
        writeArray<short,float>(__stream, a3, *a1, (float *)v14, v13);
        JUMPOUT(0x19401CD78);
      }
      exitFramework(18);
    }
    exitFramework(9);
  }
  if (a4 == 8 || a4 == 16)
    exitFramework(45);
  exitFramework(23);
}

uint64_t MMatrix<short>::read(char *a1, uint64_t a2, int a3, _BOOL4 a4, __int16 **a5, int a6)
{
  int v7;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int16 *v15;
  int v16;

  if (!a2)
LABEL_11:
    exitFramework(9);
  v7 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    v11 = *(_BYTE *)(a2 + 72);
  }
  else
  {
    v11 = *a1;
  }
  if ((v11 & 0xF) != 0)
    exitFramework(18);
  if (a4)
  {
    v12 = *(int *)(a2 + 72);
    v13 = *(_QWORD *)a2 + v12;
    *(_QWORD *)a1 = v13;
    *(_DWORD *)(a2 + 72) = v12 + 2 * a6 * v7;
    result = 2 * a6 * v7;
    if (!v13)
      goto LABEL_11;
  }
  else
  {
    v15 = *(__int16 **)a1;
    v16 = a6 * v7;
    result = ReadOnlyFile::readInt16Array((ReadOnlyFile *)a2, v15, &v16, a4, a5);
    if (!*(_QWORD *)a1)
      goto LABEL_11;
  }
  if (!result)
    goto LABEL_11;
  return result;
}

void FullLayer<short>::init(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  void *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  char *v63;
  int v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t i;
  uint64_t v74;
  void *v75;
  void *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t j;
  uint64_t v91;
  void *v92;
  void *v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  std::vector<int>::size_type v108;
  uint64_t v109;
  void *v110;
  void *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  std::string v157;
  void *__p[2];
  int64_t v159;

  v5 = *(_QWORD *)(a1 + 528);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 512);
  else
    v6 = 0;
  if (*(_BYTE *)(a1 + 40))
    v7 = *(_DWORD *)(a1 + 96) + (v6 ^ 1);
  else
    v7 = *(_DWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 108) = v8 * v7;
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!*(_BYTE *)(a1 + 117))
    {
      if (v5 && *(_DWORD *)(v5 + 40) == 1)
      {
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(v5 + 112);
      }
      else
      {
        MMatrix<short>::MMatrix(__p, v8, v7, a3);
        v9 = __p[0];
        *(void **)(a1 + 128) = __p[0];
        v11 = *(_QWORD **)(a1 + 80);
        v10 = *(_QWORD *)(a1 + 88);
        if ((unint64_t)v11 >= v10)
        {
          v13 = *(_QWORD *)(a1 + 72);
          v14 = ((uint64_t)v11 - v13) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v15 = v10 - v13;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v17);
          else
            v18 = 0;
          v19 = (_QWORD *)(v17 + 8 * v14);
          v20 = v17 + 8 * v18;
          *v19 = v9;
          v12 = v19 + 1;
          v22 = *(char **)(a1 + 72);
          v21 = *(char **)(a1 + 80);
          if (v21 != v22)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v19 = v23;
            }
            while (v21 != v22);
            v21 = *(char **)(a1 + 72);
          }
          *(_QWORD *)(a1 + 72) = v19;
          *(_QWORD *)(a1 + 80) = v12;
          *(_QWORD *)(a1 + 88) = v20;
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v11 = v9;
          v12 = v11 + 1;
        }
        *(_QWORD *)(a1 + 80) = v12;
      }
    }
    *(_QWORD *)(a1 + 512) = a1 + 128;
  }
  if (!*(_BYTE *)(a1 + 116))
  {
    v24 = *(unsigned int *)(a1 + 100);
    v25 = (void *)operator new[]();
    v26 = v25;
    if ((int)v24 >= 1)
      bzero(v25, 4 * v24);
    *(_QWORD *)(a1 + 416) = v26;
    v28 = *(_QWORD **)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v28 >= v27)
    {
      v30 = *(_QWORD *)(a1 + 48);
      v31 = ((uint64_t)v28 - v30) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        goto LABEL_213;
      v32 = v27 - v30;
      v33 = v32 >> 2;
      if (v32 >> 2 <= (unint64_t)(v31 + 1))
        v33 = v31 + 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v34);
      else
        v35 = 0;
      v36 = (_QWORD *)(v34 + 8 * v31);
      v37 = v34 + 8 * v35;
      *v36 = v26;
      v29 = v36 + 1;
      v39 = *(char **)(a1 + 48);
      v38 = *(char **)(a1 + 56);
      if (v38 != v39)
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = *(char **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v36;
      *(_QWORD *)(a1 + 56) = v29;
      *(_QWORD *)(a1 + 64) = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v28 = v26;
      v29 = v28 + 1;
    }
    *(_QWORD *)(a1 + 56) = v29;
    if (*(int *)(a1 + 112) >= 1)
    {
      SparseMatrix<float>::SparseMatrix((unsigned int *)__p, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), maxFeatureVectors, *(unsigned __int8 *)(a1 + 40) + 1);
      SparseMatrix<float>::operator=((unsigned int *)(a1 + 144), (__int128 *)__p);
      SparseMatrix<float>::~SparseMatrix((uint64_t)__p);
    }
    v41 = *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100);
    v42 = (void *)operator new[]();
    bzero(v42, 4 * v41);
    *(_QWORD *)(a1 + 136) = v42;
    v44 = *(_QWORD **)(a1 + 56);
    v43 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v44 < v43)
    {
      *v44 = v42;
      v45 = v44 + 1;
LABEL_67:
      *(_QWORD *)(a1 + 56) = v45;
      goto LABEL_68;
    }
    v46 = *(_QWORD *)(a1 + 48);
    v47 = ((uint64_t)v44 - v46) >> 3;
    if (!((unint64_t)(v47 + 1) >> 61))
    {
      v48 = v43 - v46;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
      else
        v51 = 0;
      v52 = (_QWORD *)(v50 + 8 * v47);
      v53 = v50 + 8 * v51;
      *v52 = v42;
      v45 = v52 + 1;
      v55 = *(char **)(a1 + 48);
      v54 = *(char **)(a1 + 56);
      if (v54 != v55)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *--v52 = v56;
        }
        while (v54 != v55);
        v54 = *(char **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v52;
      *(_QWORD *)(a1 + 56) = v45;
      *(_QWORD *)(a1 + 64) = v53;
      if (v54)
        operator delete(v54);
      goto LABEL_67;
    }
LABEL_213:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_68:
  if (!*(_DWORD *)(a1 + 504) && *(_QWORD *)(a1 + 128))
  {
    std::string::basic_string[abi:ne180100]<0>(&v157, " constructt W=");
    v58 = *(char *)(a2 + 23);
    if (v58 >= 0)
      v59 = (const std::string::value_type *)a2;
    else
      v59 = *(const std::string::value_type **)a2;
    if (v58 >= 0)
      v60 = *(unsigned __int8 *)(a2 + 23);
    else
      v60 = *(_QWORD *)(a2 + 8);
    v61 = std::string::insert(&v157, 0, v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v159 = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (v159 >= 0)
      v63 = (char *)__p;
    else
      v63 = (char *)__p[0];
    MMatrix<short>::print((__int16 **)(a1 + 128), v63, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
    if (SHIBYTE(v159) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if (!*(_DWORD *)(a1 + 504) && *(_QWORD *)(a1 + 128))
    {
      std::string::basic_string[abi:ne180100]<0>(&v157, " construct W=");
      v64 = *(char *)(a2 + 23);
      if (v64 >= 0)
        v65 = (const std::string::value_type *)a2;
      else
        v65 = *(const std::string::value_type **)a2;
      if (v64 >= 0)
        v66 = *(unsigned __int8 *)(a2 + 23);
      else
        v66 = *(_QWORD *)(a2 + 8);
      v67 = std::string::insert(&v157, 0, v65, v66);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v159 = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if (v159 >= 0)
        v69 = (char *)__p;
      else
        v69 = (char *)__p[0];
      MMatrix<short>::print((__int16 **)(a1 + 128), v69, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (SHIBYTE(v159) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
    }
  }
  if (*(int *)(a1 + 112) < 1)
    v57 = 0;
  else
    v57 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (*(_BYTE *)(a1 + 42))
    v70 = 2;
  else
    v70 = maxFeatureVectors;
  if (((*(_BYTE *)(a1 + 42) != 0) & v57) != 0)
    v71 = 2;
  else
    v71 = maxFeatureVectors;
  std::vector<VVector<float>>::resize((char **)(a1 + 264), (int)v71);
  std::vector<VVector<float>>::resize((char **)(a1 + 384), (int)v70);
  std::vector<VVector<float>>::resize((char **)(a1 + 288), maxFeatureVectors);
  if (!*(_BYTE *)(a1 + 116))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 312), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 336), maxFeatureVectors);
  }
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 360), maxFeatureVectors);
  v72 = *(unsigned __int8 *)(a1 + 40);
  if ((int)v71 >= 1)
  {
    for (i = 0; i != v71; ++i)
    {
      v74 = *(unsigned int *)(a1 + 104);
      v75 = (void *)operator new[]();
      v76 = v75;
      if ((int)v74 >= 1)
        bzero(v75, 4 * v74);
      *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * i) = v76;
      v78 = *(_QWORD **)(a1 + 56);
      v77 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v78 >= v77)
      {
        v80 = *(_QWORD *)(a1 + 48);
        v81 = ((uint64_t)v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          goto LABEL_213;
        v82 = v77 - v80;
        v83 = v82 >> 2;
        if (v82 >> 2 <= (unint64_t)(v81 + 1))
          v83 = v81 + 1;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        if (v84)
          v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v84);
        else
          v85 = 0;
        v86 = (_QWORD *)(v84 + 8 * v81);
        *v86 = v76;
        v79 = v86 + 1;
        v88 = *(char **)(a1 + 48);
        v87 = *(char **)(a1 + 56);
        if (v87 != v88)
        {
          do
          {
            v89 = *((_QWORD *)v87 - 1);
            v87 -= 8;
            *--v86 = v89;
          }
          while (v87 != v88);
          v87 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v86;
        *(_QWORD *)(a1 + 56) = v79;
        *(_QWORD *)(a1 + 64) = v84 + 8 * v85;
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v78 = v76;
        v79 = v78 + 1;
      }
      *(_QWORD *)(a1 + 56) = v79;
    }
  }
  if ((int)v70 >= 1)
  {
    for (j = 0; j != v70; ++j)
    {
      v91 = *(unsigned int *)(a1 + 100);
      v92 = (void *)operator new[]();
      v93 = v92;
      if ((int)v91 >= 1)
        bzero(v92, 4 * v91);
      *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * j) = v93;
      v95 = *(_QWORD **)(a1 + 56);
      v94 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v95 >= v94)
      {
        v97 = *(_QWORD *)(a1 + 48);
        v98 = ((uint64_t)v95 - v97) >> 3;
        if ((unint64_t)(v98 + 1) >> 61)
          goto LABEL_213;
        v99 = v94 - v97;
        v100 = v99 >> 2;
        if (v99 >> 2 <= (unint64_t)(v98 + 1))
          v100 = v98 + 1;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
          v101 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v101 = v100;
        if (v101)
          v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v101);
        else
          v102 = 0;
        v103 = (_QWORD *)(v101 + 8 * v98);
        *v103 = v93;
        v96 = v103 + 1;
        v105 = *(char **)(a1 + 48);
        v104 = *(char **)(a1 + 56);
        if (v104 != v105)
        {
          do
          {
            v106 = *((_QWORD *)v104 - 1);
            v104 -= 8;
            *--v103 = v106;
          }
          while (v104 != v105);
          v104 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v103;
        *(_QWORD *)(a1 + 56) = v96;
        *(_QWORD *)(a1 + 64) = v101 + 8 * v102;
        if (v104)
          operator delete(v104);
      }
      else
      {
        *v95 = v93;
        v96 = v95 + 1;
      }
      *(_QWORD *)(a1 + 56) = v96;
    }
  }
  if (maxFeatureVectors >= 1)
  {
    v107 = 0;
    if (v72)
      v108 = 2;
    else
      v108 = 1;
    do
    {
      if (!*(_BYTE *)(a1 + 116))
      {
        v109 = *(unsigned int *)(a1 + 104);
        v110 = (void *)operator new[]();
        v111 = v110;
        if ((int)v109 >= 1)
          bzero(v110, 4 * v109);
        *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v107) = v111;
        v113 = *(_QWORD **)(a1 + 56);
        v112 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v113 >= v112)
        {
          v115 = *(_QWORD *)(a1 + 48);
          v116 = ((uint64_t)v113 - v115) >> 3;
          if ((unint64_t)(v116 + 1) >> 61)
            goto LABEL_213;
          v117 = v112 - v115;
          v118 = v117 >> 2;
          if (v117 >> 2 <= (unint64_t)(v116 + 1))
            v118 = v116 + 1;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
            v119 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v119 = v118;
          if (v119)
            v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v119);
          else
            v120 = 0;
          v121 = (_QWORD *)(v119 + 8 * v116);
          *v121 = v111;
          v114 = v121 + 1;
          v123 = *(char **)(a1 + 48);
          v122 = *(char **)(a1 + 56);
          if (v122 != v123)
          {
            do
            {
              v124 = *((_QWORD *)v122 - 1);
              v122 -= 8;
              *--v121 = v124;
            }
            while (v122 != v123);
            v122 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v121;
          *(_QWORD *)(a1 + 56) = v114;
          *(_QWORD *)(a1 + 64) = v119 + 8 * v120;
          if (v122)
            operator delete(v122);
        }
        else
        {
          *v113 = v111;
          v114 = v113 + 1;
        }
        *(_QWORD *)(a1 + 56) = v114;
        v125 = *(unsigned int *)(a1 + 100);
        v126 = (void *)operator new[]();
        v127 = v126;
        if ((int)v125 >= 1)
          bzero(v126, 4 * v125);
        *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v107) = v127;
        v129 = *(_QWORD **)(a1 + 56);
        v128 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v129 >= v128)
        {
          v131 = *(_QWORD *)(a1 + 48);
          v132 = ((uint64_t)v129 - v131) >> 3;
          if ((unint64_t)(v132 + 1) >> 61)
            goto LABEL_213;
          v133 = v128 - v131;
          v134 = v133 >> 2;
          if (v133 >> 2 <= (unint64_t)(v132 + 1))
            v134 = v132 + 1;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8)
            v135 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v135 = v134;
          if (v135)
            v135 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v135);
          else
            v136 = 0;
          v137 = (_QWORD *)(v135 + 8 * v132);
          *v137 = v127;
          v130 = v137 + 1;
          v139 = *(char **)(a1 + 48);
          v138 = *(char **)(a1 + 56);
          if (v138 != v139)
          {
            do
            {
              v140 = *((_QWORD *)v138 - 1);
              v138 -= 8;
              *--v137 = v140;
            }
            while (v138 != v139);
            v138 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v137;
          *(_QWORD *)(a1 + 56) = v130;
          *(_QWORD *)(a1 + 64) = v135 + 8 * v136;
          if (v138)
            operator delete(v138);
        }
        else
        {
          *v129 = v127;
          v130 = v129 + 1;
        }
        *(_QWORD *)(a1 + 56) = v130;
      }
      v141 = *(unsigned int *)(a1 + 100);
      v142 = (void *)operator new[]();
      v143 = v142;
      if ((int)v141 >= 1)
        bzero(v142, 4 * v141);
      *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v107) = v143;
      v145 = *(_QWORD **)(a1 + 56);
      v144 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v145 >= v144)
      {
        v147 = *(_QWORD *)(a1 + 48);
        v148 = ((uint64_t)v145 - v147) >> 3;
        if ((unint64_t)(v148 + 1) >> 61)
          goto LABEL_213;
        v149 = v144 - v147;
        v150 = v149 >> 2;
        if (v149 >> 2 <= (unint64_t)(v148 + 1))
          v150 = v148 + 1;
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8)
          v151 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v151 = v150;
        if (v151)
          v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v151);
        else
          v152 = 0;
        v153 = (_QWORD *)(v151 + 8 * v148);
        *v153 = v143;
        v146 = v153 + 1;
        v155 = *(char **)(a1 + 48);
        v154 = *(char **)(a1 + 56);
        if (v154 != v155)
        {
          do
          {
            v156 = *((_QWORD *)v154 - 1);
            v154 -= 8;
            *--v153 = v156;
          }
          while (v154 != v155);
          v154 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v153;
        *(_QWORD *)(a1 + 56) = v146;
        *(_QWORD *)(a1 + 64) = v151 + 8 * v152;
        if (v154)
          operator delete(v154);
      }
      else
      {
        *v145 = v143;
        v146 = v145 + 1;
      }
      *(_QWORD *)(a1 + 56) = v146;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 360) + 24 * v107++), v108);
    }
    while (v107 < maxFeatureVectors);
  }
}

void sub_1915915EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<short>::~FullLayer(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;

  *(_QWORD *)a1 = off_1E2D59178;
  FullLayer<short>::cleanupAllBuffers(a1);
  v2 = *(_QWORD *)(a1 + 424);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    *(_QWORD *)(a1 + 424) = 0;
  }
  *(_QWORD *)(a1 + 432) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 440));
  v3 = *(void **)(a1 + 384);
  if (v3)
  {
    *(_QWORD *)(a1 + 392) = v3;
    operator delete(v3);
  }
  v12 = (void **)(a1 + 360);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(_QWORD *)(a1 + 344) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 264);
  if (v7)
  {
    *(_QWORD *)(a1 + 272) = v7;
    operator delete(v7);
  }
  SparseMatrix<float>::~SparseMatrix(a1 + 144);
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(_QWORD *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void FullLayer<short>::cleanupAllBuffers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = *(_QWORD *)(a1 + 48);
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 == v6)
  {
    v6 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C80BDFB0063);
        v6 = *(_QWORD *)(a1 + 72);
        v7 = *(_QWORD *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    v2 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 80) = v6;
  SparseMatrix<float>::cleanupAllBuffers((_QWORD *)(a1 + 144));
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 360));
  if (!*(_BYTE *)(a1 + 116))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
  }
}

void FullLayer<short>::targets()
{
  exitFramework(1);
}

uint64_t FullLayer<short>::inputs(uint64_t a1)
{
  return a1 + 264;
}

uint64_t FullLayer<short>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t FullLayer<short>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t FullLayer<short>::inputDeltas(uint64_t a1)
{
  return a1 + 312;
}

uint64_t FullLayer<short>::weightsAreNaN()
{
  return 0;
}

uint64_t FullLayer<short>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  uint64_t v9;
  int *v10;
  int v11;
  __int16 **v12;
  int v13;
  char v15[8];

  v5 = (int)a4;
  *(_QWORD *)v15 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v15[4], v15, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((int *)this + 18);
    v10 = (int *)(*(_QWORD *)this + v9);
    if ((unint64_t)v10 <= *(_QWORD *)this + *((_QWORD *)this + 1) - 4)
    {
      v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v11 = 0;
    }
    *(_DWORD *)(a1 + 408) = v11;
  }
  v12 = (__int16 **)*(unsigned int *)(a1 + 100);
  if ((_DWORD)v12 != *(_DWORD *)&v15[4] || (v13 = *(_DWORD *)(a1 + 104), v13 != *(_DWORD *)v15))
    exitFramework(3);
  return MMatrix<short>::read(*(char **)(a1 + 512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 117), v12, v13);
}

void FullLayer<short>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 100), *(_DWORD *)(a1 + 104));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 408);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  MMatrix<short>::write(*(__int16 ***)(a1 + 512), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

_QWORD *FullLayer<short>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  __int16 *v8;
  __int16 *v9;
  _WORD *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  result = 0;
LABEL_6:
  v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v7 >= 1)
  {
    v8 = (__int16 *)result[16];
    v9 = (__int16 *)v5[16];
    v10 = **(_WORD ***)(a1 + 512);
    do
    {
      v12 = *v8++;
      v11 = v12;
      v13 = *v9++;
      *v10++ = v11 - v13;
      --v7;
    }
    while (v7);
  }
  return result;
}

void *FullLayer<short>::compareModels(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
  if (a3)
  return result;
}

_QWORD *FullLayer<short>::addGradient(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  _WORD *v5;
  __int16 *v6;
  __int16 v7;

  if (lpsrc)
  else
    result = 0;
  v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v4 >= 1)
  {
    v5 = **(_WORD ***)(a1 + 512);
    v6 = (__int16 *)result[16];
    do
    {
      v7 = *v6++;
      *v5++ += v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void FullLayer<short>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 64))(*(_QWORD *)(a1 + 424));
  exitFramework(23);
}

uint64_t FullLayer<short>::clipModel(uint64_t result, float a2)
{
  uint64_t v2;
  __int16 *v3;
  float v4;
  float v5;

  v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    v3 = **(__int16 ***)(result + 512);
    do
    {
      v4 = (float)*v3;
      v5 = -a2;
      if (v4 < (float)-a2 || (v5 = a2, v4 > a2))
        *v3 = (int)v5;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t FullLayer<short>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  __int16 *v3;

  v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    v3 = **(__int16 ***)(result + 512);
    do
    {
      *v3 = (int)(float)((float)*v3 * a2);
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void FullLayer<short>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v2 = *(_QWORD *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print before reset");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424));
  v3 = *(_QWORD *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print AFTER reset");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_191591CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *FullLayer<short>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t *v5;
  char *result;

  v3 = **(_QWORD **)(a1 + 512);
  v4 = *(double *)(a1 + 100);
  v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    *v5 = v3;
    *((double *)v5 + 1) = v4;
    result = (char *)(v5 + 2);
  }
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t FullLayer<short>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 128) = v3;
  result = a1 + 128;
  *(_QWORD *)(result + 384) = result;
  return result;
}

uint64_t FullLayer<short>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t FullLayer<short>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void FullLayer<short>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_191591DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FullLayer<short>::log2ProbabilityForSingleFeatureVector(uint64_t a1, _QWORD *a2, float *a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;

  v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    v10 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v9 = 1.1755e-38;
    do
    {
      v8 = *(_QWORD *)(*a2 + 8 * a4);
      if (*(float *)(v8 + 4 * v7) > v9)
      {
        v6 = v7;
        v9 = *(float *)(v8 + 4 * v7);
      }
      ++v7;
    }
    while (v5 != v7);
    v10 = v6;
  }
  v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
    v12 = 99.0;
  else
    v12 = 0.0 - log2f(v11);
  *a3 = v12;
}

float FullLayer<short>::computeErrorForSingleFeatureVector(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, _DWORD *a5, float result)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float **v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float v22;

  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    v14 = *a2;
    v15 = (float **)(*a2 + 8 * a4);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v11 = 1.1755e-38;
    do
    {
      v10 = *(_QWORD *)(v6 + 8 * a4);
      if (*(float *)(v10 + 4 * v9) > v11)
      {
        v8 = v9;
        v11 = *(float *)(v10 + 4 * v9);
      }
      ++v9;
    }
    while (v7 != v9);
    v12 = 0;
    v13 = 0;
    v14 = *a2;
    v15 = (float **)(*a2 + 8 * a4);
    result = 1.1755e-38;
    do
    {
      if ((*v15)[v13] > result)
      {
        v12 = v13;
        result = (*v15)[v13];
      }
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12)
      ++*a5;
  }
  if (a4 < (unint64_t)((uint64_t)(a3[1] - *a3) >> 3)
    && a4 < (unint64_t)((a2[1] - v14) >> 3)
    && a4 < (unint64_t)((*(_QWORD *)(a1 + 296) - v6) >> 3))
  {
    v16 = *(unsigned int *)(a1 + 100);
    if ((int)v16 >= 1)
    {
      v17 = *v15;
      v18 = *(float **)(v6 + 8 * a4);
      v19 = *(float **)(*a3 + 8 * a4);
      do
      {
        v20 = *v17++;
        v21 = v20;
        v22 = *v18++;
        result = v21 - v22;
        *v19++ = result;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

void FullLayer<short>::backwardForSingleFeatureVector(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  void *__p;
  void *v11;
  uint64_t v12;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 416), *(float **)(*(_QWORD *)(a1 + 384) + 8 * a4), *(float **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
    VVector<float>::internalMul((uint64_t *)(*(_QWORD *)(a1 + 312) + 8 * a4), (float **)(a1 + 416), *(__int16 ***)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    VVector<float>::sumOuterProd(a1 + 416, *(_QWORD *)(a1 + 264) + 8 * a4, *(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
  }
  else
  {
    v8 = *a2;
    v9 = *(_QWORD *)(a1 + 360) + 24 * a4;
    v11 = 0;
    v12 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
    SparseMatrix<float>::sum<float>(a1 + 144, *(int **)(v8 + 8 * a4), (uint64_t)__p, *(_DWORD *)(a1 + 100));
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
}

void FullLayer<short>::initDW(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 116))
  {
    if (*(_DWORD *)(a1 + 112))
      *(_DWORD *)(a1 + 160) = 0;
    else
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  }
  v4 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(a1 + 272) != v4)
  {
    v5 = 0;
    do
    {
      bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
      v4 = *(_QWORD *)(a1 + 264);
    }
    while (v5 < (*(_QWORD *)(a1 + 272) - v4) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v6)
  {
    v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      v6 = *(_QWORD *)(a1 + 288);
    }
    while (v7 < (*(_QWORD *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1)
  {
    v8 = 0;
    v9 = 8 * a2;
    do
    {
      if (!*(_BYTE *)(a1 + 116))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
        bzero(*(void **)(*(_QWORD *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
}

uint64_t FullLayer<short>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t FullLayer<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

void FullLayer<short>::update(uint64_t a1)
{
  if (*(int *)(a1 + 112) >= 1)
    exitFramework(33);
  exitFramework(23);
}

void FullLayer<short>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  if (*(int *)(a1 + 112) < 1)
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  else
    *(_DWORD *)(a1 + 160) = 0;
  v9 = __OFSUB__(a5, 1);
  v10 = a5 - 1;
  if (v10 < 0 == v9)
  {
    v11 = 0;
    do
    {
      if (*(_BYTE *)(a1 + 520))
        v12 = v11;
      else
        v12 = v10;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
      --v10;
      ++v11;
    }
    while (v10 != -1);
  }
}

void FullLayer<short>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const void **v21;
  _DWORD *v22;
  uint64_t v23;
  float **v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  float *v28;
  uint64_t v29;
  int v30;
  void *v32;
  int *v33;
  uint64_t v34;
  void *__p;
  char v36;

  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
    v9 = 0;
  else
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v10 = *(unsigned __int8 *)(a1 + 520);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fulllayer");
  if (a5 && v10)
    exitFramework(34);
  v11 = a4 & 0xFFFFFF;
  v12 = a5 != 0;
  if (v36 < 0)
    operator delete(__p);
  if (v11 > v12)
  {
    do
    {
      if (*(_BYTE *)(a1 + 520))
        v13 = v11 + ~v12;
      else
        v13 = v12;
      v14 = v13;
      if (*(_BYTE *)(a1 + 42))
        v15 = 1;
      else
        v15 = v13;
      if (((*(_BYTE *)(a1 + 42) != 0) & v9) != 0)
        v16 = 1;
      else
        v16 = v13;
      v17 = *(_QWORD *)(a1 + 264);
      if (v9)
      {
        bzero(*(void **)(v17 + 8 * v16), 4 * *(int *)(a1 + 104));
        v18 = *(_QWORD *)(a1 + 264);
        *(_DWORD *)(*(_QWORD *)(v18 + 8 * v16) + 4 * **(int **)(*a3 + 24 * (int)v14)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v17 + 8 * v16), *(const void **)(*a2 + 8 * v16), 4 * *(int *)(a1 + 96));
        v18 = *(_QWORD *)(a1 + 264);
      }
      v19 = *(_DWORD *)(a1 + 104);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(v18 + 8 * v16) + 4 * (v19 - 1)) = 1065353216;
      VVector<float>::print((float **)(v18 + 8 * v16), "FullLayer input: ", v19);
      MMatrix<short>::print(*(__int16 ***)(a1 + 512), "FullLayer weights: ", *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (!v9)
        VVector<float>::internalMul((uint64_t *)(*(_QWORD *)(a1 + 384) + 8 * v15), (float **)(*(_QWORD *)(a1 + 264) + 8 * v16), *(__int16 ***)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
      v20 = *(_QWORD *)(a1 + 360);
      v21 = (const void **)(v20 + 24 * v14);
      v22 = *v21;
      *(_DWORD *)*v21 = **(_DWORD **)(*a3 + 24 * v14);
      if (*(_BYTE *)(a1 + 40))
        v22[1] = *(_DWORD *)(a1 + 104) - 1;
      v23 = v15;
      v24 = (float **)(*(_QWORD *)(a1 + 384) + 8 * v15);
      v33 = 0;
      v34 = 0;
      v32 = 0;
      v25 = *(_QWORD *)(v20 + 24 * (int)v14 + 8);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *v21, v25, (v25 - (uint64_t)*v21) >> 2);
      VVector<float>::internalMul(v24, (int *)v32, v33, **(_QWORD **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
      if (v32)
      {
        v33 = (int *)v32;
        operator delete(v32);
      }
      v26 = *(_QWORD *)(a1 + 384);
      v27 = *(_DWORD *)(a1 + 100);
      v28 = *(float **)(v26 + 8 * v23);
      if (v27 >= 1)
      {
        v29 = *(unsigned int *)(a1 + 100);
        do
        {
          v30 = -1035468800;
          if (*v28 < -50.0 || (v30 = 1112014848, *v28 > 50.0))
            *(_DWORD *)v28 = v30;
          ++v28;
          --v29;
        }
        while (v29);
        v28 = *(float **)(v26 + 8 * v23);
      }
      VVector<float>::applyForwardActivation((void **)(*(_QWORD *)(a1 + 288) + 8 * v14), v28, v27, *(_DWORD *)(a1 + 408));
      ++v12;
    }
    while (v12 != v11);
  }
}

void sub_1915925E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<short>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[520] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      FullLayer<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A728 = 0;
      qword_1EE21A730 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &FullLayer<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &FullLayer<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[520] = 0;
  return result;
}

uint64_t FullLayer<short>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[520] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *FullLayer<short>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 504) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 512) = result + 128;
  return result;
}

void FullLayer<short>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 504))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 440));
    if (!*(_DWORD *)(a1 + 112))
      exitFramework(23);
    exitFramework(33);
  }
  exitFramework(1);
}

_DWORD *FullLayer<short>::computeError(_DWORD *result)
{
  if (!result[30])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 392))(result);
  return result;
}

float FullLayer<short>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = 0;
  v4 = *(unsigned int *)(a1 + 100);
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 288);
  v7 = a3;
  v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v12 = 1.1755e-38;
      do
      {
        v11 = *(_QWORD *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          v9 = v10;
          v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    v13 = *(float *)(*(_QWORD *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10)
      v14 = 99.0;
    else
      v14 = -log2f(v13);
    v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

void FullLayer<short>::~FullLayer(uint64_t a1)
{
  FullLayer<short>::~FullLayer(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t FullLayer<short>::outputDeltas(uint64_t a1)
{
  return a1 + 336;
}

float FullLayer<short>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a2) + 4 * a3);
}

void FullLayer<short>::computeErrorRMSE(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  void *__p[2];
  unsigned __int8 v33;
  std::string v34;
  void *v35[2];
  int64_t v36;

  if (a4 >= 1)
  {
    v9 = a4;
    do
    {
      v10 = (v9 - 1);
      v11 = *(unsigned int *)(a1 + 100);
      if ((int)v11 >= 1)
      {
        v12 = 0;
        v13 = 0;
        v14 = *(float **)(*(_QWORD *)(a1 + 288) + 8 * v10);
        v15 = 1.1755e-38;
        do
        {
          if (v14[v13] > v15)
          {
            v12 = v13;
            v15 = v14[v13];
          }
          ++v13;
        }
        while (v11 != v13);
        v16 = 0;
        v17 = 0;
        v18 = *(float **)(*a2 + 8 * v10);
        v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            v16 = v17;
            v19 = v18[v17];
          }
          ++v17;
        }
        while (v11 != v17);
        if (v12 != v16)
        {
          ++*a5;
          v11 = *(unsigned int *)(a1 + 100);
        }
        if ((int)v11 >= 1)
        {
          v20 = *(float **)(*a3 + 8 * v10);
          do
          {
            v21 = *v18++;
            v22 = v21;
            v23 = *v14++;
            *v20++ = v22 - v23;
            --v11;
          }
          while (v11);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v34, "SoftMax ComputerError::targets t=");
      i2s(__p);
      if ((v33 & 0x80u) == 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      if ((v33 & 0x80u) == 0)
        v25 = v33;
      else
        v25 = (std::string::size_type)__p[1];
      v26 = std::string::append(&v34, (const std::string::value_type *)v24, v25);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v36 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)v35 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((char)v33 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (v36 >= 0)
        v28 = (char *)v35;
      else
        v28 = (char *)v35[0];
      VVector<float>::print((float **)(*a2 + 8 * v10), v28, *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*(_QWORD *)(a1 + 288) + 8 * v10), "SoftMax ComputerError::output ", *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*a3 + 8 * v10), "SoftMax ComputerError::deltas ", *(_DWORD *)(a1 + 100));
      if (SHIBYTE(v36) < 0)
        operator delete(v35[0]);
      v31 = __OFSUB__(v9, 1);
      v29 = v9 == 1;
      v30 = --v9 < 0;
    }
    while (!(v30 ^ v31 | v29));
  }
}

void sub_191592B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void SoftMax<short>::targets()
{
  exitFramework(1);
}

uint64_t SoftMax<short>::inputs(uint64_t a1)
{
  return a1 + 264;
}

uint64_t SoftMax<short>::outputs(uint64_t a1)
{
  return a1 + 288;
}

void SoftMax<short>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax, from allocAll");
  FullLayer<short>::init(a1, (uint64_t)__p, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_191592BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoftMax<short>::forwardForSingleFeatureVector(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, _QWORD *a5)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 **v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;

  v9 = *(unsigned __int8 *)(a1 + 42);
  v10 = a4;
  v11 = *(_DWORD *)(a1 + 100);
  v12 = *(int *)(a1 + 96);
  v13 = *(__int16 ***)(a1 + 512);
  v14 = *(_DWORD *)(a1 + 104);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  memmove(*(void **)(*v15 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v12);
  if (*(_BYTE *)(a1 + 40))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 8 * v10)
              + 4 * (v14 - 1)) = 1065353216;
  if (a5[1] == *a5)
  {
    if (v9)
      v16 = 1;
    else
      v16 = v10;
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 384) + 8 * v16);
    v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    VVector<float>::internalMul(v17, (float **)(*v18 + 8 * v10), v13, v11, v14, 0.0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  exitFramework(65);
}

void SoftMax<short>::forward(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  void *__p;
  char v17;

  v13 = a1[520];
  std::string::basic_string[abi:ne180100]<0>(&__p, "Softmax");
  if (a5 && v13)
    exitFramework(34);
  v14 = a4 & 0xFFFFFF;
  v15 = a5 != 0;
  if (v17 < 0)
    operator delete(__p);
  if (v14 > v15)
  {
    do
    {
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2, a3, v15, a7);
      v15 = (v15 + 1);
    }
    while (v14 != (_DWORD)v15);
  }
}

void sub_191592E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoftMax<short>::~SoftMax(uint64_t a1)
{
  FullLayer<short>::~FullLayer(a1);
  JUMPOUT(0x19401CD90);
}

void RecurrentLayer<short>::targets()
{
  exitFramework(1);
}

uint64_t RecurrentLayer<short>::inputs(uint64_t a1)
{
  return a1 + 88;
}

uint64_t RecurrentLayer<short>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t RecurrentLayer<short>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t RecurrentLayer<short>::inputDeltas(uint64_t a1)
{
  return a1 + 136;
}

uint64_t RecurrentLayer<short>::weightsAreNaN()
{
  return 0;
}

uint64_t RecurrentLayer<short>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  uint64_t v9;
  int *v10;
  int v11;
  __int16 **v12;
  int v13;
  char v15[8];

  v5 = (int)a4;
  *(_QWORD *)v15 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v15[4], v15, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((int *)this + 18);
    v10 = (int *)(*(_QWORD *)this + v9);
    if ((unint64_t)v10 <= *(_QWORD *)this + *((_QWORD *)this + 1) - 4)
    {
      v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v11 = 0;
    }
    *(_DWORD *)(a1 + 208) = v11;
  }
  v12 = (__int16 **)*(unsigned int *)(a1 + 48);
  if ((_DWORD)v12 != *(_DWORD *)&v15[4] || (v13 = *(_DWORD *)(a1 + 52), v13 != *(_DWORD *)v15))
    exitFramework(3);
  return MMatrix<short>::read(*(char **)(a1 + 376), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 61), v12, v13);
}

void RecurrentLayer<short>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 48), *(_DWORD *)(a1 + 52));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 208);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  MMatrix<short>::write(*(__int16 ***)(a1 + 376), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

_QWORD *RecurrentLayer<short>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  __int16 *v8;
  __int16 *v9;
  _WORD *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  result = 0;
LABEL_6:
  v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v7 >= 1)
  {
    v8 = (__int16 *)result[8];
    v9 = (__int16 *)v5[8];
    v10 = **(_WORD ***)(a1 + 376);
    do
    {
      v12 = *v8++;
      v11 = v12;
      v13 = *v9++;
      *v10++ = v11 - v13;
      --v7;
    }
    while (v7);
  }
  return result;
}

void *RecurrentLayer<short>::compareModels(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
  if (a3)
  return result;
}

_QWORD *RecurrentLayer<short>::addGradient(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  _WORD *v5;
  __int16 *v6;
  __int16 v7;

  if (lpsrc)
  else
    result = 0;
  v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v4 >= 1)
  {
    v5 = **(_WORD ***)(a1 + 376);
    v6 = (__int16 *)result[8];
    do
    {
      v7 = *v6++;
      *v5++ += v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void RecurrentLayer<short>::allocInitialState(uint64_t a1, void **a2)
{
  _QWORD *v4;
  int v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = (_QWORD *)operator new();
  VVector<float>::VVector(v4, *(_DWORD *)(a1 + 48), 0);
  v5 = *(_DWORD *)(a1 + 48);
  v7 = (char *)a2[1];
  v6 = (char *)a2[2];
  if (v7 >= v6)
  {
    v9 = (v7 - (_BYTE *)*a2) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - (_BYTE *)*a2;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 16 * v9;
    v15 = v12 + 16 * v13;
    *(_DWORD *)v14 = v5;
    *(_QWORD *)(v14 + 8) = v4;
    v8 = (void *)(v14 + 16);
    v17 = (char *)*a2;
    v16 = (char *)a2[1];
    if (v16 != *a2)
    {
      do
      {
        *(_OWORD *)(v14 - 16) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a2;
    }
    *a2 = (void *)v14;
    a2[1] = v8;
    a2[2] = (void *)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v7 = v5;
    *((_QWORD *)v7 + 1) = v4;
    v8 = v7 + 16;
  }
  a2[1] = v8;
}

void sub_191593308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void *RecurrentLayer<short>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *result;

  v5 = *(int *)(a1 + 48);
  v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void RecurrentLayer<short>::restoreState(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8[200];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *a4;
  *a4 = v7 + 1;
  memmove(*(void **)(v6 + 8 * a3), **(const void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(a1 + 48));
  sprintf(v8, "RNN restore startTimIdx = %d", a3);
  VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * a3), v8, *(_DWORD *)(a1 + 48));
}

void RecurrentLayer<short>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v4;

  v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

char *RecurrentLayer<short>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t *v5;
  char *result;

  v3 = **(_QWORD **)(a1 + 376);
  v4 = *(double *)(a1 + 48);
  v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    *v5 = v3;
    *((double *)v5 + 1) = v4;
    result = (char *)(v5 + 2);
  }
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t RecurrentLayer<short>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 64) = v3;
  result = a1 + 64;
  *(_QWORD *)(result + 312) = result;
  return result;
}

uint64_t RecurrentLayer<short>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t RecurrentLayer<short>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void RecurrentLayer<short>::allocAllBuffers(uint64_t a1)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, __p, 0, -0.44);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_19159356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<short>::cleanupAllBuffers(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 248);
  v3 = *(_QWORD *)(result + 256);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(result + 256);
  }
  else
  {
    v4 = 0;
    do
    {
      result = *(_QWORD *)(v2 + 8 * v4);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C8052888210);
        v2 = v1[31];
        v3 = v1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v5 = v1[34];
  v6 = v1[35];
  if (v6 == v5)
  {
    v5 = v1[35];
  }
  else
  {
    v7 = 0;
    do
    {
      result = *(_QWORD *)(v5 + 8 * v7);
      if (result)
      {
        result = MEMORY[0x19401CD78](result, 0x1000C80BDFB0063);
        v5 = v1[34];
        v6 = v1[35];
      }
      ++v7;
    }
    while (v7 < (v6 - v5) >> 3);
    v2 = v1[31];
  }
  v1[32] = v2;
  v1[35] = v5;
  return result;
}

uint64_t RecurrentLayer<short>::ninputs(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t RecurrentLayer<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t RecurrentLayer<short>::update(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v5;
  __int16 *v6;
  float *v7;
  float v8;

  result = operator new[]();
  v5 = *(unsigned int *)(a1 + 56);
  if ((int)v5 >= 1)
  {
    v6 = *(__int16 **)(a1 + 64);
    v7 = *(float **)(a1 + 80);
    do
    {
      v8 = *v7++;
      *v6 = (int)(float)((float)*v6 + (float)(v8 * (float)(int)a2));
      ++v6;
      --v5;
    }
    while (v5);
  }
  return result;
}

void RecurrentLayer<short>::backward(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  void *v27[2];
  int64_t v28;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) != 0)
  {
    bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
    if (a5 >= 1)
    {
      v9 = 0;
      do
      {
        --a5;
        if (*(_BYTE *)(a1 + 232))
          v10 = v9;
        else
          v10 = a5;
        v11 = v10;
        VVector<float>::sumOuterProd(*a4 + 8 * v10, *(_QWORD *)(a1 + 88) + 8 * v10, *(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
        if (*(_BYTE *)(a1 + 40))
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v11) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
        std::string::basic_string[abi:ne180100]<0>(&v25, "FullLayer DW: t[");
        i2s(v23);
        if ((v24 & 0x80u) == 0)
          v12 = v23;
        else
          v12 = (void **)v23[0];
        if ((v24 & 0x80u) == 0)
          v13 = v24;
        else
          v13 = (std::string::size_type)v23[1];
        v14 = std::string::append(&v25, (const std::string::value_type *)v12, v13);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "] ");
        if ((v22 & 0x80u) == 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        if ((v22 & 0x80u) == 0)
          v17 = v22;
        else
          v17 = (std::string::size_type)__p[1];
        v18 = std::string::append(&v26, (const std::string::value_type *)v16, v17);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v28 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)v27 = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((char)v22 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        if ((char)v24 < 0)
          operator delete(v23[0]);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (v28 >= 0)
          v20 = (char *)v27;
        else
          v20 = (char *)v27[0];
        MMatrix<float>::print((float **)(a1 + 80), v20, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
        if (SHIBYTE(v28) < 0)
          operator delete(v27[0]);
        ++v9;
      }
      while (a5 > 0);
    }
  }
  else
  {
    if (a5 > 0)
    {
      if (*(_BYTE *)(a1 + 232))
        v8 = 0;
      else
        v8 = a5 - 1;
      VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 216), *(float **)(*(_QWORD *)(a1 + 184) + 8 * v8), *(float **)(*a4 + 8 * v8), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      VVector<float>::internalMul((uint64_t *)(*(_QWORD *)(a1 + 136) + 8 * v8), (float **)(a1 + 216), *(__int16 ***)(a1 + 376), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 0.0);
    }
    bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  }
}

void sub_1915939D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<short>::forward(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  _BOOL4 v10;
  BOOL v11;
  char v12;
  signed int v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  void *v17;
  char v18;
  char *p_p;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  void *v23;
  char v24;
  __int16 **v25;
  char *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int *v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  _DWORD *v41;
  int v42;
  std::string v43;
  std::string v44;
  void *__p;
  __int128 v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 240);
  if (v9)
    v10 = !*(_BYTE *)(v9 + 20) && *(_DWORD *)(v9 + 40) == 1 && *(_DWORD *)(v9 + 44) == 1;
  else
    v10 = 1;
  v11 = *(_BYTE *)(a1 + 232) != 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Recurrent");
  v12 = !v11;
  if (!a5)
    v12 = 1;
  if ((v12 & 1) == 0)
    exitFramework(34);
  v13 = a5 != 0;
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  __p = 0;
  v46 = 0uLL;
  i2s(&v43);
  v14 = std::string::insert(&v43, 0, "RNN Forward W_i[");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v44, "] W:");
  v17 = (void *)v16->__r_.__value_.__r.__words[0];
  v47[0] = v16->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  __p = v17;
  *(_QWORD *)&v46 = v47[0];
  *(_QWORD *)((char *)&v46 + 7) = *(_QWORD *)((char *)v47 + 7);
  HIBYTE(v46) = v18;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v46 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  MMatrix<short>::print(*(__int16 ***)(a1 + 376), p_p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  i2s(&v43);
  v20 = std::string::insert(&v43, 0, "RNN Forward R_i[");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v44, "] R:");
  v23 = (void *)v22->__r_.__value_.__r.__words[0];
  v47[0] = v22->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  __p = v23;
  *(_QWORD *)&v46 = v47[0];
  *(_QWORD *)((char *)&v46 + 7) = *(_QWORD *)((char *)v47 + 7);
  HIBYTE(v46) = v24;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v25 = *(__int16 ***)(a1 + 384);
  if (v25)
  {
    if (v46 >= 0)
      v26 = (char *)&__p;
    else
      v26 = (char *)__p;
    MMatrix<short>::print(v25, v26, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48));
  }
  v27 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFFu) > v13)
  {
    if (*(_BYTE *)(a1 + 232))
      v13 = v27 + ~v13;
    v28 = v13 < v27 - 1;
    if (*(_BYTE *)(a1 + 232))
      v29 = 1;
    else
      v29 = -1;
    if (*(_BYTE *)(a1 + 232))
      v30 = v28;
    else
      v30 = a5 != 0;
    v31 = v13;
    bzero(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v13), 4 * *(int *)(a1 + 52));
    v32 = *(_QWORD *)(a1 + 88);
    v33 = *(_DWORD *)(a1 + 44);
    if (v33 >= 1)
    {
      v34 = *(int **)(*a2 + 8 * v13);
      v35 = *(_DWORD **)(v32 + 8 * v13);
      v36 = *(unsigned int *)(a1 + 44);
      do
      {
        v37 = *v34++;
        *v35++ = v37;
        --v36;
      }
      while (v36);
    }
    v38 = v13 + v29;
    if (v10 && v30)
    {
      v39 = *(unsigned int *)(a1 + 48);
      if ((int)v39 >= 1)
      {
        v40 = *(int **)(*(_QWORD *)(a1 + 112) + 8 * v38);
        v41 = (_DWORD *)(*(_QWORD *)(v32 + 8 * v31) + 4 * v33);
        do
        {
          v42 = *v40++;
          *v41++ = v42;
          --v39;
        }
        while (v39);
      }
    }
    if (*(_BYTE *)(a1 + 40))
      *(_DWORD *)(*(_QWORD *)(v32 + 8 * v31) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 112) + 8 * v38), "RNN output t-1 : ", *(_DWORD *)(a1 + 48));
    VVector<float>::print((float **)(*(_QWORD *)(a1 + 88) + 8 * v31), "RNN input t: ", *(_DWORD *)(a1 + 52));
    MMatrix<short>::print((__int16 **)(a1 + 64), "RNN weights: ", *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
    VVector<float>::internalMul((uint64_t *)(a1 + 216), (float **)(*(_QWORD *)(a1 + 88) + 8 * v31), *(__int16 ***)(a1 + 376), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 0.0);
  }
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
}

void sub_191593EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

char *RecurrentLayer<short>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 368) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 376) = result + 64;
  return result;
}

uint64_t RecurrentLayer<short>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  __int16 *v8;
  float *v9;
  float v10;

  if (*(_DWORD *)(a1 + 368))
    exitFramework(1);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  v7 = *(unsigned int *)(a1 + 56);
  if ((int)v7 >= 1)
  {
    v8 = *(__int16 **)(a1 + 64);
    v9 = (float *)*((_QWORD *)v6 + 10);
    do
    {
      v10 = *v9++;
      *v8 = (int)(float)((float)*v8 + (float)(v10 * (float)(int)a3));
      ++v8;
      --v7;
    }
    while (v7);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
}

uint64_t RecurrentLayer<short>::computeError(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;

  if (a4 >= 1)
  {
    v5 = *a5;
    v6 = *(_QWORD *)(result + 112);
    v7 = *a2;
    v8 = *a3;
    v9 = a4;
    v10 = *(unsigned int *)(result + 48);
    do
    {
      if ((int)v10 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v13 = (v9 - 1);
        v14 = *(float **)(v6 + 8 * v13);
        v15 = 1.1755e-38;
        do
        {
          if (v14[v12] > v15)
          {
            v11 = v12;
            v15 = v14[v12];
          }
          ++v12;
        }
        while (v10 != v12);
        v16 = 0;
        v17 = 0;
        v18 = *(float **)(v7 + 8 * v13);
        v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            v16 = v17;
            v19 = v18[v17];
          }
          ++v17;
        }
        while (v10 != v17);
        if (v11 == v16)
        {
          v10 = v10;
        }
        else
        {
          *a5 = ++v5;
          v10 = *(unsigned int *)(result + 48);
        }
        if ((int)v10 >= 1)
        {
          v20 = *(float **)(v8 + 8 * v13);
          v21 = v10;
          do
          {
            v22 = *v18++;
            v23 = v22;
            v24 = *v14++;
            *v20++ = v23 - v24;
            --v21;
          }
          while (v21);
        }
      }
    }
    while (v9-- > 1);
  }
  return result;
}

float RecurrentLayer<short>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = 0;
  v4 = *(unsigned int *)(a1 + 48);
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 112);
  v7 = a3;
  v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v12 = 1.1755e-38;
      do
      {
        v11 = *(_QWORD *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          v9 = v10;
          v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    v13 = *(float *)(*(_QWORD *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10)
      v14 = 99.0;
    else
      v14 = -log2f(v13);
    v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

void RecurrentLayer<short>::~RecurrentLayer(uint64_t a1)
{
  RecurrentLayer<short>::~RecurrentLayer(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t RecurrentLayer<short>::outputDeltas(uint64_t a1)
{
  return a1 + 160;
}

float RecurrentLayer<short>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void RecurrentLayer<short>::init(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  _BOOL4 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  void *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  std::string v148;
  void *__p[2];
  int64_t v150;

  v6 = *(_QWORD *)(a1 + 240);
  if (v6)
    v7 = !*(_BYTE *)(v6 + 20) && *(_DWORD *)(v6 + 40) == 1 && *(_DWORD *)(v6 + 44) == 1;
  else
    v7 = 1;
  if (*(_BYTE *)(a1 + 42))
  {
    v8 = 2;
    v9 = 2;
  }
  else
  {
    v8 = 2 * (*(_BYTE *)(a1 + 232) != 0);
    v9 = 2 * *(unsigned __int8 *)(a1 + 232);
  }
  v10 = *(unsigned int *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v11;
  if (v7)
  {
    v11 += v10;
    *(_DWORD *)(a1 + 52) = v11;
  }
  *(_DWORD *)(a1 + 56) = v10 * v11;
  v12 = (void *)operator new[]();
  v13 = v12;
  if ((int)v10 >= 1)
    bzero(v12, 4 * v10);
  *(_QWORD *)(a1 + 216) = v13;
  v15 = *(_QWORD **)(a1 + 256);
  v14 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(_QWORD *)(a1 + 248);
    v18 = ((uint64_t)v15 - v17) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      goto LABEL_181;
    v19 = v14 - v17;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v21);
    else
      v22 = 0;
    v23 = (_QWORD *)(v21 + 8 * v18);
    v24 = v21 + 8 * v22;
    *v23 = v13;
    v16 = v23 + 1;
    v26 = *(char **)(a1 + 248);
    v25 = *(char **)(a1 + 256);
    if (v25 != v26)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = *(char **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 248) = v23;
    *(_QWORD *)(a1 + 256) = v16;
    *(_QWORD *)(a1 + 264) = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = v13;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 256) = v16;
  if (!*(_DWORD *)(a1 + 368))
  {
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    v33 = *(_QWORD *)(a1 + 240);
    if (v33 && (v34 = *(_DWORD *)(v33 + 40), v34 >= 1))
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v33 + 8 * v8 + 112);
      *(_QWORD *)(a1 + 376) = a1 + 64;
      if (v34 == 2)
      {
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(v33 + 8 * (v8 | 1) + 112);
        *(_QWORD *)(a1 + 384) = a1 + 72;
      }
      if (*(_BYTE *)(v33 + 244))
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(v33 + 8 * v9 + 248);
        *(_QWORD *)(a1 + 392) = a1 + 224;
      }
    }
    else if (*(_BYTE *)(a1 + 61))
    {
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
    else
    {
      MMatrix<short>::MMatrix(__p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), a3);
      v41 = __p[0];
      *(void **)(a1 + 64) = __p[0];
      v43 = *(_QWORD **)(a1 + 280);
      v42 = *(_QWORD *)(a1 + 288);
      if ((unint64_t)v43 >= v42)
      {
        v137 = *(_QWORD *)(a1 + 272);
        v138 = ((uint64_t)v43 - v137) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v139 = v42 - v137;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v141);
        else
          v142 = 0;
        v143 = (_QWORD *)(v141 + 8 * v138);
        v144 = v141 + 8 * v142;
        *v143 = v41;
        v44 = v143 + 1;
        v146 = *(char **)(a1 + 272);
        v145 = *(char **)(a1 + 280);
        if (v145 != v146)
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v143 = v147;
          }
          while (v145 != v146);
          v145 = *(char **)(a1 + 272);
        }
        *(_QWORD *)(a1 + 272) = v143;
        *(_QWORD *)(a1 + 280) = v44;
        *(_QWORD *)(a1 + 288) = v144;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v43 = v41;
        v44 = v43 + 1;
      }
      *(_QWORD *)(a1 + 280) = v44;
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
  }
  if (!*(_BYTE *)(a1 + 60))
  {
    v28 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48);
    v29 = (void *)operator new[]();
    bzero(v29, 4 * v28);
    *(_QWORD *)(a1 + 80) = v29;
    v31 = *(_QWORD **)(a1 + 256);
    v30 = *(_QWORD *)(a1 + 264);
    if ((unint64_t)v31 < v30)
    {
      *v31 = v29;
      v32 = v31 + 1;
LABEL_58:
      *(_QWORD *)(a1 + 256) = v32;
      goto LABEL_59;
    }
    v35 = *(_QWORD *)(a1 + 248);
    v36 = ((uint64_t)v31 - v35) >> 3;
    if (!((unint64_t)(v36 + 1) >> 61))
    {
      v37 = v30 - v35;
      v38 = v37 >> 2;
      if (v37 >> 2 <= (unint64_t)(v36 + 1))
        v38 = v36 + 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
        v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v39);
      else
        v40 = 0;
      v45 = (_QWORD *)(v39 + 8 * v36);
      v46 = v39 + 8 * v40;
      *v45 = v29;
      v32 = v45 + 1;
      v48 = *(char **)(a1 + 248);
      v47 = *(char **)(a1 + 256);
      if (v47 != v48)
      {
        do
        {
          v49 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *--v45 = v49;
        }
        while (v47 != v48);
        v47 = *(char **)(a1 + 248);
      }
      *(_QWORD *)(a1 + 248) = v45;
      *(_QWORD *)(a1 + 256) = v32;
      *(_QWORD *)(a1 + 264) = v46;
      if (v47)
        operator delete(v47);
      goto LABEL_58;
    }
LABEL_181:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(&v148, " constructt W=");
  v50 = *(char *)(a2 + 23);
  if (v50 >= 0)
    v51 = (const std::string::value_type *)a2;
  else
    v51 = *(const std::string::value_type **)a2;
  if (v50 >= 0)
    v52 = *(unsigned __int8 *)(a2 + 23);
  else
    v52 = *(_QWORD *)(a2 + 8);
  v53 = std::string::insert(&v148, 0, v51, v52);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v150 = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if (v150 >= 0)
    v55 = (char *)__p;
  else
    v55 = (char *)__p[0];
  MMatrix<short>::print((__int16 **)(a1 + 64), v55, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
  if (SHIBYTE(v150) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 136), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 160), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 184), maxFeatureVectors);
  if (maxFeatureVectors >= 1)
  {
    v56 = 0;
    do
    {
      v57 = *(unsigned int *)(a1 + 52);
      v58 = (void *)operator new[]();
      v59 = v58;
      if ((int)v57 >= 1)
        bzero(v58, 4 * v57);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v56) = v59;
      v61 = *(_QWORD **)(a1 + 256);
      v60 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v61 >= v60)
      {
        v63 = *(_QWORD *)(a1 + 248);
        v64 = ((uint64_t)v61 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61)
          goto LABEL_181;
        v65 = v60 - v63;
        v66 = v65 >> 2;
        if (v65 >> 2 <= (unint64_t)(v64 + 1))
          v66 = v64 + 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
        else
          v68 = 0;
        v69 = (_QWORD *)(v67 + 8 * v64);
        *v69 = v59;
        v62 = v69 + 1;
        v71 = *(char **)(a1 + 248);
        v70 = *(char **)(a1 + 256);
        if (v70 != v71)
        {
          do
          {
            v72 = *((_QWORD *)v70 - 1);
            v70 -= 8;
            *--v69 = v72;
          }
          while (v70 != v71);
          v70 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v69;
        *(_QWORD *)(a1 + 256) = v62;
        *(_QWORD *)(a1 + 264) = v67 + 8 * v68;
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v61 = v59;
        v62 = v61 + 1;
      }
      *(_QWORD *)(a1 + 256) = v62;
      v73 = *(unsigned int *)(a1 + 52);
      v74 = (void *)operator new[]();
      v75 = v74;
      if ((int)v73 >= 1)
        bzero(v74, 4 * v73);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v56) = v75;
      v77 = *(_QWORD **)(a1 + 256);
      v76 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v77 >= v76)
      {
        v79 = *(_QWORD *)(a1 + 248);
        v80 = ((uint64_t)v77 - v79) >> 3;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_181;
        v81 = v76 - v79;
        v82 = v81 >> 2;
        if (v81 >> 2 <= (unint64_t)(v80 + 1))
          v82 = v80 + 1;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
          v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v83);
        else
          v84 = 0;
        v85 = (_QWORD *)(v83 + 8 * v80);
        *v85 = v75;
        v78 = v85 + 1;
        v87 = *(char **)(a1 + 248);
        v86 = *(char **)(a1 + 256);
        if (v86 != v87)
        {
          do
          {
            v88 = *((_QWORD *)v86 - 1);
            v86 -= 8;
            *--v85 = v88;
          }
          while (v86 != v87);
          v86 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v85;
        *(_QWORD *)(a1 + 256) = v78;
        *(_QWORD *)(a1 + 264) = v83 + 8 * v84;
        if (v86)
          operator delete(v86);
      }
      else
      {
        *v77 = v75;
        v78 = v77 + 1;
      }
      *(_QWORD *)(a1 + 256) = v78;
      v89 = *(unsigned int *)(a1 + 48);
      v90 = (void *)operator new[]();
      v91 = v90;
      if ((int)v89 >= 1)
        bzero(v90, 4 * v89);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v56) = v91;
      v93 = *(_QWORD **)(a1 + 256);
      v92 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v93 >= v92)
      {
        v95 = *(_QWORD *)(a1 + 248);
        v96 = ((uint64_t)v93 - v95) >> 3;
        if ((unint64_t)(v96 + 1) >> 61)
          goto LABEL_181;
        v97 = v92 - v95;
        v98 = v97 >> 2;
        if (v97 >> 2 <= (unint64_t)(v96 + 1))
          v98 = v96 + 1;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
          v99 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v99 = v98;
        if (v99)
          v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v99);
        else
          v100 = 0;
        v101 = (_QWORD *)(v99 + 8 * v96);
        *v101 = v91;
        v94 = v101 + 1;
        v103 = *(char **)(a1 + 248);
        v102 = *(char **)(a1 + 256);
        if (v102 != v103)
        {
          do
          {
            v104 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *--v101 = v104;
          }
          while (v102 != v103);
          v102 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v101;
        *(_QWORD *)(a1 + 256) = v94;
        *(_QWORD *)(a1 + 264) = v99 + 8 * v100;
        if (v102)
          operator delete(v102);
      }
      else
      {
        *v93 = v91;
        v94 = v93 + 1;
      }
      *(_QWORD *)(a1 + 256) = v94;
      v105 = *(unsigned int *)(a1 + 48);
      v106 = (void *)operator new[]();
      v107 = v106;
      if ((int)v105 >= 1)
        bzero(v106, 4 * v105);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v56) = v107;
      v109 = *(_QWORD **)(a1 + 256);
      v108 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v109 >= v108)
      {
        v111 = *(_QWORD *)(a1 + 248);
        v112 = ((uint64_t)v109 - v111) >> 3;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_181;
        v113 = v108 - v111;
        v114 = v113 >> 2;
        if (v113 >> 2 <= (unint64_t)(v112 + 1))
          v114 = v112 + 1;
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
          v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v115);
        else
          v116 = 0;
        v117 = (_QWORD *)(v115 + 8 * v112);
        *v117 = v107;
        v110 = v117 + 1;
        v119 = *(char **)(a1 + 248);
        v118 = *(char **)(a1 + 256);
        if (v118 != v119)
        {
          do
          {
            v120 = *((_QWORD *)v118 - 1);
            v118 -= 8;
            *--v117 = v120;
          }
          while (v118 != v119);
          v118 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v117;
        *(_QWORD *)(a1 + 256) = v110;
        *(_QWORD *)(a1 + 264) = v115 + 8 * v116;
        if (v118)
          operator delete(v118);
      }
      else
      {
        *v109 = v107;
        v110 = v109 + 1;
      }
      *(_QWORD *)(a1 + 256) = v110;
      v121 = *(unsigned int *)(a1 + 48);
      v122 = (void *)operator new[]();
      v123 = v122;
      if ((int)v121 >= 1)
        bzero(v122, 4 * v121);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v56) = v123;
      v125 = *(_QWORD **)(a1 + 256);
      v124 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v125 >= v124)
      {
        v127 = *(_QWORD *)(a1 + 248);
        v128 = ((uint64_t)v125 - v127) >> 3;
        if ((unint64_t)(v128 + 1) >> 61)
          goto LABEL_181;
        v129 = v124 - v127;
        v130 = v129 >> 2;
        if (v129 >> 2 <= (unint64_t)(v128 + 1))
          v130 = v128 + 1;
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
          v131 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v131 = v130;
        if (v131)
          v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v131);
        else
          v132 = 0;
        v133 = (_QWORD *)(v131 + 8 * v128);
        *v133 = v123;
        v126 = v133 + 1;
        v135 = *(char **)(a1 + 248);
        v134 = *(char **)(a1 + 256);
        if (v134 != v135)
        {
          do
          {
            v136 = *((_QWORD *)v134 - 1);
            v134 -= 8;
            *--v133 = v136;
          }
          while (v134 != v135);
          v134 = *(char **)(a1 + 248);
        }
        *(_QWORD *)(a1 + 248) = v133;
        *(_QWORD *)(a1 + 256) = v126;
        *(_QWORD *)(a1 + 264) = v131 + 8 * v132;
        if (v134)
          operator delete(v134);
      }
      else
      {
        *v125 = v123;
        v126 = v125 + 1;
      }
      *(_QWORD *)(a1 + 256) = v126;
      ++v56;
    }
    while (v56 < maxFeatureVectors);
  }
}

void sub_191594C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<short>::~RecurrentLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = off_1E2D4DC20;
  RecurrentLayer<short>::cleanupAllBuffers(a1);
  *(_QWORD *)(a1 + 296) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 304));
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(_QWORD *)(a1 + 256) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 184);
  if (v4)
  {
    *(_QWORD *)(a1 + 192) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 160);
  if (v5)
  {
    *(_QWORD *)(a1 + 168) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 136);
  if (v6)
  {
    *(_QWORD *)(a1 + 144) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 112);
  if (v7)
  {
    *(_QWORD *)(a1 + 120) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 88);
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    operator delete(v8);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

void LSTM<short>::init(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  BOOL v130;
  _BOOL4 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  unint64_t v329;
  char *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  unint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  unint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  unint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  unint64_t v359;
  char *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  void *v365;
  _QWORD *v366;
  unint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  unint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  void *v382;
  _QWORD *v383;
  unint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  unint64_t v393;
  char *v394;
  char *v395;
  uint64_t v396;
  int v397;
  void *v398;
  _QWORD *v399;
  unint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  unint64_t v409;
  char *v410;
  char *v411;
  uint64_t v412;
  unsigned int v413;
  int v414;
  void *v415;
  _QWORD *v416;
  unint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  unint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  int v430;
  void *v431;
  _QWORD *v432;
  unint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  unint64_t v442;
  char *v443;
  char *v444;
  uint64_t v445;
  int v446;
  void *v447;
  _QWORD *v448;
  unint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  unint64_t v458;
  char *v459;
  char *v460;
  uint64_t v461;
  int v462;
  void *v463;
  _QWORD *v464;
  unint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  unint64_t v474;
  char *v475;
  char *v476;
  uint64_t v477;
  unsigned int v478;
  void *v479;
  _QWORD *v480;
  unint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  _QWORD *v489;
  unint64_t v490;
  char *v491;
  char *v492;
  uint64_t v493;
  unsigned int v494;
  void *v495;
  _QWORD *v496;
  unint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  unint64_t v506;
  char *v507;
  char *v508;
  uint64_t v509;
  unsigned int v510;
  void *v511;
  _QWORD *v512;
  unint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  unint64_t v522;
  char *v523;
  char *v524;
  uint64_t v525;
  unsigned int v526;
  void *v527;
  _QWORD *v528;
  unint64_t v529;
  _QWORD *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  unint64_t v538;
  char *v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  void *v543;
  void *v544;
  _QWORD *v545;
  unint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  _QWORD *v554;
  unint64_t v555;
  char *v556;
  char *v557;
  uint64_t v558;
  uint64_t v559;
  void *v560;
  void *v561;
  _QWORD *v562;
  unint64_t v563;
  _QWORD *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  _QWORD *v571;
  unint64_t v572;
  char *v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  void *v577;
  void *v578;
  _QWORD *v579;
  unint64_t v580;
  _QWORD *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  _QWORD *v588;
  unint64_t v589;
  char *v590;
  char *v591;
  uint64_t v592;
  uint64_t i;
  uint64_t v594;
  void *v595;
  void *v596;
  _QWORD *v597;
  unint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  _QWORD *v606;
  char *v607;
  char *v608;
  uint64_t v609;
  int v610;
  void *v611;
  _QWORD *v612;
  unint64_t v613;
  _QWORD *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  _QWORD *v621;
  char *v622;
  char *v623;
  uint64_t v624;
  uint64_t j;
  uint64_t v626;
  void *v627;
  void *v628;
  _QWORD *v629;
  unint64_t v630;
  _QWORD *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  _QWORD *v638;
  char *v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  void *v643;
  void *v644;
  _QWORD *v645;
  unint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  _QWORD *v654;
  char *v655;
  char *v656;
  uint64_t v657;
  uint64_t v658;
  void *v659;
  void *v660;
  _QWORD *v661;
  unint64_t v662;
  _QWORD *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  _QWORD *v670;
  char *v671;
  char *v672;
  uint64_t v673;
  uint64_t v674;
  void *v675;
  void *v676;
  _QWORD *v677;
  unint64_t v678;
  _QWORD *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  _QWORD *v686;
  char *v687;
  char *v688;
  uint64_t v689;
  uint64_t v690;
  void *v691;
  void *v692;
  _QWORD *v693;
  unint64_t v694;
  _QWORD *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  _QWORD *v702;
  char *v703;
  char *v704;
  uint64_t v705;
  uint64_t v706;
  void *v707;
  void *v708;
  _QWORD *v709;
  unint64_t v710;
  _QWORD *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  _QWORD *v718;
  char *v719;
  char *v720;
  uint64_t v721;
  uint64_t v722;
  void *v723;
  void *v724;
  _QWORD *v725;
  unint64_t v726;
  _QWORD *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  _QWORD *v734;
  char *v735;
  char *v736;
  uint64_t v737;
  uint64_t v738;
  void *v739;
  void *v740;
  _QWORD *v741;
  unint64_t v742;
  _QWORD *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  _QWORD *v750;
  char *v751;
  char *v752;
  uint64_t v753;
  int v754;
  void *v755;
  _QWORD *v756;
  unint64_t v757;
  _QWORD *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  _QWORD *v765;
  char *v766;
  char *v767;
  uint64_t v768;
  int v769;
  void *v770;
  _QWORD *v771;
  unint64_t v772;
  _QWORD *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  uint64_t v779;
  _QWORD *v780;
  char *v781;
  char *v782;
  uint64_t v783;
  int v784;
  void *v785;
  _QWORD *v786;
  unint64_t v787;
  _QWORD *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  uint64_t v794;
  _QWORD *v795;
  char *v796;
  char *v797;
  uint64_t v798;
  int v799;
  void *v800;
  _QWORD *v801;
  unint64_t v802;
  _QWORD *v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  uint64_t v809;
  _QWORD *v810;
  char *v811;
  char *v812;
  uint64_t v813;
  int v814;
  void *v815;
  _QWORD *v816;
  unint64_t v817;
  _QWORD *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  unint64_t v823;
  uint64_t v824;
  _QWORD *v825;
  char *v826;
  char *v827;
  uint64_t v828;
  int v829;
  void *v830;
  _QWORD *v831;
  unint64_t v832;
  _QWORD *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  unint64_t v838;
  uint64_t v839;
  _QWORD *v840;
  char *v841;
  char *v842;
  uint64_t v843;
  int v844;
  void *v845;
  _QWORD *v846;
  unint64_t v847;
  _QWORD *v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  unint64_t v853;
  uint64_t v854;
  _QWORD *v855;
  char *v856;
  char *v857;
  uint64_t v858;
  int v859;
  void *v860;
  _QWORD *v861;
  unint64_t v862;
  _QWORD *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  unint64_t v868;
  uint64_t v869;
  _QWORD *v870;
  char *v871;
  char *v872;
  uint64_t v873;
  uint64_t v874;
  std::vector<int>::size_type v875;
  uint64_t v876;
  void *v877;
  void *v878;
  _QWORD *v879;
  unint64_t v880;
  _QWORD *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  uint64_t v887;
  _QWORD *v888;
  char *v889;
  char *v890;
  uint64_t v891;
  uint64_t v892;
  void *v893;
  void *v894;
  _QWORD *v895;
  unint64_t v896;
  _QWORD *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  uint64_t v903;
  _QWORD *v904;
  char *v905;
  char *v906;
  uint64_t v907;
  int v908;
  void *v909;
  _QWORD *v910;
  unint64_t v911;
  _QWORD *v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  unint64_t v917;
  uint64_t v918;
  _QWORD *v919;
  char *v920;
  char *v921;
  uint64_t v922;
  int v923;
  void *v924;
  _QWORD *v925;
  unint64_t v926;
  _QWORD *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  _QWORD *v934;
  char *v935;
  char *v936;
  uint64_t v937;
  uint64_t v938;
  void *v939;
  void *v940;
  _QWORD *v941;
  unint64_t v942;
  _QWORD *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  _QWORD *v950;
  char *v951;
  char *v952;
  uint64_t v953;
  uint64_t v954;
  void *v955;
  void *v956;
  _QWORD *v957;
  unint64_t v958;
  _QWORD *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  unint64_t v964;
  uint64_t v965;
  _QWORD *v966;
  char *v967;
  char *v968;
  uint64_t v969;
  uint64_t v970;
  void *v971;
  void *v972;
  _QWORD *v973;
  unint64_t v974;
  _QWORD *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  _QWORD *v982;
  char *v983;
  char *v984;
  uint64_t v985;
  uint64_t v986;
  void *v987;
  void *v988;
  _QWORD *v989;
  unint64_t v990;
  _QWORD *v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  unint64_t v996;
  uint64_t v997;
  _QWORD *v998;
  char *v999;
  char *v1000;
  uint64_t v1001;
  uint64_t v1002;
  void *v1003;
  void *v1004;
  _QWORD *v1005;
  unint64_t v1006;
  _QWORD *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  _QWORD *v1014;
  char *v1015;
  char *v1016;
  uint64_t v1017;
  uint64_t v1018;
  void *v1019;
  void *v1020;
  _QWORD *v1021;
  unint64_t v1022;
  _QWORD *v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  uint64_t v1029;
  _QWORD *v1030;
  char *v1031;
  char *v1032;
  uint64_t v1033;
  uint64_t v1034;
  void *v1035;
  void *v1036;
  _QWORD *v1037;
  unint64_t v1038;
  _QWORD *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  _QWORD *v1046;
  char *v1047;
  char *v1048;
  uint64_t v1049;
  __int128 v1050[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1640) = v4;
  v5 = *(_QWORD **)(a1 + 2632);
  v6 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(a1 + 2624);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_1172;
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = v4;
    v7 = v14 + 1;
    v16 = *(char **)(a1 + 2632);
    v17 = *(char **)(a1 + 2624);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v14;
    *(_QWORD *)(a1 + 2632) = v7;
    *(_QWORD *)(a1 + 2640) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = v4;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v7;
  v19 = *(unsigned int *)(a1 + 52);
  v20 = (void *)operator new[]();
  v21 = v20;
  if ((int)v19 >= 1)
    bzero(v20, 4 * v19);
  *(_QWORD *)(a1 + 1648) = v21;
  v22 = *(_QWORD **)(a1 + 2632);
  v23 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v22 >= v23)
  {
    v25 = *(_QWORD *)(a1 + 2624);
    v26 = ((uint64_t)v22 - v25) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      goto LABEL_1172;
    v27 = v23 - v25;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    else
      v30 = 0;
    v31 = (_QWORD *)(v29 + 8 * v26);
    v32 = v29 + 8 * v30;
    *v31 = v21;
    v24 = v31 + 1;
    v33 = *(char **)(a1 + 2632);
    v34 = *(char **)(a1 + 2624);
    if (v33 != v34)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
      v33 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v31;
    *(_QWORD *)(a1 + 2632) = v24;
    *(_QWORD *)(a1 + 2640) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v22 = v21;
    v24 = v22 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v24;
  v36 = *(unsigned int *)(a1 + 52);
  v37 = (void *)operator new[]();
  v38 = v37;
  if ((int)v36 >= 1)
    bzero(v37, 4 * v36);
  *(_QWORD *)(a1 + 1656) = v38;
  v39 = *(_QWORD **)(a1 + 2632);
  v40 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v39 >= v40)
  {
    v42 = *(_QWORD *)(a1 + 2624);
    v43 = ((uint64_t)v39 - v42) >> 3;
    if ((unint64_t)(v43 + 1) >> 61)
      goto LABEL_1172;
    v44 = v40 - v42;
    v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1))
      v45 = v43 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v46);
    else
      v47 = 0;
    v48 = (_QWORD *)(v46 + 8 * v43);
    v49 = v46 + 8 * v47;
    *v48 = v38;
    v41 = v48 + 1;
    v50 = *(char **)(a1 + 2632);
    v51 = *(char **)(a1 + 2624);
    if (v50 != v51)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v52;
      }
      while (v50 != v51);
      v50 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v48;
    *(_QWORD *)(a1 + 2632) = v41;
    *(_QWORD *)(a1 + 2640) = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v39 = v38;
    v41 = v39 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v41;
  v53 = *(unsigned int *)(a1 + 52);
  v54 = (void *)operator new[]();
  v55 = v54;
  if ((int)v53 >= 1)
    bzero(v54, 4 * v53);
  *(_QWORD *)(a1 + 1664) = v55;
  v56 = *(_QWORD **)(a1 + 2632);
  v57 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v56 >= v57)
  {
    v59 = *(_QWORD *)(a1 + 2624);
    v60 = ((uint64_t)v56 - v59) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_1172;
    v61 = v57 - v59;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
      v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
    else
      v64 = 0;
    v65 = (_QWORD *)(v63 + 8 * v60);
    v66 = v63 + 8 * v64;
    *v65 = v55;
    v58 = v65 + 1;
    v67 = *(char **)(a1 + 2632);
    v68 = *(char **)(a1 + 2624);
    if (v67 != v68)
    {
      do
      {
        v69 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *--v65 = v69;
      }
      while (v67 != v68);
      v67 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v65;
    *(_QWORD *)(a1 + 2632) = v58;
    *(_QWORD *)(a1 + 2640) = v66;
    if (v67)
      operator delete(v67);
  }
  else
  {
    *v56 = v55;
    v58 = v56 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v58;
  v70 = *(unsigned int *)(a1 + 52);
  v71 = (void *)operator new[]();
  v72 = v71;
  if ((int)v70 >= 1)
    bzero(v71, 4 * v70);
  *(_QWORD *)(a1 + 1672) = v72;
  v73 = *(_QWORD **)(a1 + 2632);
  v74 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v73 >= v74)
  {
    v76 = *(_QWORD *)(a1 + 2624);
    v77 = ((uint64_t)v73 - v76) >> 3;
    if ((unint64_t)(v77 + 1) >> 61)
      goto LABEL_1172;
    v78 = v74 - v76;
    v79 = v78 >> 2;
    if (v78 >> 2 <= (unint64_t)(v77 + 1))
      v79 = v77 + 1;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v80 = v79;
    if (v80)
      v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v80);
    else
      v81 = 0;
    v82 = (_QWORD *)(v80 + 8 * v77);
    v83 = v80 + 8 * v81;
    *v82 = v72;
    v75 = v82 + 1;
    v84 = *(char **)(a1 + 2632);
    v85 = *(char **)(a1 + 2624);
    if (v84 != v85)
    {
      do
      {
        v86 = *((_QWORD *)v84 - 1);
        v84 -= 8;
        *--v82 = v86;
      }
      while (v84 != v85);
      v84 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v82;
    *(_QWORD *)(a1 + 2632) = v75;
    *(_QWORD *)(a1 + 2640) = v83;
    if (v84)
      operator delete(v84);
  }
  else
  {
    *v73 = v72;
    v75 = v73 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v75;
  v87 = *(unsigned int *)(a1 + 52);
  v88 = (void *)operator new[]();
  v89 = v88;
  if ((int)v87 >= 1)
    bzero(v88, 4 * v87);
  *(_QWORD *)(a1 + 1680) = v89;
  v90 = *(_QWORD **)(a1 + 2632);
  v91 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v90 >= v91)
  {
    v93 = *(_QWORD *)(a1 + 2624);
    v94 = ((uint64_t)v90 - v93) >> 3;
    if ((unint64_t)(v94 + 1) >> 61)
      goto LABEL_1172;
    v95 = v91 - v93;
    v96 = v95 >> 2;
    if (v95 >> 2 <= (unint64_t)(v94 + 1))
      v96 = v94 + 1;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
      v97 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v97 = v96;
    if (v97)
      v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v97);
    else
      v98 = 0;
    v99 = (_QWORD *)(v97 + 8 * v94);
    v100 = v97 + 8 * v98;
    *v99 = v89;
    v92 = v99 + 1;
    v101 = *(char **)(a1 + 2632);
    v102 = *(char **)(a1 + 2624);
    if (v101 != v102)
    {
      do
      {
        v103 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *--v99 = v103;
      }
      while (v101 != v102);
      v101 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v99;
    *(_QWORD *)(a1 + 2632) = v92;
    *(_QWORD *)(a1 + 2640) = v100;
    if (v101)
      operator delete(v101);
  }
  else
  {
    *v90 = v89;
    v92 = v90 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v92;
  v104 = *(unsigned int *)(a1 + 52);
  v105 = (void *)operator new[]();
  v106 = v105;
  if ((int)v104 >= 1)
    bzero(v105, 4 * v104);
  *(_QWORD *)(a1 + 1688) = v106;
  v107 = *(_QWORD **)(a1 + 2632);
  v108 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v107 >= v108)
  {
    v110 = *(_QWORD *)(a1 + 2624);
    v111 = ((uint64_t)v107 - v110) >> 3;
    if ((unint64_t)(v111 + 1) >> 61)
      goto LABEL_1172;
    v112 = v108 - v110;
    v113 = v112 >> 2;
    if (v112 >> 2 <= (unint64_t)(v111 + 1))
      v113 = v111 + 1;
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
      v114 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v114 = v113;
    if (v114)
      v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114);
    else
      v115 = 0;
    v116 = (_QWORD *)(v114 + 8 * v111);
    v117 = v114 + 8 * v115;
    *v116 = v106;
    v109 = v116 + 1;
    v118 = *(char **)(a1 + 2632);
    v119 = *(char **)(a1 + 2624);
    if (v118 != v119)
    {
      do
      {
        v120 = *((_QWORD *)v118 - 1);
        v118 -= 8;
        *--v116 = v120;
      }
      while (v118 != v119);
      v118 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v116;
    *(_QWORD *)(a1 + 2632) = v109;
    *(_QWORD *)(a1 + 2640) = v117;
    if (v118)
      operator delete(v118);
  }
  else
  {
    *v107 = v106;
    v109 = v107 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v109;
  v121 = *(_QWORD *)(a1 + 2680);
  if (v121)
  {
    v122 = *(_DWORD *)(v121 + 40) / 2;
    v123 = 4 * *(unsigned __int8 *)(v121 + 244);
    if (*(_BYTE *)(v121 + 520))
      v124 = 3;
    else
      v124 = 0;
  }
  else
  {
    v123 = 0;
    v124 = 0;
    v122 = 8;
  }
  v125 = *(unsigned __int8 *)(a1 + 42);
  if (*(_BYTE *)(a1 + 42))
  {
    if (*(_BYTE *)(a1 + 2672))
      v126 = v122;
    else
      v126 = 0;
    if (*(_BYTE *)(a1 + 2672))
      v127 = v123;
    else
      v127 = 0;
    if (*(_BYTE *)(a1 + 2672))
      v128 = v124;
    else
      v128 = 0;
  }
  else
  {
    v127 = 0;
    v126 = 0;
    v128 = 0;
  }
  if (*(int *)(a1 + 56) < 1)
  {
    v129 = 0;
  }
  else
  {
    v129 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v125 = *(unsigned __int8 *)(a1 + 42);
  }
  v130 = v125 == 0;
  v131 = v125 != 0;
  if (v130)
    v132 = maxFeatureVectors;
  else
    v132 = 2;
  if ((v131 & v129) != 0)
    v133 = 2;
  else
    v133 = maxFeatureVectors;
  if (!*(_DWORD *)(a1 + 2496))
  {
    v134 = *(_QWORD *)(a1 + 2680);
    if (v134 && *(int *)(v134 + 40) >= 1)
    {
      v135 = (_QWORD *)(v134 + 8 * v126);
      *(_QWORD *)(a1 + 232) = v135[14];
      *(_QWORD *)(a1 + 240) = v135[15];
      *(_QWORD *)(a1 + 256) = v135[16];
      *(_QWORD *)(a1 + 248) = v135[17];
      *(_QWORD *)(a1 + 264) = v135[18];
      *(_QWORD *)(a1 + 272) = v135[19];
      *(_QWORD *)(a1 + 288) = v135[20];
      *(_QWORD *)(a1 + 280) = v135[21];
    }
    else if (!*(_BYTE *)(a1 + 1697))
    {
      MMatrix<short>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v136 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 232) = *(_QWORD *)&v1050[0];
      v137 = *(_QWORD **)(a1 + 2656);
      v138 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v137 >= v138)
      {
        v140 = *(_QWORD *)(a1 + 2648);
        v141 = ((uint64_t)v137 - v140) >> 3;
        if ((unint64_t)(v141 + 1) >> 61)
          goto LABEL_1173;
        v142 = v138 - v140;
        v143 = v142 >> 2;
        if (v142 >> 2 <= (unint64_t)(v141 + 1))
          v143 = v141 + 1;
        if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
          v144 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v144 = v143;
        if (v144)
          v144 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v144);
        else
          v145 = 0;
        v146 = (_QWORD *)(v144 + 8 * v141);
        v147 = v144 + 8 * v145;
        *v146 = v136;
        v139 = v146 + 1;
        v148 = *(char **)(a1 + 2656);
        v149 = *(char **)(a1 + 2648);
        if (v148 != v149)
        {
          do
          {
            v150 = *((_QWORD *)v148 - 1);
            v148 -= 8;
            *--v146 = v150;
          }
          while (v148 != v149);
          v148 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v146;
        *(_QWORD *)(a1 + 2656) = v139;
        *(_QWORD *)(a1 + 2664) = v147;
        if (v148)
          operator delete(v148);
      }
      else
      {
        *v137 = v136;
        v139 = v137 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v139;
      MMatrix<short>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v151 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 240) = *(_QWORD *)&v1050[0];
      v152 = *(_QWORD **)(a1 + 2656);
      v153 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v152 >= v153)
      {
        v155 = *(_QWORD *)(a1 + 2648);
        v156 = ((uint64_t)v152 - v155) >> 3;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_1173;
        v157 = v153 - v155;
        v158 = v157 >> 2;
        if (v157 >> 2 <= (unint64_t)(v156 + 1))
          v158 = v156 + 1;
        if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
          v159 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v159);
        else
          v160 = 0;
        v161 = (_QWORD *)(v159 + 8 * v156);
        v162 = v159 + 8 * v160;
        *v161 = v151;
        v154 = v161 + 1;
        v163 = *(char **)(a1 + 2656);
        v164 = *(char **)(a1 + 2648);
        if (v163 != v164)
        {
          do
          {
            v165 = *((_QWORD *)v163 - 1);
            v163 -= 8;
            *--v161 = v165;
          }
          while (v163 != v164);
          v163 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v161;
        *(_QWORD *)(a1 + 2656) = v154;
        *(_QWORD *)(a1 + 2664) = v162;
        if (v163)
          operator delete(v163);
      }
      else
      {
        *v152 = v151;
        v154 = v152 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v154;
      MMatrix<short>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v166 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 248) = *(_QWORD *)&v1050[0];
      v167 = *(_QWORD **)(a1 + 2656);
      v168 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v167 >= v168)
      {
        v170 = *(_QWORD *)(a1 + 2648);
        v171 = ((uint64_t)v167 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_1173;
        v172 = v168 - v170;
        v173 = v172 >> 2;
        if (v172 >> 2 <= (unint64_t)(v171 + 1))
          v173 = v171 + 1;
        if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
          v174 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v174);
        else
          v175 = 0;
        v176 = (_QWORD *)(v174 + 8 * v171);
        v177 = v174 + 8 * v175;
        *v176 = v166;
        v169 = v176 + 1;
        v178 = *(char **)(a1 + 2656);
        v179 = *(char **)(a1 + 2648);
        if (v178 != v179)
        {
          do
          {
            v180 = *((_QWORD *)v178 - 1);
            v178 -= 8;
            *--v176 = v180;
          }
          while (v178 != v179);
          v178 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v176;
        *(_QWORD *)(a1 + 2656) = v169;
        *(_QWORD *)(a1 + 2664) = v177;
        if (v178)
          operator delete(v178);
      }
      else
      {
        *v167 = v166;
        v169 = v167 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v169;
      MMatrix<short>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.1);
      v181 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 256) = *(_QWORD *)&v1050[0];
      v182 = *(_QWORD **)(a1 + 2656);
      v183 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v182 >= v183)
      {
        v185 = *(_QWORD *)(a1 + 2648);
        v186 = ((uint64_t)v182 - v185) >> 3;
        if ((unint64_t)(v186 + 1) >> 61)
          goto LABEL_1173;
        v187 = v183 - v185;
        v188 = v187 >> 2;
        if (v187 >> 2 <= (unint64_t)(v186 + 1))
          v188 = v186 + 1;
        if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8)
          v189 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v189 = v188;
        if (v189)
          v189 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v189);
        else
          v190 = 0;
        v191 = (_QWORD *)(v189 + 8 * v186);
        v192 = v189 + 8 * v190;
        *v191 = v181;
        v184 = v191 + 1;
        v193 = *(char **)(a1 + 2656);
        v194 = *(char **)(a1 + 2648);
        if (v193 != v194)
        {
          do
          {
            v195 = *((_QWORD *)v193 - 1);
            v193 -= 8;
            *--v191 = v195;
          }
          while (v193 != v194);
          v193 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v191;
        *(_QWORD *)(a1 + 2656) = v184;
        *(_QWORD *)(a1 + 2664) = v192;
        if (v193)
          operator delete(v193);
      }
      else
      {
        *v182 = v181;
        v184 = v182 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v184;
      MMatrix<short>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v196 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 264) = *(_QWORD *)&v1050[0];
      v197 = *(_QWORD **)(a1 + 2656);
      v198 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v197 >= v198)
      {
        v200 = *(_QWORD *)(a1 + 2648);
        v201 = ((uint64_t)v197 - v200) >> 3;
        if ((unint64_t)(v201 + 1) >> 61)
          goto LABEL_1173;
        v202 = v198 - v200;
        v203 = v202 >> 2;
        if (v202 >> 2 <= (unint64_t)(v201 + 1))
          v203 = v201 + 1;
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
          v204 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v204 = v203;
        if (v204)
          v204 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v204);
        else
          v205 = 0;
        v206 = (_QWORD *)(v204 + 8 * v201);
        v207 = v204 + 8 * v205;
        *v206 = v196;
        v199 = v206 + 1;
        v208 = *(char **)(a1 + 2656);
        v209 = *(char **)(a1 + 2648);
        if (v208 != v209)
        {
          do
          {
            v210 = *((_QWORD *)v208 - 1);
            v208 -= 8;
            *--v206 = v210;
          }
          while (v208 != v209);
          v208 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v206;
        *(_QWORD *)(a1 + 2656) = v199;
        *(_QWORD *)(a1 + 2664) = v207;
        if (v208)
          operator delete(v208);
      }
      else
      {
        *v197 = v196;
        v199 = v197 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v199;
      MMatrix<short>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v211 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 272) = *(_QWORD *)&v1050[0];
      v212 = *(_QWORD **)(a1 + 2656);
      v213 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v212 >= v213)
      {
        v215 = *(_QWORD *)(a1 + 2648);
        v216 = ((uint64_t)v212 - v215) >> 3;
        if ((unint64_t)(v216 + 1) >> 61)
          goto LABEL_1173;
        v217 = v213 - v215;
        v218 = v217 >> 2;
        if (v217 >> 2 <= (unint64_t)(v216 + 1))
          v218 = v216 + 1;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          v219 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v219 = v218;
        if (v219)
          v219 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v219);
        else
          v220 = 0;
        v221 = (_QWORD *)(v219 + 8 * v216);
        v222 = v219 + 8 * v220;
        *v221 = v211;
        v214 = v221 + 1;
        v223 = *(char **)(a1 + 2656);
        v224 = *(char **)(a1 + 2648);
        if (v223 != v224)
        {
          do
          {
            v225 = *((_QWORD *)v223 - 1);
            v223 -= 8;
            *--v221 = v225;
          }
          while (v223 != v224);
          v223 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v221;
        *(_QWORD *)(a1 + 2656) = v214;
        *(_QWORD *)(a1 + 2664) = v222;
        if (v223)
          operator delete(v223);
      }
      else
      {
        *v212 = v211;
        v214 = v212 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v214;
      MMatrix<short>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v226 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 280) = *(_QWORD *)&v1050[0];
      v227 = *(_QWORD **)(a1 + 2656);
      v228 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v227 >= v228)
      {
        v230 = *(_QWORD *)(a1 + 2648);
        v231 = ((uint64_t)v227 - v230) >> 3;
        if ((unint64_t)(v231 + 1) >> 61)
          goto LABEL_1173;
        v232 = v228 - v230;
        v233 = v232 >> 2;
        if (v232 >> 2 <= (unint64_t)(v231 + 1))
          v233 = v231 + 1;
        if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
          v234 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v234 = v233;
        if (v234)
          v234 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v234);
        else
          v235 = 0;
        v236 = (_QWORD *)(v234 + 8 * v231);
        v237 = v234 + 8 * v235;
        *v236 = v226;
        v229 = v236 + 1;
        v238 = *(char **)(a1 + 2656);
        v239 = *(char **)(a1 + 2648);
        if (v238 != v239)
        {
          do
          {
            v240 = *((_QWORD *)v238 - 1);
            v238 -= 8;
            *--v236 = v240;
          }
          while (v238 != v239);
          v238 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v236;
        *(_QWORD *)(a1 + 2656) = v229;
        *(_QWORD *)(a1 + 2664) = v237;
        if (v238)
          operator delete(v238);
      }
      else
      {
        *v227 = v226;
        v229 = v227 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v229;
      MMatrix<short>::MMatrix(v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.1);
      v241 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 288) = *(_QWORD *)&v1050[0];
      v242 = *(_QWORD **)(a1 + 2656);
      v243 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v242 >= v243)
      {
        v245 = *(_QWORD *)(a1 + 2648);
        v246 = ((uint64_t)v242 - v245) >> 3;
        if ((unint64_t)(v246 + 1) >> 61)
          goto LABEL_1173;
        v247 = v243 - v245;
        v248 = v247 >> 2;
        if (v247 >> 2 <= (unint64_t)(v246 + 1))
          v248 = v246 + 1;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
          v249 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v249 = v248;
        if (v249)
          v249 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v249);
        else
          v250 = 0;
        v251 = (_QWORD *)(v249 + 8 * v246);
        v252 = v249 + 8 * v250;
        *v251 = v241;
        v244 = v251 + 1;
        v253 = *(char **)(a1 + 2656);
        v254 = *(char **)(a1 + 2648);
        if (v253 != v254)
        {
          do
          {
            v255 = *((_QWORD *)v253 - 1);
            v253 -= 8;
            *--v251 = v255;
          }
          while (v253 != v254);
          v253 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v251;
        *(_QWORD *)(a1 + 2656) = v244;
        *(_QWORD *)(a1 + 2664) = v252;
        if (v253)
          operator delete(v253);
      }
      else
      {
        *v242 = v241;
        v244 = v242 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v244;
    }
    if (!*(_BYTE *)(a1 + 1697))
    {
      v256 = *(_QWORD *)(a1 + 2680);
      if (v256 && *(_BYTE *)(v256 + 520))
      {
        *(_QWORD *)(a1 + 296) = *(_QWORD *)(v256 + 528 + 8 * v128);
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(v256 + 528 + 8 * (v128 + 1));
        *(_QWORD *)(a1 + 312) = *(_QWORD *)(v256 + 528 + 8 * (v128 + 2));
        goto LABEL_339;
      }
      VVector<short>::VVector((uint64_t *)v1050, *(_DWORD *)(a1 + 52));
      v257 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 296) = *(_QWORD *)&v1050[0];
      v258 = *(_QWORD **)(a1 + 2656);
      v259 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v258 >= v259)
      {
        v261 = *(_QWORD *)(a1 + 2648);
        v262 = ((uint64_t)v258 - v261) >> 3;
        if ((unint64_t)(v262 + 1) >> 61)
          goto LABEL_1173;
        v263 = v259 - v261;
        v264 = v263 >> 2;
        if (v263 >> 2 <= (unint64_t)(v262 + 1))
          v264 = v262 + 1;
        if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF8)
          v265 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v265 = v264;
        if (v265)
          v265 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v265);
        else
          v266 = 0;
        v267 = (_QWORD *)(v265 + 8 * v262);
        v268 = v265 + 8 * v266;
        *v267 = v257;
        v260 = v267 + 1;
        v269 = *(char **)(a1 + 2656);
        v270 = *(char **)(a1 + 2648);
        if (v269 != v270)
        {
          do
          {
            v271 = *((_QWORD *)v269 - 1);
            v269 -= 8;
            *--v267 = v271;
          }
          while (v269 != v270);
          v269 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v267;
        *(_QWORD *)(a1 + 2656) = v260;
        *(_QWORD *)(a1 + 2664) = v268;
        if (v269)
          operator delete(v269);
      }
      else
      {
        *v258 = v257;
        v260 = v258 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v260;
      VVector<short>::VVector((uint64_t *)v1050, *(_DWORD *)(a1 + 52));
      v272 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 304) = *(_QWORD *)&v1050[0];
      v273 = *(_QWORD **)(a1 + 2656);
      v274 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v273 >= v274)
      {
        v276 = *(_QWORD *)(a1 + 2648);
        v277 = ((uint64_t)v273 - v276) >> 3;
        if ((unint64_t)(v277 + 1) >> 61)
          goto LABEL_1173;
        v278 = v274 - v276;
        v279 = v278 >> 2;
        if (v278 >> 2 <= (unint64_t)(v277 + 1))
          v279 = v277 + 1;
        if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8)
          v280 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v280 = v279;
        if (v280)
          v280 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v280);
        else
          v281 = 0;
        v282 = (_QWORD *)(v280 + 8 * v277);
        v283 = v280 + 8 * v281;
        *v282 = v272;
        v275 = v282 + 1;
        v284 = *(char **)(a1 + 2656);
        v285 = *(char **)(a1 + 2648);
        if (v284 != v285)
        {
          do
          {
            v286 = *((_QWORD *)v284 - 1);
            v284 -= 8;
            *--v282 = v286;
          }
          while (v284 != v285);
          v284 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v282;
        *(_QWORD *)(a1 + 2656) = v275;
        *(_QWORD *)(a1 + 2664) = v283;
        if (v284)
          operator delete(v284);
      }
      else
      {
        *v273 = v272;
        v275 = v273 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v275;
      VVector<short>::VVector((uint64_t *)v1050, *(_DWORD *)(a1 + 52));
      v287 = *(_QWORD *)&v1050[0];
      *(_QWORD *)(a1 + 312) = *(_QWORD *)&v1050[0];
      v288 = *(_QWORD **)(a1 + 2656);
      v289 = *(_QWORD *)(a1 + 2664);
      if ((unint64_t)v288 >= v289)
      {
        v291 = *(_QWORD *)(a1 + 2648);
        v292 = ((uint64_t)v288 - v291) >> 3;
        if ((unint64_t)(v292 + 1) >> 61)
          goto LABEL_1173;
        v293 = v289 - v291;
        v294 = v293 >> 2;
        if (v293 >> 2 <= (unint64_t)(v292 + 1))
          v294 = v292 + 1;
        if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
          v295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v295 = v294;
        if (v295)
          v295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v295);
        else
          v296 = 0;
        v297 = (_QWORD *)(v295 + 8 * v292);
        v298 = v295 + 8 * v296;
        *v297 = v287;
        v290 = v297 + 1;
        v299 = *(char **)(a1 + 2656);
        v300 = *(char **)(a1 + 2648);
        if (v299 != v300)
        {
          do
          {
            v301 = *((_QWORD *)v299 - 1);
            v299 -= 8;
            *--v297 = v301;
          }
          while (v299 != v300);
          v299 = *(char **)(a1 + 2648);
        }
        *(_QWORD *)(a1 + 2648) = v297;
        *(_QWORD *)(a1 + 2656) = v290;
        *(_QWORD *)(a1 + 2664) = v298;
        if (v299)
          operator delete(v299);
      }
      else
      {
        *v288 = v287;
        v290 = v288 + 1;
      }
      *(_QWORD *)(a1 + 2656) = v290;
      v256 = *(_QWORD *)(a1 + 2680);
      if (v256)
      {
LABEL_339:
        if (*(_BYTE *)(v256 + 244))
        {
          v302 = v256 + 248;
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(v302 + 8 * v127);
          *(_QWORD *)(a1 + 328) = *(_QWORD *)(v302 + 8 * (v127 + 1));
          *(_QWORD *)(a1 + 336) = *(_QWORD *)(v302 + 8 * (v127 + 2));
          *(_QWORD *)(a1 + 344) = *(_QWORD *)(v302 + 8 * (v127 + 3));
          goto LABEL_406;
        }
        VVector<short>::VVector((uint64_t *)v1050, *(_DWORD *)(a1 + 52));
        v303 = *(_QWORD *)&v1050[0];
        *(_QWORD *)(a1 + 320) = *(_QWORD *)&v1050[0];
        v304 = *(_QWORD **)(a1 + 2656);
        v305 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v304 >= v305)
        {
          v307 = *(_QWORD *)(a1 + 2648);
          v308 = ((uint64_t)v304 - v307) >> 3;
          if ((unint64_t)(v308 + 1) >> 61)
            goto LABEL_1173;
          v309 = v305 - v307;
          v310 = v309 >> 2;
          if (v309 >> 2 <= (unint64_t)(v308 + 1))
            v310 = v308 + 1;
          if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFF8)
            v311 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v311 = v310;
          if (v311)
            v311 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v311);
          else
            v312 = 0;
          v313 = (_QWORD *)(v311 + 8 * v308);
          v314 = v311 + 8 * v312;
          *v313 = v303;
          v306 = v313 + 1;
          v315 = *(char **)(a1 + 2656);
          v316 = *(char **)(a1 + 2648);
          if (v315 != v316)
          {
            do
            {
              v317 = *((_QWORD *)v315 - 1);
              v315 -= 8;
              *--v313 = v317;
            }
            while (v315 != v316);
            v315 = *(char **)(a1 + 2648);
          }
          *(_QWORD *)(a1 + 2648) = v313;
          *(_QWORD *)(a1 + 2656) = v306;
          *(_QWORD *)(a1 + 2664) = v314;
          if (v315)
            operator delete(v315);
        }
        else
        {
          *v304 = v303;
          v306 = v304 + 1;
        }
        *(_QWORD *)(a1 + 2656) = v306;
        VVector<short>::VVector((uint64_t *)v1050, *(_DWORD *)(a1 + 52));
        v318 = *(_QWORD *)&v1050[0];
        *(_QWORD *)(a1 + 328) = *(_QWORD *)&v1050[0];
        v319 = *(_QWORD **)(a1 + 2656);
        v320 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v319 >= v320)
        {
          v322 = *(_QWORD *)(a1 + 2648);
          v323 = ((uint64_t)v319 - v322) >> 3;
          if ((unint64_t)(v323 + 1) >> 61)
            goto LABEL_1173;
          v324 = v320 - v322;
          v325 = v324 >> 2;
          if (v324 >> 2 <= (unint64_t)(v323 + 1))
            v325 = v323 + 1;
          if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF8)
            v326 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v326 = v325;
          if (v326)
            v326 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v326);
          else
            v327 = 0;
          v328 = (_QWORD *)(v326 + 8 * v323);
          v329 = v326 + 8 * v327;
          *v328 = v318;
          v321 = v328 + 1;
          v330 = *(char **)(a1 + 2656);
          v331 = *(char **)(a1 + 2648);
          if (v330 != v331)
          {
            do
            {
              v332 = *((_QWORD *)v330 - 1);
              v330 -= 8;
              *--v328 = v332;
            }
            while (v330 != v331);
            v330 = *(char **)(a1 + 2648);
          }
          *(_QWORD *)(a1 + 2648) = v328;
          *(_QWORD *)(a1 + 2656) = v321;
          *(_QWORD *)(a1 + 2664) = v329;
          if (v330)
            operator delete(v330);
        }
        else
        {
          *v319 = v318;
          v321 = v319 + 1;
        }
        *(_QWORD *)(a1 + 2656) = v321;
        VVector<short>::VVector((uint64_t *)v1050, *(_DWORD *)(a1 + 52));
        v333 = *(_QWORD *)&v1050[0];
        *(_QWORD *)(a1 + 336) = *(_QWORD *)&v1050[0];
        v334 = *(_QWORD **)(a1 + 2656);
        v335 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v334 >= v335)
        {
          v337 = *(_QWORD *)(a1 + 2648);
          v338 = ((uint64_t)v334 - v337) >> 3;
          if ((unint64_t)(v338 + 1) >> 61)
            goto LABEL_1173;
          v339 = v335 - v337;
          v340 = v339 >> 2;
          if (v339 >> 2 <= (unint64_t)(v338 + 1))
            v340 = v338 + 1;
          if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8)
            v341 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v341 = v340;
          if (v341)
            v341 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v341);
          else
            v342 = 0;
          v343 = (_QWORD *)(v341 + 8 * v338);
          v344 = v341 + 8 * v342;
          *v343 = v333;
          v336 = v343 + 1;
          v345 = *(char **)(a1 + 2656);
          v346 = *(char **)(a1 + 2648);
          if (v345 != v346)
          {
            do
            {
              v347 = *((_QWORD *)v345 - 1);
              v345 -= 8;
              *--v343 = v347;
            }
            while (v345 != v346);
            v345 = *(char **)(a1 + 2648);
          }
          *(_QWORD *)(a1 + 2648) = v343;
          *(_QWORD *)(a1 + 2656) = v336;
          *(_QWORD *)(a1 + 2664) = v344;
          if (v345)
            operator delete(v345);
        }
        else
        {
          *v334 = v333;
          v336 = v334 + 1;
        }
        *(_QWORD *)(a1 + 2656) = v336;
        VVector<short>::VVector((uint64_t *)v1050, *(_DWORD *)(a1 + 52));
        v348 = *(_QWORD *)&v1050[0];
        *(_QWORD *)(a1 + 344) = *(_QWORD *)&v1050[0];
        v349 = *(_QWORD **)(a1 + 2656);
        v350 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v349 < v350)
        {
          *v349 = v348;
          v351 = v349 + 1;
LABEL_405:
          *(_QWORD *)(a1 + 2656) = v351;
          goto LABEL_406;
        }
        v352 = *(_QWORD *)(a1 + 2648);
        v353 = ((uint64_t)v349 - v352) >> 3;
        if (!((unint64_t)(v353 + 1) >> 61))
        {
          v354 = v350 - v352;
          v355 = v354 >> 2;
          if (v354 >> 2 <= (unint64_t)(v353 + 1))
            v355 = v353 + 1;
          if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFF8)
            v356 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v356 = v355;
          if (v356)
            v356 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v356);
          else
            v357 = 0;
          v358 = (_QWORD *)(v356 + 8 * v353);
          v359 = v356 + 8 * v357;
          *v358 = v348;
          v351 = v358 + 1;
          v360 = *(char **)(a1 + 2656);
          v361 = *(char **)(a1 + 2648);
          if (v360 != v361)
          {
            do
            {
              v362 = *((_QWORD *)v360 - 1);
              v360 -= 8;
              *--v358 = v362;
            }
            while (v360 != v361);
            v360 = *(char **)(a1 + 2648);
          }
          *(_QWORD *)(a1 + 2648) = v358;
          *(_QWORD *)(a1 + 2656) = v351;
          *(_QWORD *)(a1 + 2664) = v359;
          if (v360)
            operator delete(v360);
          goto LABEL_405;
        }
LABEL_1173:
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
    }
LABEL_406:
    *(_QWORD *)(a1 + 2504) = a1 + 232;
    *(_QWORD *)(a1 + 2512) = a1 + 240;
    *(_QWORD *)(a1 + 2520) = a1 + 248;
    *(_QWORD *)(a1 + 2528) = a1 + 256;
    *(_QWORD *)(a1 + 2536) = a1 + 264;
    *(_QWORD *)(a1 + 2544) = a1 + 272;
    *(_QWORD *)(a1 + 2552) = a1 + 280;
    *(_QWORD *)(a1 + 2560) = a1 + 288;
    *(_QWORD *)(a1 + 2568) = a1 + 296;
    *(_QWORD *)(a1 + 2576) = a1 + 304;
    *(_QWORD *)(a1 + 2584) = a1 + 312;
    *(_QWORD *)(a1 + 2592) = a1 + 320;
    *(_QWORD *)(a1 + 2600) = a1 + 328;
    *(_QWORD *)(a1 + 2608) = a1 + 336;
    *(_QWORD *)(a1 + 2616) = a1 + 344;
  }
  v363 = *(unsigned int *)(a1 + 52);
  v364 = (void *)operator new[]();
  v365 = v364;
  if ((int)v363 >= 1)
    bzero(v364, 4 * v363);
  *(_QWORD *)(a1 + 760) = v365;
  v366 = *(_QWORD **)(a1 + 2632);
  v367 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v366 >= v367)
  {
    v369 = *(_QWORD *)(a1 + 2624);
    v370 = ((uint64_t)v366 - v369) >> 3;
    if ((unint64_t)(v370 + 1) >> 61)
      goto LABEL_1172;
    v371 = v367 - v369;
    v372 = v371 >> 2;
    if (v371 >> 2 <= (unint64_t)(v370 + 1))
      v372 = v370 + 1;
    if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF8)
      v373 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v373 = v372;
    if (v373)
      v373 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v373);
    else
      v374 = 0;
    v375 = (_QWORD *)(v373 + 8 * v370);
    v376 = v373 + 8 * v374;
    *v375 = v365;
    v368 = v375 + 1;
    v377 = *(char **)(a1 + 2632);
    v378 = *(char **)(a1 + 2624);
    if (v377 != v378)
    {
      do
      {
        v379 = *((_QWORD *)v377 - 1);
        v377 -= 8;
        *--v375 = v379;
      }
      while (v377 != v378);
      v377 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v375;
    *(_QWORD *)(a1 + 2632) = v368;
    *(_QWORD *)(a1 + 2640) = v376;
    if (v377)
      operator delete(v377);
  }
  else
  {
    *v366 = v365;
    v368 = v366 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v368;
  v380 = *(unsigned int *)(a1 + 52);
  v381 = (void *)operator new[]();
  v382 = v381;
  if ((int)v380 >= 1)
    bzero(v381, 4 * v380);
  *(_QWORD *)(a1 + 768) = v382;
  v383 = *(_QWORD **)(a1 + 2632);
  v384 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v383 >= v384)
  {
    v386 = *(_QWORD *)(a1 + 2624);
    v387 = ((uint64_t)v383 - v386) >> 3;
    if ((unint64_t)(v387 + 1) >> 61)
      goto LABEL_1172;
    v388 = v384 - v386;
    v389 = v388 >> 2;
    if (v388 >> 2 <= (unint64_t)(v387 + 1))
      v389 = v387 + 1;
    if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFF8)
      v390 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v390 = v389;
    if (v390)
      v390 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v390);
    else
      v391 = 0;
    v392 = (_QWORD *)(v390 + 8 * v387);
    v393 = v390 + 8 * v391;
    *v392 = v382;
    v385 = v392 + 1;
    v394 = *(char **)(a1 + 2632);
    v395 = *(char **)(a1 + 2624);
    if (v394 != v395)
    {
      do
      {
        v396 = *((_QWORD *)v394 - 1);
        v394 -= 8;
        *--v392 = v396;
      }
      while (v394 != v395);
      v394 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v392;
    *(_QWORD *)(a1 + 2632) = v385;
    *(_QWORD *)(a1 + 2640) = v393;
    if (v394)
      operator delete(v394);
  }
  else
  {
    *v383 = v382;
    v385 = v383 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v385;
  v397 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
  v398 = (void *)operator new[]();
  bzero(v398, 4 * v397);
  *(_QWORD *)(a1 + 752) = v398;
  v399 = *(_QWORD **)(a1 + 2632);
  v400 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v399 >= v400)
  {
    v402 = *(_QWORD *)(a1 + 2624);
    v403 = ((uint64_t)v399 - v402) >> 3;
    if ((unint64_t)(v403 + 1) >> 61)
      goto LABEL_1172;
    v404 = v400 - v402;
    v405 = v404 >> 2;
    if (v404 >> 2 <= (unint64_t)(v403 + 1))
      v405 = v403 + 1;
    if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFF8)
      v406 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v406 = v405;
    if (v406)
      v406 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v406);
    else
      v407 = 0;
    v408 = (_QWORD *)(v406 + 8 * v403);
    v409 = v406 + 8 * v407;
    *v408 = v398;
    v401 = v408 + 1;
    v410 = *(char **)(a1 + 2632);
    v411 = *(char **)(a1 + 2624);
    if (v410 != v411)
    {
      do
      {
        v412 = *((_QWORD *)v410 - 1);
        v410 -= 8;
        *--v408 = v412;
      }
      while (v410 != v411);
      v410 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v408;
    *(_QWORD *)(a1 + 2632) = v401;
    *(_QWORD *)(a1 + 2640) = v409;
    if (v410)
      operator delete(v410);
  }
  else
  {
    *v399 = v398;
    v401 = v399 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v401;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_647;
  if (*(_DWORD *)(a1 + 56))
  {
    v413 = *(unsigned __int8 *)(a1 + 40) + 1;
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v413);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 984), v1050);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1050);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v413);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1104), v1050);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1050);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v413);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1224), v1050);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1050);
    SparseMatrix<float>::SparseMatrix((unsigned int *)v1050, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), maxFeatureVectors, v413);
    SparseMatrix<float>::operator=((unsigned int *)(a1 + 1344), v1050);
    SparseMatrix<float>::~SparseMatrix((uint64_t)v1050);
  }
  else
  {
    v414 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v415 = (void *)operator new[]();
    bzero(v415, 4 * v414);
    *(_QWORD *)(a1 + 1464) = v415;
    v416 = *(_QWORD **)(a1 + 2632);
    v417 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v416 >= v417)
    {
      v419 = *(_QWORD *)(a1 + 2624);
      v420 = ((uint64_t)v416 - v419) >> 3;
      if ((unint64_t)(v420 + 1) >> 61)
        goto LABEL_1172;
      v421 = v417 - v419;
      v422 = v421 >> 2;
      if (v421 >> 2 <= (unint64_t)(v420 + 1))
        v422 = v420 + 1;
      if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFF8)
        v423 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v423 = v422;
      if (v423)
        v423 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v423);
      else
        v424 = 0;
      v425 = (_QWORD *)(v423 + 8 * v420);
      v426 = v423 + 8 * v424;
      *v425 = v415;
      v418 = v425 + 1;
      v427 = *(char **)(a1 + 2632);
      v428 = *(char **)(a1 + 2624);
      if (v427 != v428)
      {
        do
        {
          v429 = *((_QWORD *)v427 - 1);
          v427 -= 8;
          *--v425 = v429;
        }
        while (v427 != v428);
        v427 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v425;
      *(_QWORD *)(a1 + 2632) = v418;
      *(_QWORD *)(a1 + 2640) = v426;
      if (v427)
        operator delete(v427);
    }
    else
    {
      *v416 = v415;
      v418 = v416 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v418;
    v430 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v431 = (void *)operator new[]();
    bzero(v431, 4 * v430);
    *(_QWORD *)(a1 + 1472) = v431;
    v432 = *(_QWORD **)(a1 + 2632);
    v433 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v432 >= v433)
    {
      v435 = *(_QWORD *)(a1 + 2624);
      v436 = ((uint64_t)v432 - v435) >> 3;
      if ((unint64_t)(v436 + 1) >> 61)
        goto LABEL_1172;
      v437 = v433 - v435;
      v438 = v437 >> 2;
      if (v437 >> 2 <= (unint64_t)(v436 + 1))
        v438 = v436 + 1;
      if ((unint64_t)v437 >= 0x7FFFFFFFFFFFFFF8)
        v439 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v439 = v438;
      if (v439)
        v439 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v439);
      else
        v440 = 0;
      v441 = (_QWORD *)(v439 + 8 * v436);
      v442 = v439 + 8 * v440;
      *v441 = v431;
      v434 = v441 + 1;
      v443 = *(char **)(a1 + 2632);
      v444 = *(char **)(a1 + 2624);
      if (v443 != v444)
      {
        do
        {
          v445 = *((_QWORD *)v443 - 1);
          v443 -= 8;
          *--v441 = v445;
        }
        while (v443 != v444);
        v443 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v441;
      *(_QWORD *)(a1 + 2632) = v434;
      *(_QWORD *)(a1 + 2640) = v442;
      if (v443)
        operator delete(v443);
    }
    else
    {
      *v432 = v431;
      v434 = v432 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v434;
    v446 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v447 = (void *)operator new[]();
    bzero(v447, 4 * v446);
    *(_QWORD *)(a1 + 1480) = v447;
    v448 = *(_QWORD **)(a1 + 2632);
    v449 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v448 >= v449)
    {
      v451 = *(_QWORD *)(a1 + 2624);
      v452 = ((uint64_t)v448 - v451) >> 3;
      if ((unint64_t)(v452 + 1) >> 61)
        goto LABEL_1172;
      v453 = v449 - v451;
      v454 = v453 >> 2;
      if (v453 >> 2 <= (unint64_t)(v452 + 1))
        v454 = v452 + 1;
      if ((unint64_t)v453 >= 0x7FFFFFFFFFFFFFF8)
        v455 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v455 = v454;
      if (v455)
        v455 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v455);
      else
        v456 = 0;
      v457 = (_QWORD *)(v455 + 8 * v452);
      v458 = v455 + 8 * v456;
      *v457 = v447;
      v450 = v457 + 1;
      v459 = *(char **)(a1 + 2632);
      v460 = *(char **)(a1 + 2624);
      if (v459 != v460)
      {
        do
        {
          v461 = *((_QWORD *)v459 - 1);
          v459 -= 8;
          *--v457 = v461;
        }
        while (v459 != v460);
        v459 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v457;
      *(_QWORD *)(a1 + 2632) = v450;
      *(_QWORD *)(a1 + 2640) = v458;
      if (v459)
        operator delete(v459);
    }
    else
    {
      *v448 = v447;
      v450 = v448 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v450;
    v462 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    v463 = (void *)operator new[]();
    bzero(v463, 4 * v462);
    *(_QWORD *)(a1 + 1488) = v463;
    v464 = *(_QWORD **)(a1 + 2632);
    v465 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v464 >= v465)
    {
      v467 = *(_QWORD *)(a1 + 2624);
      v468 = ((uint64_t)v464 - v467) >> 3;
      if ((unint64_t)(v468 + 1) >> 61)
        goto LABEL_1172;
      v469 = v465 - v467;
      v470 = v469 >> 2;
      if (v469 >> 2 <= (unint64_t)(v468 + 1))
        v470 = v468 + 1;
      if ((unint64_t)v469 >= 0x7FFFFFFFFFFFFFF8)
        v471 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v471 = v470;
      if (v471)
        v471 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v471);
      else
        v472 = 0;
      v473 = (_QWORD *)(v471 + 8 * v468);
      v474 = v471 + 8 * v472;
      *v473 = v463;
      v466 = v473 + 1;
      v475 = *(char **)(a1 + 2632);
      v476 = *(char **)(a1 + 2624);
      if (v475 != v476)
      {
        do
        {
          v477 = *((_QWORD *)v475 - 1);
          v475 -= 8;
          *--v473 = v477;
        }
        while (v475 != v476);
        v475 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v473;
      *(_QWORD *)(a1 + 2632) = v466;
      *(_QWORD *)(a1 + 2640) = v474;
      if (v475)
        operator delete(v475);
    }
    else
    {
      *v464 = v463;
      v466 = v464 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v466;
  }
  v478 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v479 = (void *)operator new[]();
  bzero(v479, 4 * v478);
  *(_QWORD *)(a1 + 1496) = v479;
  v480 = *(_QWORD **)(a1 + 2632);
  v481 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v480 >= v481)
  {
    v483 = *(_QWORD *)(a1 + 2624);
    v484 = ((uint64_t)v480 - v483) >> 3;
    if ((unint64_t)(v484 + 1) >> 61)
      goto LABEL_1172;
    v485 = v481 - v483;
    v486 = v485 >> 2;
    if (v485 >> 2 <= (unint64_t)(v484 + 1))
      v486 = v484 + 1;
    if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFF8)
      v487 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v487 = v486;
    if (v487)
      v487 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v487);
    else
      v488 = 0;
    v489 = (_QWORD *)(v487 + 8 * v484);
    v490 = v487 + 8 * v488;
    *v489 = v479;
    v482 = v489 + 1;
    v491 = *(char **)(a1 + 2632);
    v492 = *(char **)(a1 + 2624);
    if (v491 != v492)
    {
      do
      {
        v493 = *((_QWORD *)v491 - 1);
        v491 -= 8;
        *--v489 = v493;
      }
      while (v491 != v492);
      v491 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v489;
    *(_QWORD *)(a1 + 2632) = v482;
    *(_QWORD *)(a1 + 2640) = v490;
    if (v491)
      operator delete(v491);
  }
  else
  {
    *v480 = v479;
    v482 = v480 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v482;
  v494 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v495 = (void *)operator new[]();
  bzero(v495, 4 * v494);
  *(_QWORD *)(a1 + 1504) = v495;
  v496 = *(_QWORD **)(a1 + 2632);
  v497 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v496 >= v497)
  {
    v499 = *(_QWORD *)(a1 + 2624);
    v500 = ((uint64_t)v496 - v499) >> 3;
    if ((unint64_t)(v500 + 1) >> 61)
      goto LABEL_1172;
    v501 = v497 - v499;
    v502 = v501 >> 2;
    if (v501 >> 2 <= (unint64_t)(v500 + 1))
      v502 = v500 + 1;
    if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF8)
      v503 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v503 = v502;
    if (v503)
      v503 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v503);
    else
      v504 = 0;
    v505 = (_QWORD *)(v503 + 8 * v500);
    v506 = v503 + 8 * v504;
    *v505 = v495;
    v498 = v505 + 1;
    v507 = *(char **)(a1 + 2632);
    v508 = *(char **)(a1 + 2624);
    if (v507 != v508)
    {
      do
      {
        v509 = *((_QWORD *)v507 - 1);
        v507 -= 8;
        *--v505 = v509;
      }
      while (v507 != v508);
      v507 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v505;
    *(_QWORD *)(a1 + 2632) = v498;
    *(_QWORD *)(a1 + 2640) = v506;
    if (v507)
      operator delete(v507);
  }
  else
  {
    *v496 = v495;
    v498 = v496 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v498;
  v510 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v511 = (void *)operator new[]();
  bzero(v511, 4 * v510);
  *(_QWORD *)(a1 + 1512) = v511;
  v512 = *(_QWORD **)(a1 + 2632);
  v513 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v512 >= v513)
  {
    v515 = *(_QWORD *)(a1 + 2624);
    v516 = ((uint64_t)v512 - v515) >> 3;
    if ((unint64_t)(v516 + 1) >> 61)
      goto LABEL_1172;
    v517 = v513 - v515;
    v518 = v517 >> 2;
    if (v517 >> 2 <= (unint64_t)(v516 + 1))
      v518 = v516 + 1;
    if ((unint64_t)v517 >= 0x7FFFFFFFFFFFFFF8)
      v519 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v519 = v518;
    if (v519)
      v519 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v519);
    else
      v520 = 0;
    v521 = (_QWORD *)(v519 + 8 * v516);
    v522 = v519 + 8 * v520;
    *v521 = v511;
    v514 = v521 + 1;
    v523 = *(char **)(a1 + 2632);
    v524 = *(char **)(a1 + 2624);
    if (v523 != v524)
    {
      do
      {
        v525 = *((_QWORD *)v523 - 1);
        v523 -= 8;
        *--v521 = v525;
      }
      while (v523 != v524);
      v523 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v521;
    *(_QWORD *)(a1 + 2632) = v514;
    *(_QWORD *)(a1 + 2640) = v522;
    if (v523)
      operator delete(v523);
  }
  else
  {
    *v512 = v511;
    v514 = v512 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v514;
  v526 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v527 = (void *)operator new[]();
  bzero(v527, 4 * v526);
  *(_QWORD *)(a1 + 1520) = v527;
  v528 = *(_QWORD **)(a1 + 2632);
  v529 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v528 >= v529)
  {
    v531 = *(_QWORD *)(a1 + 2624);
    v532 = ((uint64_t)v528 - v531) >> 3;
    if ((unint64_t)(v532 + 1) >> 61)
      goto LABEL_1172;
    v533 = v529 - v531;
    v534 = v533 >> 2;
    if (v533 >> 2 <= (unint64_t)(v532 + 1))
      v534 = v532 + 1;
    if ((unint64_t)v533 >= 0x7FFFFFFFFFFFFFF8)
      v535 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v535 = v534;
    if (v535)
      v535 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v535);
    else
      v536 = 0;
    v537 = (_QWORD *)(v535 + 8 * v532);
    v538 = v535 + 8 * v536;
    *v537 = v527;
    v530 = v537 + 1;
    v539 = *(char **)(a1 + 2632);
    v540 = *(char **)(a1 + 2624);
    if (v539 != v540)
    {
      do
      {
        v541 = *((_QWORD *)v539 - 1);
        v539 -= 8;
        *--v537 = v541;
      }
      while (v539 != v540);
      v539 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v537;
    *(_QWORD *)(a1 + 2632) = v530;
    *(_QWORD *)(a1 + 2640) = v538;
    if (v539)
      operator delete(v539);
  }
  else
  {
    *v528 = v527;
    v530 = v528 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v530;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_647;
  v542 = *(unsigned int *)(a1 + 52);
  v543 = (void *)operator new[]();
  v544 = v543;
  if ((int)v542 >= 1)
    bzero(v543, 4 * v542);
  *(_QWORD *)(a1 + 1528) = v544;
  v545 = *(_QWORD **)(a1 + 2632);
  v546 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v545 >= v546)
  {
    v548 = *(_QWORD *)(a1 + 2624);
    v549 = ((uint64_t)v545 - v548) >> 3;
    if ((unint64_t)(v549 + 1) >> 61)
      goto LABEL_1172;
    v550 = v546 - v548;
    v551 = v550 >> 2;
    if (v550 >> 2 <= (unint64_t)(v549 + 1))
      v551 = v549 + 1;
    if ((unint64_t)v550 >= 0x7FFFFFFFFFFFFFF8)
      v552 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v552 = v551;
    if (v552)
      v552 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v552);
    else
      v553 = 0;
    v554 = (_QWORD *)(v552 + 8 * v549);
    v555 = v552 + 8 * v553;
    *v554 = v544;
    v547 = v554 + 1;
    v556 = *(char **)(a1 + 2632);
    v557 = *(char **)(a1 + 2624);
    if (v556 != v557)
    {
      do
      {
        v558 = *((_QWORD *)v556 - 1);
        v556 -= 8;
        *--v554 = v558;
      }
      while (v556 != v557);
      v556 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v554;
    *(_QWORD *)(a1 + 2632) = v547;
    *(_QWORD *)(a1 + 2640) = v555;
    if (v556)
      operator delete(v556);
  }
  else
  {
    *v545 = v544;
    v547 = v545 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v547;
  v559 = *(unsigned int *)(a1 + 52);
  v560 = (void *)operator new[]();
  v561 = v560;
  if ((int)v559 >= 1)
    bzero(v560, 4 * v559);
  *(_QWORD *)(a1 + 1536) = v561;
  v562 = *(_QWORD **)(a1 + 2632);
  v563 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v562 >= v563)
  {
    v565 = *(_QWORD *)(a1 + 2624);
    v566 = ((uint64_t)v562 - v565) >> 3;
    if ((unint64_t)(v566 + 1) >> 61)
      goto LABEL_1172;
    v567 = v563 - v565;
    v568 = v567 >> 2;
    if (v567 >> 2 <= (unint64_t)(v566 + 1))
      v568 = v566 + 1;
    if ((unint64_t)v567 >= 0x7FFFFFFFFFFFFFF8)
      v569 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v569 = v568;
    if (v569)
      v569 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v569);
    else
      v570 = 0;
    v571 = (_QWORD *)(v569 + 8 * v566);
    v572 = v569 + 8 * v570;
    *v571 = v561;
    v564 = v571 + 1;
    v573 = *(char **)(a1 + 2632);
    v574 = *(char **)(a1 + 2624);
    if (v573 != v574)
    {
      do
      {
        v575 = *((_QWORD *)v573 - 1);
        v573 -= 8;
        *--v571 = v575;
      }
      while (v573 != v574);
      v573 = *(char **)(a1 + 2624);
    }
    *(_QWORD *)(a1 + 2624) = v571;
    *(_QWORD *)(a1 + 2632) = v564;
    *(_QWORD *)(a1 + 2640) = v572;
    if (v573)
      operator delete(v573);
  }
  else
  {
    *v562 = v561;
    v564 = v562 + 1;
  }
  *(_QWORD *)(a1 + 2632) = v564;
  v576 = *(unsigned int *)(a1 + 52);
  v577 = (void *)operator new[]();
  v578 = v577;
  if ((int)v576 >= 1)
    bzero(v577, 4 * v576);
  *(_QWORD *)(a1 + 1544) = v578;
  v579 = *(_QWORD **)(a1 + 2632);
  v580 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v579 >= v580)
  {
    v582 = *(_QWORD *)(a1 + 2624);
    v583 = ((uint64_t)v579 - v582) >> 3;
    if (!((unint64_t)(v583 + 1) >> 61))
    {
      v584 = v580 - v582;
      v585 = v584 >> 2;
      if (v584 >> 2 <= (unint64_t)(v583 + 1))
        v585 = v583 + 1;
      if ((unint64_t)v584 >= 0x7FFFFFFFFFFFFFF8)
        v586 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v586 = v585;
      if (v586)
        v586 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v586);
      else
        v587 = 0;
      v588 = (_QWORD *)(v586 + 8 * v583);
      v589 = v586 + 8 * v587;
      *v588 = v578;
      v581 = v588 + 1;
      v590 = *(char **)(a1 + 2632);
      v591 = *(char **)(a1 + 2624);
      if (v590 != v591)
      {
        do
        {
          v592 = *((_QWORD *)v590 - 1);
          v590 -= 8;
          *--v588 = v592;
        }
        while (v590 != v591);
        v590 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v588;
      *(_QWORD *)(a1 + 2632) = v581;
      *(_QWORD *)(a1 + 2640) = v589;
      if (v590)
        operator delete(v590);
      goto LABEL_646;
    }
LABEL_1172:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  *v579 = v578;
  v581 = v579 + 1;
LABEL_646:
  *(_QWORD *)(a1 + 2632) = v581;
LABEL_647:
  if (*(_BYTE *)(a1 + 2692))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 88), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 112), maxFeatureVectors);
  }
  std::vector<MMatrix<float>>::resize((char **)(a1 + 184), maxFeatureVectors);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 160), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 64), (int)v133);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 136), (int)v133);
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 208), maxFeatureVectors);
  if (*(_BYTE *)(a1 + 2692))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 640), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 664), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 688), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 712), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 544), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 568), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 592), (int)v132);
    std::vector<VVector<float>>::resize((char **)(a1 + 616), (int)v132);
  }
  std::vector<MMatrix<float>>::resize((char **)(a1 + 448), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 472), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 496), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 520), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 352), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 376), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 400), (int)v132);
  std::vector<MMatrix<float>>::resize((char **)(a1 + 424), (int)v132);
  if (!*(_BYTE *)(a1 + 1696))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 960), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 840), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 816), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 912), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 888), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 864), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 936), maxFeatureVectors);
  }
  if ((int)v133 >= 1)
  {
    for (i = 0; i != v133; ++i)
    {
      v594 = *(unsigned int *)(a1 + 48);
      v595 = (void *)operator new[]();
      v596 = v595;
      if ((int)v594 >= 1)
        bzero(v595, 4 * v594);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * i) = v596;
      v597 = *(_QWORD **)(a1 + 2632);
      v598 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v597 >= v598)
      {
        v600 = *(_QWORD *)(a1 + 2624);
        v601 = ((uint64_t)v597 - v600) >> 3;
        if ((unint64_t)(v601 + 1) >> 61)
          goto LABEL_1172;
        v602 = v598 - v600;
        v603 = v602 >> 2;
        if (v602 >> 2 <= (unint64_t)(v601 + 1))
          v603 = v601 + 1;
        if ((unint64_t)v602 >= 0x7FFFFFFFFFFFFFF8)
          v604 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v604 = v603;
        if (v604)
          v604 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v604);
        else
          v605 = 0;
        v606 = (_QWORD *)(v604 + 8 * v601);
        *v606 = v596;
        v599 = v606 + 1;
        v607 = *(char **)(a1 + 2632);
        v608 = *(char **)(a1 + 2624);
        if (v607 != v608)
        {
          do
          {
            v609 = *((_QWORD *)v607 - 1);
            v607 -= 8;
            *--v606 = v609;
          }
          while (v607 != v608);
          v607 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v606;
        *(_QWORD *)(a1 + 2632) = v599;
        *(_QWORD *)(a1 + 2640) = v604 + 8 * v605;
        if (v607)
          operator delete(v607);
      }
      else
      {
        *v597 = v596;
        v599 = v597 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v599;
      v610 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 2688);
      v611 = (void *)operator new[]();
      bzero(v611, 4 * v610);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * i) = v611;
      v612 = *(_QWORD **)(a1 + 2632);
      v613 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v612 >= v613)
      {
        v615 = *(_QWORD *)(a1 + 2624);
        v616 = ((uint64_t)v612 - v615) >> 3;
        if ((unint64_t)(v616 + 1) >> 61)
          goto LABEL_1172;
        v617 = v613 - v615;
        v618 = v617 >> 2;
        if (v617 >> 2 <= (unint64_t)(v616 + 1))
          v618 = v616 + 1;
        if ((unint64_t)v617 >= 0x7FFFFFFFFFFFFFF8)
          v619 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v619 = v618;
        if (v619)
          v619 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v619);
        else
          v620 = 0;
        v621 = (_QWORD *)(v619 + 8 * v616);
        *v621 = v611;
        v614 = v621 + 1;
        v622 = *(char **)(a1 + 2632);
        v623 = *(char **)(a1 + 2624);
        if (v622 != v623)
        {
          do
          {
            v624 = *((_QWORD *)v622 - 1);
            v622 -= 8;
            *--v621 = v624;
          }
          while (v622 != v623);
          v622 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v621;
        *(_QWORD *)(a1 + 2632) = v614;
        *(_QWORD *)(a1 + 2640) = v619 + 8 * v620;
        if (v622)
          operator delete(v622);
      }
      else
      {
        *v612 = v611;
        v614 = v612 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v614;
    }
  }
  if ((int)v132 >= 1)
  {
    for (j = 0; j != v132; ++j)
    {
      if (*(_BYTE *)(a1 + 2692))
      {
        v626 = *(unsigned int *)(a1 + 52);
        v627 = (void *)operator new[]();
        v628 = v627;
        if ((int)v626 >= 1)
          bzero(v627, 4 * v626);
        *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * j) = v628;
        v629 = *(_QWORD **)(a1 + 2632);
        v630 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v629 >= v630)
        {
          v632 = *(_QWORD *)(a1 + 2624);
          v633 = ((uint64_t)v629 - v632) >> 3;
          if ((unint64_t)(v633 + 1) >> 61)
            goto LABEL_1172;
          v634 = v630 - v632;
          v635 = v634 >> 2;
          if (v634 >> 2 <= (unint64_t)(v633 + 1))
            v635 = v633 + 1;
          if ((unint64_t)v634 >= 0x7FFFFFFFFFFFFFF8)
            v636 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v636 = v635;
          if (v636)
            v636 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v636);
          else
            v637 = 0;
          v638 = (_QWORD *)(v636 + 8 * v633);
          *v638 = v628;
          v631 = v638 + 1;
          v639 = *(char **)(a1 + 2632);
          v640 = *(char **)(a1 + 2624);
          if (v639 != v640)
          {
            do
            {
              v641 = *((_QWORD *)v639 - 1);
              v639 -= 8;
              *--v638 = v641;
            }
            while (v639 != v640);
            v639 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v638;
          *(_QWORD *)(a1 + 2632) = v631;
          *(_QWORD *)(a1 + 2640) = v636 + 8 * v637;
          if (v639)
            operator delete(v639);
        }
        else
        {
          *v629 = v628;
          v631 = v629 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v631;
        v642 = *(unsigned int *)(a1 + 52);
        v643 = (void *)operator new[]();
        v644 = v643;
        if ((int)v642 >= 1)
          bzero(v643, 4 * v642);
        *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * j) = v644;
        v645 = *(_QWORD **)(a1 + 2632);
        v646 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v645 >= v646)
        {
          v648 = *(_QWORD *)(a1 + 2624);
          v649 = ((uint64_t)v645 - v648) >> 3;
          if ((unint64_t)(v649 + 1) >> 61)
            goto LABEL_1172;
          v650 = v646 - v648;
          v651 = v650 >> 2;
          if (v650 >> 2 <= (unint64_t)(v649 + 1))
            v651 = v649 + 1;
          if ((unint64_t)v650 >= 0x7FFFFFFFFFFFFFF8)
            v652 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v652 = v651;
          if (v652)
            v652 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v652);
          else
            v653 = 0;
          v654 = (_QWORD *)(v652 + 8 * v649);
          *v654 = v644;
          v647 = v654 + 1;
          v655 = *(char **)(a1 + 2632);
          v656 = *(char **)(a1 + 2624);
          if (v655 != v656)
          {
            do
            {
              v657 = *((_QWORD *)v655 - 1);
              v655 -= 8;
              *--v654 = v657;
            }
            while (v655 != v656);
            v655 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v654;
          *(_QWORD *)(a1 + 2632) = v647;
          *(_QWORD *)(a1 + 2640) = v652 + 8 * v653;
          if (v655)
            operator delete(v655);
        }
        else
        {
          *v645 = v644;
          v647 = v645 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v647;
        v658 = *(unsigned int *)(a1 + 52);
        v659 = (void *)operator new[]();
        v660 = v659;
        if ((int)v658 >= 1)
          bzero(v659, 4 * v658);
        *(_QWORD *)(*(_QWORD *)(a1 + 592) + 8 * j) = v660;
        v661 = *(_QWORD **)(a1 + 2632);
        v662 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v661 >= v662)
        {
          v664 = *(_QWORD *)(a1 + 2624);
          v665 = ((uint64_t)v661 - v664) >> 3;
          if ((unint64_t)(v665 + 1) >> 61)
            goto LABEL_1172;
          v666 = v662 - v664;
          v667 = v666 >> 2;
          if (v666 >> 2 <= (unint64_t)(v665 + 1))
            v667 = v665 + 1;
          if ((unint64_t)v666 >= 0x7FFFFFFFFFFFFFF8)
            v668 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v668 = v667;
          if (v668)
            v668 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v668);
          else
            v669 = 0;
          v670 = (_QWORD *)(v668 + 8 * v665);
          *v670 = v660;
          v663 = v670 + 1;
          v671 = *(char **)(a1 + 2632);
          v672 = *(char **)(a1 + 2624);
          if (v671 != v672)
          {
            do
            {
              v673 = *((_QWORD *)v671 - 1);
              v671 -= 8;
              *--v670 = v673;
            }
            while (v671 != v672);
            v671 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v670;
          *(_QWORD *)(a1 + 2632) = v663;
          *(_QWORD *)(a1 + 2640) = v668 + 8 * v669;
          if (v671)
            operator delete(v671);
        }
        else
        {
          *v661 = v660;
          v663 = v661 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v663;
        v674 = *(unsigned int *)(a1 + 52);
        v675 = (void *)operator new[]();
        v676 = v675;
        if ((int)v674 >= 1)
          bzero(v675, 4 * v674);
        *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * j) = v676;
        v677 = *(_QWORD **)(a1 + 2632);
        v678 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v677 >= v678)
        {
          v680 = *(_QWORD *)(a1 + 2624);
          v681 = ((uint64_t)v677 - v680) >> 3;
          if ((unint64_t)(v681 + 1) >> 61)
            goto LABEL_1172;
          v682 = v678 - v680;
          v683 = v682 >> 2;
          if (v682 >> 2 <= (unint64_t)(v681 + 1))
            v683 = v681 + 1;
          if ((unint64_t)v682 >= 0x7FFFFFFFFFFFFFF8)
            v684 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v684 = v683;
          if (v684)
            v684 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v684);
          else
            v685 = 0;
          v686 = (_QWORD *)(v684 + 8 * v681);
          *v686 = v676;
          v679 = v686 + 1;
          v687 = *(char **)(a1 + 2632);
          v688 = *(char **)(a1 + 2624);
          if (v687 != v688)
          {
            do
            {
              v689 = *((_QWORD *)v687 - 1);
              v687 -= 8;
              *--v686 = v689;
            }
            while (v687 != v688);
            v687 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v686;
          *(_QWORD *)(a1 + 2632) = v679;
          *(_QWORD *)(a1 + 2640) = v684 + 8 * v685;
          if (v687)
            operator delete(v687);
        }
        else
        {
          *v677 = v676;
          v679 = v677 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v679;
        v690 = *(unsigned int *)(a1 + 52);
        v691 = (void *)operator new[]();
        v692 = v691;
        if ((int)v690 >= 1)
          bzero(v691, 4 * v690);
        *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * j) = v692;
        v693 = *(_QWORD **)(a1 + 2632);
        v694 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v693 >= v694)
        {
          v696 = *(_QWORD *)(a1 + 2624);
          v697 = ((uint64_t)v693 - v696) >> 3;
          if ((unint64_t)(v697 + 1) >> 61)
            goto LABEL_1172;
          v698 = v694 - v696;
          v699 = v698 >> 2;
          if (v698 >> 2 <= (unint64_t)(v697 + 1))
            v699 = v697 + 1;
          if ((unint64_t)v698 >= 0x7FFFFFFFFFFFFFF8)
            v700 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v700 = v699;
          if (v700)
            v700 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v700);
          else
            v701 = 0;
          v702 = (_QWORD *)(v700 + 8 * v697);
          *v702 = v692;
          v695 = v702 + 1;
          v703 = *(char **)(a1 + 2632);
          v704 = *(char **)(a1 + 2624);
          if (v703 != v704)
          {
            do
            {
              v705 = *((_QWORD *)v703 - 1);
              v703 -= 8;
              *--v702 = v705;
            }
            while (v703 != v704);
            v703 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v702;
          *(_QWORD *)(a1 + 2632) = v695;
          *(_QWORD *)(a1 + 2640) = v700 + 8 * v701;
          if (v703)
            operator delete(v703);
        }
        else
        {
          *v693 = v692;
          v695 = v693 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v695;
        v706 = *(unsigned int *)(a1 + 52);
        v707 = (void *)operator new[]();
        v708 = v707;
        if ((int)v706 >= 1)
          bzero(v707, 4 * v706);
        *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * j) = v708;
        v709 = *(_QWORD **)(a1 + 2632);
        v710 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v709 >= v710)
        {
          v712 = *(_QWORD *)(a1 + 2624);
          v713 = ((uint64_t)v709 - v712) >> 3;
          if ((unint64_t)(v713 + 1) >> 61)
            goto LABEL_1172;
          v714 = v710 - v712;
          v715 = v714 >> 2;
          if (v714 >> 2 <= (unint64_t)(v713 + 1))
            v715 = v713 + 1;
          if ((unint64_t)v714 >= 0x7FFFFFFFFFFFFFF8)
            v716 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v716 = v715;
          if (v716)
            v716 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v716);
          else
            v717 = 0;
          v718 = (_QWORD *)(v716 + 8 * v713);
          *v718 = v708;
          v711 = v718 + 1;
          v719 = *(char **)(a1 + 2632);
          v720 = *(char **)(a1 + 2624);
          if (v719 != v720)
          {
            do
            {
              v721 = *((_QWORD *)v719 - 1);
              v719 -= 8;
              *--v718 = v721;
            }
            while (v719 != v720);
            v719 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v718;
          *(_QWORD *)(a1 + 2632) = v711;
          *(_QWORD *)(a1 + 2640) = v716 + 8 * v717;
          if (v719)
            operator delete(v719);
        }
        else
        {
          *v709 = v708;
          v711 = v709 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v711;
        v722 = *(unsigned int *)(a1 + 52);
        v723 = (void *)operator new[]();
        v724 = v723;
        if ((int)v722 >= 1)
          bzero(v723, 4 * v722);
        *(_QWORD *)(*(_QWORD *)(a1 + 688) + 8 * j) = v724;
        v725 = *(_QWORD **)(a1 + 2632);
        v726 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v725 >= v726)
        {
          v728 = *(_QWORD *)(a1 + 2624);
          v729 = ((uint64_t)v725 - v728) >> 3;
          if ((unint64_t)(v729 + 1) >> 61)
            goto LABEL_1172;
          v730 = v726 - v728;
          v731 = v730 >> 2;
          if (v730 >> 2 <= (unint64_t)(v729 + 1))
            v731 = v729 + 1;
          if ((unint64_t)v730 >= 0x7FFFFFFFFFFFFFF8)
            v732 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v732 = v731;
          if (v732)
            v732 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v732);
          else
            v733 = 0;
          v734 = (_QWORD *)(v732 + 8 * v729);
          *v734 = v724;
          v727 = v734 + 1;
          v735 = *(char **)(a1 + 2632);
          v736 = *(char **)(a1 + 2624);
          if (v735 != v736)
          {
            do
            {
              v737 = *((_QWORD *)v735 - 1);
              v735 -= 8;
              *--v734 = v737;
            }
            while (v735 != v736);
            v735 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v734;
          *(_QWORD *)(a1 + 2632) = v727;
          *(_QWORD *)(a1 + 2640) = v732 + 8 * v733;
          if (v735)
            operator delete(v735);
        }
        else
        {
          *v725 = v724;
          v727 = v725 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v727;
        v738 = *(unsigned int *)(a1 + 52);
        v739 = (void *)operator new[]();
        v740 = v739;
        if ((int)v738 >= 1)
          bzero(v739, 4 * v738);
        *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * j) = v740;
        v741 = *(_QWORD **)(a1 + 2632);
        v742 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v741 >= v742)
        {
          v744 = *(_QWORD *)(a1 + 2624);
          v745 = ((uint64_t)v741 - v744) >> 3;
          if ((unint64_t)(v745 + 1) >> 61)
            goto LABEL_1172;
          v746 = v742 - v744;
          v747 = v746 >> 2;
          if (v746 >> 2 <= (unint64_t)(v745 + 1))
            v747 = v745 + 1;
          if ((unint64_t)v746 >= 0x7FFFFFFFFFFFFFF8)
            v748 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v748 = v747;
          if (v748)
            v748 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v748);
          else
            v749 = 0;
          v750 = (_QWORD *)(v748 + 8 * v745);
          *v750 = v740;
          v743 = v750 + 1;
          v751 = *(char **)(a1 + 2632);
          v752 = *(char **)(a1 + 2624);
          if (v751 != v752)
          {
            do
            {
              v753 = *((_QWORD *)v751 - 1);
              v751 -= 8;
              *--v750 = v753;
            }
            while (v751 != v752);
            v751 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v750;
          *(_QWORD *)(a1 + 2632) = v743;
          *(_QWORD *)(a1 + 2640) = v748 + 8 * v749;
          if (v751)
            operator delete(v751);
        }
        else
        {
          *v741 = v740;
          v743 = v741 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v743;
      }
      v754 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v755 = (void *)operator new[]();
      bzero(v755, 4 * v754);
      *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * j) = v755;
      v756 = *(_QWORD **)(a1 + 2632);
      v757 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v756 >= v757)
      {
        v759 = *(_QWORD *)(a1 + 2624);
        v760 = ((uint64_t)v756 - v759) >> 3;
        if ((unint64_t)(v760 + 1) >> 61)
          goto LABEL_1172;
        v761 = v757 - v759;
        v762 = v761 >> 2;
        if (v761 >> 2 <= (unint64_t)(v760 + 1))
          v762 = v760 + 1;
        if ((unint64_t)v761 >= 0x7FFFFFFFFFFFFFF8)
          v763 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v763 = v762;
        if (v763)
          v763 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v763);
        else
          v764 = 0;
        v765 = (_QWORD *)(v763 + 8 * v760);
        *v765 = v755;
        v758 = v765 + 1;
        v766 = *(char **)(a1 + 2632);
        v767 = *(char **)(a1 + 2624);
        if (v766 != v767)
        {
          do
          {
            v768 = *((_QWORD *)v766 - 1);
            v766 -= 8;
            *--v765 = v768;
          }
          while (v766 != v767);
          v766 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v765;
        *(_QWORD *)(a1 + 2632) = v758;
        *(_QWORD *)(a1 + 2640) = v763 + 8 * v764;
        if (v766)
          operator delete(v766);
      }
      else
      {
        *v756 = v755;
        v758 = v756 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v758;
      v769 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v770 = (void *)operator new[]();
      bzero(v770, 4 * v769);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * j) = v770;
      v771 = *(_QWORD **)(a1 + 2632);
      v772 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v771 >= v772)
      {
        v774 = *(_QWORD *)(a1 + 2624);
        v775 = ((uint64_t)v771 - v774) >> 3;
        if ((unint64_t)(v775 + 1) >> 61)
          goto LABEL_1172;
        v776 = v772 - v774;
        v777 = v776 >> 2;
        if (v776 >> 2 <= (unint64_t)(v775 + 1))
          v777 = v775 + 1;
        if ((unint64_t)v776 >= 0x7FFFFFFFFFFFFFF8)
          v778 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v778 = v777;
        if (v778)
          v778 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v778);
        else
          v779 = 0;
        v780 = (_QWORD *)(v778 + 8 * v775);
        *v780 = v770;
        v773 = v780 + 1;
        v781 = *(char **)(a1 + 2632);
        v782 = *(char **)(a1 + 2624);
        if (v781 != v782)
        {
          do
          {
            v783 = *((_QWORD *)v781 - 1);
            v781 -= 8;
            *--v780 = v783;
          }
          while (v781 != v782);
          v781 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v780;
        *(_QWORD *)(a1 + 2632) = v773;
        *(_QWORD *)(a1 + 2640) = v778 + 8 * v779;
        if (v781)
          operator delete(v781);
      }
      else
      {
        *v771 = v770;
        v773 = v771 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v773;
      v784 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v785 = (void *)operator new[]();
      bzero(v785, 4 * v784);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * j) = v785;
      v786 = *(_QWORD **)(a1 + 2632);
      v787 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v786 >= v787)
      {
        v789 = *(_QWORD *)(a1 + 2624);
        v790 = ((uint64_t)v786 - v789) >> 3;
        if ((unint64_t)(v790 + 1) >> 61)
          goto LABEL_1172;
        v791 = v787 - v789;
        v792 = v791 >> 2;
        if (v791 >> 2 <= (unint64_t)(v790 + 1))
          v792 = v790 + 1;
        if ((unint64_t)v791 >= 0x7FFFFFFFFFFFFFF8)
          v793 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v793 = v792;
        if (v793)
          v793 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v793);
        else
          v794 = 0;
        v795 = (_QWORD *)(v793 + 8 * v790);
        *v795 = v785;
        v788 = v795 + 1;
        v796 = *(char **)(a1 + 2632);
        v797 = *(char **)(a1 + 2624);
        if (v796 != v797)
        {
          do
          {
            v798 = *((_QWORD *)v796 - 1);
            v796 -= 8;
            *--v795 = v798;
          }
          while (v796 != v797);
          v796 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v795;
        *(_QWORD *)(a1 + 2632) = v788;
        *(_QWORD *)(a1 + 2640) = v793 + 8 * v794;
        if (v796)
          operator delete(v796);
      }
      else
      {
        *v786 = v785;
        v788 = v786 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v788;
      v799 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v800 = (void *)operator new[]();
      bzero(v800, 4 * v799);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * j) = v800;
      v801 = *(_QWORD **)(a1 + 2632);
      v802 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v801 >= v802)
      {
        v804 = *(_QWORD *)(a1 + 2624);
        v805 = ((uint64_t)v801 - v804) >> 3;
        if ((unint64_t)(v805 + 1) >> 61)
          goto LABEL_1172;
        v806 = v802 - v804;
        v807 = v806 >> 2;
        if (v806 >> 2 <= (unint64_t)(v805 + 1))
          v807 = v805 + 1;
        if ((unint64_t)v806 >= 0x7FFFFFFFFFFFFFF8)
          v808 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v808 = v807;
        if (v808)
          v808 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v808);
        else
          v809 = 0;
        v810 = (_QWORD *)(v808 + 8 * v805);
        *v810 = v800;
        v803 = v810 + 1;
        v811 = *(char **)(a1 + 2632);
        v812 = *(char **)(a1 + 2624);
        if (v811 != v812)
        {
          do
          {
            v813 = *((_QWORD *)v811 - 1);
            v811 -= 8;
            *--v810 = v813;
          }
          while (v811 != v812);
          v811 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v810;
        *(_QWORD *)(a1 + 2632) = v803;
        *(_QWORD *)(a1 + 2640) = v808 + 8 * v809;
        if (v811)
          operator delete(v811);
      }
      else
      {
        *v801 = v800;
        v803 = v801 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v803;
      v814 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v815 = (void *)operator new[]();
      bzero(v815, 4 * v814);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * j) = v815;
      v816 = *(_QWORD **)(a1 + 2632);
      v817 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v816 >= v817)
      {
        v819 = *(_QWORD *)(a1 + 2624);
        v820 = ((uint64_t)v816 - v819) >> 3;
        if ((unint64_t)(v820 + 1) >> 61)
          goto LABEL_1172;
        v821 = v817 - v819;
        v822 = v821 >> 2;
        if (v821 >> 2 <= (unint64_t)(v820 + 1))
          v822 = v820 + 1;
        if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFF8)
          v823 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v823 = v822;
        if (v823)
          v823 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v823);
        else
          v824 = 0;
        v825 = (_QWORD *)(v823 + 8 * v820);
        *v825 = v815;
        v818 = v825 + 1;
        v826 = *(char **)(a1 + 2632);
        v827 = *(char **)(a1 + 2624);
        if (v826 != v827)
        {
          do
          {
            v828 = *((_QWORD *)v826 - 1);
            v826 -= 8;
            *--v825 = v828;
          }
          while (v826 != v827);
          v826 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v825;
        *(_QWORD *)(a1 + 2632) = v818;
        *(_QWORD *)(a1 + 2640) = v823 + 8 * v824;
        if (v826)
          operator delete(v826);
      }
      else
      {
        *v816 = v815;
        v818 = v816 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v818;
      v829 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v830 = (void *)operator new[]();
      bzero(v830, 4 * v829);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * j) = v830;
      v831 = *(_QWORD **)(a1 + 2632);
      v832 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v831 >= v832)
      {
        v834 = *(_QWORD *)(a1 + 2624);
        v835 = ((uint64_t)v831 - v834) >> 3;
        if ((unint64_t)(v835 + 1) >> 61)
          goto LABEL_1172;
        v836 = v832 - v834;
        v837 = v836 >> 2;
        if (v836 >> 2 <= (unint64_t)(v835 + 1))
          v837 = v835 + 1;
        if ((unint64_t)v836 >= 0x7FFFFFFFFFFFFFF8)
          v838 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v838 = v837;
        if (v838)
          v838 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v838);
        else
          v839 = 0;
        v840 = (_QWORD *)(v838 + 8 * v835);
        *v840 = v830;
        v833 = v840 + 1;
        v841 = *(char **)(a1 + 2632);
        v842 = *(char **)(a1 + 2624);
        if (v841 != v842)
        {
          do
          {
            v843 = *((_QWORD *)v841 - 1);
            v841 -= 8;
            *--v840 = v843;
          }
          while (v841 != v842);
          v841 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v840;
        *(_QWORD *)(a1 + 2632) = v833;
        *(_QWORD *)(a1 + 2640) = v838 + 8 * v839;
        if (v841)
          operator delete(v841);
      }
      else
      {
        *v831 = v830;
        v833 = v831 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v833;
      v844 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v845 = (void *)operator new[]();
      bzero(v845, 4 * v844);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * j) = v845;
      v846 = *(_QWORD **)(a1 + 2632);
      v847 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v846 >= v847)
      {
        v849 = *(_QWORD *)(a1 + 2624);
        v850 = ((uint64_t)v846 - v849) >> 3;
        if ((unint64_t)(v850 + 1) >> 61)
          goto LABEL_1172;
        v851 = v847 - v849;
        v852 = v851 >> 2;
        if (v851 >> 2 <= (unint64_t)(v850 + 1))
          v852 = v850 + 1;
        if ((unint64_t)v851 >= 0x7FFFFFFFFFFFFFF8)
          v853 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v853 = v852;
        if (v853)
          v853 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v853);
        else
          v854 = 0;
        v855 = (_QWORD *)(v853 + 8 * v850);
        *v855 = v845;
        v848 = v855 + 1;
        v856 = *(char **)(a1 + 2632);
        v857 = *(char **)(a1 + 2624);
        if (v856 != v857)
        {
          do
          {
            v858 = *((_QWORD *)v856 - 1);
            v856 -= 8;
            *--v855 = v858;
          }
          while (v856 != v857);
          v856 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v855;
        *(_QWORD *)(a1 + 2632) = v848;
        *(_QWORD *)(a1 + 2640) = v853 + 8 * v854;
        if (v856)
          operator delete(v856);
      }
      else
      {
        *v846 = v845;
        v848 = v846 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v848;
      v859 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v860 = (void *)operator new[]();
      bzero(v860, 4 * v859);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * j) = v860;
      v861 = *(_QWORD **)(a1 + 2632);
      v862 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v861 >= v862)
      {
        v864 = *(_QWORD *)(a1 + 2624);
        v865 = ((uint64_t)v861 - v864) >> 3;
        if ((unint64_t)(v865 + 1) >> 61)
          goto LABEL_1172;
        v866 = v862 - v864;
        v867 = v866 >> 2;
        if (v866 >> 2 <= (unint64_t)(v865 + 1))
          v867 = v865 + 1;
        if ((unint64_t)v866 >= 0x7FFFFFFFFFFFFFF8)
          v868 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v868 = v867;
        if (v868)
          v868 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v868);
        else
          v869 = 0;
        v870 = (_QWORD *)(v868 + 8 * v865);
        *v870 = v860;
        v863 = v870 + 1;
        v871 = *(char **)(a1 + 2632);
        v872 = *(char **)(a1 + 2624);
        if (v871 != v872)
        {
          do
          {
            v873 = *((_QWORD *)v871 - 1);
            v871 -= 8;
            *--v870 = v873;
          }
          while (v871 != v872);
          v871 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v870;
        *(_QWORD *)(a1 + 2632) = v863;
        *(_QWORD *)(a1 + 2640) = v868 + 8 * v869;
        if (v871)
          operator delete(v871);
      }
      else
      {
        *v861 = v860;
        v863 = v861 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v863;
    }
  }
  if (maxFeatureVectors >= 1)
  {
    v874 = 0;
    do
    {
      if (*(_BYTE *)(a1 + 40))
        v875 = 2;
      else
        v875 = 1;
      std::vector<int>::resize((std::vector<int> *)(*(_QWORD *)(a1 + 208) + 24 * v874), v875);
      if (*(_BYTE *)(a1 + 2692))
      {
        v876 = *(unsigned int *)(a1 + 52);
        v877 = (void *)operator new[]();
        v878 = v877;
        if ((int)v876 >= 1)
          bzero(v877, 4 * v876);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v874) = v878;
        v879 = *(_QWORD **)(a1 + 2632);
        v880 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v879 >= v880)
        {
          v882 = *(_QWORD *)(a1 + 2624);
          v883 = ((uint64_t)v879 - v882) >> 3;
          if ((unint64_t)(v883 + 1) >> 61)
            goto LABEL_1172;
          v884 = v880 - v882;
          v885 = v884 >> 2;
          if (v884 >> 2 <= (unint64_t)(v883 + 1))
            v885 = v883 + 1;
          if ((unint64_t)v884 >= 0x7FFFFFFFFFFFFFF8)
            v886 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v886 = v885;
          if (v886)
            v886 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v886);
          else
            v887 = 0;
          v888 = (_QWORD *)(v886 + 8 * v883);
          *v888 = v878;
          v881 = v888 + 1;
          v889 = *(char **)(a1 + 2632);
          v890 = *(char **)(a1 + 2624);
          if (v889 != v890)
          {
            do
            {
              v891 = *((_QWORD *)v889 - 1);
              v889 -= 8;
              *--v888 = v891;
            }
            while (v889 != v890);
            v889 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v888;
          *(_QWORD *)(a1 + 2632) = v881;
          *(_QWORD *)(a1 + 2640) = v886 + 8 * v887;
          if (v889)
            operator delete(v889);
        }
        else
        {
          *v879 = v878;
          v881 = v879 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v881;
        v892 = *(unsigned int *)(a1 + 52);
        v893 = (void *)operator new[]();
        v894 = v893;
        if ((int)v892 >= 1)
          bzero(v893, 4 * v892);
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v874) = v894;
        v895 = *(_QWORD **)(a1 + 2632);
        v896 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v895 >= v896)
        {
          v898 = *(_QWORD *)(a1 + 2624);
          v899 = ((uint64_t)v895 - v898) >> 3;
          if ((unint64_t)(v899 + 1) >> 61)
            goto LABEL_1172;
          v900 = v896 - v898;
          v901 = v900 >> 2;
          if (v900 >> 2 <= (unint64_t)(v899 + 1))
            v901 = v899 + 1;
          if ((unint64_t)v900 >= 0x7FFFFFFFFFFFFFF8)
            v902 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v902 = v901;
          if (v902)
            v902 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v902);
          else
            v903 = 0;
          v904 = (_QWORD *)(v902 + 8 * v899);
          *v904 = v894;
          v897 = v904 + 1;
          v905 = *(char **)(a1 + 2632);
          v906 = *(char **)(a1 + 2624);
          if (v905 != v906)
          {
            do
            {
              v907 = *((_QWORD *)v905 - 1);
              v905 -= 8;
              *--v904 = v907;
            }
            while (v905 != v906);
            v905 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v904;
          *(_QWORD *)(a1 + 2632) = v897;
          *(_QWORD *)(a1 + 2640) = v902 + 8 * v903;
          if (v905)
            operator delete(v905);
        }
        else
        {
          *v895 = v894;
          v897 = v895 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v897;
      }
      v908 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v909 = (void *)operator new[]();
      bzero(v909, 4 * v908);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v874) = v909;
      v910 = *(_QWORD **)(a1 + 2632);
      v911 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v910 >= v911)
      {
        v913 = *(_QWORD *)(a1 + 2624);
        v914 = ((uint64_t)v910 - v913) >> 3;
        if ((unint64_t)(v914 + 1) >> 61)
          goto LABEL_1172;
        v915 = v911 - v913;
        v916 = v915 >> 2;
        if (v915 >> 2 <= (unint64_t)(v914 + 1))
          v916 = v914 + 1;
        if ((unint64_t)v915 >= 0x7FFFFFFFFFFFFFF8)
          v917 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v917 = v916;
        if (v917)
          v917 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v917);
        else
          v918 = 0;
        v919 = (_QWORD *)(v917 + 8 * v914);
        *v919 = v909;
        v912 = v919 + 1;
        v920 = *(char **)(a1 + 2632);
        v921 = *(char **)(a1 + 2624);
        if (v920 != v921)
        {
          do
          {
            v922 = *((_QWORD *)v920 - 1);
            v920 -= 8;
            *--v919 = v922;
          }
          while (v920 != v921);
          v920 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v919;
        *(_QWORD *)(a1 + 2632) = v912;
        *(_QWORD *)(a1 + 2640) = v917 + 8 * v918;
        if (v920)
          operator delete(v920);
      }
      else
      {
        *v910 = v909;
        v912 = v910 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v912;
      v923 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v924 = (void *)operator new[]();
      bzero(v924, 4 * v923);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v874) = v924;
      v925 = *(_QWORD **)(a1 + 2632);
      v926 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v925 >= v926)
      {
        v928 = *(_QWORD *)(a1 + 2624);
        v929 = ((uint64_t)v925 - v928) >> 3;
        if ((unint64_t)(v929 + 1) >> 61)
          goto LABEL_1172;
        v930 = v926 - v928;
        v931 = v930 >> 2;
        if (v930 >> 2 <= (unint64_t)(v929 + 1))
          v931 = v929 + 1;
        if ((unint64_t)v930 >= 0x7FFFFFFFFFFFFFF8)
          v932 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v932 = v931;
        if (v932)
          v932 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v932);
        else
          v933 = 0;
        v934 = (_QWORD *)(v932 + 8 * v929);
        *v934 = v924;
        v927 = v934 + 1;
        v935 = *(char **)(a1 + 2632);
        v936 = *(char **)(a1 + 2624);
        if (v935 != v936)
        {
          do
          {
            v937 = *((_QWORD *)v935 - 1);
            v935 -= 8;
            *--v934 = v937;
          }
          while (v935 != v936);
          v935 = *(char **)(a1 + 2624);
        }
        *(_QWORD *)(a1 + 2624) = v934;
        *(_QWORD *)(a1 + 2632) = v927;
        *(_QWORD *)(a1 + 2640) = v932 + 8 * v933;
        if (v935)
          operator delete(v935);
      }
      else
      {
        *v925 = v924;
        v927 = v925 + 1;
      }
      *(_QWORD *)(a1 + 2632) = v927;
      if (!*(_BYTE *)(a1 + 1696))
      {
        v938 = *(unsigned int *)(a1 + 52);
        v939 = (void *)operator new[]();
        v940 = v939;
        if ((int)v938 >= 1)
          bzero(v939, 4 * v938);
        *(_QWORD *)(*(_QWORD *)(a1 + 960) + 8 * v874) = v940;
        v941 = *(_QWORD **)(a1 + 2632);
        v942 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v941 >= v942)
        {
          v944 = *(_QWORD *)(a1 + 2624);
          v945 = ((uint64_t)v941 - v944) >> 3;
          if ((unint64_t)(v945 + 1) >> 61)
            goto LABEL_1172;
          v946 = v942 - v944;
          v947 = v946 >> 2;
          if (v946 >> 2 <= (unint64_t)(v945 + 1))
            v947 = v945 + 1;
          if ((unint64_t)v946 >= 0x7FFFFFFFFFFFFFF8)
            v948 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v948 = v947;
          if (v948)
            v948 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v948);
          else
            v949 = 0;
          v950 = (_QWORD *)(v948 + 8 * v945);
          *v950 = v940;
          v943 = v950 + 1;
          v951 = *(char **)(a1 + 2632);
          v952 = *(char **)(a1 + 2624);
          if (v951 != v952)
          {
            do
            {
              v953 = *((_QWORD *)v951 - 1);
              v951 -= 8;
              *--v950 = v953;
            }
            while (v951 != v952);
            v951 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v950;
          *(_QWORD *)(a1 + 2632) = v943;
          *(_QWORD *)(a1 + 2640) = v948 + 8 * v949;
          if (v951)
            operator delete(v951);
        }
        else
        {
          *v941 = v940;
          v943 = v941 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v943;
        v954 = *(unsigned int *)(a1 + 52);
        v955 = (void *)operator new[]();
        v956 = v955;
        if ((int)v954 >= 1)
          bzero(v955, 4 * v954);
        *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v874) = v956;
        v957 = *(_QWORD **)(a1 + 2632);
        v958 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v957 >= v958)
        {
          v960 = *(_QWORD *)(a1 + 2624);
          v961 = ((uint64_t)v957 - v960) >> 3;
          if ((unint64_t)(v961 + 1) >> 61)
            goto LABEL_1172;
          v962 = v958 - v960;
          v963 = v962 >> 2;
          if (v962 >> 2 <= (unint64_t)(v961 + 1))
            v963 = v961 + 1;
          if ((unint64_t)v962 >= 0x7FFFFFFFFFFFFFF8)
            v964 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v964 = v963;
          if (v964)
            v964 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v964);
          else
            v965 = 0;
          v966 = (_QWORD *)(v964 + 8 * v961);
          *v966 = v956;
          v959 = v966 + 1;
          v967 = *(char **)(a1 + 2632);
          v968 = *(char **)(a1 + 2624);
          if (v967 != v968)
          {
            do
            {
              v969 = *((_QWORD *)v967 - 1);
              v967 -= 8;
              *--v966 = v969;
            }
            while (v967 != v968);
            v967 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v966;
          *(_QWORD *)(a1 + 2632) = v959;
          *(_QWORD *)(a1 + 2640) = v964 + 8 * v965;
          if (v967)
            operator delete(v967);
        }
        else
        {
          *v957 = v956;
          v959 = v957 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v959;
        v970 = *(unsigned int *)(a1 + 48);
        v971 = (void *)operator new[]();
        v972 = v971;
        if ((int)v970 >= 1)
          bzero(v971, 4 * v970);
        *(_QWORD *)(*(_QWORD *)(a1 + 816) + 8 * v874) = v972;
        v973 = *(_QWORD **)(a1 + 2632);
        v974 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v973 >= v974)
        {
          v976 = *(_QWORD *)(a1 + 2624);
          v977 = ((uint64_t)v973 - v976) >> 3;
          if ((unint64_t)(v977 + 1) >> 61)
            goto LABEL_1172;
          v978 = v974 - v976;
          v979 = v978 >> 2;
          if (v978 >> 2 <= (unint64_t)(v977 + 1))
            v979 = v977 + 1;
          if ((unint64_t)v978 >= 0x7FFFFFFFFFFFFFF8)
            v980 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v980 = v979;
          if (v980)
            v980 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v980);
          else
            v981 = 0;
          v982 = (_QWORD *)(v980 + 8 * v977);
          *v982 = v972;
          v975 = v982 + 1;
          v983 = *(char **)(a1 + 2632);
          v984 = *(char **)(a1 + 2624);
          if (v983 != v984)
          {
            do
            {
              v985 = *((_QWORD *)v983 - 1);
              v983 -= 8;
              *--v982 = v985;
            }
            while (v983 != v984);
            v983 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v982;
          *(_QWORD *)(a1 + 2632) = v975;
          *(_QWORD *)(a1 + 2640) = v980 + 8 * v981;
          if (v983)
            operator delete(v983);
        }
        else
        {
          *v973 = v972;
          v975 = v973 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v975;
        v986 = *(unsigned int *)(a1 + 52);
        v987 = (void *)operator new[]();
        v988 = v987;
        if ((int)v986 >= 1)
          bzero(v987, 4 * v986);
        *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v874) = v988;
        v989 = *(_QWORD **)(a1 + 2632);
        v990 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v989 >= v990)
        {
          v992 = *(_QWORD *)(a1 + 2624);
          v993 = ((uint64_t)v989 - v992) >> 3;
          if ((unint64_t)(v993 + 1) >> 61)
            goto LABEL_1172;
          v994 = v990 - v992;
          v995 = v994 >> 2;
          if (v994 >> 2 <= (unint64_t)(v993 + 1))
            v995 = v993 + 1;
          if ((unint64_t)v994 >= 0x7FFFFFFFFFFFFFF8)
            v996 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v996 = v995;
          if (v996)
            v996 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v996);
          else
            v997 = 0;
          v998 = (_QWORD *)(v996 + 8 * v993);
          *v998 = v988;
          v991 = v998 + 1;
          v999 = *(char **)(a1 + 2632);
          v1000 = *(char **)(a1 + 2624);
          if (v999 != v1000)
          {
            do
            {
              v1001 = *((_QWORD *)v999 - 1);
              v999 -= 8;
              *--v998 = v1001;
            }
            while (v999 != v1000);
            v999 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v998;
          *(_QWORD *)(a1 + 2632) = v991;
          *(_QWORD *)(a1 + 2640) = v996 + 8 * v997;
          if (v999)
            operator delete(v999);
        }
        else
        {
          *v989 = v988;
          v991 = v989 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v991;
        v1002 = *(unsigned int *)(a1 + 52);
        v1003 = (void *)operator new[]();
        v1004 = v1003;
        if ((int)v1002 >= 1)
          bzero(v1003, 4 * v1002);
        *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8 * v874) = v1004;
        v1005 = *(_QWORD **)(a1 + 2632);
        v1006 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1005 >= v1006)
        {
          v1008 = *(_QWORD *)(a1 + 2624);
          v1009 = ((uint64_t)v1005 - v1008) >> 3;
          if ((unint64_t)(v1009 + 1) >> 61)
            goto LABEL_1172;
          v1010 = v1006 - v1008;
          v1011 = v1010 >> 2;
          if (v1010 >> 2 <= (unint64_t)(v1009 + 1))
            v1011 = v1009 + 1;
          if ((unint64_t)v1010 >= 0x7FFFFFFFFFFFFFF8)
            v1012 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1012 = v1011;
          if (v1012)
            v1012 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1012);
          else
            v1013 = 0;
          v1014 = (_QWORD *)(v1012 + 8 * v1009);
          *v1014 = v1004;
          v1007 = v1014 + 1;
          v1015 = *(char **)(a1 + 2632);
          v1016 = *(char **)(a1 + 2624);
          if (v1015 != v1016)
          {
            do
            {
              v1017 = *((_QWORD *)v1015 - 1);
              v1015 -= 8;
              *--v1014 = v1017;
            }
            while (v1015 != v1016);
            v1015 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1014;
          *(_QWORD *)(a1 + 2632) = v1007;
          *(_QWORD *)(a1 + 2640) = v1012 + 8 * v1013;
          if (v1015)
            operator delete(v1015);
        }
        else
        {
          *v1005 = v1004;
          v1007 = v1005 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1007;
        v1018 = *(unsigned int *)(a1 + 52);
        v1019 = (void *)operator new[]();
        v1020 = v1019;
        if ((int)v1018 >= 1)
          bzero(v1019, 4 * v1018);
        *(_QWORD *)(*(_QWORD *)(a1 + 864) + 8 * v874) = v1020;
        v1021 = *(_QWORD **)(a1 + 2632);
        v1022 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1021 >= v1022)
        {
          v1024 = *(_QWORD *)(a1 + 2624);
          v1025 = ((uint64_t)v1021 - v1024) >> 3;
          if ((unint64_t)(v1025 + 1) >> 61)
            goto LABEL_1172;
          v1026 = v1022 - v1024;
          v1027 = v1026 >> 2;
          if (v1026 >> 2 <= (unint64_t)(v1025 + 1))
            v1027 = v1025 + 1;
          if ((unint64_t)v1026 >= 0x7FFFFFFFFFFFFFF8)
            v1028 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1028 = v1027;
          if (v1028)
            v1028 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1028);
          else
            v1029 = 0;
          v1030 = (_QWORD *)(v1028 + 8 * v1025);
          *v1030 = v1020;
          v1023 = v1030 + 1;
          v1031 = *(char **)(a1 + 2632);
          v1032 = *(char **)(a1 + 2624);
          if (v1031 != v1032)
          {
            do
            {
              v1033 = *((_QWORD *)v1031 - 1);
              v1031 -= 8;
              *--v1030 = v1033;
            }
            while (v1031 != v1032);
            v1031 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1030;
          *(_QWORD *)(a1 + 2632) = v1023;
          *(_QWORD *)(a1 + 2640) = v1028 + 8 * v1029;
          if (v1031)
            operator delete(v1031);
        }
        else
        {
          *v1021 = v1020;
          v1023 = v1021 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1023;
        v1034 = *(unsigned int *)(a1 + 52);
        v1035 = (void *)operator new[]();
        v1036 = v1035;
        if ((int)v1034 >= 1)
          bzero(v1035, 4 * v1034);
        *(_QWORD *)(*(_QWORD *)(a1 + 936) + 8 * v874) = v1036;
        v1037 = *(_QWORD **)(a1 + 2632);
        v1038 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1037 >= v1038)
        {
          v1040 = *(_QWORD *)(a1 + 2624);
          v1041 = ((uint64_t)v1037 - v1040) >> 3;
          if ((unint64_t)(v1041 + 1) >> 61)
            goto LABEL_1172;
          v1042 = v1038 - v1040;
          v1043 = v1042 >> 2;
          if (v1042 >> 2 <= (unint64_t)(v1041 + 1))
            v1043 = v1041 + 1;
          if ((unint64_t)v1042 >= 0x7FFFFFFFFFFFFFF8)
            v1044 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1044 = v1043;
          if (v1044)
            v1044 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v1044);
          else
            v1045 = 0;
          v1046 = (_QWORD *)(v1044 + 8 * v1041);
          *v1046 = v1036;
          v1039 = v1046 + 1;
          v1047 = *(char **)(a1 + 2632);
          v1048 = *(char **)(a1 + 2624);
          if (v1047 != v1048)
          {
            do
            {
              v1049 = *((_QWORD *)v1047 - 1);
              v1047 -= 8;
              *--v1046 = v1049;
            }
            while (v1047 != v1048);
            v1047 = *(char **)(a1 + 2624);
          }
          *(_QWORD *)(a1 + 2624) = v1046;
          *(_QWORD *)(a1 + 2632) = v1039;
          *(_QWORD *)(a1 + 2640) = v1044 + 8 * v1045;
          if (v1047)
            operator delete(v1047);
        }
        else
        {
          *v1037 = v1036;
          v1039 = v1037 + 1;
        }
        *(_QWORD *)(a1 + 2632) = v1039;
      }
      ++v874;
    }
    while (v874 < maxFeatureVectors);
  }
}

void sub_191598F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void LSTM<short>::targets()
{
  exitFramework(1);
}

uint64_t LSTM<short>::inputs(uint64_t a1)
{
  return a1 + 64;
}

_QWORD **LSTM<short>::outputs(uint64_t a1)
{
  _QWORD **v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (_QWORD **)(a1 + 792);
  std::vector<VVector<float>>::resize((char **)(a1 + 792), (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3);
  v3 = *(uint64_t **)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 168) - (_QWORD)v3;
  if (v4)
  {
    v5 = v4 >> 3;
    v6 = *v2;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      v7 = *v3++;
      *v6++ = v7;
      --v5;
    }
    while (v5);
  }
  return v2;
}

void LSTM<short>::deltas()
{
  exitFramework(1);
}

uint64_t LSTM<short>::inputDeltas(uint64_t a1)
{
  return a1 + 816;
}

uint64_t LSTM<short>::weightsAreNaN()
{
  return 0;
}

uint64_t LSTM<short>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5;
  int v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  char v19[8];

  v5 = (int)a4;
  *(_QWORD *)v19 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v19[4], v19, a4, a5);
  if (v5 >= 1)
  {
    v9 = *((_DWORD *)this + 18);
    v10 = *(_QWORD *)this;
    v11 = (int *)(*(_QWORD *)this + v9);
    v12 = *(_QWORD *)this + *((_QWORD *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      v13 = 0;
    }
    v14 = v9;
    *(_DWORD *)(a1 + 736) = v13;
    if (v10 + v9 <= v12)
    {
      v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      v14 = v9;
    }
    else
    {
      v15 = 0;
    }
    *(_DWORD *)(a1 + 740) = v15;
    v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      v17 = 0;
    }
    *(_DWORD *)(a1 + 744) = v17;
  }
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)v19)
    exitFramework(3);
  VVector<short>::read(*(__int16 ***)(a1 + 2568), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52));
  VVector<short>::read(*(__int16 ***)(a1 + 2576), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52));
  VVector<short>::read(*(__int16 ***)(a1 + 2584), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52));
  MMatrix<short>::read(*(char **)(a1 + 2504), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 2512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 2520), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 2528), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 2536), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<short>::read(*(char **)(a1 + 2544), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<short>::read(*(char **)(a1 + 2552), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  return MMatrix<short>::read(*(char **)(a1 + 2560), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void LSTM<short>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  int __ptr;

  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  VVector<short>::write(*(__int16 ***)(a1 + 2568), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52));
  VVector<short>::write(*(__int16 ***)(a1 + 2576), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52));
  VVector<short>::write(*(__int16 ***)(a1 + 2584), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52));
  MMatrix<short>::write(*(__int16 ***)(a1 + 2504), __stream, (int *)a3, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
}

void sub_191599344()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 2512), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_19159935C()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 2520), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_191599374()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 2528), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 48));
}

void sub_19159938C()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 2536), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_1915993A8()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 2544), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_1915993C4()
{
  int v0;
  int *v1;
  FILE *v2;
  uint64_t v3;

  MMatrix<short>::write(*(__int16 ***)(v3 + 2552), v2, v1, v0, *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 52));
}

void sub_1915993E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int *v19;
  FILE *v20;
  uint64_t v21;

  MMatrix<short>::write(*(__int16 ***)(v21 + 2560), v20, v19, v18, *(_DWORD *)(v21 + 52), *(_DWORD *)(v21 + 52));
}

_QWORD **LSTM<short>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD **v5;
  _QWORD **result;
  uint64_t v7;
  __int16 *v8;
  __int16 *v9;
  _WORD *v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 *v15;
  __int16 *v16;
  _WORD *v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 *v22;
  __int16 *v23;
  _WORD *v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  uint64_t v29;
  __int16 *v30;
  __int16 *v31;
  _WORD *v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 *v37;
  __int16 *v38;
  _WORD *v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 *v44;
  __int16 *v45;
  _WORD *v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 *v51;
  __int16 *v52;
  _WORD *v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 *v58;
  __int16 *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  __int16 *v65;
  __int16 *v66;
  _WORD *v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 *v72;
  __int16 *v73;
  _WORD *v74;
  uint64_t v75;
  __int16 v76;
  __int16 v77;
  __int16 v78;
  __int16 *v79;
  __int16 *v80;
  _WORD *v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  result = 0;
LABEL_6:
  v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 >= 1)
  {
    v8 = (__int16 *)*result[321];
    v9 = (__int16 *)*v5[321];
    v10 = **(_WORD ***)(a1 + 2568);
    v11 = *(unsigned int *)(a1 + 52);
    do
    {
      v13 = *v8++;
      v12 = v13;
      v14 = *v9++;
      *v10++ = v12 - v14;
      --v11;
    }
    while (v11);
    v15 = (__int16 *)*result[322];
    v16 = (__int16 *)*v5[322];
    v17 = **(_WORD ***)(a1 + 2576);
    v18 = v7;
    do
    {
      v20 = *v15++;
      v19 = v20;
      v21 = *v16++;
      *v17++ = v19 - v21;
      --v18;
    }
    while (v18);
    v22 = (__int16 *)*result[323];
    v23 = (__int16 *)*v5[323];
    v24 = **(_WORD ***)(a1 + 2584);
    v25 = v7;
    do
    {
      v27 = *v22++;
      v26 = v27;
      v28 = *v23++;
      *v24++ = v26 - v28;
      --v25;
    }
    while (v25);
  }
  v29 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v29 >= 1)
  {
    v30 = (__int16 *)*result[313];
    v31 = (__int16 *)*v5[313];
    v32 = **(_WORD ***)(a1 + 2504);
    v33 = (*(_DWORD *)(a1 + 48) * v7);
    do
    {
      v35 = *v30++;
      v34 = v35;
      v36 = *v31++;
      *v32++ = v34 - v36;
      --v33;
    }
    while (v33);
    v37 = (__int16 *)*result[315];
    v38 = (__int16 *)*v5[315];
    v39 = **(_WORD ***)(a1 + 2520);
    v40 = v29;
    do
    {
      v42 = *v37++;
      v41 = v42;
      v43 = *v38++;
      *v39++ = v41 - v43;
      --v40;
    }
    while (v40);
    v44 = (__int16 *)*result[314];
    v45 = (__int16 *)*v5[314];
    v46 = **(_WORD ***)(a1 + 2512);
    v47 = v29;
    do
    {
      v49 = *v44++;
      v48 = v49;
      v50 = *v45++;
      *v46++ = v48 - v50;
      --v47;
    }
    while (v47);
    v51 = (__int16 *)*result[316];
    v52 = (__int16 *)*v5[316];
    v53 = **(_WORD ***)(a1 + 2528);
    do
    {
      v55 = *v51++;
      v54 = v55;
      v56 = *v52++;
      *v53++ = v54 - v56;
      --v29;
    }
    while (v29);
  }
  if ((_DWORD)v7)
  {
    v57 = (v7 * v7);
    v58 = (__int16 *)*result[317];
    v59 = (__int16 *)*v5[317];
    v60 = **(_WORD ***)(a1 + 2536);
    v61 = v57;
    do
    {
      v63 = *v58++;
      v62 = v63;
      v64 = *v59++;
      *v60++ = v62 - v64;
      --v61;
    }
    while (v61);
    v65 = (__int16 *)*result[319];
    v66 = (__int16 *)*v5[319];
    v67 = **(_WORD ***)(a1 + 2552);
    v68 = v57;
    do
    {
      v70 = *v65++;
      v69 = v70;
      v71 = *v66++;
      *v67++ = v69 - v71;
      --v68;
    }
    while (v68);
    v72 = (__int16 *)*result[318];
    v73 = (__int16 *)*v5[318];
    v74 = **(_WORD ***)(a1 + 2544);
    v75 = v57;
    do
    {
      v77 = *v72++;
      v76 = v77;
      v78 = *v73++;
      *v74++ = v76 - v78;
      --v75;
    }
    while (v75);
    v79 = (__int16 *)*result[320];
    v80 = (__int16 *)*v5[320];
    v81 = **(_WORD ***)(a1 + 2560);
    do
    {
      v83 = *v79++;
      v82 = v83;
      v84 = *v80++;
      *v81++ = v82 - v84;
      --v57;
    }
    while (v57);
  }
  return result;
}

void LSTM<short>::compareModels(uint64_t a1, void *lpsrc, _QWORD **a3)
{
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  void *__p;

  v3 = a3;
  if (lpsrc)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
LABEL_3:
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  v6 = *(unsigned int *)(a1 + 52);
  if ((int)v6 <= 0)
  {
    v11 = __p;
LABEL_15:
    v12 = *v11 | 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    do
    {
      while (!v8)
      {
        v8 = 0;
        if (++v7 == v6)
        {
          v11 = __p;
          goto LABEL_16;
        }
      }
      v9 = *(unsigned __int16 *)(*v3[321] + 2 * v7);
      v10 = *(unsigned __int16 *)(*v5[321] + 2 * v7);
      v8 = v9 == v10;
      ++v7;
    }
    while (v7 != v6);
    v11 = __p;
    if (v9 == v10)
      goto LABEL_15;
LABEL_16:
    v12 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  *v11 = v12;
  if ((int)v6 < 1)
  {
LABEL_25:
    v17 = v12 | 2;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    do
    {
      while (!v14)
      {
        v14 = 0;
        if (++v13 == v6)
          goto LABEL_26;
      }
      v15 = *(unsigned __int16 *)(*v3[322] + 2 * v13);
      v16 = *(unsigned __int16 *)(*v5[322] + 2 * v13);
      v14 = v15 == v16;
      ++v13;
    }
    while (v13 != v6);
    if (v15 == v16)
      goto LABEL_25;
LABEL_26:
    v17 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *v11 = v17;
  if ((int)v6 < 1)
  {
LABEL_35:
    v22 = v17 | 4;
  }
  else
  {
    v18 = 0;
    v19 = 1;
    do
    {
      while (!v19)
      {
        v19 = 0;
        if (++v18 == v6)
          goto LABEL_36;
      }
      v20 = *(unsigned __int16 *)(*v3[323] + 2 * v18);
      v21 = *(unsigned __int16 *)(*v5[323] + 2 * v18);
      v19 = v20 == v21;
      ++v18;
    }
    while (v18 != v6);
    if (v20 == v21)
      goto LABEL_35;
LABEL_36:
    v22 = v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *v11 = v22;
  v23 = (*(_DWORD *)(a1 + 48) * v6);
  if ((int)v23 < 1)
  {
LABEL_45:
    v28 = v22 | 1;
  }
  else
  {
    v24 = 0;
    v25 = 1;
    do
    {
      while (!v25)
      {
        v25 = 0;
        if (++v24 == v23)
          goto LABEL_46;
      }
      v26 = *(unsigned __int16 *)(*v3[313] + 2 * v24);
      v27 = *(unsigned __int16 *)(*v5[313] + 2 * v24);
      v25 = v26 == v27;
      ++v24;
    }
    while (v24 != v23);
    if (v26 == v27)
      goto LABEL_45;
LABEL_46:
    v28 = v22 & 0xFFFFFFFFFFFFFFFELL;
  }
  *v11 = v28;
  if ((int)v23 < 1)
  {
LABEL_55:
    v33 = v28 | 2;
  }
  else
  {
    v29 = 0;
    v30 = 1;
    do
    {
      while (!v30)
      {
        v30 = 0;
        if (++v29 == v23)
          goto LABEL_56;
      }
      v31 = *(unsigned __int16 *)(*v3[315] + 2 * v29);
      v32 = *(unsigned __int16 *)(*v5[315] + 2 * v29);
      v30 = v31 == v32;
      ++v29;
    }
    while (v29 != v23);
    if (v31 == v32)
      goto LABEL_55;
LABEL_56:
    v33 = v28 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *v11 = v33;
  if ((int)v23 < 1)
  {
LABEL_65:
    v38 = v33 | 4;
  }
  else
  {
    v34 = 0;
    v35 = 1;
    do
    {
      while (!v35)
      {
        v35 = 0;
        if (++v34 == v23)
          goto LABEL_66;
      }
      v36 = *(unsigned __int16 *)(*v3[314] + 2 * v34);
      v37 = *(unsigned __int16 *)(*v5[314] + 2 * v34);
      v35 = v36 == v37;
      ++v34;
    }
    while (v34 != v23);
    if (v36 == v37)
      goto LABEL_65;
LABEL_66:
    v38 = v33 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *v11 = v38;
  if ((int)v23 < 1)
  {
LABEL_75:
    v43 = v38 | 8;
  }
  else
  {
    v39 = 0;
    v40 = 1;
    do
    {
      while (!v40)
      {
        v40 = 0;
        if (++v39 == v23)
          goto LABEL_76;
      }
      v41 = *(unsigned __int16 *)(*v3[316] + 2 * v39);
      v42 = *(unsigned __int16 *)(*v5[316] + 2 * v39);
      v40 = v41 == v42;
      ++v39;
    }
    while (v39 != v23);
    if (v41 == v42)
      goto LABEL_75;
LABEL_76:
    v43 = v38 & 0xFFFFFFFFFFFFFFF7;
  }
  *v11 = v43;
  v44 = (v6 * v6);
  if ((_DWORD)v6)
  {
    v45 = 0;
    v46 = 1;
    do
    {
      while (!v46)
      {
        v46 = 0;
        if (++v45 == v44)
          goto LABEL_86;
      }
      v47 = *(unsigned __int16 *)(*v3[317] + 2 * v45);
      v48 = *(unsigned __int16 *)(*v5[317] + 2 * v45);
      v46 = v47 == v48;
      ++v45;
    }
    while (v45 != v44);
    if (v47 == v48)
      goto LABEL_85;
LABEL_86:
    v49 = v43 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
LABEL_85:
    v49 = v43 | 1;
  }
  *v11 = v49;
  if ((_DWORD)v6)
  {
    v50 = 0;
    v51 = 1;
    do
    {
      while (!v51)
      {
        v51 = 0;
        if (++v50 == v44)
          goto LABEL_96;
      }
      v52 = *(unsigned __int16 *)(*v3[319] + 2 * v50);
      v53 = *(unsigned __int16 *)(*v5[319] + 2 * v50);
      v51 = v52 == v53;
      ++v50;
    }
    while (v50 != v44);
    if (v52 == v53)
      goto LABEL_95;
LABEL_96:
    v54 = v49 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
LABEL_95:
    v54 = v49 | 2;
  }
  *v11 = v54;
  if ((_DWORD)v6)
  {
    v55 = 0;
    v56 = 1;
    do
    {
      v56 = v56 && *(unsigned __int16 *)(*v3[318] + 2 * v55) == *(unsigned __int16 *)(*v5[318] + 2 * v55);
      ++v55;
    }
    while (v55 != v44);
  }
  operator delete(v11);
}

float32x4_t **LSTM<short>::addGradient(uint64_t a1, void *lpsrc)
{
  float32x4_t ***v3;
  float32x4_t **result;
  int v5;
  uint64_t v6;
  _WORD *v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  _WORD *v11;
  __int16 *v12;
  uint64_t v13;
  __int16 v14;
  _WORD *v15;
  __int16 *v16;
  uint64_t v17;
  __int16 v18;
  _WORD *v19;
  __int16 *v20;
  __int16 v21;
  uint64_t v22;
  _WORD *v23;
  __int16 *v24;
  uint64_t v25;
  __int16 v26;
  _WORD *v27;
  __int16 *v28;
  uint64_t v29;
  __int16 v30;
  _WORD *v31;
  __int16 *v32;
  uint64_t v33;
  __int16 v34;
  _WORD *v35;
  __int16 *v36;
  __int16 v37;

  if (lpsrc)
  else
    v3 = 0;
  VVector<short>::add<short>(*(float32x4_t ***)(a1 + 2568), v3[321], *(_DWORD *)(a1 + 52));
  VVector<short>::add<short>(*(float32x4_t ***)(a1 + 2576), v3[322], *(_DWORD *)(a1 + 52));
  result = VVector<short>::add<short>(*(float32x4_t ***)(a1 + 2584), v3[323], *(_DWORD *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 52);
  v6 = (*(_DWORD *)(a1 + 48) * v5);
  if ((int)v6 >= 1)
  {
    v7 = **(_WORD ***)(a1 + 2504);
    v8 = (__int16 *)*v3[313];
    v9 = (*(_DWORD *)(a1 + 48) * v5);
    do
    {
      v10 = *v8++;
      *v7++ += v10;
      --v9;
    }
    while (v9);
    v11 = **(_WORD ***)(a1 + 2512);
    v12 = (__int16 *)*v3[314];
    v13 = v6;
    do
    {
      v14 = *v12++;
      *v11++ += v14;
      --v13;
    }
    while (v13);
    v15 = **(_WORD ***)(a1 + 2520);
    v16 = (__int16 *)*v3[315];
    v17 = v6;
    do
    {
      v18 = *v16++;
      *v15++ += v18;
      --v17;
    }
    while (v17);
    v19 = **(_WORD ***)(a1 + 2528);
    v20 = (__int16 *)*v3[316];
    do
    {
      v21 = *v20++;
      *v19++ += v21;
      --v6;
    }
    while (v6);
  }
  if (v5)
  {
    v22 = (v5 * v5);
    v23 = **(_WORD ***)(a1 + 2536);
    v24 = (__int16 *)*v3[317];
    v25 = v22;
    do
    {
      v26 = *v24++;
      *v23++ += v26;
      --v25;
    }
    while (v25);
    v27 = **(_WORD ***)(a1 + 2544);
    v28 = (__int16 *)*v3[318];
    v29 = v22;
    do
    {
      v30 = *v28++;
      *v27++ += v30;
      --v29;
    }
    while (v29);
    v31 = **(_WORD ***)(a1 + 2552);
    v32 = (__int16 *)*v3[319];
    v33 = v22;
    do
    {
      v34 = *v32++;
      *v31++ += v34;
      --v33;
    }
    while (v33);
    v35 = **(_WORD ***)(a1 + 2560);
    v36 = (__int16 *)*v3[320];
    do
    {
      v37 = *v36++;
      *v35++ += v37;
      --v22;
    }
    while (v22);
  }
  return result;
}

void LSTM<short>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  exitFramework(23);
}

uint64_t LSTM<short>::clipModel(uint64_t result, float a2)
{
  float v2;
  uint64_t v3;
  __int16 *v4;
  uint64_t v5;
  float v6;
  float v7;
  __int16 *v8;
  uint64_t v9;
  float v10;
  float v11;
  __int16 *v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  float v19;
  float v20;
  __int16 *v21;
  uint64_t v22;
  float v23;
  float v24;
  __int16 *v25;
  uint64_t v26;
  float v27;
  float v28;
  __int16 *v29;
  float v30;
  float v31;
  uint64_t v32;
  __int16 *v33;
  uint64_t v34;
  float v35;
  float v36;
  __int16 *v37;
  uint64_t v38;
  float v39;
  float v40;
  __int16 *v41;
  uint64_t v42;
  float v43;
  float v44;
  __int16 *v45;
  float v46;
  float v47;

  v2 = -a2;
  v3 = *(unsigned int *)(result + 52);
  if ((int)v3 >= 1)
  {
    v4 = **(__int16 ***)(result + 2568);
    v5 = *(unsigned int *)(result + 52);
    do
    {
      v6 = (float)*v4;
      v7 = -a2;
      if (v6 < v2 || (v7 = a2, v6 > a2))
        *v4 = (int)v7;
      ++v4;
      --v5;
    }
    while (v5);
    v8 = **(__int16 ***)(result + 2576);
    v9 = v3;
    do
    {
      v10 = (float)*v8;
      v11 = -a2;
      if (v10 < v2 || (v11 = a2, v10 > a2))
        *v8 = (int)v11;
      ++v8;
      --v9;
    }
    while (v9);
    v12 = **(__int16 ***)(result + 2584);
    v13 = v3;
    do
    {
      v14 = (float)*v12;
      v15 = -a2;
      if (v14 < v2 || (v15 = a2, v14 > a2))
        *v12 = (int)v15;
      ++v12;
      --v13;
    }
    while (v13);
  }
  v16 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v16 >= 1)
  {
    v17 = **(__int16 ***)(result + 2504);
    v18 = (*(_DWORD *)(result + 48) * v3);
    do
    {
      v19 = (float)*v17;
      v20 = -a2;
      if (v19 < v2 || (v20 = a2, v19 > a2))
        *v17 = (int)v20;
      ++v17;
      --v18;
    }
    while (v18);
    v21 = **(__int16 ***)(result + 2512);
    v22 = v16;
    do
    {
      v23 = (float)*v21;
      v24 = -a2;
      if (v23 < v2 || (v24 = a2, v23 > a2))
        *v21 = (int)v24;
      ++v21;
      --v22;
    }
    while (v22);
    v25 = **(__int16 ***)(result + 2520);
    v26 = v16;
    do
    {
      v27 = (float)*v25;
      v28 = -a2;
      if (v27 < v2 || (v28 = a2, v27 > a2))
        *v25 = (int)v28;
      ++v25;
      --v26;
    }
    while (v26);
    v29 = **(__int16 ***)(result + 2528);
    do
    {
      v30 = (float)*v29;
      v31 = -a2;
      if (v30 < v2 || (v31 = a2, v30 > a2))
        *v29 = (int)v31;
      ++v29;
      --v16;
    }
    while (v16);
  }
  if ((_DWORD)v3)
  {
    v32 = (v3 * v3);
    v33 = **(__int16 ***)(result + 2536);
    v34 = v32;
    do
    {
      v35 = (float)*v33;
      v36 = -a2;
      if (v35 < v2 || (v36 = a2, v35 > a2))
        *v33 = (int)v36;
      ++v33;
      --v34;
    }
    while (v34);
    v37 = **(__int16 ***)(result + 2544);
    v38 = v32;
    do
    {
      v39 = (float)*v37;
      v40 = -a2;
      if (v39 < v2 || (v40 = a2, v39 > a2))
        *v37 = (int)v40;
      ++v37;
      --v38;
    }
    while (v38);
    v41 = **(__int16 ***)(result + 2552);
    v42 = v32;
    do
    {
      v43 = (float)*v41;
      v44 = -a2;
      if (v43 < v2 || (v44 = a2, v43 > a2))
        *v41 = (int)v44;
      ++v41;
      --v42;
    }
    while (v42);
    v45 = **(__int16 ***)(result + 2560);
    do
    {
      v46 = (float)*v45;
      v47 = -a2;
      if (v46 < v2 || (v47 = a2, v46 > a2))
        *v45 = (int)v47;
      ++v45;
      --v32;
    }
    while (v32);
  }
  return result;
}

uint64_t LSTM<short>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2;
  __int16 *v3;
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  __int16 *v22;
  uint64_t v23;
  __int16 *v24;

  v2 = *(unsigned int *)(result + 52);
  if ((int)v2 >= 1)
  {
    v3 = **(__int16 ***)(result + 2568);
    v4 = *(unsigned int *)(result + 52);
    do
    {
      *v3 = (int)(float)((float)*v3 * a2);
      ++v3;
      --v4;
    }
    while (v4);
    v5 = **(__int16 ***)(result + 2576);
    v6 = v2;
    do
    {
      *v5 = (int)(float)((float)*v5 * a2);
      ++v5;
      --v6;
    }
    while (v6);
    v7 = **(__int16 ***)(result + 2584);
    v8 = v2;
    do
    {
      *v7 = (int)(float)((float)*v7 * a2);
      ++v7;
      --v8;
    }
    while (v8);
  }
  v9 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v9 >= 1)
  {
    v10 = **(__int16 ***)(result + 2504);
    v11 = (*(_DWORD *)(result + 48) * v2);
    do
    {
      *v10 = (int)(float)((float)*v10 * a2);
      ++v10;
      --v11;
    }
    while (v11);
    v12 = **(__int16 ***)(result + 2512);
    v13 = v9;
    do
    {
      *v12 = (int)(float)((float)*v12 * a2);
      ++v12;
      --v13;
    }
    while (v13);
    v14 = **(__int16 ***)(result + 2520);
    v15 = v9;
    do
    {
      *v14 = (int)(float)((float)*v14 * a2);
      ++v14;
      --v15;
    }
    while (v15);
    v16 = **(__int16 ***)(result + 2528);
    do
    {
      *v16 = (int)(float)((float)*v16 * a2);
      ++v16;
      --v9;
    }
    while (v9);
  }
  if ((_DWORD)v2)
  {
    v17 = (v2 * v2);
    v18 = **(__int16 ***)(result + 2536);
    v19 = v17;
    do
    {
      *v18 = (int)(float)((float)*v18 * a2);
      ++v18;
      --v19;
    }
    while (v19);
    v20 = **(__int16 ***)(result + 2544);
    v21 = v17;
    do
    {
      *v20 = (int)(float)((float)*v20 * a2);
      ++v20;
      --v21;
    }
    while (v21);
    v22 = **(__int16 ***)(result + 2552);
    v23 = v17;
    do
    {
      *v22 = (int)(float)((float)*v22 * a2);
      ++v22;
      --v23;
    }
    while (v23);
    v24 = **(__int16 ***)(result + 2560);
    do
    {
      *v24 = (int)(float)((float)*v24 * a2);
      ++v24;
      --v17;
    }
    while (v17);
  }
  return result;
}

void LSTM<short>::allocInitialState(uint64_t a1, void **a2)
{
  int v4;
  _QWORD *v5;
  int v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  int v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD *)operator new();
      VVector<float>::VVector(v5, *(_DWORD *)(a1 + 52), 0);
      v6 = *(_DWORD *)(a1 + 52);
      v8 = (char *)a2[1];
      v7 = (char *)a2[2];
      if (v8 >= v7)
      {
        v10 = (v8 - (_BYTE *)*a2) >> 4;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60)
          goto LABEL_37;
        v12 = v7 - (_BYTE *)*a2;
        if (v12 >> 3 > v11)
          v11 = v12 >> 3;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
        else
          v14 = 0;
        v15 = v13 + 16 * v10;
        *(_DWORD *)v15 = v6;
        *(_QWORD *)(v15 + 8) = v5;
        v17 = (char *)*a2;
        v16 = (char *)a2[1];
        v18 = (char *)v15;
        if (v16 != *a2)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
            v18 -= 16;
            v16 -= 16;
          }
          while (v16 != v17);
          v16 = (char *)*a2;
        }
        v9 = (void *)(v15 + 16);
        *a2 = v18;
        a2[1] = (void *)(v15 + 16);
        a2[2] = (void *)(v13 + 16 * v14);
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v8 = v6;
        *((_QWORD *)v8 + 1) = v5;
        v9 = v8 + 16;
      }
      a2[1] = v9;
      v19 = (_QWORD *)operator new();
      VVector<float>::VVector(v19, *(_DWORD *)(a1 + 52), 0);
      v20 = *(_DWORD *)(a1 + 52);
      v22 = (char *)a2[1];
      v21 = (char *)a2[2];
      if (v22 >= v21)
      {
        v24 = (v22 - (_BYTE *)*a2) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
LABEL_37:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v26 = v21 - (_BYTE *)*a2;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v27);
        else
          v28 = 0;
        v29 = v27 + 16 * v24;
        *(_DWORD *)v29 = v20;
        *(_QWORD *)(v29 + 8) = v19;
        v31 = (char *)*a2;
        v30 = (char *)a2[1];
        v32 = (char *)v29;
        if (v30 != *a2)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
            v32 -= 16;
            v30 -= 16;
          }
          while (v30 != v31);
          v30 = (char *)*a2;
        }
        v23 = (void *)(v29 + 16);
        *a2 = v32;
        a2[1] = (void *)(v29 + 16);
        a2[2] = (void *)(v27 + 16 * v28);
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_DWORD *)v22 = v20;
        *((_QWORD *)v22 + 1) = v19;
        v23 = v22 + 16;
      }
      a2[1] = v23;
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_19159A504(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

int *LSTM<short>::saveState(int *result, uint64_t *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = a3;
    v9 = *a4;
    do
    {
      v10 = v6[13];
      v11 = v10 * v7;
      v12 = *(_QWORD *)(*((_QWORD *)v6 + 20) + 8 * v8);
      v13 = *a2;
      *(_DWORD *)(v13 + 16 * v9) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v12 + 4 * (int)v10 * v7), 4 * v10);
      v14 = *a4 + 1;
      *a4 = v14;
      v15 = v6[13];
      v16 = *a2;
      *(_DWORD *)(v16 + 16 * v14) = v15;
      result = (int *)memmove(**(void ***)(v16 + 16 * *a4 + 8), (const void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + 8 * v8) + 4 * v11), 4 * v15);
      v9 = *a4 + 1;
      *a4 = v9;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *LSTM<short>::restoreState(int *result, _QWORD *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = a3;
    do
    {
      v9 = v6[13] * v7;
      v10 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 20) + 8 * v8) + 4 * v9);
      v11 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + 8 * v8) + 4 * v9);
      v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      v13 = *a4;
      *a4 = v13 + 1;
      result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void LSTM<short>::clearState(uint64_t a1, _QWORD *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v6 = 0;
    v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      v8 = *a3 + 1;
      *a3 = v8;
      bzero(**(void ***)(*a2 + 16 * v8 + 8), 4 * *(int *)(*a2 + 16 * v8));
      v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void LSTM<short>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v19;

  if (*(_BYTE *)(a1 + 2692))
  {
    v2 = *(_QWORD *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v3 = *(_QWORD *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v4 = *(_QWORD *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v5 = *(_QWORD *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 40))(v5, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v6 = *(_QWORD *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v7 = *(_QWORD *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v8 = *(_QWORD *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v9 = *(_QWORD *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 40))(v9, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 16))(*(_QWORD *)(a1 + 1552));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1560) + 16))(*(_QWORD *)(a1 + 1560));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1568) + 16))(*(_QWORD *)(a1 + 1568));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1576) + 16))(*(_QWORD *)(a1 + 1576));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 16))(*(_QWORD *)(a1 + 1584));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1592) + 16))(*(_QWORD *)(a1 + 1592));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1600) + 16))(*(_QWORD *)(a1 + 1600));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1608) + 16))(*(_QWORD *)(a1 + 1608));
    v10 = *(_QWORD *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 40))(v10, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v11 = *(_QWORD *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v12 = *(_QWORD *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 40))(v12, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v13 = *(_QWORD *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v14 = *(_QWORD *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 40))(v14, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v15 = *(_QWORD *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 40))(v15, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v16 = *(_QWORD *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 40))(v16, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    v17 = *(_QWORD *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v19 < 0)
      operator delete(__p[0]);
  }
}

void sub_19159ABA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *LSTM<short>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  double v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *result;
  uint64_t v30;
  char *v31;

  v4 = **(_QWORD **)(a1 + 2504);
  v5 = *(_DWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v6;
  v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v5, v6)));
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v9 = v4;
    v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v6;
    *(_DWORD *)(v9 + 12) = v5;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = **(_QWORD **)(a1 + 2512);
  if ((unint64_t)v10 >= *(_QWORD *)(a2 + 16))
  {
    v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v10 = v11;
    v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v6;
    *((_DWORD *)v10 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v12;
  v13 = **(_QWORD **)(a1 + 2528);
  if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
  {
    v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(_QWORD *)v12 = v13;
    v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v6;
    *((_DWORD *)v12 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v14;
  v15 = **(_QWORD **)(a1 + 2520);
  if ((unint64_t)v14 >= *(_QWORD *)(a2 + 16))
  {
    v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v8);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(_QWORD *)v14 = v15;
    v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v6;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v16;
  v17 = **(_QWORD **)(a1 + 2536);
  v18 = __PAIR64__(v6, LODWORD(v7));
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 16))
  {
    v19 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, COERCE_DOUBLE(__PAIR64__(v6, LODWORD(v7))));
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v16 = v17;
    v19 = v16 + 16;
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v19;
  v20 = **(_QWORD **)(a1 + 2544);
  if ((unint64_t)v19 >= *(_QWORD *)(a2 + 16))
  {
    v21 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v20, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v19 = v20;
    v21 = v19 + 16;
    *((_DWORD *)v19 + 2) = v6;
    *((_DWORD *)v19 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v21;
  v22 = **(_QWORD **)(a1 + 2560);
  if ((unint64_t)v21 >= *(_QWORD *)(a2 + 16))
  {
    v23 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v22, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(_QWORD *)v21 = v22;
    v23 = v21 + 16;
    *((_DWORD *)v21 + 2) = v6;
    *((_DWORD *)v21 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v24 = **(_QWORD **)(a1 + 2552);
  if ((unint64_t)v23 >= *(_QWORD *)(a2 + 16))
  {
    v25 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v24, *(double *)&v18);
    v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(_QWORD *)v23 = v24;
    v25 = v23 + 16;
    *((_DWORD *)v23 + 2) = v6;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v25;
  v26 = **(_QWORD **)(a1 + 2568);
  HIDWORD(v7) = 0;
  if ((unint64_t)v25 >= *(_QWORD *)(a2 + 16))
  {
    v27 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v26, v7);
    v6 = *(_DWORD *)(a1 + 52);
    *(_QWORD *)&v7 = v6;
  }
  else
  {
    *(_QWORD *)v25 = v26;
    v27 = v25 + 16;
    *((_DWORD *)v25 + 2) = v6;
    *((_DWORD *)v25 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v27;
  v28 = **(_QWORD **)(a1 + 2576);
  if ((unint64_t)v27 >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v28, v7);
    v6 = *(_DWORD *)(a1 + 52);
    *(_QWORD *)&v7 = v6;
  }
  else
  {
    *(_QWORD *)v27 = v28;
    result = v27 + 16;
    *((_DWORD *)v27 + 2) = v6;
    *((_DWORD *)v27 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = result;
  v30 = **(_QWORD **)(a1 + 2584);
  if ((unint64_t)result >= *(_QWORD *)(a2 + 16))
  {
    result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v30, v7);
    v31 = result;
  }
  else
  {
    *(_QWORD *)result = v30;
    v31 = result + 16;
    *((_DWORD *)result + 2) = v6;
    *((_DWORD *)result + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v31;
  return result;
}

__n128 LSTM<short>::setWeightMatrices(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  v2 = *(_OWORD **)(a2 + 8);
  v3 = *((_QWORD *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(_QWORD *)(a2 + 8) = v2;
  *v2 = *(v2 - 1);
  a1[30] = *(_QWORD *)v2;
  a1[314] = a1 + 30;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4 - 16;
  *v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(_QWORD *)v2;
  a1[316] = a1 + 32;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5 - 16;
  *v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(_QWORD *)v2;
  v6 = a1 + 31;
  v6[284] = v6;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7 - 16;
  *v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(_QWORD *)v2;
  v6[286] = v6 + 2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v8 - 16;
  *v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(_QWORD *)v2;
  v6[287] = v6 + 3;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9 - 16;
  *v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(_QWORD *)v2;
  v6[289] = v6 + 5;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10 - 16;
  *v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(_QWORD *)v2;
  v6[288] = v6 + 4;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v11 - 16;
  *v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(_QWORD *)v2;
  v6[290] = v6 + 6;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v12 - 16;
  *v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(_QWORD *)v2;
  v6[291] = v6 + 7;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v13 - 16;
  result = *(__n128 *)(v13 - 32);
  *v2 = result;
  v6[8] = *(_QWORD *)v2;
  v6[292] = v6 + 8;
  *(_QWORD *)(a2 + 8) -= 16;
  return result;
}

uint64_t LSTM<short>::setSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t LSTM<short>::unsetSpecialBidir(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void LSTM<short>::allocAllBuffers(uint64_t a1)
{
  void *__p;
  char v3;

  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from allocAll");
  LSTM<short>::init(a1);
  if (v3 < 0)
    operator delete(__p);
}

void sub_19159B0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<short>::cleanupAllBuffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[329];
  v3 = a1[328];
  if (v2 == v3)
  {
    v3 = a1[329];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x19401CD78](v5, 0x1000C8052888210);
        v2 = a1[329];
        v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[332];
  v7 = a1[331];
  if (v6 == v7)
  {
    v7 = a1[332];
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x19401CD78](v9, 0x1000C80BDFB0063);
        v6 = a1[332];
        v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    v3 = a1[328];
  }
  a1[329] = v3;
  a1[332] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 123);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 153);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 138);
  return SparseMatrix<float>::cleanupAllBuffers(a1 + 168);
}

uint64_t LSTM<short>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t LSTM<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t LSTM<short>::update(uint64_t result, float a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  __int16 *v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  __int16 *v11;
  float *v12;
  uint64_t v13;
  float v14;
  __int16 *v15;
  float *v16;
  uint64_t v17;
  float v18;
  __int16 *v19;
  float *v20;
  float v21;
  uint64_t v22;
  __int16 *v23;
  float *v24;
  float v25;
  uint64_t v26;
  float v27;
  __int16 *v28;
  float *v29;
  uint64_t v30;
  float v31;
  __int16 *v32;
  float *v33;
  uint64_t v34;
  float v35;
  __int16 *v36;
  float *v37;
  float v38;
  uint64_t v39;
  float *v40;
  _WORD *v41;
  uint64_t v42;
  float v43;
  float *v44;
  _WORD *v45;
  uint64_t v46;
  float v47;
  float *v48;
  _WORD *v49;
  float v50;

  v2 = result;
  v3 = (int)a2;
  v4 = *(_DWORD *)(result + 52);
  if (*(int *)(result + 56) < 1)
  {
    v5 = (v4 * *(_DWORD *)(result + 48));
    if ((int)v5 >= 1)
    {
      v6 = *(__int16 **)(result + 232);
      v7 = *(float **)(result + 1464);
      v8 = (v4 * *(_DWORD *)(result + 48));
      v9 = (float)v3;
      do
      {
        v10 = *v7++;
        *v6 = (int)(float)((float)*v6 + (float)(v10 * v9));
        ++v6;
        --v8;
      }
      while (v8);
      v11 = *(__int16 **)(result + 248);
      v12 = *(float **)(result + 1480);
      v13 = v5;
      do
      {
        v14 = *v12++;
        *v11 = (int)(float)((float)*v11 + (float)(v14 * v9));
        ++v11;
        --v13;
      }
      while (v13);
      v15 = *(__int16 **)(result + 240);
      v16 = *(float **)(result + 1472);
      v17 = v5;
      do
      {
        v18 = *v16++;
        *v15 = (int)(float)((float)*v15 + (float)(v18 * v9));
        ++v15;
        --v17;
      }
      while (v17);
      v19 = *(__int16 **)(result + 256);
      v20 = *(float **)(result + 1488);
      do
      {
        v21 = *v20++;
        *v19 = (int)(float)((float)*v19 + (float)(v21 * v9));
        ++v19;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    SparseMatrix<float>::add<short>(result + 984, v4, (float)v3);
    SparseMatrix<float>::add<short>(v2 + 1224, *(_DWORD *)(v2 + 52), (float)v3);
    SparseMatrix<float>::add<short>(v2 + 1104, *(_DWORD *)(v2 + 52), (float)v3);
    result = SparseMatrix<float>::add<short>(v2 + 1344, *(_DWORD *)(v2 + 52), (float)v3);
  }
  if (v4)
  {
    v22 = (v4 * v4);
    v23 = *(__int16 **)(v2 + 264);
    v24 = *(float **)(v2 + 1496);
    v25 = (float)v3;
    v26 = v22;
    do
    {
      v27 = *v24++;
      *v23 = (int)(float)((float)*v23 + (float)(v27 * v25));
      ++v23;
      --v26;
    }
    while (v26);
    v28 = *(__int16 **)(v2 + 280);
    v29 = *(float **)(v2 + 1512);
    v30 = (v4 * v4);
    do
    {
      v31 = *v29++;
      *v28 = (int)(float)((float)*v28 + (float)(v31 * v25));
      ++v28;
      --v30;
    }
    while (v30);
    v32 = *(__int16 **)(v2 + 272);
    v33 = *(float **)(v2 + 1504);
    v34 = (v4 * v4);
    do
    {
      v35 = *v33++;
      *v32 = (int)(float)((float)*v32 + (float)(v35 * v25));
      ++v32;
      --v34;
    }
    while (v34);
    v36 = *(__int16 **)(v2 + 288);
    v37 = *(float **)(v2 + 1520);
    do
    {
      v38 = *v37++;
      *v36 = (int)(float)((float)*v36 + (float)(v38 * v25));
      ++v36;
      --v22;
    }
    while (v22);
  }
  else
  {
    v25 = (float)v3;
  }
  v39 = *(unsigned int *)(v2 + 52);
  if ((int)v39 >= 1)
  {
    v40 = *(float **)(v2 + 1528);
    v41 = *(_WORD **)(v2 + 296);
    v42 = *(unsigned int *)(v2 + 52);
    do
    {
      v43 = *v40++;
      *v41++ += (int)(float)(v43 * v25);
      --v42;
    }
    while (v42);
    v44 = *(float **)(v2 + 1544);
    v45 = *(_WORD **)(v2 + 312);
    v46 = v39;
    do
    {
      v47 = *v44++;
      *v45++ += (int)(float)(v47 * v25);
      --v46;
    }
    while (v46);
    v48 = *(float **)(v2 + 1536);
    v49 = *(_WORD **)(v2 + 304);
    do
    {
      v50 = *v48++;
      *v49++ += (int)(float)(v50 * v25);
      --v39;
    }
    while (v39);
  }
  return result;
}

void LSTM<short>::backward(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void **v6;
  void **v7;
  int v8;
  void **v9;
  void **v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t **v23;
  uint64_t v24;
  float *v25;
  __int16 *v26;
  float32x4_t *v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  float *v35;
  __int16 *v36;
  float *v37;
  uint64_t v38;
  float v39;
  float v40;
  int v41;
  float *v42;
  __int16 *v43;
  uint64_t v44;
  float v45;
  float v46;
  int v47;
  float v48;
  uint64_t v50;
  size_t v51;
  float32x4_t **v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  void **v80;
  void **v81;
  void **v82;
  int v84;
  void **v85;
  _BOOL4 v86;
  _BOOL4 v87;
  float32x4_t **v88;
  int v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  void *__p;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  float32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;

  v89 = a5 - 1;
  if (a5 >= 1)
  {
    v85 = (void **)(a1 + 1648);
    v6 = (void **)(a1 + 1656);
    v7 = (void **)(a1 + 1672);
    v80 = (void **)(a1 + 1688);
    v81 = (void **)(a1 + 1680);
    v8 = a5 - 1;
    v82 = (void **)(a1 + 1664);
    do
    {
      v9 = v7;
      v10 = v6;
      v11 = v89 - v8;
      if (*(_BYTE *)(a1 + 2672))
      {
        v12 = v11 < v89;
      }
      else
      {
        v11 = v8;
        v12 = v8 > 0;
      }
      v86 = v12;
      if (*(_BYTE *)(a1 + 2672))
        v13 = v11 > 0;
      else
        v13 = v11 < v89;
      if (*(_BYTE *)(a1 + 2672))
        v14 = v11 - 1;
      else
        v14 = v11 + 1;
      if (*(_BYTE *)(a1 + 2672))
        v15 = v11 + 1;
      else
        v15 = v11 - 1;
      v84 = v15;
      v16 = v11;
      memmove(*(void **)(*(_QWORD *)(a1 + 840) + 8 * v11), *(const void **)(*a4 + 8 * v11), 4 * *(int *)(a1 + 52));
      v87 = v13;
      if (v13)
        VVector<float>::internalMul((uint64_t *)(*(_QWORD *)(a1 + 840) + 8 * v16), (float **)(*(_QWORD *)(a1 + 936) + 8 * v14), *(__int16 ***)(a1 + 2560), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      v17 = *(float **)(*(_QWORD *)(a1 + 352) + 8 * v16);
      v18 = *(float **)(*(_QWORD *)(a1 + 376) + 8 * v16);
      v19 = *(float **)(*(_QWORD *)(a1 + 424) + 8 * v16);
      v20 = *(float **)(*(_QWORD *)(a1 + 400) + 8 * v16);
      v21 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v16);
      v103 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v16);
      v104 = v21;
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1640), v20, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::applyPrimeDerivative(v85, v18, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      v6 = v10;
      VVector<float>::applyPrimeDerivative(v10, v17, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      v7 = v9;
      VVector<float>::applyForwardActivation(v9, v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyPrimeDerivative(v82, v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyForwardActivation(v81, *(float **)(*(_QWORD *)(a1 + 88) + 8 * v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::applyPrimeDerivative(v80, *(float **)(*(_QWORD *)(a1 + 88) + 8 * v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 864) + 8 * v16), (float32x4_t **)(a1 + 1640), (float32x4_t **)v81, (float32x4_t **)(*(_QWORD *)(a1 + 840) + 8 * v16), *(_DWORD *)(a1 + 52));
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 960) + 8 * v16), (float32x4_t **)v80, &v103, (float32x4_t **)(*(_QWORD *)(a1 + 840) + 8 * v16), *(_DWORD *)(a1 + 52));
      v22 = *(_QWORD *)(a1 + 960);
      v23 = (float32x4_t **)(v22 + 8 * v16);
      v24 = *(unsigned int *)(a1 + 52);
      if ((int)v24 < 1)
      {
        if (!v87)
        {
          v33 = v86;
          goto LABEL_30;
        }
        v34 = v14;
        v102 = *(float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v14);
        v33 = v86;
      }
      else
      {
        v25 = *(float **)(*(_QWORD *)(a1 + 864) + 8 * v16);
        v26 = **(__int16 ***)(a1 + 2584);
        v27 = *v23;
        v28 = (float *)*v23;
        v29 = *(unsigned int *)(a1 + 52);
        do
        {
          v30 = *v25++;
          v31 = v30;
          v32 = *v26++;
          *v28 = *v28 + (float)(v31 * (float)v32);
          ++v28;
          --v29;
        }
        while (v29);
        v33 = v86;
        if (!v87)
          goto LABEL_30;
        v34 = v14;
        v102 = *(float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v14);
        v35 = *(float **)(*(_QWORD *)(a1 + 888) + 8 * v14);
        v36 = **(__int16 ***)(a1 + 2576);
        v37 = (float *)v27;
        v38 = v24;
        do
        {
          v39 = *v35++;
          v40 = v39;
          v41 = *v36++;
          *v37 = *v37 + (float)(v40 * (float)v41);
          ++v37;
          --v38;
        }
        while (v38);
        v42 = *(float **)(*(_QWORD *)(a1 + 912) + 8 * v14);
        v43 = **(__int16 ***)(a1 + 2568);
        v44 = v24;
        do
        {
          v45 = *v42++;
          v46 = v45;
          v47 = *v43++;
          v27->f32[0] = v27->f32[0] + (float)(v46 * (float)v47);
          v27 = (float32x4_t *)((char *)v27 + 4);
          --v44;
        }
        while (v44);
      }
      VVector<float>::mulAddV(v23, (float32x4_t **)(v22 + 8 * v34), &v102, v24);
      v22 = *(_QWORD *)(a1 + 960);
      LODWORD(v24) = *(_DWORD *)(a1 + 52);
LABEL_30:
      VVector<float>::mul((void **)(*(_QWORD *)(a1 + 936) + 8 * v16), (float32x4_t **)v82, (float32x4_t **)(v22 + 8 * v16), &v104, v24);
      if (v33)
        VVector<float>::mul((void **)(*(_QWORD *)(a1 + 888) + 8 * v16), (float32x4_t **)v85, (float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v16), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v84), *(_DWORD *)(a1 + 52));
      v48 = VVector<float>::mul((void **)(*(_QWORD *)(a1 + 912) + 8 * v16), (float32x4_t **)v10, (float32x4_t **)(*(_QWORD *)(a1 + 960) + 8 * v16), (float32x4_t **)v9, *(_DWORD *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t, float))a1)(a1, v48) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 816) + 8 * v16), 4 * *(int *)(a1 + 48));
        VVector<float>::internalMul((uint64_t *)(*(_QWORD *)(a1 + 816) + 8 * v16), (float **)(*(_QWORD *)(a1 + 912) + 8 * v16), *(__int16 ***)(a1 + 2504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.0);
      }
    }
    while (v8-- > 0);
  }
  v50 = *(unsigned int *)(a1 + 52);
  if ((int)v50 <= 0)
  {
    v52 = (float32x4_t **)(a1 + 1536);
    v88 = (float32x4_t **)(a1 + 1544);
  }
  else
  {
    v51 = 4 * v50;
    bzero(*(void **)(a1 + 1528), 4 * v50);
    v52 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v51);
    v88 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v51);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
  if (a5 > 1)
  {
    v53 = 1;
    v54 = a5 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v55 = v54;
      else
        v55 = v53;
      if (*(_BYTE *)(a1 + 2672))
        v56 = 1;
      else
        v56 = -1;
      v57 = v55 + v56;
      if (*(_BYTE *)(a1 + 2672))
        v58 = a5 - 2;
      else
        v58 = 1;
      v59 = v55 == v58;
      VVector<float>::mulAddV((float32x4_t **)(a1 + 1528), (float32x4_t **)(*(_QWORD *)(a1 + 912) + 8 * v55), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v57), *(_DWORD *)(a1 + 52));
      VVector<float>::mulAddV(v52, (float32x4_t **)(*(_QWORD *)(a1 + 888) + 8 * v55), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v57), *(_DWORD *)(a1 + 52));
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 912) + 8 * v55), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v57), (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 888) + 8 * v55), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v57), (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 864) + 8 * v55), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v57), (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 936) + 8 * v55), (const float **)(*(_QWORD *)(a1 + 112) + 8 * v57), (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      ++v53;
      --v54;
    }
    while (v54 != -1);
    v60 = 1;
    v61 = a5 - 2;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v62 = v61;
      else
        v62 = v60;
      if (*(_BYTE *)(a1 + 2672))
        v63 = a5 - 2;
      else
        v63 = 1;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 888) + 8 * v62), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v62), (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v62 == v63);
      }
      else
      {
        v64 = *(_QWORD *)(a1 + 888);
        v65 = *(_QWORD *)(a1 + 208) + 24 * v62;
        v100 = 0;
        v101 = 0;
        v99 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v99, *(const void **)v65, *(_QWORD *)(v65 + 8), (uint64_t)(*(_QWORD *)(v65 + 8) - *(_QWORD *)v65) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1104, *(int **)(v64 + 8 * v62), (uint64_t)v99, *(_DWORD *)(a1 + 52));
        if (v99)
        {
          v100 = v99;
          operator delete(v99);
        }
      }
      ++v60;
      --v61;
    }
    while (v61 != -1);
  }
  if (a5 >= 1)
  {
    v66 = 0;
    v67 = v89;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v68 = v67;
      else
        v68 = v66;
      if (*(_BYTE *)(a1 + 2672))
        v69 = v89;
      else
        v69 = 0;
      v70 = v68;
      VVector<float>::mulAddV(v88, (float32x4_t **)(*(_QWORD *)(a1 + 864) + 8 * v68), (float32x4_t **)(*(_QWORD *)(a1 + 88) + 8 * v68), *(_DWORD *)(a1 + 52));
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        v77 = v70 == v69;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 912) + 8 * v70), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v70), (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 864) + 8 * v70), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v70), (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(_QWORD *)(a1 + 936) + 8 * v70), (const float **)(*(_QWORD *)(a1 + 64) + 8 * v70), (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
      }
      else
      {
        v71 = *(_QWORD *)(a1 + 912);
        v72 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v97 = 0;
        v98 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v72, *(_QWORD *)(v72 + 8), (uint64_t)(*(_QWORD *)(v72 + 8) - *(_QWORD *)v72) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 984, *(int **)(v71 + 8 * v70), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          v97 = __p;
          operator delete(__p);
        }
        v73 = *(_QWORD *)(a1 + 864);
        v74 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v94 = 0;
        v95 = 0;
        v93 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v93, *(const void **)v74, *(_QWORD *)(v74 + 8), (uint64_t)(*(_QWORD *)(v74 + 8) - *(_QWORD *)v74) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1224, *(int **)(v73 + 8 * v70), (uint64_t)v93, *(_DWORD *)(a1 + 52));
        if (v93)
        {
          v94 = v93;
          operator delete(v93);
        }
        v75 = *(_QWORD *)(a1 + 936);
        v76 = *(_QWORD *)(a1 + 208) + 24 * (int)v70;
        v91 = 0;
        v92 = 0;
        v90 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v90, *(const void **)v76, *(_QWORD *)(v76 + 8), (uint64_t)(*(_QWORD *)(v76 + 8) - *(_QWORD *)v76) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1344, *(int **)(v75 + 8 * v70), (uint64_t)v90, *(_DWORD *)(a1 + 52));
        if (v90)
        {
          v91 = v90;
          operator delete(v90);
        }
      }
      ++v66;
      --v67;
    }
    while (v67 != -1);
  }
}

void LSTM<short>::forward(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  signed int v17;
  int v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  char v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  float *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int16 **v46;
  uint64_t v47;
  int v48;
  float *v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  float *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 **v59;
  uint64_t v60;
  int v61;
  float *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  float *v66;
  uint64_t *v67;
  uint64_t v68;
  float *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  float *v74;
  float *v75;
  float v76;
  float v77;
  float v78;
  int v79;
  uint64_t v80;
  float *v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 **v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  float *v93;
  int v94;
  BOOL v95;
  uint64_t *v96;
  int v97;
  int v98;
  signed int v99;
  int v102;
  _BOOL4 v103;
  void *v104;
  char v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  char v111;
  void *__p;
  char v113;
  void *v114;
  char v115;
  void *v116[2];
  char v117;

  if (a4 < 0x2000000)
    v8 = 1;
  else
    v8 = HIBYTE(a4);
  v9 = *(_QWORD *)(a1 + 2680);
  if (v9)
    v95 = *(_BYTE *)(v9 + 600) != 0;
  else
    v95 = 0;
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = *(_QWORD *)(a1 + 2680);
  }
  v102 = v10;
  if (!v9 || (v11 = *(float *)(v9 + 604), v11 <= 0.0))
    v11 = 50.0;
  v12 = *(unsigned __int8 *)(a1 + 2672);
  std::string::basic_string[abi:ne180100]<0>(v116, "LSTMv2");
  if (a5 && v12)
    exitFramework(34);
  v13 = a4 & 0xFFFFFF;
  if (v117 < 0)
    operator delete(v116[0]);
  if (a5)
    v14 = *(_BYTE *)(a1 + 42) == 0;
  else
    v14 = 0;
  v15 = v14;
  v16 = v102;
  if (v13 > v15)
  {
    v98 = v8;
    v99 = v13 - 1;
    v96 = (uint64_t *)(a1 + 752);
    v97 = a4 & 0xFFFFFF;
    do
    {
      if (*(_BYTE *)(a1 + 2672))
        v17 = v13 + ~v15;
      else
        v17 = v15;
      if (*(_BYTE *)(a1 + 2672))
        v18 = 1;
      else
        v18 = -1;
      if (*(_BYTE *)(a1 + 2672))
        v19 = v17 < v99;
      else
        v19 = v17 > 0;
      v103 = v19;
      v20 = *(unsigned __int8 *)(a1 + 42);
      v21 = v17;
      if (((*(_BYTE *)(a1 + 42) != 0) & v16) != 0)
        v22 = 1;
      else
        v22 = v17;
      v23 = *(_QWORD *)(a1 + 64);
      if (v16)
      {
        bzero(*(void **)(v23 + 8 * v22), 4 * *(int *)(a1 + 48));
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v22) + 4 * **(int **)(*a3 + 24 * v17)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v23 + 8 * v22), *(const void **)(*a2 + 8 * v22), 4 * *(int *)(a1 + 44));
      }
      v24 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v22) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      if (v16)
      {
        v25 = *(_DWORD *)(a1 + 48);
        v26 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v17);
        *v26 = **(_DWORD **)(*a3 + 24 * v17);
        if (v24)
          v26[1] = v25 - 1;
      }
      v27 = *(_QWORD *)(a1 + 136);
      if (v8 == 1)
        memcpy(*(void **)(v27 + 8 * v22), *(const void **)(*(_QWORD *)(a1 + 64) + 8 * v22), 4 * *(int *)(a1 + 48));
      else
        memmove(*(void **)(v27 + 8 * v22), *(const void **)(*a2 + 8 * v22), 4 * *(_DWORD *)(a1 + 44) * v8);
      if (v8 > *(_DWORD *)(a1 + 2688))
        exitFramework(83724);
      if (v20)
        v28 = 1;
      else
        v28 = v17;
      if (*(_BYTE *)(a1 + 2692))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 544) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 568) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 616) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 592) + 8 * v28), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(_QWORD *)(a1 + 352) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      v29 = *(_QWORD *)(a1 + 2680);
      if (v29)
      {
        v30 = *(_DWORD *)(v29 + 40);
        v31 = !*(_BYTE *)(v29 + 20) && (v30 == 5 || v30 == 2) && *(_DWORD *)(v29 + 44) == 6;
        if (v30 == 5 || v30 == 2)
        {
          if (v31)
            goto LABEL_148;
          v14 = *(_DWORD *)(v29 + 60) == 22;
          v32 = v14;
          v33 = v103;
          if (!v14)
            v33 = 0;
          if (v33)
LABEL_148:
            LSTM<short>::computeXTimesWSparseOrDenseCombined(a1, *(_DWORD *)(a1 + 52));
          goto LABEL_70;
        }
        if (v31)
          goto LABEL_148;
      }
      v32 = 0;
LABEL_70:
      v34 = *(_QWORD *)(a1 + 208) + 24 * v17;
      LSTM<short>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(_QWORD *)(a1 + 424) + 8 * v28), *(uint64_t **)(a1 + 2528), *(const void **)v34, *(_QWORD *)(v34 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      if (v103 && (v32 & 1) == 0)
LABEL_147:
        exitFramework(34);
      v35 = *(_QWORD *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(v116, "cix");
      if (v35 && *(_BYTE *)(v35 + 244))
        exitFramework(200);
      if (v117 < 0)
        operator delete(v116[0]);
      v36 = (uint64_t *)(*(_QWORD *)(a1 + 424) + 8 * v28);
      v37 = *(_DWORD *)(a1 + 52);
      v38 = (v37 * v8);
      if ((int)v38 >= 1)
      {
        v39 = (float *)*v36;
        do
        {
          v40 = -1035468800;
          if (*v39 < -50.0 || (v40 = 1112014848, *v39 > 50.0))
            *(_DWORD *)v39 = v40;
          ++v39;
          --v38;
        }
        while (v38);
      }
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 520) + 8 * v28), v36, v8, v37, *(_DWORD *)(a1 + 740));
      v41 = *(_QWORD *)(a1 + 208) + 24 * v17;
      LSTM<short>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(_QWORD *)(a1 + 352) + 8 * v28), *(uint64_t **)(a1 + 2504), *(const void **)v41, *(_QWORD *)(v41 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      v42 = *(_QWORD *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v114, "gix");
      if (v42 && *(_BYTE *)(v42 + 244))
        exitFramework(200);
      if (v115 < 0)
        operator delete(v114);
      v43 = v17 + v18;
      if (v103)
      {
        if ((v32 & 1) == 0)
          goto LABEL_147;
        v44 = *(_QWORD *)(a1 + 2680);
        v45 = *(_QWORD *)(a1 + 352);
        v46 = *(__int16 ***)(a1 + 2568);
        v47 = *(_QWORD *)(a1 + 184);
        v48 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&__p, "gix");
        v49 = *(float **)(v45 + 8 * v28);
        v8 = v98;
        LSTM<short>::addOptionalPeepholeVector(a1, v44, v49, v46, *(float **)(v47 + 8 * v43), v98, v48);
        if (v113 < 0)
          operator delete(__p);
        v32 = 1;
        v16 = v102;
      }
      v50 = (uint64_t *)(*(_QWORD *)(a1 + 352) + 8 * v28);
      v51 = *(_DWORD *)(a1 + 52);
      v52 = (v51 * v8);
      if ((int)v52 >= 1)
      {
        v53 = (float *)*v50;
        do
        {
          v54 = -1035468800;
          if (*v53 < -50.0 || (v54 = 1112014848, *v53 > 50.0))
            *(_DWORD *)v53 = v54;
          ++v53;
          --v52;
        }
        while (v52);
      }
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 448) + 8 * v28), v50, v8, v51, *(_DWORD *)(a1 + 736));
      v55 = *(_QWORD *)(a1 + 208) + 24 * (int)v21;
      LSTM<short>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(_QWORD *)(a1 + 376) + 8 * v28), *(uint64_t **)(a1 + 2512), *(const void **)v55, *(_QWORD *)(v55 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      v56 = *(_QWORD *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v110, "gfx");
      if (v56 && *(_BYTE *)(v56 + 244))
        exitFramework(200);
      if (v111 < 0)
        operator delete(v110);
      if (v103)
      {
        if ((v32 & 1) == 0)
          goto LABEL_147;
        v57 = *(_QWORD *)(a1 + 2680);
        v58 = *(_QWORD *)(a1 + 376);
        v59 = *(__int16 ***)(a1 + 2576);
        v60 = *(_QWORD *)(a1 + 184);
        v61 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&v108, "gfx");
        v62 = *(float **)(v60 + 8 * v43);
        v8 = v98;
        LSTM<short>::addOptionalPeepholeVector(a1, v57, *(float **)(v58 + 8 * v28), v59, v62, v98, v61);
        v16 = v102;
        if (v109 < 0)
          operator delete(v108);
      }
      v63 = *(_QWORD *)(a1 + 2680);
      if (v63)
      {
        v64 = *(_DWORD *)(a1 + 52);
        if (*(_BYTE *)(v63 + 601))
        {
          v65 = (v64 * v8);
          if ((int)v65 >= 1)
          {
            v66 = *(float **)(*(_QWORD *)(a1 + 376) + 8 * v28);
            do
            {
              *v66 = *v66 + 1.0;
              ++v66;
              --v65;
            }
            while (v65);
          }
        }
      }
      else
      {
        v64 = *(_DWORD *)(a1 + 52);
      }
      v67 = (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v28);
      v68 = (v64 * v8);
      if ((int)v68 >= 1)
      {
        v69 = (float *)*v67;
        do
        {
          v70 = -1035468800;
          if (*v69 < -50.0 || (v70 = 1112014848, *v69 > 50.0))
            *(_DWORD *)v69 = v70;
          ++v69;
          --v68;
        }
        while (v68);
      }
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 472) + 8 * v28), v67, v8, v64, *(_DWORD *)(a1 + 736));
      VVector<float>::mulV((float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v21), (float32x4_t **)(*(_QWORD *)(a1 + 520) + 8 * v28), (float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v28), *(_DWORD *)(a1 + 52) * v8);
      if (v103)
      {
        if (v95)
        {
          v71 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v71 >= 1)
          {
            v72 = *(_QWORD *)(a1 + 184);
            v73 = *(float **)(v72 + 8 * v43);
            v74 = *(float **)(*(_QWORD *)(a1 + 448) + 8 * v28);
            v75 = *(float **)(v72 + 8 * v21);
            do
            {
              v76 = *v73++;
              v77 = v76;
              v78 = *v74++;
              *v75 = *v75 + (float)(v77 * (float)(1.0 - v78));
              ++v75;
              --v71;
            }
            while (v71);
          }
        }
        else
        {
          VVector<float>::mulAddV((float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v21), (float32x4_t **)(*(_QWORD *)(a1 + 472) + 8 * v28), (float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v43), *(_DWORD *)(a1 + 52) * v8);
        }
      }
      v79 = *(_DWORD *)(a1 + 52);
      v80 = (v79 * v8);
      if ((int)v80 >= 1)
      {
        v81 = *(float **)(*(_QWORD *)(a1 + 184) + 8 * v21);
        do
        {
          v82 = -v11;
          if (*v81 < (float)-v11 || (v82 = v11, *v81 > v11))
            *v81 = v82;
          ++v81;
          --v80;
        }
        while (v80);
      }
      v83 = *(_QWORD *)(a1 + 208) + 24 * (int)v21;
      LSTM<short>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(_QWORD *)(a1 + 400) + 8 * v28), *(uint64_t **)(a1 + 2520), *(const void **)v83, *(_QWORD *)(v83 + 8), v8, v79, *(_DWORD *)(a1 + 48));
      v84 = *(_QWORD *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v106, "gox");
      if (v84 && *(_BYTE *)(v84 + 244))
        exitFramework(200);
      if (v107 < 0)
        operator delete(v106);
      v85 = *(_QWORD *)(a1 + 2680);
      v86 = *(_QWORD *)(a1 + 400);
      v87 = *(__int16 ***)(a1 + 2584);
      v88 = *(_QWORD *)(a1 + 184);
      v89 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v104, "gox");
      LSTM<short>::addOptionalPeepholeVector(a1, v85, *(float **)(v86 + 8 * v28), v87, *(float **)(v88 + 8 * v21), v8, v89);
      if (v105 < 0)
        operator delete(v104);
      v90 = (uint64_t *)(*(_QWORD *)(a1 + 400) + 8 * v28);
      v91 = *(_DWORD *)(a1 + 52);
      v92 = (v91 * v8);
      v16 = v102;
      v13 = v97;
      if ((int)v92 >= 1)
      {
        v93 = (float *)*v90;
        do
        {
          v94 = -1035468800;
          if (*v93 < -50.0 || (v94 = 1112014848, *v93 > 50.0))
            *(_DWORD *)v93 = v94;
          ++v93;
          --v92;
        }
        while (v92);
      }
      applyForwardActivation((uint64_t *)(*(_QWORD *)(a1 + 496) + 8 * v28), v90, v8, v91, *(_DWORD *)(a1 + 736));
      applyForwardActivation(v96, (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * v21), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mulV((float32x4_t **)(*(_QWORD *)(a1 + 160) + 8 * v21), (float32x4_t **)v96, (float32x4_t **)(*(_QWORD *)(a1 + 496) + 8 * v28), *(_DWORD *)(a1 + 52) * v8);
      if (*(_BYTE *)(a1 + 2692))
      {
        memcpy(*(void **)(*(_QWORD *)(a1 + 112) + 8 * v21), *(const void **)(*(_QWORD *)(a1 + 160) + 8 * v21), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v21), *(const void **)(*(_QWORD *)(a1 + 184) + 8 * v21), 4 * *(int *)(a1 + 52));
      }
      ++v15;
    }
    while (v15 != v97);
  }
}

void sub_19159C810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<short>::reverseForward(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2672] = 1;
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      LSTM<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      *(_QWORD *)algn_1EE21A708 = 0;
      qword_1EE21A710 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &LSTM<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_190DAF000);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &LSTM<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2672] = 0;
  return result;
}

uint64_t LSTM<short>::reverseBackward(_BYTE *a1)
{
  uint64_t result;

  a1[2672] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *LSTM<short>::setMaster(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2496) != 1)
    exitFramework(1);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 2504) = result + 232;
  *(_QWORD *)(a1 + 2520) = result + 248;
  *(_QWORD *)(a1 + 2512) = result + 240;
  *(_QWORD *)(a1 + 2528) = result + 256;
  *(_QWORD *)(a1 + 2536) = result + 264;
  *(_QWORD *)(a1 + 2552) = result + 280;
  *(_QWORD *)(a1 + 2544) = result + 272;
  *(_QWORD *)(a1 + 2560) = result + 288;
  *(_QWORD *)(a1 + 2568) = result + 296;
  *(_QWORD *)(a1 + 2576) = result + 304;
  *(_QWORD *)(a1 + 2584) = result + 312;
  *(_QWORD *)(a1 + 2592) = result + 320;
  *(_QWORD *)(a1 + 2600) = result + 328;
  *(_QWORD *)(a1 + 2608) = result + 336;
  *(_QWORD *)(a1 + 2616) = result + 344;
  return result;
}

void LSTM<short>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2496))
  {
    exitFramework(34);
  }
  exitFramework(1);
}

void LSTM<short>::computeError()
{
  exitFramework(1);
}

void LSTM<short>::log2Probability()
{
  exitFramework(0);
}

void LSTM<short>::~LSTM(uint64_t a1)
{
  LSTM<short>::~LSTM(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t LSTM<short>::~LSTM(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void **v44;

  *(_QWORD *)a1 = off_1E2D58158;
  LSTM<short>::cleanupAllBuffers((_QWORD *)a1);
  v2 = *(_QWORD *)(a1 + 1552);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    *(_QWORD *)(a1 + 1552) = 0;
    v3 = *(_QWORD *)(a1 + 1560);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
    *(_QWORD *)(a1 + 1560) = 0;
    v4 = *(_QWORD *)(a1 + 1568);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    *(_QWORD *)(a1 + 1568) = 0;
    v5 = *(_QWORD *)(a1 + 1576);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    *(_QWORD *)(a1 + 1576) = 0;
    v6 = *(_QWORD *)(a1 + 1584);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    *(_QWORD *)(a1 + 1584) = 0;
    v7 = *(_QWORD *)(a1 + 1592);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
    *(_QWORD *)(a1 + 1592) = 0;
    v8 = *(_QWORD *)(a1 + 1600);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8);
    *(_QWORD *)(a1 + 1600) = 0;
    v9 = *(_QWORD *)(a1 + 1608);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
    *(_QWORD *)(a1 + 1608) = 0;
  }
  v10 = *(void **)(a1 + 2648);
  if (v10)
  {
    *(_QWORD *)(a1 + 2656) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 2624);
  if (v11)
  {
    *(_QWORD *)(a1 + 2632) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 2424) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2432));
  *(_QWORD *)(a1 + 2352) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2360));
  *(_QWORD *)(a1 + 2280) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2288));
  *(_QWORD *)(a1 + 2208) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2216));
  *(_QWORD *)(a1 + 2136) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2144));
  *(_QWORD *)(a1 + 2064) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2072));
  *(_QWORD *)(a1 + 1992) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2000));
  *(_QWORD *)(a1 + 1920) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1928));
  *(_QWORD *)(a1 + 1848) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1856));
  *(_QWORD *)(a1 + 1776) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1784));
  *(_QWORD *)(a1 + 1704) = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1712));
  SparseMatrix<float>::~SparseMatrix(a1 + 1344);
  SparseMatrix<float>::~SparseMatrix(a1 + 1224);
  SparseMatrix<float>::~SparseMatrix(a1 + 1104);
  SparseMatrix<float>::~SparseMatrix(a1 + 984);
  v12 = *(void **)(a1 + 960);
  if (v12)
  {
    *(_QWORD *)(a1 + 968) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 936);
  if (v13)
  {
    *(_QWORD *)(a1 + 944) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 912);
  if (v14)
  {
    *(_QWORD *)(a1 + 920) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 888);
  if (v15)
  {
    *(_QWORD *)(a1 + 896) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 864);
  if (v16)
  {
    *(_QWORD *)(a1 + 872) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 840);
  if (v17)
  {
    *(_QWORD *)(a1 + 848) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 816);
  if (v18)
  {
    *(_QWORD *)(a1 + 824) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 792);
  if (v19)
  {
    *(_QWORD *)(a1 + 800) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 712);
  if (v20)
  {
    *(_QWORD *)(a1 + 720) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 688);
  if (v21)
  {
    *(_QWORD *)(a1 + 696) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 664);
  if (v22)
  {
    *(_QWORD *)(a1 + 672) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 640);
  if (v23)
  {
    *(_QWORD *)(a1 + 648) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 616);
  if (v24)
  {
    *(_QWORD *)(a1 + 624) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 592);
  if (v25)
  {
    *(_QWORD *)(a1 + 600) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 568);
  if (v26)
  {
    *(_QWORD *)(a1 + 576) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 544);
  if (v27)
  {
    *(_QWORD *)(a1 + 552) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 520);
  if (v28)
  {
    *(_QWORD *)(a1 + 528) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 496);
  if (v29)
  {
    *(_QWORD *)(a1 + 504) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 472);
  if (v30)
  {
    *(_QWORD *)(a1 + 480) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(a1 + 448);
  if (v31)
  {
    *(_QWORD *)(a1 + 456) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(a1 + 424);
  if (v32)
  {
    *(_QWORD *)(a1 + 432) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(a1 + 400);
  if (v33)
  {
    *(_QWORD *)(a1 + 408) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(a1 + 376);
  if (v34)
  {
    *(_QWORD *)(a1 + 384) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(a1 + 352);
  if (v35)
  {
    *(_QWORD *)(a1 + 360) = v35;
    operator delete(v35);
  }
  v44 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v44);
  v36 = *(void **)(a1 + 184);
  if (v36)
  {
    *(_QWORD *)(a1 + 192) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(a1 + 160);
  if (v37)
  {
    *(_QWORD *)(a1 + 168) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(a1 + 136);
  if (v38)
  {
    *(_QWORD *)(a1 + 144) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(a1 + 112);
  if (v39)
  {
    *(_QWORD *)(a1 + 120) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(a1 + 88);
  if (v40)
  {
    *(_QWORD *)(a1 + 96) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(a1 + 64);
  if (v41)
  {
    *(_QWORD *)(a1 + 72) = v41;
    operator delete(v41);
  }
  *(_QWORD *)a1 = off_1E2D4D730;
  v42 = *(void **)(a1 + 8);
  if (v42)
  {
    *(_QWORD *)(a1 + 16) = v42;
    operator delete(v42);
  }
  return a1;
}

void LSTM<short>::computeXTimesWSparseOrDenseCombined(uint64_t a1, int a2)
{
  int v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 784))
  {
    v3 = 4 * a2 * *(_DWORD *)(a1 + 2688);
    v4 = (void *)operator new[]();
    bzero(v4, 4 * v3);
    *(_QWORD *)(a1 + 784) = v4;
    v5 = *(_QWORD **)(a1 + 2632);
    v6 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v5 >= v6)
    {
      v8 = *(_QWORD *)(a1 + 2624);
      v9 = ((uint64_t)v5 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v10 = v6 - v8;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12);
      else
        v13 = 0;
      v14 = (_QWORD *)(v12 + 8 * v9);
      v15 = v12 + 8 * v13;
      *v14 = v4;
      v7 = v14 + 1;
      v16 = *(char **)(a1 + 2632);
      v17 = *(char **)(a1 + 2624);
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = *(char **)(a1 + 2624);
      }
      *(_QWORD *)(a1 + 2624) = v14;
      *(_QWORD *)(a1 + 2632) = v7;
      *(_QWORD *)(a1 + 2640) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v5 = v4;
      v7 = v5 + 1;
    }
    *(_QWORD *)(a1 + 2632) = v7;
  }
  exitFramework(34);
}

void LSTM<short>::computeXTimesWSparseOrDense(uint64_t a1, int a2, const float **a3, uint64_t *a4, const void *a5, uint64_t a6, int a7, int a8, int a9)
{
  float **v12;
  void *__p;
  int *v14;
  uint64_t v15;

  if (!a2)
    exitFramework(34);
  if (a7 != 1)
    exitFramework(502);
  v12 = (float **)(a1 + 760);
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a5, a6, (a6 - (uint64_t)a5) >> 2);
  VVector<float>::internalMul(v12, (int *)__p, v14, *a4, a8, a9);
  if (__p)
  {
    v14 = (int *)__p;
    operator delete(__p);
  }
  vDSP_vadd(*v12, 1, *a3, 1, (float *)*a3, 1, a8);
}

uint64_t LSTM<short>::addOptionalPeepholeVector(uint64_t result, uint64_t a2, float *a3, __int16 **a4, float *a5, int a6, int a7)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  float *v12;
  float *v13;
  int v14;
  int v15;
  float v16;
  float v17;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 520))
      v7 = a6 <= 0;
    else
      v7 = 1;
    if (v7)
      return result;
  }
  else if (a6 < 1)
  {
    return result;
  }
  v8 = 0;
  v9 = *(unsigned int *)(result + 52);
  v10 = 4 * a7;
  do
  {
    if ((int)v9 >= 1)
    {
      v11 = *a4;
      v12 = a5;
      v13 = a3;
      result = v9;
      do
      {
        v15 = *v11++;
        v14 = v15;
        v16 = -5.0;
        if (v15 >= -32766)
        {
          v16 = 5.0;
          if (v14 != 0x7FFF)
            v16 = (float)v14 * 0.00015259;
        }
        v17 = *v12++;
        *v13 = *v13 + (float)(v16 * v17);
        ++v13;
        --result;
      }
      while (result);
    }
    ++v8;
    a3 = (float *)((char *)a3 + v10);
    a5 = (float *)((char *)a5 + v10);
  }
  while (v8 != a6);
  return result;
}

float32x4_t **VVector<short>::add<short>(float32x4_t **result, float32x4_t **a2, int a3)
{
  int v3;
  float32x4_t *v4;
  float32x4_t *v5;
  int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  __int16 v14;

  v3 = a3 / 8;
  if (a3 >= 8)
  {
    v4 = *result;
    v5 = *a2;
    v6 = a3 / 8;
    do
    {
      v7 = *v5;
      v8 = v5[1];
      v5 += 2;
      v9 = vaddq_f32(v8, v4[1]);
      *v4 = vaddq_f32(v7, *v4);
      v4[1] = v9;
      v4 += 2;
      --v6;
    }
    while (v6);
  }
  v10 = v3;
  if (8 * v3 < a3)
  {
    v11 = a3 - (uint64_t)(v10 * 8);
    v12 = &(*result)[v10];
    v13 = &(*a2)[v10];
    do
    {
      v14 = v13->i16[0];
      v13 = (float32x4_t *)((char *)v13 + 2);
      v12->i16[0] += v14;
      v12 = (float32x4_t *)((char *)v12 + 2);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t VVector<short>::write(__int16 **a1, FILE *__stream, int *a3, int a4, int a5)
{
  int v9;
  int v10;
  float *v11;
  float *v12;
  void *__p;
  char v15;
  void *__ptr[2];
  char v17;

  if (a4 != 32)
  {
    if (a4 == 8 || a4 == 16)
      exitFramework(45);
    exitFramework(23);
  }
  if (!__stream)
    exitFramework(9);
  v9 = *a3 & 0xF;
  if (*a3 <= 0)
    v9 = -(-*a3 & 0xF);
  if (v9 >= 15)
    v10 = 16;
  else
    v10 = 15 - v9;
  LOBYTE(__ptr[0]) = v10;
  fwrite(__ptr, 1uLL, 1uLL, __stream);
  ++*a3;
  writeByteArray((size_t)__stream, a3, v10);
  if ((*(_BYTE *)a3 & 0xF) != 0)
    exitFramework(17);
  std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
  std::string::basic_string[abi:ne180100]<0>(&__p, "VVector");
  if (v15 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(__ptr[0]);
  v11 = (float *)operator new[]();
  v12 = v11;
  if (a5 >= 1)
    bzero(v11, 4 * a5);
  writeArray<short,float>(__stream, a3, *a1, v12, a5);
  return MEMORY[0x19401CD78](v12, 0x1000C8052888210);
}

void sub_19159D388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VVector<short>::read(__int16 **a1, uint64_t a2, int a3, _BOOL4 a4, __int16 **a5)
{
  int v5;
  char v9;
  uint64_t v10;
  __int16 *v11;
  uint64_t result;
  int v13;

  v13 = (int)a5;
  if (!a2)
LABEL_11:
    exitFramework(9);
  v5 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    v9 = *(_BYTE *)(a2 + 72);
  }
  else
  {
    v9 = *(_BYTE *)a1;
  }
  if ((v9 & 0xF) != 0)
    exitFramework(19);
  if (a4)
  {
    v10 = *(int *)(a2 + 72);
    v11 = (__int16 *)(*(_QWORD *)a2 + v10);
    *a1 = v11;
    *(_DWORD *)(a2 + 72) = v10 + 2 * v5;
    result = 2 * v5;
    if (!v11)
      goto LABEL_11;
  }
  else
  {
    result = ReadOnlyFile::readInt16Array((ReadOnlyFile *)a2, *a1, &v13, a4, a5);
    if (!*a1)
      goto LABEL_11;
  }
  if (!result)
    goto LABEL_11;
  return result;
}

uint64_t EncoderOneInN::size(EncoderOneInN *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderOneInN::operator()(uint64_t a1, int a2, void **a3)
{
  bzero(*a3, 4 * *(int *)(a1 + 8));
  *((_DWORD *)*a3 + a2) = 1065353216;
  return 0;
}

uint64_t EncoderOneInN::maxOneBits(EncoderOneInN *this)
{
  return 1;
}

uint64_t EncoderOneInN::encodingType(EncoderOneInN *this)
{
  return 1;
}

void EncoderOneInN::~EncoderOneInN(EncoderOneInN *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t EncoderOneInN::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t MRLModelWrapper::makeNewEncoder(MRLModelWrapper *this, int a2, int *a3, int *a4, int a5, int a6)
{
  uint64_t v11;
  int v12;
  uint64_t (**v13)(EncoderOneInN *__hidden);
  long double v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  std::string v48;
  std::string v49;
  std::string v50;
  unsigned int v51;

  switch(a2)
  {
    case 0:
      *a3 = 20;
      *a4 = a6;
      v11 = operator new();
      v12 = *a3;
      v13 = &off_1E2D4D528;
      goto LABEL_8;
    case 1:
      *a3 = a5;
      *a4 = a6;
      v11 = operator new();
      v12 = *a3;
      v13 = &off_1E2D4D678;
LABEL_8:
      *(_QWORD *)v11 = v13;
      *(_DWORD *)(v11 + 8) = v12;
      return v11;
    case 2:
      v11 = operator new();
      *(_QWORD *)v11 = &off_1E2D56E40;
      *(_DWORD *)(v11 + 8) = a5;
      *(_DWORD *)(v11 + 20) = 10;
      v14 = log2((double)a5);
      v15 = 1 << ((int)v14 - 9);
      *(_DWORD *)(v11 + 12) = 1024;
      *(_DWORD *)(v11 + 16) = v15;
      *(_DWORD *)(v11 + 24) = (int)v14 - 9;
      *(_DWORD *)(v11 + 28) = v15 + 1024;
      *(_DWORD *)(v11 + 36) = 0;
      *(_DWORD *)(v11 + 40) = 0;
      *(_DWORD *)(v11 + 32) = (int)v14 + 1;
      *a3 = v15 + 1024;
      *a4 = a6;
      return v11;
    case 3:
      *a3 = 20;
      *a4 = a6;
      v11 = operator new();
      *(_DWORD *)(v11 + 8) = *a3;
      *(_QWORD *)v11 = &off_1E2D4D5C8;
      return v11;
    case 4:
      *a3 = a5;
      *a4 = a6;
      v11 = operator new();
      if (*((char *)this + 119) < 0)
        std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
      else
        v48 = *(std::string *)((_BYTE *)this + 4);
      v34 = *a3;
      *(_QWORD *)v11 = &off_1E2D56AC8;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_DWORD *)(v11 + 8) = v34;
      v51 = -1;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v50, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      else
        v50 = v48;
      EncoderBitsFromMap::parseLexiconMapFile(v11, (uint64_t)&v50, (int *)&v51, 1);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if ((int)v51 <= 0)
        exitFramework(4);
      v35 = v51 + 1;
      std::vector<VVector<float>>::resize((char **)(v11 + 16), v51 + 1);
      v36 = 0;
      v37 = *(unsigned int *)(v11 + 8);
      do
      {
        v38 = (void *)operator new[]();
        v39 = v38;
        if ((int)v37 >= 1)
          bzero(v38, 4 * v37);
        *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8 * v36++) = v39;
      }
      while (v35 != v36);
      *(_DWORD *)(v11 + 12) = -1;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v49, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      else
        v49 = v48;
      EncoderBitsFromMap::parseLexiconMapFile(v11, (uint64_t)&v49, (int *)(v11 + 12), 0);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v11;
      v40 = (uint64_t *)v48.__r_.__value_.__r.__words[0];
      goto LABEL_59;
    case 5:
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *a4 = a6;
      do
      {
        v20 = operator new();
        v21 = v20;
        *(_QWORD *)v20 = &off_1E2D4D528;
        *(_DWORD *)(v20 + 8) = 20;
        if ((unint64_t)v17 >= v18)
        {
          v22 = v17 - v16;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v18 - (_QWORD)v16) >> 2 > v23)
            v23 = (uint64_t)(v18 - (_QWORD)v16) >> 2;
          if (v18 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24);
          else
            v25 = 0;
          v26 = (uint64_t *)(v24 + 8 * v22);
          *v26 = v21;
          v27 = v26 + 1;
          while (v17 != v16)
          {
            v28 = *--v17;
            *--v26 = v28;
          }
          v18 = v24 + 8 * v25;
          if (v16)
            operator delete(v16);
          v16 = v26;
          v17 = v27;
        }
        else
        {
          *v17++ = v20;
        }
        ++v19;
      }
      while (v19 != 5);
      v11 = operator new();
      v29 = (char *)v17 - (char *)v16;
      if (v17 == v16)
      {
        v30 = 0;
        v31 = 0;
      }
      else
      {
        if (v29 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v30 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29 >> 3);
        memmove(v30, v16, (char *)v17 - (char *)v16);
        v31 = (uint64_t)v30 + 8 * (v29 >> 3);
      }
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = &off_1E2D4D620;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_DWORD *)(v11 + 8) = 0;
      std::vector<NeuralNetwork *>::__assign_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>((char *)(v11 + 16), (char *)v30, v31, (v31 - (uint64_t)v30) >> 3);
      v41 = *(_QWORD *)(v11 + 16);
      v42 = *(_QWORD *)(v11 + 24) - v41;
      if ((int)(v42 >> 3) >= 1)
      {
        v43 = 0;
        v44 = v42 & 0x7FFFFFFF8;
        do
        {
          *(_DWORD *)(v11 + 8) += (***(uint64_t (****)(_QWORD))(v41 + v43))(*(_QWORD *)(v41 + v43));
          v43 += 8;
        }
        while (v44 != v43);
      }
      if (v30)
        operator delete(v30);
      *a3 = 100;
      if (!v16)
        return v11;
      v40 = v16;
LABEL_59:
      operator delete(v40);
      break;
    case 6:
      *a3 = a5;
      *a4 = a6;
      if (!*((_QWORD *)this + 26))
      {
        v46 = 100;
LABEL_64:
        exitFramework(v46);
      }
      v11 = operator new();
      v32 = *a3;
      v33 = *((_QWORD *)this + 26);
      *(_QWORD *)v11 = &off_1E2D4D578;
      *(_DWORD *)(v11 + 8) = v32;
      *(_QWORD *)(v11 + 16) = v33;
      break;
    default:
      v46 = 46;
      goto LABEL_64;
  }
  return v11;
}

void sub_19159DAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  MEMORY[0x19401CD90](v30, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t MRLModelWrapper::cleanupAllBuffers(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  void *v10;
  void **v11;

  v1 = *(_QWORD *)(this + 120);
  if (v1)
  {
    v2 = this;
    if (*(_BYTE *)(this + 188))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 208))(*(_QWORD *)(v1 + 40));
      v3 = *(void ***)(v2 + 128);
      if (v3)
      {
        v4 = *v3;
        v5 = *(_QWORD *)*v3;
        if (*((_QWORD *)*v3 + 1) == v5)
          goto LABEL_10;
        v6 = 0;
        do
        {
          v7 = *(_QWORD *)(v5 + 8 * v6);
          if (v7)
          {
            MEMORY[0x19401CD78](v7, 0x1000C8052888210);
            v4 = *v3;
            v5 = *(_QWORD *)*v3;
          }
          ++v6;
        }
        while (v6 < (v4[1] - v5) >> 3);
        v3 = *(void ***)(v2 + 128);
        if (v3)
        {
LABEL_10:
          v11 = v3;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v11);
          MEMORY[0x19401CD90](v3, 0x20C40960023A9);
        }
        *(_QWORD *)(v2 + 128) = 0;
      }
      this = *(_QWORD *)(v2 + 168);
      if (this)
      {
        this = MEMORY[0x19401CD78](this, 0x1000C8052888210);
        *(_QWORD *)(v2 + 168) = 0;
      }
      v8 = *(char ***)(v2 + 176);
      if (v8)
        MRLModelWrapper::freeState(*(_QWORD *)(v2 + 120), v8);
      v9 = *(_QWORD *)(v2 + 160);
      if (v9)
      {
        v10 = *(void **)v9;
        if (*(_QWORD *)v9)
        {
          *(_QWORD *)(v9 + 8) = v10;
          operator delete(v10);
        }
        this = MEMORY[0x19401CD90](v9, 0x20C40960023A9);
        *(_QWORD *)(v2 + 160) = 0;
      }
      *(_BYTE *)(v2 + 188) = 0;
    }
  }
  return this;
}

void MRLModelWrapper::freeState(uint64_t a1, char **a2)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (a1)
  {
    v3 = a2[1];
    if (v3 != *a2)
    {
      v4 = 0;
      v5 = 8;
      v3 = *a2;
      do
      {
        v6 = *(_QWORD **)&v3[v5];
        if (!*v6 || (MEMORY[0x19401CD78](*v6, 0x1000C8052888210), v3 = *a2, (v6 = *(_QWORD **)&(*a2)[v5]) != 0))
        {
          MEMORY[0x19401CD90](v6, 0x80C40B8603338);
          v3 = *a2;
        }
        ++v4;
        v5 += 16;
      }
      while (v4 < (a2[1] - v3) >> 4);
    }
    if (v3)
    {
      a2[1] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x19401CD90);
  }
  exitFramework(40);
}

uint64_t EncoderCopy::size(EncoderCopy *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderCopy::operator()(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  uint64_t v3;
  int *v4;
  _DWORD *v5;
  int v6;

  v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    v4 = ***(int ****)(a1 + 16);
    v5 = *a3;
    do
    {
      v6 = *v4++;
      *v5++ = v6;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t EncoderCopy::maxOneBits(EncoderCopy *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderCopy::encodingType(EncoderCopy *this)
{
  return 6;
}

void EncoderCopy::~EncoderCopy(EncoderCopy *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t EncoderCopy::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  }
  return result;
}

uint64_t EncoderMeta::size(EncoderMeta *this)
{
  return *((unsigned int *)this + 2);
}

void EncoderMeta::operator()()
{
  exitFramework(45);
}

uint64_t EncoderMeta::maxOneBits(EncoderMeta *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderMeta::encodingType(EncoderMeta *this)
{
  return 5;
}

void EncoderMeta::~EncoderMeta(EncoderMeta *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D4D620;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D4D620;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x19401CD90);
}

uint64_t EncoderMeta::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t (***v12)(_QWORD);
  int v13;
  void (***v14)(_QWORD);
  int *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t (***v19)(_QWORD);
  void *v21;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = (void *)operator new[]();
  v8 = v7;
  v21 = v7;
  if ((int)v6 >= 1)
    bzero(v7, 4 * v6);
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
    goto LABEL_10;
  v9 = 0;
  v10 = 0;
  do
  {
    bzero(v21, 4 * *(int *)(a1 + 8));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9);
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v11 + 8))(v11, *(unsigned int *)(*a2 + 4 * v9), &v21);
    v12 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8 * v9);
    v13 = (**v12)(v12);
    v14 = *(void (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8 * v9);
    (**v14)(v14);
    if (v13 >= 1)
    {
      v15 = (int *)v21;
      v16 = v13;
      v17 = (_DWORD *)(*a3 + 4 * v10);
      do
      {
        v18 = *v15++;
        *v17++ = v18;
        --v16;
      }
      while (v16);
    }
    v19 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8 * v9);
    v10 += (**v19)(v19);
    ++v9;
  }
  while (v9 < (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
  v8 = v21;
  if (v21)
LABEL_10:
    MEMORY[0x19401CD78](v8, 0x1000C8052888210);
  return 0;
}

uint64_t EncoderMeta::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    std::vector<NeuralNetwork *>::__assign_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>((char *)(a1 + 16), *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  }
  return a1;
}

void EncoderBitsFromMap::parseLexiconMapFile(uint64_t a1, uint64_t a2, int *a3, char a4)
{
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  uint64_t v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  int v17;
  std::string *v18;
  std::string::size_type size;
  uint64_t v21;
  int *v22;
  std::string v23;
  std::string v24;
  std::string __s;
  _QWORD v26[13];
  char v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  std::locale v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[156];
  int v37;
  _QWORD v38[2];
  _QWORD v39[51];
  _QWORD v40[21];

  v40[19] = *MEMORY[0x1E0C80C00];
  *a3 = 0x80000000;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  std::ifstream::basic_ifstream(v38);
  v22 = a3;
  if (!v39[15])
    exitFramework(3);
  v6 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
  v7 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v21 = MEMORY[0x1E0DE4FB8] + 16;
LABEL_3:
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24)));
  v9 = std::locale::use_facet(&v31, MEMORY[0x1E0DE4A90]);
  v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v31);
  v11 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, (uint64_t)v29, v10);
  if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) == 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26, (uint64_t)v29, 24);
    v12 = 0;
    memset(&__s, 0, sizeof(__s));
    v13 = -1;
    while (1)
    {
      while (1)
      {
        v14 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, (uint64_t)&__s, 0x20u);
        if ((*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) != 0)
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          v26[0] = v6;
          *(_QWORD *)((char *)v26 + *((_QWORD *)v6 - 3)) = v7;
          v26[2] = v8;
          v26[3] = MEMORY[0x1E0DE4FB8] + 16;
          if (v27 < 0)
            operator delete((void *)v26[11]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x19401CCD0](&v28);
          goto LABEL_3;
        }
        if ((_DWORD)v12)
          break;
LABEL_40:
        ++v12;
      }
      if ((_DWORD)v12 == 1)
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v24, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v24 = __s;
        v37 = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v31);
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v24;
        else
          v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        else
          size = v24.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)v18, size);
        MEMORY[0x19401C91C](&v31, &v37);
        v13 = v37;
        v31.__locale_ = v6;
        *(std::locale::__imp **)((char *)&v31.__locale_ + *((_QWORD *)v6 - 3)) = v7;
        v32 = v8;
        v33 = v21;
        if (v35 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x19401CCD0](v36);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        if (v13 > *v22)
          *v22 = v13;
        goto LABEL_40;
      }
      if ((a4 & 1) == 0)
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__s.__r_.__value_.__l.__size_)
          {
            std::string::__init_copy_ctor_external(&v23, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            goto LABEL_14;
          }
        }
        else if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
        {
          v23 = __s;
LABEL_14:
          v37 = 0;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v31);
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v15 = &v23;
          else
            v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
          else
            v16 = v23.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)v15, v16);
          MEMORY[0x19401C910](&v31, &v37);
          v17 = v37;
          v31.__locale_ = v6;
          *(std::locale::__imp **)((char *)&v31.__locale_ + *((_QWORD *)v6 - 3)) = v7;
          v32 = v8;
          v33 = MEMORY[0x1E0DE4FB8] + 16;
          if (v35 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x19401CCD0](v36);
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v23.__r_.__value_.__l.__data_);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v13) + 4 * v12 - 8) = v17;
          goto LABEL_40;
        }
      }
    }
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24)), *(_DWORD *)((char *)&v39[2] + *(_QWORD *)(v38[0] - 24)) | 4);
  v38[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401C8BC](v39);
  std::istream::~istream();
  MEMORY[0x19401CCD0](v40);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_19159E500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t EncoderBitsFromMap::size(EncoderBitsFromMap *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderBitsFromMap::operator()(uint64_t a1, int a2, void **a3)
{
  memmove(*a3, *(const void **)(*(_QWORD *)(a1 + 16) + 8 * a2), 4 * *(int *)(a1 + 8));
  return 0;
}

uint64_t EncoderBitsFromMap::maxOneBits(EncoderBitsFromMap *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderBitsFromMap::encodingType(EncoderBitsFromMap *this)
{
  return 4;
}

void EncoderBitsFromMap::~EncoderBitsFromMap(EncoderBitsFromMap *this)
{
  EncoderBitsFromMap::~EncoderBitsFromMap(this);
  JUMPOUT(0x19401CD90);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E2D56AC8;
  v2 = *((_DWORD *)this + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        MEMORY[0x19401CD78](v4, 0x1000C8052888210);
        v2 = *((_DWORD *)this + 3);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

uint64_t EncoderBitsFromMap::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t EncoderBits::size(EncoderBits *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderGray::operator()(uint64_t a1, unsigned int a2, float **a3)
{
  uint64_t v3;
  unsigned int v4;
  float *v5;
  float v6;

  v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    v4 = 1 << (v3 - 1);
    v5 = *a3;
    do
    {
      if ((v4 & (a2 ^ (a2 >> 1))) != 0)
        v6 = 1.0;
      else
        v6 = 0.0;
      *v5++ = v6;
      v4 >>= 1;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t EncoderBits::maxOneBits(EncoderBits *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderGray::encodingType(EncoderGray *this)
{
  return 3;
}

void EncoderGray::~EncoderGray(EncoderGray *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t EncoderBits::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t EncoderGray::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t EncoderOneInNTwoParts::size(EncoderOneInNTwoParts *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t EncoderOneInNTwoParts::operator()(uint64_t a1, int a2, void **a3)
{
  int v6;
  _DWORD *v7;

  bzero(*a3, 4 * *(int *)(a1 + 28));
  v6 = *(_DWORD *)(a1 + 12);
  v7 = *a3;
  *((_DWORD *)*a3 + a2 % v6) = 1065353216;
  v7[a2 / v6 + v6] = 1065353216;
  return 0;
}

uint64_t EncoderOneInNTwoParts::maxOneBits(EncoderOneInNTwoParts *this)
{
  return 2;
}

uint64_t EncoderOneInNTwoParts::encodingType(EncoderOneInNTwoParts *this)
{
  return 2;
}

void EncoderOneInNTwoParts::~EncoderOneInNTwoParts(EncoderOneInNTwoParts *this)
{
  JUMPOUT(0x19401CD90);
}

__n128 EncoderOneInNTwoParts::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    result = *(__n128 *)(a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }
  return result;
}

uint64_t EncoderBits::operator()(uint64_t a1, int a2, float **a3)
{
  uint64_t v3;
  unsigned int v4;
  float *v5;
  float v6;

  v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    v4 = 1 << (v3 - 1);
    v5 = *a3;
    do
    {
      if ((v4 & a2) != 0)
        v6 = 1.0;
      else
        v6 = 0.0;
      *v5++ = v6;
      v4 >>= 1;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t EncoderBits::encodingType(EncoderBits *this)
{
  return 0;
}

void EncoderBits::~EncoderBits(EncoderBits *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t OutputCluster::write(OutputCluster *this, __sFILE *a2, int *a3)
{
  unsigned int *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int *v10;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  int i;
  int WordClass;
  int v20;
  _DWORD *v21;
  int v22;
  int j;
  int v24;
  _DWORD *v25;
  int WordClassIndex;
  int v28;
  int __ptr;

  v6 = (unsigned int *)((char *)this + 8);
  v7 = operator new[]();
  v8 = (const void *)v7;
  v9 = *v6;
  if ((int)v9 >= 1)
  {
    v10 = (int *)*((_QWORD *)this + 2);
    v11 = (_DWORD *)v7;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v9;
    }
    while (v9);
  }
  fwrite(v6, 4uLL, 1uLL, a2);
  *a3 += 4;
  fwrite(v8, 4uLL, *((int *)this + 2), a2);
  *a3 += 4 * *((_DWORD *)this + 2);
  MEMORY[0x19401CD78](v8, 0x1000C8052888210);
  if (*((_QWORD *)this + 8))
    v13 = *((_DWORD *)this + 18);
  else
    v13 = *((_DWORD *)this + 14);
  __ptr = v13;
  fwrite(&__ptr, 4uLL, 1uLL, a2);
  *a3 += 4;
  v14 = (_DWORD *)operator new[]();
  v15 = 0;
  v16 = *((_QWORD *)this + 8);
  v17 = v14 + 1;
  if (!v16)
    goto LABEL_9;
LABEL_8:
  for (i = *((_DWORD *)this + 18); v15 < i; i = *((_DWORD *)this + 14))
  {
    WordClass = OutputCluster::getWordClass(this, v15);
    *(v17 - 1) = v15;
    *v17 = WordClass;
    ++v15;
    v17 += 2;
    if (v16)
      goto LABEL_8;
LABEL_9:
    ;
  }
  fwrite(v14, 4uLL, 2 * __ptr, a2);
  *a3 += 8 * __ptr;
  MEMORY[0x19401CD78](v14, 0x1000C8052888210);
  if (*((_QWORD *)this + 13))
    v20 = *((_DWORD *)this + 28);
  else
    v20 = *((_DWORD *)this + 24);
  v28 = v20;
  fwrite(&v28, 4uLL, 1uLL, a2);
  *a3 += 4;
  v21 = (_DWORD *)operator new[]();
  if (*((_QWORD *)this + 13))
    v22 = *((_DWORD *)this + 28);
  else
    v22 = *((_DWORD *)this + 24);
  if (v22 >= 1)
  {
    for (j = 0; j != v22; ++j)
    {
      if (OutputCluster::getWordClassIndex(this, j) == -1)
        exitFramework(56);
    }
    v24 = 0;
    v25 = v21 + 1;
    do
    {
      WordClassIndex = OutputCluster::getWordClassIndex(this, v24);
      *(v25 - 1) = v24;
      *v25 = WordClassIndex;
      ++v24;
      v25 += 2;
    }
    while (v22 != v24);
  }
  fwrite(v21, 4uLL, 2 * v28, a2);
  *a3 += 8 * v28;
  return MEMORY[0x19401CD78](v21, 0x1000C8052888210);
}

uint64_t OutputCluster::read(OutputCluster *this, __sFILE *__stream, char a3)
{
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int64_t v11;
  void *v12;
  int64_t v13;
  int v14;
  int64_t v15;
  char *v16;
  int64_t v17;
  int *v18;
  int v19;
  unsigned int v20;
  int WordClass;
  int v23;
  int __ptr;

  *((_DWORD *)this + 2) = -1;
  v6 = (int *)((char *)this + 8);
  fread((char *)this + 8, 4uLL, 1uLL, __stream);
  OutputCluster::init(this, *v6);
  v7 = (void *)operator new[]();
  fread(v7, 4uLL, *v6, __stream);
  if (*v6 >= 1)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 2);
    do
    {
      *(_DWORD *)(v9 + 4 * v8) = *((_DWORD *)v7 + v8);
      ++v8;
    }
    while (v8 < *v6);
  }
  MEMORY[0x19401CD78](v7, 0x1000C8052888210);
  __ptr = -1;
  fread(&__ptr, 4uLL, 1uLL, __stream);
  v10 = __ptr;
  v11 = 2 * __ptr;
  v12 = (void *)operator new[]();
  fread(v12, 4uLL, v11, __stream);
  if (!*((_QWORD *)this + 8))
  {
    std::__tree<int>::destroy(*((_QWORD **)this + 6));
    *((_QWORD *)this + 5) = (char *)this + 48;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  if (v10 >= 1 && (a3 & 1) == 0)
  {
    v13 = 0;
    do
    {
      OutputCluster::setWordClass(this, *((_DWORD *)v12 + v13), *((_DWORD *)v12 + v13 + 1));
      v13 += 2;
    }
    while (v13 < v11);
  }
  MEMORY[0x19401CD78](v12, 0x1000C8052888210);
  v23 = -1;
  fread(&v23, 4uLL, 1uLL, __stream);
  v14 = v23;
  v15 = 2 * v23;
  v16 = (char *)operator new[]();
  fread(v16, 4uLL, v15, __stream);
  if (*((_QWORD *)this + 13))
  {
    if ((a3 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    std::__tree<int>::destroy(*((_QWORD **)this + 11));
    *((_QWORD *)this + 10) = (char *)this + 88;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    if ((a3 & 1) != 0)
LABEL_18:
      JUMPOUT(0x19401CD78);
  }
  if (v14 >= 1)
  {
    v17 = 0;
    do
    {
      v18 = (int *)&v16[4 * v17];
      v19 = *v18;
      v20 = v18[1];
      OutputCluster::setWordClassIndex(this, *v18, v20);
      WordClass = OutputCluster::getWordClass(this, v19);
      OutputCluster::insertInVector((std::vector<int> *)(*((_QWORD *)this + 15) + 24 * WordClass), v20, v19);
      v17 += 2;
    }
    while (v17 < v15);
  }
  MEMORY[0x19401CD78](v16, 0x1000C8052888210);
  return OutputCluster::checkPermutationsForSize((uint64_t)this);
}

uint64_t OutputCluster::read(OutputCluster *this, ReadOnlyFile *a2)
{
  int *v4;
  int *v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  BOOL v18;
  int i;
  uint64_t v20;
  char **v21;
  char **v22;
  uint64_t v23;
  BOOL v24;
  char **v25;
  unint64_t j;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  char **v34;
  BOOL v35;
  int k;
  uint64_t v37;
  char **v38;
  char **v39;
  uint64_t v40;
  BOOL v41;
  char **v42;
  unint64_t v43;
  unint64_t v44;
  int *v45;
  int v46;
  int v47;
  int WordClass;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  int v52;
  unsigned int v53;
  int v54;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  int v64;
  void *__p;
  char v66;
  void *v67;
  char v68;

  *((_DWORD *)this + 2) = -1;
  v4 = (int *)((char *)this + 8);
  v5 = (int *)(*(_QWORD *)a2 + *((int *)a2 + 18));
  if ((unint64_t)v5 <= *(_QWORD *)a2 + *((_QWORD *)a2 + 1) - 4)
  {
    v6 = *v5;
    *v4 = *v5;
    *((_DWORD *)a2 + 18) += 4;
  }
  else
  {
    v6 = 0;
    *v4 = 0;
  }
  OutputCluster::init(this, v6);
  v7 = (int *)operator new[]();
  ReadOnlyFile::readIntArray((uint64_t *)a2, v7, v4);
  if (*((int *)this + 2) >= 1)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 2);
    do
    {
      *(_DWORD *)(v9 + 4 * v8) = v7[v8];
      ++v8;
    }
    while (v8 < *v4);
  }
  MEMORY[0x19401CD78](v7, 0x1000C8052888210);
  v10 = *((int *)a2 + 18);
  v11 = (int *)(*(_QWORD *)a2 + v10);
  if ((unint64_t)v11 <= *(_QWORD *)a2 + *((_QWORD *)a2 + 1) - 4)
  {
    v13 = *v11;
    *((_DWORD *)a2 + 18) = v10 + 4;
    v12 = 2 * v13;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = (int *)operator new[]();
  *((_QWORD *)this + 8) = *(_QWORD *)a2 + *((int *)a2 + 18);
  *((_DWORD *)this + 18) = v13;
  std::string::basic_string[abi:ne180100]<0>(&v67, "Check mmap m_wordClass -");
  if (v68 < 0)
    operator delete(v67);
  v15 = 0;
  v16 = *((_QWORD *)this + 8);
  v17 = (char **)((char *)this + 48);
  v18 = 1;
  if (!v16)
    goto LABEL_14;
LABEL_13:
  for (i = *((_DWORD *)this + 18); v15 < i; i = *((_DWORD *)this + 14))
  {
    if (v18)
    {
      if (v16)
      {
        v20 = *(unsigned int *)(v16 + 8 * v15);
      }
      else
      {
        v21 = (char **)*v17;
        if (!*v17)
          goto LABEL_31;
        v22 = (char **)((char *)this + 48);
        do
        {
          v23 = *((int *)v21 + 7);
          v24 = v15 <= v23;
          if (v15 <= v23)
            v25 = v21;
          else
            v25 = v21 + 1;
          if (v24)
            v22 = v21;
          v21 = (char **)*v25;
        }
        while (*v25);
        if (v22 == v17 || v15 < *((int *)v22 + 7))
LABEL_31:
          v22 = (char **)((char *)this + 48);
        if (v22 == v17)
          v20 = 0xFFFFFFFFLL;
        else
          v20 = v15;
      }
      v18 = v15 == v20;
    }
    else
    {
      v18 = 0;
    }
    ++v15;
    if (v16)
      goto LABEL_13;
LABEL_14:
    ;
  }
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Consecutive - use mmap'd array");
    if (v66 < 0)
      operator delete(__p);
    v64 = v12;
    ReadOnlyFile::readIntArray((uint64_t *)a2, v14, &v64);
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v62, "Not consecutive - use c++ heap");
    if (v63 < 0)
      operator delete(v62);
    v64 = v12;
    ReadOnlyFile::readIntArray((uint64_t *)a2, v14, &v64);
    if (!*((_QWORD *)this + 8))
    {
      std::__tree<int>::destroy(*((_QWORD **)this + 6));
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 5) = v17;
    }
    if (v12 >= 1)
    {
      for (j = 0; j < v12; j += 2)
        OutputCluster::setWordClass(this, v14[j], v14[j + 1]);
    }
  }
  MEMORY[0x19401CD78](v14, 0x1000C8052888210);
  v27 = *((int *)a2 + 18);
  v28 = (int *)(*(_QWORD *)a2 + v27);
  if ((unint64_t)v28 <= *(_QWORD *)a2 + *((_QWORD *)a2 + 1) - 4)
  {
    v30 = *v28;
    *((_DWORD *)a2 + 18) = v27 + 4;
    v29 = 2 * v30;
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  v31 = (int *)operator new[]();
  *((_QWORD *)this + 13) = *(_QWORD *)a2 + *((int *)a2 + 18);
  *((_DWORD *)this + 28) = v30;
  std::string::basic_string[abi:ne180100]<0>(&v60, "Check mmap m_wordIdxInClass -");
  if (v61 < 0)
    operator delete(v60);
  v32 = 0;
  v33 = *((_QWORD *)this + 13);
  v34 = (char **)((char *)this + 88);
  v35 = 1;
  if (!v33)
    goto LABEL_56;
LABEL_55:
  for (k = *((_DWORD *)this + 28); v32 < k; k = *((_DWORD *)this + 24))
  {
    if (v35)
    {
      if (v33)
      {
        v37 = *(unsigned int *)(v33 + 8 * v32);
      }
      else
      {
        v38 = (char **)*v34;
        if (!*v34)
          goto LABEL_73;
        v39 = (char **)((char *)this + 88);
        do
        {
          v40 = *((int *)v38 + 7);
          v41 = v32 <= v40;
          if (v32 <= v40)
            v42 = v38;
          else
            v42 = v38 + 1;
          if (v41)
            v39 = v38;
          v38 = (char **)*v42;
        }
        while (*v42);
        if (v39 == v34 || v32 < *((int *)v39 + 7))
LABEL_73:
          v39 = (char **)((char *)this + 88);
        if (v39 == v34)
          v37 = 0xFFFFFFFFLL;
        else
          v37 = v32;
      }
      v35 = v32 == v37;
    }
    else
    {
      v35 = 0;
    }
    ++v32;
    if (v33)
      goto LABEL_55;
LABEL_56:
    ;
  }
  if (v35)
  {
    std::string::basic_string[abi:ne180100]<0>(&v58, "Consecutive m_wordIdxInClass - use mmap'd array");
    if (v59 < 0)
      operator delete(v58);
    v64 = v29;
    ReadOnlyFile::readIntArray((uint64_t *)a2, v31, &v64);
    if (v29 >= 1)
    {
      v43 = 0;
      v44 = v29;
      do
      {
        v45 = (int *)(*((_QWORD *)this + 13) + 4 * v43);
        v46 = *v45;
        v47 = v45[1];
        WordClass = OutputCluster::getWordClass(this, *v45);
        OutputCluster::insertInVector((std::vector<int> *)(*((_QWORD *)this + 15) + 24 * WordClass), v47, v46);
        v43 += 2;
      }
      while (v43 < v44);
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v56, "Not consecutive m_wordIdxInClass - use c++ heap");
    if (v57 < 0)
      operator delete(v56);
    v64 = v29;
    ReadOnlyFile::readIntArray((uint64_t *)a2, v31, &v64);
    if (!*((_QWORD *)this + 13))
    {
      std::__tree<int>::destroy(*((_QWORD **)this + 11));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 10) = v34;
    }
    if (v29 >= 1)
    {
      v49 = 0;
      v50 = v29;
      do
      {
        v51 = &v31[v49];
        v52 = *v51;
        v53 = v51[1];
        OutputCluster::setWordClassIndex(this, *v51, v53);
        v54 = OutputCluster::getWordClass(this, v52);
        OutputCluster::insertInVector((std::vector<int> *)(*((_QWORD *)this + 15) + 24 * v54), v53, v52);
        v49 += 2;
      }
      while (v49 < v50);
    }
  }
  MEMORY[0x19401CD78](v31, 0x1000C8052888210);
  return OutputCluster::checkPermutationsForSize((uint64_t)this);
}

void OutputCluster::init(OutputCluster *this, int a2)
{
  void **v4;
  unint64_t v5;

  if (!a2)
    exitFramework(42);
  v4 = (void **)((char *)this + 16);
  v5 = a2;
  std::vector<int>::resize((std::vector<int> *)((char *)this + 16), a2);
  std::vector<std::vector<int>>::resize((uint64_t *)this + 15, v5);
  if (a2 >= 1)
    bzero(*v4, 4 * a2);
}

uint64_t *ReadOnlyFile::readIntArray(uint64_t *this, int *a2, const int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;

  if (*a3 >= 1)
  {
    v3 = 0;
    v4 = *this;
    v5 = *this + this[1] - 4;
    do
    {
      v6 = *((int *)this + 18);
      if (v4 + v6 > v5)
        exitFramework(25);
      v7 = *(_DWORD *)(v4 + v6);
      *((_DWORD *)this + 18) = v6 + 4;
      a2[v3++] = v7;
    }
    while (v3 < *a3);
  }
  return this;
}

uint64_t *OutputCluster::setWordClass(OutputCluster *this, int a2, unsigned int a3)
{
  if (*((_QWORD *)this + 8))
    exitFramework(90);
  return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>((uint64_t *)this + 5, a2, COERCE_DOUBLE(__PAIR64__(a3, a2)));
}

void OutputCluster::insertInVector(std::vector<int> *a1, int a2, int a3)
{
  std::vector<int>::pointer begin;
  uint64_t v5;
  std::vector<int>::value_type __x;

  __x = -1;
  begin = a1->__begin_;
  v5 = a2;
  if (a2 >= (unint64_t)(a1->__end_ - a1->__begin_))
  {
    std::vector<int>::resize(a1, a2 + 1, &__x);
    begin = a1->__begin_;
  }
  begin[v5] = a3;
}

uint64_t *OutputCluster::setWordClassIndex(OutputCluster *this, int a2, unsigned int a3)
{
  if (*((_QWORD *)this + 13))
    exitFramework(91);
  return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>((uint64_t *)this + 10, a2, COERCE_DOUBLE(__PAIR64__(a3, a2)));
}

uint64_t OutputCluster::checkPermutationsForSize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _DWORD *v5;
  unint64_t v6;
  int v7;

  v1 = *(unsigned int *)(this + 8);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(this + 120);
    do
    {
      v4 = *(int **)(v3 + 24 * v2);
      v5 = *(_DWORD **)(v3 + 24 * v2 + 8);
      v6 = v5 - v4;
      if (v6 != *(_DWORD *)(*(_QWORD *)(this + 16) + 4 * v2))
        exitFramework(23);
      if (v5 != v4)
      {
        if (v6 <= 1)
          v6 = 1;
        do
        {
          v7 = *v4++;
          if (v7 < 0)
            exitFramework(45);
          --v6;
        }
        while (v6);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return this;
}

uint64_t MRLModelWrapper::MRLModelInitialize(MRLModelWrapper *this)
{
  MRLModelWrapper *v1;
  const char **v2;
  int v3;
  const char *v4;
  FILE *v5;
  FILE *v6;
  _DWORD *v7;
  int data;
  int v9;
  int *v10;
  int *v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  size_t data_low;
  __int128 *p_str;
  int v24;
  uint64_t **v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t NewEncoder;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  std::string *v41;
  OutputCluster *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  _DWORD *v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  std::string *v52;
  OutputCluster *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  _DWORD *v59;
  int v60;
  _DWORD *v61;
  uint64_t v62;
  std::string *v63;
  OutputCluster *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  _DWORD *v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  std::string *v74;
  OutputCluster *v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  _DWORD *v82;
  int v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int *v92;
  unint64_t v93;
  int v94;
  int *v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int v101;
  uint64_t **v102;
  uint64_t **v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  int *v107;
  unint64_t v108;
  int v109;
  int *v110;
  int v111;
  uint64_t v112;
  std::string *v113;
  OutputCluster *v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  _DWORD *v121;
  int v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  int v131;
  uint64_t **v132;
  _QWORD *v133;
  uint64_t v134;
  int *v135;
  int v136;
  uint64_t **v137;
  uint64_t **v138;
  uint64_t *v139;
  int v140;
  uint64_t v141;
  int *v142;
  unint64_t v143;
  int v144;
  int *v145;
  int v146;
  uint64_t v147;
  std::string *v148;
  OutputCluster *v149;
  int v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  int v155;
  _DWORD *v156;
  int v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t v160;
  int *v161;
  int v162;
  uint64_t *v163;
  int v164;
  uint64_t v165;
  int *v166;
  unint64_t v167;
  int v168;
  int *v169;
  int v170;
  _QWORD *v171;
  uint64_t v172;
  int *v173;
  int v174;
  uint64_t **v175;
  uint64_t **v176;
  uint64_t *v177;
  int v178;
  uint64_t v179;
  int *v180;
  unint64_t v181;
  int v182;
  int *v183;
  int v184;
  uint64_t v185;
  std::string *v186;
  OutputCluster *v187;
  int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _DWORD *v192;
  int v193;
  _DWORD *v194;
  int v195;
  _DWORD *v196;
  uint64_t v197;
  uint64_t v198;
  int *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  int *v203;
  int v204;
  uint64_t **v205;
  _QWORD *v206;
  uint64_t v207;
  int *v208;
  int v209;
  uint64_t **v210;
  uint64_t **v211;
  uint64_t *v212;
  int v213;
  uint64_t v214;
  int *v215;
  unint64_t v216;
  int v217;
  int *v218;
  int v219;
  uint64_t v220;
  std::string *v221;
  OutputCluster *v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  _DWORD *v227;
  int v228;
  _DWORD *v229;
  int v230;
  _DWORD *v231;
  uint64_t v232;
  uint64_t v233;
  int *v234;
  int v235;
  uint64_t *v236;
  int v237;
  uint64_t v238;
  int *v239;
  unint64_t v240;
  int v241;
  int *v242;
  int v243;
  _QWORD *v244;
  uint64_t v245;
  int *v246;
  int v247;
  uint64_t **v248;
  uint64_t **v249;
  uint64_t *v250;
  int v251;
  uint64_t v252;
  int *v253;
  unint64_t v254;
  int v255;
  int *v256;
  int v257;
  uint64_t v258;
  std::string *v259;
  OutputCluster *v260;
  int v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  _DWORD *v265;
  int v266;
  _DWORD *v267;
  int v268;
  _DWORD *v269;
  uint64_t v270;
  uint64_t v271;
  int *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  int v277;
  uint64_t **v278;
  _QWORD *v279;
  uint64_t v280;
  int *v281;
  int v282;
  uint64_t **v283;
  uint64_t **v284;
  uint64_t *v285;
  int v286;
  uint64_t v287;
  int *v288;
  unint64_t v289;
  int v290;
  int *v291;
  int v292;
  uint64_t v293;
  uint64_t result;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int *v301;
  int *v302;
  int v303;
  std::string *v304;
  MRLModelWrapper *v305;
  std::string v306;
  int v307;
  void *__p[2];
  char v309;
  std::string __ptr;
  __int128 __str;
  __int128 __str_16;
  int v313;
  int v314;
  _BOOL4 v315;
  __int16 v316;
  char v317;
  int v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;

  v1 = this;
  v322 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 188) = 0;
  *((_DWORD *)this + 46) = -1;
  *((_DWORD *)this + 5) = -1;
  *((_BYTE *)this + 152) = 0;
  v2 = (const char **)((char *)this + 72);
  v3 = *((char *)this + 95);
  v4 = (char *)this + 72;
  if (v3 < 0)
    v4 = *v2;
  v304 = (std::string *)v2;
  v5 = fopen(v4, "rb");
  if (!v5)
    exitFramework(12);
  v6 = v5;
  v7 = (_DWORD *)*((_QWORD *)v1 + 3);
  LODWORD(__ptr.__r_.__value_.__l.__data_) = -1;
  fread(&__ptr, 4uLL, 1uLL, v5);
  data = (int)__ptr.__r_.__value_.__l.__data_;
  v305 = v1;
  if (LODWORD(__ptr.__r_.__value_.__l.__data_) <= 1)
  {
    *(_DWORD *)v1 = -1;
    *((_DWORD *)v1 + 4) = 4;
    if (*((int *)v1 + 5) < 1)
    {
LABEL_7:
      v9 = 32;
      goto LABEL_8;
    }
LABEL_6:
    (*(void (**)(_DWORD *, FILE *, uint64_t))(*(_QWORD *)v7 + 8))(v7, v6, 1);
    *((_DWORD *)v1 + 5) = v7[2];
    goto LABEL_7;
  }
  if (((uint64_t)__ptr.__r_.__value_.__l.__data_ & 0xFFFFFFFE) != 4)
  {
    if (((uint64_t)__ptr.__r_.__value_.__l.__data_ & 0xFFFFFFFE) != 2)
      exitFramework(38);
    __str = xmmword_191A936D0;
    *(_QWORD *)&__str_16 = 0x100000001;
    DWORD2(__str_16) = 32;
    SentenceFileHeader::read((SentenceFileHeader *)&__str, v6);
    *(_DWORD *)v1 = __str_16;
    *((_DWORD *)v1 + 4) = DWORD1(__str);
    if (data != 3)
      goto LABEL_7;
    goto LABEL_6;
  }
  __str = xmmword_191A936D0;
  *(_QWORD *)&__str_16 = 0x100000001;
  DWORD2(__str_16) = 32;
  SentenceFileHeader::read((SentenceFileHeader *)&__str, v6);
  v9 = DWORD2(__str_16);
  *(_DWORD *)v1 = __str_16;
  v39 = DWORD1(__str);
  *((_DWORD *)v1 + 46) = DWORD1(__str_16);
  *((_QWORD *)v1 + 2) = v39;
  if (data == 5)
  {
    (*(void (**)(_DWORD *, FILE *, uint64_t))(*(_QWORD *)v7 + 8))(v7, v6, 1);
    *((_DWORD *)v1 + 5) = v7[2];
  }
LABEL_8:
  v10 = (int *)((char *)v1 + 32);
  v11 = (int *)((char *)v1 + 36);
  fread((char *)v1 + 32, 4uLL, 1uLL, v6);
  fread((char *)v1 + 40, 4uLL, 1uLL, v6);
  fread((char *)v1 + 36, 4uLL, 1uLL, v6);
  if ((v12 & 1) == 0
  {
    v313 = 52;
    __str = xmmword_191AA3C1C;
    __str_16 = unk_191AA3C2C;
    std::unordered_set<int>::unordered_set((int *)&__str, 9);
    __cxa_atexit((void (*)(void *))std::unordered_set<int>::~unordered_set[abi:ne180100], &MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet, &dword_190DAF000);
  }
  *((_BYTE *)v1 + 216) = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet, *((_DWORD *)v1 + 4)) != 0;
  v13 = *((_DWORD *)v1 + 46);
  *((_BYTE *)v1 + 152) = v13 != 1;
  *((_QWORD *)v1 + 18) = 0;
  if (v13 == 3)
  {
    v301 = (int *)((char *)v1 + 36);
    v302 = (int *)((char *)v1 + 32);
    v303 = v9;
    v14 = operator new();
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)v14 = v14 + 8;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 24) = v14 + 32;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = v14 + 56;
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 72) = v14 + 80;
    *(_QWORD *)(v14 + 88) = 0;
    std::__tree<std::string>::destroy(v14, 0);
    *(_QWORD *)v14 = v14 + 8;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 8) = 0;
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v14 + 24, *(char **)(v14 + 32));
    *(_QWORD *)(v14 + 24) = v14 + 32;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    LODWORD(__p[0]) = -1;
    fread(__p, 4uLL, 1uLL, v6);
    v21 = (int)__p[0];
    if (SLODWORD(__p[0]) >= 1)
    {
      do
      {
        __str = 0uLL;
        *(_QWORD *)&__str_16 = 0;
        LODWORD(v306.__r_.__value_.__l.__data_) = 0;
        LODWORD(__ptr.__r_.__value_.__l.__data_) = -1;
        fread(&__ptr, 4uLL, 1uLL, v6);
        data_low = SLODWORD(__ptr.__r_.__value_.__l.__data_);
        std::string::resize((std::string *)&__str, SLODWORD(__ptr.__r_.__value_.__l.__data_), 0);
        if ((SBYTE7(__str_16) & 0x80u) == 0)
          p_str = &__str;
        else
          p_str = (__int128 *)__str;
        fread(p_str, data_low, 1uLL, v6);
        fread(&v306, 4uLL, 1uLL, v6);
        v24 = (int)v306.__r_.__value_.__l.__data_;
        __ptr.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v14, &__str, (__int128 **)&__ptr)+ 14) = v24;
        v25 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v14 + 24), v24, &v306);
        std::string::operator=((std::string *)(v25 + 5), (const std::string *)&__str);
        if (SBYTE7(__str_16) < 0)
          operator delete((void *)__str);
        --v21;
      }
      while (v21);
    }
    std::__tree<int>::destroy(*(_QWORD **)(v14 + 56));
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)(v14 + 48) = v14 + 56;
    std::__tree<int>::destroy(*(_QWORD **)(v14 + 80));
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    *(_QWORD *)(v14 + 72) = v14 + 80;
    LODWORD(__str) = -1;
    fread(&__str, 4uLL, 1uLL, v6);
    v26 = __str;
    if ((int)__str >= 1)
    {
      do
      {
        LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
        LODWORD(v306.__r_.__value_.__l.__data_) = 0;
        fread(&__ptr, 4uLL, 1uLL, v6);
        fread(&v306, 4uLL, 1uLL, v6);
        v27 = (int)v306.__r_.__value_.__l.__data_;
        v28 = (int)__ptr.__r_.__value_.__l.__data_;
        *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(v14 + 48), (int)__ptr.__r_.__value_.__l.__data_, (unsigned int *)&__ptr)+ 8) = v27;
        *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(v14 + 72), v27, (unsigned int *)&v306)+ 8) = v28;
        --v26;
      }
      while (v26);
    }
  }
  else
  {
    if (v13 != 2)
      goto LABEL_30;
    v301 = (int *)((char *)v1 + 36);
    v302 = (int *)((char *)v1 + 32);
    v303 = v9;
    v14 = operator new();
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)v14 = v14 + 8;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 24) = v14 + 32;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = v14 + 56;
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 72) = v14 + 80;
    *(_QWORD *)(v14 + 88) = 0;
    std::__tree<int>::destroy(0);
    *(_QWORD *)v14 = v14 + 8;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 8) = 0;
    std::__tree<int>::destroy(*(_QWORD **)(v14 + 32));
    *(_QWORD *)(v14 + 24) = v14 + 32;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    LODWORD(__str) = -1;
    fread(&__str, 4uLL, 1uLL, v6);
    v15 = __str;
    if ((int)__str >= 1)
    {
      do
      {
        LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
        LODWORD(__p[0]) = 0;
        fread(&__ptr, 4uLL, 1uLL, v6);
        fread(__p, 4uLL, 1uLL, v6);
        v16 = (int)__p[0];
        v17 = (int)__ptr.__r_.__value_.__l.__data_;
        *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v14, (int)__ptr.__r_.__value_.__l.__data_, (unsigned int *)&__ptr)+ 8) = v16;
        *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(v14 + 24), v16, (unsigned int *)__p)+ 8) = v17;
        --v15;
      }
      while (v15);
    }
    std::__tree<int>::destroy(*(_QWORD **)(v14 + 56));
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)(v14 + 48) = v14 + 56;
    std::__tree<int>::destroy(*(_QWORD **)(v14 + 80));
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    *(_QWORD *)(v14 + 72) = v14 + 80;
    LODWORD(__ptr.__r_.__value_.__l.__data_) = -1;
    fread(&__ptr, 4uLL, 1uLL, v6);
    v18 = (int)__ptr.__r_.__value_.__l.__data_;
    if (SLODWORD(__ptr.__r_.__value_.__l.__data_) >= 1)
    {
      do
      {
        LODWORD(__p[0]) = 0;
        LODWORD(v306.__r_.__value_.__l.__data_) = 0;
        fread(__p, 4uLL, 1uLL, v6);
        fread(&v306, 4uLL, 1uLL, v6);
        v19 = (int)v306.__r_.__value_.__l.__data_;
        v20 = (int)__p[0];
        *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(v14 + 48), (int)__p[0], (unsigned int *)__p)+ 8) = v19;
        *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(v14 + 72), v19, (unsigned int *)&v306)+ 8) = v20;
        --v18;
      }
      while (v18);
    }
  }
  v11 = v301;
  v10 = v302;
  v1 = v305;
  *((_QWORD *)v305 + 18) = v14;
  v9 = v303;
LABEL_30:
  *((_QWORD *)v1 + 17) = v9;
  fclose(v6);
  maxFeatureVectors = 2;
  if (*((_BYTE *)v1 + 216))
    v29 = 70;
  else
    v29 = 2;
  *((_DWORD *)v1 + 56) = v29;
  NewEncoder = MRLModelWrapper::makeNewEncoder(v1, *(_DWORD *)v1, v10, v11, *((_DWORD *)v1 + 8), *((_DWORD *)v1 + 9));
  *((_QWORD *)v1 + 1) = NewEncoder;
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)NewEncoder + 16))(NewEncoder);
  v32 = *((_DWORD *)v1 + 8);
  v33 = *(_DWORD *)v1;
  LODWORD(__str) = *((_DWORD *)v1 + 4);
  DWORD1(__str) = v32;
  *((int32x2_t *)&__str + 1) = vrev64_s32(*(int32x2_t *)((char *)v1 + 36));
  *(_QWORD *)&__str_16 = 0x3F6666663C23D70ALL;
  *((_QWORD *)&__str_16 + 1) = 0x3FEFF7CED916872BLL;
  v313 = 0;
  v314 = v33;
  v315 = v31 == 1;
  v316 = 256;
  v317 = 1;
  v318 = v9;
  v319 = 1;
  v320 = 0;
  v321 = 0;
  if ((v9 & 7) != 0)
    exitFramework(234);
  v34 = operator new();
  SentenceRecognizer::SentenceRecognizer(v34, &__str, *((_QWORD *)v1 + 3));
  *((_QWORD *)v1 + 15) = v34;
  if (*((_BYTE *)v1 + 216))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v34 + 40) + 184))(*(_QWORD *)(v34 + 40));
    v1 = v305;
  }
  if (*((_BYTE *)v1 + 152))
  {
    v35 = *((_DWORD *)v1 + 46);
    if ((v35 & 0xFFFFFFFE) != 2)
      exitFramework(19);
    v36 = *((_QWORD *)v1 + 18);
    if (v35 != 2)
    {
      if (v9 == 16)
      {
        v37 = *((_QWORD *)v1 + 15);
        if (*((char *)v1 + 95) < 0)
        {
          std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
          v1 = v305;
        }
        else
        {
          v306 = *v304;
        }
        v185 = operator new();
        if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v186 = &v306;
        else
          v186 = (std::string *)v306.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v186);
        std::string::basic_string[abi:ne180100]<0>(__p, "r");
        ReadOnlyFile::ReadOnlyFile(v185, (__int128 *)&__ptr, (const std::string::value_type *)__p);
        *(_QWORD *)(v37 + 96) = v185;
        if (v309 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__ptr.__r_.__value_.__l.__data_);
        SentenceRecognizer::processReadDataFileHeader(v37, *(ReadOnlyFile **)(v37 + 96), v37 + 64, *(SentenceFileHeader **)(v37 + 56), v187);
        if (*(_DWORD *)(v37 + 88) == 16)
        {
          v188 = *(_DWORD *)(v37 + 84);
          if ((v188 & 0xFFFFFFFE) == 2)
          {
            if (v188 == 3)
            {
              v189 = *(uint64_t **)(v37 + 96);
              v190 = *v189;
              v191 = v189[1];
              v192 = (_DWORD *)(*v189 + *((int *)v189 + 18));
              if ((unint64_t)v192 <= *v189 + v191 - 4)
              {
                *(_DWORD *)v37 = *v192;
                v193 = *((_DWORD *)v189 + 18) + 4;
                *((_DWORD *)v189 + 18) = v193;
                v190 = *v189;
                v191 = v189[1];
              }
              else
              {
                *(_DWORD *)v37 = 0;
                v193 = *((_DWORD *)v189 + 18);
              }
              v194 = (_DWORD *)(v190 + v193);
              if ((unint64_t)v194 <= v190 + v191 - 4)
              {
                *(_DWORD *)(v37 + 4) = *v194;
                v195 = *((_DWORD *)v189 + 18) + 4;
                *((_DWORD *)v189 + 18) = v195;
                v190 = *v189;
                v191 = v189[1];
              }
              else
              {
                *(_DWORD *)(v37 + 4) = 0;
                v195 = *((_DWORD *)v189 + 18);
              }
              v196 = (_DWORD *)(v190 + v195);
              if ((unint64_t)v196 <= v190 + v191 - 4)
              {
                *(_DWORD *)(v37 + 8) = *v196;
                *((_DWORD *)v189 + 18) += 4;
              }
              else
              {
                *(_DWORD *)(v37 + 8) = 0;
              }
              std::__tree<std::string>::destroy(v36, *(char **)(v36 + 8));
              *(_QWORD *)v36 = v36 + 8;
              *(_QWORD *)(v36 + 16) = 0;
              *(_QWORD *)(v36 + 8) = 0;
              std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v36 + 24, *(char **)(v36 + 32));
              *(_QWORD *)(v36 + 24) = v36 + 32;
              *(_QWORD *)(v36 + 40) = 0;
              *(_QWORD *)(v36 + 32) = 0;
              v197 = *(_QWORD *)(v37 + 96);
              v198 = *(int *)(v197 + 72);
              v199 = (int *)(*(_QWORD *)v197 + v198);
              if ((unint64_t)v199 <= *(_QWORD *)v197 + *(_QWORD *)(v197 + 8) - 4)
              {
                v200 = *v199;
                *(_DWORD *)(v197 + 72) = v198 + 4;
                if (v200 >= 1)
                {
                  do
                  {
                    memset(&__ptr, 0, sizeof(__ptr));
                    ReadOnlyFile::readOneString(*(_QWORD *)(v37 + 96), &__ptr);
                    v201 = *(_QWORD *)(v37 + 96);
                    v202 = *(int *)(v201 + 72);
                    v203 = (int *)(*(_QWORD *)v201 + v202);
                    if ((unint64_t)v203 <= *(_QWORD *)v201 + *(_QWORD *)(v201 + 8) - 4)
                    {
                      v204 = *v203;
                      *(_DWORD *)(v201 + 72) = v202 + 4;
                    }
                    else
                    {
                      v204 = 0;
                    }
                    v307 = v204;
                    __p[0] = &__ptr;
                    *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v36, &__ptr, (__int128 **)__p)+ 14) = v204;
                    v205 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v36 + 24), v204, &v307);
                    std::string::operator=((std::string *)(v205 + 5), &__ptr);
                    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__ptr.__r_.__value_.__l.__data_);
                    --v200;
                  }
                  while (v200);
                }
              }
              std::__tree<int>::destroy(*(_QWORD **)(v36 + 56));
              v206 = *(_QWORD **)(v36 + 80);
              *(_QWORD *)(v36 + 48) = v36 + 56;
              *(_QWORD *)(v36 + 56) = 0;
              *(_QWORD *)(v36 + 64) = 0;
              std::__tree<int>::destroy(v206);
              *(_QWORD *)(v36 + 72) = v36 + 80;
              *(_QWORD *)(v36 + 80) = 0;
              *(_QWORD *)(v36 + 88) = 0;
              v98 = *(_QWORD *)(v37 + 96);
              v207 = *(int *)(v98 + 72);
              v208 = (int *)(*(_QWORD *)v98 + v207);
              if ((unint64_t)v208 <= *(_QWORD *)v98 + *(_QWORD *)(v98 + 8) - 4)
              {
                v209 = *v208;
                *(_DWORD *)(v98 + 72) = v207 + 4;
                if (v209 >= 1)
                {
                  v210 = (uint64_t **)(v36 + 48);
                  v211 = (uint64_t **)(v36 + 72);
                  do
                  {
                    v212 = *(uint64_t **)(v37 + 96);
                    v213 = *((_DWORD *)v212 + 18);
                    v214 = *v212;
                    v215 = (int *)(*v212 + v213);
                    v216 = *v212 + v212[1] - 4;
                    if ((unint64_t)v215 <= v216)
                    {
                      v217 = *v215;
                      v213 += 4;
                      *((_DWORD *)v212 + 18) = v213;
                    }
                    else
                    {
                      v217 = 0;
                    }
                    LODWORD(__ptr.__r_.__value_.__l.__data_) = v217;
                    v218 = (int *)(v214 + v213);
                    if ((unint64_t)v218 <= v216)
                    {
                      v219 = *v218;
                      *((_DWORD *)v212 + 18) = v213 + 4;
                    }
                    else
                    {
                      v219 = 0;
                    }
                    LODWORD(__p[0]) = v219;
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v210, v217, (unsigned int *)&__ptr)+ 8) = v219;
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v211, v219, (unsigned int *)__p)+ 8) = v217;
                    --v209;
                  }
                  while (v209);
                  v98 = *(_QWORD *)(v37 + 96);
                }
              }
              goto LABEL_365;
            }
            v298 = 35;
          }
          else
          {
            v298 = 34;
          }
        }
        else
        {
          v298 = 33;
        }
        exitFramework(v298);
      }
      if (v9 != 8)
      {
        v37 = *((_QWORD *)v1 + 15);
        if (*((char *)v1 + 95) < 0)
        {
          std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
          v1 = v305;
        }
        else
        {
          v306 = *v304;
        }
        v258 = operator new();
        if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v259 = &v306;
        else
          v259 = (std::string *)v306.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v259);
        std::string::basic_string[abi:ne180100]<0>(__p, "r");
        ReadOnlyFile::ReadOnlyFile(v258, (__int128 *)&__ptr, (const std::string::value_type *)__p);
        *(_QWORD *)(v37 + 96) = v258;
        if (v309 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__ptr.__r_.__value_.__l.__data_);
        SentenceRecognizer::processReadDataFileHeader(v37, *(ReadOnlyFile **)(v37 + 96), v37 + 64, *(SentenceFileHeader **)(v37 + 56), v260);
        if (*(_DWORD *)(v37 + 88) == 32)
        {
          v261 = *(_DWORD *)(v37 + 84);
          if ((v261 & 0xFFFFFFFE) == 2)
          {
            if (v261 == 3)
            {
              v262 = *(uint64_t **)(v37 + 96);
              v263 = *v262;
              v264 = v262[1];
              v265 = (_DWORD *)(*v262 + *((int *)v262 + 18));
              if ((unint64_t)v265 <= *v262 + v264 - 4)
              {
                *(_DWORD *)v37 = *v265;
                v266 = *((_DWORD *)v262 + 18) + 4;
                *((_DWORD *)v262 + 18) = v266;
                v263 = *v262;
                v264 = v262[1];
              }
              else
              {
                *(_DWORD *)v37 = 0;
                v266 = *((_DWORD *)v262 + 18);
              }
              v267 = (_DWORD *)(v263 + v266);
              if ((unint64_t)v267 <= v263 + v264 - 4)
              {
                *(_DWORD *)(v37 + 4) = *v267;
                v268 = *((_DWORD *)v262 + 18) + 4;
                *((_DWORD *)v262 + 18) = v268;
                v263 = *v262;
                v264 = v262[1];
              }
              else
              {
                *(_DWORD *)(v37 + 4) = 0;
                v268 = *((_DWORD *)v262 + 18);
              }
              v269 = (_DWORD *)(v263 + v268);
              if ((unint64_t)v269 <= v263 + v264 - 4)
              {
                *(_DWORD *)(v37 + 8) = *v269;
                *((_DWORD *)v262 + 18) += 4;
              }
              else
              {
                *(_DWORD *)(v37 + 8) = 0;
              }
              std::__tree<std::string>::destroy(v36, *(char **)(v36 + 8));
              *(_QWORD *)v36 = v36 + 8;
              *(_QWORD *)(v36 + 16) = 0;
              *(_QWORD *)(v36 + 8) = 0;
              std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v36 + 24, *(char **)(v36 + 32));
              *(_QWORD *)(v36 + 24) = v36 + 32;
              *(_QWORD *)(v36 + 40) = 0;
              *(_QWORD *)(v36 + 32) = 0;
              v270 = *(_QWORD *)(v37 + 96);
              v271 = *(int *)(v270 + 72);
              v272 = (int *)(*(_QWORD *)v270 + v271);
              if ((unint64_t)v272 <= *(_QWORD *)v270 + *(_QWORD *)(v270 + 8) - 4)
              {
                v273 = *v272;
                *(_DWORD *)(v270 + 72) = v271 + 4;
                if (v273 >= 1)
                {
                  do
                  {
                    memset(&__ptr, 0, sizeof(__ptr));
                    ReadOnlyFile::readOneString(*(_QWORD *)(v37 + 96), &__ptr);
                    v274 = *(_QWORD *)(v37 + 96);
                    v275 = *(int *)(v274 + 72);
                    v276 = (int *)(*(_QWORD *)v274 + v275);
                    if ((unint64_t)v276 <= *(_QWORD *)v274 + *(_QWORD *)(v274 + 8) - 4)
                    {
                      v277 = *v276;
                      *(_DWORD *)(v274 + 72) = v275 + 4;
                    }
                    else
                    {
                      v277 = 0;
                    }
                    v307 = v277;
                    __p[0] = &__ptr;
                    *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v36, &__ptr, (__int128 **)__p)+ 14) = v277;
                    v278 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v36 + 24), v277, &v307);
                    std::string::operator=((std::string *)(v278 + 5), &__ptr);
                    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__ptr.__r_.__value_.__l.__data_);
                    --v273;
                  }
                  while (v273);
                }
              }
              std::__tree<int>::destroy(*(_QWORD **)(v36 + 56));
              v279 = *(_QWORD **)(v36 + 80);
              *(_QWORD *)(v36 + 48) = v36 + 56;
              *(_QWORD *)(v36 + 56) = 0;
              *(_QWORD *)(v36 + 64) = 0;
              std::__tree<int>::destroy(v279);
              *(_QWORD *)(v36 + 72) = v36 + 80;
              *(_QWORD *)(v36 + 80) = 0;
              *(_QWORD *)(v36 + 88) = 0;
              v98 = *(_QWORD *)(v37 + 96);
              v280 = *(int *)(v98 + 72);
              v281 = (int *)(*(_QWORD *)v98 + v280);
              if ((unint64_t)v281 <= *(_QWORD *)v98 + *(_QWORD *)(v98 + 8) - 4)
              {
                v282 = *v281;
                *(_DWORD *)(v98 + 72) = v280 + 4;
                if (v282 >= 1)
                {
                  v283 = (uint64_t **)(v36 + 48);
                  v284 = (uint64_t **)(v36 + 72);
                  do
                  {
                    v285 = *(uint64_t **)(v37 + 96);
                    v286 = *((_DWORD *)v285 + 18);
                    v287 = *v285;
                    v288 = (int *)(*v285 + v286);
                    v289 = *v285 + v285[1] - 4;
                    if ((unint64_t)v288 <= v289)
                    {
                      v290 = *v288;
                      v286 += 4;
                      *((_DWORD *)v285 + 18) = v286;
                    }
                    else
                    {
                      v290 = 0;
                    }
                    LODWORD(__ptr.__r_.__value_.__l.__data_) = v290;
                    v291 = (int *)(v287 + v286);
                    if ((unint64_t)v291 <= v289)
                    {
                      v292 = *v291;
                      *((_DWORD *)v285 + 18) = v286 + 4;
                    }
                    else
                    {
                      v292 = 0;
                    }
                    LODWORD(__p[0]) = v292;
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v283, v290, (unsigned int *)&__ptr)+ 8) = v292;
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v284, v292, (unsigned int *)__p)+ 8) = v290;
                    --v282;
                  }
                  while (v282);
                  v98 = *(_QWORD *)(v37 + 96);
                }
              }
              goto LABEL_365;
            }
            v300 = 35;
          }
          else
          {
            v300 = 34;
          }
        }
        else
        {
          v300 = 33;
        }
        exitFramework(v300);
      }
      v37 = *((_QWORD *)v1 + 15);
      if (*((char *)v1 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
        v1 = v305;
      }
      else
      {
        v306 = *v304;
      }
      v112 = operator new();
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v113 = &v306;
      else
        v113 = (std::string *)v306.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v113);
      std::string::basic_string[abi:ne180100]<0>(__p, "r");
      ReadOnlyFile::ReadOnlyFile(v112, (__int128 *)&__ptr, (const std::string::value_type *)__p);
      *(_QWORD *)(v37 + 96) = v112;
      if (v309 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__ptr.__r_.__value_.__l.__data_);
      SentenceRecognizer::processReadDataFileHeader(v37, *(ReadOnlyFile **)(v37 + 96), v37 + 64, *(SentenceFileHeader **)(v37 + 56), v114);
      if (*(_DWORD *)(v37 + 88) == 8)
      {
        v115 = *(_DWORD *)(v37 + 84);
        if ((v115 & 0xFFFFFFFE) == 2)
        {
          if (v115 == 3)
          {
            v116 = *(uint64_t **)(v37 + 96);
            v117 = *v116;
            v118 = v116[1];
            v119 = (_DWORD *)(*v116 + *((int *)v116 + 18));
            if ((unint64_t)v119 <= *v116 + v118 - 4)
            {
              *(_DWORD *)v37 = *v119;
              v120 = *((_DWORD *)v116 + 18) + 4;
              *((_DWORD *)v116 + 18) = v120;
              v117 = *v116;
              v118 = v116[1];
            }
            else
            {
              *(_DWORD *)v37 = 0;
              v120 = *((_DWORD *)v116 + 18);
            }
            v121 = (_DWORD *)(v117 + v120);
            if ((unint64_t)v121 <= v117 + v118 - 4)
            {
              *(_DWORD *)(v37 + 4) = *v121;
              v122 = *((_DWORD *)v116 + 18) + 4;
              *((_DWORD *)v116 + 18) = v122;
              v117 = *v116;
              v118 = v116[1];
            }
            else
            {
              *(_DWORD *)(v37 + 4) = 0;
              v122 = *((_DWORD *)v116 + 18);
            }
            v123 = (_DWORD *)(v117 + v122);
            if ((unint64_t)v123 <= v117 + v118 - 4)
            {
              *(_DWORD *)(v37 + 8) = *v123;
              *((_DWORD *)v116 + 18) += 4;
            }
            else
            {
              *(_DWORD *)(v37 + 8) = 0;
            }
            std::__tree<std::string>::destroy(v36, *(char **)(v36 + 8));
            *(_QWORD *)v36 = v36 + 8;
            *(_QWORD *)(v36 + 16) = 0;
            *(_QWORD *)(v36 + 8) = 0;
            std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v36 + 24, *(char **)(v36 + 32));
            *(_QWORD *)(v36 + 24) = v36 + 32;
            *(_QWORD *)(v36 + 40) = 0;
            *(_QWORD *)(v36 + 32) = 0;
            v124 = *(_QWORD *)(v37 + 96);
            v125 = *(int *)(v124 + 72);
            v126 = (int *)(*(_QWORD *)v124 + v125);
            if ((unint64_t)v126 <= *(_QWORD *)v124 + *(_QWORD *)(v124 + 8) - 4)
            {
              v127 = *v126;
              *(_DWORD *)(v124 + 72) = v125 + 4;
              if (v127 >= 1)
              {
                do
                {
                  memset(&__ptr, 0, sizeof(__ptr));
                  ReadOnlyFile::readOneString(*(_QWORD *)(v37 + 96), &__ptr);
                  v128 = *(_QWORD *)(v37 + 96);
                  v129 = *(int *)(v128 + 72);
                  v130 = (int *)(*(_QWORD *)v128 + v129);
                  if ((unint64_t)v130 <= *(_QWORD *)v128 + *(_QWORD *)(v128 + 8) - 4)
                  {
                    v131 = *v130;
                    *(_DWORD *)(v128 + 72) = v129 + 4;
                  }
                  else
                  {
                    v131 = 0;
                  }
                  v307 = v131;
                  __p[0] = &__ptr;
                  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v36, &__ptr, (__int128 **)__p)+ 14) = v131;
                  v132 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v36 + 24), v131, &v307);
                  std::string::operator=((std::string *)(v132 + 5), &__ptr);
                  if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__ptr.__r_.__value_.__l.__data_);
                  --v127;
                }
                while (v127);
              }
            }
            std::__tree<int>::destroy(*(_QWORD **)(v36 + 56));
            v133 = *(_QWORD **)(v36 + 80);
            *(_QWORD *)(v36 + 48) = v36 + 56;
            *(_QWORD *)(v36 + 56) = 0;
            *(_QWORD *)(v36 + 64) = 0;
            std::__tree<int>::destroy(v133);
            *(_QWORD *)(v36 + 72) = v36 + 80;
            *(_QWORD *)(v36 + 80) = 0;
            *(_QWORD *)(v36 + 88) = 0;
            v98 = *(_QWORD *)(v37 + 96);
            v134 = *(int *)(v98 + 72);
            v135 = (int *)(*(_QWORD *)v98 + v134);
            if ((unint64_t)v135 <= *(_QWORD *)v98 + *(_QWORD *)(v98 + 8) - 4)
            {
              v136 = *v135;
              *(_DWORD *)(v98 + 72) = v134 + 4;
              if (v136 >= 1)
              {
                v137 = (uint64_t **)(v36 + 48);
                v138 = (uint64_t **)(v36 + 72);
                do
                {
                  v139 = *(uint64_t **)(v37 + 96);
                  v140 = *((_DWORD *)v139 + 18);
                  v141 = *v139;
                  v142 = (int *)(*v139 + v140);
                  v143 = *v139 + v139[1] - 4;
                  if ((unint64_t)v142 <= v143)
                  {
                    v144 = *v142;
                    v140 += 4;
                    *((_DWORD *)v139 + 18) = v140;
                  }
                  else
                  {
                    v144 = 0;
                  }
                  LODWORD(__ptr.__r_.__value_.__l.__data_) = v144;
                  v145 = (int *)(v141 + v140);
                  if ((unint64_t)v145 <= v143)
                  {
                    v146 = *v145;
                    *((_DWORD *)v139 + 18) = v140 + 4;
                  }
                  else
                  {
                    v146 = 0;
                  }
                  LODWORD(__p[0]) = v146;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v137, v144, (unsigned int *)&__ptr)+ 8) = v146;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v138, v146, (unsigned int *)__p)+ 8) = v144;
                  --v136;
                }
                while (v136);
                v98 = *(_QWORD *)(v37 + 96);
              }
            }
            goto LABEL_365;
          }
          v296 = 35;
        }
        else
        {
          v296 = 34;
        }
      }
      else
      {
        v296 = 33;
      }
      exitFramework(v296);
    }
    if (v9 == 16)
    {
      v37 = *((_QWORD *)v1 + 15);
      if (*((char *)v1 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
        v1 = v305;
      }
      else
      {
        v306 = *v304;
      }
      v147 = operator new();
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v148 = &v306;
      else
        v148 = (std::string *)v306.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v148);
      std::string::basic_string[abi:ne180100]<0>(__p, "r");
      ReadOnlyFile::ReadOnlyFile(v147, (__int128 *)&__ptr, (const std::string::value_type *)__p);
      *(_QWORD *)(v37 + 96) = v147;
      if (v309 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__ptr.__r_.__value_.__l.__data_);
      SentenceRecognizer::processReadDataFileHeader(v37, *(ReadOnlyFile **)(v37 + 96), v37 + 64, *(SentenceFileHeader **)(v37 + 56), v149);
      if (*(_DWORD *)(v37 + 88) == 16)
      {
        v150 = *(_DWORD *)(v37 + 84);
        if ((v150 & 0xFFFFFFFE) == 2)
        {
          if (v150 == 2)
          {
            v151 = *(uint64_t **)(v37 + 96);
            v152 = *v151;
            v153 = v151[1];
            v154 = (_DWORD *)(*v151 + *((int *)v151 + 18));
            if ((unint64_t)v154 <= *v151 + v153 - 4)
            {
              *(_DWORD *)v37 = *v154;
              v155 = *((_DWORD *)v151 + 18) + 4;
              *((_DWORD *)v151 + 18) = v155;
              v152 = *v151;
              v153 = v151[1];
            }
            else
            {
              *(_DWORD *)v37 = 0;
              v155 = *((_DWORD *)v151 + 18);
            }
            v156 = (_DWORD *)(v152 + v155);
            if ((unint64_t)v156 <= v152 + v153 - 4)
            {
              *(_DWORD *)(v37 + 4) = *v156;
              v157 = *((_DWORD *)v151 + 18) + 4;
              *((_DWORD *)v151 + 18) = v157;
              v152 = *v151;
              v153 = v151[1];
            }
            else
            {
              *(_DWORD *)(v37 + 4) = 0;
              v157 = *((_DWORD *)v151 + 18);
            }
            v158 = (_DWORD *)(v152 + v157);
            if ((unint64_t)v158 <= v152 + v153 - 4)
            {
              *(_DWORD *)(v37 + 8) = *v158;
              *((_DWORD *)v151 + 18) += 4;
            }
            else
            {
              *(_DWORD *)(v37 + 8) = 0;
            }
            std::__tree<int>::destroy(*(_QWORD **)(v36 + 8));
            *(_QWORD *)v36 = v36 + 8;
            *(_QWORD *)(v36 + 16) = 0;
            *(_QWORD *)(v36 + 8) = 0;
            std::__tree<int>::destroy(*(_QWORD **)(v36 + 32));
            *(_QWORD *)(v36 + 24) = v36 + 32;
            *(_QWORD *)(v36 + 40) = 0;
            *(_QWORD *)(v36 + 32) = 0;
            v159 = *(_QWORD *)(v37 + 96);
            v160 = *(int *)(v159 + 72);
            v161 = (int *)(*(_QWORD *)v159 + v160);
            if ((unint64_t)v161 <= *(_QWORD *)v159 + *(_QWORD *)(v159 + 8) - 4)
            {
              v162 = *v161;
              *(_DWORD *)(v159 + 72) = v160 + 4;
              if (v162 >= 1)
              {
                do
                {
                  v163 = *(uint64_t **)(v37 + 96);
                  v164 = *((_DWORD *)v163 + 18);
                  v165 = *v163;
                  v166 = (int *)(*v163 + v164);
                  v167 = *v163 + v163[1] - 4;
                  if ((unint64_t)v166 <= v167)
                  {
                    v168 = *v166;
                    v164 += 4;
                    *((_DWORD *)v163 + 18) = v164;
                  }
                  else
                  {
                    v168 = 0;
                  }
                  LODWORD(__ptr.__r_.__value_.__l.__data_) = v168;
                  v169 = (int *)(v165 + v164);
                  if ((unint64_t)v169 <= v167)
                  {
                    v170 = *v169;
                    *((_DWORD *)v163 + 18) = v164 + 4;
                  }
                  else
                  {
                    v170 = 0;
                  }
                  LODWORD(__p[0]) = v170;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v36, v168, (unsigned int *)&__ptr)+ 8) = v170;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(v36 + 24), v170, (unsigned int *)__p)+ 8) = v168;
                  --v162;
                }
                while (v162);
              }
            }
            std::__tree<int>::destroy(*(_QWORD **)(v36 + 56));
            v171 = *(_QWORD **)(v36 + 80);
            *(_QWORD *)(v36 + 48) = v36 + 56;
            *(_QWORD *)(v36 + 56) = 0;
            *(_QWORD *)(v36 + 64) = 0;
            std::__tree<int>::destroy(v171);
            *(_QWORD *)(v36 + 72) = v36 + 80;
            *(_QWORD *)(v36 + 80) = 0;
            *(_QWORD *)(v36 + 88) = 0;
            v98 = *(_QWORD *)(v37 + 96);
            v172 = *(int *)(v98 + 72);
            v173 = (int *)(*(_QWORD *)v98 + v172);
            if ((unint64_t)v173 <= *(_QWORD *)v98 + *(_QWORD *)(v98 + 8) - 4)
            {
              v174 = *v173;
              *(_DWORD *)(v98 + 72) = v172 + 4;
              if (v174 >= 1)
              {
                v175 = (uint64_t **)(v36 + 48);
                v176 = (uint64_t **)(v36 + 72);
                do
                {
                  v177 = *(uint64_t **)(v37 + 96);
                  v178 = *((_DWORD *)v177 + 18);
                  v179 = *v177;
                  v180 = (int *)(*v177 + v178);
                  v181 = *v177 + v177[1] - 4;
                  if ((unint64_t)v180 <= v181)
                  {
                    v182 = *v180;
                    v178 += 4;
                    *((_DWORD *)v177 + 18) = v178;
                  }
                  else
                  {
                    v182 = 0;
                  }
                  LODWORD(__ptr.__r_.__value_.__l.__data_) = v182;
                  v183 = (int *)(v179 + v178);
                  if ((unint64_t)v183 <= v181)
                  {
                    v184 = *v183;
                    *((_DWORD *)v177 + 18) = v178 + 4;
                  }
                  else
                  {
                    v184 = 0;
                  }
                  LODWORD(__p[0]) = v184;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v175, v182, (unsigned int *)&__ptr)+ 8) = v184;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v176, v184, (unsigned int *)__p)+ 8) = v182;
                  --v174;
                }
                while (v174);
                v98 = *(_QWORD *)(v37 + 96);
              }
            }
            goto LABEL_365;
          }
          v297 = 35;
        }
        else
        {
          v297 = 34;
        }
      }
      else
      {
        v297 = 33;
      }
      exitFramework(v297);
    }
    if (v9 == 8)
    {
      v37 = *((_QWORD *)v1 + 15);
      if (*((char *)v1 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
        v1 = v305;
      }
      else
      {
        v306 = *v304;
      }
      v73 = operator new();
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v306;
      else
        v74 = (std::string *)v306.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v74);
      std::string::basic_string[abi:ne180100]<0>(__p, "r");
      ReadOnlyFile::ReadOnlyFile(v73, (__int128 *)&__ptr, (const std::string::value_type *)__p);
      *(_QWORD *)(v37 + 96) = v73;
      if (v309 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__ptr.__r_.__value_.__l.__data_);
      SentenceRecognizer::processReadDataFileHeader(v37, *(ReadOnlyFile **)(v37 + 96), v37 + 64, *(SentenceFileHeader **)(v37 + 56), v75);
      if (*(_DWORD *)(v37 + 88) == 8)
      {
        v76 = *(_DWORD *)(v37 + 84);
        if ((v76 & 0xFFFFFFFE) == 2)
        {
          if (v76 == 2)
          {
            v77 = *(uint64_t **)(v37 + 96);
            v78 = *v77;
            v79 = v77[1];
            v80 = (_DWORD *)(*v77 + *((int *)v77 + 18));
            if ((unint64_t)v80 <= *v77 + v79 - 4)
            {
              *(_DWORD *)v37 = *v80;
              v81 = *((_DWORD *)v77 + 18) + 4;
              *((_DWORD *)v77 + 18) = v81;
              v78 = *v77;
              v79 = v77[1];
            }
            else
            {
              *(_DWORD *)v37 = 0;
              v81 = *((_DWORD *)v77 + 18);
            }
            v82 = (_DWORD *)(v78 + v81);
            if ((unint64_t)v82 <= v78 + v79 - 4)
            {
              *(_DWORD *)(v37 + 4) = *v82;
              v83 = *((_DWORD *)v77 + 18) + 4;
              *((_DWORD *)v77 + 18) = v83;
              v78 = *v77;
              v79 = v77[1];
            }
            else
            {
              *(_DWORD *)(v37 + 4) = 0;
              v83 = *((_DWORD *)v77 + 18);
            }
            v84 = (_DWORD *)(v78 + v83);
            if ((unint64_t)v84 <= v78 + v79 - 4)
            {
              *(_DWORD *)(v37 + 8) = *v84;
              *((_DWORD *)v77 + 18) += 4;
            }
            else
            {
              *(_DWORD *)(v37 + 8) = 0;
            }
            std::__tree<int>::destroy(*(_QWORD **)(v36 + 8));
            *(_QWORD *)v36 = v36 + 8;
            *(_QWORD *)(v36 + 16) = 0;
            *(_QWORD *)(v36 + 8) = 0;
            std::__tree<int>::destroy(*(_QWORD **)(v36 + 32));
            *(_QWORD *)(v36 + 24) = v36 + 32;
            *(_QWORD *)(v36 + 40) = 0;
            *(_QWORD *)(v36 + 32) = 0;
            v85 = *(_QWORD *)(v37 + 96);
            v86 = *(int *)(v85 + 72);
            v87 = (int *)(*(_QWORD *)v85 + v86);
            if ((unint64_t)v87 <= *(_QWORD *)v85 + *(_QWORD *)(v85 + 8) - 4)
            {
              v88 = *v87;
              *(_DWORD *)(v85 + 72) = v86 + 4;
              if (v88 >= 1)
              {
                do
                {
                  v89 = *(uint64_t **)(v37 + 96);
                  v90 = *((_DWORD *)v89 + 18);
                  v91 = *v89;
                  v92 = (int *)(*v89 + v90);
                  v93 = *v89 + v89[1] - 4;
                  if ((unint64_t)v92 <= v93)
                  {
                    v94 = *v92;
                    v90 += 4;
                    *((_DWORD *)v89 + 18) = v90;
                  }
                  else
                  {
                    v94 = 0;
                  }
                  LODWORD(__ptr.__r_.__value_.__l.__data_) = v94;
                  v95 = (int *)(v91 + v90);
                  if ((unint64_t)v95 <= v93)
                  {
                    v96 = *v95;
                    *((_DWORD *)v89 + 18) = v90 + 4;
                  }
                  else
                  {
                    v96 = 0;
                  }
                  LODWORD(__p[0]) = v96;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v36, v94, (unsigned int *)&__ptr)+ 8) = v96;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(v36 + 24), v96, (unsigned int *)__p)+ 8) = v94;
                  --v88;
                }
                while (v88);
              }
            }
            std::__tree<int>::destroy(*(_QWORD **)(v36 + 56));
            v97 = *(_QWORD **)(v36 + 80);
            *(_QWORD *)(v36 + 48) = v36 + 56;
            *(_QWORD *)(v36 + 56) = 0;
            *(_QWORD *)(v36 + 64) = 0;
            std::__tree<int>::destroy(v97);
            *(_QWORD *)(v36 + 72) = v36 + 80;
            *(_QWORD *)(v36 + 80) = 0;
            *(_QWORD *)(v36 + 88) = 0;
            v98 = *(_QWORD *)(v37 + 96);
            v99 = *(int *)(v98 + 72);
            v100 = (int *)(*(_QWORD *)v98 + v99);
            if ((unint64_t)v100 <= *(_QWORD *)v98 + *(_QWORD *)(v98 + 8) - 4)
            {
              v101 = *v100;
              *(_DWORD *)(v98 + 72) = v99 + 4;
              if (v101 >= 1)
              {
                v102 = (uint64_t **)(v36 + 48);
                v103 = (uint64_t **)(v36 + 72);
                do
                {
                  v104 = *(uint64_t **)(v37 + 96);
                  v105 = *((_DWORD *)v104 + 18);
                  v106 = *v104;
                  v107 = (int *)(*v104 + v105);
                  v108 = *v104 + v104[1] - 4;
                  if ((unint64_t)v107 <= v108)
                  {
                    v109 = *v107;
                    v105 += 4;
                    *((_DWORD *)v104 + 18) = v105;
                  }
                  else
                  {
                    v109 = 0;
                  }
                  LODWORD(__ptr.__r_.__value_.__l.__data_) = v109;
                  v110 = (int *)(v106 + v105);
                  if ((unint64_t)v110 <= v108)
                  {
                    v111 = *v110;
                    *((_DWORD *)v104 + 18) = v105 + 4;
                  }
                  else
                  {
                    v111 = 0;
                  }
                  LODWORD(__p[0]) = v111;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v102, v109, (unsigned int *)&__ptr)+ 8) = v111;
                  *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v103, v111, (unsigned int *)__p)+ 8) = v109;
                  --v101;
                }
                while (v101);
                v98 = *(_QWORD *)(v37 + 96);
              }
            }
LABEL_365:
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v37 + 40) + 64))(*(_QWORD *)(v37 + 40), v98, v37 + 64, *(unsigned int *)(v37 + 72));
            goto LABEL_366;
          }
          v295 = 35;
        }
        else
        {
          v295 = 34;
        }
      }
      else
      {
        v295 = 33;
      }
      exitFramework(v295);
    }
    v37 = *((_QWORD *)v1 + 15);
    if (*((char *)v1 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
      v1 = v305;
    }
    else
    {
      v306 = *v304;
    }
    v220 = operator new();
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v221 = &v306;
    else
      v221 = (std::string *)v306.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v221);
    std::string::basic_string[abi:ne180100]<0>(__p, "r");
    ReadOnlyFile::ReadOnlyFile(v220, (__int128 *)&__ptr, (const std::string::value_type *)__p);
    *(_QWORD *)(v37 + 96) = v220;
    if (v309 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__ptr.__r_.__value_.__l.__data_);
    SentenceRecognizer::processReadDataFileHeader(v37, *(ReadOnlyFile **)(v37 + 96), v37 + 64, *(SentenceFileHeader **)(v37 + 56), v222);
    if (*(_DWORD *)(v37 + 88) == 32)
    {
      v223 = *(_DWORD *)(v37 + 84);
      if ((v223 & 0xFFFFFFFE) == 2)
      {
        if (v223 == 2)
        {
          v224 = *(uint64_t **)(v37 + 96);
          v225 = *v224;
          v226 = v224[1];
          v227 = (_DWORD *)(*v224 + *((int *)v224 + 18));
          if ((unint64_t)v227 <= *v224 + v226 - 4)
          {
            *(_DWORD *)v37 = *v227;
            v228 = *((_DWORD *)v224 + 18) + 4;
            *((_DWORD *)v224 + 18) = v228;
            v225 = *v224;
            v226 = v224[1];
          }
          else
          {
            *(_DWORD *)v37 = 0;
            v228 = *((_DWORD *)v224 + 18);
          }
          v229 = (_DWORD *)(v225 + v228);
          if ((unint64_t)v229 <= v225 + v226 - 4)
          {
            *(_DWORD *)(v37 + 4) = *v229;
            v230 = *((_DWORD *)v224 + 18) + 4;
            *((_DWORD *)v224 + 18) = v230;
            v225 = *v224;
            v226 = v224[1];
          }
          else
          {
            *(_DWORD *)(v37 + 4) = 0;
            v230 = *((_DWORD *)v224 + 18);
          }
          v231 = (_DWORD *)(v225 + v230);
          if ((unint64_t)v231 <= v225 + v226 - 4)
          {
            *(_DWORD *)(v37 + 8) = *v231;
            *((_DWORD *)v224 + 18) += 4;
          }
          else
          {
            *(_DWORD *)(v37 + 8) = 0;
          }
          std::__tree<int>::destroy(*(_QWORD **)(v36 + 8));
          *(_QWORD *)v36 = v36 + 8;
          *(_QWORD *)(v36 + 16) = 0;
          *(_QWORD *)(v36 + 8) = 0;
          std::__tree<int>::destroy(*(_QWORD **)(v36 + 32));
          *(_QWORD *)(v36 + 24) = v36 + 32;
          *(_QWORD *)(v36 + 40) = 0;
          *(_QWORD *)(v36 + 32) = 0;
          v232 = *(_QWORD *)(v37 + 96);
          v233 = *(int *)(v232 + 72);
          v234 = (int *)(*(_QWORD *)v232 + v233);
          if ((unint64_t)v234 <= *(_QWORD *)v232 + *(_QWORD *)(v232 + 8) - 4)
          {
            v235 = *v234;
            *(_DWORD *)(v232 + 72) = v233 + 4;
            if (v235 >= 1)
            {
              do
              {
                v236 = *(uint64_t **)(v37 + 96);
                v237 = *((_DWORD *)v236 + 18);
                v238 = *v236;
                v239 = (int *)(*v236 + v237);
                v240 = *v236 + v236[1] - 4;
                if ((unint64_t)v239 <= v240)
                {
                  v241 = *v239;
                  v237 += 4;
                  *((_DWORD *)v236 + 18) = v237;
                }
                else
                {
                  v241 = 0;
                }
                LODWORD(__ptr.__r_.__value_.__l.__data_) = v241;
                v242 = (int *)(v238 + v237);
                if ((unint64_t)v242 <= v240)
                {
                  v243 = *v242;
                  *((_DWORD *)v236 + 18) = v237 + 4;
                }
                else
                {
                  v243 = 0;
                }
                LODWORD(__p[0]) = v243;
                *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v36, v241, (unsigned int *)&__ptr)+ 8) = v243;
                *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(v36 + 24), v243, (unsigned int *)__p)+ 8) = v241;
                --v235;
              }
              while (v235);
            }
          }
          std::__tree<int>::destroy(*(_QWORD **)(v36 + 56));
          v244 = *(_QWORD **)(v36 + 80);
          *(_QWORD *)(v36 + 48) = v36 + 56;
          *(_QWORD *)(v36 + 56) = 0;
          *(_QWORD *)(v36 + 64) = 0;
          std::__tree<int>::destroy(v244);
          *(_QWORD *)(v36 + 72) = v36 + 80;
          *(_QWORD *)(v36 + 80) = 0;
          *(_QWORD *)(v36 + 88) = 0;
          v98 = *(_QWORD *)(v37 + 96);
          v245 = *(int *)(v98 + 72);
          v246 = (int *)(*(_QWORD *)v98 + v245);
          if ((unint64_t)v246 <= *(_QWORD *)v98 + *(_QWORD *)(v98 + 8) - 4)
          {
            v247 = *v246;
            *(_DWORD *)(v98 + 72) = v245 + 4;
            if (v247 >= 1)
            {
              v248 = (uint64_t **)(v36 + 48);
              v249 = (uint64_t **)(v36 + 72);
              do
              {
                v250 = *(uint64_t **)(v37 + 96);
                v251 = *((_DWORD *)v250 + 18);
                v252 = *v250;
                v253 = (int *)(*v250 + v251);
                v254 = *v250 + v250[1] - 4;
                if ((unint64_t)v253 <= v254)
                {
                  v255 = *v253;
                  v251 += 4;
                  *((_DWORD *)v250 + 18) = v251;
                }
                else
                {
                  v255 = 0;
                }
                LODWORD(__ptr.__r_.__value_.__l.__data_) = v255;
                v256 = (int *)(v252 + v251);
                if ((unint64_t)v256 <= v254)
                {
                  v257 = *v256;
                  *((_DWORD *)v250 + 18) = v251 + 4;
                }
                else
                {
                  v257 = 0;
                }
                LODWORD(__p[0]) = v257;
                *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v248, v255, (unsigned int *)&__ptr)+ 8) = v257;
                *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v249, v257, (unsigned int *)__p)+ 8) = v255;
                --v247;
              }
              while (v247);
              v98 = *(_QWORD *)(v37 + 96);
            }
          }
          goto LABEL_365;
        }
        v299 = 35;
      }
      else
      {
        v299 = 34;
      }
    }
    else
    {
      v299 = 33;
    }
    exitFramework(v299);
  }
  if (v9 == 16)
  {
    v38 = *((_QWORD *)v1 + 15);
    if (*((char *)v1 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
      v1 = v305;
    }
    else
    {
      v306 = *v304;
    }
    v51 = operator new();
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v306;
    else
      v52 = (std::string *)v306.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v52);
    std::string::basic_string[abi:ne180100]<0>(__p, "r");
    ReadOnlyFile::ReadOnlyFile(v51, (__int128 *)&__ptr, (const std::string::value_type *)__p);
    *(_QWORD *)(v38 + 96) = v51;
    if (v309 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__ptr.__r_.__value_.__l.__data_);
    SentenceRecognizer::processReadDataFileHeader(v38, *(ReadOnlyFile **)(v38 + 96), v38 + 64, *(SentenceFileHeader **)(v38 + 56), v53);
    if (*(_DWORD *)(v38 + 88) != 16 || *(_DWORD *)(v38 + 84) != 1)
      exitFramework(33);
    v54 = *(uint64_t **)(v38 + 96);
    v55 = *v54;
    v56 = v54[1];
    v57 = (_DWORD *)(*v54 + *((int *)v54 + 18));
    if ((unint64_t)v57 <= *v54 + v56 - 4)
    {
      *(_DWORD *)v38 = *v57;
      v58 = *((_DWORD *)v54 + 18) + 4;
      *((_DWORD *)v54 + 18) = v58;
      v55 = *v54;
      v56 = v54[1];
    }
    else
    {
      *(_DWORD *)v38 = 0;
      v58 = *((_DWORD *)v54 + 18);
    }
    v59 = (_DWORD *)(v55 + v58);
    if ((unint64_t)v59 <= v55 + v56 - 4)
    {
      *(_DWORD *)(v38 + 4) = *v59;
      v60 = *((_DWORD *)v54 + 18) + 4;
      *((_DWORD *)v54 + 18) = v60;
      v55 = *v54;
      v56 = v54[1];
    }
    else
    {
      *(_DWORD *)(v38 + 4) = 0;
      v60 = *((_DWORD *)v54 + 18);
    }
    v61 = (_DWORD *)(v55 + v60);
    if ((unint64_t)v61 <= v55 + v56 - 4)
    {
      *(_DWORD *)(v38 + 8) = *v61;
      *((_DWORD *)v54 + 18) += 4;
    }
    else
    {
      *(_DWORD *)(v38 + 8) = 0;
    }
  }
  else if (v9 == 8)
  {
    v38 = *((_QWORD *)v1 + 15);
    if (*((char *)v1 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
      v1 = v305;
    }
    else
    {
      v306 = *v304;
    }
    v40 = operator new();
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v306;
    else
      v41 = (std::string *)v306.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v41);
    std::string::basic_string[abi:ne180100]<0>(__p, "r");
    ReadOnlyFile::ReadOnlyFile(v40, (__int128 *)&__ptr, (const std::string::value_type *)__p);
    *(_QWORD *)(v38 + 96) = v40;
    if (v309 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__ptr.__r_.__value_.__l.__data_);
    SentenceRecognizer::processReadDataFileHeader(v38, *(ReadOnlyFile **)(v38 + 96), v38 + 64, *(SentenceFileHeader **)(v38 + 56), v42);
    if (*(_DWORD *)(v38 + 88) != 8 || *(_DWORD *)(v38 + 84) != 1)
      exitFramework(33);
    v43 = *(uint64_t **)(v38 + 96);
    v44 = *v43;
    v45 = v43[1];
    v46 = (_DWORD *)(*v43 + *((int *)v43 + 18));
    if ((unint64_t)v46 <= *v43 + v45 - 4)
    {
      *(_DWORD *)v38 = *v46;
      v47 = *((_DWORD *)v43 + 18) + 4;
      *((_DWORD *)v43 + 18) = v47;
      v44 = *v43;
      v45 = v43[1];
    }
    else
    {
      *(_DWORD *)v38 = 0;
      v47 = *((_DWORD *)v43 + 18);
    }
    v48 = (_DWORD *)(v44 + v47);
    if ((unint64_t)v48 <= v44 + v45 - 4)
    {
      *(_DWORD *)(v38 + 4) = *v48;
      v49 = *((_DWORD *)v43 + 18) + 4;
      *((_DWORD *)v43 + 18) = v49;
      v44 = *v43;
      v45 = v43[1];
    }
    else
    {
      *(_DWORD *)(v38 + 4) = 0;
      v49 = *((_DWORD *)v43 + 18);
    }
    v50 = (_DWORD *)(v44 + v49);
    if ((unint64_t)v50 <= v44 + v45 - 4)
    {
      *(_DWORD *)(v38 + 8) = *v50;
      *((_DWORD *)v43 + 18) += 4;
    }
    else
    {
      *(_DWORD *)(v38 + 8) = 0;
    }
  }
  else
  {
    v38 = *((_QWORD *)v1 + 15);
    if (*((char *)v1 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&v306, *((const std::string::value_type **)v1 + 9), *((_QWORD *)v1 + 10));
      v1 = v305;
    }
    else
    {
      v306 = *v304;
    }
    v62 = operator new();
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v306;
    else
      v63 = (std::string *)v306.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)v63);
    std::string::basic_string[abi:ne180100]<0>(__p, "r");
    ReadOnlyFile::ReadOnlyFile(v62, (__int128 *)&__ptr, (const std::string::value_type *)__p);
    *(_QWORD *)(v38 + 96) = v62;
    if (v309 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__ptr.__r_.__value_.__l.__data_);
    SentenceRecognizer::processReadDataFileHeader(v38, *(ReadOnlyFile **)(v38 + 96), v38 + 64, *(SentenceFileHeader **)(v38 + 56), v64);
    if (*(_DWORD *)(v38 + 88) != 32 || *(_DWORD *)(v38 + 84) != 1)
      exitFramework(33);
    v65 = *(uint64_t **)(v38 + 96);
    v66 = *v65;
    v67 = v65[1];
    v68 = (_DWORD *)(*v65 + *((int *)v65 + 18));
    if ((unint64_t)v68 <= *v65 + v67 - 4)
    {
      *(_DWORD *)v38 = *v68;
      v69 = *((_DWORD *)v65 + 18) + 4;
      *((_DWORD *)v65 + 18) = v69;
      v66 = *v65;
      v67 = v65[1];
    }
    else
    {
      *(_DWORD *)v38 = 0;
      v69 = *((_DWORD *)v65 + 18);
    }
    v70 = (_DWORD *)(v66 + v69);
    if ((unint64_t)v70 <= v66 + v67 - 4)
    {
      *(_DWORD *)(v38 + 4) = *v70;
      v71 = *((_DWORD *)v65 + 18) + 4;
      *((_DWORD *)v65 + 18) = v71;
      v66 = *v65;
      v67 = v65[1];
    }
    else
    {
      *(_DWORD *)(v38 + 4) = 0;
      v71 = *((_DWORD *)v65 + 18);
    }
    v72 = (_DWORD *)(v66 + v71);
    if ((unint64_t)v72 <= v66 + v67 - 4)
    {
      *(_DWORD *)(v38 + 8) = *v72;
      *((_DWORD *)v65 + 18) += 4;
    }
    else
    {
      *(_DWORD *)(v38 + 8) = 0;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v38 + 40) + 64))(*(_QWORD *)(v38 + 40));
LABEL_366:
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  v293 = *((_QWORD *)v1 + 15);
  *(_BYTE *)(v293 + 28) = 0;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v293 + 40) + 280))(*(_QWORD *)(v293 + 40), 0);
  *((_BYTE *)v305 + 188) = 1;
  result = MRLModelWrapper::cleanupAllBuffers((uint64_t)v305);
  *((_BYTE *)v305 + 188) = 0;
  return result;
}

void sub_1915A1AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  _Unwind_Resume(a1);
}

uint64_t ReadOnlyFile::ReadOnlyFile(uint64_t a1, __int128 *a2, const std::string::value_type *a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  const char *v10;
  int v11;
  int v12;
  const char *v13;
  int v14;
  int st_size;
  size_t v16;
  void *v17;
  stat v19;
  uint64_t v20;
  int v21;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v6;
  }
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v7;
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 1;
  *(_DWORD *)(a1 + 72) = 0;
  if (a3[23] < 0)
  {
    v9 = *((_QWORD *)a3 + 1);
    if (v9 != 1)
    {
      if (v9 != 2)
        goto LABEL_33;
      a3 = *(const std::string::value_type **)a3;
LABEL_14:
      if (*(_WORD *)a3 != 11122)
        goto LABEL_33;
      *(_DWORD *)(a1 + 64) = 514;
      if (*((char *)a2 + 23) >= 0)
        v10 = (const char *)a2;
      else
        v10 = *(const char **)a2;
      v11 = open(v10, 514, 384);
      goto LABEL_26;
    }
    v12 = **(unsigned __int8 **)a3;
  }
  else
  {
    v8 = *((unsigned __int8 *)a3 + 23);
    if (v8 != 1)
    {
      if (v8 != 2)
LABEL_33:
        exitFramework(11);
      goto LABEL_14;
    }
    v12 = *(unsigned __int8 *)a3;
  }
  if (v12 != 114)
    goto LABEL_33;
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  v11 = open(v13, 0);
LABEL_26:
  v14 = v11;
  if (v11 < 0)
    goto LABEL_33;
  if (fstat(v11, &v19) < 0)
  {
    close(v14);
    goto LABEL_33;
  }
  st_size = v19.st_size;
  *(_QWORD *)(a1 + 8) = v19.st_size;
  v20 = 0;
  v21 = st_size;
  fcntl(v14, 44, &v20);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = mmap(0, v16, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v14, 0);
    if (v17 == (void *)-1)
    {
      close(v14);
      exitFramework(11);
    }
    *(_QWORD *)a1 = v17;
  }
  close(v14);
  return a1;
}

void sub_1915A1E8C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t SentenceRecognizer::processReadDataFileHeader(uint64_t this, ReadOnlyFile *a2, uint64_t a3, SentenceFileHeader *a4, OutputCluster *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  int *v21;
  int v22;
  int v23;
  _DWORD *v24;
  int v25;
  _DWORD *v26;
  unsigned int v27;

  v5 = *((int *)a2 + 18);
  v6 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = (unsigned int *)(*(_QWORD *)a2 + v5);
  v9 = *(_QWORD *)a2 + v7 - 4;
  if ((unint64_t)v8 > v9)
  {
    v10 = *(_DWORD *)(this + 24);
    *(_OWORD *)a3 = xmmword_191A936F0;
    *(_DWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 20) = 0x2000000001;
    return this;
  }
  v11 = *v8;
  v12 = v5 + 4;
  *((_DWORD *)a2 + 18) = v5 + 4;
  if (v11 <= 1)
  {
    v13 = *(_DWORD *)(this + 24);
    *(_OWORD *)a3 = xmmword_191A936F0;
    *(_DWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 20) = 0x2000000001;
    if (!v11)
      return this;
    return (*(uint64_t (**)(SentenceFileHeader *))(*(_QWORD *)a4 + 16))(a4);
  }
  if (v11 - 2 > 3)
    exitFramework(38);
  if (v6 + v12 <= v9)
  {
    LODWORD(v14) = v5 + 8;
    *((_DWORD *)a2 + 18) = v14;
    v14 = (int)v14;
  }
  else
  {
    v14 = v12;
  }
  v15 = (_DWORD *)(v6 + v14);
  if ((unint64_t)v15 <= v9)
  {
    *(_DWORD *)a3 = *v15;
    v16 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v16;
    v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
  }
  else
  {
    *(_DWORD *)a3 = 0;
    v16 = *((_DWORD *)a2 + 18);
  }
  v17 = (_DWORD *)(v6 + v16);
  if ((unint64_t)v17 <= v6 + v7 - 4)
  {
    *(_DWORD *)(a3 + 4) = *v17;
    v18 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v18;
    v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
  }
  else
  {
    *(_DWORD *)(a3 + 4) = 0;
    v18 = *((_DWORD *)a2 + 18);
  }
  v19 = (_DWORD *)(v6 + v18);
  if ((unint64_t)v19 <= v6 + v7 - 4)
  {
    *(_DWORD *)(a3 + 8) = *v19;
    v20 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v20;
    v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 0;
    v20 = *((_DWORD *)a2 + 18);
  }
  v21 = (int *)(v6 + v20);
  if ((unint64_t)v21 <= v6 + v7 - 4)
  {
    v22 = *v21;
    *(_DWORD *)(a3 + 12) = v22;
    v23 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v23;
    v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v22 = 0;
    *(_DWORD *)(a3 + 12) = 0;
    v23 = *((_DWORD *)a2 + 18);
  }
  v24 = (_DWORD *)(v6 + v23);
  if ((unint64_t)v24 <= v6 + v7 - 4)
  {
    *(_DWORD *)(a3 + 16) = *v24;
    v25 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v25;
    v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
  }
  else
  {
    *(_DWORD *)(a3 + 16) = 0;
    v25 = *((_DWORD *)a2 + 18);
  }
  v26 = (_DWORD *)(v6 + v25);
  if ((unint64_t)v26 <= v6 + v7 - 4)
  {
    *(_DWORD *)(a3 + 20) = *v26;
    *((_DWORD *)a2 + 18) += 4;
  }
  else
  {
    *(_DWORD *)(a3 + 20) = 0;
  }
  if ((v22 & 3) == 0)
    goto LABEL_38;
  v27 = v22 & 0xFFFFFFFC;
  if ((v22 & 0xFFFFFFFC) == 0)
    v27 = 32;
  *(_DWORD *)(a3 + 24) = v27;
  if (v27 > 0x20 || ((1 << v27) & 0x100010100) == 0)
LABEL_38:
    exitFramework(25);
  *(_DWORD *)(a3 + 12) = v22 & 3;
  if (*((_DWORD *)a2 + 18) != 32)
    exitFramework(67);
  if (v11 == 3 || v11 == 5)
    return (*(uint64_t (**)(SentenceFileHeader *))(*(_QWORD *)a4 + 16))(a4);
  return this;
}

void std::unordered_set<int>::unordered_set(int *a1, uint64_t a2)
{
  uint64_t v3;

  MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet = 0u;
  *(_OWORD *)algn_1EE219C90 = 0u;
  dword_1EE219CA0 = 1065353216;
  if (a2)
  {
    v3 = 4 * a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet, *a1, *a1);
      ++a1;
      v3 -= 4;
    }
    while (v3);
  }
}

void sub_1915A21AC(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet);
  _Unwind_Resume(a1);
}

uint64_t MRLModelWrapper::optionalResizeRealloc(uint64_t this, const char *a2)
{
  int v2;
  uint64_t v3;

  v2 = (int)a2;
  v3 = this;
  if (maxFeatureVectors < (int)a2 || !*(_BYTE *)(this + 188))
  {
    MRLModelWrapper::cleanupAllBuffers(this);
    *(_BYTE *)(v3 + 188) = 0;
    maxFeatureVectors = *(_DWORD *)(v3 + 220);
    *(_DWORD *)(v3 + 224) = v2;
    return MRLModelWrapper::allocAllBuffers(v3);
  }
  return this;
}

uint64_t MRLModelWrapper::allocAllBuffers(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(this + 120);
  if (!v1)
    exitFramework(37);
  v2 = this;
  if (!*(_BYTE *)(this + 188))
  {
    if (*(_BYTE *)(this + 216))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 184))(*(_QWORD *)(v1 + 40));
      if (!*(_QWORD *)(v2 + 120))
        exitFramework(639);
    }
    v3 = (_QWORD *)operator new();
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    *(_QWORD *)(v2 + 128) = v3;
    MRLModelWrapper::resizeXs((MRLModelWrapper *)v2, 2);
    v4 = *(int *)(v2 + 36);
    if (!(_DWORD)v4)
    {
      *(_QWORD *)(v2 + 168) = 0;
      exitFramework(10);
    }
    *(_QWORD *)(v2 + 168) = operator new[]();
    *(_QWORD *)(v2 + 176) = MRLModelWrapper::allocInitialState(*(MRLModelWrapper **)(v2 + 120));
    v5 = (_QWORD *)operator new();
    std::vector<std::pair<int,float>>::vector(v5, v4);
    *(_QWORD *)(v2 + 160) = v5;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 120) + 40) + 200))(*(_QWORD *)(*(_QWORD *)(v2 + 120) + 40));
    *(_BYTE *)(v2 + 188) = 1;
  }
  return this;
}

void sub_1915A2350(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void MRLModelWrapper::resizeXs(MRLModelWrapper *this, int a2)
{
  char ***v4;
  char **v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  void *v17;

  v4 = (char ***)*((_QWORD *)this + 16);
  v5 = *v4;
  if (v4[1] != *v4)
  {
    v6 = *v5;
    if (v5[1] != *v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)&v6[8 * v7];
        if (v8)
        {
          MEMORY[0x19401CD78](v8, 0x1000C8052888210);
          v5 = *v4;
          v6 = **v4;
        }
        ++v7;
      }
      while (v7 < (v5[1] - v6) >> 3);
    }
  }
  std::vector<std::vector<VVector<float>>>::resize((uint64_t)v4, 1uLL);
  std::vector<VVector<float>>::resize(*v4, a2);
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = 8 * a2;
    do
    {
      v11 = **(_QWORD **)(*((_QWORD *)this + 15) + 104);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 264))(v11);
      v13 = *((_QWORD *)this + 25);
      if (v13)
        v14 = *(_DWORD *)(v13 + 28);
      else
        v14 = 1;
      v15 = v14 * v12;
      v16 = (void *)operator new[]();
      v17 = v16;
      if (v15 >= 1)
        bzero(v16, 4 * v15);
      *(_QWORD *)&(**v4)[v9] = v17;
      v9 += 8;
    }
    while (v10 != v9);
  }
}

_QWORD *MRLModelWrapper::allocInitialState(MRLModelWrapper *this)
{
  _QWORD *v2;

  if (!this)
    exitFramework(34);
  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 5) + 128))(*((_QWORD *)this + 5), v2);
  return v2;
}

uint64_t std::map<std::string,int>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15;
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v16 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)&v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_1915A2664(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_1915A26F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1915A279C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<VVector<float>>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void SentenceRecognizer::recognizeSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, float *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;

  *(_DWORD *)(a1 + 12) = a7;
  v18 = *a4;
  v19 = a4[1];
  if (*(_BYTE *)(a1 + 16))
    v20 = v19 == v18;
  else
    v20 = 1;
  if (!v20)
  {
    (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8)
                                                                         + 216))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8), a4, a3, a7, a8);
    v18 = *a4;
    v19 = a4[1];
  }
  v21 = *(_QWORD *)(a1 + 40);
  if (v19 == v18)
  {
    if ((int)a7 >= 0x2000000)
      v24 = a7 & 0xFF000000;
    else
      v24 = 0x1000000;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 304))(v21, a2, a3, v24 & 0xFF000000 | a7 & 0xFFFFFF, a9, a10, a11);
  }
  else
  {
    if ((v22 & 1) == 0)
    {
      {
        NeuralNetwork::recognize(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,std::vector<VVector<float>> const&,int,int &,float &,int,int &,std::vector<std::pair<int,VVector<float>*>> *,int &,int)::dummy2 = 0;
        *(_QWORD *)algn_1EE21A838 = 0;
        qword_1EE21A840 = 0;
        __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &NeuralNetwork::recognize(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,std::vector<VVector<float>> const&,int,int &,float &,int,int &,std::vector<std::pair<int,VVector<float>*>> *,int &,int)::dummy2, &dword_190DAF000);
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v21 + 304))(v21, a2, a3, a7, a9, a10, &NeuralNetwork::recognize(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,std::vector<VVector<float>> const&,int,int &,float &,int,int &,std::vector<std::pair<int,VVector<float>*>> *,int &,int)::dummy2);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 344))(v21, a4, v23, a7, a5, 0);
    *a6 = (*(float (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v21 + 352))(v21, a4, a7);
  }
}

char *std::vector<std::vector<int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t MRLModelWrapper::clearState(uint64_t result, uint64_t a2)
{
  int v2;

  if (!result)
    exitFramework(36);
  if (a2)
  {
    v2 = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(result + 40) + 152))(*(_QWORD *)(result + 40), a2, &v2);
  }
  return result;
}

uint64_t MRLModelWrapper::saveState(uint64_t a1, uint64_t a2)
{
  int v3;

  if (!a1)
    exitFramework(36);
  if (!a2)
    exitFramework(37);
  v3 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, int *))(**(_QWORD **)(a1 + 40) + 136))(*(_QWORD *)(a1 + 40), a2, 1, &v3);
}

uint64_t MRLModelWrapper::restoreState(uint64_t a1, uint64_t a2)
{
  int v3;

  if (!a1)
    exitFramework(38);
  if (!a2)
    exitFramework(39);
  v3 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, int *))(**(_QWORD **)(a1 + 40) + 144))(*(_QWORD *)(a1 + 40), a2, 0, &v3);
}

void Espresso::ANECompilerEngine::batch::~batch(Espresso::ANECompilerEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::batch::sync_point(Espresso::ANECompilerEngine::batch *this)
{
  return (*(uint64_t (**)(Espresso::ANECompilerEngine::batch *))(*(_QWORD *)this + 24))(this);
}

char *Espresso::ANECompilerEngine::context::begin_batch@<X0>(Espresso::ANECompilerEngine::context *this@<X0>, char **a2@<X8>)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBAA60;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 1;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_WORD *)v4 + 60) = 256;
  *((_QWORD *)v4 + 16) = 0;
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = this;
  *((_QWORD *)v4 + 19) = 0;
  a2[1] = v4;
  *((_QWORD *)v4 + 3) = &off_1E2D7D518;
  result = v4 + 24;
  *a2 = result;
  return result;
}

_QWORD *Espresso::ANECompilerEngine::context::get_device_model_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "ANE Compiler");
}

void Espresso::ANECompilerEngine::context::~context(id *this)
{
  Espresso::abstract_context::~abstract_context(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::context::create_compiler_for_network(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unsigned int v17;
  _DWORD *v18[2];

  v17 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v3 = operator new(0x248uLL);
  v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E2DBAB08;
  v5 = v3 + 3;
  v6 = *(_DWORD **)(a2 + 8);
  v18[0] = *(_DWORD **)a2;
  v18[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 2);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Espresso::ANECompilerEngine::compiler::compiler((uint64_t)(v3 + 3), (const Espresso::net **)v18);
  if (v6)
  {
    v9 = (unint64_t *)(v6 + 2);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
  *(_QWORD *)&v16 = v5;
  *((_QWORD *)&v16 + 1) = v4;
  v11 = *(_QWORD *)a2 + 528;
  v18[0] = &v17;
  v12 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v11, &v17, (uint64_t)&std::piecewise_construct, v18);
  v13 = (std::__shared_weak_count *)v12[4];
  *(_OWORD *)(v12 + 3) = v16;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1915A2D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN8Espresso17ANECompilerEngine7context21decompose_tile_kernelEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  size_t v29;
  std::string *v30;
  const void *v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  char *v36;
  std::string *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t **v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  std::string *v58;
  std::string v59;
  std::string v60;
  std::string __str;
  std::string v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  std::string v69;
  std::string **v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  std::string v75;
  __int128 v76;

  *(_QWORD *)&v76 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == *(_QWORD *)(a1 + 32))
  {
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    LODWORD(v70) = a2[3].i32[2];
    v71 = 0uLL;
    v4 = a2[2].u64[1];
    if (v4 >= a2[3].i64[0])
    {
      v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v70);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)&v70);
      v5 = v4 + 72;
      a2[2].i64[1] = v4 + 72;
    }
    a2[2].i64[1] = v5;
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = a2->i64[0] + 8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
    v65 = *(_OWORD *)v10;
    v11 = *(_QWORD *)(a1 + 40);
    v66 = *(_DWORD *)(v10 + 16);
    v12 = a2[3].i32[2];
    v69.__r_.__value_.__r.__words[0] = v12;
    v70 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11 + 56, v12, &v69)[3];
    v13 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v11 + 184), v70, (__int128 **)&v70);
    v14 = *(_QWORD *)(a1 + 40) + 56;
    v15 = a2[3].i32[2];
    v70 = (std::string **)v15;
    v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, &v70)[3];
    v17 = *(_QWORD *)(a1 + 40) + 96;
    v18 = a2[3].i32[2];
    v62.__r_.__value_.__r.__words[0] = v18;
    v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, &v62);
    Espresso::ANECompilerEngine::tile_kernel::concat_decomposition((std::string::size_type)&v67, v9, (int *)&v65, (int *)v13 + 14, v16, v19[3], *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12));
    v20 = v67;
    v55 = v68;
    if (v67 != v68)
    {
      v21 = 0;
      v54 = a1;
      do
      {
        v23 = *(_QWORD *)v20;
        v22 = *(_QWORD *)(v20 + 8);
        v63 = v23;
        v64 = (std::__shared_weak_count *)v22;
        v24 = v23;
        if (v22)
        {
          v25 = (unint64_t *)(v22 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          v24 = *(_QWORD *)v20;
        }
        v27 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 272))(v24);
        std::string::basic_string[abi:ne180100]<0>(&v62, v27);
        v28 = a2[1].i64[0];
        if (*(char *)(v28 + 39) >= 0)
          v29 = *(unsigned __int8 *)(v28 + 39);
        else
          v29 = *(_QWORD *)(v28 + 24);
        std::string::basic_string[abi:ne180100]((uint64_t)&v60, v29 + 3);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v60;
        else
          v30 = (std::string *)v60.__r_.__value_.__r.__words[0];
        if (v29)
        {
          if (*(char *)(v28 + 39) >= 0)
            v31 = (const void *)(v28 + 16);
          else
            v31 = *(const void **)(v28 + 16);
          memmove(v30, v31, v29);
        }
        *(_DWORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 4218719;
        std::to_string(&v59, v21);
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v59;
        else
          v32 = (std::string *)v59.__r_.__value_.__r.__words[0];
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        else
          size = v59.__r_.__value_.__l.__size_;
        v34 = std::string::append(&v60, (const std::string::value_type *)v32, size);
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v20 + 151) < 0)
          std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(v20 + 128), *(_QWORD *)(v20 + 136));
        else
          v75 = *(std::string *)(v20 + 128);
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v70 = &v56;
        LOBYTE(v71) = 0;
        v56 = (std::string *)operator new(0x18uLL);
        v57 = v56;
        v58 = v56 + 1;
        v57 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v58, (__int128 *)&v75, &v76, v56);
        LODWORD(v70) = 0;
        v71 = 0u;
        v72 = 0u;
        v73 = 0u;
        v74 = 0u;
        v36 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = 0;
        *(_QWORD *)v36 = &off_1E2DBF0D0;
        *((_QWORD *)v36 + 3) = &off_1E2DA1A38;
        *(_OWORD *)(v36 + 56) = 0u;
        *(_OWORD *)(v36 + 72) = 0u;
        *(_OWORD *)(v36 + 104) = 0u;
        *(_OWORD *)(v36 + 120) = 0u;
        *(_OWORD *)(v36 + 136) = 0u;
        *(_OWORD *)(v36 + 152) = 0u;
        *(_OWORD *)(v36 + 40) = 0u;
        v37 = (std::string *)(v36 + 40);
        *(_OWORD *)(v36 + 88) = 0u;
        *(_OWORD *)(v36 + 161) = 0u;
        *((_OWORD *)v36 + 13) = 0u;
        *((_OWORD *)v36 + 14) = 0u;
        *((_QWORD *)v36 + 30) = 0;
        *(_QWORD *)&v71 = v36 + 24;
        *((_QWORD *)&v71 + 1) = v36;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v36 + 11, v23, v22);
        std::string::operator=(v37, &__str);
        std::string::operator=((std::string *)(v71 + 40), &v62);
        v38 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v23 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8));
        v39 = v71;
        *(_DWORD *)(v71 + 8) = v38;
        v40 = a2[1].i64[0];
        if (v40)
        {
          *(_DWORD *)(v39 + 12) = *(_DWORD *)(v40 + 12);
          if (*(char *)(v40 + 223) < 0)
            std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(v40 + 200), *(_QWORD *)(v40 + 208));
          else
            v69 = *(std::string *)(v40 + 200);
          std::string::operator=((std::string *)(v39 + 200), &v69);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
        }
        else
        {
          v41 = *(_QWORD *)(a2[4].i64[0] + 32);
          if (*(_QWORD *)(a2[4].i64[0] + 40) != v41)
            *(_DWORD *)(v39 + 12) = *(_DWORD *)(*(_QWORD *)v41 + 12);
        }
        if (&v72 != (__int128 *)(v20 + 104))
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v72, *(std::string **)(v20 + 104), *(std::string **)(v20 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v20 + 112) - *(_QWORD *)(v20 + 104)) >> 3));
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v73 + 8, v56, v57, 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v56) >> 3));
        LODWORD(v70) = a2[3].i32[2];
        v42 = a2[2].u64[1];
        if (v42 >= a2[3].i64[0])
        {
          v43 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v70);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v70);
          v43 = v42 + 72;
          a2[2].i64[1] = v42 + 72;
        }
        a2[2].i64[1] = v43;
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
        if (*((_QWORD *)&v71 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v70 = &v56;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        v47 = v64;
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v49 = __ldaxr(p_shared_owners);
          while (__stlxr(v49 - 1, p_shared_owners));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = (uint64_t **)(*(_QWORD *)(v54 + 40) + 184);
        v69.__r_.__value_.__r.__words[0] = v20 + 128;
        v51 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50, (_QWORD *)(v20 + 128), (__int128 **)&v69);
        v52 = *(_OWORD *)(v20 + 40);
        v53 = *(_OWORD *)(v20 + 56);
        *((_QWORD *)v51 + 11) = *(_QWORD *)(v20 + 72);
        *(_OWORD *)(v51 + 72) = v53;
        *(_OWORD *)(v51 + 56) = v52;
        if (v51 + 56 != (char *)(v20 + 40))
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v51 + 96, *(char **)(v20 + 80), *(_QWORD *)(v20 + 88), (uint64_t)(*(_QWORD *)(v20 + 88) - *(_QWORD *)(v20 + 80)) >> 2);
        ++v21;
        v20 += 152;
      }
      while (v20 != v55);
    }
    v70 = (std::string **)&v67;
    std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  }
}

void sub_1915A3504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v48 - 200));
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context21decompose_fill_kernelEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  size_t v24;
  std::string *v25;
  const void *v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  char *v31;
  std::string *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t **v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string v53;
  std::string v54;
  std::string __str;
  std::string v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  _OWORD v59[2];
  int v60;
  uint64_t v61;
  uint64_t v62;
  std::string v63;
  std::string **v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::string v69;
  __int128 v70;

  *(_QWORD *)&v70 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == *(_QWORD *)(a1 + 32))
  {
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    LODWORD(v64) = a2[3].i32[2];
    v65 = 0uLL;
    v4 = a2[2].u64[1];
    if (v4 >= a2[3].i64[0])
    {
      v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v64);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)&v64);
      v5 = v4 + 72;
      a2[2].i64[1] = v4 + 72;
    }
    a2[2].i64[1] = v5;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = a2->i64[0] + 8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
    v11 = *(_OWORD *)(v10 + 16);
    v59[0] = *(_OWORD *)v10;
    v59[1] = v11;
    v12 = *(_QWORD *)(a1 + 40);
    v60 = *(_DWORD *)(v10 + 32);
    v13 = a2[3].i32[2];
    v64 = (std::string **)v13;
    v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12 + 96, v13, &v64);
    Espresso::ANECompilerEngine::fill_kernel::decomposition(&v61, v9, (uint64_t)v59, (const void **)v14[3], *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12));
    v15 = v61;
    v49 = v62;
    if (v61 != v62)
    {
      v16 = 0;
      do
      {
        v18 = *(_QWORD *)v15;
        v17 = *(_QWORD *)(v15 + 8);
        v57 = v18;
        v58 = (std::__shared_weak_count *)v17;
        v19 = v18;
        if (v17)
        {
          v20 = (unint64_t *)(v17 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          v19 = *(_QWORD *)v15;
        }
        v22 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 272))(v19);
        std::string::basic_string[abi:ne180100]<0>(&v56, v22);
        v23 = a2[1].i64[0];
        if (*(char *)(v23 + 39) >= 0)
          v24 = *(unsigned __int8 *)(v23 + 39);
        else
          v24 = *(_QWORD *)(v23 + 24);
        std::string::basic_string[abi:ne180100]((uint64_t)&v54, v24 + 3);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v54;
        else
          v25 = (std::string *)v54.__r_.__value_.__r.__words[0];
        if (v24)
        {
          if (*(char *)(v23 + 39) >= 0)
            v26 = (const void *)(v23 + 16);
          else
            v26 = *(const void **)(v23 + 16);
          memmove(v25, v26, v24);
        }
        *(_DWORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 4218719;
        std::to_string(&v53, v16);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v53;
        else
          v27 = (std::string *)v53.__r_.__value_.__r.__words[0];
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        else
          size = v53.__r_.__value_.__l.__size_;
        v29 = std::string::append(&v54, (const std::string::value_type *)v27, size);
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v15 + 151) < 0)
          std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(v15 + 128), *(_QWORD *)(v15 + 136));
        else
          v69 = *(std::string *)(v15 + 128);
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v64 = &v50;
        LOBYTE(v65) = 0;
        v50 = (std::string *)operator new(0x18uLL);
        v51 = v50;
        v52 = v50 + 1;
        v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (__int128 *)&v69, &v70, v50);
        LODWORD(v64) = 0;
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v68 = 0u;
        v31 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v31 + 1) = 0;
        *((_QWORD *)v31 + 2) = 0;
        *(_QWORD *)v31 = &off_1E2DBF0D0;
        *((_QWORD *)v31 + 3) = &off_1E2DA1A38;
        *(_OWORD *)(v31 + 56) = 0u;
        *(_OWORD *)(v31 + 72) = 0u;
        *(_OWORD *)(v31 + 104) = 0u;
        *(_OWORD *)(v31 + 120) = 0u;
        *(_OWORD *)(v31 + 136) = 0u;
        *(_OWORD *)(v31 + 152) = 0u;
        *(_OWORD *)(v31 + 40) = 0u;
        v32 = (std::string *)(v31 + 40);
        *(_OWORD *)(v31 + 88) = 0u;
        *(_OWORD *)(v31 + 161) = 0u;
        *((_OWORD *)v31 + 13) = 0u;
        *((_OWORD *)v31 + 14) = 0u;
        *((_QWORD *)v31 + 30) = 0;
        *(_QWORD *)&v65 = v31 + 24;
        *((_QWORD *)&v65 + 1) = v31;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v31 + 11, v18, v17);
        std::string::operator=(v32, &__str);
        std::string::operator=((std::string *)(v65 + 40), &v56);
        v33 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v18 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8));
        v34 = v65;
        *(_DWORD *)(v65 + 8) = v33;
        v35 = a2[1].i64[0];
        if (v35)
        {
          *(_DWORD *)(v34 + 12) = *(_DWORD *)(v35 + 12);
          if (*(char *)(v35 + 223) < 0)
            std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)(v35 + 200), *(_QWORD *)(v35 + 208));
          else
            v63 = *(std::string *)(v35 + 200);
          std::string::operator=((std::string *)(v34 + 200), &v63);
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
        }
        else
        {
          v36 = *(_QWORD *)(a2[4].i64[0] + 32);
          if (*(_QWORD *)(a2[4].i64[0] + 40) != v36)
            *(_DWORD *)(v34 + 12) = *(_DWORD *)(*(_QWORD *)v36 + 12);
        }
        if (&v66 != (__int128 *)(v15 + 104))
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v66, *(std::string **)(v15 + 104), *(std::string **)(v15 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 112) - *(_QWORD *)(v15 + 104)) >> 3));
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v67 + 8, v50, v51, 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)v50) >> 3));
        LODWORD(v64) = a2[3].i32[2];
        v37 = a2[2].u64[1];
        if (v37 >= a2[3].i64[0])
        {
          v38 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v64);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v64);
          v38 = v37 + 72;
          a2[2].i64[1] = v37 + 72;
        }
        a2[2].i64[1] = v38;
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (*((_QWORD *)&v65 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v64 = &v50;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        v42 = v58;
        if (v58)
        {
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
        v63.__r_.__value_.__r.__words[0] = v15 + 128;
        v46 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, (_QWORD *)(v15 + 128), (__int128 **)&v63);
        v47 = *(_OWORD *)(v15 + 40);
        v48 = *(_OWORD *)(v15 + 56);
        *((_QWORD *)v46 + 11) = *(_QWORD *)(v15 + 72);
        *(_OWORD *)(v46 + 72) = v48;
        *(_OWORD *)(v46 + 56) = v47;
        if (v46 + 56 != (char *)(v15 + 40))
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v46 + 96, *(char **)(v15 + 80), *(_QWORD *)(v15 + 88), (uint64_t)(*(_QWORD *)(v15 + 88) - *(_QWORD *)(v15 + 80)) >> 2);
        ++v16;
        v15 += 152;
      }
      while (v15 != v49);
    }
    v64 = (std::string **)&v61;
    std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  }
}

void sub_1915A3C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v50 - 200));
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context26transform_embedding_lookupEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  const void *v25;
  Espresso::ANECompilerEngine *v26;
  NSString *v27;
  Espresso::ANECompilerEngine *v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v53;
  int v54;
  BOOL v55;
  BOOL v56;
  int v57;
  BOOL v58;
  _BOOL4 v59;
  int v61;
  uint64_t v62;
  unint64_t v63;
  __int128 *v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  __int128 *v68;
  __int128 v69;
  uint64_t v70;
  size_t size;
  void *v72;
  std::string *v73;
  int v74;
  int v75;
  uint64_t v76;
  void *v77;
  vImagePixelCount v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  void *data;
  size_t v84;
  std::string *p_sz;
  const void *v86;
  uint64_t v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  size_t v94;
  std::string *p_dest;
  const void *v96;
  size_t v97;
  std::string *p_lpsrc;
  const void *v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  size_t v110;
  std::string *v111;
  const void *v112;
  uint64_t v113;
  void *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  size_t v120;
  std::string *v121;
  const void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  std::__shared_weak_count_vtbl *v125;
  unint64_t v126;
  __int16 v127;
  _DWORD *v128;
  unint64_t v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  size_t v142;
  std::string *v143;
  const void *v144;
  uint64_t v145;
  void *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  size_t v152;
  std::string *v153;
  const void *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t i;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  float v164;
  uint64_t v169;
  std::string::size_type v170;
  unint64_t *v171;
  unint64_t v172;
  std::string::size_type v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::string *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  float *v185;
  float *v186;
  float v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t j;
  int v196;
  int v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  int v202;
  int v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  Espresso::ANECompilerEngine *v232;
  int32x2_t v233;
  int64x2_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  _QWORD v239[2];
  __int128 v240;
  __int128 v241;
  uint64_t v242[2];
  _QWORD v243[2];
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248[2];
  _QWORD v249[2];
  _QWORD v250[2];
  std::string *v251;
  uint64_t v252;
  vImage_Buffer __p;
  uint64_t v254;
  int32x2_t v255;
  __int128 v256;
  uint64_t v257;
  __int16 v258;
  uint64_t v259;
  uint64_t v260;
  __int16 v261;
  uint64_t v262;
  int v263;
  __int128 v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  __int16 v271;
  int v272;
  char v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  _QWORD v277[2];
  std::string v278;
  std::string v279;
  uint64_t v280[2];
  std::string lpsrc;
  std::string __sz;
  uint64_t v283;
  std::__shared_weak_count *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  void *v287;
  size_t v288;
  unsigned __int8 v289;
  std::string v290;
  std::string v291;
  std::string v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  _BYTE v299[32];
  uint64_t v300;
  void *v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  int v306;
  int v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  std::string *v314;
  std::string v315;
  std::string v316;
  std::string dest;
  std::string dest_24;
  __int128 v319;
  uint64_t v320;
  __int16 v321;
  uint64_t v322;
  uint64_t v323;
  __int16 v324;
  uint64_t v325;
  int v326;
  __int128 v327;
  int v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  __int16 v334;
  int v335;
  char v336;
  std::string v337;
  std::string v338;
  std::string v339;
  std::string v340;
  std::string v341;
  uint64_t v342;
  std::string v343;
  uint64_t v344;
  std::string v345;
  uint64_t v346;
  std::string __str;
  __int128 v348;

  *(_QWORD *)&v348 = *MEMORY[0x1E0C80C00];
  v2 = a2->i64[0];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) != v3 && v3 != 0)
    return;
  v8 = *(_QWORD *)(v2 + 224);
  v7 = *(std::__shared_weak_count **)(v2 + 232);
  v312 = v8;
  v313 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, vImage_Buffer *))(*(_QWORD *)v8 + 120))(&v310, v8, &__p);
  if (SHIBYTE(__p.width) < 0)
    operator delete(__p.data);
  v11 = v310;
  if (v310)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_U8");
    if (((*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(_QWORD *)v11 + 24))(v11, &__p) & 1) != 0)
    {
      LODWORD(v11) = 1;
    }
    else
    {
      v11 = v310;
      std::string::basic_string[abi:ne180100]<0>(&dest, "W_u8");
      LODWORD(v11) = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 24))(v11, &dest);
      if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
        operator delete(dest.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights_f16");
  if (((*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(_QWORD *)v8 + 24))(v8, &__p) & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "blob_weights_f16_t");
    v12 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 24))(v8, &dest);
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
      operator delete(dest.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.width) < 0)
    operator delete(__p.data);
  if (((v11 | v12) & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(v13 + 16);
    v15 = *(std::__shared_weak_count **)(v13 + 24);
    v308 = v14;
    v309 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v307 = (***(uint64_t (****)(_QWORD))(v14 + 8))(*(_QWORD *)(v14 + 8));
    v306 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12);
    Espresso::abstract_engine_factory::shared(&v304);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]);
    v233 = *(int32x2_t *)v18;
    v19 = *(_DWORD *)(v18 + 32);
    v20 = *(unsigned __int8 *)(v18 + 40);
    v21 = *(_QWORD *)(a1 + 40);
    v22 = a2[3].i32[2];
    dest.__r_.__value_.__r.__words[0] = v22;
    __p.data = (void *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21 + 56, v22, &dest)[3];
    v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v21 + 184), __p.data, (__int128 **)&__p);
    v24 = *(_OWORD *)(v23 + 72);
    *(_OWORD *)v299 = *(_OWORD *)(v23 + 56);
    *(_OWORD *)&v299[16] = v24;
    v25 = (const void *)*((_QWORD *)v23 + 12);
    v300 = *((_QWORD *)v23 + 11);
    v301 = 0;
    v302 = 0;
    v303 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v301, v25, *((_QWORD *)v23 + 13), (uint64_t)(*((_QWORD *)v23 + 13) - (_QWORD)v25) >> 2);
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(_QWORD *)(a1 + 40) + 472);
    v26 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    v28 = v26;
    if (v19 != 1 || (Espresso::ANECompilerEngine::is_mix(v26, v27) & 1) != 0)
      goto LABEL_626;
    v29 = (_QWORD *)a2->i64[0];
    v30 = *(_QWORD *)(a2->i64[0] + 808);
    v31 = *(std::__shared_weak_count **)(a2->i64[0] + 816);
    v297 = v30;
    v298 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v29 = (_QWORD *)a2->i64[0];
    }
    v34 = v29[99];
    v35 = (std::__shared_weak_count *)v29[100];
    v295 = v34;
    v296 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      v29 = (_QWORD *)a2->i64[0];
    }
    v38 = v29[103];
    v39 = (std::__shared_weak_count *)v29[104];
    v293 = v38;
    v294 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    if (v30 && v34 && v38)
      goto LABEL_56;
    v42 = v310;
    if (!v310)
      goto LABEL_72;
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_t_int8");
    if ((*(unsigned int (**)(uint64_t, vImage_Buffer *))(*(_QWORD *)v42 + 24))(v42, &__p))
    {
      v43 = v310;
      std::string::basic_string[abi:ne180100]<0>(&dest, "Q");
      if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v43 + 24))(v43, &dest))
      {
        v44 = v310;
        std::string::basic_string[abi:ne180100]<0>(&v292, "Qscale_t");
        v45 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v44 + 24))(v44, &v292);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v292.__r_.__value_.__l.__data_);
      }
      else
      {
        v45 = 0;
      }
      if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
        operator delete(dest.__r_.__value_.__l.__data_);
    }
    else
    {
      v45 = 0;
    }
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    if ((v45 & 1) != 0)
    {
LABEL_56:
      v46 = 1;
      if (v20)
        goto LABEL_76;
    }
    else
    {
LABEL_72:
      if (v30 || v34 || v38)
        goto LABEL_650;
      v47 = v310;
      if (v310)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_t_int8");
        if (((*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(_QWORD *)v47 + 24))(v47, &__p) & 1) != 0)
        {
          v48 = 1;
        }
        else
        {
          v49 = v310;
          std::string::basic_string[abi:ne180100]<0>(&dest, "Q");
          if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v49 + 24))(v49, &dest) & 1) != 0)
          {
            v48 = 1;
          }
          else
          {
            v50 = v310;
            std::string::basic_string[abi:ne180100]<0>(&v292, "Qscale_t");
            v48 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v50 + 24))(v50, &v292);
            if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v292.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
            operator delete(dest.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.width) < 0)
          operator delete(__p.data);
        if (v48)
LABEL_650:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("is_valid_for_engine should prohibit non-tailor made style quantized embeddings.");
      }
      v46 = 0;
      if (v20)
        goto LABEL_76;
    }
    if (*(_DWORD *)&v299[20] == -1 || *(int *)&v299[20] >= 4)
    {
      if ((*(int *)&v299[16] >= 2 && *(_QWORD *)&v299[8] == 0x100000001 && *(_DWORD *)&v299[4] == 1
         || *(int *)&v299[16] <= 1 && *(int *)&v299[12] >= 1 && *(_QWORD *)&v299[4] == 0x100000001)
        && *(_DWORD *)v299 == 1)
      {
        v61 = 1;
        goto LABEL_124;
      }
LABEL_611:
      if (v39)
      {
        v212 = (unint64_t *)&v39->__shared_owners_;
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v214 = v296;
      if (v296)
      {
        v215 = (unint64_t *)&v296->__shared_owners_;
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      v217 = v298;
      if (v298)
      {
        v218 = (unint64_t *)&v298->__shared_owners_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
        }
      }
LABEL_626:

      if (v301)
      {
        v302 = v301;
        operator delete(v301);
      }
      v220 = v305;
      if (v305)
      {
        v221 = (unint64_t *)&v305->__shared_owners_;
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v223 = v309;
      if (v309)
      {
        v224 = (unint64_t *)&v309->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      goto LABEL_638;
    }
LABEL_76:
    v53 = *(int *)&v299[16] > 1 && *(_DWORD *)&v299[12] == 1 && *(_DWORD *)&v299[8] == 1 && *(_DWORD *)&v299[4] == 1;
    v54 = v53;
    if (v53)
    {
      v55 = 0;
      v56 = *(_DWORD *)v299 == 1;
    }
    else
    {
      if (*(int *)&v299[16] > 1 || *(int *)&v299[12] < 2 || *(_QWORD *)&v299[4] != 0x100000001)
      {
        v55 = 0;
        v57 = *(int *)&v299[16] < 2 && *(_DWORD *)&v299[12] < 2;
        if (v57 == 1 && *(int *)&v299[8] >= 2)
        {
          v56 = 0;
          if (*(_DWORD *)&v299[4] == 1)
          {
            v56 = 0;
            v55 = 0;
            v59 = 0;
            v58 = *(_DWORD *)v299 == 1;
            goto LABEL_111;
          }
        }
        else
        {
          v56 = 0;
        }
LABEL_96:
        v58 = 0;
        if (v57 && *(int *)&v299[8] <= 1 && *(int *)&v299[4] >= 1)
        {
          v58 = 0;
          v59 = *(_DWORD *)v299 == 1;
        }
        else
        {
          v59 = 0;
        }
LABEL_111:
        v61 = 0;
        if (v56 || v55 || v58 || v59)
        {
LABEL_124:
          v62 = *(_QWORD *)(a1 + 40) + 96;
          v63 = a2[3].i32[2];
          __p.data = (void *)v63;
          v232 = v28;
          v64 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v62, v63, &__p)[3];
          if (*((char *)v64 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)v64, *((_QWORD *)v64 + 1));
          }
          else
          {
            v65 = *v64;
            v292.__r_.__value_.__r.__words[2] = *((_QWORD *)v64 + 2);
            *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v65;
          }
          v66 = *(_QWORD *)(a1 + 40) + 56;
          v67 = a2[3].i32[2];
          __p.data = (void *)v67;
          v68 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v66, v67, &__p)[3];
          if (*((char *)v68 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)v68, *((_QWORD *)v68 + 1));
          }
          else
          {
            v69 = *v68;
            v291.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
            *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v69;
          }
          v70 = a2[1].i64[0];
          if (*(char *)(v70 + 39) < 0)
            std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v70 + 16), *(_QWORD *)(v70 + 24));
          else
            v290 = *(std::string *)(v70 + 16);
          if ((v290.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v290.__r_.__value_.__r.__words[2]);
          else
            size = v290.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v287, size + 18);
          if ((v289 & 0x80u) == 0)
            v72 = &v287;
          else
            v72 = v287;
          if (size)
          {
            if ((v290.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v73 = &v290;
            else
              v73 = (std::string *)v290.__r_.__value_.__r.__words[0];
            memmove(v72, v73, size);
          }
          strcpy((char *)v72 + size, "__@embedded_lookup");
          v286 = 0;
          v285 = 0;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a2->i64[0] + 408))(&v283);
          if ((v46 & 1) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights");
            v74 = (*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(_QWORD *)v8 + 24))(v8, &__p);
            if (SHIBYTE(__p.width) < 0)
              operator delete(__p.data);
            if (v74)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights");
              v75 = (*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(_QWORD *)v8 + 40))(v8, &__p);
              if (SHIBYTE(__p.width) < 0)
                operator delete(__p.data);
              v76 = *(_QWORD *)(a1 + 40);
              v77 = *(void **)(v76 + 576);
              v78 = *(_QWORD *)(v76 + 584);
              __p.data = v77;
              __p.height = v78;
              if (v78)
              {
                v79 = (unint64_t *)(v78 + 8);
                do
                  v80 = __ldxr(v79);
                while (__stxr(v80 + 1, v79));
              }
              v81 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v77 + 80))(v77, v75);
              v82 = (char *)operator new(0x58uLL);
              *((_QWORD *)v82 + 1) = 0;
              *((_QWORD *)v82 + 2) = 0;
              *(_QWORD *)v82 = &off_1E2DBEC38;
              *((_QWORD *)v82 + 3) = &off_1E2DA11B0;
              *(_OWORD *)(v82 + 56) = 0u;
              *(_OWORD *)(v82 + 72) = 0u;
              *((int32x2_t *)v82 + 4) = vrev64_s32(v233);
              *((_QWORD *)v82 + 5) = v81;
              v82[48] = 0;
              dest.__r_.__value_.__r.__words[0] = (std::string::size_type)(v82 + 24);
              dest.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v285, (__int128 *)&dest);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&dest);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
            }
            else
            {
              (*(void (**)(vImage_Buffer *__return_ptr))(*(_QWORD *)a2->i64[0] + 416))(&__p);
              data = __p.data;
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
              if (!data)
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
              (*(void (**)(vImage_Buffer *__return_ptr))(*(_QWORD *)a2->i64[0] + 416))(&__p);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v285, (__int128 *)&__p);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
            }
          }
          Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::remove_layer(a2);
          if ((v289 & 0x80u) == 0)
            v84 = v289;
          else
            v84 = v288;
          std::string::basic_string[abi:ne180100]((uint64_t)&__sz, v84 + 23);
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_sz = &__sz;
          else
            p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
          if (v84)
          {
            if ((v289 & 0x80u) == 0)
              v86 = &v287;
            else
              v86 = v287;
            memmove(p_sz, v86, v84);
          }
          strcpy((char *)p_sz + v84, "__branch_a_reshaped_top");
          LOWORD(v254) = 1;
          HIDWORD(v254) = 1;
          *(_OWORD *)&__p.data = xmmword_191A935B0;
          *(_OWORD *)&__p.width = xmmword_191A93460;
          v87 = v304;
          std::string::basic_string[abi:ne180100]<0>(&dest, "reshape");
          Espresso::abstract_engine_factory::make_kernel_priv(v87, (uint64_t)&v308, (uint64_t)&dest, (uint64_t)&__p, &v307);
          if (lpsrc.__r_.__value_.__r.__words[0]
          {
            v340.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
            v340.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
            if (lpsrc.__r_.__value_.__l.__size_)
            {
              v89 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
              do
                v90 = __ldxr(v89);
              while (__stxr(v90 + 1, v89));
            }
          }
          else
          {
            *(_OWORD *)&v340.__r_.__value_.__l.__data_ = 0uLL;
          }
          v91 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v92 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
            operator delete(dest.__r_.__value_.__l.__data_);
          if ((v289 & 0x80u) == 0)
            v94 = v289;
          else
            v94 = v288;
          std::string::basic_string[abi:ne180100]((uint64_t)&dest, v94 + 19);
          if ((dest.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dest = &dest;
          else
            p_dest = (std::string *)dest.__r_.__value_.__r.__words[0];
          if (v94)
          {
            if ((v289 & 0x80u) == 0)
              v96 = &v287;
            else
              v96 = v287;
            memmove(p_dest, v96, v94);
          }
          strcpy((char *)p_dest + v94, "__branch_a_reshaped");
          if ((v289 & 0x80u) == 0)
            v97 = v289;
          else
            v97 = v288;
          std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v97 + 23);
          if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_lpsrc = &lpsrc;
          else
            p_lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
          if (v97)
          {
            if ((v289 & 0x80u) == 0)
              v99 = &v287;
            else
              v99 = v287;
            memmove(p_lpsrc, v99, v97);
          }
          strcpy((char *)p_lpsrc + v97, "__branch_a_reshaped_top");
          v100 = v233.u32[1];
          v101 = v340.__r_.__value_.__r.__words[0];
          if (v233.i32[1] >= 0x801u)
            *(_BYTE *)(v340.__r_.__value_.__r.__words[0] + 529) = 1;
          v102 = (std::__shared_weak_count *)v340.__r_.__value_.__l.__size_;
          v280[0] = v101;
          v280[1] = v340.__r_.__value_.__l.__size_;
          if (v340.__r_.__value_.__l.__size_)
          {
            v103 = (unint64_t *)(v340.__r_.__value_.__l.__size_ + 8);
            do
              v104 = __ldxr(v103);
            while (__stxr(v104 + 1, v103));
          }
          std::string::basic_string[abi:ne180100]<0>(&v279, "reshape");
          if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__str, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
          else
            __str = v291;
          memset(&v278, 0, sizeof(v278));
          v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
          v345.__r_.__value_.__s.__data_[8] = 0;
          v278.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v278.__r_.__value_.__l.__size_ = v278.__r_.__value_.__r.__words[0];
          v278.__r_.__value_.__r.__words[2] = v278.__r_.__value_.__r.__words[0] + 24;
          v278.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v278.__r_.__value_.__r.__words[2], (__int128 *)&__str, &v348, (std::string *)v278.__r_.__value_.__l.__data_);
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v343, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          else
            v343 = __sz;
          memset(&v345, 0, sizeof(v345));
          v341.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
          v341.__r_.__value_.__s.__data_[8] = 0;
          v345.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v345.__r_.__value_.__l.__size_ = v345.__r_.__value_.__r.__words[0];
          v345.__r_.__value_.__r.__words[2] = v345.__r_.__value_.__r.__words[0] + 24;
          v345.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v345.__r_.__value_.__r.__words[2], (__int128 *)&v343, (__int128 *)&v344, (std::string *)v345.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v280, &v279, &dest, (std::string **)&v278, (std::string **)&v345);
          v341.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
          if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v343.__r_.__value_.__l.__data_);
          v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v345);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v279.__r_.__value_.__l.__data_);
          if (v102)
          {
            v105 = (unint64_t *)&v102->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
            operator delete(lpsrc.__r_.__value_.__l.__data_);
          if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
            operator delete(dest.__r_.__value_.__l.__data_);
          v107 = (std::__shared_weak_count *)v340.__r_.__value_.__l.__size_;
          if (v340.__r_.__value_.__l.__size_)
          {
            v108 = (unint64_t *)(v340.__r_.__value_.__l.__size_ + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          if ((v289 & 0x80u) == 0)
            v110 = v289;
          else
            v110 = v288;
          std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v110 + 20);
          if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v111 = &lpsrc;
          else
            v111 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
          if (v110)
          {
            if ((v289 & 0x80u) == 0)
              v112 = &v287;
            else
              v112 = v287;
            memmove(v111, v112, v110);
          }
          strcpy((char *)v111 + v110, "__branch_b_range_top");
          v279.__r_.__value_.__r.__words[0] = 0x100000001;
          HIDWORD(v279.__r_.__value_.__r.__words[2]) = -1;
          LODWORD(v279.__r_.__value_.__r.__words[1]) = v233.i32[1];
          *(std::string::size_type *)((char *)&v279.__r_.__value_.__r.__words[1] + 4) = 0x100000001;
          v113 = v304;
          std::string::basic_string[abi:ne180100]<0>(&__p, "load_constant");
          Espresso::abstract_engine_factory::make_kernel_priv(v113, (uint64_t)&v308, (uint64_t)&__p, (uint64_t)&v279, &v307);
          if (dest.__r_.__value_.__r.__words[0]
          {
            v341.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
            v341.__r_.__value_.__l.__size_ = dest.__r_.__value_.__l.__size_;
            if (dest.__r_.__value_.__l.__size_)
            {
              v115 = (unint64_t *)(dest.__r_.__value_.__l.__size_ + 8);
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }
          }
          else
          {
            *(_OWORD *)&v341.__r_.__value_.__l.__data_ = 0uLL;
          }
          v117 = (std::__shared_weak_count *)dest.__r_.__value_.__l.__size_;
          if (dest.__r_.__value_.__l.__size_)
          {
            v118 = (unint64_t *)(dest.__r_.__value_.__l.__size_ + 8);
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          if (SHIBYTE(__p.width) < 0)
            operator delete(__p.data);
          if ((v289 & 0x80u) == 0)
            v120 = v289;
          else
            v120 = v288;
          std::string::basic_string[abi:ne180100]((uint64_t)&v278, v120 + 16);
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v121 = &v278;
          else
            v121 = (std::string *)v278.__r_.__value_.__r.__words[0];
          if (v120)
          {
            if ((v289 & 0x80u) == 0)
              v122 = &v287;
            else
              v122 = v287;
            memmove(v121, v122, v120);
          }
          strcpy((char *)v121 + v120, "__branch_b_range");
          v123 = (std::__shared_weak_count *)operator new(0x60uLL);
          v123->__shared_owners_ = 0;
          v124 = (unint64_t *)&v123->__shared_owners_;
          v123->__shared_weak_owners_ = 0;
          v123[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11F0;
          v123->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECA8;
          *(_OWORD *)&v123[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v123[3].__shared_owners_ = 0u;
          LODWORD(v123[1].__shared_owners_) = 1;
          HIDWORD(v123[1].__shared_owners_) = v233.i32[1];
          v123[1].__shared_weak_owners_ = 0x100000001;
          v125 = (std::__shared_weak_count_vtbl *)Espresso::kern_alloc_uninitialized((Espresso *)(4 * v233.i32[1]));
          bzero(v125, 4 * v233.i32[1]);
          v123[2].__vftable = v125;
          LOBYTE(v123[2].__shared_owners_) = 1;
          v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123[1];
          v340.__r_.__value_.__l.__size_ = (std::string::size_type)v123;
          if (v233.i32[1] > 0x800u)
          {
            LOWORD(v345.__r_.__value_.__l.__data_) = 0;
            v234 = vdupq_n_s64(1uLL);
            do
            {
              LODWORD(__str.__r_.__value_.__l.__data_) = 0;
              *(int64x2_t *)&__p.height = v234;
              __p.data = &v345;
              __p.rowBytes = 2;
              *(int64x2_t *)&dest.__r_.__value_.__r.__words[1] = v234;
              dest.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              dest_24.__r_.__value_.__r.__words[0] = 4;
              vImageConvert_Planar16FtoPlanarF(&__p, (const vImage_Buffer *)&dest, 0);
              v127 = (__int16)v345.__r_.__value_.__l.__data_;
              *((_DWORD *)&v123[2].~__shared_weak_count + LOWORD(v345.__r_.__value_.__l.__data_)) = __str.__r_.__value_.__l.__data_;
              LOWORD(v345.__r_.__value_.__l.__data_) = v127 + 1;
            }
            while (v233.i32[1] > (unsigned __int16)(v127 + 1));
          }
          else if (v233.i32[1])
          {
            v126 = 0;
            do
            {
              *((float *)&v125->~__shared_weak_count + v126) = (float)v126;
              ++v126;
            }
            while (v233.u32[1] != v126);
          }
          v128 = (_DWORD *)v341.__r_.__value_.__r.__words[0];
          v277[0] = v123 + 1;
          v277[1] = v123;
          do
            v129 = __ldxr(v124);
          while (__stxr(v129 + 1, v124));
          Espresso::generic_load_constant_kernel::set_constant_blob(v128, (uint64_t)v277);
          do
            v130 = __ldaxr(v124);
          while (__stlxr(v130 - 1, v124));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
          v131 = (std::__shared_weak_count *)v341.__r_.__value_.__l.__size_;
          v276 = *(_OWORD *)&v341.__r_.__value_.__l.__data_;
          if (v341.__r_.__value_.__l.__size_)
          {
            v132 = (unint64_t *)(v341.__r_.__value_.__l.__size_ + 8);
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "load_constant");
          memset(&dest, 0, sizeof(dest));
          if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v345, lpsrc.__r_.__value_.__l.__data_, lpsrc.__r_.__value_.__l.__size_);
          else
            v345 = lpsrc;
          memset(&__str, 0, sizeof(__str));
          v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          v343.__r_.__value_.__s.__data_[8] = 0;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0] + 24;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str.__r_.__value_.__r.__words[2], (__int128 *)&v345, (__int128 *)&v346, (std::string *)__str.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, (uint64_t *)&v276, (const std::string *)&__p, &v278, (std::string **)&dest, (std::string **)&__str);
          v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v345.__r_.__value_.__l.__data_);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&dest;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (SHIBYTE(__p.width) < 0)
            operator delete(__p.data);
          if (v131)
          {
            v134 = (unint64_t *)&v131->__shared_owners_;
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          v136 = (std::__shared_weak_count *)v340.__r_.__value_.__l.__size_;
          if (v340.__r_.__value_.__l.__size_)
          {
            v137 = (unint64_t *)(v340.__r_.__value_.__l.__size_ + 8);
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v278.__r_.__value_.__l.__data_);
          v139 = (std::__shared_weak_count *)v341.__r_.__value_.__l.__size_;
          if (v341.__r_.__value_.__l.__size_)
          {
            v140 = (unint64_t *)(v341.__r_.__value_.__l.__size_ + 8);
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
          }
          if ((v289 & 0x80u) == 0)
            v142 = v289;
          else
            v142 = v288;
          std::string::basic_string[abi:ne180100]((uint64_t)&v279, v142 + 20);
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v143 = &v279;
          else
            v143 = (std::string *)v279.__r_.__value_.__r.__words[0];
          if (v142)
          {
            if ((v289 & 0x80u) == 0)
              v144 = &v287;
            else
              v144 = v287;
            memmove(v143, v144, v142);
          }
          strcpy((char *)v143 + v142, "__elementwise_eq_top");
          __p.width = 897988541;
          LOBYTE(__p.rowBytes) = 0;
          LODWORD(v256) = 0;
          v255.i32[1] = 0;
          __p.data = (void *)100;
          __p.height = 1065353216;
          v145 = v304;
          std::string::basic_string[abi:ne180100]<0>(&dest, "elementwise");
          Espresso::abstract_engine_factory::make_kernel_priv(v145, (uint64_t)&v308, (uint64_t)&dest, (uint64_t)&__p, &v307);
          if (v278.__r_.__value_.__r.__words[0]
          {
            v339.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
            v339.__r_.__value_.__l.__size_ = v278.__r_.__value_.__l.__size_;
            if (v278.__r_.__value_.__l.__size_)
            {
              v147 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
              do
                v148 = __ldxr(v147);
              while (__stxr(v148 + 1, v147));
            }
          }
          else
          {
            *(_OWORD *)&v339.__r_.__value_.__l.__data_ = 0uLL;
          }
          v149 = (std::__shared_weak_count *)v278.__r_.__value_.__l.__size_;
          if (v278.__r_.__value_.__l.__size_)
          {
            v150 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
            operator delete(dest.__r_.__value_.__l.__data_);
          if ((v289 & 0x80u) == 0)
            v152 = v289;
          else
            v152 = v288;
          std::string::basic_string[abi:ne180100]((uint64_t)&v278, v152 + 16);
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v153 = &v278;
          else
            v153 = (std::string *)v278.__r_.__value_.__r.__words[0];
          if (v152)
          {
            if ((v289 & 0x80u) == 0)
              v154 = &v287;
            else
              v154 = v287;
            memmove(v153, v154, v152);
          }
          strcpy((char *)v153 + v152, "__elementwise_eq");
          v275 = *(_OWORD *)&v339.__r_.__value_.__l.__data_;
          if (v339.__r_.__value_.__l.__size_)
          {
            v155 = (unint64_t *)(v339.__r_.__value_.__l.__size_ + 8);
            do
              v156 = __ldxr(v155);
            while (__stxr(v156 + 1, v155));
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "elementwise");
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&dest, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          else
            dest = __sz;
          if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&dest_24, lpsrc.__r_.__value_.__l.__data_, lpsrc.__r_.__value_.__l.__size_);
          else
            dest_24 = lpsrc;
          memset(&v345, 0, sizeof(v345));
          v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
          v343.__r_.__value_.__s.__data_[8] = 0;
          v345.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          v345.__r_.__value_.__l.__size_ = v345.__r_.__value_.__r.__words[0];
          v345.__r_.__value_.__r.__words[2] = v345.__r_.__value_.__r.__words[0] + 48;
          v345.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v345.__r_.__value_.__r.__words[2], (__int128 *)&dest, &v319, (std::string *)v345.__r_.__value_.__l.__data_);
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v341, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
          else
            v341 = v279;
          memset(&v343, 0, sizeof(v343));
          v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
          v340.__r_.__value_.__s.__data_[8] = 0;
          v343.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v343.__r_.__value_.__l.__size_ = v343.__r_.__value_.__r.__words[0];
          v343.__r_.__value_.__r.__words[2] = v343.__r_.__value_.__r.__words[0] + 24;
          v343.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v343.__r_.__value_.__r.__words[2], (__int128 *)&v341, (__int128 *)&v342, (std::string *)v343.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, (uint64_t *)&v275, &__str, &v278, (std::string **)&v345, (std::string **)&v343);
          v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
          if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v341.__r_.__value_.__l.__data_);
          v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
          for (i = 0; i != -6; i -= 3)
          {
            if (SHIBYTE(dest_24.__r_.__value_.__r.__words[i + 2]) < 0)
              operator delete(*(void **)((char *)&dest + i * 8 + 24));
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v158 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
          if (*((_QWORD *)&v275 + 1))
          {
            v159 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v278.__r_.__value_.__l.__data_);
          v161 = (std::__shared_weak_count *)v339.__r_.__value_.__l.__size_;
          if (v339.__r_.__value_.__l.__size_)
          {
            v162 = (unint64_t *)(v339.__r_.__value_.__l.__size_ + 8);
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          memset(&v278, 0, sizeof(v278));
          if (v46)
          {
            if (v295)
              v164 = *(float *)(*(_QWORD *)(v295 + 16) + 4);
            else
              v164 = 128.0;
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__scale_onehot_float_to_int_top", (const void **)&v287, &__str);
            *(vImagePixelCount *)((char *)&__p.height + 4) = 0x358637BD00000000;
            HIDWORD(__p.width) = 0;
            LOBYTE(__p.rowBytes) = 0;
            LODWORD(v256) = 0;
            v255.i32[1] = 0;
            __p.data = (void *)1;
            LODWORD(__p.height) = roundf(1.0 / (float)(v164 * 0.0078125));
            v169 = v304;
            std::string::basic_string[abi:ne180100]<0>(&dest, "elementwise");
            Espresso::abstract_engine_factory::make_kernel_priv(v169, (uint64_t)&v308, (uint64_t)&dest, (uint64_t)&__p, &v307);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v338, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v345);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__scale_floattoint_onehot", (const void **)&v287, &dest);
            v274 = *(_OWORD *)&v338.__r_.__value_.__l.__data_;
            if (v338.__r_.__value_.__l.__size_)
            {
              v178 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
              do
                v179 = __ldxr(v178);
              while (__stxr(v179 + 1, v178));
            }
            std::string::basic_string[abi:ne180100]<0>(&v345, "elementwise");
            if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v341, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
            else
              v341 = v279;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v343, (__int128 *)&v341, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v339, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v339 = __str;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v340, (__int128 *)&v339, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, (uint64_t *)&v274, &v345, &dest, (std::string **)&v343, (std::string **)&v340);
            v337.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v337);
            if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v339.__r_.__value_.__l.__data_);
            v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v341.__r_.__value_.__l.__data_);
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v345.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v274);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v338);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_embed_top", (const void **)&v287, &v345);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_scale_top", (const void **)&v287, &v343);
            __asm { FMOV            V11.2S, #1.0 }
            v257 = _D11;
            v260 = 0;
            v259 = 0;
            v261 = 0;
            v263 = 0;
            v265 = 1;
            v272 = 0;
            v273 = 0;
            v268 = 0;
            v269 = 0;
            memset(&__p, 0, sizeof(__p));
            v254 = 1;
            v264 = xmmword_191A93310;
            v266 = 0;
            v267 = 0x10000;
            v270 = 0;
            v271 = 1;
            v255 = v233;
            v256 = xmmword_191A93590;
            v262 = 0x1000100010001;
            v258 = 2;
            std::string::basic_string[abi:ne180100]<0>(&dest, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv(v169, (uint64_t)&v308, (uint64_t)&dest, (uint64_t)&__p, &v307);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v251, v341.__r_.__value_.__l.__data_, v341.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v341);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            Espresso::blob<unsigned char,4>::make(v250, v255.i32[1], v255.i32[0]);
            if (v297)
              memcpy(*(void **)(v250[0] + 24), *(const void **)(v297 + 16), (v233.i32[0] * v233.i32[1]));
            v249[0] = 0;
            v249[1] = 0;
            v181 = v251;
            std::string::basic_string[abi:ne180100]<0>(&dest, "W_int8");
            (*(void (**)(std::string *, _QWORD *, std::string *, _QWORD, _QWORD, _QWORD))(v181->__r_.__value_.__r.__words[0] + 160))(v181, v249, &dest, *(_QWORD *)(v250[0] + 24), (v233.i32[0] * v233.i32[1]), 0);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv", (const void **)&v287, &v341);
            v248[0] = (uint64_t)v251;
            v248[1] = v252;
            if (v252)
            {
              v182 = (unint64_t *)(v252 + 8);
              do
                v183 = __ldxr(v182);
              while (__stxr(v183 + 1, v182));
            }
            std::string::basic_string[abi:ne180100]<0>(&dest, "convolution");
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v339, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v339 = __str;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v340, (__int128 *)&v339, 1uLL);
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v337, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
            else
              v337 = v345;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v338, (__int128 *)&v337, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v248, &dest, &v341, (std::string **)&v340, (std::string **)&v338);
            v316.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v316);
            if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v337.__r_.__value_.__l.__data_);
            v338.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v338);
            if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v248);
            v320 = _D11;
            v323 = 0;
            v322 = 0;
            v324 = 0;
            v326 = 0;
            v328 = 1;
            v335 = 0;
            v336 = 0;
            v332 = 0;
            v331 = 0;
            memset(&dest, 0, sizeof(dest));
            dest_24.__r_.__value_.__l.__size_ = 1;
            v327 = xmmword_191A93310;
            v329 = 0;
            v330 = 0x10000;
            dest_24.__r_.__value_.__r.__words[0] = 0;
            v333 = 0;
            v334 = 1;
            HIDWORD(dest_24.__r_.__value_.__r.__words[2]) = v233.i32[1];
            LODWORD(dest_24.__r_.__value_.__r.__words[2]) = 1;
            v319 = xmmword_191A93590;
            v325 = 0x1000100010001;
            v321 = 2;
            std::string::basic_string[abi:ne180100]<0>(&v340, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv(v169, (uint64_t)&v308, (uint64_t)&v340, (uint64_t)&dest, &v307);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v246, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v339);
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v340.__r_.__value_.__l.__data_);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v244, SHIDWORD(dest_24.__r_.__value_.__r.__words[2]), dest_24.__r_.__value_.__r.__words[2], 1, 1);
            if (v293)
            {
              v184 = v244;
              if (v233.i32[1])
              {
                v185 = *(float **)(v293 + 16);
                v186 = *(float **)(v244 + 24);
                do
                {
                  v187 = *v185++;
                  *v186++ = (float)((float)(v164 * 0.0078125) * (float)(v164 * 0.0078125)) * v187;
                  --v100;
                }
                while (v100);
              }
            }
            else
            {
              v184 = v244;
            }
            v188 = v246;
            v243[0] = v184;
            v243[1] = v245;
            if (v245)
            {
              v189 = (unint64_t *)(v245 + 8);
              do
                v190 = __ldxr(v189);
              while (__stxr(v190 + 1, v189));
            }
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v188 + 400))(v188, v243);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v243);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_scales", (const void **)&v287, &v340);
            v242[0] = v246;
            v242[1] = v247;
            if (v247)
            {
              v191 = (unint64_t *)(v247 + 8);
              do
                v192 = __ldxr(v191);
              while (__stxr(v192 + 1, v191));
            }
            std::string::basic_string[abi:ne180100]<0>(&v339, "convolution");
            if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v337, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
            else
              v337 = v279;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v338, (__int128 *)&v337, 1uLL);
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v315, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
            else
              v315 = v343;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v316, (__int128 *)&v315, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v242, &v339, &v340, (std::string **)&v338, (std::string **)&v316);
            v314 = &v316;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v314);
            if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v315.__r_.__value_.__l.__data_);
            v316.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v316);
            if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v337.__r_.__value_.__l.__data_);
            if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v339.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v242);
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v340.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v244);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v246);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v341.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v249);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v250);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v251);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__mul_apply_scales_top", (const void **)&v287, &v341);
            __p.width = 897988541;
            LOBYTE(__p.rowBytes) = 0;
            LODWORD(v256) = 0;
            v255.i32[1] = 0;
            __p.data = (void *)1;
            __p.height = 1065353216;
            std::string::basic_string[abi:ne180100]<0>(&dest, "elementwise");
            Espresso::abstract_engine_factory::make_kernel_priv(v169, (uint64_t)&v308, (uint64_t)&dest, (uint64_t)&__p, &v307);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v315, v340.__r_.__value_.__l.__data_, v340.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v340);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__apply_scales_to_embedding", (const void **)&v287, &v340);
            v241 = *(_OWORD *)&v315.__r_.__value_.__l.__data_;
            if (v315.__r_.__value_.__l.__size_)
            {
              v193 = (unint64_t *)(v315.__r_.__value_.__l.__size_ + 8);
              do
                v194 = __ldxr(v193);
              while (__stxr(v194 + 1, v193));
            }
            std::string::basic_string[abi:ne180100]<0>(&v339, "elementwise");
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&dest, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
            else
              dest = v345;
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&dest_24, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
            else
              dest_24 = v343;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v338, (__int128 *)&dest, 2uLL);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v316, v341.__r_.__value_.__l.__data_, v341.__r_.__value_.__l.__size_);
            else
              v316 = v341;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v337, (__int128 *)&v316, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, (uint64_t *)&v241, &v339, &v340, (std::string **)&v338, (std::string **)&v337);
            v251 = &v337;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v316.__r_.__value_.__l.__data_);
            v337.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v337);
            for (j = 0; j != -6; j -= 3)
            {
              if (SHIBYTE(dest_24.__r_.__value_.__r.__words[j + 2]) < 0)
                operator delete(*(void **)((char *)&dest + j * 8 + 24));
            }
            if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v339.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v241);
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v340.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
            std::string::operator=(&v278, &v341);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v341.__r_.__value_.__l.__data_);
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v343.__r_.__value_.__l.__data_);
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v345.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          else
          {
            __asm { FMOV            V0.2S, #1.0 }
            v257 = _D0;
            v260 = 0;
            v259 = 0;
            v261 = 0;
            v263 = 0;
            v265 = 1;
            v272 = 0;
            v273 = 0;
            v268 = 0;
            v269 = 0;
            memset(&__p, 0, sizeof(__p));
            v254 = 1;
            v264 = xmmword_191A93310;
            v266 = 0;
            v267 = 0x10000;
            v270 = 0;
            v271 = 1;
            v255 = v233;
            v256 = xmmword_191A93590;
            v262 = 0x1000100010001;
            v258 = 2;
            v169 = v304;
            std::string::basic_string[abi:ne180100]<0>(&dest, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv(v169, (uint64_t)&v308, (uint64_t)&dest, (uint64_t)&__p, &v307);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v338, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v337, v255.i32[1], v255.i32[0], 1, 1);
            memcpy(*(void **)(v337.__r_.__value_.__r.__words[0] + 24), *(const void **)(v285 + 16), 4 * (v233.i32[0] * v233.i32[1]));
            v170 = v338.__r_.__value_.__r.__words[0];
            v240 = *(_OWORD *)&v337.__r_.__value_.__l.__data_;
            if (v337.__r_.__value_.__l.__size_)
            {
              v171 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
              do
                v172 = __ldxr(v171);
              while (__stxr(v172 + 1, v171));
            }
            (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)v170 + 400))(v170, &v240);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v240);
            v173 = v338.__r_.__value_.__r.__words[0];
            v239[0] = v283;
            v239[1] = v284;
            if (v284)
            {
              v174 = (unint64_t *)&v284->__shared_owners_;
              do
                v175 = __ldxr(v174);
              while (__stxr(v175 + 1, v174));
            }
            (*(void (**)(std::string::size_type, _QWORD *))(*(_QWORD *)v173 + 392))(v173, v239);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v239);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv", (const void **)&v287, &dest);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_top", (const void **)&v287, &__str);
            v238 = *(_OWORD *)&v338.__r_.__value_.__l.__data_;
            if (v338.__r_.__value_.__l.__size_)
            {
              v176 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
              do
                v177 = __ldxr(v176);
              while (__stxr(v177 + 1, v176));
            }
            std::string::basic_string[abi:ne180100]<0>(&v345, "convolution");
            if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v341, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
            else
              v341 = v279;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v343, (__int128 *)&v341, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v339, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v339 = __str;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v340, (__int128 *)&v339, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, (uint64_t *)&v238, &v345, &dest, (std::string **)&v343, (std::string **)&v340);
            v316.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v316);
            if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v339.__r_.__value_.__l.__data_);
            v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v341.__r_.__value_.__l.__data_);
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v345.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v238);
            std::string::operator=(&v278, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v337);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v338);
          }
          if (v61)
          {
            LOWORD(v254) = 1;
            HIDWORD(v254) = 1;
            __p.data = (void *)0x100000001;
            __p.height = __PAIR64__(*(unsigned int *)&v299[12], v233.u32[0]);
            LODWORD(__p.width) = *(_DWORD *)&v299[16];
            v196 = *(_DWORD *)&v299[20];
            if (*(_DWORD *)&v299[16] == 1)
              v197 = 4;
            else
              v197 = 5;
            if (*(_DWORD *)&v299[20] == -1)
              v196 = v197;
            HIDWORD(__p.width) = v196;
            __p.rowBytes = 1;
            std::string::basic_string[abi:ne180100]<0>(&dest, "reshape");
            Espresso::abstract_engine_factory::make_kernel_priv(v169, (uint64_t)&v308, (uint64_t)&dest, (uint64_t)&__p, &v307);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reshape_kernel,Espresso::base_kernel>(&v339, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_reshaped", (const void **)&v287, &dest);
            v237 = *(_OWORD *)&v339.__r_.__value_.__l.__data_;
            if (v339.__r_.__value_.__l.__size_)
            {
              v198 = (unint64_t *)(v339.__r_.__value_.__l.__size_ + 8);
              do
                v199 = __ldxr(v198);
              while (__stxr(v199 + 1, v198));
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, "reshape");
            if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v343, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
            else
              v343 = v278;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v345, (__int128 *)&v343, 1uLL);
            if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v340, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
            else
              v340 = v292;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v341, (__int128 *)&v340, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, (uint64_t *)&v237, &__str, &dest, (std::string **)&v345, (std::string **)&v341);
            v338.__r_.__value_.__r.__words[0] = (std::string::size_type)&v341;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v338);
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v340.__r_.__value_.__l.__data_);
            v341.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
            v28 = v232;
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v343.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v237);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v339);
          }
          else
          {
            *(_OWORD *)&v337.__r_.__value_.__l.__data_ = xmmword_191A93610;
            LODWORD(v337.__r_.__value_.__r.__words[2]) = 4;
            std::string::basic_string[abi:ne180100]<0>(&__p, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v169, (uint64_t)&v308, (uint64_t)&__p, (uint64_t)&v337, &v307);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v316, dest.__r_.__value_.__l.__data_, dest.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&dest);
            if (SHIBYTE(__p.width) < 0)
              operator delete(__p.data);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_t", (const void **)&v287, &dest);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_t", (const void **)&v287, &__str);
            v236 = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
            if (v316.__r_.__value_.__l.__size_)
            {
              v200 = (unint64_t *)(v316.__r_.__value_.__l.__size_ + 8);
              do
                v201 = __ldxr(v200);
              while (__stxr(v201 + 1, v200));
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "transpose");
            if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v343, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
            else
              v343 = v278;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v345, (__int128 *)&v343, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v340, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v340 = __str;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v341, (__int128 *)&v340, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, (uint64_t *)&v236, (const std::string *)&__p, &dest, (std::string **)&v345, (std::string **)&v341);
            v339.__r_.__value_.__r.__words[0] = (std::string::size_type)&v341;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v339);
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v340.__r_.__value_.__l.__data_);
            v341.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v343.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.width) < 0)
              operator delete(__p.data);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v236);
            LOWORD(v254) = 1;
            HIDWORD(v254) = 1;
            LODWORD(__p.data) = v233.i32[0];
            *(_OWORD *)((char *)&__p.data + 4) = *(_OWORD *)&v299[4];
            v202 = *(_DWORD *)&v299[20];
            if (*(_DWORD *)&v299[16] == 1)
              v203 = 4;
            else
              v203 = 5;
            if (*(_DWORD *)&v299[20] == -1)
              v202 = v203;
            __p.rowBytes = 0;
            HIDWORD(__p.width) = v202;
            std::string::basic_string[abi:ne180100]<0>(&v345, "reshape");
            Espresso::abstract_engine_factory::make_kernel_priv(v169, (uint64_t)&v308, (uint64_t)&v345, (uint64_t)&__p, &v307);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reshape_kernel,Espresso::base_kernel>(&v315, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v343);
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v345.__r_.__value_.__l.__data_);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_t_reshaped", (const void **)&v287, &v345);
            v235 = *(_OWORD *)&v315.__r_.__value_.__l.__data_;
            if (v315.__r_.__value_.__l.__size_)
            {
              v204 = (unint64_t *)(v315.__r_.__value_.__l.__size_ + 8);
              do
                v205 = __ldxr(v204);
              while (__stxr(v205 + 1, v204));
            }
            std::string::basic_string[abi:ne180100]<0>(&v343, "reshape");
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v340, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v340 = __str;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v341, (__int128 *)&v340, 1uLL);
            if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v338, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
            else
              v338 = v292;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v339, (__int128 *)&v338, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, (uint64_t *)&v235, &v343, &v345, (std::string **)&v341, (std::string **)&v339);
            v251 = &v339;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
            if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v338.__r_.__value_.__l.__data_);
            v339.__r_.__value_.__r.__words[0] = (std::string::size_type)&v341;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v339);
            v28 = v232;
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v340.__r_.__value_.__l.__data_);
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v343.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v235);
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v345.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
              operator delete(dest.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v316);
          }
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v278.__r_.__value_.__l.__data_);
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v279.__r_.__value_.__l.__data_);
          if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
            operator delete(lpsrc.__r_.__value_.__l.__data_);
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__sz.__r_.__value_.__l.__data_);
          v206 = v284;
          if (v284)
          {
            v207 = (unint64_t *)&v284->__shared_owners_;
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
              std::__shared_weak_count::__release_weak(v206);
            }
          }
          v209 = v286;
          if (v286)
          {
            v210 = (unint64_t *)&v286->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
          if ((char)v289 < 0)
            operator delete(v287);
          if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v290.__r_.__value_.__l.__data_);
          if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v291.__r_.__value_.__l.__data_);
          if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v292.__r_.__value_.__l.__data_);
          v39 = v294;
          goto LABEL_611;
        }
        goto LABEL_611;
      }
      v56 = 0;
      v55 = *(_DWORD *)v299 == 1;
    }
    v57 = (*(_DWORD *)&v299[12] < 2u) & ~v54;
    goto LABEL_96;
  }
LABEL_638:
  v226 = v311;
  if (v311)
  {
    v227 = (unint64_t *)&v311->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = v313;
  if (v313)
  {
    v230 = (unint64_t *)&v313->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
}

void sub_1915A6A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  void *v56;

  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  if (a54 < 0)
    operator delete(a49);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x330]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x340]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);

  v56 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v56;
    operator delete(v56);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3A0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3B8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3D8]);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context21handle_elementwise_eqEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t (***v17)(_QWORD);
  int v18;
  uint64_t v19;
  unint64_t v20;
  const void **v21;
  size_t v22;
  std::string *v23;
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  const void **v27;
  size_t v28;
  std::string *v29;
  const void *v30;
  uint64_t v31;
  unint64_t v32;
  const void **v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  uint64_t v37;
  unint64_t v38;
  __int128 *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  std::string *p_p;
  const void *v46;
  uint64_t v47;
  unint64_t v48;
  std::string **v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  std::string *v60;
  const void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  std::string *v72;
  const void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  std::string *v89;
  const void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::string *v102;
  void **p_data;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::string *v109;
  std::string *v110;
  std::string __p;
  std::string v112;
  void *v113[2];
  char v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  int v121;
  int v122;
  void ***v123;
  char v124;
  _BYTE v125[72];
  std::string v126;
  uint64_t v127;
  std::string v128;
  __int128 v129;

  *(_QWORD *)&v129 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == *(_QWORD *)(a1 + 32)
    && *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]) == 100)
  {
    v4 = *(_QWORD *)(a1 + 40) + 56;
    *(_QWORD *)v125 = a2[3].i32[2];
    v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, *(unint64_t *)v125, v125);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4] - v5[3]) >> 3) >= 2)
    {
      v6 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)v125 = a2[3].i32[2];
      v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 56, *(unint64_t *)v125, v125);
      v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v6 + 184, (_QWORD *)v7[3]);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = a2[3].i32[2];
      v120.__r_.__value_.__r.__words[0] = v10;
      v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 56, v10, &v120);
      if (v8 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v9 + 184, (_QWORD *)(v11[3] + 24)))
      {
        *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]) = 33;
        *(_DWORD *)v125 = a2[3].i32[2];
        memset(&v125[8], 0, 64);
        v12 = a2[2].u64[1];
        if (v12 >= a2[3].i64[0])
        {
          v13 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v125);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v125);
          v13 = v12 + 72;
          a2[2].i64[1] = v12 + 72;
        }
        a2[2].i64[1] = v13;
        v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125[48];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
        v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125[24];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
        v14 = *(std::__shared_weak_count **)&v125[16];
        if (*(_QWORD *)&v125[16])
        {
          v15 = (unint64_t *)(*(_QWORD *)&v125[16] + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v17 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a2->i64[0] + 8) + 8);
        v18 = (**v17)(v17);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = a2[3].i32[2];
        v121 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 16 * v20) + 12);
        v122 = v18;
        *(_QWORD *)v125 = v20;
        v21 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19 + 96, v20, v125)[3];
        if (*((char *)v21 + 23) >= 0)
          v22 = *((unsigned __int8 *)v21 + 23);
        else
          v22 = (size_t)v21[1];
        v23 = &v120;
        std::string::basic_string[abi:ne180100]((uint64_t)&v120, v22 + 6);
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v23 = (std::string *)v120.__r_.__value_.__r.__words[0];
        if (v22)
        {
          if (*((char *)v21 + 23) >= 0)
            v24 = v21;
          else
            v24 = *v21;
          memmove(v23, v24, v22);
        }
        strcpy((char *)v23 + v22, "@__sub");
        v25 = *(_QWORD *)(a1 + 40) + 96;
        v26 = a2[3].i32[2];
        *(_QWORD *)v125 = v26;
        v27 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v25, v26, v125)[3];
        if (*((char *)v27 + 23) >= 0)
          v28 = *((unsigned __int8 *)v27 + 23);
        else
          v28 = (size_t)v27[1];
        v29 = &v119;
        std::string::basic_string[abi:ne180100]((uint64_t)&v119, v28 + 6);
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)v119.__r_.__value_.__r.__words[0];
        if (v28)
        {
          if (*((char *)v27 + 23) >= 0)
            v30 = v27;
          else
            v30 = *v27;
          memmove(v29, v30, v28);
        }
        strcpy((char *)v29 + v28, "@__abs");
        v31 = *(_QWORD *)(a1 + 40) + 96;
        v32 = a2[3].i32[2];
        *(_QWORD *)v125 = v32;
        v33 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v31, v32, v125)[3];
        if (*((char *)v33 + 23) >= 0)
          v34 = *((unsigned __int8 *)v33 + 23);
        else
          v34 = (size_t)v33[1];
        v35 = &v118;
        std::string::basic_string[abi:ne180100]((uint64_t)&v118, v34 + 6);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v35 = (std::string *)v118.__r_.__value_.__r.__words[0];
        if (v34)
        {
          if (*((char *)v33 + 23) >= 0)
            v36 = v33;
          else
            v36 = *v33;
          memmove(v35, v36, v34);
        }
        strcpy((char *)v35 + v34, "@__neg");
        v37 = *(_QWORD *)(a1 + 40) + 96;
        v38 = a2[3].i32[2];
        *(_QWORD *)v125 = v38;
        v39 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v38, v125)[3];
        if (*((char *)v39 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
        }
        else
        {
          v40 = *v39;
          v117.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
          *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v40;
        }
        *(_QWORD *)&v125[16] = 897988541;
        v125[24] = 0;
        *(_QWORD *)&v125[44] = 0;
        *(_QWORD *)v125 = 33;
        *(_QWORD *)&v125[8] = 1065353216;
        Espresso::abstract_engine_factory::shared(&v126);
        v41 = v126.__r_.__value_.__r.__words[0];
        v42 = a2->i64[0];
        std::string::basic_string[abi:ne180100]<0>(v113, "elementwise");
        Espresso::abstract_engine_factory::make_kernel_priv(v41, v42 + 8, (uint64_t)v113, (uint64_t)v125, &v122);
        std::string::basic_string[abi:ne180100]<0>(&v112, "elementwise");
        v43 = a2[1].i64[0];
        if (*(char *)(v43 + 39) >= 0)
          v44 = *(unsigned __int8 *)(v43 + 39);
        else
          v44 = *(_QWORD *)(v43 + 24);
        p_p = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v44 + 6);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v44)
        {
          if (*(char *)(v43 + 39) >= 0)
            v46 = (const void *)(v43 + 16);
          else
            v46 = *(const void **)(v43 + 16);
          memmove(p_p, v46, v44);
        }
        strcpy((char *)p_p + v44, "@__sub");
        v47 = *(_QWORD *)(a1 + 40) + 56;
        v48 = a2[3].i32[2];
        v123 = (void ***)v48;
        v49 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v47, v48, &v123);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v128, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
        else
          v128 = v120;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        LOBYTE(v102) = 0;
        v108 = (std::string *)operator new(0x18uLL);
        v109 = v108;
        v110 = v108 + 1;
        v109 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v110, (__int128 *)&v128, &v129, v108);
        Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(a2, &v115, &v112, &__p, v49 + 3, &v108);
        v101 = (std::string *)&v108;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v128.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        v50 = v116;
        if (v116)
        {
          p_shared_owners = (unint64_t *)&v116->__shared_owners_;
          do
            v52 = __ldaxr(p_shared_owners);
          while (__stlxr(v52 - 1, p_shared_owners));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        if (v114 < 0)
          operator delete(v113[0]);
        size = (std::__shared_weak_count *)v126.__r_.__value_.__l.__size_;
        if (v126.__r_.__value_.__l.__size_)
        {
          v54 = (unint64_t *)(v126.__r_.__value_.__l.__size_ + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        *(_QWORD *)&v125[16] = 897988541;
        v125[24] = 0;
        *(_QWORD *)&v125[44] = 0;
        *(_QWORD *)v125 = 24;
        *(_QWORD *)&v125[8] = 1065353216;
        Espresso::abstract_engine_factory::shared(&v104);
        v56 = v104;
        v57 = a2->i64[0];
        std::string::basic_string[abi:ne180100]<0>(v113, "elementwise");
        Espresso::abstract_engine_factory::make_kernel_priv(v56, v57 + 8, (uint64_t)v113, (uint64_t)v125, &v122);
        std::string::basic_string[abi:ne180100]<0>(&v112, "elementwise");
        v58 = a2[1].i64[0];
        if (*(char *)(v58 + 39) >= 0)
          v59 = *(unsigned __int8 *)(v58 + 39);
        else
          v59 = *(_QWORD *)(v58 + 24);
        v60 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v59 + 6);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v59)
        {
          if (*(char *)(v58 + 39) >= 0)
            v61 = (const void *)(v58 + 16);
          else
            v61 = *(const void **)(v58 + 16);
          memmove(v60, v61, v59);
        }
        strcpy((char *)v60 + v59, "@__abs");
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v128, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
        else
          v128 = v120;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v101 = (std::string *)&v108;
        LOBYTE(v102) = 0;
        v108 = (std::string *)operator new(0x18uLL);
        v109 = v108;
        v110 = v108 + 1;
        v109 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v110, (__int128 *)&v128, &v129, v108);
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v126, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
        else
          v126 = v119;
        v101 = 0;
        v102 = 0;
        p_data = 0;
        v123 = (void ***)&v101;
        v124 = 0;
        v101 = (std::string *)operator new(0x18uLL);
        v102 = v101;
        p_data = (void **)&v101[1].__r_.__value_.__l.__data_;
        v102 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v126, (__int128 *)&v127, v101);
        Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(a2, &v106, &v112, &__p, &v108, &v101);
        v123 = (void ***)&v101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v126.__r_.__value_.__l.__data_);
        v101 = (std::string *)&v108;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v128.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        v62 = v107;
        if (v107)
        {
          v63 = (unint64_t *)&v107->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        if (v114 < 0)
          operator delete(v113[0]);
        v65 = v105;
        if (v105)
        {
          v66 = (unint64_t *)&v105->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        *(_QWORD *)&v125[16] = 897988541;
        v125[24] = 0;
        *(_QWORD *)&v125[44] = 0;
        *(_QWORD *)v125 = 3;
        *(_QWORD *)&v125[8] = 3212836864;
        Espresso::abstract_engine_factory::shared(&v104);
        v68 = v104;
        v69 = a2->i64[0];
        std::string::basic_string[abi:ne180100]<0>(v113, "elementwise");
        Espresso::abstract_engine_factory::make_kernel_priv(v68, v69 + 8, (uint64_t)v113, (uint64_t)v125, &v122);
        std::string::basic_string[abi:ne180100]<0>(&v112, "elementwise");
        v70 = a2[1].i64[0];
        if (*(char *)(v70 + 39) >= 0)
          v71 = *(unsigned __int8 *)(v70 + 39);
        else
          v71 = *(_QWORD *)(v70 + 24);
        v72 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v71 + 6);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v72 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v71)
        {
          if (*(char *)(v70 + 39) >= 0)
            v73 = (const void *)(v70 + 16);
          else
            v73 = *(const void **)(v70 + 16);
          memmove(v72, v73, v71);
        }
        strcpy((char *)v72 + v71, "@__neg");
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v128, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
        else
          v128 = v119;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v101 = (std::string *)&v108;
        LOBYTE(v102) = 0;
        v108 = (std::string *)operator new(0x18uLL);
        v109 = v108;
        v110 = v108 + 1;
        v109 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v110, (__int128 *)&v128, &v129, v108);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v126, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
        else
          v126 = v118;
        v101 = 0;
        v102 = 0;
        p_data = 0;
        v123 = (void ***)&v101;
        v124 = 0;
        v101 = (std::string *)operator new(0x18uLL);
        v102 = v101;
        p_data = (void **)&v101[1].__r_.__value_.__l.__data_;
        v102 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v126, (__int128 *)&v127, v101);
        Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(a2, &v99, &v112, &__p, &v108, &v101);
        v123 = (void ***)&v101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v126.__r_.__value_.__l.__data_);
        v101 = (std::string *)&v108;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v128.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        v74 = v100;
        if (v100)
        {
          v75 = (unint64_t *)&v100->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        if (v114 < 0)
          operator delete(v113[0]);
        v77 = v105;
        if (v105)
        {
          v78 = (unint64_t *)&v105->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        __asm { FMOV            V0.2S, #1.0 }
        *(_OWORD *)&v125[4] = _D0;
        *(_QWORD *)&v125[28] = 0;
        *(_QWORD *)&v125[20] = 0;
        *(_DWORD *)v125 = 23;
        Espresso::abstract_engine_factory::shared(&v104);
        v85 = v104;
        v86 = a2->i64[0];
        std::string::basic_string[abi:ne180100]<0>(v113, "activation");
        Espresso::abstract_engine_factory::make_kernel_priv(v85, v86 + 8, (uint64_t)v113, (uint64_t)v125, &v122);
        std::string::basic_string[abi:ne180100]<0>(&v112, "activation");
        v87 = a2[1].i64[0];
        if (*(char *)(v87 + 39) >= 0)
          v88 = *(unsigned __int8 *)(v87 + 39);
        else
          v88 = *(_QWORD *)(v87 + 24);
        v89 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v88 + 7);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v89 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v88)
        {
          if (*(char *)(v87 + 39) >= 0)
            v90 = (const void *)(v87 + 16);
          else
            v90 = *(const void **)(v87 + 16);
          memmove(v89, v90, v88);
        }
        strcpy((char *)v89 + v88, "@__step");
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v128, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
        else
          v128 = v118;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v101 = (std::string *)&v108;
        LOBYTE(v102) = 0;
        v108 = (std::string *)operator new(0x18uLL);
        v109 = v108;
        v110 = v108 + 1;
        v109 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v110, (__int128 *)&v128, &v129, v108);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v126, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
        else
          v126 = v117;
        v101 = 0;
        v102 = 0;
        p_data = 0;
        v123 = (void ***)&v101;
        v124 = 0;
        v101 = (std::string *)operator new(0x18uLL);
        v102 = v101;
        p_data = (void **)&v101[1].__r_.__value_.__l.__data_;
        v102 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v126, (__int128 *)&v127, v101);
        Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(a2, &v97, &v112, &__p, &v108, &v101);
        v123 = (void ***)&v101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v126.__r_.__value_.__l.__data_);
        v101 = (std::string *)&v108;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v128.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        v91 = v98;
        if (v98)
        {
          v92 = (unint64_t *)&v98->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        if (v114 < 0)
          operator delete(v113[0]);
        v94 = v105;
        if (v105)
        {
          v95 = (unint64_t *)&v105->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v117.__r_.__value_.__l.__data_);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v119.__r_.__value_.__l.__data_);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v120.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1915A8640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  a14 = (uint64_t)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (*(char *)(v67 - 89) < 0)
    operator delete(*(void **)(v67 - 112));
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a41 < 0)
    operator delete(a36);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a49 < 0)
    operator delete(a44);
  if (a55 < 0)
    operator delete(a50);
  if (a61 < 0)
    operator delete(a56);
  if (a67 < 0)
    operator delete(a62);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *a2;
  if (*(_QWORD *)(*a2 + 8) == v2)
  {
    v5 = (_QWORD *)a2[2];
    if (v5[1] == v2)
    {
      v6 = (std::__shared_weak_count *)a2[1];
      v24 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v5 = (_QWORD *)a2[2];
      }
      v9 = (std::__shared_weak_count *)a2[3];
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 320))(v3);
      v13 = (*(uint64_t (**)(_QWORD *))(*v5 + 320))(v5);
      if (*(_DWORD *)(v13 + 4))
        v14 = 0;
      else
        v14 = *(_DWORD *)v13 == 3;
      v15 = v14 && *(_WORD *)(v12 + 2) == 0;
      if (v15 && fabsf(*(float *)(v12 + 4)) < 0.000001 && fabsf(*(float *)(v13 + 12)) < 0.000001)
      {
        v16 = *(_QWORD *)(a2[15] + 32);
        v17 = *((int *)a2 + 28);
        v18 = *((int *)a2 + 29);
        v19 = *(_OWORD *)(v16 + 16 * v17);
        *(_OWORD *)(v16 + 16 * v17) = *(_OWORD *)(v16 + 16 * v18);
        *(_OWORD *)(v16 + 16 * v18) = v19;
      }
      if (v9)
      {
        v20 = (unint64_t *)&v9->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v24)
      {
        v22 = (unint64_t *)&v24->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
}

void sub_1915A8B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void **v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45[3];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_QWORD *)*a2 + 1) == v2 && *((_QWORD *)a2[2] + 1) == v2 && *((_QWORD *)a2[4] + 1) == v2)
  {
    v4 = (*(uint64_t (**)(void *))(*(_QWORD *)*a2 + 384))(*a2);
    v5 = (*(uint64_t (**)(void *))(*(_QWORD *)a2[2] + 320))(a2[2]);
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)a2[4] + 384))(a2[4]);
    if (fabsf(*(float *)(v6 + 8)) < 0.000001
      && *(_DWORD *)v6 == 6
      && fabsf(*(float *)(v5 + 12)) < 0.000001
      && *(_DWORD *)v5 == 25)
    {
      v9 = fabsf(*(float *)(v4 + 8)) < 0.000001 && *(_DWORD *)v4 == 6;
      if (v9 && fabsf(*(float *)(v4 + 4) + 1.0) < 0.000001 && fabsf(*(float *)(v6 + 4) + 1.0) < 0.000001)
      {
        *(_QWORD *)v4 = 14;
        *(float *)(v4 + 8) = -*(float *)(v5 + 8);
        v10 = *((_QWORD *)a2[17] + 4);
        v11 = *(char **)(*(_QWORD *)(v10 + 16 * *((int *)a2 + 30)) + 64);
        v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16 * *((int *)a2 + 32)) + 64);
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 16 * *((int *)a2 + 31)) + 64);
        v14 = operator new(0x10uLL);
        v45[1] = (uint64_t)(v14 + 2);
        v45[2] = (uint64_t)(v14 + 2);
        *v14 = v12;
        v14[1] = v13;
        v45[0] = (uint64_t)v14;
        Espresso::merge_kernel_attributes(v11, v45);
        operator delete(v14);
        v15 = (uint64_t)a2[17] + 96;
        v16 = *((int *)a2 + 32);
        v45[0] = v16;
        v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, v16, v45);
        v18 = (uint64_t)a2[17] + 96;
        v19 = *((int *)a2 + 30);
        v44 = v19;
        v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, v19, &v44);
        if (v20 != v17)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v20 + 3), (std::string *)v17[3], (std::string *)v17[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17[4] - v17[3]) >> 3));
        v21 = a2 + 12;
        v23 = (char *)a2[13];
        v22 = (unint64_t)a2[14];
        if ((unint64_t)v23 >= v22)
        {
          v25 = (char *)*v21;
          v26 = (v23 - (_BYTE *)*v21) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            goto LABEL_55;
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL;
          v30 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v29)
            v30 = v27;
          if (v30)
          {
            v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
            v25 = (char *)a2[12];
            v23 = (char *)a2[13];
          }
          else
          {
            v31 = 0;
          }
          v32 = (char *)(v30 + 4 * v26);
          v22 = v30 + 4 * v31;
          *(_DWORD *)v32 = *((_DWORD *)a2 + 31);
          v24 = v32 + 4;
          while (v23 != v25)
          {
            v33 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          a2[12] = v32;
          a2[13] = v24;
          a2[14] = (void *)v22;
          if (v25)
          {
            operator delete(v25);
            v22 = (unint64_t)a2[14];
          }
        }
        else
        {
          *(_DWORD *)v23 = *((_DWORD *)a2 + 31);
          v24 = v23 + 4;
        }
        a2[13] = v24;
        if ((unint64_t)v24 < v22)
        {
          *(_DWORD *)v24 = *((_DWORD *)a2 + 32);
          v34 = v24 + 4;
LABEL_53:
          a2[13] = v34;
          return;
        }
        v35 = (char *)*v21;
        v36 = (v24 - (_BYTE *)*v21) >> 2;
        v37 = v36 + 1;
        if (!((unint64_t)(v36 + 1) >> 62))
        {
          v38 = v22 - (_QWORD)v35;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          v29 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL;
          v39 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v29)
            v39 = v37;
          if (v39)
          {
            v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v39);
            v35 = (char *)a2[12];
            v24 = (char *)a2[13];
          }
          else
          {
            v40 = 0;
          }
          v41 = (_DWORD *)(v39 + 4 * v36);
          v42 = v39 + 4 * v40;
          *v41 = *((_DWORD *)a2 + 32);
          v34 = v41 + 1;
          while (v24 != v35)
          {
            v43 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *--v41 = v43;
          }
          a2[12] = v41;
          a2[13] = v34;
          a2[14] = (void *)v42;
          if (v35)
            operator delete(v35);
          goto LABEL_53;
        }
LABEL_55:
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
    }
  }
}

void sub_1915A8E9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  const void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  uint64_t *v37[4];
  unint64_t v38;
  _BYTE v39[32];
  uint64_t v40;
  void *__p;
  void *v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[32];
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == v4 || v4 == 0)
  {
    v7 = (uint64_t *)(a1 + 40);
    if (v4)
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 792) == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v36 = (***(uint64_t (****)(_QWORD))(v4 + 8))(*(_QWORD *)(v4 + 8));
      if (v36 == 10007
        || (***(unsigned int (****)(_QWORD))(*(_QWORD *)(a1 + 32) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                               + 8)) == 10006)
      {
        return;
      }
      v3 = *(_QWORD *)a2;
    }
    if (*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 320))(v3) <= 1u)
    {
      v9 = *v7 + 96;
      *(_QWORD *)v49 = *(int *)(a2 + 56);
      v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, *(unint64_t *)v49, v49);
      if (v10[4] - v10[3] != 24)
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("EW ADD cannot have more than one output.");
      v11 = *v7 + 56;
      *(_QWORD *)v49 = *(int *)(a2 + 56);
      v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, *(unint64_t *)v49, v49);
      if (v12[4] - v12[3] == 48)
      {
        v13 = *v7;
        v14 = *(std::__shared_weak_count **)(*v7 + 24);
        v54 = *(_QWORD *)(*v7 + 16);
        v55 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
          v13 = *v7;
        }
        v17 = *(int *)(a2 + 56);
        *(_QWORD *)v39 = v17;
        *(_QWORD *)v44 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13 + 56, v17, v39)[3];
        v18 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v13 + 184), *(_QWORD **)v44, (__int128 **)v44);
        v19 = *(_OWORD *)(v18 + 72);
        *(_OWORD *)v49 = *(_OWORD *)(v18 + 56);
        *(_OWORD *)&v49[16] = v19;
        v20 = (const void *)*((_QWORD *)v18 + 12);
        v50 = *((_QWORD *)v18 + 11);
        v51 = 0;
        v52 = 0;
        v53 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v51, v20, *((_QWORD *)v18 + 13), (uint64_t)(*((_QWORD *)v18 + 13) - (_QWORD)v20) >> 2);
        v21 = *v7;
        v22 = *v7 + 56;
        v23 = *(int *)(a2 + 56);
        v37[0] = (uint64_t *)v23;
        *(_QWORD *)v39 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v23, v37)[3]+ 24;
        v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v21 + 184), *(_QWORD **)v39, (__int128 **)v39);
        v25 = *(_OWORD *)(v24 + 72);
        *(_OWORD *)v44 = *(_OWORD *)(v24 + 56);
        *(_OWORD *)&v44[16] = v25;
        v26 = (const void *)*((_QWORD *)v24 + 12);
        v45 = *((_QWORD *)v24 + 11);
        v46 = 0;
        v47 = 0;
        v48 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v26, *((_QWORD *)v24 + 13), (uint64_t)(*((_QWORD *)v24 + 13) - (_QWORD)v26) >> 2);
        v27 = *v7;
        v28 = *v7 + 96;
        v29 = *(int *)(a2 + 56);
        v38 = v29;
        v37[0] = *((uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28, v29, &v38)+ 3);
        v30 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v27 + 184), v37[0], (__int128 **)v37);
        v31 = *(_OWORD *)(v30 + 72);
        *(_OWORD *)v39 = *(_OWORD *)(v30 + 56);
        *(_OWORD *)&v39[16] = v31;
        v32 = (const void *)*((_QWORD *)v30 + 12);
        v40 = *((_QWORD *)v30 + 11);
        __p = 0;
        v42 = 0;
        v43 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v32, *((_QWORD *)v30 + 13), (uint64_t)(*((_QWORD *)v30 + 13) - (_QWORD)v32) >> 2);
        v37[0] = (uint64_t *)v39;
        v37[1] = (uint64_t *)a2;
        v37[2] = v7;
        v37[3] = &v54;
        if (!Espresso::layer_shape::operator==((uint64_t)v49, (uint64_t)v39))
        {
          if (*(_QWORD *)&v39[12] != *(_QWORD *)&v49[12])
            goto LABEL_40;
          _ZZZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1_EUb0_ENK3__2clEm(v37, 0);
        }
        if (Espresso::layer_shape::operator==((uint64_t)v44, (uint64_t)v39))
        {
LABEL_24:
          if (__p)
          {
            v42 = __p;
            operator delete(__p);
          }
          if (v46)
          {
            v47 = v46;
            operator delete(v46);
          }
          if (v51)
          {
            v52 = v51;
            operator delete(v51);
          }
          v33 = v55;
          if (v55)
          {
            v34 = (unint64_t *)&v55->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          return;
        }
        if (*(_QWORD *)&v39[12] == *(_QWORD *)&v44[12])
        {
          _ZZZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1_EUb0_ENK3__2clEm(v37, 1uLL);
          goto LABEL_24;
        }
LABEL_40:
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Broadcast along N and Seq dims not supported.");
      }
    }
  }
}

void sub_1915A921C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  v31 = *(void **)(v29 - 72);
  if (v31)
  {
    *(_QWORD *)(v29 - 64) = v31;
    operator delete(v31);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 48);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  BOOL v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  const void *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  const void *v28;
  uint64_t v29;
  unint64_t v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  __int128 *v35;
  __int128 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  const void **v43;
  size_t v44;
  _BYTE *v45;
  const void *v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  _BOOL4 v69;
  _BOOL4 v71;
  _BOOL4 v72;
  char *v74;
  char *v75;
  int v76;
  uint64_t v77;
  char *v79;
  uint64_t v80;
  size_t v81;
  _BYTE *v82;
  const void *v83;
  const std::string::value_type *v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  uint64_t v88;
  void *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  size_t v93;
  _BYTE *v94;
  const void *v95;
  const std::string::value_type *v96;
  std::string::size_type v97;
  std::string *v98;
  __int128 v99;
  uint64_t v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  const void **v112;
  size_t v113;
  _BYTE *v114;
  const void *v115;
  const std::string::value_type *v116;
  std::string::size_type v117;
  std::string *v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  unint64_t v128;
  const void **v129;
  size_t v130;
  _BYTE *v131;
  const void *v132;
  const std::string::value_type *v133;
  std::string::size_type v134;
  std::string *v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t **v142;
  char *v143;
  __int128 v144;
  const void *v145;
  uint64_t v146;
  std::string::size_type v147;
  __int128 v148;
  uint64_t **v149;
  char *v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t **v160;
  char *v161;
  __int128 v162;
  const void *v163;
  uint64_t v164;
  std::string::size_type size;
  __int128 v166;
  uint64_t **v167;
  char *v168;
  __int128 v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  size_t v174;
  _BYTE *v175;
  const void *v176;
  const std::string::value_type *v177;
  std::string::size_type v178;
  std::string *v179;
  __int128 v180;
  uint64_t v181;
  void *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  const void **v193;
  size_t v194;
  _BYTE *v195;
  const void *v196;
  const std::string::value_type *v197;
  std::string::size_type v198;
  std::string *v199;
  __int128 v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t **v206;
  char *v207;
  __int128 v208;
  const void *v209;
  uint64_t v210;
  std::string::size_type v211;
  __int128 v212;
  uint64_t **v213;
  char *v214;
  __int128 v215;
  unint64_t *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  const char *v220;
  int v221;
  int v222;
  uint64_t v223[2];
  uint64_t v224[2];
  _BYTE v225[32];
  std::string::size_type v226;
  void *v227;
  _BYTE *v228;
  uint64_t v229;
  std::string *v230;
  std::string *v231;
  void **p_data;
  uint64_t v233[2];
  uint64_t v234;
  uint64_t v235;
  std::string v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  std::string v241;
  std::string __str;
  std::string v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  void *v247;
  void *v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  void *v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  std::string *v258;
  char v259;
  _BYTE v260[40];
  __int128 v261;
  __int128 v262;
  _BYTE v263[32];
  std::string::size_type v264;
  void *__p;
  void *v266;
  uint64_t v267;
  _BYTE v268[32];
  std::string::size_type v269;
  _BYTE *v270;
  _BYTE *v271;
  uint64_t v272;
  std::string v273;
  __int128 v274;

  *(_QWORD *)&v274 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) != v2 && v2 != 0)
    return;
  v6 = !v2 || *(_QWORD *)(*(_QWORD *)(a1 + 40) + 792) == 0;
  if (!v6
    && ((***(unsigned int (****)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 8)) == 10007
     || (***(unsigned int (****)(_QWORD))(*(_QWORD *)(a1 + 32) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)) == 10006)
    && !*(_BYTE *)(*(_QWORD *)(a1 + 32) + 123))
  {
    return;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
  if (*(_BYTE *)(v7 + 32) || *(_DWORD *)(v7 + 28) != 0)
    return;
  v9 = (_QWORD *)v7;
  v10 = *(_QWORD *)(a1 + 40) + 96;
  v11 = a2[3].i32[2];
  *(_QWORD *)v260 = v11;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, v260);
  if (v12[4] - v12[3] != 24)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Broadcast layer cannot have more than one output.");
  v13 = *(_QWORD *)(a1 + 40) + 56;
  v14 = a2[3].i32[2];
  *(_QWORD *)v260 = v14;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, v260);
  if (v15[4] - v15[3] != 24)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Broadcast layer cannot have more than one input.");
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(std::__shared_weak_count **)(v16 + 24);
  v256 = *(_QWORD *)(v16 + 16);
  v257 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v16 = *(_QWORD *)(a1 + 40);
  }
  v20 = a2[3].i32[2];
  *(_QWORD *)&v244 = v20;
  *(_QWORD *)v260 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16 + 56, v20, &v244)[3];
  v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v16 + 184), *(_QWORD **)v260, (__int128 **)v260);
  v22 = *(_OWORD *)(v21 + 72);
  v250 = *(_OWORD *)(v21 + 56);
  v251 = v22;
  v23 = (const void *)*((_QWORD *)v21 + 12);
  v252 = *((_QWORD *)v21 + 11);
  v253 = 0;
  v254 = 0;
  v255 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v253, v23, *((_QWORD *)v21 + 13), (uint64_t)(*((_QWORD *)v21 + 13) - (_QWORD)v23) >> 2);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = a2[3].i32[2];
  *(_QWORD *)v225 = v25;
  *(_QWORD *)v260 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24 + 96, v25, v225)[3];
  v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v24 + 184), *(_QWORD **)v260, (__int128 **)v260);
  v27 = *(_OWORD *)(v26 + 72);
  v244 = *(_OWORD *)(v26 + 56);
  v245 = v27;
  v28 = (const void *)*((_QWORD *)v26 + 12);
  v246 = *((_QWORD *)v26 + 11);
  v247 = 0;
  v248 = 0;
  v249 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v247, v28, *((_QWORD *)v26 + 13), (uint64_t)(*((_QWORD *)v26 + 13) - (_QWORD)v28) >> 2);
  if ((_QWORD)v250 != (_QWORD)v244)
  {
    if (HIDWORD(v250) == HIDWORD(v244))
    {
      if ((_DWORD)v251 == (_DWORD)v245)
      {
        v29 = *(_QWORD *)(a1 + 40) + 56;
        v30 = a2[3].i32[2];
        *(_QWORD *)v260 = v30;
        v31 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29, v30, v260)[3];
        if (*((char *)v31 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
        }
        else
        {
          v32 = *v31;
          v243.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
          *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v32;
        }
        v33 = *(_QWORD *)(a1 + 40) + 96;
        v34 = a2[3].i32[2];
        *(_QWORD *)v260 = v34;
        v35 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33, v34, v260)[3];
        if (*((char *)v35 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
        }
        else
        {
          v36 = *v35;
          __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v36;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v241, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v241 = __str;
        v37 = DWORD1(v250);
        v38 = DWORD1(v244);
        if ((_DWORD)v250 == (_DWORD)v244)
          v39 = 1;
        else
          v39 = v244;
        _ZZZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1_EUb_ENK3__1clEm(&v239, v39);
        if (v37 == v38)
          v40 = 1;
        else
          v40 = v38;
        _ZZZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1_EUb_ENK3__1clEm(&v237, v40);
        v221 = DWORD2(v244);
        v222 = DWORD2(v250);
        if (DWORD2(v250) == DWORD2(v244))
        {
          v262 = 0u;
          v261 = 0u;
          *(_DWORD *)v260 = a2[3].i32[2];
          memset(&v260[8], 0, 32);
          v55 = a2[2].u64[1];
          if (v55 >= a2[3].i64[0])
          {
            v56 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v260);
          }
          else
          {
            std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v260);
            v56 = v55 + 72;
            a2[2].i64[1] = v55 + 72;
          }
          a2[2].i64[1] = v56;
          *(_QWORD *)v225 = (char *)&v261 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v225);
          *(_QWORD *)v225 = &v260[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v225);
          v57 = *(std::__shared_weak_count **)&v260[16];
          if (*(_QWORD *)&v260[16])
          {
            v58 = (unint64_t *)(*(_QWORD *)&v260[16] + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        else
        {
          *v9 = 0;
          v41 = *(_QWORD *)(a1 + 40) + 96;
          v42 = a2[3].i32[2];
          *(_QWORD *)v263 = v42;
          v43 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v41, v42, v263)[3];
          if (*((char *)v43 + 23) >= 0)
            v44 = *((unsigned __int8 *)v43 + 23);
          else
            v44 = (size_t)v43[1];
          v45 = v260;
          std::string::basic_string[abi:ne180100]((uint64_t)v260, v44 + 21);
          if (v260[23] < 0)
            v45 = *(_BYTE **)v260;
          if (v44)
          {
            if (*((char *)v43 + 23) >= 0)
              v46 = v43;
            else
              v46 = *v43;
            memmove(v45, v46, v44);
          }
          strcpy(&v45[v44], "_spatial_bcast_layer_");
          std::to_string((std::string *)v225, a2[3].i32[2]);
          if (v225[23] >= 0)
            v47 = v225;
          else
            v47 = *(const std::string::value_type **)v225;
          if (v225[23] >= 0)
            v48 = v225[23];
          else
            v48 = *(_QWORD *)&v225[8];
          v49 = std::string::append((std::string *)v260, v47, v48);
          v50 = v49->__r_.__value_.__r.__words[0];
          *(_QWORD *)v268 = v49->__r_.__value_.__l.__size_;
          *(_QWORD *)&v268[7] = *(std::string::size_type *)((char *)&v49->__r_.__value_.__r.__words[1] + 7);
          v51 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str.__r_.__value_.__r.__words[0] = v50;
          __str.__r_.__value_.__l.__size_ = *(_QWORD *)v268;
          *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v268[7];
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = v51;
          if ((v225[23] & 0x80000000) != 0)
            operator delete(*(void **)v225);
          if ((v260[23] & 0x80000000) != 0)
            operator delete(*(void **)v260);
          v52 = *(_QWORD *)(a1 + 40) + 56;
          v53 = a2[3].i32[2];
          *(_QWORD *)v260 = v53;
          v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v52, v53, v260);
          std::string::operator=((std::string *)v54[3], &__str);
          std::string::operator=(&v241, &__str);
        }
        v60 = 0;
        v61 = 0;
        v62 = 0;
        __asm { FMOV            V9.2S, #1.0 }
LABEL_75:
        while (2)
        {
          v66 = v239;
          v67 = (v240 - v239) >> 4;
          v68 = (v238 - v237) >> 4;
          while (1)
          {
            v69 = v60 < v68;
            if (v61 >= v67 && v60 >= v68)
            {
              if (v237)
                operator delete(v237);
              if (v66)
                operator delete(v66);
              if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v241.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v243.__r_.__value_.__l.__data_);
              goto LABEL_442;
            }
            _CF = v240 == v239 || v61 >= v67;
            v71 = !_CF;
            if (v238 == v237)
              break;
            v72 = v60 < v68 && v71;
            if (!v72 || v61 != v60)
              goto LABEL_99;
            v74 = &v239[16 * v60];
            v75 = &v237[16 * v60];
            v76 = *(_DWORD *)v74;
            v77 = *((_QWORD *)v74 + 1);
            if (*(_DWORD *)v74 != *(_DWORD *)v75 || v77 != *((_QWORD *)v75 + 1))
            {
              v69 = 1;
              goto LABEL_99;
            }
            ++v60;
            v69 = 1;
            v71 = 1;
            v61 = v60;
            if (!v76)
              goto LABEL_106;
LABEL_103:
            if (v76 == 1)
            {
              *(_QWORD *)&v263[12] = 1;
              *(_DWORD *)&v263[4] = 0;
              *(_DWORD *)&v263[20] = 1;
              if (v71)
              {
                *(_DWORD *)v263 = 0;
                *(_DWORD *)&v263[8] = v77;
                v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
                if (*(char *)(v92 + 39) >= 0)
                  v93 = *(unsigned __int8 *)(v92 + 39);
                else
                  v93 = *(_QWORD *)(v92 + 24);
                std::string::basic_string[abi:ne180100]((uint64_t)v260, v93 + 4);
                if (v260[23] >= 0)
                  v94 = v260;
                else
                  v94 = *(_BYTE **)v260;
                if (v93)
                {
                  if (*(char *)(v92 + 39) >= 0)
                    v95 = (const void *)(v92 + 16);
                  else
                    v95 = *(const void **)(v92 + 16);
                  memmove(v94, v95, v93);
                }
                strcpy(&v94[v93], "_tmp");
                std::to_string((std::string *)v225, v62);
                if (v225[23] >= 0)
                  v96 = v225;
                else
                  v96 = *(const std::string::value_type **)v225;
                if (v225[23] >= 0)
                  v97 = v225[23];
                else
                  v97 = *(_QWORD *)&v225[8];
                v98 = std::string::append((std::string *)v260, v96, v97);
                v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
                v236.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v99;
                v98->__r_.__value_.__l.__size_ = 0;
                v98->__r_.__value_.__r.__words[2] = 0;
                v98->__r_.__value_.__r.__words[0] = 0;
                if ((v225[23] & 0x80000000) != 0)
                  operator delete(*(void **)v225);
                if ((v260[23] & 0x80000000) != 0)
                  operator delete(*(void **)v260);
                Espresso::abstract_engine_factory::shared(v268);
                v100 = *(_QWORD *)v268;
                std::string::basic_string[abi:ne180100]<0>(v260, "slice");
                LODWORD(v230) = (***(uint64_t (****)(_QWORD))(v256 + 8))(*(_QWORD *)(v256 + 8));
                Espresso::abstract_engine_factory::make_kernel_priv(v100, (uint64_t)&v256, (uint64_t)v260, (uint64_t)v263, (int *)&v230);
                if (*(_QWORD *)v225
                {
                  v234 = (uint64_t)v101;
                  v235 = *(_QWORD *)&v225[8];
                  if (*(_QWORD *)&v225[8])
                  {
                    v102 = (unint64_t *)(*(_QWORD *)&v225[8] + 8);
                    do
                      v103 = __ldxr(v102);
                    while (__stxr(v103 + 1, v102));
                    goto LABEL_206;
                  }
                }
                else
                {
                  v234 = 0;
                  v235 = 0;
LABEL_206:
                  v120 = *(std::__shared_weak_count **)&v225[8];
                  if (*(_QWORD *)&v225[8])
                  {
                    v121 = (unint64_t *)(*(_QWORD *)&v225[8] + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                }
                if ((v260[23] & 0x80000000) != 0)
                  operator delete(*(void **)v260);
                v123 = *(std::__shared_weak_count **)&v268[8];
                if (*(_QWORD *)&v268[8])
                {
                  v124 = (unint64_t *)(*(_QWORD *)&v268[8] + 8);
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
                if (v61 == (v240 - v239) >> 4
                  && (v60 != (v238 - v237) >> 4 ? (v126 = 1) : (v126 = v69), (v126 & 1) == 0))
                {
                  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external((std::string *)v260, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
                  else
                    *(std::string *)v260 = v241;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  __str = *(std::string *)v260;
                }
                else
                {
                  v127 = *(_QWORD *)(a1 + 40) + 96;
                  v128 = a2[3].i32[2];
                  v230 = (std::string *)v128;
                  v129 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v127, v128, &v230)[3];
                  if (*((char *)v129 + 23) >= 0)
                    v130 = *((unsigned __int8 *)v129 + 23);
                  else
                    v130 = (size_t)v129[1];
                  std::string::basic_string[abi:ne180100]((uint64_t)v225, v130 + 4);
                  if (v225[23] >= 0)
                    v131 = v225;
                  else
                    v131 = *(_BYTE **)v225;
                  if (v130)
                  {
                    if (*((char *)v129 + 23) >= 0)
                      v132 = v129;
                    else
                      v132 = *v129;
                    memmove(v131, v132, v130);
                  }
                  strcpy(&v131[v130], "_tmp");
                  std::to_string((std::string *)v268, v62);
                  if (v268[23] >= 0)
                    v133 = v268;
                  else
                    v133 = *(const std::string::value_type **)v268;
                  if (v268[23] >= 0)
                    v134 = v268[23];
                  else
                    v134 = *(_QWORD *)&v268[8];
                  v135 = std::string::append((std::string *)v225, v133, v134);
                  v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v260[16] = *((_QWORD *)&v135->__r_.__value_.__l + 2);
                  *(_OWORD *)v260 = v136;
                  v135->__r_.__value_.__l.__size_ = 0;
                  v135->__r_.__value_.__r.__words[2] = 0;
                  v135->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  __str = *(std::string *)v260;
                  v260[23] = 0;
                  v260[0] = 0;
                  if ((v268[23] & 0x80000000) != 0)
                    operator delete(*(void **)v268);
                  if ((v225[23] & 0x80000000) != 0)
                    operator delete(*(void **)v225);
                }
                v155 = (std::__shared_weak_count *)v235;
                v233[0] = v234;
                v233[1] = v235;
                if (v235)
                {
                  v156 = (unint64_t *)(v235 + 8);
                  do
                    v157 = __ldxr(v156);
                  while (__stxr(v157 + 1, v156));
                }
                std::string::basic_string[abi:ne180100]<0>(v260, "slice");
                if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external((std::string *)v268, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
                else
                  *(std::string *)v268 = v243;
                memset(v225, 0, 24);
                v230 = (std::string *)v225;
                LOBYTE(v231) = 0;
                *(_QWORD *)v225 = operator new(0x18uLL);
                *(_QWORD *)&v225[8] = *(_QWORD *)v225;
                *(_QWORD *)&v225[16] = *(_QWORD *)v225 + 24;
                *(_QWORD *)&v225[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v225[16], (__int128 *)v268, (__int128 *)&v268[24], *(std::string **)v225);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v273, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                else
                  v273 = __str;
                v230 = 0;
                v231 = 0;
                p_data = 0;
                v258 = (std::string *)&v230;
                v259 = 0;
                v230 = (std::string *)operator new(0x18uLL);
                v231 = v230;
                p_data = (void **)&v230[1].__r_.__value_.__l.__data_;
                v231 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v273, &v274, v230);
                Espresso::single_match_state<Espresso::ANECompilerEngine::broadcast_kernel>::add_kernel(a2, v233, (const std::string *)v260, &v236, (std::string **)v225, &v230, v222 != v221);
                v258 = (std::string *)&v230;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
                if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v273.__r_.__value_.__l.__data_);
                v230 = (std::string *)v225;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
                if ((v268[23] & 0x80000000) != 0)
                  operator delete(*(void **)v268);
                if ((v260[23] & 0x80000000) != 0)
                  operator delete(*(void **)v260);
                if (v155)
                {
                  v158 = (unint64_t *)&v155->__shared_owners_;
                  do
                    v159 = __ldaxr(v158);
                  while (__stlxr(v159 - 1, v158));
                  if (!v159)
                  {
                    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                    std::__shared_weak_count::__release_weak(v155);
                  }
                }
                v160 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
                *(_QWORD *)v225 = &v243;
                v161 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v160, &v243, (__int128 **)v225);
                v162 = *(_OWORD *)(v161 + 72);
                *(_OWORD *)v260 = *(_OWORD *)(v161 + 56);
                *(_OWORD *)&v260[16] = v162;
                v163 = (const void *)*((_QWORD *)v161 + 12);
                *(_QWORD *)&v260[32] = *((_QWORD *)v161 + 11);
                v261 = 0uLL;
                *(_QWORD *)&v262 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v261, v163, *((_QWORD *)v161 + 13), (uint64_t)(*((_QWORD *)v161 + 13) - (_QWORD)v163) >> 2);
                v164 = v234;
                *(_OWORD *)v268 = *(_OWORD *)v260;
                *(_OWORD *)&v268[16] = *(_OWORD *)&v260[16];
                v269 = *(_QWORD *)&v260[32];
                v271 = 0;
                v272 = 0;
                v270 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v270, (const void *)v261, *((uint64_t *)&v261 + 1), (uint64_t)(*((_QWORD *)&v261 + 1) - v261) >> 2);
                memset(&v273, 0, sizeof(v273));
                v258 = &v273;
                v259 = 0;
                v273.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
                v273.__r_.__value_.__l.__size_ = v273.__r_.__value_.__r.__words[0];
                v273.__r_.__value_.__r.__words[2] = v273.__r_.__value_.__r.__words[0] + 64;
                v273.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v273.__r_.__value_.__r.__words[2], (__int128 *)v268, (__int128 *)&v273, (uint64_t)v273.__r_.__value_.__l.__data_);
                (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v164 + 64))(&v230, v164, &v273);
                size = v230[1].__r_.__value_.__l.__size_;
                v166 = *(_OWORD *)&v230->__r_.__value_.__r.__words[2];
                *(_OWORD *)v225 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
                *(_OWORD *)&v225[16] = v166;
                v226 = size;
                v228 = 0;
                v229 = 0;
                v227 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v227, (const void *)v230[1].__r_.__value_.__r.__words[2], (uint64_t)v230[2].__r_.__value_.__l.__data_, (uint64_t)(v230[2].__r_.__value_.__r.__words[0] - v230[1].__r_.__value_.__r.__words[2]) >> 2);
                v258 = (std::string *)&v230;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
                v258 = &v273;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
                if (v270)
                {
                  v271 = v270;
                  operator delete(v270);
                }
                v167 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
                *(_QWORD *)v268 = &__str;
                v168 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v167, &__str, (__int128 **)v268);
                v169 = *(_OWORD *)&v225[16];
                *(_OWORD *)(v168 + 56) = *(_OWORD *)v225;
                *(_OWORD *)(v168 + 72) = v169;
                *((_QWORD *)v168 + 11) = v226;
                if (v168 + 56 != v225)
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v168 + 96, (char *)v227, (uint64_t)v228, (v228 - (_BYTE *)v227) >> 2);
                std::string::operator=(&v243, &__str);
                if (v227)
                {
                  v228 = v227;
                  operator delete(v227);
                }
                if ((_QWORD)v261)
                {
                  *((_QWORD *)&v261 + 1) = v261;
                  operator delete((void *)v261);
                }
                v170 = (std::__shared_weak_count *)v235;
                if (v235)
                {
                  v171 = (unint64_t *)(v235 + 8);
                  do
                    v172 = __ldaxr(v171);
                  while (__stlxr(v172 - 1, v171));
                  if (!v172)
                  {
                    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                    std::__shared_weak_count::__release_weak(v170);
                  }
                }
                if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v236.__r_.__value_.__l.__data_);
                ++v62;
              }
              if (!v69)
                goto LABEL_75;
              *(_DWORD *)v263 = 1;
              *(_DWORD *)&v263[8] = v77;
              v173 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
              if (*(char *)(v173 + 39) >= 0)
                v174 = *(unsigned __int8 *)(v173 + 39);
              else
                v174 = *(_QWORD *)(v173 + 24);
              std::string::basic_string[abi:ne180100]((uint64_t)v260, v174 + 4);
              if (v260[23] >= 0)
                v175 = v260;
              else
                v175 = *(_BYTE **)v260;
              if (v174)
              {
                if (*(char *)(v173 + 39) >= 0)
                  v176 = (const void *)(v173 + 16);
                else
                  v176 = *(const void **)(v173 + 16);
                memmove(v175, v176, v174);
              }
              strcpy(&v175[v174], "_tmp");
              std::to_string((std::string *)v225, v62);
              if (v225[23] >= 0)
                v177 = v225;
              else
                v177 = *(const std::string::value_type **)v225;
              if (v225[23] >= 0)
                v178 = v225[23];
              else
                v178 = *(_QWORD *)&v225[8];
              v179 = std::string::append((std::string *)v260, v177, v178);
              v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
              v236.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v180;
              v179->__r_.__value_.__l.__size_ = 0;
              v179->__r_.__value_.__r.__words[2] = 0;
              v179->__r_.__value_.__r.__words[0] = 0;
              if ((v225[23] & 0x80000000) != 0)
                operator delete(*(void **)v225);
              if ((v260[23] & 0x80000000) != 0)
                operator delete(*(void **)v260);
              Espresso::abstract_engine_factory::shared(v268);
              v181 = *(_QWORD *)v268;
              std::string::basic_string[abi:ne180100]<0>(v260, "slice");
              LODWORD(v230) = (***(uint64_t (****)(_QWORD))(v256 + 8))(*(_QWORD *)(v256 + 8));
              Espresso::abstract_engine_factory::make_kernel_priv(v181, (uint64_t)&v256, (uint64_t)v260, (uint64_t)v263, (int *)&v230);
              if (*(_QWORD *)v225
              {
                v234 = (uint64_t)v182;
                v235 = *(_QWORD *)&v225[8];
                if (*(_QWORD *)&v225[8])
                {
                  v183 = (unint64_t *)(*(_QWORD *)&v225[8] + 8);
                  do
                    v184 = __ldxr(v183);
                  while (__stxr(v184 + 1, v183));
                  goto LABEL_353;
                }
              }
              else
              {
                v234 = 0;
                v235 = 0;
LABEL_353:
                v185 = *(std::__shared_weak_count **)&v225[8];
                if (*(_QWORD *)&v225[8])
                {
                  v186 = (unint64_t *)(*(_QWORD *)&v225[8] + 8);
                  do
                    v187 = __ldaxr(v186);
                  while (__stlxr(v187 - 1, v186));
                  if (!v187)
                  {
                    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                    std::__shared_weak_count::__release_weak(v185);
                  }
                }
              }
              if ((v260[23] & 0x80000000) != 0)
                operator delete(*(void **)v260);
              v188 = *(std::__shared_weak_count **)&v268[8];
              if (*(_QWORD *)&v268[8])
              {
                v189 = (unint64_t *)(*(_QWORD *)&v268[8] + 8);
                do
                  v190 = __ldaxr(v189);
                while (__stlxr(v190 - 1, v189));
                if (!v190)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
              if (v61 == (v240 - v239) >> 4 && v60 == (v238 - v237) >> 4)
              {
                if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external((std::string *)v260, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
                else
                  *(std::string *)v260 = v241;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                __str = *(std::string *)v260;
              }
              else
              {
                v191 = *(_QWORD *)(a1 + 40) + 96;
                v192 = a2[3].i32[2];
                v230 = (std::string *)v192;
                v193 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v191, v192, &v230)[3];
                if (*((char *)v193 + 23) >= 0)
                  v194 = *((unsigned __int8 *)v193 + 23);
                else
                  v194 = (size_t)v193[1];
                std::string::basic_string[abi:ne180100]((uint64_t)v225, v194 + 4);
                if (v225[23] >= 0)
                  v195 = v225;
                else
                  v195 = *(_BYTE **)v225;
                if (v194)
                {
                  if (*((char *)v193 + 23) >= 0)
                    v196 = v193;
                  else
                    v196 = *v193;
                  memmove(v195, v196, v194);
                }
                strcpy(&v195[v194], "_tmp");
                std::to_string((std::string *)v268, v62);
                if (v268[23] >= 0)
                  v197 = v268;
                else
                  v197 = *(const std::string::value_type **)v268;
                if (v268[23] >= 0)
                  v198 = v268[23];
                else
                  v198 = *(_QWORD *)&v268[8];
                v199 = std::string::append((std::string *)v225, v197, v198);
                v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
                *(_QWORD *)&v260[16] = *((_QWORD *)&v199->__r_.__value_.__l + 2);
                *(_OWORD *)v260 = v200;
                v199->__r_.__value_.__l.__size_ = 0;
                v199->__r_.__value_.__r.__words[2] = 0;
                v199->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                __str = *(std::string *)v260;
                v260[23] = 0;
                v260[0] = 0;
                if ((v268[23] & 0x80000000) != 0)
                  operator delete(*(void **)v268);
                if ((v225[23] & 0x80000000) != 0)
                  operator delete(*(void **)v225);
              }
              v201 = (std::__shared_weak_count *)v235;
              v224[0] = v234;
              v224[1] = v235;
              if (v235)
              {
                v202 = (unint64_t *)(v235 + 8);
                do
                  v203 = __ldxr(v202);
                while (__stxr(v203 + 1, v202));
              }
              std::string::basic_string[abi:ne180100]<0>(v260, "slice");
              if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external((std::string *)v268, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
              else
                *(std::string *)v268 = v243;
              memset(v225, 0, 24);
              v230 = (std::string *)v225;
              LOBYTE(v231) = 0;
              *(_QWORD *)v225 = operator new(0x18uLL);
              *(_QWORD *)&v225[8] = *(_QWORD *)v225;
              *(_QWORD *)&v225[16] = *(_QWORD *)v225 + 24;
              *(_QWORD *)&v225[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v225[16], (__int128 *)v268, (__int128 *)&v268[24], *(std::string **)v225);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v273, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
              else
                v273 = __str;
              v230 = 0;
              v231 = 0;
              p_data = 0;
              v258 = (std::string *)&v230;
              v259 = 0;
              v230 = (std::string *)operator new(0x18uLL);
              v231 = v230;
              p_data = (void **)&v230[1].__r_.__value_.__l.__data_;
              v231 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v273, &v274, v230);
              Espresso::single_match_state<Espresso::ANECompilerEngine::broadcast_kernel>::add_kernel(a2, v224, (const std::string *)v260, &v236, (std::string **)v225, &v230, v222 != v221);
              v258 = (std::string *)&v230;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
              if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v273.__r_.__value_.__l.__data_);
              v230 = (std::string *)v225;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
              if ((v268[23] & 0x80000000) != 0)
                operator delete(*(void **)v268);
              if ((v260[23] & 0x80000000) != 0)
                operator delete(*(void **)v260);
              if (v201)
              {
                v204 = (unint64_t *)&v201->__shared_owners_;
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                }
              }
              v206 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              *(_QWORD *)v225 = &v243;
              v207 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v206, &v243, (__int128 **)v225);
              v208 = *(_OWORD *)(v207 + 72);
              *(_OWORD *)v260 = *(_OWORD *)(v207 + 56);
              *(_OWORD *)&v260[16] = v208;
              v209 = (const void *)*((_QWORD *)v207 + 12);
              *(_QWORD *)&v260[32] = *((_QWORD *)v207 + 11);
              v261 = 0uLL;
              *(_QWORD *)&v262 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v261, v209, *((_QWORD *)v207 + 13), (uint64_t)(*((_QWORD *)v207 + 13) - (_QWORD)v209) >> 2);
              v210 = v234;
              *(_OWORD *)v268 = *(_OWORD *)v260;
              *(_OWORD *)&v268[16] = *(_OWORD *)&v260[16];
              v269 = *(_QWORD *)&v260[32];
              v271 = 0;
              v272 = 0;
              v270 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v270, (const void *)v261, *((uint64_t *)&v261 + 1), (uint64_t)(*((_QWORD *)&v261 + 1) - v261) >> 2);
              memset(&v273, 0, sizeof(v273));
              v258 = &v273;
              v259 = 0;
              v273.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
              v273.__r_.__value_.__l.__size_ = v273.__r_.__value_.__r.__words[0];
              v273.__r_.__value_.__r.__words[2] = v273.__r_.__value_.__r.__words[0] + 64;
              v273.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v273.__r_.__value_.__r.__words[2], (__int128 *)v268, (__int128 *)&v273, (uint64_t)v273.__r_.__value_.__l.__data_);
              (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v210 + 64))(&v230, v210, &v273);
              v211 = v230[1].__r_.__value_.__l.__size_;
              v212 = *(_OWORD *)&v230->__r_.__value_.__r.__words[2];
              *(_OWORD *)v225 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
              *(_OWORD *)&v225[16] = v212;
              v226 = v211;
              v228 = 0;
              v229 = 0;
              v227 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v227, (const void *)v230[1].__r_.__value_.__r.__words[2], (uint64_t)v230[2].__r_.__value_.__l.__data_, (uint64_t)(v230[2].__r_.__value_.__r.__words[0] - v230[1].__r_.__value_.__r.__words[2]) >> 2);
              v258 = (std::string *)&v230;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
              v258 = &v273;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
              if (v270)
              {
                v271 = v270;
                operator delete(v270);
              }
              v213 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              *(_QWORD *)v268 = &__str;
              v214 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v213, &__str, (__int128 **)v268);
              v215 = *(_OWORD *)&v225[16];
              *(_OWORD *)(v214 + 56) = *(_OWORD *)v225;
              *(_OWORD *)(v214 + 72) = v215;
              *((_QWORD *)v214 + 11) = v226;
              if (v214 + 56 != v225)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v214 + 96, (char *)v227, (uint64_t)v228, (v228 - (_BYTE *)v227) >> 2);
              std::string::operator=(&v243, &__str);
              if (v227)
              {
                v228 = v227;
                operator delete(v227);
              }
              if ((_QWORD)v261)
              {
                *((_QWORD *)&v261 + 1) = v261;
                operator delete((void *)v261);
              }
              v152 = (std::__shared_weak_count *)v235;
              if (v235)
              {
                v216 = (unint64_t *)(v235 + 8);
                do
                  v154 = __ldaxr(v216);
                while (__stlxr(v154 - 1, v216));
LABEL_427:
                if (!v154)
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
              }
              goto LABEL_429;
            }
          }
          v69 = 0;
LABEL_99:
          if (v61 >= v67)
          {
            v71 = 0;
            v79 = &v237[16 * v60++];
          }
          else
          {
            v69 = 0;
            v79 = &v239[16 * v61++];
          }
          v76 = *(_DWORD *)v79;
          v77 = *((_QWORD *)v79 + 1);
          if (!*(_DWORD *)v79)
          {
LABEL_106:
            *(_QWORD *)&v260[16] = 0x100000000;
            v260[24] = 0;
            *(_QWORD *)&v260[28] = _D9;
            v260[36] = 1;
            *(_QWORD *)&v262 = 0;
            v261 = 0uLL;
            *((_QWORD *)&v262 + 1) = _D9;
            *(_OWORD *)v260 = xmmword_191A93710;
            if (v69)
              *(_DWORD *)&v260[8] = 2;
            if (v71)
              *(_DWORD *)&v260[4] = 2;
            v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
            if (*(char *)(v80 + 39) >= 0)
              v81 = *(unsigned __int8 *)(v80 + 39);
            else
              v81 = *(_QWORD *)(v80 + 24);
            std::string::basic_string[abi:ne180100]((uint64_t)v225, v81 + 4);
            if (v225[23] >= 0)
              v82 = v225;
            else
              v82 = *(_BYTE **)v225;
            if (v81)
            {
              if (*(char *)(v80 + 39) >= 0)
                v83 = (const void *)(v80 + 16);
              else
                v83 = *(const void **)(v80 + 16);
              memmove(v82, v83, v81);
            }
            strcpy(&v82[v81], "_tmp");
            std::to_string((std::string *)v268, v62);
            if (v268[23] >= 0)
              v84 = v268;
            else
              v84 = *(const std::string::value_type **)v268;
            if (v268[23] >= 0)
              v85 = v268[23];
            else
              v85 = *(_QWORD *)&v268[8];
            v86 = std::string::append((std::string *)v225, v84, v85);
            v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
            v236.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v87;
            v86->__r_.__value_.__l.__size_ = 0;
            v86->__r_.__value_.__r.__words[2] = 0;
            v86->__r_.__value_.__r.__words[0] = 0;
            if ((v268[23] & 0x80000000) != 0)
              operator delete(*(void **)v268);
            if ((v225[23] & 0x80000000) != 0)
              operator delete(*(void **)v225);
            Espresso::abstract_engine_factory::shared(v263);
            v88 = *(_QWORD *)v263;
            std::string::basic_string[abi:ne180100]<0>(v225, "upsample");
            LODWORD(v230) = (***(uint64_t (****)(_QWORD))(v256 + 8))(*(_QWORD *)(v256 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v88, (uint64_t)&v256, (uint64_t)v225, (uint64_t)v260, (int *)&v230);
            if (*(_QWORD *)v268
            {
              v234 = (uint64_t)v89;
              v235 = *(_QWORD *)&v268[8];
              if (*(_QWORD *)&v268[8])
              {
                v90 = (unint64_t *)(*(_QWORD *)&v268[8] + 8);
                do
                  v91 = __ldxr(v90);
                while (__stxr(v91 + 1, v90));
                goto LABEL_166;
              }
            }
            else
            {
              v234 = 0;
              v235 = 0;
LABEL_166:
              v104 = *(std::__shared_weak_count **)&v268[8];
              if (*(_QWORD *)&v268[8])
              {
                v105 = (unint64_t *)(*(_QWORD *)&v268[8] + 8);
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
            }
            if ((v225[23] & 0x80000000) != 0)
              operator delete(*(void **)v225);
            v107 = *(std::__shared_weak_count **)&v263[8];
            if (*(_QWORD *)&v263[8])
            {
              v108 = (unint64_t *)(*(_QWORD *)&v263[8] + 8);
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            if (v61 == (v240 - v239) >> 4 && v60 == (v238 - v237) >> 4)
            {
              if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external((std::string *)v225, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
              else
                *(std::string *)v225 = v241;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = *(std::string *)v225;
            }
            else
            {
              v110 = *(_QWORD *)(a1 + 40) + 96;
              v111 = a2[3].i32[2];
              v230 = (std::string *)v111;
              v112 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v110, v111, &v230)[3];
              if (*((char *)v112 + 23) >= 0)
                v113 = *((unsigned __int8 *)v112 + 23);
              else
                v113 = (size_t)v112[1];
              std::string::basic_string[abi:ne180100]((uint64_t)v268, v113 + 4);
              if (v268[23] >= 0)
                v114 = v268;
              else
                v114 = *(_BYTE **)v268;
              if (v113)
              {
                if (*((char *)v112 + 23) >= 0)
                  v115 = v112;
                else
                  v115 = *v112;
                memmove(v114, v115, v113);
              }
              strcpy(&v114[v113], "_tmp");
              std::to_string((std::string *)v263, v62);
              if (v263[23] >= 0)
                v116 = v263;
              else
                v116 = *(const std::string::value_type **)v263;
              if (v263[23] >= 0)
                v117 = v263[23];
              else
                v117 = *(_QWORD *)&v263[8];
              v118 = std::string::append((std::string *)v268, v116, v117);
              v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
              *(_QWORD *)&v225[16] = *((_QWORD *)&v118->__r_.__value_.__l + 2);
              *(_OWORD *)v225 = v119;
              v118->__r_.__value_.__l.__size_ = 0;
              v118->__r_.__value_.__r.__words[2] = 0;
              v118->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = *(std::string *)v225;
              v225[23] = 0;
              v225[0] = 0;
              if ((v263[23] & 0x80000000) != 0)
                operator delete(*(void **)v263);
              if ((v268[23] & 0x80000000) != 0)
                operator delete(*(void **)v268);
            }
            v137 = (std::__shared_weak_count *)v235;
            v223[0] = v234;
            v223[1] = v235;
            if (v235)
            {
              v138 = (unint64_t *)(v235 + 8);
              do
                v139 = __ldxr(v138);
              while (__stxr(v139 + 1, v138));
            }
            std::string::basic_string[abi:ne180100]<0>(v225, "upsample");
            if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)v263, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
            else
              *(std::string *)v263 = v243;
            memset(v268, 0, 24);
            v230 = (std::string *)v268;
            LOBYTE(v231) = 0;
            *(_QWORD *)v268 = operator new(0x18uLL);
            *(_QWORD *)&v268[8] = *(_QWORD *)v268;
            *(_QWORD *)&v268[16] = *(_QWORD *)v268 + 24;
            *(_QWORD *)&v268[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v268[16], (__int128 *)v263, (__int128 *)&v263[24], *(std::string **)v268);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v273, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v273 = __str;
            v230 = 0;
            v231 = 0;
            p_data = 0;
            v258 = (std::string *)&v230;
            v259 = 0;
            v230 = (std::string *)operator new(0x18uLL);
            v231 = v230;
            p_data = (void **)&v230[1].__r_.__value_.__l.__data_;
            v231 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v273, &v274, v230);
            Espresso::single_match_state<Espresso::ANECompilerEngine::broadcast_kernel>::add_kernel(a2, v223, (const std::string *)v225, &v236, (std::string **)v268, &v230, v222 != v221);
            v258 = (std::string *)&v230;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
            if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v273.__r_.__value_.__l.__data_);
            v230 = (std::string *)v268;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
            if ((v263[23] & 0x80000000) != 0)
              operator delete(*(void **)v263);
            if ((v225[23] & 0x80000000) != 0)
              operator delete(*(void **)v225);
            if (v137)
            {
              v140 = (unint64_t *)&v137->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                std::__shared_weak_count::__release_weak(v137);
              }
            }
            v142 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
            *(_QWORD *)v268 = &v243;
            v143 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v142, &v243, (__int128 **)v268);
            v144 = *(_OWORD *)(v143 + 72);
            *(_OWORD *)v225 = *(_OWORD *)(v143 + 56);
            *(_OWORD *)&v225[16] = v144;
            v145 = (const void *)*((_QWORD *)v143 + 12);
            v226 = *((_QWORD *)v143 + 11);
            v227 = 0;
            v228 = 0;
            v229 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v227, v145, *((_QWORD *)v143 + 13), (uint64_t)(*((_QWORD *)v143 + 13) - (_QWORD)v145) >> 2);
            v146 = v234;
            *(_OWORD *)v263 = *(_OWORD *)v225;
            *(_OWORD *)&v263[16] = *(_OWORD *)&v225[16];
            v264 = v226;
            v266 = 0;
            v267 = 0;
            __p = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v227, (uint64_t)v228, (v228 - (_BYTE *)v227) >> 2);
            memset(&v273, 0, sizeof(v273));
            v258 = &v273;
            v259 = 0;
            v273.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
            v273.__r_.__value_.__l.__size_ = v273.__r_.__value_.__r.__words[0];
            v273.__r_.__value_.__r.__words[2] = v273.__r_.__value_.__r.__words[0] + 64;
            v273.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v273.__r_.__value_.__r.__words[2], (__int128 *)v263, (__int128 *)v268, (uint64_t)v273.__r_.__value_.__l.__data_);
            (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v146 + 64))(&v230, v146, &v273);
            v147 = v230[1].__r_.__value_.__l.__size_;
            v148 = *(_OWORD *)&v230->__r_.__value_.__r.__words[2];
            *(_OWORD *)v268 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
            *(_OWORD *)&v268[16] = v148;
            v269 = v147;
            v271 = 0;
            v272 = 0;
            v270 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v270, (const void *)v230[1].__r_.__value_.__r.__words[2], (uint64_t)v230[2].__r_.__value_.__l.__data_, (uint64_t)(v230[2].__r_.__value_.__r.__words[0] - v230[1].__r_.__value_.__r.__words[2]) >> 2);
            v258 = (std::string *)&v230;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
            v258 = &v273;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
            if (__p)
            {
              v266 = __p;
              operator delete(__p);
            }
            v149 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
            *(_QWORD *)v263 = &__str;
            v150 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v149, &__str, (__int128 **)v263);
            v151 = *(_OWORD *)&v268[16];
            *(_OWORD *)(v150 + 56) = *(_OWORD *)v268;
            *(_OWORD *)(v150 + 72) = v151;
            *((_QWORD *)v150 + 11) = v269;
            if (v150 + 56 != v268)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v150 + 96, v270, (uint64_t)v271, (v271 - v270) >> 2);
            std::string::operator=(&v243, &__str);
            if (v270)
            {
              v271 = v270;
              operator delete(v270);
            }
            if (v227)
            {
              v228 = v227;
              operator delete(v227);
            }
            v152 = (std::__shared_weak_count *)v235;
            if (v235)
            {
              v153 = (unint64_t *)(v235 + 8);
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              goto LABEL_427;
            }
LABEL_429:
            if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v236.__r_.__value_.__l.__data_);
            ++v62;
            continue;
          }
          goto LABEL_103;
        }
      }
      v220 = "Broadcast transform along Seq axis is not supported.";
    }
    else
    {
      v220 = "Broadcast transform along Batch axis is not supported.";
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(v220);
  }
LABEL_442:
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  v217 = v257;
  if (v257)
  {
    v218 = (unint64_t *)&v257->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
}

void sub_1915AB0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *v75;
  void *v76;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  if (a52 < 0)
    operator delete(__p);
  if (a54)
    operator delete(a54);
  if (a57)
    operator delete(a57);
  if (a65 < 0)
    operator delete(a60);
  if (a72 < 0)
    operator delete(a67);
  if (a74 < 0)
    operator delete(a73);
  v75 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v75;
    operator delete(v75);
  }
  v76 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v76;
    operator delete(v76);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  _Unwind_Resume(a1);
}

void sub_1915AB5F8()
{
  JUMPOUT(0x1915AB5D8);
}

void sub_1915AB600()
{
  JUMPOUT(0x1915AB5E8);
}

void sub_1915AB608()
{
  JUMPOUT(0x1915AB5F0);
}

void ___ZN8Espresso17ANECompilerEngine7context23transform_crop_to_sliceEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  const void *v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  _BOOL4 v28;
  size_t size;
  void **v32;
  std::string *v33;
  uint64_t v34;
  size_t v35;
  std::string *v36;
  const void *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t **v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  size_t v74;
  std::string *v75;
  const void *v76;
  size_t v77;
  void **v78;
  std::string *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t **v103;
  char *v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  size_t v116;
  std::string *v117;
  const void *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t **v142;
  char *v143;
  __int128 v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  int v151;
  uint64_t v152[2];
  uint64_t v153[2];
  void **v154;
  void **v155;
  void **v156;
  void *__p[2];
  __int128 v158;
  uint64_t v159;
  void *v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163[2];
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  std::string v172;
  std::string v173;
  std::string v174;
  std::vector<std::string> v175;
  std::string *v176;
  char v177;
  _BYTE v178[40];
  __int128 v179;
  __int128 v180;
  _BYTE __str[32];
  uint64_t v182;
  void *v183;
  void *v184;
  uint64_t v185;
  std::string v186;
  __int128 v187;

  *(_QWORD *)&v187 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) != v3 && v3 != 0)
    return;
  v6 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = v6[3];
  v180 = 0u;
  v179 = 0u;
  *(_DWORD *)v178 = a2[3].i32[2];
  memset(&v178[8], 0, 32);
  v11 = a2[2].u64[1];
  if (v11 >= a2[3].i64[0])
  {
    v12 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v178);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v178);
    v12 = v11 + 72;
    a2[2].i64[1] = v11 + 72;
  }
  a2[2].i64[1] = v12;
  __p[0] = (char *)&v179 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v178[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v13 = *(std::__shared_weak_count **)&v178[16];
  if (*(_QWORD *)&v178[16])
  {
    v14 = (unint64_t *)(*(_QWORD *)&v178[16] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(a1 + 40) + 56;
  v17 = a2[3].i32[2];
  *(_QWORD *)v178 = v17;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, v17, v178);
  memset(&v175, 0, sizeof(v175));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v175, v18[3], v18[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18[4] - v18[3]) >> 3));
  v19 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)__str = a2[3].i32[2];
  __p[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19 + 56, *(unint64_t *)__str, __str)+ 3);
  v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 184), (_QWORD *)__p[0], (__int128 **)__p);
  v21 = *(_OWORD *)(v20 + 72);
  *(_OWORD *)v178 = *(_OWORD *)(v20 + 56);
  *(_OWORD *)&v178[16] = v21;
  v22 = (const void *)*((_QWORD *)v20 + 12);
  *(_QWORD *)&v178[32] = *((_QWORD *)v20 + 11);
  v179 = 0uLL;
  *(_QWORD *)&v180 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v179, v22, *((_QWORD *)v20 + 13), (uint64_t)(*((_QWORD *)v20 + 13) - (_QWORD)v22) >> 2);
  v23 = *(_QWORD *)(a1 + 40) + 96;
  v24 = a2[3].i32[2];
  __p[0] = (void *)v24;
  v25 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23, v24, __p)[3];
  if (*((char *)v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    v174.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v26;
  }
  v151 = v7;
  v28 = v7 > 0 || v8 > 0;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v173, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v173 = v174;
  if (v9 <= 0 && v10 <= 0 && (v7 | v8 | v9 | v10) != 0)
    goto LABEL_117;
  if (v28)
  {
    if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v173.__r_.__value_.__r.__words[2]);
    else
      size = v173.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 10);
    if ((SBYTE7(v158) & 0x80u) == 0)
      v32 = __p;
    else
      v32 = (void **)__p[0];
    if (size)
    {
      if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v173;
      else
        v33 = (std::string *)v173.__r_.__value_.__r.__words[0];
      memmove(v32, v33, size);
    }
    strcpy((char *)v32 + size, "__@slice_y");
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v174.__r_.__value_.__r.__words[2] = v158;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
  if (*(char *)(v34 + 39) >= 0)
    v35 = *(unsigned __int8 *)(v34 + 39);
  else
    v35 = *(_QWORD *)(v34 + 24);
  v36 = &v172;
  std::string::basic_string[abi:ne180100]((uint64_t)&v172, v35 + 8);
  if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v36 = (std::string *)v172.__r_.__value_.__r.__words[0];
  if (v35)
  {
    if (*(char *)(v34 + 39) >= 0)
      v37 = (const void *)(v34 + 16);
    else
      v37 = *(const void **)(v34 + 16);
    memmove(v36, v37, v35);
  }
  strcpy((char *)v36 + v35, "_slice_y");
  v170 = 1;
  LODWORD(v168) = 1;
  HIDWORD(v168) = v9;
  v171 = 1;
  v169 = *(_DWORD *)&v178[4] - v10;
  v38 = *(_QWORD *)(a1 + 40);
  v40 = *(_QWORD *)(v38 + 16);
  v39 = *(std::__shared_weak_count **)(v38 + 24);
  v166 = v40;
  v167 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
  }
  Espresso::abstract_engine_factory::shared(&v186);
  v43 = v186.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  LODWORD(v154) = (***(uint64_t (****)(_QWORD))(v166 + 8))(*(_QWORD *)(v166 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v43, (uint64_t)&v166, (uint64_t)__p, (uint64_t)&v168, (int *)&v154);
  if (*(_QWORD *)__str
  {
    v164 = (uint64_t)v44;
    v165 = *(_QWORD *)&__str[8];
    if (*(_QWORD *)&__str[8])
    {
      v45 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
  }
  else
  {
    v164 = 0;
    v165 = 0;
  }
  v47 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v48 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (SBYTE7(v158) < 0)
    operator delete(__p[0]);
  v50 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
  if (v186.__r_.__value_.__l.__size_)
  {
    v51 = (unint64_t *)(v186.__r_.__value_.__l.__size_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v165;
  v163[0] = v164;
  v163[1] = v165;
  if (v165)
  {
    v54 = (unint64_t *)(v165 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v186, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v186 = v174;
  memset(__str, 0, 24);
  v154 = (void **)__str;
  LOBYTE(v155) = 0;
  *(_QWORD *)__str = operator new(0x18uLL);
  *(_QWORD *)&__str[8] = *(_QWORD *)__str;
  *(_QWORD *)&__str[16] = *(_QWORD *)__str + 24;
  *(_QWORD *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (__int128 *)&v186, &v187, *(std::string **)__str);
  Espresso::single_match_state<Espresso::generic_crop_kernel>::add_kernel(a2, v163, (const std::string *)__p, &v172, &v175.__begin_, (std::string **)__str);
  v154 = (void **)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  if (SBYTE7(v158) < 0)
    operator delete(__p[0]);
  if (v53)
  {
    v56 = (unint64_t *)&v53->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v58 = v164;
  *(_OWORD *)__str = *(_OWORD *)v178;
  *(_OWORD *)&__str[16] = *(_OWORD *)&v178[16];
  v182 = *(_QWORD *)&v178[32];
  v183 = 0;
  v184 = 0;
  v185 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v183, (const void *)v179, *((uint64_t *)&v179 + 1), (uint64_t)(*((_QWORD *)&v179 + 1) - v179) >> 2);
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v176 = (std::string *)&v154;
  v177 = 0;
  v154 = (void **)operator new(0x40uLL);
  v155 = v154;
  v156 = v154 + 8;
  v155 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v156, (__int128 *)__str, (__int128 *)&v186, (uint64_t)v154);
  (*(void (**)(std::string *__return_ptr, uint64_t, void ***))(*(_QWORD *)v58 + 64))(&v186, v58, &v154);
  v59 = *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 32);
  v60 = *(_OWORD *)(v186.__r_.__value_.__r.__words[0] + 16);
  *(_OWORD *)__p = *(_OWORD *)v186.__r_.__value_.__l.__data_;
  v158 = v60;
  v159 = v59;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v160, *(const void **)(v186.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 48) - *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 40)) >> 2);
  v176 = &v186;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
  v176 = (std::string *)&v154;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  v61 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
  *(_QWORD *)__str = &v174;
  v62 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v61, &v174, (__int128 **)__str);
  v63 = v158;
  *(_OWORD *)(v62 + 56) = *(_OWORD *)__p;
  *(_OWORD *)(v62 + 72) = v63;
  *((_QWORD *)v62 + 11) = v159;
  if (v62 + 56 != (char *)__p)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v62 + 96, (char *)v160, (uint64_t)v161, (v161 - (_BYTE *)v160) >> 2);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)__str, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    *(std::string *)__str = v174;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v175, (std::string *)__str, (__int128 *)&__str[24], 1uLL);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  *(_OWORD *)v178 = *(_OWORD *)__p;
  *(_OWORD *)&v178[16] = v158;
  *(_QWORD *)&v178[32] = v159;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v179, (char *)v160, (uint64_t)v161, (v161 - (_BYTE *)v160) >> 2);
  v64 = *(_QWORD *)(a1 + 40) + 96;
  v65 = a2[3].i32[2];
  *(_QWORD *)__str = v65;
  v66 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v64, v65, __str);
  std::string::operator=(&v174, (const std::string *)v66[3]);
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v67 = (std::__shared_weak_count *)v165;
  if (v165)
  {
    v68 = (unint64_t *)(v165 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v167;
  if (v167)
  {
    v71 = (unint64_t *)&v167->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v172.__r_.__value_.__l.__data_);
    if (v28)
      goto LABEL_118;
  }
  else
  {
LABEL_117:
    if (v28)
    {
LABEL_118:
      if (v8 >= 1)
      {
        v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
        if (*(char *)(v73 + 39) >= 0)
          v74 = *(unsigned __int8 *)(v73 + 39);
        else
          v74 = *(_QWORD *)(v73 + 24);
        v75 = &v172;
        std::string::basic_string[abi:ne180100]((uint64_t)&v172, v74 + 14);
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v75 = (std::string *)v172.__r_.__value_.__r.__words[0];
        if (v74)
        {
          if (*(char *)(v73 + 39) >= 0)
            v76 = (const void *)(v73 + 16);
          else
            v76 = *(const void **)(v73 + 16);
          memmove(v75, v76, v74);
        }
        strcpy((char *)v75 + v74, "_slice_x_right");
        if (v151 >= 1)
        {
          if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
          else
            v77 = v173.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v77 + 16);
          if ((SBYTE7(v158) & 0x80u) == 0)
            v78 = __p;
          else
            v78 = (void **)__p[0];
          if (v77)
          {
            if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v79 = &v173;
            else
              v79 = (std::string *)v173.__r_.__value_.__r.__words[0];
            memmove(v78, v79, v77);
          }
          strcpy((char *)v78 + v77, "__@slice_x_right");
          if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v174.__r_.__value_.__l.__data_);
          *(_OWORD *)&v174.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          v174.__r_.__value_.__r.__words[2] = v158;
        }
        v170 = 1;
        v171 = 1;
        v169 = *(_DWORD *)v178 - v8;
        v80 = *(_QWORD *)(a1 + 40);
        v82 = *(_QWORD *)(v80 + 16);
        v81 = *(std::__shared_weak_count **)(v80 + 24);
        v166 = v82;
        v167 = v81;
        v168 = 0;
        if (v81)
        {
          v83 = (unint64_t *)&v81->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        Espresso::abstract_engine_factory::shared(&v186);
        v85 = v186.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(__p, "slice");
        LODWORD(v154) = (***(uint64_t (****)(_QWORD))(v166 + 8))(*(_QWORD *)(v166 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v85, (uint64_t)&v166, (uint64_t)__p, (uint64_t)&v168, (int *)&v154);
        if (*(_QWORD *)__str
        {
          v164 = (uint64_t)v86;
          v165 = *(_QWORD *)&__str[8];
          if (*(_QWORD *)&__str[8])
          {
            v87 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
        }
        else
        {
          v164 = 0;
          v165 = 0;
        }
        v89 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v90 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        if (SBYTE7(v158) < 0)
          operator delete(__p[0]);
        v92 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
        if (v186.__r_.__value_.__l.__size_)
        {
          v93 = (unint64_t *)(v186.__r_.__value_.__l.__size_ + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v95 = (std::__shared_weak_count *)v165;
        v153[0] = v164;
        v153[1] = v165;
        if (v165)
        {
          v96 = (unint64_t *)(v165 + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "slice");
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v186, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
        else
          v186 = v174;
        memset(__str, 0, 24);
        v154 = (void **)__str;
        LOBYTE(v155) = 0;
        *(_QWORD *)__str = operator new(0x18uLL);
        *(_QWORD *)&__str[8] = *(_QWORD *)__str;
        *(_QWORD *)&__str[16] = *(_QWORD *)__str + 24;
        *(_QWORD *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (__int128 *)&v186, &v187, *(std::string **)__str);
        Espresso::single_match_state<Espresso::generic_crop_kernel>::add_kernel(a2, v153, (const std::string *)__p, &v172, &v175.__begin_, (std::string **)__str);
        v154 = (void **)__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v186.__r_.__value_.__l.__data_);
        if (SBYTE7(v158) < 0)
          operator delete(__p[0]);
        if (v95)
        {
          v98 = (unint64_t *)&v95->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v100 = v164;
        *(_OWORD *)__str = *(_OWORD *)v178;
        *(_OWORD *)&__str[16] = *(_OWORD *)&v178[16];
        v182 = *(_QWORD *)&v178[32];
        v183 = 0;
        v184 = 0;
        v185 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v183, (const void *)v179, *((uint64_t *)&v179 + 1), (uint64_t)(*((_QWORD *)&v179 + 1) - v179) >> 2);
        v154 = 0;
        v155 = 0;
        v156 = 0;
        v176 = (std::string *)&v154;
        v177 = 0;
        v154 = (void **)operator new(0x40uLL);
        v155 = v154;
        v156 = v154 + 8;
        v155 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v156, (__int128 *)__str, (__int128 *)&v186, (uint64_t)v154);
        (*(void (**)(std::string *__return_ptr, uint64_t, void ***))(*(_QWORD *)v100 + 64))(&v186, v100, &v154);
        v101 = *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 32);
        v102 = *(_OWORD *)(v186.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)__p = *(_OWORD *)v186.__r_.__value_.__l.__data_;
        v158 = v102;
        v159 = v101;
        v160 = 0;
        v161 = 0;
        v162 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v160, *(const void **)(v186.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 40)) >> 2);
        v176 = &v186;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
        v176 = (std::string *)&v154;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
        if (v183)
        {
          v184 = v183;
          operator delete(v183);
        }
        v103 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
        *(_QWORD *)__str = &v174;
        v104 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v103, &v174, (__int128 **)__str);
        v105 = v158;
        *(_OWORD *)(v104 + 56) = *(_OWORD *)__p;
        *(_OWORD *)(v104 + 72) = v105;
        *((_QWORD *)v104 + 11) = v159;
        if (v104 + 56 != (char *)__p)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v104 + 96, (char *)v160, (uint64_t)v161, (v161 - (_BYTE *)v160) >> 2);
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)__str, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
        else
          *(std::string *)__str = v174;
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v175, (std::string *)__str, (__int128 *)&__str[24], 1uLL);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        *(_OWORD *)v178 = *(_OWORD *)__p;
        *(_OWORD *)&v178[16] = v158;
        *(_QWORD *)&v178[32] = v159;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v179, (char *)v160, (uint64_t)v161, (v161 - (_BYTE *)v160) >> 2);
        v106 = *(_QWORD *)(a1 + 40) + 96;
        v107 = a2[3].i32[2];
        *(_QWORD *)__str = v107;
        v108 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v106, v107, __str);
        std::string::operator=(&v174, (const std::string *)v108[3]);
        if (v160)
        {
          v161 = v160;
          operator delete(v160);
        }
        v109 = (std::__shared_weak_count *)v165;
        if (v165)
        {
          v110 = (unint64_t *)(v165 + 8);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        v112 = v167;
        if (v167)
        {
          v113 = (unint64_t *)&v167->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v172.__r_.__value_.__l.__data_);
      }
      if (v151 >= 1)
      {
        v115 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
        if (*(char *)(v115 + 39) >= 0)
          v116 = *(unsigned __int8 *)(v115 + 39);
        else
          v116 = *(_QWORD *)(v115 + 24);
        v117 = &v172;
        std::string::basic_string[abi:ne180100]((uint64_t)&v172, v116 + 13);
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v117 = (std::string *)v172.__r_.__value_.__r.__words[0];
        if (v116)
        {
          if (*(char *)(v115 + 39) >= 0)
            v118 = (const void *)(v115 + 16);
          else
            v118 = *(const void **)(v115 + 16);
          memmove(v117, v118, v116);
        }
        strcpy((char *)v117 + v116, "_slice_x_left");
        v170 = 1;
        LODWORD(v168) = 0;
        HIDWORD(v168) = v151;
        v171 = 1;
        v169 = *(_DWORD *)v178;
        v119 = *(_QWORD *)(a1 + 40);
        v121 = *(_QWORD *)(v119 + 16);
        v120 = *(std::__shared_weak_count **)(v119 + 24);
        v166 = v121;
        v167 = v120;
        if (v120)
        {
          v122 = (unint64_t *)&v120->__shared_owners_;
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
        }
        Espresso::abstract_engine_factory::shared(&v186);
        v124 = v186.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(__p, "slice");
        LODWORD(v154) = (***(uint64_t (****)(_QWORD))(v166 + 8))(*(_QWORD *)(v166 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v124, (uint64_t)&v166, (uint64_t)__p, (uint64_t)&v168, (int *)&v154);
        if (*(_QWORD *)__str
        {
          v164 = (uint64_t)v125;
          v165 = *(_QWORD *)&__str[8];
          if (*(_QWORD *)&__str[8])
          {
            v126 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v127 = __ldxr(v126);
            while (__stxr(v127 + 1, v126));
          }
        }
        else
        {
          v164 = 0;
          v165 = 0;
        }
        v128 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v129 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        if (SBYTE7(v158) < 0)
          operator delete(__p[0]);
        v131 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
        if (v186.__r_.__value_.__l.__size_)
        {
          v132 = (unint64_t *)(v186.__r_.__value_.__l.__size_ + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        v134 = (std::__shared_weak_count *)v165;
        v152[0] = v164;
        v152[1] = v165;
        if (v165)
        {
          v135 = (unint64_t *)(v165 + 8);
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "slice");
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v186, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
        else
          v186 = v174;
        memset(__str, 0, 24);
        v154 = (void **)__str;
        LOBYTE(v155) = 0;
        *(_QWORD *)__str = operator new(0x18uLL);
        *(_QWORD *)&__str[8] = *(_QWORD *)__str;
        *(_QWORD *)&__str[16] = *(_QWORD *)__str + 24;
        *(_QWORD *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (__int128 *)&v186, &v187, *(std::string **)__str);
        Espresso::single_match_state<Espresso::generic_crop_kernel>::add_kernel(a2, v152, (const std::string *)__p, &v172, &v175.__begin_, (std::string **)__str);
        v154 = (void **)__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v186.__r_.__value_.__l.__data_);
        if (SBYTE7(v158) < 0)
          operator delete(__p[0]);
        if (v134)
        {
          v137 = (unint64_t *)&v134->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        v139 = v164;
        *(_OWORD *)__str = *(_OWORD *)v178;
        *(_OWORD *)&__str[16] = *(_OWORD *)&v178[16];
        v182 = *(_QWORD *)&v178[32];
        v183 = 0;
        v184 = 0;
        v185 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v183, (const void *)v179, *((uint64_t *)&v179 + 1), (uint64_t)(*((_QWORD *)&v179 + 1) - v179) >> 2);
        v154 = 0;
        v155 = 0;
        v156 = 0;
        v176 = (std::string *)&v154;
        v177 = 0;
        v154 = (void **)operator new(0x40uLL);
        v155 = v154;
        v156 = v154 + 8;
        v155 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v156, (__int128 *)__str, (__int128 *)&v186, (uint64_t)v154);
        (*(void (**)(std::string *__return_ptr, uint64_t, void ***))(*(_QWORD *)v139 + 64))(&v186, v139, &v154);
        v140 = *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 32);
        v141 = *(_OWORD *)(v186.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)__p = *(_OWORD *)v186.__r_.__value_.__l.__data_;
        v158 = v141;
        v159 = v140;
        v160 = 0;
        v161 = 0;
        v162 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v160, *(const void **)(v186.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v186.__r_.__value_.__r.__words[0] + 40)) >> 2);
        v176 = &v186;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
        v176 = (std::string *)&v154;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
        if (v183)
        {
          v184 = v183;
          operator delete(v183);
        }
        v142 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
        *(_QWORD *)__str = &v174;
        v143 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v142, &v174, (__int128 **)__str);
        v144 = v158;
        *(_OWORD *)(v143 + 56) = *(_OWORD *)__p;
        *(_OWORD *)(v143 + 72) = v144;
        *((_QWORD *)v143 + 11) = v159;
        if (v143 + 56 != (char *)__p)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v143 + 96, (char *)v160, (uint64_t)v161, (v161 - (_BYTE *)v160) >> 2);
        if (v160)
        {
          v161 = v160;
          operator delete(v160);
        }
        v145 = (std::__shared_weak_count *)v165;
        if (v165)
        {
          v146 = (unint64_t *)(v165 + 8);
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        v148 = v167;
        if (v167)
        {
          v149 = (unint64_t *)&v167->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v172.__r_.__value_.__l.__data_);
      }
    }
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if ((_QWORD)v179)
  {
    *((_QWORD *)&v179 + 1) = v179;
    operator delete((void *)v179);
  }
  *(_QWORD *)v178 = &v175;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
}

void sub_1915ACA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  uint64_t a69;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  if (a57 < 0)
    operator delete(a52);
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  a63 = (uint64_t)&a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context32handle_quantized_activation_lutsEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t **v14;
  char *v15;
  uint64_t **v16;
  char *v17;
  int v18;
  float v19;
  int v20;
  int v21;
  uint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  std::string *v33;
  const void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *size;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  const void *v53;
  uint64_t **v54;
  char *v55;
  __int128 v56;
  const void *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t **v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  std::vector<std::string> *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *__p[2];
  __int128 v83;
  uint64_t v84;
  void *v85;
  _BYTE *v86;
  uint64_t v87;
  std::string *v88;
  void **p_data;
  void **v90;
  uint64_t v91[2];
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  std::string v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  int v100;
  char v101;
  int v102;
  int v103;
  void *v104;
  std::__shared_weak_count *v105;
  const void *v106;
  std::__shared_weak_count *v107;
  std::string v108;
  void ***v109;
  char v110;
  _BYTE __str[32];
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  std::string v116;
  uint64_t v117;
  std::string v118;
  __int128 v119;

  *(_QWORD *)&v119 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    v6 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]);
    v7 = *(_QWORD *)(a1 + 40) + 96;
    v8 = a2[3].i32[2];
    __p[0] = (void *)v8;
    v9 = (_QWORD *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v8, __p)[3];
    v10 = *(_QWORD *)(a1 + 40) + 56;
    v11 = a2[3].i32[2];
    __p[0] = (void *)v11;
    v12 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, __p)[3];
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v108.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v13;
    }
    if ((v6 & 0xFFFFFFFD) == 1)
    {
      v14 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 352);
      __p[0] = v9;
      v15 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, v9, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v16 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 352);
      __p[0] = &v108;
      v17 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, &v108, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v18 = *((_DWORD *)v17 + 16);
      v19 = *((float *)v17 + 14);
      v20 = *((_DWORD *)v15 + 16);
      v21 = *((_DWORD *)v15 + 14);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
      v23 = *(const void **)(v22 + 64);
      v24 = *(std::__shared_weak_count **)(v22 + 72);
      v106 = v23;
      v107 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      if (v23
      {
        v28 = v27;
        v104 = v27;
        v105 = v24;
        if (v24)
        {
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
      }
      else
      {
        v24 = 0;
        v28 = 0;
        v104 = 0;
        v105 = 0;
      }
      if (v18 == 2 || v18 == 4 || v20 == 2 || v20 == 4)
      {
        if (v20 == 4 || v20 == 2)
          *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v28 + 104))(v28) + 48) = v21;
        if (v18 == 4 || v18 == 2)
        {
          v99 = 0x358637BD00000000;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          v103 = 0;
          v97 = 1;
          v98 = 1.0 / v19;
          v31 = a2[1].i64[0];
          if (*(char *)(v31 + 39) >= 0)
            v32 = *(unsigned __int8 *)(v31 + 39);
          else
            v32 = *(_QWORD *)(v31 + 24);
          v33 = &v96;
          std::string::basic_string[abi:ne180100]((uint64_t)&v96, v32 + 27);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v33 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if (v32)
          {
            if (*(char *)(v31 + 39) >= 0)
              v34 = (const void *)(v31 + 16);
            else
              v34 = *(const void **)(v31 + 16);
            memmove(v33, v34, v32);
          }
          strcpy((char *)v33 + v32, "__prescale_quantization_goc");
          v35 = *(_QWORD *)(a1 + 40);
          v36 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v35 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v35 + 16)
                                                                                                + 8));
          v94 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12);
          v95 = v36;
          Espresso::abstract_engine_factory::shared(&v118);
          v37 = v118.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
          Espresso::abstract_engine_factory::make_kernel_priv(v37, v35 + 16, (uint64_t)__p, (uint64_t)&v97, &v95);
          if (*(_QWORD *)__str
          {
            v92 = (uint64_t)v38;
            v93 = *(_QWORD *)&__str[8];
            if (*(_QWORD *)&__str[8])
            {
              v39 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
          }
          else
          {
            v92 = 0;
            v93 = 0;
          }
          v41 = *(std::__shared_weak_count **)&__str[8];
          if (*(_QWORD *)&__str[8])
          {
            v42 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          if (SBYTE7(v83) < 0)
            operator delete(__p[0]);
          size = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
          if (v118.__r_.__value_.__l.__size_)
          {
            v45 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v47 = (std::__shared_weak_count *)v93;
          v91[0] = v92;
          v91[1] = v93;
          if (v93)
          {
            v48 = (unint64_t *)(v93 + 8);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v118, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
          else
            v118 = v108;
          memset(__str, 0, 24);
          v88 = (std::string *)__str;
          LOBYTE(p_data) = 0;
          *(_QWORD *)__str = operator new(0x18uLL);
          *(_QWORD *)&__str[8] = *(_QWORD *)__str;
          *(_QWORD *)&__str[16] = *(_QWORD *)__str + 24;
          *(_QWORD *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (__int128 *)&v118, &v119, *(std::string **)__str);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v116, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
          else
            v116 = v96;
          v88 = 0;
          p_data = 0;
          v90 = 0;
          v109 = (void ***)&v88;
          v110 = 0;
          v88 = (std::string *)operator new(0x18uLL);
          p_data = (void **)&v88->__r_.__value_.__l.__data_;
          v90 = (void **)&v88[1].__r_.__value_.__l.__data_;
          p_data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v90, (__int128 *)&v116, (__int128 *)&v117, v88);
          Espresso::single_match_state<Espresso::generic_activation_kernel>::add_kernel(a2, v91, (const std::string *)__p, &v96, (std::string **)__str, &v88, 1);
          v109 = (void ***)&v88;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v116.__r_.__value_.__l.__data_);
          v88 = (std::string *)__str;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v118.__r_.__value_.__l.__data_);
          if (SBYTE7(v83) < 0)
            operator delete(__p[0]);
          if (v47)
          {
            v51 = (unint64_t *)&v47->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v53 = (const void *)v92;
          v54 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
          v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
          v55 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, &v108, (__int128 **)&v116);
          v56 = *(_OWORD *)(v55 + 72);
          *(_OWORD *)__str = *(_OWORD *)(v55 + 56);
          *(_OWORD *)&__str[16] = v56;
          v57 = (const void *)*((_QWORD *)v55 + 12);
          v112 = *((_QWORD *)v55 + 11);
          v113 = 0;
          v114 = 0;
          v115 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v113, v57, *((_QWORD *)v55 + 13), (uint64_t)(*((_QWORD *)v55 + 13) - (_QWORD)v57) >> 2);
          v88 = 0;
          p_data = 0;
          v90 = 0;
          v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
          v116.__r_.__value_.__s.__data_[8] = 0;
          v88 = (std::string *)operator new(0x40uLL);
          p_data = (void **)&v88->__r_.__value_.__l.__data_;
          v90 = (void **)&v88[2].__r_.__value_.__r.__words[2];
          p_data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v90, (__int128 *)__str, (__int128 *)&v116, (uint64_t)v88);
          (*(void (**)(std::string *__return_ptr, const void *, std::string **))(*(_QWORD *)v53 + 64))(&v118, v53, &v88);
          v58 = *(_QWORD *)(v118.__r_.__value_.__r.__words[0] + 32);
          v59 = *(_OWORD *)(v118.__r_.__value_.__r.__words[0] + 16);
          *(_OWORD *)__p = *(_OWORD *)v118.__r_.__value_.__l.__data_;
          v83 = v59;
          v84 = v58;
          v85 = 0;
          v86 = 0;
          v87 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v85, *(const void **)(v118.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v118.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v118.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v118.__r_.__value_.__r.__words[0] + 40)) >> 2);
          v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
          v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
          if (v113)
          {
            v114 = v113;
            operator delete(v113);
          }
          v60 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
          *(_QWORD *)__str = &v96;
          v61 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60, &v96, (__int128 **)__str);
          v62 = v83;
          *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
          *(_OWORD *)(v61 + 72) = v62;
          *((_QWORD *)v61 + 11) = v84;
          if (v61 + 56 != (char *)__p)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v61 + 96, (char *)v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)__str, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
          else
            *(std::string *)__str = v96;
          v63 = *(_QWORD *)(a1 + 40) + 56;
          v64 = a2[3].i32[2];
          v118.__r_.__value_.__r.__words[0] = v64;
          v65 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v63, v64, &v118);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v65 + 1, (std::string *)__str, (__int128 *)&__str[24], 1uLL);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          if (v66)
          {
            v67 = (std::__shared_weak_count *)v93;
            *(_QWORD *)__str = v66;
            *(_QWORD *)&__str[8] = v93;
            if (v93)
            {
              v68 = (unint64_t *)(v93 + 8);
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
          }
          else
          {
            v67 = 0;
            *(_OWORD *)__str = 0uLL;
          }
          v70 = (*(uint64_t (**)(void *))(*(_QWORD *)v66 + 104))(v66);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v70, (uint64_t)&v108, (uint64_t)&v108);
          v71 = (*(uint64_t (**)(void *))(*(_QWORD *)v104 + 104))(v104);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v71, (uint64_t)&v96, (uint64_t)&v96);
          if (v67)
          {
            v72 = (unint64_t *)&v67->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          if (v85)
          {
            v86 = v85;
            operator delete(v85);
          }
          v74 = (std::__shared_weak_count *)v93;
          if (v93)
          {
            v75 = (unint64_t *)(v93 + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          v28 = v104;
        }
        else
        {
          v50 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 104))(v28);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v50, (uint64_t)&v108, (uint64_t)&v108);
        }
        *(_BYTE *)((*(uint64_t (**)(void *))(*(_QWORD *)v28 + 104))(v28) + 42) = 1;
        *(_BYTE *)((*(uint64_t (**)(void *))(*(_QWORD *)v104 + 104))(v104) + 40) = 1;
        v24 = v105;
      }
      if (v24)
      {
        v77 = (unint64_t *)&v24->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v79 = v107;
      if (v107)
      {
        v80 = (unint64_t *)&v107->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
  }
}

void sub_1915AD6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a33 < 0)
    operator delete(a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  if (a50 < 0)
    operator delete(a45);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_convolution_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6, int a7)
{
  char *v14;
  std::string *v15;
  uint64_t (***v16)(_QWORD);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::string __p;
  int v26;
  char *v27;
  std::__shared_weak_count *v28;
  _OWORD v29[3];

  v26 = 0;
  memset(v29, 0, sizeof(v29));
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_1E2DBF0D0;
  *((_QWORD *)v14 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  v15 = (std::string *)(v14 + 40);
  *(_OWORD *)(v14 + 88) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((_QWORD *)v14 + 30) = 0;
  v27 = v14 + 24;
  v28 = (std::__shared_weak_count *)v14;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v14 + 11, *a2, a2[1]);
  std::string::operator=(v15, a4);
  std::string::operator=((std::string *)(v27 + 40), a3);
  v16 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v17 = v27;
  *((_DWORD *)v27 + 2) = (**v16)(v16);
  v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(_QWORD *)(v18 + 208));
    else
      __p = *(std::string *)(v18 + 200);
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v19)
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(_QWORD *)v19 + 12);
  }
  if (v29 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v29, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v29[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v29[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v26 = a1[3].i32[2] - a7;
  v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v26);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v26);
    v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v22 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1915ADB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_activation_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6, int a7)
{
  char *v14;
  std::string *v15;
  uint64_t (***v16)(_QWORD);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::string __p;
  int v26;
  char *v27;
  std::__shared_weak_count *v28;
  _OWORD v29[3];

  v26 = 0;
  memset(v29, 0, sizeof(v29));
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_1E2DBF0D0;
  *((_QWORD *)v14 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  v15 = (std::string *)(v14 + 40);
  *(_OWORD *)(v14 + 88) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((_QWORD *)v14 + 30) = 0;
  v27 = v14 + 24;
  v28 = (std::__shared_weak_count *)v14;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v14 + 11, *a2, a2[1]);
  std::string::operator=(v15, a4);
  std::string::operator=((std::string *)(v27 + 40), a3);
  v16 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v17 = v27;
  *((_DWORD *)v27 + 2) = (**v16)(v16);
  v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(_QWORD *)(v18 + 208));
    else
      __p = *(std::string *)(v18 + 200);
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v19)
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(_QWORD *)v19 + 12);
  }
  if (v29 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v29, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v29[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v29[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v26 = a1[3].i32[2] - a7;
  v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v26);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v26);
    v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v22 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1915ADDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_pool_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1915ADED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915AE15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::prefer_ne(Espresso::ANECompilerEngine *this, NSString *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  if ((Espresso::ANECompilerEngine::is_mix(this, a2) & 1) != 0)
    return 1;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("espresso.mix_ane.prefer_ne"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v5, "BOOLValue");

  return v2;
}

void sub_1915AE228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  Espresso::ANECompilerEngine *v12;
  NSString *v13;
  NSString *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t (***v20)(_QWORD);
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  const void *v33;
  BOOL v34;
  uint64_t **v35;
  int v36;
  uint64_t **v37;
  int v38;
  uint64_t **v39;
  int v40;
  uint64_t **v41;
  int v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::string::size_type v50;
  std::string::size_type v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74[2];
  __int128 v75;
  int v76;
  __int128 v77;
  int v78;
  __int128 v79;
  _QWORD v80[2];
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _QWORD v88[2];
  std::string v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  int v101;
  __int128 v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  __int16 v109;
  int v110;
  char v111;
  std::string v112;
  std::string v113;
  __int128 v114;
  std::string v115;
  _OWORD v116[2];
  uint64_t v117;
  void *__p;
  void *v119;
  uint64_t v120;
  std::string v121;
  std::string v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  int v125;
  int v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
    v7 = *(_DWORD *)(v6 + 20);
    if ((v7 - 1) <= 1 && *(_DWORD *)(v6 + 24) == 0)
    {
      v9 = *(_QWORD *)(a1 + 40) + 56;
      v10 = a2[3].i32[2];
      v89.__r_.__value_.__r.__words[0] = v10;
      v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v89);
      if (v11[4] - v11[3] == 24)
      {
        Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(_QWORD *)(a1 + 40) + 472);
        v12 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
        if ((Espresso::ANECompilerEngine::is_mix(v12, v13) & 1) == 0
          && Espresso::ANECompilerEngine::is_mix_e(v12, v14))
        {
          v15 = *(_QWORD *)(a1 + 40);
          v17 = *(_QWORD *)(v15 + 16);
          v16 = *(std::__shared_weak_count **)(v15 + 24);
          v127 = v17;
          v128 = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          v20 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a2->i64[0] + 8) + 8);
          v126 = (**v20)(v20);
          v125 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12);
          Espresso::abstract_engine_factory::shared(&v123);
          v21 = *(_QWORD *)(a1 + 40) + 96;
          v22 = a2[3].i32[2];
          v89.__r_.__value_.__r.__words[0] = v22;
          v23 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v22, &v89)[3];
          if (*((char *)v23 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
          }
          else
          {
            v24 = *v23;
            v122.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
            *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v24;
          }
          v25 = *(_QWORD *)(a1 + 40) + 56;
          v26 = a2[3].i32[2];
          v89.__r_.__value_.__r.__words[0] = v26;
          v27 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v25, v26, &v89)[3];
          if (*((char *)v27 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
          }
          else
          {
            v28 = *v27;
            v121.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
            *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v28;
          }
          v29 = a2->i64[0];
          v30 = *(_QWORD *)(a1 + 40);
          v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
          v31 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v30 + 184), &v121, (__int128 **)&v89);
          v32 = *(_OWORD *)(v31 + 72);
          v116[0] = *(_OWORD *)(v31 + 56);
          v116[1] = v32;
          v33 = (const void *)*((_QWORD *)v31 + 12);
          v117 = *((_QWORD *)v31 + 11);
          __p = 0;
          v119 = 0;
          v120 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v33, *((_QWORD *)v31 + 13), (uint64_t)(*((_QWORD *)v31 + 13) - (_QWORD)v33) >> 2);
          v34 = Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::single_input_mode_supported_by_anec(v29, v30, (uint64_t)v116, (uint64_t)&v121);
          if (__p)
          {
            v119 = __p;
            operator delete(__p);
          }
          if (!v34)
          {
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::remove_layer(a2);
            v35 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
            v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
            v36 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, &v121, (__int128 **)&v89)+ 14);
            v37 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
            v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
            v38 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, &v121, (__int128 **)&v89)+ 15);
            v39 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
            v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
            v40 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, &v122, (__int128 **)&v89)+ 14);
            v41 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
            v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
            v42 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, &v122, (__int128 **)&v89)+ 15);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@transpose0", (const void **)&v122.__r_.__value_.__l.__data_, &v115);
            *(_OWORD *)&v133.__r_.__value_.__l.__data_ = xmmword_191A93530;
            LODWORD(v133.__r_.__value_.__r.__words[2]) = 4;
            v43 = v123;
            std::string::basic_string[abi:ne180100]<0>(&v89, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v43, (uint64_t)&v127, (uint64_t)&v89, (uint64_t)&v133, &v126);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v132, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v113);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            v114 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
            if (v132.__r_.__value_.__l.__size_)
            {
              v44 = (unint64_t *)(v132.__r_.__value_.__l.__size_ + 8);
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            std::string::basic_string[abi:ne180100]<0>(&v89, "transpose");
            if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v135, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
            else
              v135 = v121;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v113, (__int128 *)&v135, 1uLL);
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
            else
              v134 = v115;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v112, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, (uint64_t *)&v114, &v89, &v115, (std::string **)&v113, (std::string **)&v112);
            v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v114);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@convolution_y", (const void **)&v122.__r_.__value_.__l.__data_, &v113);
            __asm { FMOV            V8.2S, #1.0 }
            v95 = _D8;
            v96 = 1;
            v98 = 0;
            v97 = 0;
            v99 = 0;
            v100 = 0x1000100010001;
            v101 = 0;
            v103 = 1;
            v110 = 0;
            v111 = 0;
            v106 = 0;
            v107 = 0;
            memset(&v89, 0, sizeof(v89));
            v90 = 0;
            v91 = 1;
            v102 = xmmword_191A93310;
            v104 = 0;
            v105 = 0x10000;
            v108 = 0;
            v109 = 1;
            v93 = v36;
            v92 = v40;
            v94 = xmmword_191A93590;
            std::string::basic_string[abi:ne180100]<0>(&v135, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv(v43, (uint64_t)&v127, (uint64_t)&v135, (uint64_t)&v89, &v126);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v131, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v112);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            *(_BYTE *)(v131.__r_.__value_.__r.__words[0] + 688) = 1;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v77, 1, 1, v93, v92);
            _ZZZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1_EUb1_ENK3__7clERKNSt3__110shared_ptrINS_4blobIfLi4EEEEEii(v7, (uint64_t *)&v77, v36, v40);
            v50 = v131.__r_.__value_.__r.__words[0];
            Espresso::blob<float,1>::make(v88, v92);
            (*(void (**)(std::string::size_type, _QWORD *))(*(_QWORD *)v50 + 392))(v50, v88);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v88);
            v51 = v131.__r_.__value_.__r.__words[0];
            v87 = v77;
            if (*((_QWORD *)&v77 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)v51 + 400))(v51, &v87);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v87);
            v86 = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
            if (v131.__r_.__value_.__l.__size_)
            {
              v54 = (unint64_t *)(v131.__r_.__value_.__l.__size_ + 8);
              do
                v55 = __ldxr(v54);
              while (__stxr(v55 + 1, v54));
            }
            std::string::basic_string[abi:ne180100]<0>(&v135, "convolution");
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
            else
              v134 = v115;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v112, (__int128 *)&v134, 1uLL);
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v132, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
            else
              v132 = v113;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v133, (__int128 *)&v132, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, (uint64_t *)&v86, &v135, &v113, (std::string **)&v112, (std::string **)&v133);
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v86);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v77);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v131);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@transpose1", (const void **)&v122.__r_.__value_.__l.__data_, &v135);
            *(_OWORD *)&v131.__r_.__value_.__l.__data_ = xmmword_191A93530;
            LODWORD(v131.__r_.__value_.__r.__words[2]) = 4;
            std::string::basic_string[abi:ne180100]<0>(&v89, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v43, (uint64_t)&v127, (uint64_t)&v89, (uint64_t)&v131, &v126);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v77, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v112);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            v85 = v77;
            if (*((_QWORD *)&v77 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
            }
            std::string::basic_string[abi:ne180100]<0>(&v89, "transpose");
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
            else
              v134 = v113;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v112, (__int128 *)&v134, 1uLL);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v132, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
            else
              v132 = v135;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v133, (__int128 *)&v132, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, (uint64_t *)&v85, &v89, &v135, (std::string **)&v112, (std::string **)&v133);
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v85);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v77);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@transpose2", (const void **)&v122.__r_.__value_.__l.__data_, &v112);
            v77 = xmmword_191A93500;
            v78 = 4;
            std::string::basic_string[abi:ne180100]<0>(&v89, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v43, (uint64_t)&v127, (uint64_t)&v89, (uint64_t)&v77, &v126);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v130, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v134);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            v84 = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
            if (v130.__r_.__value_.__l.__size_)
            {
              v58 = (unint64_t *)(v130.__r_.__value_.__l.__size_ + 8);
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
            }
            std::string::basic_string[abi:ne180100]<0>(&v89, "transpose");
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v133, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
            else
              v133 = v135;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v134, (__int128 *)&v133, 1uLL);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v131, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
            else
              v131 = v112;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v132, (__int128 *)&v131, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, (uint64_t *)&v84, &v89, &v112, (std::string **)&v134, (std::string **)&v132);
            *(_QWORD *)&v75 = &v132;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v131.__r_.__value_.__l.__data_);
            v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v84);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v130);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@convolution1", (const void **)&v122.__r_.__value_.__l.__data_, &v134);
            v95 = _D8;
            v96 = 1;
            v98 = 0;
            v97 = 0;
            v99 = 0;
            v100 = 0x1000100010001;
            v101 = 0;
            v103 = 1;
            v110 = 0;
            v111 = 0;
            v106 = 0;
            v107 = 0;
            memset(&v89, 0, sizeof(v89));
            v90 = 0;
            v91 = 1;
            v102 = xmmword_191A93310;
            v104 = 0;
            v105 = 0x10000;
            v108 = 0;
            v109 = 1;
            v93 = v38;
            v92 = v42;
            v94 = xmmword_191A93590;
            std::string::basic_string[abi:ne180100]<0>(&v133, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv(v43, (uint64_t)&v127, (uint64_t)&v133, (uint64_t)&v89, &v126);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v75, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
            *(_BYTE *)(v75 + 688) = 1;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v82, 1, 1, v93, v92);
            _ZZZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1_EUb1_ENK3__7clERKNSt3__110shared_ptrINS_4blobIfLi4EEEEEii(v7, &v82, v38, v42);
            v60 = v75;
            Espresso::blob<float,1>::make(v81, v92);
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v60 + 392))(v60, v81);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v81);
            v61 = v75;
            v80[0] = v82;
            v80[1] = v83;
            if (v83)
            {
              v62 = (unint64_t *)(v83 + 8);
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 400))(v61, v80);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v80);
            v79 = v75;
            if (*((_QWORD *)&v75 + 1))
            {
              v64 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
              do
                v65 = __ldxr(v64);
              while (__stxr(v65 + 1, v64));
            }
            std::string::basic_string[abi:ne180100]<0>(&v133, "convolution");
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v131, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
            else
              v131 = v112;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v132, (__int128 *)&v131, 1uLL);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v130, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
            else
              v130 = v134;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v77, (__int128 *)&v130, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, (uint64_t *)&v79, &v133, &v134, (std::string **)&v132, (std::string **)&v77);
            v129 = (void **)&v77;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v129);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v130.__r_.__value_.__l.__data_);
            *(_QWORD *)&v77 = &v132;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v131.__r_.__value_.__l.__data_);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v79);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v82);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v75);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@transpose3", (const void **)&v122.__r_.__value_.__l.__data_, &v89);
            v75 = xmmword_191A93500;
            v76 = 4;
            std::string::basic_string[abi:ne180100]<0>(&v133, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v43, (uint64_t)&v127, (uint64_t)&v133, (uint64_t)&v75, &v126);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v82, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
            v74[0] = v82;
            v74[1] = v83;
            if (v83)
            {
              v66 = (unint64_t *)(v83 + 8);
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            std::string::basic_string[abi:ne180100]<0>(&v133, "transpose");
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v131, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
            else
              v131 = v134;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v132, (__int128 *)&v131, 1uLL);
            if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v130, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
            else
              v130 = v122;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v77, (__int128 *)&v130, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, v74, &v133, &v89, (std::string **)&v132, (std::string **)&v77);
            v129 = (void **)&v77;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v129);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v130.__r_.__value_.__l.__data_);
            *(_QWORD *)&v77 = &v132;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v131.__r_.__value_.__l.__data_);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v74);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v82);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v112.__r_.__value_.__l.__data_);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v113.__r_.__value_.__l.__data_);
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v115.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v121.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
          v68 = v124;
          if (v124)
          {
            v69 = (unint64_t *)&v124->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v71 = v128;
          if (v128)
          {
            v72 = (unint64_t *)&v128->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
        }

      }
    }
  }
}

void sub_1915AF1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  void *v75;
  uint64_t v76;

  a21 = v76 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (*(char *)(v76 - 185) < 0)
    operator delete(*(void **)(v76 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  if (a48 < 0)
    operator delete(a43);
  if (*(char *)(v76 - 153) < 0)
    operator delete(*(void **)(v76 - 176));
  if (a72 < 0)
    operator delete(a67);
  if (*(char *)(v76 - 121) < 0)
    operator delete(*(void **)(v76 - 144));
  if (a74 < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a75);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A8]);

  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1915AF830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915AFB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void _ZZZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1_EUb1_ENK3__7clERKNSt3__110shared_ptrINS_4blobIfLi4EEEEEii(int a1, uint64_t *a2, int a3, int a4)
{
  float v7;
  float v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  float v19;
  void *__p[3];

  v7 = (float)((float)a3 + -1.0) / (float)((float)a4 + -1.0);
  if (a4 <= 1)
    v7 = 1.0;
  if (a1 == 1)
    v8 = v7;
  else
    v8 = (float)a3 / (float)a4;
  std::vector<float>::vector(__p, a4);
  v9 = (float *)__p[0];
  if (a4 < 1)
  {
    if (!__p[0])
      return;
  }
  else
  {
    v10 = 0;
    do
    {
      v9[v10] = v8 * (float)(int)v10;
      if (a3 >= 1)
      {
        v11 = *a2;
        v12 = v10 * a3;
        v13 = a3;
        do
        {
          v14 = v9[v10];
          v15 = (int)v14;
          if (a3 - 1 >= (int)v14 + 1)
            v16 = v15 + 1;
          else
            v16 = a3 - 1;
          if (v16 == v15)
          {
            v17 = *(_QWORD *)(v11 + 24);
            v18 = v12 + v15;
            v19 = 1.0;
          }
          else
          {
            v19 = v14 - (float)v15;
            v17 = *(_QWORD *)(v11 + 24);
            *(float *)(v17 + 4 * (v12 + v15)) = 1.0 - v19;
            v18 = v16 + v12;
          }
          *(float *)(v17 + 4 * v18) = v19;
          --v13;
        }
        while (v13);
      }
      ++v10;
    }
    while (v10 != a4);
  }
  __p[1] = v9;
  operator delete(v9);
}

void ___ZN8Espresso17ANECompilerEngine7context30transform_large_separated_poolEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  int64x2_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  BOOL v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (***v23)(_QWORD);
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  __int128 *v30;
  __int128 v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  int64x2_t *v45;
  size_t size;
  _BYTE *v47;
  std::string *v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t i;
  size_t v70;
  std::string *v71;
  std::string *v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  void **v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  size_t v99;
  std::string *v100;
  std::string *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  __int128 v111;
  uint64_t v112;
  void *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _OWORD *v127;
  __int128 v128;
  std::string *v129;
  size_t v130;
  std::string *v131;
  std::string *v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  std::string::size_type v136;
  std::string *v137;
  __int128 v138;
  uint64_t v139;
  void *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  char *v170;
  std::string *v171;
  uint64_t v172;
  void *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  void *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  size_t v186;
  std::string *p_p;
  std::string *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  size_t v195;
  std::string *v196;
  std::string *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  unsigned int v215;
  int v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225[2];
  uint64_t v226;
  std::string::size_type v227;
  _BYTE v228[28];
  uint64_t v229;
  __int16 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238[2];
  __int128 v239;
  std::string v240;
  std::string __p;
  char *v242;
  std::string *v243;
  unint64_t v244;
  std::string v245;
  std::string v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  int v249;
  int v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  _DWORD v253[3];
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  int v260;
  Espresso::ANECompilerEngine *v261;
  std::__shared_weak_count *v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  int v269;
  std::string *v270;
  std::string::size_type v271;
  std::string v272;
  uint64_t v273;
  std::string v274;
  uint64_t v275;
  std::string v276;
  uint64_t v277;
  std::string v278;
  uint64_t v279;
  std::string v280;
  uint64_t v281;
  std::string v282;
  uint64_t v283;
  std::string v284;
  __int128 v285;

  *(_QWORD *)&v285 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) != v3 && v3 != 0)
    return;
  v5 = a2;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]);
  v7 = *(_DWORD *)v6;
  v8 = *(_DWORD *)(v6 + 4);
  v9 = *(_DWORD *)(v6 + 8);
  v10 = *(_OWORD *)(v6 + 60);
  v11 = *(_OWORD *)(v6 + 92);
  v267 = *(_OWORD *)(v6 + 76);
  v268 = v11;
  v269 = *(_DWORD *)(v6 + 108);
  v12 = *(_OWORD *)(v6 + 28);
  v263 = *(_OWORD *)(v6 + 12);
  v264 = v12;
  v265 = *(_OWORD *)(v6 + 44);
  v266 = v10;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v261, **(_QWORD **)(a1 + 40), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 8));
  v257 = v266;
  v258 = v267;
  v259 = v268;
  v254 = v263;
  v255 = v264;
  v253[0] = v7;
  v253[1] = v8;
  v253[2] = v9;
  v260 = v269;
  v256 = v265;
  v13 = Espresso::ANECompilerEngine::mix_pool_kernel::separated_pool_workaround_compatible(v261, (uint64_t)v253);
  v14 = v13;
  v15 = v262;
  if (!v262)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v262->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v14)
      return;
  }
  else
  {
LABEL_10:
    if (!v13)
      return;
  }
  v18 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(std::__shared_weak_count **)(v18 + 24);
  v251 = v20;
  v252 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(v5->i64[0] + 8) + 8);
  v250 = (**v23)(v23);
  v249 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * v5[3].i32[2]) + 12);
  Espresso::abstract_engine_factory::shared(&v247);
  v24 = *(_QWORD *)(a1 + 40) + 96;
  v25 = v5[3].i32[2];
  *(_QWORD *)v228 = v25;
  v26 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v25, v228)[3];
  if (*((char *)v26 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
  }
  else
  {
    v27 = *v26;
    v246.__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
    *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v27;
  }
  v28 = *(_QWORD *)(a1 + 40) + 56;
  v29 = v5[3].i32[2];
  *(_QWORD *)v228 = v29;
  v30 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28, v29, v228)[3];
  if (*((char *)v30 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v245.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v31;
  }
  v32 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
  *(_QWORD *)v228 = &v245;
  v220 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, &v245, (__int128 **)v228)+ 14);
  v33 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
  *(_QWORD *)v228 = &v245;
  v216 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, &v245, (__int128 **)v228)+ 15);
  v34 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
  *(_QWORD *)v228 = &v246;
  v215 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, &v246, (__int128 **)v228)+ 14);
  v35 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
  *(_QWORD *)v228 = &v246;
  v36 = *((int *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, &v246, (__int128 **)v228)+ 15);
  Espresso::single_match_state<Espresso::generic_pool_kernel>::remove_layer(v5);
  v37 = v8 + v8 * ((v220 - 1) / v8);
  v38 = v9 + v9 * ((v216 - 1) / v9);
  v39 = __OFSUB__(v37, v220);
  v40 = v37 - v220;
  if (v40 < 0 != v39)
    ++v40;
  v39 = __OFSUB__(v38, v216);
  v41 = v38 - v216;
  if (v41 < 0 != v39)
    ++v41;
  v242 = 0;
  v243 = 0;
  v244 = 0;
  if ((_DWORD)v36)
  {
    v42 = 0;
    v214 = v41 >> 1;
    v213 = v9 - (v41 >> 1);
    v43 = v8;
    v219 = v40 >> 1;
    v218 = v8 - (v40 >> 1);
    v44 = v215;
    if (v215 <= 1)
      v44 = 1;
    v217 = v44;
    v45 = v5;
    v212 = v36;
    while (1)
    {
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v246.__r_.__value_.__r.__words[2]);
      else
        size = v246.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)v228, size + 10);
      if (v228[23] >= 0)
        v47 = v228;
      else
        v47 = *(_BYTE **)v228;
      if (size)
      {
        if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v246;
        else
          v48 = (std::string *)v246.__r_.__value_.__r.__words[0];
        memmove(v47, v48, size);
      }
      strcpy(&v47[size], "__@yslice_");
      std::to_string(&v240, v42);
      if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v240;
      else
        v49 = (std::string *)v240.__r_.__value_.__r.__words[0];
      if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
      else
        v50 = v240.__r_.__value_.__l.__size_;
      v51 = std::string::append((std::string *)v228, (const std::string::value_type *)v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      if ((v228[23] & 0x80000000) != 0)
        operator delete(*(void **)v228);
      *(_QWORD *)&v228[12] = 1;
      *(_DWORD *)&v228[20] = 1;
      *(_DWORD *)v228 = 1;
      *(_DWORD *)&v228[4] = (v9 * v42 - v214) & ~((v9 * (int)v42 - v214) >> 31);
      v53 = v213 + v9 * v42;
      if (v216 < v53)
        v53 = v216;
      *(_DWORD *)&v228[8] = v53;
      if (((v9 * (_DWORD)v42 - v214) & ~((v9 * (int)v42 - v214) >> 31)) == v53)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid slice in pool decomposition");
      v54 = v247;
      std::string::basic_string[abi:ne180100]<0>(&v240, "slice");
      Espresso::abstract_engine_factory::make_kernel_priv(v54, (uint64_t)&v251, (uint64_t)&v240, (uint64_t)v228, &v250);
      if (v284.__r_.__value_.__r.__words[0]
      {
        v274.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v274.__r_.__value_.__l.__size_ = v284.__r_.__value_.__l.__size_;
        if (!v284.__r_.__value_.__l.__size_)
          goto LABEL_66;
        v56 = (unint64_t *)(v284.__r_.__value_.__l.__size_ + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      else
      {
        *(_OWORD *)&v274.__r_.__value_.__l.__data_ = 0uLL;
      }
      v58 = (std::__shared_weak_count *)v284.__r_.__value_.__l.__size_;
      if (v284.__r_.__value_.__l.__size_)
      {
        v59 = (unint64_t *)(v284.__r_.__value_.__l.__size_ + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
LABEL_66:
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      v61 = (std::__shared_weak_count *)v274.__r_.__value_.__l.__size_;
      v239 = *(_OWORD *)&v274.__r_.__value_.__l.__data_;
      if (v274.__r_.__value_.__l.__size_)
      {
        v62 = (unint64_t *)(v274.__r_.__value_.__l.__size_ + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      std::string::basic_string[abi:ne180100]<0>(&v240, "slice");
      if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v282, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
      else
        v282 = v245;
      memset(&v284, 0, sizeof(v284));
      v280.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
      v280.__r_.__value_.__s.__data_[8] = 0;
      v284.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v284.__r_.__value_.__l.__size_ = v284.__r_.__value_.__r.__words[0];
      v284.__r_.__value_.__r.__words[2] = v284.__r_.__value_.__r.__words[0] + 24;
      v284.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v284.__r_.__value_.__r.__words[2], (__int128 *)&v282, (__int128 *)&v283, (std::string *)v284.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v278, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v278 = __p;
      memset(&v280, 0, sizeof(v280));
      v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&v280;
      v276.__r_.__value_.__s.__data_[8] = 0;
      v280.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v280.__r_.__value_.__l.__size_ = v280.__r_.__value_.__r.__words[0];
      v280.__r_.__value_.__r.__words[2] = v280.__r_.__value_.__r.__words[0] + 24;
      v280.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v280.__r_.__value_.__r.__words[2], (__int128 *)&v278, (__int128 *)&v279, (std::string *)v280.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v45, (uint64_t *)&v239, &v240, &__p, (std::string **)&v284, (std::string **)&v280);
      v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&v280;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
      if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v278.__r_.__value_.__l.__data_);
      v280.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v280);
      if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v282.__r_.__value_.__l.__data_);
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v240.__r_.__value_.__l.__data_);
        if (!v61)
          goto LABEL_89;
      }
      else if (!v61)
      {
        goto LABEL_89;
      }
      v64 = (unint64_t *)&v61->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
LABEL_89:
      v66 = (std::__shared_weak_count *)v274.__r_.__value_.__l.__size_;
      if (v274.__r_.__value_.__l.__size_)
      {
        v67 = (unint64_t *)(v274.__r_.__value_.__l.__size_ + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      memset(&v240, 0, sizeof(v240));
      if (v215)
      {
        for (i = 0; i != v217; ++i)
        {
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
          else
            v70 = v246.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v280, v70 + 9);
          if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v280;
          else
            v71 = (std::string *)v280.__r_.__value_.__r.__words[0];
          if (v70)
          {
            if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v246;
            else
              v72 = (std::string *)v246.__r_.__value_.__r.__words[0];
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "__@slice_");
          std::to_string(&v278, i);
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = &v278;
          else
            v73 = (std::string *)v278.__r_.__value_.__r.__words[0];
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v74 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
          else
            v74 = v278.__r_.__value_.__l.__size_;
          v75 = std::string::append(&v280, (const std::string::value_type *)v73, v74);
          v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          v77 = std::string::append(&v282, "_");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          *(_QWORD *)&v228[16] = *((_QWORD *)&v77->__r_.__value_.__l + 2);
          *(_OWORD *)v228 = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v276, v42);
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v276;
          else
            v79 = (std::string *)v276.__r_.__value_.__r.__words[0];
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
          else
            v80 = v276.__r_.__value_.__l.__size_;
          v81 = std::string::append((std::string *)v228, (const std::string::value_type *)v79, v80);
          v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v284.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v284.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v276.__r_.__value_.__l.__data_);
          if ((v228[23] & 0x80000000) != 0)
            operator delete(*(void **)v228);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v278.__r_.__value_.__l.__data_);
          if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v280.__r_.__value_.__l.__data_);
          *(_QWORD *)&v228[12] = 1;
          *(_DWORD *)&v228[20] = 1;
          *(_DWORD *)v228 = 0;
          *(_DWORD *)&v228[4] = (v43 * i - v219) & ~((v43 * (int)i - v219) >> 31);
          v83 = v218 + v43 * i;
          if (v220 < v83)
            v83 = v220;
          *(_DWORD *)&v228[8] = v83;
          if (((v43 * (_DWORD)i - v219) & ~((v43 * (int)i - v219) >> 31)) == v83)
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid slice in pool decomposition");
          v84 = v247;
          std::string::basic_string[abi:ne180100]<0>(&v282, "slice");
          Espresso::abstract_engine_factory::make_kernel_priv(v84, (uint64_t)&v251, (uint64_t)&v282, (uint64_t)v228, &v250);
          if (v280.__r_.__value_.__r.__words[0]
          {
            v270 = (std::string *)v85;
            v271 = v280.__r_.__value_.__l.__size_;
            if (!v280.__r_.__value_.__l.__size_)
              goto LABEL_144;
            v86 = (unint64_t *)(v280.__r_.__value_.__l.__size_ + 8);
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          else
          {
            v271 = 0;
            v270 = 0;
          }
          v88 = (std::__shared_weak_count *)v280.__r_.__value_.__l.__size_;
          if (v280.__r_.__value_.__l.__size_)
          {
            v89 = (unint64_t *)(v280.__r_.__value_.__l.__size_ + 8);
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
LABEL_144:
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          v91 = (std::__shared_weak_count *)v271;
          v238[0] = (uint64_t)v270;
          v238[1] = v271;
          if (v271)
          {
            v92 = (unint64_t *)(v271 + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          std::string::basic_string[abi:ne180100]<0>(&v282, "slice");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v278, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v278 = __p;
          memset(&v280, 0, sizeof(v280));
          v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&v280;
          v276.__r_.__value_.__s.__data_[8] = 0;
          v280.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v280.__r_.__value_.__l.__size_ = v280.__r_.__value_.__r.__words[0];
          v280.__r_.__value_.__r.__words[2] = v280.__r_.__value_.__r.__words[0] + 24;
          v280.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v280.__r_.__value_.__r.__words[2], (__int128 *)&v278, (__int128 *)&v279, (std::string *)v280.__r_.__value_.__l.__data_);
          if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v274, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
          else
            v274 = v284;
          memset(&v276, 0, sizeof(v276));
          v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
          v272.__r_.__value_.__s.__data_[8] = 0;
          v276.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v276.__r_.__value_.__l.__size_ = v276.__r_.__value_.__r.__words[0];
          v276.__r_.__value_.__r.__words[2] = v276.__r_.__value_.__r.__words[0] + 24;
          v276.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v276.__r_.__value_.__r.__words[2], (__int128 *)&v274, (__int128 *)&v275, (std::string *)v276.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v45, v238, &v282, &v284, (std::string **)&v280, (std::string **)&v276);
          v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
          if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v274.__r_.__value_.__l.__data_);
          v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&v280;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v278.__r_.__value_.__l.__data_);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v282.__r_.__value_.__l.__data_);
            if (!v91)
              goto LABEL_167;
          }
          else if (!v91)
          {
            goto LABEL_167;
          }
          v94 = (unint64_t *)&v91->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
LABEL_167:
          v96 = (std::__shared_weak_count *)v271;
          if (v271)
          {
            v97 = (unint64_t *)(v271 + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v99 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
          else
            v99 = v246.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v278, v99 + 8);
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v100 = &v278;
          else
            v100 = (std::string *)v278.__r_.__value_.__r.__words[0];
          if (v99)
          {
            if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v101 = &v246;
            else
              v101 = (std::string *)v246.__r_.__value_.__r.__words[0];
            memmove(v100, v101, v99);
          }
          strcpy((char *)v100 + v99, "__@pool_");
          std::to_string(&v276, i);
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v102 = &v276;
          else
            v102 = (std::string *)v276.__r_.__value_.__r.__words[0];
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v103 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
          else
            v103 = v276.__r_.__value_.__l.__size_;
          v104 = std::string::append(&v278, (const std::string::value_type *)v102, v103);
          v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          v280.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v280.__r_.__value_.__l.__data_ = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          v106 = std::string::append(&v280, "_");
          v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          *(_QWORD *)&v228[16] = *((_QWORD *)&v106->__r_.__value_.__l + 2);
          *(_OWORD *)v228 = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v274, v42);
          if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = &v274;
          else
            v108 = (std::string *)v274.__r_.__value_.__r.__words[0];
          if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = HIBYTE(v274.__r_.__value_.__r.__words[2]);
          else
            v109 = v274.__r_.__value_.__l.__size_;
          v110 = std::string::append((std::string *)v228, (const std::string::value_type *)v108, v109);
          v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v274.__r_.__value_.__l.__data_);
          if ((v228[23] & 0x80000000) != 0)
            operator delete(*(void **)v228);
          if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v280.__r_.__value_.__l.__data_);
          if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v276.__r_.__value_.__l.__data_);
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v278.__r_.__value_.__l.__data_);
          *(_OWORD *)&v228[12] = xmmword_191A8AA80;
          v229 = 0x200000000;
          v230 = 1;
          v231 = 0u;
          v232 = 0u;
          v233 = 0;
          v234 = 0;
          v235 = 0x100000001;
          v236 = 0;
          v237 = 0;
          *(_DWORD *)((char *)&v232 + 2) = 1;
          *(_DWORD *)v228 = 0;
          *(_DWORD *)&v228[4] = v43;
          *(_DWORD *)&v228[8] = v9;
          v112 = v247;
          std::string::basic_string[abi:ne180100]<0>(&v280, "pool");
          Espresso::abstract_engine_factory::make_kernel_priv(v112, (uint64_t)&v251, (uint64_t)&v280, (uint64_t)v228, &v250);
          if (v278.__r_.__value_.__r.__words[0]
          {
            v226 = (uint64_t)v113;
            v227 = v278.__r_.__value_.__l.__size_;
            if (!v278.__r_.__value_.__l.__size_)
              goto LABEL_217;
            v114 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
          else
          {
            v226 = 0;
            v227 = 0;
          }
          v116 = (std::__shared_weak_count *)v278.__r_.__value_.__l.__size_;
          if (v278.__r_.__value_.__l.__size_)
          {
            v117 = (unint64_t *)(v278.__r_.__value_.__l.__size_ + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
LABEL_217:
          if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v280.__r_.__value_.__l.__data_);
          v119 = (std::__shared_weak_count *)v227;
          v225[0] = v226;
          v225[1] = v227;
          if (v227)
          {
            v120 = (unint64_t *)(v227 + 8);
            do
              v121 = __ldxr(v120);
            while (__stxr(v121 + 1, v120));
          }
          std::string::basic_string[abi:ne180100]<0>(&v280, "pool");
          if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v276, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
          else
            v276 = v284;
          memset(&v278, 0, sizeof(v278));
          v274.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
          v274.__r_.__value_.__s.__data_[8] = 0;
          v278.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v278.__r_.__value_.__l.__size_ = v278.__r_.__value_.__r.__words[0];
          v278.__r_.__value_.__r.__words[2] = v278.__r_.__value_.__r.__words[0] + 24;
          v278.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v278.__r_.__value_.__r.__words[2], (__int128 *)&v276, (__int128 *)&v277, (std::string *)v278.__r_.__value_.__l.__data_);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v272, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
          else
            v272 = v282;
          memset(&v274, 0, sizeof(v274));
          v270 = &v274;
          LOBYTE(v271) = 0;
          v274.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v274.__r_.__value_.__l.__size_ = v274.__r_.__value_.__r.__words[0];
          v274.__r_.__value_.__r.__words[2] = v274.__r_.__value_.__r.__words[0] + 24;
          v274.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v274.__r_.__value_.__r.__words[2], (__int128 *)&v272, (__int128 *)&v273, (std::string *)v274.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v45, v225, &v280, &v282, (std::string **)&v278, (std::string **)&v274);
          v270 = &v274;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v270);
          if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v272.__r_.__value_.__l.__data_);
          v274.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v274);
          if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v276.__r_.__value_.__l.__data_);
          if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v280.__r_.__value_.__l.__data_);
            if (v119)
            {
LABEL_236:
              v122 = (unint64_t *)&v119->__shared_owners_;
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 - 1, v122));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
          }
          else if (v119)
          {
            goto LABEL_236;
          }
          v124 = (std::__shared_weak_count *)v227;
          if (v227)
          {
            v125 = (unint64_t *)(v227 + 8);
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          v127 = (_OWORD *)v240.__r_.__value_.__l.__size_;
          if (v240.__r_.__value_.__l.__size_ >= v240.__r_.__value_.__r.__words[2])
          {
            v129 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v240.__r_.__value_.__l.__data_, (uint64_t)&v282);
          }
          else
          {
            if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v240.__r_.__value_.__l.__size_, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
            }
            else
            {
              v128 = *(_OWORD *)&v282.__r_.__value_.__l.__data_;
              *(_QWORD *)(v240.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v282.__r_.__value_.__l + 2);
              *v127 = v128;
            }
            v129 = (std::string *)((char *)v127 + 24);
          }
          v240.__r_.__value_.__l.__size_ = (std::string::size_type)v129;
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v284.__r_.__value_.__l.__data_);
        }
      }
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v130 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
      else
        v130 = v246.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v282, v130 + 9);
      if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = &v282;
      else
        v131 = (std::string *)v282.__r_.__value_.__r.__words[0];
      if (v130)
      {
        if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v132 = &v246;
        else
          v132 = (std::string *)v246.__r_.__value_.__r.__words[0];
        memmove(v131, v132, v130);
      }
      strcpy((char *)v131 + v130, "__@concat");
      v133 = std::string::append(&v282, "_");
      v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      v284.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v284.__r_.__value_.__l.__data_ = v134;
      v133->__r_.__value_.__l.__size_ = 0;
      v133->__r_.__value_.__r.__words[2] = 0;
      v133->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v280, v42);
      v5 = v45;
      if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v135 = &v280;
      else
        v135 = (std::string *)v280.__r_.__value_.__r.__words[0];
      if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
      else
        v136 = v280.__r_.__value_.__l.__size_;
      v137 = std::string::append(&v284, (const std::string::value_type *)v135, v136);
      v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
      *(_QWORD *)&v228[16] = *((_QWORD *)&v137->__r_.__value_.__l + 2);
      *(_OWORD *)v228 = v138;
      v137->__r_.__value_.__l.__size_ = 0;
      v137->__r_.__value_.__r.__words[2] = 0;
      v137->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v284.__r_.__value_.__l.__data_);
      if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v282.__r_.__value_.__l.__data_);
      if (v240.__r_.__value_.__l.__size_ - v240.__r_.__value_.__r.__words[0] == 24)
      {
        LODWORD(v274.__r_.__value_.__l.__data_) = 0;
        v139 = v247;
        std::string::basic_string[abi:ne180100]<0>(&v284, "copy");
        Espresso::abstract_engine_factory::make_kernel_priv(v139, (uint64_t)&v251, (uint64_t)&v284, (uint64_t)&v274, &v250);
        if (v282.__r_.__value_.__r.__words[0]
        {
          v276.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
          v276.__r_.__value_.__l.__size_ = v282.__r_.__value_.__l.__size_;
          if (v282.__r_.__value_.__l.__size_)
          {
            v141 = (unint64_t *)(v282.__r_.__value_.__l.__size_ + 8);
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
            goto LABEL_293;
          }
        }
        else
        {
          *(_OWORD *)&v276.__r_.__value_.__l.__data_ = 0uLL;
LABEL_293:
          v147 = (std::__shared_weak_count *)v282.__r_.__value_.__l.__size_;
          if (v282.__r_.__value_.__l.__size_)
          {
            v148 = (unint64_t *)(v282.__r_.__value_.__l.__size_ + 8);
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
        }
        if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v284.__r_.__value_.__l.__data_);
        v150 = (std::__shared_weak_count *)v276.__r_.__value_.__l.__size_;
        v224 = *(_OWORD *)&v276.__r_.__value_.__l.__data_;
        if (v276.__r_.__value_.__l.__size_)
        {
          v151 = (unint64_t *)(v276.__r_.__value_.__l.__size_ + 8);
          do
            v152 = __ldxr(v151);
          while (__stxr(v152 + 1, v151));
        }
        std::string::basic_string[abi:ne180100]<0>(&v284, "copy");
        if ((v228[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)v228, *(std::string::size_type *)&v228[8]);
        else
          v280 = *(std::string *)v228;
        memset(&v282, 0, sizeof(v282));
        v278.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
        v278.__r_.__value_.__s.__data_[8] = 0;
        v282.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v282.__r_.__value_.__l.__size_ = v282.__r_.__value_.__r.__words[0];
        v282.__r_.__value_.__r.__words[2] = v282.__r_.__value_.__r.__words[0] + 24;
        v282.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v282.__r_.__value_.__r.__words[2], (__int128 *)&v280, (__int128 *)&v281, (std::string *)v282.__r_.__value_.__l.__data_);
        Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v45, (uint64_t *)&v224, &v284, (const std::string *)v228, (std::string **)&v240, (std::string **)&v282);
        v278.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v280.__r_.__value_.__l.__data_);
        if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v284.__r_.__value_.__l.__data_);
          if (!v150)
            goto LABEL_335;
        }
        else if (!v150)
        {
          goto LABEL_335;
        }
        v159 = (unint64_t *)&v150->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
LABEL_335:
        v161 = (std::__shared_weak_count *)v276.__r_.__value_.__l.__size_;
        if (v276.__r_.__value_.__l.__size_)
        {
          v162 = (unint64_t *)(v276.__r_.__value_.__l.__size_ + 8);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          goto LABEL_347;
        }
        goto LABEL_349;
      }
      WORD2(v274.__r_.__value_.__r.__words[0]) = 0;
      LODWORD(v274.__r_.__value_.__l.__data_) = 0;
      v143 = v247;
      std::string::basic_string[abi:ne180100]<0>(&v284, "general_concat");
      Espresso::abstract_engine_factory::make_kernel_priv(v143, (uint64_t)&v251, (uint64_t)&v284, (uint64_t)&v274, &v250);
      if (v282.__r_.__value_.__r.__words[0]
      {
        v276.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
        v276.__r_.__value_.__l.__size_ = v282.__r_.__value_.__l.__size_;
        if (!v282.__r_.__value_.__l.__size_)
          goto LABEL_311;
        v145 = (unint64_t *)(v282.__r_.__value_.__l.__size_ + 8);
        do
          v146 = __ldxr(v145);
        while (__stxr(v146 + 1, v145));
      }
      else
      {
        *(_OWORD *)&v276.__r_.__value_.__l.__data_ = 0uLL;
      }
      v153 = (std::__shared_weak_count *)v282.__r_.__value_.__l.__size_;
      if (v282.__r_.__value_.__l.__size_)
      {
        v154 = (unint64_t *)(v282.__r_.__value_.__l.__size_ + 8);
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
LABEL_311:
      if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v284.__r_.__value_.__l.__data_);
      v156 = (std::__shared_weak_count *)v276.__r_.__value_.__l.__size_;
      v223 = *(_OWORD *)&v276.__r_.__value_.__l.__data_;
      if (v276.__r_.__value_.__l.__size_)
      {
        v157 = (unint64_t *)(v276.__r_.__value_.__l.__size_ + 8);
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
      }
      std::string::basic_string[abi:ne180100]<0>(&v284, "general_concat");
      if ((v228[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)v228, *(std::string::size_type *)&v228[8]);
      else
        v280 = *(std::string *)v228;
      memset(&v282, 0, sizeof(v282));
      v278.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
      v278.__r_.__value_.__s.__data_[8] = 0;
      v282.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v282.__r_.__value_.__l.__size_ = v282.__r_.__value_.__r.__words[0];
      v282.__r_.__value_.__r.__words[2] = v282.__r_.__value_.__r.__words[0] + 24;
      v282.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v282.__r_.__value_.__r.__words[2], (__int128 *)&v280, (__int128 *)&v281, (std::string *)v282.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v45, (uint64_t *)&v223, &v284, (const std::string *)v228, (std::string **)&v240, (std::string **)&v282);
      v278.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v284.__r_.__value_.__l.__data_);
        if (!v156)
          goto LABEL_344;
      }
      else if (!v156)
      {
        goto LABEL_344;
      }
      v164 = (unint64_t *)&v156->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
LABEL_344:
      v161 = (std::__shared_weak_count *)v276.__r_.__value_.__l.__size_;
      if (v276.__r_.__value_.__l.__size_)
      {
        v166 = (unint64_t *)(v276.__r_.__value_.__l.__size_ + 8);
        do
          v163 = __ldaxr(v166);
        while (__stlxr(v163 - 1, v166));
LABEL_347:
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
LABEL_349:
      v167 = v243;
      if ((unint64_t)v243 >= v244)
      {
        v169 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v242, (uint64_t)v228);
      }
      else
      {
        if ((v228[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v243, *(const std::string::value_type **)v228, *(std::string::size_type *)&v228[8]);
        }
        else
        {
          v168 = *(_OWORD *)v228;
          v243->__r_.__value_.__r.__words[2] = *(_QWORD *)&v228[16];
          *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
        }
        v169 = v167 + 1;
      }
      v243 = v169;
      if ((v228[23] & 0x80000000) != 0)
        operator delete(*(void **)v228);
      *(_QWORD *)v228 = &v240;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v228);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (++v42 == v212)
      {
        v170 = v242;
        v171 = v243;
        goto LABEL_362;
      }
    }
  }
  v170 = 0;
  v171 = 0;
LABEL_362:
  if ((char *)v171 - v170 == 24)
  {
    LODWORD(v278.__r_.__value_.__l.__data_) = 0;
    v172 = v247;
    std::string::basic_string[abi:ne180100]<0>(v228, "copy");
    Espresso::abstract_engine_factory::make_kernel_priv(v172, (uint64_t)&v251, (uint64_t)v228, (uint64_t)&v278, &v250);
    if (__p.__r_.__value_.__r.__words[0]
    {
      v280.__r_.__value_.__r.__words[0] = (std::string::size_type)v173;
      v280.__r_.__value_.__l.__size_ = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v174 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v175 = __ldxr(v174);
        while (__stxr(v175 + 1, v174));
      }
    }
    else
    {
      *(_OWORD *)&v280.__r_.__value_.__l.__data_ = 0uLL;
    }
    v180 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v181 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    if ((v228[23] & 0x80000000) != 0)
      operator delete(*(void **)v228);
    v183 = (std::__shared_weak_count *)v280.__r_.__value_.__l.__size_;
    v222 = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
    if (v280.__r_.__value_.__l.__size_)
    {
      v184 = (unint64_t *)(v280.__r_.__value_.__l.__size_ + 8);
      do
        v185 = __ldxr(v184);
      while (__stxr(v185 + 1, v184));
    }
    std::string::basic_string[abi:ne180100]<0>(v228, "copy");
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v186 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
    else
      v186 = v246.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v186 + 7);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v186)
    {
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v188 = &v246;
      else
        v188 = (std::string *)v246.__r_.__value_.__r.__words[0];
      memmove(p_p, v188, v186);
    }
    strcpy((char *)p_p + v186, "__@copy");
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v284, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
    else
      v284 = v246;
    memset(&v240, 0, sizeof(v240));
    v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
    v282.__r_.__value_.__s.__data_[8] = 0;
    v240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v240.__r_.__value_.__l.__size_ = v240.__r_.__value_.__r.__words[0];
    v240.__r_.__value_.__r.__words[2] = v240.__r_.__value_.__r.__words[0] + 24;
    v240.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v240.__r_.__value_.__r.__words[2], (__int128 *)&v284, &v285, (std::string *)v240.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v5, (uint64_t *)&v222, (const std::string *)v228, &__p, (std::string **)&v242, (std::string **)&v240);
    v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
    if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v284.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v228[23] & 0x80000000) != 0)
      operator delete(*(void **)v228);
    if (v183)
    {
      v198 = (unint64_t *)&v183->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    v200 = (std::__shared_weak_count *)v280.__r_.__value_.__l.__size_;
    if (!v280.__r_.__value_.__l.__size_)
      goto LABEL_456;
    v201 = (unint64_t *)(v280.__r_.__value_.__l.__size_ + 8);
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
  }
  else
  {
    WORD2(v278.__r_.__value_.__r.__words[0]) = 0;
    LODWORD(v278.__r_.__value_.__l.__data_) = 1;
    v176 = v247;
    std::string::basic_string[abi:ne180100]<0>(v228, "general_concat");
    Espresso::abstract_engine_factory::make_kernel_priv(v176, (uint64_t)&v251, (uint64_t)v228, (uint64_t)&v278, &v250);
    if (__p.__r_.__value_.__r.__words[0]
    {
      v280.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
      v280.__r_.__value_.__l.__size_ = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v178 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v179 = __ldxr(v178);
        while (__stxr(v179 + 1, v178));
      }
    }
    else
    {
      *(_OWORD *)&v280.__r_.__value_.__l.__data_ = 0uLL;
    }
    v189 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v190 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
    }
    if ((v228[23] & 0x80000000) != 0)
      operator delete(*(void **)v228);
    v192 = (std::__shared_weak_count *)v280.__r_.__value_.__l.__size_;
    v221 = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
    if (v280.__r_.__value_.__l.__size_)
    {
      v193 = (unint64_t *)(v280.__r_.__value_.__l.__size_ + 8);
      do
        v194 = __ldxr(v193);
      while (__stxr(v194 + 1, v193));
    }
    std::string::basic_string[abi:ne180100]<0>(v228, "general_concat");
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v195 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
    else
      v195 = v246.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v195 + 9);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v196 = &__p;
    else
      v196 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v195)
    {
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v197 = &v246;
      else
        v197 = (std::string *)v246.__r_.__value_.__r.__words[0];
      memmove(v196, v197, v195);
    }
    strcpy((char *)v196 + v195, "__@concat");
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v284, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
    else
      v284 = v246;
    memset(&v240, 0, sizeof(v240));
    v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
    v282.__r_.__value_.__s.__data_[8] = 0;
    v240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v240.__r_.__value_.__l.__size_ = v240.__r_.__value_.__r.__words[0];
    v240.__r_.__value_.__r.__words[2] = v240.__r_.__value_.__r.__words[0] + 24;
    v240.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v240.__r_.__value_.__r.__words[2], (__int128 *)&v284, &v285, (std::string *)v240.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v5, (uint64_t *)&v221, (const std::string *)v228, &__p, (std::string **)&v242, (std::string **)&v240);
    v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
    if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v284.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v228[23] & 0x80000000) != 0)
      operator delete(*(void **)v228);
    if (v192)
    {
      v203 = (unint64_t *)&v192->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
      }
    }
    v200 = (std::__shared_weak_count *)v280.__r_.__value_.__l.__size_;
    if (!v280.__r_.__value_.__l.__size_)
      goto LABEL_456;
    v205 = (unint64_t *)(v280.__r_.__value_.__l.__size_ + 8);
    do
      v202 = __ldaxr(v205);
    while (__stlxr(v202 - 1, v205));
  }
  if (!v202)
  {
    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
    std::__shared_weak_count::__release_weak(v200);
  }
LABEL_456:
  *(_QWORD *)v228 = &v242;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v228);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  v206 = v248;
  if (v248)
  {
    v207 = (unint64_t *)&v248->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = v252;
  if (v252)
  {
    v210 = (unint64_t *)&v252->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
}

void sub_1915B1A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;
  uint64_t v73;

  if (a72 < 0)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v73 - 224);
  a45 = &a73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x238]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void ___Z31surround_kernel_with_transposesIN8Espresso23generic_split_nd_kernelELi2EEvPNS0_3netEPNS0_17ANECompilerEngine7contextENS0_18transpose_params_tES7_NSt3__18functionIFbRNS0_18single_match_stateIT_EEEEE_block_invoke(_QWORD *a1, int64x2_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *i;
  std::string *v12;
  void **v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  char *v31;
  __int128 v32;
  const void *v33;
  __int128 *v34;
  uint64_t **v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t **v39;
  int v40;
  uint64_t **v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t **v45;
  char *v46;
  __int128 v47;
  const void *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 *v53;
  uint64_t **v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *v69;
  __int128 v70;
  const Espresso::base_kernel *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int64x2_t *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  const void **v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99[2];
  uint64_t v100[2];
  std::string *p_p_p;
  std::string *v102;
  void **p_data;
  std::string *p_p;
  std::string *v105;
  std::string *v106;
  uint64_t v107[2];
  std::string __p;
  std::string *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::string *v117;
  std::string *v118;
  uint64_t v119;
  std::string v120;
  const void **v121;
  uint64_t v122;
  uint64_t v123;
  std::string v124;
  std::string v125;
  void *v126[2];
  char v127;
  void *v128[2];
  unsigned __int8 v129;
  void ***p_p_p_p;
  char v131;
  std::string v132;
  uint64_t v133;
  std::string v134;
  uint64_t v135;
  std::string v136;
  uint64_t v137;
  _BYTE v138[40];
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == a1[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v128, "__@transpose_transform");
    std::string::basic_string[abi:ne180100]<0>(v126, "__@transpose_transform_bottom");
    v4 = a1[5];
    v5 = a2[3].i32[2];
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16 * v5);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
      v4 = a1[5];
      v5 = a2[3].i32[2];
    }
    else
    {
      v125 = *(std::string *)(v6 + 16);
    }
    *(_QWORD *)v138 = v5;
    v7 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4 + 56, v5, v138)[3];
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v124.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v8;
    }
    v9 = a1[5] + 96;
    *(_QWORD *)v138 = a2[3].i32[2];
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, *(unint64_t *)v138, v138);
    v121 = 0;
    v122 = 0;
    v123 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v121, v10[3], v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v121, (const void **)v126, (uint64_t)&v120);
    v117 = 0;
    v118 = 0;
    v119 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v117, (uint64_t)v121, v122, 0xAAAAAAAAAAAAAAABLL * ((v122 - (uint64_t)v121) >> 3));
    v12 = v117;
    for (i = v118; v12 != i; ++v12)
    {
      if ((v129 & 0x80u) == 0)
        v13 = v128;
      else
        v13 = (void **)v128[0];
      if ((v129 & 0x80u) == 0)
        v14 = v129;
      else
        v14 = (std::string::size_type)v128[1];
      std::string::append(v12, (const std::string::value_type *)v13, v14);
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a1[5] + 192), &v124))
    {
      v15 = a1[9];
      if (!v15)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(uint64_t, int64x2_t *))(*(_QWORD *)v15 + 48))(v15, a2))
      {
        v16 = a1[5];
        v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v16 + 192), &v120);
        v18 = *(std::__shared_weak_count **)(v16 + 24);
        v115 = *(_QWORD *)(v16 + 16);
        v116 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        Espresso::abstract_engine_factory::shared(&v109);
        v21 = (__int128 *)v109;
        std::string::basic_string[abi:ne180100]<0>(v138, "transpose");
        LODWORD(__p.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v115 + 8))(*(_QWORD *)(v115 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v21, (uint64_t)&v115, (uint64_t)v138, (uint64_t)(a1 + 10), (int *)&__p);
        if ((v138[23] & 0x80000000) != 0)
          operator delete(*(void **)v138);
        v22 = v110;
        if (v110)
        {
          v23 = (unint64_t *)&v110->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        Espresso::abstract_engine_factory::shared(&v109);
        v25 = (__int128 *)v109;
        std::string::basic_string[abi:ne180100]<0>(v138, "transpose");
        LODWORD(__p.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v115 + 8))(*(_QWORD *)(v115 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v25, (uint64_t)&v115, (uint64_t)v138, (uint64_t)a1 + 100, (int *)&__p);
        if ((v138[23] & 0x80000000) != 0)
          operator delete(*(void **)v138);
        v26 = v110;
        if (v110)
        {
          v27 = (unint64_t *)&v110->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v113;
        v30 = (uint64_t **)(a1[5] + 184);
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
        v31 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, &v124, (__int128 **)&v136);
        v32 = *(_OWORD *)(v31 + 72);
        *(_OWORD *)v138 = *(_OWORD *)(v31 + 56);
        *(_OWORD *)&v138[16] = v32;
        v33 = (const void *)*((_QWORD *)v31 + 12);
        *(_QWORD *)&v138[32] = *((_QWORD *)v31 + 11);
        v139 = 0uLL;
        *(_QWORD *)&v140 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v139, v33, *((_QWORD *)v31 + 13), (uint64_t)(*((_QWORD *)v31 + 13) - (_QWORD)v33) >> 2);
        memset(&__p, 0, sizeof(__p));
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v136.__r_.__value_.__s.__data_[8] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 64;
        __p.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (__int128 *)v138, (__int128 *)((char *)&v140 + 8), (uint64_t)__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v29 + 64))(&v109, v29, &__p);
        v34 = (__int128 *)v109;
        v35 = (uint64_t **)(a1[5] + 184);
        p_p = &v120;
        v36 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, &v120, (__int128 **)&p_p);
        v37 = *v34;
        v38 = v34[1];
        *((_QWORD *)v36 + 11) = *((_QWORD *)v34 + 4);
        *(_OWORD *)(v36 + 72) = v38;
        *(_OWORD *)(v36 + 56) = v37;
        if (v36 + 56 != (char *)v34)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 96, *((char **)v34 + 5), *((_QWORD *)v34 + 6), (uint64_t)(*((_QWORD *)v34 + 6) - *((_QWORD *)v34 + 5)) >> 2);
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
        if ((_QWORD)v139)
        {
          *((_QWORD *)&v139 + 1) = v139;
          operator delete((void *)v139);
        }
        v39 = (uint64_t **)(a1[5] + 184);
        v109 = &v120;
        v40 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, &v120, (__int128 **)&v109)+ 19);
        v41 = (uint64_t **)(a1[5] + 184);
        v109 = &v120;
        v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, &v120, (__int128 **)&v109);
        if (v40 <= 2)
          v43 = 2;
        else
          v43 = v40;
        *((_DWORD *)v42 + 19) = v43;
        v44 = a2->i64[0];
        v45 = (uint64_t **)(a1[5] + 184);
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
        v46 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, &v120, (__int128 **)&v136);
        v47 = *(_OWORD *)(v46 + 72);
        *(_OWORD *)v138 = *(_OWORD *)(v46 + 56);
        *(_OWORD *)&v138[16] = v47;
        v48 = (const void *)*((_QWORD *)v46 + 12);
        *(_QWORD *)&v138[32] = *((_QWORD *)v46 + 11);
        v139 = 0uLL;
        *(_QWORD *)&v140 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v139, v48, *((_QWORD *)v46 + 13), (uint64_t)(*((_QWORD *)v46 + 13) - (_QWORD)v48) >> 2);
        memset(&__p, 0, sizeof(__p));
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v136.__r_.__value_.__s.__data_[8] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 64;
        __p.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (__int128 *)v138, (__int128 *)((char *)&v140 + 8), (uint64_t)__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v44 + 64))(&v109, v44, &__p);
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
        if ((_QWORD)v139)
        {
          *((_QWORD *)&v139 + 1) = v139;
          operator delete((void *)v139);
        }
        v49 = v117;
        if (v118 != v117)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          do
          {
            v53 = (__int128 *)v109;
            v54 = (uint64_t **)(a1[5] + 184);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49[v50];
            v55 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, v49[v50].__r_.__value_.__r.__words, (__int128 **)&__p);
            v56 = v53[v51];
            v57 = v53[v51 + 1];
            *((_QWORD *)v55 + 11) = *(_QWORD *)&v53[v51 + 2];
            *(_OWORD *)(v55 + 72) = v57;
            *(_OWORD *)(v55 + 56) = v56;
            if (&v53[v51] != (__int128 *)(v55 + 56))
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v55 + 96, *((char **)&v53[v51 + 2] + 1), *(_QWORD *)&v53[v51 + 3], (uint64_t)(*(_QWORD *)&v53[v51 + 3] - *((_QWORD *)&v53[v51 + 2] + 1)) >> 2);
            ++v52;
            v49 = v117;
            v51 += 4;
            ++v50;
          }
          while (v52 < 0xAAAAAAAAAAAAAAABLL * (((char *)v118 - (char *)v117) >> 3));
        }
        v140 = 0u;
        v139 = 0u;
        *(_DWORD *)v138 = a2[3].i32[2];
        memset(&v138[8], 0, 32);
        v58 = a2[2].u64[1];
        if (v58 >= a2[3].i64[0])
        {
          v59 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v138);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v138);
          v59 = v58 + 72;
          a2[2].i64[1] = v58 + 72;
        }
        a2[2].i64[1] = v59;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138[24];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v60 = *(std::__shared_weak_count **)&v138[16];
        if (*(_QWORD *)&v138[16])
        {
          v61 = (unint64_t *)(*(_QWORD *)&v138[16] + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (!v17)
        {
          v66 = (std::__shared_weak_count *)v114;
          v107[0] = v113;
          v107[1] = v114;
          if (v114)
          {
            v67 = (unint64_t *)(v114 + 8);
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          std::string::basic_string[abi:ne180100]<0>(v138, "transpose");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v125.__r_.__value_.__l.__data_, (const void **)v126, (uint64_t)&v136);
          v69 = std::string::append(&v136, "__fwd");
          v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v134, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
          else
            v134 = v124;
          p_p = 0;
          v105 = 0;
          v106 = 0;
          p_p_p = (std::string *)&p_p;
          LOBYTE(v102) = 0;
          p_p = (std::string *)operator new(0x18uLL);
          v105 = p_p;
          v106 = p_p + 1;
          v105 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v106, (__int128 *)&v134, (__int128 *)&v135, p_p);
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v132, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
          else
            v132 = v120;
          p_p_p = 0;
          v102 = 0;
          p_data = 0;
          p_p_p_p = (void ***)&p_p_p;
          v131 = 0;
          p_p_p = (std::string *)operator new(0x18uLL);
          v102 = p_p_p;
          p_data = (void **)&p_p_p[1].__r_.__value_.__l.__data_;
          v102 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v132, (__int128 *)&v133, p_p_p);
          Espresso::single_match_state<Espresso::generic_split_nd_kernel>::add_kernel(a2, v107, (const std::string *)v138, &__p, &p_p, &p_p_p);
          p_p_p_p = (void ***)&p_p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p_p);
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          p_p_p = (std::string *)&p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          if ((v138[23] & 0x80000000) != 0)
            operator delete(*(void **)v138);
          if (v66)
          {
            v97 = (unint64_t *)&v66->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
        }
        v63 = (std::__shared_weak_count *)a2->i64[1];
        v100[0] = a2->i64[0];
        v100[1] = (uint64_t)v63;
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        std::string::basic_string[abi:ne180100]<0>(v138, "split_nd");
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v136, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
        else
          v136 = v120;
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        LOBYTE(v105) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (__int128 *)&v136, (__int128 *)&v137, (std::string *)__p.__r_.__value_.__l.__data_);
        Espresso::single_match_state<Espresso::generic_split_nd_kernel>::add_kernel(a2, v100, (const std::string *)v138, &v125, (std::string **)&__p, &v117);
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        if ((v138[23] & 0x80000000) != 0)
          operator delete(*(void **)v138);
        if (v63)
        {
          v72 = (unint64_t *)&v63->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (Espresso::is_kernel_generating_output(*(Espresso **)(a2[1].i64[0] + 64), v71))
        {
          v74 = *(_QWORD *)(a2[1].i64[0] + 64);
          std::string::basic_string[abi:ne180100]<0>(v138, "is_output");
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((_QWORD *)(v74 + 240), v138);
          if ((v138[23] & 0x80000000) != 0)
            operator delete(*(void **)v138);
        }
        if (v118 != v117)
        {
          v75 = 0;
          v76 = a2;
          do
          {
            v77 = (std::__shared_weak_count *)v112;
            v99[0] = v111;
            v99[1] = v112;
            if (v112)
            {
              v78 = (unint64_t *)(v112 + 8);
              do
                v79 = __ldxr(v78);
              while (__stxr(v79 + 1, v78));
            }
            std::string::basic_string[abi:ne180100]<0>(v138, "transpose");
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v125.__r_.__value_.__l.__data_, (const void **)v128, (uint64_t)&v136);
            v80 = std::string::append(&v136, "__bwd");
            v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81;
            v80->__r_.__value_.__l.__size_ = 0;
            v80->__r_.__value_.__r.__words[2] = 0;
            v80->__r_.__value_.__r.__words[0] = 0;
            v82 = &v117[v75];
            if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v134, v82->__r_.__value_.__l.__data_, v82->__r_.__value_.__l.__size_);
            }
            else
            {
              v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
              v134.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v83;
            }
            p_p = 0;
            v105 = 0;
            v106 = 0;
            p_p_p = (std::string *)&p_p;
            LOBYTE(v102) = 0;
            p_p = (std::string *)operator new(0x18uLL);
            v105 = p_p;
            v106 = p_p + 1;
            v105 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v106, (__int128 *)&v134, (__int128 *)&v135, p_p);
            v84 = &v121[3 * v75];
            if (*((char *)v84 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v132, (const std::string::value_type *)*v84, (std::string::size_type)v84[1]);
            }
            else
            {
              v85 = *(_OWORD *)v84;
              v132.__r_.__value_.__r.__words[2] = (std::string::size_type)v84[2];
              *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v85;
            }
            p_p_p = 0;
            v102 = 0;
            p_data = 0;
            p_p_p_p = (void ***)&p_p_p;
            v131 = 0;
            p_p_p = (std::string *)operator new(0x18uLL);
            v102 = p_p_p;
            p_data = (void **)&p_p_p[1].__r_.__value_.__l.__data_;
            v102 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v132, (__int128 *)&v133, p_p_p);
            Espresso::single_match_state<Espresso::generic_split_nd_kernel>::add_kernel(v76, v99, (const std::string *)v138, &__p, &p_p, &p_p_p);
            p_p_p_p = (void ***)&p_p_p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p_p);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            p_p_p = (std::string *)&p_p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v136.__r_.__value_.__l.__data_);
            if ((v138[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v138);
              if (v77)
              {
LABEL_105:
                v86 = (unint64_t *)&v77->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
            }
            else if (v77)
            {
              goto LABEL_105;
            }
            ++v75;
          }
          while (v75 < 0xAAAAAAAAAAAAAAABLL * (((char *)v118 - (char *)v117) >> 3));
        }
        *(_QWORD *)v138 = &v109;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
        v88 = (std::__shared_weak_count *)v112;
        if (v112)
        {
          v89 = (unint64_t *)(v112 + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        v91 = (std::__shared_weak_count *)v114;
        if (v114)
        {
          v92 = (unint64_t *)(v114 + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v94 = v116;
        if (v116)
        {
          v95 = (unint64_t *)&v116->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
      }
    }
    *(_QWORD *)v138 = &v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
    *(_QWORD *)v138 = &v121;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    if (v127 < 0)
      operator delete(v126[0]);
    if ((char)v129 < 0)
      operator delete(v128[0]);
  }
}

void sub_1915B2F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  uint64_t v72;

  a13 = (uint64_t)&a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v72 - 217) < 0)
    operator delete(*(void **)(v72 - 240));
  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v72 - 185) < 0)
    operator delete(*(void **)(v72 - 208));
  if (*(char *)(v72 - 153) < 0)
    operator delete(*(void **)(v72 - 176));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  *(_QWORD *)(v72 - 176) = &a28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 176));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  *(_QWORD *)(v72 - 176) = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 176));
  if (a45 < 0)
    operator delete(a40);
  *(_QWORD *)(v72 - 176) = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 176));
  if (a54 < 0)
    operator delete(a49);
  if (a61 < 0)
    operator delete(a56);
  if (a68 < 0)
    operator delete(a63);
  if (a72 < 0)
    operator delete(a69);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c90_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_23generic_split_nd_kernelEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

_QWORD *__destroy_helper_block_ea8_48c90_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_23generic_split_nd_kernelEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void Espresso::single_match_state<Espresso::generic_split_nd_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915B3624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB17C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB17C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  std::string *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  std::string v33;
  std::string *v34;

  v4 = **(_QWORD **)(a1 + 8) + 56;
  *(_QWORD *)&v27 = a2[14];
  v5 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, v27, &v27)[3];
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v33.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(uint64_t **)(a1 + 8);
  v8 = *v7;
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*v7 + 192), &v33))
  {
    v25 = 0;
    goto LABEL_29;
  }
  v34 = &v33;
  v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 184), &v33, (__int128 **)&v34);
  v10 = *(_OWORD *)(v9 + 72);
  v27 = *(_OWORD *)(v9 + 56);
  v28 = v10;
  v11 = (const void *)*((_QWORD *)v9 + 12);
  v29 = *((_QWORD *)v9 + 11);
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v11, *((_QWORD *)v9 + 13), (uint64_t)(*((_QWORD *)v9 + 13) - (_QWORD)v11) >> 2);
  v12 = **(_QWORD **)(a1 + 8) + 96;
  v13 = a2[14];
  v34 = (std::string *)v13;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v13, &v34);
  v15 = (std::string *)v14[3];
  v16 = (std::string *)v14[4];
  if (v15 == v16)
    goto LABEL_25;
  v17 = 1;
  do
  {
    v18 = **(_QWORD **)(a1 + 8);
    v19 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v18 + 352, v15);
    if ((_QWORD *)(v18 + 360) == v19)
    {
      v20 = 31;
    }
    else if (((*((_DWORD *)v19 + 16) - 2) & 0xFFFFFFFD) != 0)
    {
      v20 = 31;
    }
    else
    {
      v20 = 63;
    }
    v34 = v15;
    v17 &= (*((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v18 + 184), v15++, (__int128 **)&v34)+ 14) & v20) == 0;
  }
  while (v15 != v16);
  if ((v17 & 1) != 0)
    goto LABEL_25;
  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) != -1)
  {
    v21 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2);
    v22 = DWORD1(v28);
    if ((_DWORD)v28 == 1)
      v23 = 4;
    else
      v23 = 5;
    if (DWORD1(v28) == -1)
      v22 = v23;
    if (v21 != v22 - 1)
      goto LABEL_25;
  }
  if (*(int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) + 4) < 1)
  {
LABEL_25:
    v25 = 0;
    goto LABEL_26;
  }
  v24 = DWORD1(v28);
  if (DWORD1(v28) == -1)
  {
    if ((_DWORD)v28 == 1)
      v24 = 4;
    else
      v24 = 5;
    goto LABEL_35;
  }
  if (SDWORD1(v28) > 1)
  {
LABEL_35:
    *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) = v24 - 2;
    goto LABEL_36;
  }
  *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) = 0;
LABEL_36:
  v25 = 1;
LABEL_26:
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
LABEL_29:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  return v25;
}

void sub_1915B395C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine7context50workaround_split_restrictions_on_w_using_transposeEPNS_3netEPS1_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::target_type()
{
}

void ___Z31surround_kernel_with_transposesIN8Espresso17ANECompilerEngine20inner_product_kernelELi4EEvPNS0_3netEPNS1_7contextENS0_18transpose_params_tES7_NSt3__18functionIFbRNS0_18single_match_stateIT_EEEEE_block_invoke(_QWORD *a1, int64x2_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *i;
  std::string *v12;
  void **v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  char *v31;
  __int128 v32;
  const void *v33;
  __int128 *v34;
  uint64_t **v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t **v39;
  int v40;
  uint64_t **v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t **v45;
  char *v46;
  __int128 v47;
  const void *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 *v53;
  uint64_t **v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::string *v64;
  __int128 v65;
  const Espresso::base_kernel *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64x2_t *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  const void **v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94[2];
  uint64_t v95[2];
  std::string *p_p_p;
  std::string *v97;
  void **p_data;
  std::string *p_p;
  std::string *v100;
  std::string *v101;
  uint64_t v102[2];
  std::string __p;
  std::string *v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::string *v112;
  std::string *v113;
  uint64_t v114;
  std::string v115;
  const void **v116;
  uint64_t v117;
  uint64_t v118;
  std::string v119;
  std::string v120;
  void *v121[2];
  char v122;
  void *v123[2];
  unsigned __int8 v124;
  void ***p_p_p_p;
  char v126;
  std::string v127;
  uint64_t v128;
  std::string v129;
  uint64_t v130;
  std::string v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  __int128 v139;

  *(_QWORD *)&v139 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2->i64[0] + 8) == a1[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v123, "__@transpose_transform");
    std::string::basic_string[abi:ne180100]<0>(v121, "__@transpose_transform_bottom");
    v4 = a1[5];
    v5 = a2[3].i32[2];
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16 * v5);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
      v4 = a1[5];
      v5 = a2[3].i32[2];
    }
    else
    {
      v120 = *(std::string *)(v6 + 16);
    }
    *(_QWORD *)&v133 = v5;
    v7 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4 + 56, v5, &v133)[3];
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v119.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v8;
    }
    v9 = a1[5] + 96;
    *(_QWORD *)&v133 = a2[3].i32[2];
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v133, &v133);
    v116 = 0;
    v117 = 0;
    v118 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v116, v10[3], v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v116, (const void **)v121, (uint64_t)&v115);
    v112 = 0;
    v113 = 0;
    v114 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v112, (uint64_t)v116, v117, 0xAAAAAAAAAAAAAAABLL * ((v117 - (uint64_t)v116) >> 3));
    v12 = v112;
    for (i = v113; v12 != i; ++v12)
    {
      if ((v124 & 0x80u) == 0)
        v13 = v123;
      else
        v13 = (void **)v123[0];
      if ((v124 & 0x80u) == 0)
        v14 = v124;
      else
        v14 = (std::string::size_type)v123[1];
      std::string::append(v12, (const std::string::value_type *)v13, v14);
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a1[5] + 192), &v119))
    {
      v15 = a1[9];
      if (!v15)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(uint64_t, int64x2_t *))(*(_QWORD *)v15 + 48))(v15, a2))
      {
        v16 = a1[5];
        v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v16 + 192), &v115);
        v18 = *(std::__shared_weak_count **)(v16 + 24);
        v110 = *(_QWORD *)(v16 + 16);
        v111 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        Espresso::abstract_engine_factory::shared(&v104);
        v21 = (__int128 *)v104;
        std::string::basic_string[abi:ne180100]<0>(&v133, "transpose");
        LODWORD(__p.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v110 + 8))(*(_QWORD *)(v110 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v21, (uint64_t)&v110, (uint64_t)&v133, (uint64_t)(a1 + 10), (int *)&__p);
        if (SBYTE7(v134) < 0)
          operator delete((void *)v133);
        v22 = v105;
        if (v105)
        {
          v23 = (unint64_t *)&v105->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        Espresso::abstract_engine_factory::shared(&v104);
        v25 = (__int128 *)v104;
        std::string::basic_string[abi:ne180100]<0>(&v133, "transpose");
        LODWORD(__p.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v110 + 8))(*(_QWORD *)(v110 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v25, (uint64_t)&v110, (uint64_t)&v133, (uint64_t)a1 + 100, (int *)&__p);
        if (SBYTE7(v134) < 0)
          operator delete((void *)v133);
        v26 = v105;
        if (v105)
        {
          v27 = (unint64_t *)&v105->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v108;
        v30 = (uint64_t **)(a1[5] + 184);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
        v31 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, &v119, (__int128 **)&v131);
        v32 = *(_OWORD *)(v31 + 72);
        v133 = *(_OWORD *)(v31 + 56);
        v134 = v32;
        v33 = (const void *)*((_QWORD *)v31 + 12);
        v135 = *((_QWORD *)v31 + 11);
        v136 = 0;
        v137 = 0;
        v138 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v136, v33, *((_QWORD *)v31 + 13), (uint64_t)(*((_QWORD *)v31 + 13) - (_QWORD)v33) >> 2);
        memset(&__p, 0, sizeof(__p));
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v131.__r_.__value_.__s.__data_[8] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 64;
        __p.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&__p.__r_.__value_.__r.__words[2], &v133, &v139, (uint64_t)__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v29 + 64))(&v104, v29, &__p);
        v34 = (__int128 *)v104;
        v35 = (uint64_t **)(a1[5] + 184);
        p_p = &v115;
        v36 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, &v115, (__int128 **)&p_p);
        v37 = *v34;
        v38 = v34[1];
        *((_QWORD *)v36 + 11) = *((_QWORD *)v34 + 4);
        *(_OWORD *)(v36 + 72) = v38;
        *(_OWORD *)(v36 + 56) = v37;
        if (v36 + 56 != (char *)v34)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 96, *((char **)v34 + 5), *((_QWORD *)v34 + 6), (uint64_t)(*((_QWORD *)v34 + 6) - *((_QWORD *)v34 + 5)) >> 2);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
        if (v136)
        {
          v137 = v136;
          operator delete(v136);
        }
        v39 = (uint64_t **)(a1[5] + 184);
        v104 = &v115;
        v40 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, &v115, (__int128 **)&v104)+ 19);
        v41 = (uint64_t **)(a1[5] + 184);
        v104 = &v115;
        v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, &v115, (__int128 **)&v104);
        if (v40 <= 4)
          v43 = 4;
        else
          v43 = v40;
        *((_DWORD *)v42 + 19) = v43;
        v44 = a2->i64[0];
        v45 = (uint64_t **)(a1[5] + 184);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        v46 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, &v115, (__int128 **)&v131);
        v47 = *(_OWORD *)(v46 + 72);
        v133 = *(_OWORD *)(v46 + 56);
        v134 = v47;
        v48 = (const void *)*((_QWORD *)v46 + 12);
        v135 = *((_QWORD *)v46 + 11);
        v136 = 0;
        v137 = 0;
        v138 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v136, v48, *((_QWORD *)v46 + 13), (uint64_t)(*((_QWORD *)v46 + 13) - (_QWORD)v48) >> 2);
        memset(&__p, 0, sizeof(__p));
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v131.__r_.__value_.__s.__data_[8] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 64;
        __p.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&__p.__r_.__value_.__r.__words[2], &v133, &v139, (uint64_t)__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v44 + 64))(&v104, v44, &__p);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
        if (v136)
        {
          v137 = v136;
          operator delete(v136);
        }
        v49 = v112;
        if (v113 != v112)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          do
          {
            v53 = (__int128 *)v104;
            v54 = (uint64_t **)(a1[5] + 184);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49[v50];
            v55 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, v49[v50].__r_.__value_.__r.__words, (__int128 **)&__p);
            v56 = v53[v51];
            v57 = v53[v51 + 1];
            *((_QWORD *)v55 + 11) = *(_QWORD *)&v53[v51 + 2];
            *(_OWORD *)(v55 + 72) = v57;
            *(_OWORD *)(v55 + 56) = v56;
            if (&v53[v51] != (__int128 *)(v55 + 56))
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v55 + 96, *((char **)&v53[v51 + 2] + 1), *(_QWORD *)&v53[v51 + 3], (uint64_t)(*(_QWORD *)&v53[v51 + 3] - *((_QWORD *)&v53[v51 + 2] + 1)) >> 2);
            ++v52;
            v49 = v112;
            v51 += 4;
            ++v50;
          }
          while (v52 < 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)v112) >> 3));
        }
        Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::remove_layer(a2);
        if (!v17)
        {
          v61 = (std::__shared_weak_count *)v109;
          v102[0] = v108;
          v102[1] = v109;
          if (v109)
          {
            v62 = (unint64_t *)(v109 + 8);
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          std::string::basic_string[abi:ne180100]<0>(&v133, "transpose");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v120.__r_.__value_.__l.__data_, (const void **)v121, (uint64_t)&v131);
          v64 = std::string::append(&v131, "__fwd");
          v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v129, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
          else
            v129 = v119;
          p_p = 0;
          v100 = 0;
          v101 = 0;
          p_p_p = (std::string *)&p_p;
          LOBYTE(v97) = 0;
          p_p = (std::string *)operator new(0x18uLL);
          v100 = p_p;
          v101 = p_p + 1;
          v100 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v101, (__int128 *)&v129, (__int128 *)&v130, p_p);
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v127, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
          else
            v127 = v115;
          p_p_p = 0;
          v97 = 0;
          p_data = 0;
          p_p_p_p = (void ***)&p_p_p;
          v126 = 0;
          p_p_p = (std::string *)operator new(0x18uLL);
          v97 = p_p_p;
          p_data = (void **)&p_p_p[1].__r_.__value_.__l.__data_;
          v97 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v127, (__int128 *)&v128, p_p_p);
          Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v102, (const std::string *)&v133, &__p, &p_p, &p_p_p);
          p_p_p_p = (void ***)&p_p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p_p);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          p_p_p = (std::string *)&p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v129.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v131.__r_.__value_.__l.__data_);
          if (SBYTE7(v134) < 0)
            operator delete((void *)v133);
          if (v61)
          {
            v92 = (unint64_t *)&v61->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
        }
        v58 = (std::__shared_weak_count *)a2->i64[1];
        v95[0] = a2->i64[0];
        v95[1] = (uint64_t)v58;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        std::string::basic_string[abi:ne180100]<0>(&v133, "inner_product");
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v131, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
        else
          v131 = v115;
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        LOBYTE(v100) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (__int128 *)&v131, (__int128 *)&v132, (std::string *)__p.__r_.__value_.__l.__data_);
        Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v95, (const std::string *)&v133, &v120, (std::string **)&__p, &v112);
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        if (SBYTE7(v134) < 0)
          operator delete((void *)v133);
        if (v58)
        {
          v67 = (unint64_t *)&v58->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        if (Espresso::is_kernel_generating_output(*(Espresso **)(a2[1].i64[0] + 64), v66))
        {
          v69 = *(_QWORD *)(a2[1].i64[0] + 64);
          std::string::basic_string[abi:ne180100]<0>(&v133, "is_output");
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((_QWORD *)(v69 + 240), (unsigned __int8 *)&v133);
          if (SBYTE7(v134) < 0)
            operator delete((void *)v133);
        }
        if (v113 != v112)
        {
          v70 = 0;
          v71 = a2;
          do
          {
            v72 = (std::__shared_weak_count *)v107;
            v94[0] = v106;
            v94[1] = v107;
            if (v107)
            {
              v73 = (unint64_t *)(v107 + 8);
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
            }
            std::string::basic_string[abi:ne180100]<0>(&v133, "transpose");
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v120.__r_.__value_.__l.__data_, (const void **)v123, (uint64_t)&v131);
            v75 = std::string::append(&v131, "__bwd");
            v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            v77 = &v112[v70];
            if (SHIBYTE(v77->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v129, v77->__r_.__value_.__l.__data_, v77->__r_.__value_.__l.__size_);
            }
            else
            {
              v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
              v129.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v78;
            }
            p_p = 0;
            v100 = 0;
            v101 = 0;
            p_p_p = (std::string *)&p_p;
            LOBYTE(v97) = 0;
            p_p = (std::string *)operator new(0x18uLL);
            v100 = p_p;
            v101 = p_p + 1;
            v100 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v101, (__int128 *)&v129, (__int128 *)&v130, p_p);
            v79 = &v116[3 * v70];
            if (*((char *)v79 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v127, (const std::string::value_type *)*v79, (std::string::size_type)v79[1]);
            }
            else
            {
              v80 = *(_OWORD *)v79;
              v127.__r_.__value_.__r.__words[2] = (std::string::size_type)v79[2];
              *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v80;
            }
            p_p_p = 0;
            v97 = 0;
            p_data = 0;
            p_p_p_p = (void ***)&p_p_p;
            v126 = 0;
            p_p_p = (std::string *)operator new(0x18uLL);
            v97 = p_p_p;
            p_data = (void **)&p_p_p[1].__r_.__value_.__l.__data_;
            v97 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v127, (__int128 *)&v128, p_p_p);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(v71, v94, (const std::string *)&v133, &__p, &p_p, &p_p_p);
            p_p_p_p = (void ***)&p_p_p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p_p);
            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v127.__r_.__value_.__l.__data_);
            p_p_p = (std::string *)&p_p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
            if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v129.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v131.__r_.__value_.__l.__data_);
            if (SBYTE7(v134) < 0)
            {
              operator delete((void *)v133);
              if (v72)
              {
LABEL_97:
                v81 = (unint64_t *)&v72->__shared_owners_;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
            }
            else if (v72)
            {
              goto LABEL_97;
            }
            ++v70;
          }
          while (v70 < 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)v112) >> 3));
        }
        *(_QWORD *)&v133 = &v104;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
        v83 = (std::__shared_weak_count *)v107;
        if (v107)
        {
          v84 = (unint64_t *)(v107 + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v86 = (std::__shared_weak_count *)v109;
        if (v109)
        {
          v87 = (unint64_t *)(v109 + 8);
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = v111;
        if (v111)
        {
          v90 = (unint64_t *)&v111->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
      }
    }
    *(_QWORD *)&v133 = &v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    *(_QWORD *)&v133 = &v116;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
    if (v122 < 0)
      operator delete(v121[0]);
    if ((char)v124 < 0)
      operator delete(v123[0]);
  }
}

void sub_1915B477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  uint64_t v72;

  a13 = (uint64_t)&a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v72 - 201) < 0)
    operator delete(*(void **)(v72 - 224));
  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v72 - 169) < 0)
    operator delete(*(void **)(v72 - 192));
  if (*(char *)(v72 - 137) < 0)
    operator delete(*(void **)(v72 - 160));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  *(_QWORD *)(v72 - 160) = &a28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 160));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  *(_QWORD *)(v72 - 160) = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 160));
  if (a45 < 0)
    operator delete(a40);
  *(_QWORD *)(v72 - 160) = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 160));
  if (a54 < 0)
    operator delete(a49);
  if (a61 < 0)
    operator delete(a56);
  if (a68 < 0)
    operator delete(a63);
  if (a72 < 0)
    operator delete(a69);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c106_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_17ANECompilerEngine20inner_product_kernelEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

_QWORD *__destroy_helper_block_ea8_48c106_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_17ANECompilerEngine20inner_product_kernelEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1915B4C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915B4EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1768;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  const void *v11;
  uint64_t v12;
  _WORD *v13;
  _QWORD *v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  std::string v22;
  std::string *v23;

  v4 = **(_QWORD **)(a1 + 8) + 56;
  *(_QWORD *)&v16 = a2[14];
  v5 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, v16, &v16)[3];
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v22.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(uint64_t **)(a1 + 8);
  v8 = *v7;
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*v7 + 192), &v22))
  {
    v12 = 0;
    goto LABEL_21;
  }
  v23 = &v22;
  v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 184), &v22, (__int128 **)&v23);
  v10 = *(_OWORD *)(v9 + 72);
  v16 = *(_OWORD *)(v9 + 56);
  v17 = v10;
  v11 = (const void *)*((_QWORD *)v9 + 12);
  v18 = *((_QWORD *)v9 + 11);
  __p = 0;
  v20 = 0;
  v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v11, *((_QWORD *)v9 + 13), (uint64_t)(*((_QWORD *)v9 + 13) - (_QWORD)v11) >> 2);
  v12 = 0;
  if (DWORD1(v17) != -1 && SDWORD1(v17) <= 3)
  {
    v13 = *(_WORD **)a2;
    v14 = *(_QWORD **)(*(_QWORD *)a2 + 440);
    if (!v14 || !*v14 || !v14[4] && !v14[6] && !v14[8] && !v14[10])
    {
      if (DWORD2(v16) * DWORD1(v16) < 2
        || *(_DWORD *)((*(uint64_t (**)(_WORD *))(*(_QWORD *)v13 + 384))(v13) + 32))
      {
        v12 = 0;
        goto LABEL_19;
      }
      v13 = *(_WORD **)a2;
    }
    v13[420] = 256;
    v12 = 1;
  }
LABEL_19:
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
LABEL_21:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1915B511C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine7context40batch_inner_product_to_conv_like_mappingEPNS_3netEPS1_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::target_type()
{
}

void Espresso::single_match_state<Espresso::generic_crop_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915B53FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void sub_1915B57D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  uint64_t v53;

  if (a40 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a46 < 0)
    operator delete(a41);
  if (a52)
    operator delete(a52);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 120);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1915B5974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

void transform_reflective_padding_lr(int64x2_t *a1, _QWORD *a2, uint64_t a3, __int16 a4, uint64_t a5, const std::string *a6)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  size_t v20;
  std::string *p_s;
  const std::string::value_type *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  size_t v54;
  std::string *p_lpsrc;
  std::string *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  size_t v61;
  std::string *v62;
  std::string *v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::string *v73;
  int v74;
  size_t v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  uint64_t v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  size_t v88;
  std::string *v89;
  std::string *v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  size_t v97;
  std::string *v98;
  std::string *v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  std::string::size_type v105;
  int v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t i;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  void *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  size_t v120;
  std::string *v121;
  std::string *v122;
  std::string *v123;
  std::string::size_type v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  __int128 v128;
  size_t v129;
  std::string *v130;
  const void *v131;
  std::string *v132;
  std::string::size_type v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  __int128 v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t j;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v170;
  int v171;
  uint64_t v172;
  const void **v173;
  std::string::value_type *v174;
  std::string::value_type *v175;
  int v176;
  uint64_t v178;
  std::__shared_weak_count *v179;
  std::string v180;
  std::string v181;
  uint64_t v182;
  std::string::size_type v183;
  std::string v184;
  uint64_t v185[2];
  _DWORD v186[2];
  std::string v187;
  std::string v188;
  uint64_t v189;
  std::string::size_type v190;
  std::string lpsrc;
  char v192;
  int v193;
  int v194;
  std::string v195;
  uint64_t v196[2];
  _DWORD v197[2];
  std::string v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  std::string::size_type v204;
  std::string __p;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  __int16 v215;
  __int16 v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  __int16 v229;
  int v230;
  char v231;
  std::string v232;
  uint64_t v233[2];
  std::string __s;
  uint64_t v235;
  std::string::size_type size;
  _OWORD v237[5];
  int v238;
  int v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  std::string *v244;
  char v245;
  std::string v246;
  std::string v247;
  std::string v248;
  uint64_t v249;
  std::string v250;
  __int128 v251;
  _QWORD v252[3];
  std::string v253;
  uint64_t v254;
  std::string v255;
  uint64_t v256;
  std::string v257;
  __int128 v258;

  *(_QWORD *)&v258 = *MEMORY[0x1E0C80C00];
  v172 = a4;
  if ((int)v172 < 1)
    return;
  Espresso::abstract_engine_factory::shared(&v242);
  v10 = a2[2];
  v11 = (std::__shared_weak_count *)a2[3];
  v240 = v10;
  v241 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v239 = (***(uint64_t (****)(_QWORD))(v10 + 8))(*(_QWORD *)(v10 + 8));
  v238 = *(_DWORD *)(*(_QWORD *)(a2[4] + 16 * a1[3].i32[2]) + 12);
  v171 = *(_DWORD *)(a3 + 8);
  memset(v237, 0, 76);
  WORD4(v237[0]) = a4;
  WORD5(v237[0]) = a4;
  v14 = v242;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)&v240, (uint64_t)&__p, (uint64_t)v237, &v239);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    v235 = (uint64_t)v15;
    size = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    size = 0;
    v235 = 0;
  }
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)lpsrc.__r_.__value_.__l.__size_ + 16))(lpsrc.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a5 + 23) >= 0)
    v20 = *(unsigned __int8 *)(a5 + 23);
  else
    v20 = *(_QWORD *)(a5 + 8);
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v20 + 12);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_s = &__s;
  else
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  if (v20)
  {
    if (*(char *)(a5 + 23) >= 0)
      v22 = (const std::string::value_type *)a5;
    else
      v22 = *(const std::string::value_type **)a5;
    memmove(p_s, v22, v20);
  }
  strcpy((char *)p_s + v20, "_zero_pad_lr");
  v23 = (std::__shared_weak_count *)size;
  v233[0] = v235;
  v233[1] = size;
  if (size)
  {
    v24 = (unint64_t *)(size + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v250 = *(std::string *)a5;
  memset(&lpsrc, 0, sizeof(lpsrc));
  v246.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  v246.__r_.__value_.__s.__data_[8] = 0;
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  lpsrc.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__r.__words[0];
  lpsrc.__r_.__value_.__r.__words[2] = lpsrc.__r_.__value_.__r.__words[0] + 24;
  lpsrc.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&lpsrc.__r_.__value_.__r.__words[2], (__int128 *)&v250, &v251, (std::string *)lpsrc.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v257 = __s;
  memset(&v246, 0, sizeof(v246));
  v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v246;
  v232.__r_.__value_.__s.__data_[8] = 0;
  v246.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v246.__r_.__value_.__l.__size_ = v246.__r_.__value_.__r.__words[0];
  v246.__r_.__value_.__r.__words[2] = v246.__r_.__value_.__r.__words[0] + 24;
  v246.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v246.__r_.__value_.__r.__words[2], (__int128 *)&v257, &v258, (std::string *)v246.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, v233, &__p, &__s, (std::string **)&lpsrc, (std::string **)&v246);
  v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v246;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v246.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v246);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v257 = *(std::string *)a5;
  v170 = (uint64_t)a2;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v232, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v232 = __s;
  v28 = 4;
  v29 = 20;
  __asm { FMOV            V10.2S, #1.0 }
  v35 = 1;
  v173 = (const void **)a5;
  do
  {
    v213 = _D10;
    v218 = 0x1000100010001;
    v230 = 0;
    v231 = 0;
    v226 = 0;
    v227 = 0;
    memset(&__p, 0, sizeof(__p));
    v219 = 0;
    v220 = 0;
    v221 = 0;
    v224 = 0;
    v206 = 0;
    v225 = 0x10000;
    v228 = 0;
    v229 = 1;
    v212 = -1;
    v210 = (4 * v35) | 1;
    v211 = 1;
    v209 = v171;
    v208 = v171;
    v223 = 1;
    v222 = v171;
    v207 = 0;
    v214 = 0;
    v215 = 2 * v35;
    v216 = 2 * v35;
    v217 = 0;
    v36 = v242;
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "convolution");
    Espresso::abstract_engine_factory::make_kernel_priv(v36, (uint64_t)&v240, (uint64_t)&lpsrc, (uint64_t)&__p, &v239);
    if (v250.__r_.__value_.__r.__words[0]
    {
      v203 = (uint64_t)v37;
      v204 = v250.__r_.__value_.__l.__size_;
      if (!v250.__r_.__value_.__l.__size_)
        goto LABEL_69;
      v38 = (unint64_t *)(v250.__r_.__value_.__l.__size_ + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    else
    {
      v204 = 0;
      v203 = 0;
    }
    v40 = (std::__shared_weak_count *)v250.__r_.__value_.__l.__size_;
    if (v250.__r_.__value_.__l.__size_)
    {
      v41 = (unint64_t *)(v250.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
LABEL_69:
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    v43 = v203;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v203 + 472))(&v201, v203);
    v44 = 0;
    v45 = *(int *)(v201 + 8);
    do
    {
      v45 *= *(int *)(v201 + 12 + v44);
      v44 += 4;
    }
    while (v44 != 12);
    bzero(*(void **)(v201 + 24), 4 * v45);
    v46 = v208;
    v47 = v201;
    if (v208 >= 1)
    {
      v48 = *(_DWORD **)(v201 + 24);
      do
      {
        *v48 = 1065353216;
        v48[v28] = 1065353216;
        v48 = (_DWORD *)((char *)v48 + v29);
        --v46;
      }
      while (v46);
    }
    v199 = v47;
    v200 = v202;
    if (v202)
    {
      v49 = (unint64_t *)&v202->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v43 + 400))(v43, &v199);
    v51 = v200;
    if (v200)
    {
      v52 = (unint64_t *)&v200->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v54 = v232.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v54 + 14);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_lpsrc = &lpsrc;
    else
      p_lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    if (v54)
    {
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v232;
      else
        v56 = (std::string *)v232.__r_.__value_.__r.__words[0];
      memmove(p_lpsrc, v56, v54);
    }
    strcpy((char *)p_lpsrc + v54, "_refl_conv_lr_");
    std::to_string(&v250, v35);
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = &v250;
    else
      v57 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    else
      v58 = v250.__r_.__value_.__l.__size_;
    v59 = std::string::append(&lpsrc, (const std::string::value_type *)v57, v58);
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v198.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v61 = v232.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v61 + 1);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = &lpsrc;
    else
      v62 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    if (v61)
    {
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v232;
      else
        v63 = (std::string *)v232.__r_.__value_.__r.__words[0];
      memmove(v62, v63, v61);
    }
    *(_WORD *)((char *)&v62->__r_.__value_.__l.__data_ + v61) = 95;
    std::to_string(&v250, v35);
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v250;
    else
      v64 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    else
      v65 = v250.__r_.__value_.__l.__size_;
    v66 = std::string::append(&lpsrc, (const std::string::value_type *)v64, v65);
    v67 = v66->__r_.__value_.__l.__size_;
    v175 = (std::string::value_type *)v66->__r_.__value_.__r.__words[0];
    v197[0] = v66->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v197 + 3) = *(_DWORD *)((char *)&v66->__r_.__value_.__r.__words[2] + 3);
    v176 = SHIBYTE(v66->__r_.__value_.__r.__words[2]);
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    v68 = (std::__shared_weak_count *)v204;
    v196[0] = v203;
    v196[1] = v204;
    if (v204)
    {
      v69 = (unint64_t *)(v204 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "convolution");
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v246, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
    else
      v246 = v232;
    memset(&v250, 0, sizeof(v250));
    v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
    v195.__r_.__value_.__s.__data_[8] = 0;
    v250.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v250.__r_.__value_.__l.__size_ = v250.__r_.__value_.__r.__words[0];
    v250.__r_.__value_.__r.__words[2] = v250.__r_.__value_.__r.__words[0] + 24;
    v250.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v250.__r_.__value_.__r.__words[2], (__int128 *)&v246, (__int128 *)&v247, (std::string *)v250.__r_.__value_.__l.__data_);
    if (v176 < 0)
    {
      std::string::__init_copy_ctor_external(&v255, v175, v67);
    }
    else
    {
      v255.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
      v255.__r_.__value_.__l.__size_ = v67;
      LODWORD(v255.__r_.__value_.__r.__words[2]) = v197[0];
      *(_DWORD *)((char *)&v255.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v197 + 3);
      *((_BYTE *)&v255.__r_.__value_.__s + 23) = v176;
    }
    memset(&v195, 0, sizeof(v195));
    v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    v188.__r_.__value_.__s.__data_[8] = 0;
    v195.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v195.__r_.__value_.__l.__size_ = v195.__r_.__value_.__r.__words[0];
    v195.__r_.__value_.__r.__words[2] = v195.__r_.__value_.__r.__words[0] + 24;
    v195.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v195.__r_.__value_.__r.__words[2], (__int128 *)&v255, (__int128 *)&v256, (std::string *)v195.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, v196, &lpsrc, &v198, (std::string **)&v250, (std::string **)&v195);
    v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v255.__r_.__value_.__l.__data_);
    v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
      if (!v68)
        goto LABEL_147;
    }
    else if (!v68)
    {
      goto LABEL_147;
    }
    v71 = (unint64_t *)&v68->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
LABEL_147:
    std::operator+<char>();
    v73 = std::string::append(&lpsrc, "__");
    v195 = *v73;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    v74 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
    else
      v75 = v195.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v75 + 37);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &lpsrc;
    else
      v76 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    if (v75)
    {
      if (v74 >= 0)
        v77 = &v195;
      else
        v77 = (std::string *)v195.__r_.__value_.__r.__words[0];
      memmove(v76, v77, v75);
    }
    strcpy((char *)v76 + v75, "final_broadcasted_mask_for_pad_index_");
    std::to_string(&v250, v35);
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &v250;
    else
      v78 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    else
      v79 = v250.__r_.__value_.__l.__size_;
    v80 = std::string::append(&lpsrc, (const std::string::value_type *)v78, v79);
    v255 = *v80;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    generate_refl_pad_lr_mask(a1, v170, v171, v172, v35, (uint64_t)&v257, (uint64_t)&v255, (const void **)&v195.__r_.__value_.__l.__data_);
    lpsrc.__r_.__value_.__r.__words[2] = 897988541;
    v192 = 0;
    v194 = 0;
    v193 = 0;
    lpsrc.__r_.__value_.__r.__words[0] = 1;
    lpsrc.__r_.__value_.__l.__size_ = 1065353216;
    v81 = v242;
    std::string::basic_string[abi:ne180100]<0>(&v250, "elementwise");
    Espresso::abstract_engine_factory::make_kernel_priv(v81, (uint64_t)&v240, (uint64_t)&v250, (uint64_t)&lpsrc, &v239);
    if (v246.__r_.__value_.__r.__words[0]
    {
      v189 = (uint64_t)v82;
      v190 = v246.__r_.__value_.__l.__size_;
      if (!v246.__r_.__value_.__l.__size_)
        goto LABEL_182;
      v83 = (unint64_t *)(v246.__r_.__value_.__l.__size_ + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    else
    {
      v189 = 0;
      v190 = 0;
    }
    v85 = (std::__shared_weak_count *)v246.__r_.__value_.__l.__size_;
    if (v246.__r_.__value_.__l.__size_)
    {
      v86 = (unint64_t *)(v246.__r_.__value_.__l.__size_ + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
LABEL_182:
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v88 = v232.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v246, v88 + 1);
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v89 = &v246;
    else
      v89 = (std::string *)v246.__r_.__value_.__r.__words[0];
    if (v88)
    {
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = &v232;
      else
        v90 = (std::string *)v232.__r_.__value_.__r.__words[0];
      memmove(v89, v90, v88);
    }
    *(_WORD *)((char *)&v89->__r_.__value_.__l.__data_ + v88) = 95;
    std::to_string(&v187, v35);
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v91 = &v187;
    else
      v91 = (std::string *)v187.__r_.__value_.__r.__words[0];
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v92 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
    else
      v92 = v187.__r_.__value_.__l.__size_;
    v93 = std::string::append(&v246, (const std::string::value_type *)v91, v92);
    v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v250.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    v95 = std::string::append(&v250, "_multiply_mask");
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v188.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v97 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v97 = v232.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v246, v97 + 1);
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = &v246;
    else
      v98 = (std::string *)v246.__r_.__value_.__r.__words[0];
    if (v97)
    {
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = &v232;
      else
        v99 = (std::string *)v232.__r_.__value_.__r.__words[0];
      memmove(v98, v99, v97);
    }
    *(_WORD *)((char *)&v98->__r_.__value_.__l.__data_ + v97) = 95;
    std::to_string(&v187, v35);
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v100 = &v187;
    else
      v100 = (std::string *)v187.__r_.__value_.__r.__words[0];
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v101 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
    else
      v101 = v187.__r_.__value_.__l.__size_;
    v102 = std::string::append(&v246, (const std::string::value_type *)v100, v101);
    v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    v250.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    v104 = std::string::append(&v250, "_masked");
    v105 = v104->__r_.__value_.__l.__size_;
    v174 = (std::string::value_type *)v104->__r_.__value_.__r.__words[0];
    v186[0] = v104->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v186 + 3) = *(_DWORD *)((char *)&v104->__r_.__value_.__r.__words[2] + 3);
    v106 = SHIBYTE(v104->__r_.__value_.__r.__words[2]);
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    v107 = (std::__shared_weak_count *)v190;
    v185[0] = v189;
    v185[1] = v190;
    if (v190)
    {
      v108 = (unint64_t *)(v190 + 8);
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
    }
    std::string::basic_string[abi:ne180100]<0>(&v246, "elementwise");
    if (v176 < 0)
    {
      std::string::__init_copy_ctor_external(&v250, v175, v67);
    }
    else
    {
      v250.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
      v250.__r_.__value_.__l.__size_ = v67;
      LODWORD(v250.__r_.__value_.__r.__words[2]) = v197[0];
      *(_DWORD *)((char *)&v250.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v197 + 3);
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = v176;
    }
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v251, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
    }
    else
    {
      v251 = *(_OWORD *)&v255.__r_.__value_.__l.__data_;
      v252[0] = *((_QWORD *)&v255.__r_.__value_.__l + 2);
    }
    memset(&v187, 0, sizeof(v187));
    v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
    v184.__r_.__value_.__s.__data_[8] = 0;
    v187.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v187.__r_.__value_.__l.__size_ = v187.__r_.__value_.__r.__words[0];
    v187.__r_.__value_.__r.__words[2] = v187.__r_.__value_.__r.__words[0] + 48;
    v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v187.__r_.__value_.__r.__words[2], (__int128 *)&v250, (__int128 *)&v252[1], (std::string *)v187.__r_.__value_.__l.__data_);
    if (v106 < 0)
    {
      std::string::__init_copy_ctor_external(&v253, v174, v105);
    }
    else
    {
      v253.__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
      v253.__r_.__value_.__l.__size_ = v105;
      LODWORD(v253.__r_.__value_.__r.__words[2]) = v186[0];
      *(_DWORD *)((char *)&v253.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v186 + 3);
      *((_BYTE *)&v253.__r_.__value_.__s + 23) = v106;
    }
    memset(&v184, 0, sizeof(v184));
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
    v181.__r_.__value_.__s.__data_[8] = 0;
    v184.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v184.__r_.__value_.__l.__size_ = v184.__r_.__value_.__r.__words[0];
    v184.__r_.__value_.__r.__words[2] = v184.__r_.__value_.__r.__words[0] + 24;
    v184.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v184.__r_.__value_.__r.__words[2], (__int128 *)&v253, (__int128 *)&v254, (std::string *)v184.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, v185, &v246, &v188, (std::string **)&v187, (std::string **)&v184);
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v253.__r_.__value_.__l.__data_);
    v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v252[i]) < 0)
        operator delete(*(void **)((char *)&v250 + i * 8 + 24));
    }
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v246.__r_.__value_.__l.__data_);
      if (!v107)
        goto LABEL_256;
    }
    else if (!v107)
    {
      goto LABEL_256;
    }
    v111 = (unint64_t *)&v107->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
LABEL_256:
    v250.__r_.__value_.__r.__words[2] = 897988541;
    LOBYTE(v251) = 0;
    *(_QWORD *)((char *)v252 + 4) = 0;
    v250.__r_.__value_.__l.__size_ = 1065353216;
    v250.__r_.__value_.__r.__words[0] = 0;
    v113 = v242;
    std::string::basic_string[abi:ne180100]<0>(&v246, "elementwise");
    Espresso::abstract_engine_factory::make_kernel_priv(v113, (uint64_t)&v240, (uint64_t)&v246, (uint64_t)&v250, &v239);
    if (v187.__r_.__value_.__r.__words[0]
    {
      v182 = (uint64_t)v114;
      v183 = v187.__r_.__value_.__l.__size_;
      if (!v187.__r_.__value_.__l.__size_)
        goto LABEL_268;
      v115 = (unint64_t *)(v187.__r_.__value_.__l.__size_ + 8);
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    else
    {
      v182 = 0;
      v183 = 0;
    }
    v117 = (std::__shared_weak_count *)v187.__r_.__value_.__l.__size_;
    if (v187.__r_.__value_.__l.__size_)
    {
      v118 = (unint64_t *)(v187.__r_.__value_.__l.__size_ + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
LABEL_268:
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v120 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v120 = v232.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v184, v120 + 1);
    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v121 = &v184;
    else
      v121 = (std::string *)v184.__r_.__value_.__r.__words[0];
    if (v120)
    {
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v122 = &v232;
      else
        v122 = (std::string *)v232.__r_.__value_.__r.__words[0];
      memmove(v121, v122, v120);
    }
    *(_WORD *)((char *)&v121->__r_.__value_.__l.__data_ + v120) = 95;
    std::to_string(&v253, v35);
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v123 = &v253;
    else
      v123 = (std::string *)v253.__r_.__value_.__r.__words[0];
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v124 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
    else
      v124 = v253.__r_.__value_.__l.__size_;
    v125 = std::string::append(&v184, (const std::string::value_type *)v123, v124);
    v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    v246.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    v127 = std::string::append(&v246, "_add");
    v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
    v187.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v128;
    v127->__r_.__value_.__l.__size_ = 0;
    v127->__r_.__value_.__r.__words[2] = 0;
    v127->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v253.__r_.__value_.__l.__data_);
    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v184.__r_.__value_.__l.__data_);
    if (*((char *)v173 + 23) >= 0)
      v129 = *((unsigned __int8 *)v173 + 23);
    else
      v129 = (size_t)v173[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v181, v129 + 15);
    if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v130 = &v181;
    else
      v130 = (std::string *)v181.__r_.__value_.__r.__words[0];
    if (v129)
    {
      if (*((char *)v173 + 23) >= 0)
        v131 = v173;
      else
        v131 = *v173;
      memmove(v130, v131, v129);
    }
    strcpy((char *)v130 + v129, "_refl_pad_lrtb_");
    std::to_string(&v180, v35);
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v132 = &v180;
    else
      v132 = (std::string *)v180.__r_.__value_.__r.__words[0];
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v133 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
    else
      v133 = v180.__r_.__value_.__l.__size_;
    v134 = std::string::append(&v181, (const std::string::value_type *)v132, v133);
    v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
    v253.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v135;
    v134->__r_.__value_.__l.__size_ = 0;
    v134->__r_.__value_.__r.__words[2] = 0;
    v134->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v248, v35);
    if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v136 = &v248;
    else
      v136 = (std::string *)v248.__r_.__value_.__r.__words[0];
    if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v137 = HIBYTE(v248.__r_.__value_.__r.__words[2]);
    else
      v137 = v248.__r_.__value_.__l.__size_;
    v138 = std::string::append(&v253, (const std::string::value_type *)v136, v137);
    v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
    v246.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v139;
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    v140 = std::string::append(&v246, "00");
    v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
    v184.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v141;
    v140->__r_.__value_.__l.__size_ = 0;
    v140->__r_.__value_.__r.__words[2] = 0;
    v140->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v248.__r_.__value_.__l.__data_);
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v253.__r_.__value_.__l.__data_);
    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v180.__r_.__value_.__l.__data_);
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v181.__r_.__value_.__l.__data_);
    if (v35 == v172)
      std::string::operator=(&v184, a6);
    v178 = v182;
    v179 = (std::__shared_weak_count *)v183;
    if (v183)
    {
      v142 = (unint64_t *)(v183 + 8);
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    std::string::basic_string[abi:ne180100]<0>(&v253, "elementwise");
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v246, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
    else
      v246 = v232;
    if (v106 < 0)
    {
      std::string::__init_copy_ctor_external(&v247, v174, v105);
    }
    else
    {
      v247.__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
      v247.__r_.__value_.__l.__size_ = v105;
      LODWORD(v247.__r_.__value_.__r.__words[2]) = v186[0];
      *(_DWORD *)((char *)&v247.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v186 + 3);
      *((_BYTE *)&v247.__r_.__value_.__s + 23) = v106;
    }
    memset(&v181, 0, sizeof(v181));
    v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
    v180.__r_.__value_.__s.__data_[8] = 0;
    v181.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v181.__r_.__value_.__l.__size_ = v181.__r_.__value_.__r.__words[0];
    v181.__r_.__value_.__r.__words[2] = v181.__r_.__value_.__r.__words[0] + 48;
    v181.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v181.__r_.__value_.__r.__words[2], (__int128 *)&v246, (__int128 *)&v248, (std::string *)v181.__r_.__value_.__l.__data_);
    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v248, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
    else
      v248 = v184;
    memset(&v180, 0, sizeof(v180));
    v244 = &v180;
    v245 = 0;
    v180.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v180.__r_.__value_.__l.__size_ = v180.__r_.__value_.__r.__words[0];
    v180.__r_.__value_.__r.__words[2] = v180.__r_.__value_.__r.__words[0] + 24;
    v180.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v180.__r_.__value_.__r.__words[2], (__int128 *)&v248, (__int128 *)&v249, (std::string *)v180.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, &v178, &v253, &v187, (std::string **)&v181, (std::string **)&v180);
    v244 = &v180;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
    if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v248.__r_.__value_.__l.__data_);
    v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
    for (j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v247.__r_.__value_.__r.__words[j + 2]) < 0)
        operator delete(*(void **)((char *)&v246 + j * 8 + 24));
    }
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v253.__r_.__value_.__l.__data_);
    v145 = v179;
    if (v179)
    {
      v146 = (unint64_t *)&v179->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    std::string::operator=(&v232, &v184);
    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v184.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    v148 = (std::__shared_weak_count *)v183;
    if (!v183)
      goto LABEL_361;
    v149 = (unint64_t *)(v183 + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (v150)
    {
LABEL_361:
      if ((v106 & 0x80000000) == 0)
        goto LABEL_363;
LABEL_362:
      operator delete(v174);
      goto LABEL_363;
    }
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
    if (v106 < 0)
      goto LABEL_362;
LABEL_363:
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v188.__r_.__value_.__l.__data_);
    v151 = (std::__shared_weak_count *)v190;
    if (v190)
    {
      v152 = (unint64_t *)(v190 + 8);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v255.__r_.__value_.__l.__data_);
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v195.__r_.__value_.__l.__data_);
    if (v176 < 0)
      operator delete(v175);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    v154 = v202;
    if (v202)
    {
      v155 = (unint64_t *)&v202->__shared_owners_;
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    v157 = (std::__shared_weak_count *)v204;
    if (v204)
    {
      v158 = (unint64_t *)(v204 + 8);
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    ++v35;
    v28 += 4;
    v29 += 16;
  }
  while (v35 != (_DWORD)v172 + 1);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v160 = (std::__shared_weak_count *)size;
  if (size)
  {
    v161 = (unint64_t *)(size + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v241;
  if (v241)
  {
    v164 = (unint64_t *)&v241->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v243;
  if (v243)
  {
    v167 = (unint64_t *)&v243->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
}

void sub_1915B72F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x340]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3B0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_1915B7920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  if (a67 < 0)
    JUMPOUT(0x1915B78ACLL);
  JUMPOUT(0x1915B78B0);
}

void sub_1915B794C()
{
  JUMPOUT(0x1915B78B0);
}

void sub_1915B7954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  if (a67 < 0)
    JUMPOUT(0x1915B78BCLL);
  JUMPOUT(0x1915B78C0);
}

void sub_1915B7980()
{
  JUMPOUT(0x1915B78C0);
}

void sub_1915B7988()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x228]);
  JUMPOUT(0x1915B78C0);
}

void sub_1915B7998()
{
  JUMPOUT(0x1915B78C8);
}

void sub_1915B79A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;

  if (a67 < 0)
    operator delete(__p);
  JUMPOUT(0x1915B78D0);
}

void sub_1915B79B8()
{
  JUMPOUT(0x1915B78D0);
}

void sub_1915B79C0()
{
  JUMPOUT(0x1915B74D0);
}

void transform_reflective_padding_tb(int64x2_t *a1, _QWORD *a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  size_t v22;
  std::string *v23;
  const std::string::value_type *v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::vector<std::string>::const_iterator v36;
  int v37;
  uint64_t v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  size_t v45;
  std::string *v46;
  const void *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  char v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v70;
  void **v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  size_t v77;
  std::string *p_p;
  const void *v79;
  _OWORD *v80;
  __int128 v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  int v97;
  uint64_t v100[2];
  uint64_t v101[2];
  uint64_t v102;
  std::string::size_type v103;
  uint64_t v104[2];
  std::string v105;
  std::string lpsrc;
  std::string __p;
  uint64_t v108;
  std::string::size_type size;
  std::string **v110;
  int v111;
  uint64_t v112;
  int v113;
  std::string *v114;
  std::string *v115;
  unint64_t v116;
  std::vector<std::string> v117;
  int v118;
  int v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  std::string *v124;
  std::string::size_type v125;
  std::string v126;
  uint64_t v127;
  std::string v128;
  uint64_t v129;
  std::string v130;
  __int128 v131;

  *(_QWORD *)&v131 = *MEMORY[0x1E0C80C00];
  v97 = a4;
  if (a4 < 1)
    return;
  Espresso::abstract_engine_factory::shared(&v122);
  v9 = a2[2];
  v10 = (std::__shared_weak_count *)a2[3];
  v120 = v9;
  v121 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (***(uint64_t (****)(_QWORD))(v9 + 8))(*(_QWORD *)(v9 + 8));
  v118 = *(_DWORD *)(*(_QWORD *)(a2[4] + 16 * a1[3].i32[2]) + 12);
  v119 = v13;
  v14 = 1;
  memset(&v117, 0, sizeof(v117));
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v112 = 1;
  v113 = 1;
  LODWORD(v110) = 1;
  do
  {
    HIDWORD(v110) = v14;
    v111 = v14 + 1;
    v15 = v122;
    std::string::basic_string[abi:ne180100]<0>(&__p, "slice");
    Espresso::abstract_engine_factory::make_kernel_priv(v15, (uint64_t)&v120, (uint64_t)&__p, (uint64_t)&v110, &v119);
    if (lpsrc.__r_.__value_.__r.__words[0]
    {
      v108 = (uint64_t)v16;
      size = lpsrc.__r_.__value_.__l.__size_;
      if (!lpsrc.__r_.__value_.__l.__size_)
        goto LABEL_18;
      v17 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    else
    {
      v108 = 0;
      size = 0;
    }
    v19 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
LABEL_18:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(char *)(a5 + 23) >= 0)
      v22 = *(unsigned __int8 *)(a5 + 23);
    else
      v22 = *(_QWORD *)(a5 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v105, v22 + 5);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v105;
    else
      v23 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if (v22)
    {
      if (*(char *)(a5 + 23) >= 0)
        v24 = (const std::string::value_type *)a5;
      else
        v24 = *(const std::string::value_type **)a5;
      memmove(v23, v24, v22);
    }
    strcpy((char *)v23 + v22, "_row_");
    std::to_string(&v130, v14);
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v130;
    else
      v25 = (std::string *)v130.__r_.__value_.__r.__words[0];
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
    else
      v26 = v130.__r_.__value_.__l.__size_;
    v27 = std::string::append(&v105, (const std::string::value_type *)v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&lpsrc, "_from_top");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    v31 = (std::__shared_weak_count *)size;
    v104[0] = v108;
    v104[1] = size;
    if (size)
    {
      v32 = (unint64_t *)(size + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "slice");
    if (*(char *)(a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      v130 = *(std::string *)a5;
    memset(&v105, 0, sizeof(v105));
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    v128.__r_.__value_.__s.__data_[8] = 0;
    v105.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v105.__r_.__value_.__l.__size_ = v105.__r_.__value_.__r.__words[0];
    v105.__r_.__value_.__r.__words[2] = v105.__r_.__value_.__r.__words[0] + 24;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v105.__r_.__value_.__r.__words[2], (__int128 *)&v130, &v131, (std::string *)v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v126, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v126 = __p;
    memset(&v128, 0, sizeof(v128));
    v124 = &v128;
    LOBYTE(v125) = 0;
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v128.__r_.__value_.__l.__size_ = v128.__r_.__value_.__r.__words[0];
    v128.__r_.__value_.__r.__words[2] = v128.__r_.__value_.__r.__words[0] + 24;
    v128.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128.__r_.__value_.__r.__words[2], (__int128 *)&v126, (__int128 *)&v127, (std::string *)v128.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, v104, &lpsrc, &__p, (std::string **)&v105, (std::string **)&v128);
    v124 = &v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
      if (!v31)
        goto LABEL_64;
    }
    else if (!v31)
    {
      goto LABEL_64;
    }
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
LABEL_64:
    v36.__i_ = v117.__begin_;
    std::vector<std::string>::insert(&v117, v36, &__p);
    v37 = *(_DWORD *)(a3 + 4);
    HIDWORD(v110) = v37 + ~v14;
    v111 = v37 - v14;
    v38 = v122;
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "slice");
    Espresso::abstract_engine_factory::make_kernel_priv(v38, (uint64_t)&v120, (uint64_t)&lpsrc, (uint64_t)&v110, &v119);
    if (v105.__r_.__value_.__r.__words[0]
    {
      v102 = (uint64_t)v39;
      v103 = v105.__r_.__value_.__l.__size_;
      if (!v105.__r_.__value_.__l.__size_)
        goto LABEL_76;
      v40 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    else
    {
      v102 = 0;
      v103 = 0;
    }
    v42 = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
    if (v105.__r_.__value_.__l.__size_)
    {
      v43 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
LABEL_76:
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    if (*(char *)(a5 + 23) >= 0)
      v45 = *(unsigned __int8 *)(a5 + 23);
    else
      v45 = *(_QWORD *)(a5 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v105, v45 + 5);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v105;
    else
      v46 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if (v45)
    {
      if (*(char *)(a5 + 23) >= 0)
        v47 = (const void *)a5;
      else
        v47 = *(const void **)a5;
      memmove(v46, v47, v45);
    }
    strcpy((char *)v46 + v45, "_row_");
    std::to_string(&v130, v14);
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v130;
    else
      v48 = (std::string *)v130.__r_.__value_.__r.__words[0];
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
    else
      v49 = v130.__r_.__value_.__l.__size_;
    v50 = std::string::append(&v105, (const std::string::value_type *)v48, v49);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = std::string::append(&lpsrc, "_from_bottom");
    v53 = v52->__r_.__value_.__r.__words[0];
    v128.__r_.__value_.__r.__words[0] = v52->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v128.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
    v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v53;
    __p.__r_.__value_.__l.__size_ = v128.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v128.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v54;
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    v55 = (std::__shared_weak_count *)v103;
    v101[0] = v102;
    v101[1] = v103;
    if (v103)
    {
      v56 = (unint64_t *)(v103 + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "slice");
    if (*(char *)(a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      v130 = *(std::string *)a5;
    memset(&v105, 0, sizeof(v105));
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    v128.__r_.__value_.__s.__data_[8] = 0;
    v105.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v105.__r_.__value_.__l.__size_ = v105.__r_.__value_.__r.__words[0];
    v105.__r_.__value_.__r.__words[2] = v105.__r_.__value_.__r.__words[0] + 24;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v105.__r_.__value_.__r.__words[2], (__int128 *)&v130, &v131, (std::string *)v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v126, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v126 = __p;
    memset(&v128, 0, sizeof(v128));
    v124 = &v128;
    LOBYTE(v125) = 0;
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v128.__r_.__value_.__l.__size_ = v128.__r_.__value_.__r.__words[0];
    v128.__r_.__value_.__r.__words[2] = v128.__r_.__value_.__r.__words[0] + 24;
    v128.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128.__r_.__value_.__r.__words[2], (__int128 *)&v126, (__int128 *)&v127, (std::string *)v128.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, v101, &lpsrc, &__p, (std::string **)&v105, (std::string **)&v128);
    v124 = &v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
      if (!v55)
        goto LABEL_124;
    }
    else if (!v55)
    {
      goto LABEL_124;
    }
    v58 = (unint64_t *)&v55->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
LABEL_124:
    v60 = v115;
    if ((unint64_t)v115 >= v116)
    {
      v62 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v114, (uint64_t)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v115, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v61 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v115->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
      }
      v62 = v60 + 1;
    }
    v115 = v62;
    v63 = (std::__shared_weak_count *)v103;
    if (v103)
    {
      v64 = (unint64_t *)(v103 + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v66 = (std::__shared_weak_count *)size;
    if (size)
    {
      v67 = (unint64_t *)(size + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  while (v14++ != v97);
  WORD2(v108) = 0;
  LODWORD(v108) = 1;
  v70 = v122;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_concat");
  Espresso::abstract_engine_factory::make_kernel_priv(v70, (uint64_t)&v120, (uint64_t)&__p, (uint64_t)&v108, &v119);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    v124 = (std::string *)v71;
    v125 = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v72 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
  }
  else
  {
    v124 = 0;
    v125 = 0;
  }
  v74 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v75 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a5 + 23) >= 0)
    v77 = *(unsigned __int8 *)(a5 + 23);
  else
    v77 = *(_QWORD *)(a5 + 8);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v77 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v77)
  {
    if (*(char *)(a5 + 23) >= 0)
      v79 = (const void *)a5;
    else
      v79 = *(const void **)a5;
    memmove(p_p, v79, v77);
  }
  strcpy((char *)p_p + v77, "_tb_concat");
  memset(&lpsrc, 0, sizeof(lpsrc));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)&lpsrc.__r_.__value_.__l.__data_, 0, v117.__begin_, v117.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v117.__end_ - (char *)v117.__begin_) >> 3));
  v80 = (_OWORD *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_ >= lpsrc.__r_.__value_.__r.__words[2])
  {
    v82 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&lpsrc.__r_.__value_.__l.__data_, a5);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)lpsrc.__r_.__value_.__l.__size_, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    }
    else
    {
      v81 = *(_OWORD *)a5;
      *(_QWORD *)(lpsrc.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(a5 + 16);
      *v80 = v81;
    }
    v82 = (std::string *)((char *)v80 + 24);
  }
  lpsrc.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)&lpsrc.__r_.__value_.__l.__data_, (uint64_t)v82, v114, v115, 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (char *)v114) >> 3));
  v83 = (std::__shared_weak_count *)v125;
  v100[0] = (uint64_t)v124;
  v100[1] = v125;
  if (v125)
  {
    v84 = (unint64_t *)(v125 + 8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
  std::string::basic_string[abi:ne180100]<0>(&v105, "general_concat");
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v128 = *(std::string *)a6;
  memset(&v130, 0, sizeof(v130));
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
  v126.__r_.__value_.__s.__data_[8] = 0;
  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v130.__r_.__value_.__l.__size_ = v130.__r_.__value_.__r.__words[0];
  v130.__r_.__value_.__r.__words[2] = v130.__r_.__value_.__r.__words[0] + 24;
  v130.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v130.__r_.__value_.__r.__words[2], (__int128 *)&v128, (__int128 *)&v129, (std::string *)v130.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, v100, &v105, &__p, (std::string **)&lpsrc, (std::string **)&v130);
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v83)
  {
    v86 = (unint64_t *)&v83->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v88 = (std::__shared_weak_count *)v125;
  if (v125)
  {
    v89 = (unint64_t *)(v125 + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v110 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  v114 = (std::string *)&v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  v91 = v121;
  if (v121)
  {
    v92 = (unint64_t *)&v121->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v123;
  if (v123)
  {
    v95 = (unint64_t *)&v123->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
}

void sub_1915B873C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void **a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,char **a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  a24 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a24);
  if (a42 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v52 - 208);
  a46 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  a49 = &a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v52 - 240);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v52 - 224);
  _Unwind_Resume(a1);
}

void sub_1915B8A10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  if (a29 < 0)
    JUMPOUT(0x1915B89CCLL);
  JUMPOUT(0x1915B89D0);
}

void sub_1915B8A54()
{
  JUMPOUT(0x1915B89D0);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915B8CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void generate_refl_pad_lr_mask(int64x2_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, const void **a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  size_t v18;
  std::string *p_s;
  const void *v20;
  uint64_t v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  size_t v33;
  __int128 *v34;
  const void *v35;
  const std::string::value_type *p_p;
  std::string::size_type v37;
  std::string *v38;
  int v39;
  int v40;
  uint64_t v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string::size_type v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string::size_type v62;
  std::string::size_type v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  size_t v69;
  __int128 *p_lpsrc;
  const void *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  size_t v91;
  __int128 *v92;
  const void *v93;
  const std::string::value_type *v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  uint64_t v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string::size_type v105;
  std::string::size_type v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::string::size_type v113;
  std::string::size_type v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  size_t v120;
  __int128 *v121;
  const void *v122;
  const std::string::value_type *v123;
  std::string::size_type v124;
  std::string *v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  size_t v141;
  __int128 *v142;
  const void *v143;
  const std::string::value_type *v144;
  std::string::size_type v145;
  std::string *v146;
  std::string::size_type v147;
  int v148;
  uint64_t v149;
  void *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  size_t v156;
  __int128 *v157;
  const void *v158;
  const std::string::value_type *v159;
  std::string::size_type v160;
  std::string *v161;
  __int128 v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  void *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  size_t v178;
  __int128 *v179;
  const void *v180;
  const std::string::value_type *v181;
  std::string::size_type v182;
  int v183;
  std::string *v184;
  __int128 v185;
  unint64_t v186;
  char *v187;
  __int128 v188;
  const void *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  void *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  void *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  size_t v235;
  std::string *v236;
  const void *v237;
  char *v238;
  std::string *v239;
  std::string::size_type v240;
  std::string *v241;
  __int128 v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  size_t v260;
  std::string *v261;
  const void *v262;
  std::string *v263;
  std::string::size_type v264;
  std::string *v265;
  __int128 v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  _OWORD v273[3];
  __int128 v274;
  uint64_t v275;
  int v276;
  __int128 v277;
  std::string::value_type *v278;
  std::string::size_type size;
  int v280;
  std::string::value_type *v281;
  int v282;
  int64x2_t *v283;
  uint64_t v284[2];
  uint64_t v285[2];
  uint64_t v286;
  std::__shared_weak_count *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  uint64_t v296;
  std::string::size_type v297;
  std::string v298;
  __int128 lpsrc;
  __int128 v300;
  uint64_t v301;
  void *v302;
  void *v303;
  uint64_t v304;
  __int128 __p;
  __int128 v306;
  uint64_t v307;
  void *v308;
  _BYTE *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __int128 v313;
  _DWORD v314[2];
  __int128 v315;
  unsigned __int128 v316;
  unsigned __int128 v317;
  __int128 v318;
  unsigned __int128 v319;
  __int128 v320;
  _DWORD v321[2];
  __int128 v322;
  std::string __s;
  int v324;
  int v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  std::string *v330;
  char v331;
  std::string v332;
  uint64_t v333;
  std::string v334;
  uint64_t v335;
  std::string v336;
  uint64_t v337;
  std::string v338;
  uint64_t v339;
  std::string v340;
  __int128 v341;
  std::string v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  _BYTE v346[48];
  int v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  __int128 v351;
  int v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  __int16 v358;
  int v359;
  char v360;
  std::string v361;
  uint64_t v362;
  std::string __str;
  __int128 v364;

  v275 = a7;
  v283 = a1;
  *(_QWORD *)&v364 = *MEMORY[0x1E0C80C00];
  Espresso::abstract_engine_factory::shared(&v328);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(std::__shared_weak_count **)(a2 + 24);
  v326 = v14;
  v327 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v325 = (***(uint64_t (****)(_QWORD))(v14 + 8))(*(_QWORD *)(v14 + 8));
  v324 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * v283[3].i32[2]) + 12);
  if (*((char *)a8 + 23) >= 0)
    v18 = *((unsigned __int8 *)a8 + 23);
  else
    v18 = (size_t)a8[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v18 + 9);
  v276 = a3;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_s = &__s;
  else
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  if (v18)
  {
    if (*((char *)a8 + 23) >= 0)
      v20 = a8;
    else
      v20 = *a8;
    memmove(p_s, v20, v18);
  }
  strcpy((char *)p_s + v18, "channel_0");
  if (a5 == 1)
  {
    *(_QWORD *)&v345 = 0x100000000;
    v344 = xmmword_191A93760;
    v21 = v328;
    std::string::basic_string[abi:ne180100]<0>(&__p, "slice");
    Espresso::abstract_engine_factory::make_kernel_priv(v21, (uint64_t)&v326, (uint64_t)&__p, (uint64_t)&v344, &v325);
    if ((_QWORD)lpsrc
    {
      v298.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      v298.__r_.__value_.__l.__size_ = *((_QWORD *)&lpsrc + 1);
      if (*((_QWORD *)&lpsrc + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
    }
    else
    {
      *(_OWORD *)&v298.__r_.__value_.__l.__data_ = 0uLL;
    }
    if (*((_QWORD *)&lpsrc + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&lpsrc + 1) + 16))(*((_QWORD *)&lpsrc + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&lpsrc + 1));
      }
    }
    if (SBYTE7(v306) < 0)
      operator delete((void *)__p);
    v322 = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
    if (v298.__r_.__value_.__l.__size_)
    {
      v27 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "slice");
    if (*(char *)(a6 + 23) < 0)
      std::string::__init_copy_ctor_external(&v340, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    else
      v340 = *(std::string *)a6;
    lpsrc = 0uLL;
    *(_QWORD *)&v300 = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
    __str.__r_.__value_.__s.__data_[8] = 0;
    *(_QWORD *)&lpsrc = operator new(0x18uLL);
    *((_QWORD *)&lpsrc + 1) = lpsrc;
    *(_QWORD *)&v300 = lpsrc + 24;
    *((_QWORD *)&lpsrc + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v300, (__int128 *)&v340, &v341, (std::string *)lpsrc);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v361, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v361 = __s;
    memset(&__str, 0, sizeof(__str));
    v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v342.__r_.__value_.__s.__data_[8] = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0] + 24;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str.__r_.__value_.__r.__words[2], (__int128 *)&v361, (__int128 *)&v362, (std::string *)__str.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v283, (uint64_t *)&v322, (const std::string *)&__p, &__s, (std::string **)&lpsrc, (std::string **)&__str);
    v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v342);
    if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v361.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v340.__r_.__value_.__l.__data_);
    if (SBYTE7(v306) < 0)
      operator delete((void *)__p);
    if (v298.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)v298.__r_.__value_.__l.__size_ + 16))(v298.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v298.__r_.__value_.__l.__size_);
      }
    }
    if (v298.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)v298.__r_.__value_.__l.__size_ + 16))(v298.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v298.__r_.__value_.__l.__size_);
      }
    }
  }
  if (*((char *)a8 + 23) >= 0)
    v33 = *((unsigned __int8 *)a8 + 23);
  else
    v33 = (size_t)a8[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&v344, v33 + 30);
  if ((SBYTE7(v345) & 0x80u) == 0)
    v34 = &v344;
  else
    v34 = (__int128 *)v344;
  if (v33)
  {
    if (*((char *)a8 + 23) >= 0)
      v35 = a8;
    else
      v35 = *a8;
    memmove(v34, v35, v33);
  }
  strcpy((char *)v34 + v33, "const_minus_one_for_pad_index_");
  std::to_string((std::string *)&__p, a5);
  if ((SBYTE7(v306) & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((SBYTE7(v306) & 0x80u) == 0)
    v37 = BYTE7(v306);
  else
    v37 = *((_QWORD *)&__p + 1);
  v38 = std::string::append((std::string *)&v344, p_p, v37);
  v281 = (std::string::value_type *)v38->__r_.__value_.__r.__words[0];
  size = v38->__r_.__value_.__l.__size_;
  v321[0] = v38->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v321 + 3) = *(_DWORD *)((char *)&v38->__r_.__value_.__r.__words[2] + 3);
  v39 = SHIBYTE(v38->__r_.__value_.__r.__words[2]);
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  v40 = 2 * a5;
  if (SBYTE7(v345) < 0)
    operator delete((void *)v344);
  __asm { FMOV            V8.2S, #1.0 }
  *(_QWORD *)&v346[32] = _D8;
  v349 = 0x1000100010001;
  v350 = 0;
  v352 = 1;
  v359 = 0;
  v360 = 0;
  v356 = 0;
  v355 = 0;
  v344 = 0uLL;
  v353 = 0;
  v354 = 0x10000;
  v345 = 0uLL;
  v357 = 0;
  v358 = 1;
  *(_DWORD *)&v346[28] = -1;
  *(_DWORD *)&v346[16] = v40 - 1;
  *(_QWORD *)&v346[20] = 1;
  *(_QWORD *)&v346[8] = 0x100000001;
  v277 = xmmword_191A93310;
  v351 = xmmword_191A93310;
  *(_QWORD *)v346 = 1;
  *(_QWORD *)&v346[40] = 0;
  LOWORD(v347) = v40 - 2;
  HIWORD(v347) = v40 - 2;
  v348 = 0;
  if (a5 == 1)
  {
    *(_DWORD *)&v346[16] = 3;
    v347 = 65537;
  }
  v46 = v328;
  v282 = v39;
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  Espresso::abstract_engine_factory::make_kernel_priv(v46, (uint64_t)&v326, (uint64_t)&__p, (uint64_t)&v344, &v325);
  if ((_QWORD)lpsrc
  {
    v338.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    v338.__r_.__value_.__l.__size_ = *((_QWORD *)&lpsrc + 1);
    if (*((_QWORD *)&lpsrc + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
  }
  else
  {
    *(_OWORD *)&v338.__r_.__value_.__l.__data_ = 0uLL;
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
  if (*((_QWORD *)&lpsrc + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  v53 = v338.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v338.__r_.__value_.__l.__data_
                                                                            + 472))(&v336, v338.__r_.__value_.__r.__words[0]);
  v54 = 0;
  v55 = a4 - a5;
  v56 = *(int *)(v336.__r_.__value_.__r.__words[0] + 8);
  do
  {
    v56 *= *(int *)(v336.__r_.__value_.__r.__words[0] + 12 + v54);
    v54 += 4;
  }
  while (v54 != 12);
  bzero(*(void **)(v336.__r_.__value_.__r.__words[0] + 24), 4 * v56);
  v320 = *(_OWORD *)&v336.__r_.__value_.__l.__data_;
  if (v336.__r_.__value_.__l.__size_)
  {
    v57 = (unint64_t *)(v336.__r_.__value_.__l.__size_ + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)v53 + 400))(v53, &v320);
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v320 + 1);
  if (*((_QWORD *)&v320 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v320 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v338.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v338.__r_.__value_.__l.__data_
                                                                            + 488))(&v334, v338.__r_.__value_.__r.__words[0]);
  v63 = v334.__r_.__value_.__r.__words[0];
  **(_DWORD **)(v334.__r_.__value_.__r.__words[0] + 16) = -1082130432;
  v319 = __PAIR128__(v334.__r_.__value_.__l.__size_, v63);
  if (v334.__r_.__value_.__l.__size_)
  {
    v64 = (unint64_t *)(v334.__r_.__value_.__l.__size_ + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  (*(void (**)(std::string::size_type, unsigned __int128 *))(*(_QWORD *)v62 + 392))(v62, &v319);
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
  if (*((_QWORD *)&v319 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (*((char *)a8 + 23) >= 0)
    v69 = *((unsigned __int8 *)a8 + 23);
  else
    v69 = (size_t)a8[1];
  p_lpsrc = &lpsrc;
  std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v69 + 32);
  if (SBYTE7(v300) < 0)
    p_lpsrc = (__int128 *)lpsrc;
  if (v69)
  {
    if (*((char *)a8 + 23) >= 0)
      v71 = a8;
    else
      v71 = *a8;
    memmove(p_lpsrc, v71, v69);
  }
  strcpy((char *)p_lpsrc + v69, "conv_to_minus_one_for_pad_index_");
  std::to_string(&v340, a5);
  if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v72 = &v340;
  else
    v72 = (std::string *)v340.__r_.__value_.__r.__words[0];
  if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = HIBYTE(v340.__r_.__value_.__r.__words[2]);
  else
    v73 = v340.__r_.__value_.__l.__size_;
  v74 = std::string::append((std::string *)&lpsrc, (const std::string::value_type *)v72, v73);
  v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  *(_QWORD *)&v306 = *((_QWORD *)&v74->__r_.__value_.__l + 2);
  __p = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  if (SBYTE7(v300) < 0)
    operator delete((void *)lpsrc);
  v76 = (std::__shared_weak_count *)v338.__r_.__value_.__l.__size_;
  v318 = *(_OWORD *)&v338.__r_.__value_.__l.__data_;
  if (v338.__r_.__value_.__l.__size_)
  {
    v77 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "convolution");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    __str = __s;
  memset(&v340, 0, sizeof(v340));
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
  v361.__r_.__value_.__s.__data_[8] = 0;
  v340.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v340.__r_.__value_.__l.__size_ = v340.__r_.__value_.__r.__words[0];
  v340.__r_.__value_.__r.__words[2] = v340.__r_.__value_.__r.__words[0] + 24;
  v340.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v340.__r_.__value_.__r.__words[2], (__int128 *)&__str, &v364, (std::string *)v340.__r_.__value_.__l.__data_);
  if (v282 < 0)
  {
    std::string::__init_copy_ctor_external(&v342, v281, size);
  }
  else
  {
    v342.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
    v342.__r_.__value_.__l.__size_ = size;
    LODWORD(v342.__r_.__value_.__r.__words[2]) = v321[0];
    *(_DWORD *)((char *)&v342.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v321 + 3);
    *((_BYTE *)&v342.__r_.__value_.__s + 23) = v282;
  }
  memset(&v361, 0, sizeof(v361));
  v298.__r_.__value_.__s.__data_[8] = 0;
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v361.__r_.__value_.__l.__size_ = v361.__r_.__value_.__r.__words[0];
  v361.__r_.__value_.__r.__words[2] = v361.__r_.__value_.__r.__words[0] + 24;
  v361.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v361.__r_.__value_.__r.__words[2], (__int128 *)&v342, (__int128 *)&v343, (std::string *)v361.__r_.__value_.__l.__data_);
  v79 = v282;
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v283, (uint64_t *)&v318, (const std::string *)&lpsrc, (const std::string *)&__p, (std::string **)&v340, (std::string **)&v361);
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v361);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SBYTE7(v300) < 0)
    operator delete((void *)lpsrc);
  if (v76)
  {
    v80 = (unint64_t *)&v76->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  v82 = (std::__shared_weak_count *)v334.__r_.__value_.__l.__size_;
  if (v334.__r_.__value_.__l.__size_)
  {
    v83 = (unint64_t *)(v334.__r_.__value_.__l.__size_ + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)v336.__r_.__value_.__l.__size_;
  if (v336.__r_.__value_.__l.__size_)
  {
    v86 = (unint64_t *)(v336.__r_.__value_.__l.__size_ + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)v338.__r_.__value_.__l.__size_;
  if (v338.__r_.__value_.__l.__size_)
  {
    v89 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (*((char *)a8 + 23) >= 0)
    v91 = *((unsigned __int8 *)a8 + 23);
  else
    v91 = (size_t)a8[1];
  v92 = &v344;
  std::string::basic_string[abi:ne180100]((uint64_t)&v344, v91 + 42);
  if (SBYTE7(v345) < 0)
    v92 = (__int128 *)v344;
  if (v91)
  {
    if (*((char *)a8 + 23) >= 0)
      v93 = a8;
    else
      v93 = *a8;
    memmove(v92, v93, v91);
  }
  strcpy((char *)v92 + v91, "const_zeros_bordered_by_one_for_pad_index_");
  std::to_string((std::string *)&__p, a5);
  if ((SBYTE7(v306) & 0x80u) == 0)
    v94 = (const std::string::value_type *)&__p;
  else
    v94 = (const std::string::value_type *)__p;
  if ((SBYTE7(v306) & 0x80u) == 0)
    v95 = BYTE7(v306);
  else
    v95 = *((_QWORD *)&__p + 1);
  v96 = std::string::append((std::string *)&v344, v94, v95);
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  if (SBYTE7(v345) < 0)
    operator delete((void *)v344);
  v98 = v328;
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  v349 = 0x1000100010001;
  v359 = 0;
  v360 = 0;
  v356 = 0;
  v355 = 0;
  v344 = 0uLL;
  v353 = 0;
  *(_QWORD *)&v346[32] = _D8;
  *(_QWORD *)&v346[24] = 0xFFFFFFFF00000000;
  v352 = 1;
  v354 = 0x10000;
  v345 = 0uLL;
  v357 = 0;
  v358 = 1;
  v274 = xmmword_191A93770;
  *(_OWORD *)&v346[8] = xmmword_191A93770;
  v351 = v277;
  *(_QWORD *)v346 = 1;
  *(_QWORD *)&v346[40] = 0;
  v350 = 0;
  v347 = 131074;
  v348 = 0;
  Espresso::abstract_engine_factory::make_kernel_priv(v98, (uint64_t)&v326, (uint64_t)&__p, (uint64_t)&v344, &v325);
  if ((_QWORD)lpsrc
  {
    v338.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
    v338.__r_.__value_.__l.__size_ = *((_QWORD *)&lpsrc + 1);
    if (*((_QWORD *)&lpsrc + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
  }
  else
  {
    *(_OWORD *)&v338.__r_.__value_.__l.__data_ = 0uLL;
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
  if (*((_QWORD *)&lpsrc + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  v105 = v338.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v338.__r_.__value_.__l.__data_
                                                                            + 472))(&v336, v338.__r_.__value_.__r.__words[0]);
  v106 = v336.__r_.__value_.__r.__words[0];
  v107 = *(_QWORD *)(v336.__r_.__value_.__r.__words[0] + 24);
  *(_QWORD *)v107 = 0x3F80000000000000;
  *(_DWORD *)(v107 + 8) = 0;
  v317 = __PAIR128__(v336.__r_.__value_.__l.__size_, v106);
  if (v336.__r_.__value_.__l.__size_)
  {
    v108 = (unint64_t *)(v336.__r_.__value_.__l.__size_ + 8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  (*(void (**)(std::string::size_type, unsigned __int128 *))(*(_QWORD *)v105 + 400))(v105, &v317);
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v338.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v338.__r_.__value_.__l.__data_
                                                                            + 488))(&v334, v338.__r_.__value_.__r.__words[0]);
  v114 = v334.__r_.__value_.__r.__words[0];
  **(_DWORD **)(v334.__r_.__value_.__r.__words[0] + 16) = 1065353216;
  v316 = __PAIR128__(v334.__r_.__value_.__l.__size_, v114);
  if (v334.__r_.__value_.__l.__size_)
  {
    v115 = (unint64_t *)(v334.__r_.__value_.__l.__size_ + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  (*(void (**)(std::string::size_type, unsigned __int128 *))(*(_QWORD *)v113 + 392))(v113, &v316);
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
  if (*((_QWORD *)&v316 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (*((char *)a8 + 23) >= 0)
    v120 = *((unsigned __int8 *)a8 + 23);
  else
    v120 = (size_t)a8[1];
  v121 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v120 + 44);
  if (SBYTE7(v306) < 0)
    v121 = (__int128 *)__p;
  if (v120)
  {
    if (*((char *)a8 + 23) >= 0)
      v122 = a8;
    else
      v122 = *a8;
    memmove(v121, v122, v120);
  }
  strcpy((char *)v121 + v120, "conv_to_zeros_bordered_by_one_for_pad_index_");
  qmemcpy(v273, "e_for_pad_index_rdered_by_one_foconv_to_zeros_bo", sizeof(v273));
  std::to_string((std::string *)&lpsrc, a5);
  if ((SBYTE7(v300) & 0x80u) == 0)
    v123 = (const std::string::value_type *)&lpsrc;
  else
    v123 = (const std::string::value_type *)lpsrc;
  if ((SBYTE7(v300) & 0x80u) == 0)
    v124 = BYTE7(v300);
  else
    v124 = *((_QWORD *)&lpsrc + 1);
  v125 = std::string::append((std::string *)&__p, v123, v124);
  v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
  *(_QWORD *)&v345 = *((_QWORD *)&v125->__r_.__value_.__l + 2);
  v344 = v126;
  v125->__r_.__value_.__l.__size_ = 0;
  v125->__r_.__value_.__r.__words[2] = 0;
  v125->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v300) < 0)
    operator delete((void *)lpsrc);
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  v127 = (std::__shared_weak_count *)v338.__r_.__value_.__l.__size_;
  v315 = *(_OWORD *)&v338.__r_.__value_.__l.__data_;
  if (v338.__r_.__value_.__l.__size_)
  {
    v128 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  if (v79 < 0)
  {
    std::string::__init_copy_ctor_external(&v340, v281, size);
  }
  else
  {
    v340.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
    v340.__r_.__value_.__l.__size_ = size;
    LODWORD(v340.__r_.__value_.__r.__words[2]) = v321[0];
    *(_DWORD *)((char *)&v340.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v321 + 3);
    *((_BYTE *)&v340.__r_.__value_.__s + 23) = v79;
  }
  lpsrc = 0uLL;
  *(_QWORD *)&v300 = 0;
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  v361.__r_.__value_.__s.__data_[8] = 0;
  *(_QWORD *)&lpsrc = operator new(0x18uLL);
  *((_QWORD *)&lpsrc + 1) = lpsrc;
  *(_QWORD *)&v300 = lpsrc + 24;
  *((_QWORD *)&lpsrc + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v300, (__int128 *)&v340, &v341, (std::string *)lpsrc);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v342 = __str;
  memset(&v361, 0, sizeof(v361));
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
  v298.__r_.__value_.__s.__data_[8] = 0;
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v361.__r_.__value_.__l.__size_ = v361.__r_.__value_.__r.__words[0];
  v361.__r_.__value_.__r.__words[2] = v361.__r_.__value_.__r.__words[0] + 24;
  v361.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v361.__r_.__value_.__r.__words[2], (__int128 *)&v342, (__int128 *)&v343, (std::string *)v361.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v283, (uint64_t *)&v315, (const std::string *)&__p, (const std::string *)&v344, (std::string **)&lpsrc, (std::string **)&v361);
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v361);
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  if (v127)
  {
    v130 = (unint64_t *)&v127->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  if (SBYTE7(v345) < 0)
    operator delete((void *)v344);
  v132 = (std::__shared_weak_count *)v334.__r_.__value_.__l.__size_;
  if (v334.__r_.__value_.__l.__size_)
  {
    v133 = (unint64_t *)(v334.__r_.__value_.__l.__size_ + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)v336.__r_.__value_.__l.__size_;
  if (v336.__r_.__value_.__l.__size_)
  {
    v136 = (unint64_t *)(v336.__r_.__value_.__l.__size_ + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (std::__shared_weak_count *)v338.__r_.__value_.__l.__size_;
  if (v338.__r_.__value_.__l.__size_)
  {
    v139 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  if (*((char *)a8 + 23) >= 0)
    v141 = *((unsigned __int8 *)a8 + 23);
  else
    v141 = (size_t)a8[1];
  v142 = &v344;
  std::string::basic_string[abi:ne180100]((uint64_t)&v344, v141 + 25);
  if (SBYTE7(v345) < 0)
    v142 = (__int128 *)v344;
  if (v141)
  {
    if (*((char *)a8 + 23) >= 0)
      v143 = a8;
    else
      v143 = *a8;
    memmove(v142, v143, v141);
  }
  strcpy((char *)v142 + v141, "final_mask_for_pad_index_");
  std::to_string((std::string *)&__p, a5);
  if ((SBYTE7(v306) & 0x80u) == 0)
    v144 = (const std::string::value_type *)&__p;
  else
    v144 = (const std::string::value_type *)__p;
  if ((SBYTE7(v306) & 0x80u) == 0)
    v145 = BYTE7(v306);
  else
    v145 = *((_QWORD *)&__p + 1);
  v146 = std::string::append((std::string *)&v344, v144, v145);
  v147 = v146->__r_.__value_.__l.__size_;
  v278 = (std::string::value_type *)v146->__r_.__value_.__r.__words[0];
  v314[0] = v146->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v314 + 3) = *(_DWORD *)((char *)&v146->__r_.__value_.__r.__words[2] + 3);
  v148 = SHIBYTE(v146->__r_.__value_.__r.__words[2]);
  v146->__r_.__value_.__l.__size_ = 0;
  v146->__r_.__value_.__r.__words[2] = 0;
  v146->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  if (SBYTE7(v345) < 0)
    operator delete((void *)v344);
  v280 = v148;
  if (v55 < 1)
    goto LABEL_356;
  v149 = v328;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
  memset(v346, 0, 44);
  v344 = 0u;
  v345 = 0u;
  WORD4(v344) = v55;
  WORD5(v344) = v55;
  Espresso::abstract_engine_factory::make_kernel_priv(v149, (uint64_t)&v326, (uint64_t)&__p, (uint64_t)&v344, &v325);
  if (!(_QWORD)lpsrc)
    goto LABEL_301;
  if (v150)
  {
    v338.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
    v338.__r_.__value_.__l.__size_ = *((_QWORD *)&lpsrc + 1);
    if (*((_QWORD *)&lpsrc + 1))
    {
      v151 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
      do
        v152 = __ldxr(v151);
      while (__stxr(v152 + 1, v151));
    }
  }
  else
  {
LABEL_301:
    *(_OWORD *)&v338.__r_.__value_.__l.__data_ = 0uLL;
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
  if (*((_QWORD *)&lpsrc + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  if (*((char *)a8 + 23) >= 0)
    v156 = *((unsigned __int8 *)a8 + 23);
  else
    v156 = (size_t)a8[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v156 + 33);
  if ((SBYTE7(v306) & 0x80u) == 0)
    v157 = &__p;
  else
    v157 = (__int128 *)__p;
  if (v156)
  {
    if (*((char *)a8 + 23) >= 0)
      v158 = a8;
    else
      v158 = *a8;
    memmove(v157, v158, v156);
  }
  strcpy((char *)v157 + v156, "final_zero_padding_for_pad_index_");
  std::to_string((std::string *)&lpsrc, a5);
  if ((SBYTE7(v300) & 0x80u) == 0)
    v159 = (const std::string::value_type *)&lpsrc;
  else
    v159 = (const std::string::value_type *)lpsrc;
  if ((SBYTE7(v300) & 0x80u) == 0)
    v160 = BYTE7(v300);
  else
    v160 = *((_QWORD *)&lpsrc + 1);
  v161 = std::string::append((std::string *)&__p, v159, v160);
  v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  *(_QWORD *)&v345 = *((_QWORD *)&v161->__r_.__value_.__l + 2);
  v344 = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v300) < 0)
    operator delete((void *)lpsrc);
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  v163 = (std::__shared_weak_count *)v338.__r_.__value_.__l.__size_;
  v313 = *(_OWORD *)&v338.__r_.__value_.__l.__data_;
  if (v338.__r_.__value_.__l.__size_)
  {
    v164 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
    do
      v165 = __ldxr(v164);
    while (__stxr(v165 + 1, v164));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v340 = __str;
  lpsrc = 0uLL;
  *(_QWORD *)&v300 = 0;
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  v361.__r_.__value_.__s.__data_[8] = 0;
  *(_QWORD *)&lpsrc = operator new(0x18uLL);
  *((_QWORD *)&lpsrc + 1) = lpsrc;
  *(_QWORD *)&v300 = lpsrc + 24;
  *((_QWORD *)&lpsrc + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v300, (__int128 *)&v340, &v341, (std::string *)lpsrc);
  if (v280 < 0)
  {
    std::string::__init_copy_ctor_external(&v342, v278, v147);
  }
  else
  {
    v342.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
    v342.__r_.__value_.__l.__size_ = v147;
    LODWORD(v342.__r_.__value_.__r.__words[2]) = v314[0];
    *(_DWORD *)((char *)&v342.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v314 + 3);
    *((_BYTE *)&v342.__r_.__value_.__s + 23) = v280;
  }
  memset(&v361, 0, sizeof(v361));
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
  v298.__r_.__value_.__s.__data_[8] = 0;
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v361.__r_.__value_.__l.__size_ = v361.__r_.__value_.__r.__words[0];
  v361.__r_.__value_.__r.__words[2] = v361.__r_.__value_.__r.__words[0] + 24;
  v361.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v361.__r_.__value_.__r.__words[2], (__int128 *)&v342, (__int128 *)&v343, (std::string *)v361.__r_.__value_.__l.__data_);
  v148 = v280;
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v283, (uint64_t *)&v313, (const std::string *)&__p, (const std::string *)&v344, (std::string **)&lpsrc, (std::string **)&v361);
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  v361.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v361);
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  if (v163)
  {
    v166 = (unint64_t *)&v163->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  if (SBYTE7(v345) < 0)
    operator delete((void *)v344);
  v168 = (std::__shared_weak_count *)v338.__r_.__value_.__l.__size_;
  if (!v338.__r_.__value_.__l.__size_)
    goto LABEL_356;
  v169 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
  do
    v170 = __ldaxr(v169);
  while (__stlxr(v170 - 1, v169));
  if (!v170)
  {
    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
    std::__shared_weak_count::__release_weak(v168);
    if ((v280 & 0x80000000) == 0)
      goto LABEL_357;
  }
  else
  {
LABEL_356:
    if ((v148 & 0x80000000) == 0)
    {
LABEL_357:
      v361.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
      v361.__r_.__value_.__l.__size_ = v147;
      LODWORD(v361.__r_.__value_.__r.__words[2]) = v314[0];
      *(_DWORD *)((char *)&v361.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v314 + 3);
      *((_BYTE *)&v361.__r_.__value_.__s + 23) = v148;
      goto LABEL_360;
    }
  }
  std::string::__init_copy_ctor_external(&v361, v278, v147);
LABEL_360:
  if (v55 <= 0)
    std::string::operator=(&v361, &__str);
  LOBYTE(v341) = 0;
  DWORD1(v341) = 0;
  BYTE8(v341) = 0;
  *(std::string::size_type *)((char *)&v340.__r_.__value_.__r.__words[1] + 4) = -1;
  HIDWORD(v340.__r_.__value_.__r.__words[2]) = -1;
  LODWORD(v340.__r_.__value_.__r.__words[1]) = v276;
  v340.__r_.__value_.__r.__words[0] = -1;
  v171 = v328;
  std::string::basic_string[abi:ne180100]<0>(&v344, "broadcast");
  Espresso::abstract_engine_factory::make_kernel_priv(v171, (uint64_t)&v326, (uint64_t)&v344, (uint64_t)&v340, &v325);
  if ((_QWORD)__p
  {
    v311 = (uint64_t)v172;
    v312 = *((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v173 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v174 = __ldxr(v173);
      while (__stxr(v174 + 1, v173));
    }
  }
  else
  {
    v311 = 0;
    v312 = 0;
  }
  v175 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v176 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  if (SBYTE7(v345) < 0)
    operator delete((void *)v344);
  if (*((char *)a8 + 23) >= 0)
    v178 = *((unsigned __int8 *)a8 + 23);
  else
    v178 = (size_t)a8[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&v344, v178 + 35);
  if ((SBYTE7(v345) & 0x80u) == 0)
    v179 = &v344;
  else
    v179 = (__int128 *)v344;
  if (v178)
  {
    if (*((char *)a8 + 23) >= 0)
      v180 = a8;
    else
      v180 = *a8;
    memmove(v179, v180, v178);
  }
  strcpy((char *)v179 + v178, "final_mask_broadcast_for_pad_index_");
  std::to_string((std::string *)&__p, a5);
  if ((SBYTE7(v306) & 0x80u) == 0)
    v181 = (const std::string::value_type *)&__p;
  else
    v181 = (const std::string::value_type *)__p;
  if ((SBYTE7(v306) & 0x80u) == 0)
    v182 = BYTE7(v306);
  else
    v182 = *((_QWORD *)&__p + 1);
  v183 = v282;
  v184 = std::string::append((std::string *)&v344, v181, v182);
  v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
  v342.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v342.__r_.__value_.__l.__data_ = v185;
  v184->__r_.__value_.__l.__size_ = 0;
  v184->__r_.__value_.__r.__words[2] = 0;
  v184->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v306) < 0)
    operator delete((void *)__p);
  if (SBYTE7(v345) < 0)
    operator delete((void *)v344);
  v186 = v283[3].i32[2];
  *(_QWORD *)&lpsrc = v186;
  *(_QWORD *)&v344 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a2 + 56, v186, &lpsrc)[3];
  v187 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 184), (_QWORD *)v344, (__int128 **)&v344);
  v188 = *(_OWORD *)(v187 + 72);
  __p = *(_OWORD *)(v187 + 56);
  v306 = v188;
  v189 = (const void *)*((_QWORD *)v187 + 12);
  v307 = *((_QWORD *)v187 + 11);
  v308 = 0;
  v309 = 0;
  v310 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v308, v189, *((_QWORD *)v187 + 13), (uint64_t)(*((_QWORD *)v187 + 13) - (_QWORD)v189) >> 2);
  v190 = v311;
  v344 = __p;
  v345 = v306;
  *(_QWORD *)v346 = v307;
  memset(&v346[8], 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v346[8], v308, (uint64_t)v309, (v309 - (_BYTE *)v308) >> 2);
  memset(&v338, 0, sizeof(v338));
  v336.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
  v336.__r_.__value_.__s.__data_[8] = 0;
  v338.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  v338.__r_.__value_.__l.__size_ = v338.__r_.__value_.__r.__words[0];
  v338.__r_.__value_.__r.__words[2] = v338.__r_.__value_.__r.__words[0] + 64;
  v338.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v338.__r_.__value_.__r.__words[2], &v344, (__int128 *)&v346[32], (uint64_t)v338.__r_.__value_.__l.__data_);
  v191 = v280;
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v190 + 64))(&v298, v190, &v338);
  v192 = *(_QWORD *)(v298.__r_.__value_.__r.__words[0] + 32);
  v193 = *(_OWORD *)(v298.__r_.__value_.__r.__words[0] + 16);
  lpsrc = *(_OWORD *)v298.__r_.__value_.__l.__data_;
  v300 = v193;
  v301 = v192;
  v302 = 0;
  v303 = 0;
  v304 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v302, *(const void **)(v298.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v298.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v298.__r_.__value_.__r.__words[0] + 48) - *(_QWORD *)(v298.__r_.__value_.__r.__words[0] + 40)) >> 2);
  v336.__r_.__value_.__r.__words[0] = (std::string::size_type)&v298;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v336);
  v336.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v336);
  if (*(_QWORD *)&v346[8])
  {
    *(_QWORD *)&v346[16] = *(_QWORD *)&v346[8];
    operator delete(*(void **)&v346[8]);
  }
  if ((_DWORD)__p == (_DWORD)lpsrc
    && *(_QWORD *)((char *)&__p + 4) == *(_QWORD *)((char *)&lpsrc + 4)
    && HIDWORD(__p) == HIDWORD(lpsrc))
  {
    if (v55 <= 0 && (_DWORD)v306 == (_DWORD)v300)
    {
      Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::remove_layer(v283);
      v194 = v328;
      std::string::basic_string[abi:ne180100]<0>(&v298, "convolution");
      v349 = 0x1000100010001;
      v359 = 0;
      v360 = 0;
      v356 = 0;
      v355 = 0;
      v344 = 0uLL;
      v353 = 0;
      *(_QWORD *)&v346[32] = _D8;
      *(_QWORD *)&v346[24] = 0xFFFFFFFF00000000;
      v352 = 1;
      v354 = 0x10000;
      v345 = 0uLL;
      v357 = 0;
      v358 = 1;
      *(_OWORD *)&v346[8] = v274;
      v351 = v277;
      *(_QWORD *)v346 = 1;
      *(_QWORD *)&v346[40] = 0;
      v350 = 0;
      v347 = 131074;
      v348 = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v194, (uint64_t)&v326, (uint64_t)&v298, (uint64_t)&v344, &v325);
      if (v338.__r_.__value_.__r.__words[0]
      {
        v296 = (uint64_t)v195;
        v297 = v338.__r_.__value_.__l.__size_;
        if (v338.__r_.__value_.__l.__size_)
        {
          v196 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }
      }
      else
      {
        v296 = 0;
        v297 = 0;
      }
      v217 = (std::__shared_weak_count *)v338.__r_.__value_.__l.__size_;
      if (v338.__r_.__value_.__l.__size_)
      {
        v218 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
        }
      }
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v298.__r_.__value_.__l.__data_);
      v220 = v296;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v296 + 472))(&v294, v296);
      v221 = v294;
      v222 = *(_QWORD *)(v294 + 24);
      *(_QWORD *)v222 = 0x3F80000000000000;
      *(_DWORD *)(v222 + 8) = 0;
      v292 = v221;
      v293 = v295;
      if (v295)
      {
        v223 = (unint64_t *)&v295->__shared_owners_;
        do
          v224 = __ldxr(v223);
        while (__stxr(v224 + 1, v223));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v220 + 400))(v220, &v292);
      v225 = v293;
      if (v293)
      {
        v226 = (unint64_t *)&v293->__shared_owners_;
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
      }
      v228 = v296;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v296 + 488))(&v290, v296);
      v229 = v290;
      **(_DWORD **)(v290 + 16) = 1065353216;
      v288 = v229;
      v289 = v291;
      if (v291)
      {
        v230 = (unint64_t *)&v291->__shared_owners_;
        do
          v231 = __ldxr(v230);
        while (__stxr(v231 + 1, v230));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v228 + 392))(v228, &v288);
      v232 = v289;
      if (v289)
      {
        v233 = (unint64_t *)&v289->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
      if (*((char *)a8 + 23) >= 0)
        v235 = *((unsigned __int8 *)a8 + 23);
      else
        v235 = (size_t)a8[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v298, v235 + 44);
      if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v236 = &v298;
      else
        v236 = (std::string *)v298.__r_.__value_.__r.__words[0];
      if (v235)
      {
        if (*((char *)a8 + 23) >= 0)
          v237 = a8;
        else
          v237 = *a8;
        memmove(v236, v237, v235);
      }
      v238 = (char *)v236 + v235;
      *(_OWORD *)v238 = v273[2];
      *((_OWORD *)v238 + 1) = v273[1];
      *(_OWORD *)(v238 + 28) = v273[0];
      v238[44] = 0;
      std::to_string(&v338, a5);
      if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v239 = &v338;
      else
        v239 = (std::string *)v338.__r_.__value_.__r.__words[0];
      if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v240 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
      else
        v240 = v338.__r_.__value_.__l.__size_;
      v241 = std::string::append(&v298, (const std::string::value_type *)v239, v240);
      v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
      *(_QWORD *)&v345 = *((_QWORD *)&v241->__r_.__value_.__l + 2);
      v344 = v242;
      v241->__r_.__value_.__l.__size_ = 0;
      v241->__r_.__value_.__r.__words[2] = 0;
      v241->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v338.__r_.__value_.__l.__data_);
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v298.__r_.__value_.__l.__data_);
      v286 = v296;
      v287 = (std::__shared_weak_count *)v297;
      if (v297)
      {
        v243 = (unint64_t *)(v297 + 8);
        do
          v244 = __ldxr(v243);
        while (__stxr(v244 + 1, v243));
      }
      std::string::basic_string[abi:ne180100]<0>(&v298, "convolution");
      if (v183 < 0)
      {
        std::string::__init_copy_ctor_external(&v336, v281, size);
      }
      else
      {
        v336.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
        v336.__r_.__value_.__l.__size_ = size;
        LODWORD(v336.__r_.__value_.__r.__words[2]) = v321[0];
        *(_DWORD *)((char *)&v336.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v321 + 3);
        *((_BYTE *)&v336.__r_.__value_.__s + 23) = v183;
      }
      memset(&v338, 0, sizeof(v338));
      v334.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
      v334.__r_.__value_.__s.__data_[8] = 0;
      v338.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v338.__r_.__value_.__l.__size_ = v338.__r_.__value_.__r.__words[0];
      v338.__r_.__value_.__r.__words[2] = v338.__r_.__value_.__r.__words[0] + 24;
      v338.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v338.__r_.__value_.__r.__words[2], (__int128 *)&v336, (__int128 *)&v337, (std::string *)v338.__r_.__value_.__l.__data_);
      if (*(char *)(v275 + 23) < 0)
        std::string::__init_copy_ctor_external(&v332, *(const std::string::value_type **)v275, *(_QWORD *)(v275 + 8));
      else
        v332 = *(std::string *)v275;
      memset(&v334, 0, sizeof(v334));
      v330 = &v334;
      v331 = 0;
      v334.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v334.__r_.__value_.__l.__size_ = v334.__r_.__value_.__r.__words[0];
      v334.__r_.__value_.__r.__words[2] = v334.__r_.__value_.__r.__words[0] + 24;
      v334.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v334.__r_.__value_.__r.__words[2], (__int128 *)&v332, (__int128 *)&v333, (std::string *)v334.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v283, &v286, &v298, (const std::string *)&v344, (std::string **)&v338, (std::string **)&v334);
      v330 = &v334;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v330);
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      v334.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v334);
      if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v336.__r_.__value_.__l.__data_);
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v298.__r_.__value_.__l.__data_);
      v245 = v287;
      if (v287)
      {
        v246 = (unint64_t *)&v287->__shared_owners_;
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
      }
      if (SBYTE7(v345) < 0)
        operator delete((void *)v344);
      v248 = v291;
      if (v291)
      {
        v249 = (unint64_t *)&v291->__shared_owners_;
        do
          v250 = __ldaxr(v249);
        while (__stlxr(v250 - 1, v249));
        if (!v250)
        {
          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
          std::__shared_weak_count::__release_weak(v248);
        }
      }
      v251 = v295;
      if (v295)
      {
        v252 = (unint64_t *)&v295->__shared_owners_;
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      v254 = (std::__shared_weak_count *)v297;
      if (!v297)
        goto LABEL_439;
      v255 = (unint64_t *)(v297 + 8);
      do
        v256 = __ldaxr(v255);
      while (__stlxr(v256 - 1, v255));
LABEL_606:
      if (!v256)
      {
        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
        v207 = v254;
        goto LABEL_438;
      }
      goto LABEL_439;
    }
    if (v55 >= 1 && (_DWORD)v306 == (_DWORD)v300)
    {
      Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::remove_layer(v283);
      v198 = v328;
      std::string::basic_string[abi:ne180100]<0>(&v298, "general_padding");
      memset(v346, 0, 44);
      v344 = 0u;
      v345 = 0u;
      WORD4(v344) = v55;
      WORD5(v344) = v55;
      Espresso::abstract_engine_factory::make_kernel_priv(v198, (uint64_t)&v326, (uint64_t)&v298, (uint64_t)&v344, &v325);
      if (v338.__r_.__value_.__r.__words[0]
      {
        v296 = (uint64_t)v199;
        v297 = v338.__r_.__value_.__l.__size_;
        if (v338.__r_.__value_.__l.__size_)
        {
          v200 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 1, v200));
        }
      }
      else
      {
        v296 = 0;
        v297 = 0;
      }
      v257 = (std::__shared_weak_count *)v338.__r_.__value_.__l.__size_;
      if (v338.__r_.__value_.__l.__size_)
      {
        v258 = (unint64_t *)(v338.__r_.__value_.__l.__size_ + 8);
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v298.__r_.__value_.__l.__data_);
      if (*((char *)a8 + 23) >= 0)
        v260 = *((unsigned __int8 *)a8 + 23);
      else
        v260 = (size_t)a8[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v298, v260 + 33);
      if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v261 = &v298;
      else
        v261 = (std::string *)v298.__r_.__value_.__r.__words[0];
      if (v260)
      {
        if (*((char *)a8 + 23) >= 0)
          v262 = a8;
        else
          v262 = *a8;
        memmove(v261, v262, v260);
      }
      strcpy((char *)v261 + v260, "final_zero_padding_for_pad_index_");
      std::to_string(&v338, a5);
      if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v263 = &v338;
      else
        v263 = (std::string *)v338.__r_.__value_.__r.__words[0];
      if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v264 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
      else
        v264 = v338.__r_.__value_.__l.__size_;
      v265 = std::string::append(&v298, (const std::string::value_type *)v263, v264);
      v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
      *(_QWORD *)&v345 = *((_QWORD *)&v265->__r_.__value_.__l + 2);
      v344 = v266;
      v265->__r_.__value_.__l.__size_ = 0;
      v265->__r_.__value_.__r.__words[2] = 0;
      v265->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v338.__r_.__value_.__l.__data_);
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v298.__r_.__value_.__l.__data_);
      v267 = (std::__shared_weak_count *)v297;
      v285[0] = v296;
      v285[1] = v297;
      if (v297)
      {
        v268 = (unint64_t *)(v297 + 8);
        do
          v269 = __ldxr(v268);
        while (__stxr(v269 + 1, v268));
      }
      std::string::basic_string[abi:ne180100]<0>(&v298, "general_padding");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v336, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v336 = __str;
      memset(&v338, 0, sizeof(v338));
      v334.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
      v334.__r_.__value_.__s.__data_[8] = 0;
      v338.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v338.__r_.__value_.__l.__size_ = v338.__r_.__value_.__r.__words[0];
      v338.__r_.__value_.__r.__words[2] = v338.__r_.__value_.__r.__words[0] + 24;
      v338.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v338.__r_.__value_.__r.__words[2], (__int128 *)&v336, (__int128 *)&v337, (std::string *)v338.__r_.__value_.__l.__data_);
      if (*(char *)(v275 + 23) < 0)
        std::string::__init_copy_ctor_external(&v332, *(const std::string::value_type **)v275, *(_QWORD *)(v275 + 8));
      else
        v332 = *(std::string *)v275;
      memset(&v334, 0, sizeof(v334));
      v330 = &v334;
      v331 = 0;
      v334.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v334.__r_.__value_.__l.__size_ = v334.__r_.__value_.__r.__words[0];
      v334.__r_.__value_.__r.__words[2] = v334.__r_.__value_.__r.__words[0] + 24;
      v334.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v334.__r_.__value_.__r.__words[2], (__int128 *)&v332, (__int128 *)&v333, (std::string *)v334.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v283, v285, &v298, (const std::string *)&v344, (std::string **)&v338, (std::string **)&v334);
      v330 = &v334;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v330);
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      v334.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v334);
      if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v336.__r_.__value_.__l.__data_);
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v298.__r_.__value_.__l.__data_);
      if (v267)
      {
        v270 = (unint64_t *)&v267->__shared_owners_;
        do
          v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
          std::__shared_weak_count::__release_weak(v267);
        }
      }
      if (SBYTE7(v345) < 0)
        operator delete((void *)v344);
      v254 = (std::__shared_weak_count *)v297;
      if (!v297)
        goto LABEL_439;
      v272 = (unint64_t *)(v297 + 8);
      do
        v256 = __ldaxr(v272);
      while (__stlxr(v256 - 1, v272));
      goto LABEL_606;
    }
  }
  v202 = (std::__shared_weak_count *)v312;
  v284[0] = v190;
  v284[1] = v312;
  if (v312)
  {
    v203 = (unint64_t *)(v312 + 8);
    do
      v204 = __ldxr(v203);
    while (__stxr(v204 + 1, v203));
  }
  std::string::basic_string[abi:ne180100]<0>(&v344, "broadcast");
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v361.__r_.__value_.__l.__data_, v361.__r_.__value_.__l.__size_);
  else
    v338 = v361;
  memset(&v298, 0, sizeof(v298));
  v336.__r_.__value_.__r.__words[0] = (std::string::size_type)&v298;
  v336.__r_.__value_.__s.__data_[8] = 0;
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v298.__r_.__value_.__l.__size_ = v298.__r_.__value_.__r.__words[0];
  v298.__r_.__value_.__r.__words[2] = v298.__r_.__value_.__r.__words[0] + 24;
  v298.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v298.__r_.__value_.__r.__words[2], (__int128 *)&v338, (__int128 *)&v339, (std::string *)v298.__r_.__value_.__l.__data_);
  if (*(char *)(v275 + 23) < 0)
    std::string::__init_copy_ctor_external(&v334, *(const std::string::value_type **)v275, *(_QWORD *)(v275 + 8));
  else
    v334 = *(std::string *)v275;
  memset(&v336, 0, sizeof(v336));
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
  v332.__r_.__value_.__s.__data_[8] = 0;
  v336.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v336.__r_.__value_.__l.__size_ = v336.__r_.__value_.__r.__words[0];
  v336.__r_.__value_.__r.__words[2] = v336.__r_.__value_.__r.__words[0] + 24;
  v336.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v336.__r_.__value_.__r.__words[2], (__int128 *)&v334, (__int128 *)&v335, (std::string *)v336.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v283, v284, (const std::string *)&v344, &v342, (std::string **)&v298, (std::string **)&v336);
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  v336.__r_.__value_.__r.__words[0] = (std::string::size_type)&v298;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v336);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  if (SBYTE7(v345) < 0)
    operator delete((void *)v344);
  if (v202)
  {
    v205 = (unint64_t *)&v202->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      v207 = v202;
LABEL_438:
      std::__shared_weak_count::__release_weak(v207);
    }
  }
LABEL_439:
  if (v302)
  {
    v303 = v302;
    operator delete(v302);
  }
  if (v308)
  {
    v309 = v308;
    operator delete(v308);
  }
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  v208 = (std::__shared_weak_count *)v312;
  if (v312)
  {
    v209 = (unint64_t *)(v312 + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v361.__r_.__value_.__l.__data_);
    if ((v191 & 0x80000000) == 0)
      goto LABEL_452;
  }
  else if ((v191 & 0x80000000) == 0)
  {
    goto LABEL_452;
  }
  operator delete(v278);
LABEL_452:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v183 & 0x80000000) == 0)
      goto LABEL_454;
  }
  else if ((v183 & 0x80000000) == 0)
  {
    goto LABEL_454;
  }
  operator delete(v281);
LABEL_454:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v211 = v327;
  if (v327)
  {
    v212 = (unint64_t *)&v327->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v329;
  if (v329)
  {
    v215 = (unint64_t *)&v329->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
}

void sub_1915BB4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,int a25,void *a26,int a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  char a68;
  uint64_t v68;

  STACK[0x2C0] = (unint64_t)&STACK[0x300];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (a51 < 0)
    operator delete(a46);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  if (*(char *)(v68 - 153) < 0)
    operator delete(*(void **)(v68 - 176));
  if (a25 < 0)
    operator delete(a22);
  if (*(char *)(v68 - 121) < 0)
    operator delete(*(void **)(v68 - 144));
  if (a28 < 0)
    operator delete(a26);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1915BBEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6, int a7)
{
  char *v14;
  std::string *v15;
  uint64_t (***v16)(_QWORD);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::string __p;
  int v26;
  char *v27;
  std::__shared_weak_count *v28;
  _OWORD v29[3];

  v26 = 0;
  memset(v29, 0, sizeof(v29));
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_1E2DBF0D0;
  *((_QWORD *)v14 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  v15 = (std::string *)(v14 + 40);
  *(_OWORD *)(v14 + 88) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((_QWORD *)v14 + 30) = 0;
  v27 = v14 + 24;
  v28 = (std::__shared_weak_count *)v14;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v14 + 11, *a2, a2[1]);
  std::string::operator=(v15, a4);
  std::string::operator=((std::string *)(v27 + 40), a3);
  v16 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v17 = v27;
  *((_DWORD *)v27 + 2) = (**v16)(v16);
  v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(_QWORD *)(v18 + 208));
    else
      __p = *(std::string *)(v18 + 200);
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v19)
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(_QWORD *)v19 + 12);
  }
  if (v29 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v29, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v29[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v29[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v26 = a1[3].i32[2] - a7;
  v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v26);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v26);
    v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v22 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1915BC170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context17transform_softmaxEPNS_3netEPS1__block_invoke_2(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  void **v13;
  _QWORD *v14;
  uint64_t **v15;
  char *v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 *v41;
  __int128 v42;
  uint64_t i;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 *v54;
  __int128 v55;
  uint64_t j;
  uint64_t v57[2];
  uint64_t v58[2];
  uint64_t v59[2];
  uint64_t v60[2];
  uint64_t v61[2];
  uint64_t v62[2];
  uint64_t v63[2];
  void **v64[3];
  std::string v65;
  uint64_t v66[2];
  std::string v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  int v74;
  int v75;
  std::string v76;
  uint64_t v77;
  uint64_t v78;
  std::string v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  int v86;
  int v87;
  std::string v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[5];
  char v92;
  std::string v93;
  uint64_t v94;
  uint64_t v95;
  void *lpsrc;
  uint64_t v97;
  uint64_t v98;
  char v99;
  int v100;
  int v101;
  std::string v102;
  uint64_t v103;
  uint64_t v104;
  void *__p[2];
  uint64_t v106;
  char v107;
  int v108;
  int v109;
  std::string v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  char v117;
  int v118;
  char v119;
  std::string __s;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[5];
  char v124;
  _QWORD v125[2];
  _OWORD v126[2];
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  void ***v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
    if (!*(_DWORD *)(v6 + 20) && ((*(_BYTE *)(v6 + 26) | *(_BYTE *)(v6 + 24)) & 1) == 0)
    {
      v7 = *(_QWORD *)(a1 + 40) + 96;
      v8 = a2[3].i32[2];
      *(_QWORD *)&v126[0] = v8;
      v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v8, v126);
      v10 = *(_QWORD *)(a1 + 40) + 56;
      v11 = a2[3].i32[2];
      *(_QWORD *)&v126[0] = v11;
      v12 = (void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, v126);
      if (v9[4] - v9[3] == 24)
      {
        v13 = v12;
        v14 = v12[3];
        if ((_BYTE *)v12[4] - (_BYTE *)v14 == 24)
        {
          v15 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
          __p[0] = v14;
          v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, v14, (__int128 **)__p);
          v17 = *(_OWORD *)(v16 + 72);
          v126[0] = *(_OWORD *)(v16 + 56);
          v126[1] = v17;
          v18 = (const void *)*((_QWORD *)v16 + 12);
          v127 = *((_QWORD *)v16 + 11);
          v128 = 0;
          v129 = 0;
          v130 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v128, v18, *((_QWORD *)v16 + 13), (uint64_t)(*((_QWORD *)v16 + 13) - (_QWORD)v18) >> 2);
          if (SDWORD2(v126[0]) <= 4096)
          {
            v19 = *(_QWORD *)(a1 + 40);
            v20 = *(_QWORD *)(v19 + 24);
            v125[0] = *(_QWORD *)(v19 + 16);
            v125[1] = v20;
            if (v20)
            {
              v21 = (unint64_t *)(v20 + 8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
              v19 = *(_QWORD *)(a1 + 40);
            }
            __p[0] = v13[3];
            v23 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 184), (_QWORD *)__p[0], (__int128 **)__p)+ 16);
            v123[3] = 0;
            v123[2] = 0;
            v123[4] = 0xFFFFFFFF00000000;
            v124 = 0;
            v123[0] = 0x358637BD00000009;
            v123[1] = 0x100000004;
            Espresso::abstract_engine_factory::shared(&v82);
            v24 = v82;
            std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
            LODWORD(v70) = (***(uint64_t (****)(_QWORD))(v125[0] + 8))(*(_QWORD *)(v125[0] + 8));
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v24, (uint64_t)v125, (uint64_t)__p, (uint64_t)v123, (int *)&v70);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reduce_kernel,Espresso::base_kernel>(&v121, lpsrc, v97);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&lpsrc);
            if (SHIBYTE(v106) < 0)
              operator delete(__p[0]);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v82);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__SOFTMAX_max_k", (const void **)v13[3], &__s);
            v117 = 0;
            v118 = 0;
            v119 = 0;
            v113 = 0;
            v116 = -1;
            v114 = v23;
            v115 = 0;
            Espresso::abstract_engine_factory::shared(&v82);
            v25 = v82;
            std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
            LODWORD(v70) = (***(uint64_t (****)(_QWORD))(v125[0] + 8))(*(_QWORD *)(v125[0] + 8));
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v25, (uint64_t)v125, (uint64_t)__p, (uint64_t)&v113, (int *)&v70);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_broadcast_kernel,Espresso::base_kernel>(&v111, lpsrc, v97);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&lpsrc);
            if (SHIBYTE(v106) < 0)
              operator delete(__p[0]);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v82);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_bcast", (const void **)&__s.__r_.__value_.__l.__data_, &v110);
            v106 = 897988541;
            v107 = 0;
            v109 = 0;
            v108 = 0;
            __p[1] = (void *)1065353216;
            __p[0] = (void *)33;
            Espresso::abstract_engine_factory::shared(&v70);
            v26 = v70;
            std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
            LODWORD(v132.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v125[0] + 8))(*(_QWORD *)(v125[0] + 8));
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v26, (uint64_t)v125, (uint64_t)&lpsrc, (uint64_t)__p, (int *)&v132);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v103, v82, v83);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v82);
            if (SHIBYTE(v98) < 0)
              operator delete(lpsrc);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v70);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__SOFTMAX_minus_max", (const void **)v13[3], &v102);
            v98 = 897988541;
            v99 = 0;
            v101 = 0;
            v100 = 0;
            v97 = 1065353216;
            lpsrc = (void *)27;
            Espresso::abstract_engine_factory::shared(&v132);
            v27 = v132.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v82, "elementwise");
            LODWORD(v91[0]) = (***(uint64_t (****)(_QWORD))(v125[0] + 8))(*(_QWORD *)(v125[0] + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v27, (uint64_t)v125, (uint64_t)&v82, (uint64_t)&lpsrc, (int *)v91);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v94, v70, v71);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v70);
            if (SHIBYTE(v84) < 0)
              operator delete(v82);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_exp", (const void **)&v102.__r_.__value_.__l.__data_, &v93);
            v91[3] = 0;
            v91[2] = 0;
            v91[4] = 0xFFFFFFFF00000000;
            v92 = 0;
            v91[0] = 0x358637BD00000000;
            v91[1] = 0x100000004;
            Espresso::abstract_engine_factory::shared(&v132);
            v28 = v132.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v82, "reduce");
            LODWORD(v88.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v125[0] + 8))(*(_QWORD *)(v125[0] + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v28, (uint64_t)v125, (uint64_t)&v82, (uint64_t)v91, (int *)&v88);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reduce_kernel,Espresso::base_kernel>(&v89, v70, v71);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v70);
            if (SHIBYTE(v84) < 0)
              operator delete(v82);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__SOFTMAX_normalizer", (const void **)v13[3], &v88);
            v84 = 897988541;
            v85 = 0;
            v87 = 0;
            v86 = 0;
            v82 = (void *)10;
            v83 = 1065353216;
            Espresso::abstract_engine_factory::shared(&v79);
            v29 = v79.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v70, "elementwise");
            LODWORD(v76.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v125[0] + 8))(*(_QWORD *)(v125[0] + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v29, (uint64_t)v125, (uint64_t)&v70, (uint64_t)&v82, (int *)&v76);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,Espresso::base_kernel>(&v80, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
            if (SHIBYTE(v72) < 0)
              operator delete(v70);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v79);
            v30 = v80;
            if (!v80)
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Created elementwise kernel does not cast as expected ANE kernel.");
            *(_BYTE *)(v80 + 616) = 1;
            *(_QWORD *)(v30 + 624) = v23;
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_inverse", (const void **)&v88.__r_.__value_.__l.__data_, &v79);
            Espresso::abstract_engine_factory::shared(&v76);
            v31 = v76.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v70, "broadcast");
            LODWORD(v67.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v125[0] + 8))(*(_QWORD *)(v125[0] + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v31, (uint64_t)v125, (uint64_t)&v70, (uint64_t)&v113, (int *)&v67);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_broadcast_kernel,Espresso::base_kernel>(&v77, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
            if (SHIBYTE(v72) < 0)
              operator delete(v70);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v76);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_bcast", (const void **)&v79.__r_.__value_.__l.__data_, &v76);
            v72 = 897988541;
            v73 = 0;
            v75 = 0;
            v74 = 0;
            v70 = (void *)1;
            v71 = 1065353216;
            Espresso::abstract_engine_factory::shared(&v65);
            v32 = v65.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v132, "elementwise");
            LODWORD(v135.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v125[0] + 8))(*(_QWORD *)(v125[0] + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v32, (uint64_t)v125, (uint64_t)&v132, (uint64_t)&v70, (int *)&v135);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v68, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v67);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__SOFTMAX_output", (const void **)v13[3], &v67);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::remove_layer(a2);
            v66[0] = v121;
            v66[1] = v122;
            if (v122)
            {
              v33 = (unint64_t *)(v122 + 8);
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }
            std::string::basic_string[abi:ne180100]<0>(&v132, "reduce");
            v35 = (__int128 *)v13[3];
            if (*((char *)v35 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
            }
            else
            {
              v36 = *v35;
              v135.__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
              *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v36;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v65, (__int128 *)&v135, 1uLL);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v134 = __s;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v66, &v132, &__s, (std::string **)&v65, (std::string **)v64);
            v131 = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v64[0] = (void **)&v65;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v66);
            v63[0] = v111;
            v63[1] = v112;
            if (v112)
            {
              v37 = (unint64_t *)(v112 + 8);
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            std::string::basic_string[abi:ne180100]<0>(&v132, "broadcast");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v135, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v135 = __s;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v65, (__int128 *)&v135, 1uLL);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
            else
              v134 = v110;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v63, &v132, &v110, (std::string **)&v65, (std::string **)v64);
            v131 = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v64[0] = (void **)&v65;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v63);
            v62[0] = v103;
            v62[1] = v104;
            if (v104)
            {
              v39 = (unint64_t *)(v104 + 8);
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            std::string::basic_string[abi:ne180100]<0>(&v65, "elementwise");
            v41 = (__int128 *)v13[3];
            if (*((char *)v41 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v41, *((_QWORD *)v41 + 1));
            }
            else
            {
              v42 = *v41;
              v132.__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
              *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v42;
            }
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v133, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
            else
              v133 = v110;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v135, (__int128 *)&v132, 2uLL);
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
            else
              v134 = v102;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v62, &v65, &v102, (std::string **)&v135, (std::string **)v64);
            v131 = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v64[0] = (void **)&v135;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
            for (i = 0; i != -6; i -= 3)
            {
              if (SHIBYTE(v133.__r_.__value_.__r.__words[i + 2]) < 0)
                operator delete(*(void **)((char *)&v132 + i * 8 + 24));
            }
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v62);
            v61[0] = v94;
            v61[1] = v95;
            if (v95)
            {
              v44 = (unint64_t *)(v95 + 8);
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            std::string::basic_string[abi:ne180100]<0>(&v132, "elementwise");
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v135, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
            else
              v135 = v102;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v65, (__int128 *)&v135, 1uLL);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
            else
              v134 = v93;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v61, &v132, &v93, (std::string **)&v65, (std::string **)v64);
            v131 = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v64[0] = (void **)&v65;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v61);
            v60[0] = v89;
            v60[1] = v90;
            if (v90)
            {
              v46 = (unint64_t *)(v90 + 8);
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            std::string::basic_string[abi:ne180100]<0>(&v132, "reduce");
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v135, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
            else
              v135 = v93;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v65, (__int128 *)&v135, 1uLL);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
            else
              v134 = v88;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v60, &v132, &v88, (std::string **)&v65, (std::string **)v64);
            v131 = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v64[0] = (void **)&v65;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v60);
            v59[0] = v80;
            v59[1] = v81;
            if (v81)
            {
              v48 = (unint64_t *)(v81 + 8);
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            std::string::basic_string[abi:ne180100]<0>(&v132, "elementwise");
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v135, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
            else
              v135 = v88;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v65, (__int128 *)&v135, 1uLL);
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
            else
              v134 = v79;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v59, &v132, &v79, (std::string **)&v65, (std::string **)v64);
            v131 = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v64[0] = (void **)&v65;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v59);
            v58[0] = v77;
            v58[1] = v78;
            if (v78)
            {
              v50 = (unint64_t *)(v78 + 8);
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            std::string::basic_string[abi:ne180100]<0>(&v132, "broadcast");
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v135, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
            else
              v135 = v79;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v65, (__int128 *)&v135, 1uLL);
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v134, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
            else
              v134 = v76;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v58, &v132, &v76, (std::string **)&v65, (std::string **)v64);
            v131 = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v64[0] = (void **)&v65;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v58);
            v57[0] = v68;
            v57[1] = v69;
            if (v69)
            {
              v52 = (unint64_t *)(v69 + 8);
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            std::string::basic_string[abi:ne180100]<0>(&v65, "elementwise");
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v132, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
            else
              v132 = v93;
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v133, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
            else
              v133 = v76;
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v135, (__int128 *)&v132, 2uLL);
            v54 = (__int128 *)v9[3];
            if (*((char *)v54 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v54, *((_QWORD *)v54 + 1));
            }
            else
            {
              v55 = *v54;
              v134.__r_.__value_.__r.__words[2] = *((_QWORD *)v54 + 2);
              *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v55;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)&v134, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v57, &v65, &v67, (std::string **)&v135, (std::string **)v64);
            v131 = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            v64[0] = (void **)&v135;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
            for (j = 0; j != -6; j -= 3)
            {
              if (SHIBYTE(v133.__r_.__value_.__r.__words[j + 2]) < 0)
                operator delete(*(void **)((char *)&v132 + j * 8 + 24));
            }
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v57);
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v67.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v68);
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v76.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v77);
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v79.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v80);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v88.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v89);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v93.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v94);
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v102.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v103);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v111);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v121);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v125);
          }
          if (v128)
          {
            v129 = v128;
            operator delete(v128);
          }
        }
      }
    }
  }
}

void sub_1915BD468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  void *a72;
  char a73;
  char a74;
  void *a75;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  void *v79;

  a24 = v75 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  v77 = 0;
  v78 = v75 - 208;
  while (1)
  {
    if (*(char *)(v78 + v77 + 47) < 0)
      operator delete(*(void **)(v78 + v77 + 24));
    v77 -= 24;
    if (v77 == -48)
    {
      if (a32 < 0)
        operator delete(__p);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      if (a40 < 0)
        operator delete(a35);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
      if (a55 < 0)
        operator delete(a50);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
      if (a63 < 0)
        operator delete(a58);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
      if (a73 < 0)
        operator delete(a72);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a74);
      if (SLOBYTE(STACK[0x20F]) < 0)
        operator delete(a75);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
      if (SLOBYTE(STACK[0x26F]) < 0)
        operator delete((void *)STACK[0x258]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
      if (SLOBYTE(STACK[0x2CF]) < 0)
        operator delete((void *)STACK[0x2B8]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
      if (SLOBYTE(STACK[0x31F]) < 0)
        operator delete((void *)STACK[0x308]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x320]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
      v79 = (void *)STACK[0x398];
      if (STACK[0x398])
      {
        STACK[0x3A0] = (unint64_t)v79;
        operator delete(v79);
      }
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reduce_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_broadcast_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::single_match_state<Espresso::generic_softmax_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1915BDDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915BE058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_deconvolution_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::deconvolution_kernel,Espresso::generic_deconvolution_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_crop_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::vector<Espresso::layer_shape>::vector[abi:ne180100](_QWORD *a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(v4, a2, &a2[4 * a3], a1[1]);
  }
  return a1;
}

void sub_1915BE254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_deconvolution_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  int v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2] - 1;
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915BE4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void _ZZZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1_EUb_ENK3__1clEm(char **a1, unint64_t a2)
{
  unint64_t v2;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;
  uint64_t v26;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 >= 2)
  {
    v2 = a2;
    v4 = 0;
    do
    {
      v5 = (unint64_t)a1[2];
      if ((v2 & 1) != 0)
      {
        if ((unint64_t)v4 >= v5)
        {
          v13 = *a1;
          v14 = (v4 - *a1) >> 4;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v16 = v5 - (_QWORD)v13;
          if (v16 >> 3 > v15)
            v15 = v16 >> 3;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
            v17 = 0xFFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            if (v17 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v18 = (char *)operator new(16 * v17);
          }
          else
          {
            v18 = 0;
          }
          v21 = &v18[16 * v14];
          *(_QWORD *)v21 = 1;
          *((_QWORD *)v21 + 1) = v2;
          v22 = v21;
          if (v4 != v13)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v4 - 1);
              v22 -= 16;
              v4 -= 16;
            }
            while (v4 != v13);
            v4 = *a1;
          }
          v6 = v21 + 16;
          *a1 = v22;
          a1[1] = v21 + 16;
          a1[2] = &v18[16 * v17];
          if (v4)
            operator delete(v4);
        }
        else
        {
          *(_QWORD *)v4 = 1;
          *((_QWORD *)v4 + 1) = v2;
          v6 = v4 + 16;
        }
        a1[1] = v6;
        ++v2;
      }
      else
      {
        if ((unint64_t)v4 >= v5)
        {
          v7 = *a1;
          v8 = (v4 - *a1) >> 4;
          v9 = v8 + 1;
          if ((unint64_t)(v8 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v10 = v5 - (_QWORD)v7;
          if (v10 >> 3 > v9)
            v9 = v10 >> 3;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
            v11 = 0xFFFFFFFFFFFFFFFLL;
          else
            v11 = v9;
          if (v11)
          {
            if (v11 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v12 = (char *)operator new(16 * v11);
          }
          else
          {
            v12 = 0;
          }
          v19 = &v12[16 * v8];
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = v2;
          v20 = v19;
          if (v4 != v7)
          {
            do
            {
              *((_OWORD *)v20 - 1) = *((_OWORD *)v4 - 1);
              v20 -= 16;
              v4 -= 16;
            }
            while (v4 != v7);
            v4 = *a1;
          }
          v6 = v19 + 16;
          *a1 = v20;
          a1[1] = v19 + 16;
          a1[2] = &v12[16 * v11];
          if (v4)
            operator delete(v4);
        }
        else
        {
          *(_QWORD *)v4 = 0;
          *((_QWORD *)v4 + 1) = v2;
          v6 = v4 + 16;
        }
        a1[1] = v6;
        v2 >>= 1;
      }
      v4 = v6;
    }
    while (v2 > 1);
    v23 = *a1;
    if (*a1 != v6)
    {
      for (i = v6 - 16; v23 < i; i -= 16)
      {
        v25 = *(_DWORD *)v23;
        *(_DWORD *)v23 = *(_DWORD *)i;
        *(_DWORD *)i = v25;
        v26 = *((_QWORD *)v23 + 1);
        *((_QWORD *)v23 + 1) = *((_QWORD *)i + 1);
        *((_QWORD *)i + 1) = v26;
        v23 += 16;
      }
    }
  }
}

void sub_1915BE76C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::broadcast_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6, int a7)
{
  char *v14;
  std::string *v15;
  uint64_t (***v16)(_QWORD);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::string __p;
  int v26;
  char *v27;
  std::__shared_weak_count *v28;
  _OWORD v29[3];

  v26 = 0;
  memset(v29, 0, sizeof(v29));
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_1E2DBF0D0;
  *((_QWORD *)v14 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  v15 = (std::string *)(v14 + 40);
  *(_OWORD *)(v14 + 88) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((_QWORD *)v14 + 30) = 0;
  v27 = v14 + 24;
  v28 = (std::__shared_weak_count *)v14;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v14 + 11, *a2, a2[1]);
  std::string::operator=(v15, a4);
  std::string::operator=((std::string *)(v27 + 40), a3);
  v16 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v17 = v27;
  *((_DWORD *)v27 + 2) = (**v16)(v16);
  v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(_QWORD *)(v18 + 208));
    else
      __p = *(std::string *)(v18 + 200);
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v19)
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(_QWORD *)v19 + 12);
  }
  if (v29 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v29, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v29[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v29[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v26 = a1[3].i32[2] - a7;
  v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v26);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v26);
    v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v22 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1915BEA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void _ZZZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1_EUb0_ENK3__2clEm(uint64_t **a1, unint64_t a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  _BYTE *v19;
  const void *v20;
  std::string *p_str;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  int64x2_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  __int128 v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t **v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *lpsrc[2];
  __int128 v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  uint64_t v63;
  void *__p[2];
  __int128 v65;
  uint64_t v66;
  void *v67;
  _BYTE *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71[2];
  std::string v72;
  std::string __str;
  std::string v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  char v81;
  int v82;
  char v83;
  std::string *v84;
  char v85;
  _BYTE v86[32];
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  std::string v91;
  __int128 v92;

  *(_QWORD *)&v92 = *MEMORY[0x1E0C80C00];
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v4 = *a1;
  v77 = **a1;
  v78 = *((_DWORD *)v4 + 2);
  v79 = 0;
  v5 = *((_DWORD *)v4 + 5);
  if (v5 == -1)
  {
    if (*((_DWORD *)v4 + 4) == 1)
      v5 = 4;
    else
      v5 = 5;
  }
  v80 = v5;
  Espresso::abstract_engine_factory::shared(v86);
  v6 = *(_QWORD *)v86;
  v7 = (uint64_t)a1[3];
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  v8 = *(uint64_t (****)(_QWORD))(*a1[3] + 8);
  LODWORD(v74.__r_.__value_.__l.__data_) = (**v8)(v8);
  Espresso::abstract_engine_factory::make_kernel_priv(v6, v7, (uint64_t)__p, (uint64_t)&v77, (int *)&v74);
  if (lpsrc[0]
  {
    v75 = (uint64_t)v9;
    v76 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v10 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v75 = 0;
    v76 = 0;
  }
  if (lpsrc[1])
  {
    v12 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(void *))(*(_QWORD *)lpsrc[1] + 16))(lpsrc[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)lpsrc[1]);
    }
  }
  if (SBYTE7(v65) < 0)
    operator delete(__p[0]);
  v14 = *(std::__shared_weak_count **)&v86[8];
  if (*(_QWORD *)&v86[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&v86[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*a1[2] + 32) + 16 * *((int *)a1[1] + 14));
  if (*(char *)(v17 + 39) >= 0)
    v18 = *(unsigned __int8 *)(v17 + 39);
  else
    v18 = *(_QWORD *)(v17 + 24);
  v19 = v86;
  std::string::basic_string[abi:ne180100]((uint64_t)v86, v18 + 19);
  if (v86[23] < 0)
    v19 = *(_BYTE **)v86;
  if (v18)
  {
    if (*(char *)(v17 + 39) >= 0)
      v20 = (const void *)(v17 + 16);
    else
      v20 = *(const void **)(v17 + 16);
    memmove(v19, v20, v18);
  }
  strcpy(&v19[v18], "_bcast_operand_idx_");
  std::to_string(&__str, a2);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v23 = std::string::append((std::string *)v86, (const std::string::value_type *)p_str, size);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v59 = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)lpsrc = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append((std::string *)lpsrc, "_layer_");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  *(_QWORD *)&v65 = *((_QWORD *)&v25->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v72, *((_DWORD *)a1[1] + 14));
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v72;
  else
    v27 = (std::string *)v72.__r_.__value_.__r.__words[0];
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  else
    v28 = v72.__r_.__value_.__l.__size_;
  v29 = std::string::append((std::string *)__p, (const std::string::value_type *)v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SBYTE7(v65) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v59) < 0)
    operator delete(lpsrc[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    __str = v74;
  v31 = (int64x2_t *)a1[1];
  v32 = v76;
  v71[0] = v75;
  v71[1] = (uint64_t)v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  v35 = *a1[2] + 56;
  v36 = *((int *)a1[1] + 14);
  v70 = v36;
  v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35, v36, &v70)[3]+ 24 * a2;
  if (*(char *)(v37 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v86, *(const std::string::value_type **)v37, *(_QWORD *)(v37 + 8));
  }
  else
  {
    v38 = *(_OWORD *)v37;
    *(_QWORD *)&v86[16] = *(_QWORD *)(v37 + 16);
    *(_OWORD *)v86 = v38;
  }
  lpsrc[0] = 0;
  lpsrc[1] = 0;
  *(_QWORD *)&v59 = 0;
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)lpsrc;
  v72.__r_.__value_.__s.__data_[8] = 0;
  lpsrc[0] = operator new(0x18uLL);
  lpsrc[1] = lpsrc[0];
  *(_QWORD *)&v59 = (char *)lpsrc[0] + 24;
  lpsrc[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59, (__int128 *)v86, (__int128 *)&v86[24], (std::string *)lpsrc[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v91, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v91 = __str;
  memset(&v72, 0, sizeof(v72));
  v84 = &v72;
  v85 = 0;
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v72.__r_.__value_.__l.__size_ = v72.__r_.__value_.__r.__words[0];
  v72.__r_.__value_.__r.__words[2] = v72.__r_.__value_.__r.__words[0] + 24;
  v72.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72.__r_.__value_.__r.__words[2], (__int128 *)&v91, &v92, (std::string *)v72.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::add_kernel(v31, v71, (const std::string *)__p, &v74, (std::string **)lpsrc, (std::string **)&v72, 1);
  v84 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (SBYTE7(v65) < 0)
    operator delete(__p[0]);
  if (v32)
  {
    v39 = (unint64_t *)&v32->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v41 = *a1[2];
  v42 = *((int *)a1[1] + 14);
  *(_QWORD *)v86 = v42;
  lpsrc[0] = (void *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v41 + 56, v42, v86)[3]+ 24 * a2);
  v43 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v41 + 184), (_QWORD *)lpsrc[0], (__int128 **)lpsrc);
  v44 = *(_OWORD *)(v43 + 72);
  *(_OWORD *)__p = *(_OWORD *)(v43 + 56);
  v65 = v44;
  v45 = (const void *)*((_QWORD *)v43 + 12);
  v66 = *((_QWORD *)v43 + 11);
  v67 = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v67, v45, *((_QWORD *)v43 + 13), (uint64_t)(*((_QWORD *)v43 + 13) - (_QWORD)v45) >> 2);
  v46 = v75;
  *(_OWORD *)v86 = *(_OWORD *)__p;
  *(_OWORD *)&v86[16] = v65;
  v87 = v66;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, v67, (uint64_t)v68, (v68 - (_BYTE *)v67) >> 2);
  memset(&v91, 0, sizeof(v91));
  v84 = &v91;
  v85 = 0;
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  v91.__r_.__value_.__l.__size_ = v91.__r_.__value_.__r.__words[0];
  v91.__r_.__value_.__r.__words[2] = v91.__r_.__value_.__r.__words[0] + 64;
  v91.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v91.__r_.__value_.__r.__words[2], (__int128 *)v86, (__int128 *)&v91, (uint64_t)v91.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v46 + 64))(&v72, v46, &v91);
  v47 = *(_QWORD *)(v72.__r_.__value_.__r.__words[0] + 32);
  v48 = *(_OWORD *)(v72.__r_.__value_.__r.__words[0] + 16);
  *(_OWORD *)lpsrc = *(_OWORD *)v72.__r_.__value_.__l.__data_;
  v59 = v48;
  v60 = v47;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, *(const void **)(v72.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v72.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v72.__r_.__value_.__r.__words[0] + 48) - *(_QWORD *)(v72.__r_.__value_.__r.__words[0] + 40)) >> 2);
  v84 = &v72;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  v84 = &v91;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  v49 = (uint64_t **)(*a1[2] + 184);
  *(_QWORD *)v86 = &__str;
  v50 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, &__str, (__int128 **)v86);
  v51 = v59;
  *(_OWORD *)(v50 + 56) = *(_OWORD *)lpsrc;
  *(_OWORD *)(v50 + 72) = v51;
  *((_QWORD *)v50 + 11) = v60;
  if (v50 + 56 != (char *)lpsrc)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v50 + 96, (char *)v61, (uint64_t)v62, (v62 - (_BYTE *)v61) >> 2);
  v52 = *a1[2] + 56;
  v53 = *((int *)a1[1] + 14);
  *(_QWORD *)v86 = v53;
  v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v52, v53, v86);
  std::string::operator=((std::string *)(v54[3] + 24 * a2), &__str);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v55 = v76;
  if (v76)
  {
    v56 = (unint64_t *)&v76->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_1915BF23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void **a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  uint64_t v53;

  a34 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a34);
  if (*(char *)(v53 - 137) < 0)
    operator delete(*(void **)(v53 - 160));
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (a45 < 0)
    operator delete(a40);
  if (a52 < 0)
    operator delete(a47);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void Espresso::fuse_vertical_state<Espresso::base_kernel,Espresso::generic_activation_kernel>::remove_second_layer(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26[3];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32);
  v3 = *(char **)(*(_QWORD *)(v2 + 16 * *(int *)(a1 + 112)) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16 * *(int *)(a1 + 116)) + 64);
  v5 = operator new(8uLL);
  *v5 = v4;
  v26[1] = (uint64_t)(v5 + 1);
  v26[2] = (uint64_t)(v5 + 1);
  v26[0] = (uint64_t)v5;
  Espresso::merge_kernel_attributes(v3, v26);
  operator delete(v5);
  v6 = *(_QWORD *)(a1 + 120) + 96;
  v7 = *(int *)(a1 + 116);
  v26[0] = v7;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v26);
  v9 = *(_QWORD *)(a1 + 120) + 96;
  v10 = *(int *)(a1 + 112);
  v25 = v10;
  v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v25);
  if (v11 != v8)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v11 + 3), (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  v12 = *(char **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v12 >= v13)
  {
    v15 = *(char **)(a1 + 64);
    v16 = (v12 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)v15;
    v18 = (uint64_t)(v13 - (_QWORD)v15) >> 1;
    if (v18 <= v16 + 1)
      v18 = v16 + 1;
    v19 = v17 >= 0x7FFFFFFFFFFFFFFCLL;
    v20 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v19)
      v20 = v18;
    if (v20)
    {
      v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
      v15 = *(char **)(a1 + 64);
      v12 = *(char **)(a1 + 72);
    }
    else
    {
      v21 = 0;
    }
    v22 = (_DWORD *)(v20 + 4 * v16);
    v23 = v20 + 4 * v21;
    *v22 = *(_DWORD *)(a1 + 116);
    v14 = v22 + 1;
    while (v12 != v15)
    {
      v24 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--v22 = v24;
    }
    *(_QWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v23;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_DWORD *)v12 = *(_DWORD *)(a1 + 116);
    v14 = v12 + 4;
  }
  *(_QWORD *)(a1 + 72) = v14;
}

void sub_1915BF5D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915BF84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context26handle_photon_quantizationEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  Espresso *v4;
  const char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  NSObject *v15;
  int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (***v20)(_QWORD);
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::string **v26;
  uint64_t v27;
  unint64_t v28;
  std::string **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  BOOL v35;
  float v36;
  unint64_t v38;
  uint64_t v39[2];
  std::string __p;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint8_t buf[4];
  _BOOL4 v47;
  _BYTE v48[12];
  int v49;
  char v50;
  int v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a2->i64[0] + 408))(&v44);
  if (*(_QWORD *)(a2->i64[0] + 8) == *(_QWORD *)(a1 + 32)
    && !*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]) + 4)
    && !*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]) + 28))
  {
    v4 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]);
    if (!*((_DWORD *)v4 + 6))
    {
      if (v44)
      {
        v9 = *(int *)(v44 + 8);
        v10 = 0.0;
        v11 = 0.0;
        if (v9 >= 4)
        {
          v30 = 0;
          v31 = v9 >> 2;
          if (v31 <= 1)
            v32 = 1;
          else
            v32 = v31;
          v33 = (float *)(*(_QWORD *)(v44 + 16) + 8);
          while (1)
          {
            if (!v30)
            {
              v10 = *(v33 - 2);
              v11 = *(v33 - 1);
            }
            if (fabsf(*v33) >= 0.00000011921)
              break;
            v34 = vabds_f32(*(v33 - 2), v10);
            v35 = fabsf(v33[1] + -1.0) < 0.00000011921 && v34 < 0.00000011921;
            v36 = vabds_f32(*(v33 - 1), v11);
            if (!v35 || v36 >= 0.00000011921)
              break;
            ++v30;
            v33 += 4;
            if (v32 == v30)
              goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          v12 = fabsf(v11);
          v13 = fabsf(v10 + -1.0);
          if (v12 < 0.00000011921 || v13 < 0.00000011921)
          {
            Espresso::espresso_os_log_subsystem(v4, v5);
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109376;
              v47 = v12 >= 0.00000011921;
              *(_WORD *)v48 = 1024;
              *(_DWORD *)&v48[2] = v13 >= 0.00000011921;
              _os_log_debug_impl(&dword_190DAF000, v15, OS_LOG_TYPE_DEBUG, "handle_photon_quantization: strength reduction of photon bn %d %d\n", buf, 0xEu);
            }

            Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::remove_layer(a2);
            *(_QWORD *)&v48[4] = 0x358637BD00000000;
            v49 = 0;
            v50 = 0;
            v51 = 0;
            v52 = 0;
            if (v12 < 0.00000011921)
              v16 = 3;
            else
              v16 = 2;
            *(_DWORD *)buf = v16;
            v47 = 0;
            if (v12 < 0.00000011921)
              v17 = v10;
            else
              v17 = v11;
            *(float *)v48 = v17;
            Espresso::abstract_engine_factory::shared(v41);
            v18 = v41[0];
            v19 = a2->i64[0];
            std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
            v20 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a2->i64[0] + 8) + 8);
            LODWORD(v38) = (**v20)(v20);
            Espresso::abstract_engine_factory::make_kernel_priv(v18, v19 + 8, (uint64_t)&__p, (uint64_t)buf, (int *)&v38);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v41);
            v39[0] = v42;
            v39[1] = v43;
            if (v43)
            {
              v21 = (unint64_t *)(v43 + 8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
            v23 = a2[1].i64[0];
            v24 = *(_QWORD *)(a1 + 40) + 56;
            v25 = a2[3].i32[2];
            v41[0] = v25;
            v26 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v25, v41);
            v27 = *(_QWORD *)(a1 + 40) + 96;
            v28 = a2[3].i32[2];
            v38 = v28;
            v29 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v28, &v38);
            Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v39, &__p, (const std::string *)(v23 + 16), v26 + 3, v29 + 3);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v39);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
          }
        }
      }
    }
  }
  v6 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1915BFC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::generic_batchnorm_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_1915C00A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  BOOL v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v84;
  uint64_t v85;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *v9;
        if ((int)*v8 > (int)*v9)
        {
          *v9 = *v8;
          *v8 = v38;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        v39 = v9 + 1;
        v40 = v9 + 2;
        v41 = v9 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v9, v9 + 1, v9 + 2, v9 + 3);
        v42 = v9[3];
        if ((int)*v8 > (int)v42)
        {
          *v41 = *v8;
          *v8 = v42;
          v43 = *v41;
          v44 = *v40;
          if ((int)*v41 > (int)*v40)
          {
            *v40 = v43;
            *v41 = v44;
            v45 = *v39;
            if ((int)v43 > (int)*v39)
            {
              v9[1] = v43;
              v9[2] = v45;
              v46 = *v9;
              if ((int)v43 > (int)*v9)
              {
                *v9 = v43;
                v9[1] = v46;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v47 = v9 + 1;
          v49 = v9 == a2 || v47 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v49)
            {
              v50 = 8;
              v51 = v9;
              do
              {
                v53 = *v51;
                v52 = v51[1];
                v51 = v47;
                if ((int)v52 > (int)v53)
                {
                  v54 = v50;
                  while (1)
                  {
                    *(uint64_t *)((char *)v9 + v54) = v53;
                    v55 = v54 - 8;
                    if (v54 == 8)
                      break;
                    v53 = *(uint64_t *)((char *)v9 + v54 - 16);
                    v54 -= 8;
                    if ((int)v52 <= (int)v53)
                    {
                      v56 = (uint64_t *)((char *)v9 + v55);
                      goto LABEL_77;
                    }
                  }
                  v56 = v9;
LABEL_77:
                  *v56 = v52;
                }
                v47 = v51 + 1;
                v50 += 8;
              }
              while (v51 + 1 != a2);
            }
          }
          else if (!v49)
          {
            do
            {
              v85 = *v7;
              v84 = v7[1];
              v7 = v47;
              if ((int)v84 > (int)v85)
              {
                do
                {
                  *v47 = v85;
                  v85 = *(v47 - 2);
                  --v47;
                }
                while ((int)v84 > (int)v85);
                *v47 = v84;
              }
              v47 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v57 = (v11 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v9[v60];
                v62 = *v61;
                if (2 * v59 + 2 < (uint64_t)v11 && (int)v62 > (int)v61[1])
                {
                  v62 = v61[1];
                  ++v61;
                  v60 = 2 * v59 + 2;
                }
                result = &v9[v59];
                v63 = *result;
                if ((int)v62 <= (int)*result)
                {
                  do
                  {
                    v64 = v61;
                    *result = v62;
                    if (v57 < v60)
                      break;
                    v65 = (2 * v60) | 1;
                    v61 = &v9[v65];
                    v66 = 2 * v60 + 2;
                    v62 = *v61;
                    if (v66 < (uint64_t)v11 && (int)v62 > (int)v61[1])
                    {
                      v62 = v61[1];
                      ++v61;
                      v65 = v66;
                    }
                    result = v64;
                    v60 = v65;
                  }
                  while ((int)v62 <= (int)v63);
                  *v64 = v63;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v67 = (unint64_t)v10 >> 3;
            do
            {
              v68 = 0;
              v69 = *v9;
              v70 = v9;
              do
              {
                v71 = &v70[v68];
                v74 = v71[1];
                v72 = v71 + 1;
                v73 = v74;
                v75 = (2 * v68) | 1;
                v76 = 2 * v68 + 2;
                if (v76 < v67 && (int)v73 > (int)v72[1])
                {
                  v73 = v72[1];
                  ++v72;
                  v75 = v76;
                }
                *v70 = v73;
                v70 = v72;
                v68 = v75;
              }
              while (v75 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
              if (v72 == --a2)
              {
                *v72 = v69;
              }
              else
              {
                *v72 = *a2;
                *a2 = v69;
                v77 = (char *)v72 - (char *)v9 + 8;
                if (v77 >= 9)
                {
                  v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                  v79 = &v9[v78];
                  v80 = *v79;
                  v81 = *v72;
                  if ((int)*v79 > (int)*v72)
                  {
                    do
                    {
                      v82 = v79;
                      *v72 = v80;
                      if (!v78)
                        break;
                      v78 = (v78 - 1) >> 1;
                      v79 = &v9[v78];
                      v80 = *v79;
                      v72 = v82;
                    }
                    while ((int)*v79 > (int)v81);
                    *v82 = v81;
                  }
                }
              }
            }
            while (v67-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) == 0 && *((_DWORD *)v7 - 2) <= (int)v15)
        {
          if ((int)v15 <= *(_DWORD *)v8)
          {
            v30 = v7 + 1;
            do
            {
              v9 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while ((int)v15 <= *(_DWORD *)v9);
          }
          else
          {
            v9 = v7;
            do
              v29 = *((_DWORD *)v9++ + 2);
            while ((int)v15 <= v29);
          }
          v31 = a2;
          if (v9 < a2)
          {
            v31 = a2;
            do
              v32 = *((_DWORD *)v31-- - 2);
            while ((int)v15 > v32);
          }
          if (v9 < v31)
          {
            v33 = *v9;
            v34 = *v31;
            do
            {
              *v9 = v34;
              *v31 = v33;
              do
              {
                v35 = v9[1];
                ++v9;
                v33 = v35;
              }
              while ((int)v15 <= (int)v35);
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while ((int)v15 > (int)v36);
            }
            while (v9 < v31);
          }
          v37 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v15;
          continue;
        }
        v16 = v7;
        do
        {
          v17 = v16;
          v19 = v16[1];
          ++v16;
          v18 = v19;
        }
        while ((int)v15 < (int)v19);
        v20 = a2;
        if (v17 == v7)
        {
          v20 = a2;
          do
          {
            if (v16 >= v20)
              break;
            v22 = *((_DWORD *)v20-- - 2);
          }
          while ((int)v15 >= v22);
        }
        else
        {
          do
            v21 = *((_DWORD *)v20-- - 2);
          while ((int)v15 >= v21);
        }
        if (v16 < v20)
        {
          v23 = *v20;
          v24 = v16;
          v25 = v20;
          do
          {
            *v24 = v23;
            *v25 = v18;
            do
            {
              v17 = v24;
              v26 = v24[1];
              ++v24;
              v18 = v26;
            }
            while ((int)v15 < (int)v26);
            do
            {
              v27 = *--v25;
              v23 = v27;
            }
            while ((int)v15 >= (int)v27);
          }
          while (v24 < v25);
        }
        if (v17 != v7)
          *v7 = *v17;
        *v17 = v15;
        if (v16 < v20)
        {
LABEL_30:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *,false>(v7, v17, a3, a4 & 1);
          a4 = 0;
          v9 = v17 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v7, v17);
        v9 = v17 + 1;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v17 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_30;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

void ___ZN8Espresso17ANECompilerEngine7context26handle_photon_quantizationEPNS_3netEPNS_16abstract_contextE_block_invoke_297(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  std::string v38;
  std::string v39;

  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v4[1];
    v9 = (uint64_t *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 32);
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    if (v8 != v10)
      return;
  }
  else
  {
    v9 = (uint64_t *)(a1 + 32);
    if (v4[1] != *(_QWORD *)(a1 + 32))
      return;
  }
  v12 = *(_QWORD *)(a2 + 16);
  if (!v12 || (v13 = *(std::__shared_weak_count **)(a2 + 24)) == 0)
  {
    if (*(_QWORD *)(v12 + 8) != *v9)
      return;
    goto LABEL_22;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = *(_QWORD *)(v12 + 8);
  v17 = *v9;
  do
    v18 = __ldaxr(v14);
  while (__stlxr(v18 - 1, v14));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v16 == v17)
  {
LABEL_22:
    if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 320))(*(_QWORD *)(a2 + 16)) == 3)
    {
      v19 = *(_QWORD *)(a1 + 40) + 96;
      v20 = *(int *)(a2 + 112);
      v39.__r_.__value_.__r.__words[0] = v20;
      v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19, v20, &v39);
      if (v21[3] != v21[4])
      {
        v22 = *(_QWORD *)(a1 + 40) + 96;
        v23 = *(int *)(a2 + 112);
        v38.__r_.__value_.__r.__words[0] = v23;
        v24 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v23, &v38)[3];
        if (*((char *)v24 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
        }
        else
        {
          v25 = *v24;
          v39.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
        }
        v26 = *(_QWORD *)(a1 + 40) + 96;
        v27 = *(int *)(a2 + 116);
        v37 = v27;
        v28 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v27, &v37)[3];
        if (*((char *)v28 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
        }
        else
        {
          v29 = *v28;
          v38.__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 2);
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
        }
        v30 = *(_QWORD *)(*(_QWORD *)a2 + 64);
        if (v30)
        {
          v31 = *(_QWORD *)(a1 + 40);
          v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v31 + 352, &v39);
          if ((_QWORD *)(v31 + 360) == v32 || (v33 = *((_DWORD *)v32 + 16), v33 != 2) && v33 != 4)
          {
            if (*(_DWORD *)(v30 + 8))
            {
              v34 = 0;
              do
              {
                v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 320))(*(_QWORD *)(a2 + 16));
                v36 = *(_QWORD *)(*(_QWORD *)a2 + 64);
                *(float *)(*(_QWORD *)(v36 + 16) + 4 * v34) = *(float *)(v35 + 8)
                                                            * *(float *)(*(_QWORD *)(v36 + 16) + 4 * v34);
                ++v34;
              }
              while (v34 < *(unsigned int *)(v36 + 8));
            }
            Espresso::fuse_vertical_state<Espresso::ANECompilerEngine::ane_kernel,Espresso::generic_elementwise_kernel>::remove_second_layer(a2);
          }
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1915C0A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void Espresso::fuse_vertical_state<Espresso::ANECompilerEngine::ane_kernel,Espresso::generic_elementwise_kernel>::remove_second_layer(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26[3];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32);
  v3 = *(char **)(*(_QWORD *)(v2 + 16 * *(int *)(a1 + 112)) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16 * *(int *)(a1 + 116)) + 64);
  v5 = operator new(8uLL);
  *v5 = v4;
  v26[1] = (uint64_t)(v5 + 1);
  v26[2] = (uint64_t)(v5 + 1);
  v26[0] = (uint64_t)v5;
  Espresso::merge_kernel_attributes(v3, v26);
  operator delete(v5);
  v6 = *(_QWORD *)(a1 + 120) + 96;
  v7 = *(int *)(a1 + 116);
  v26[0] = v7;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v26);
  v9 = *(_QWORD *)(a1 + 120) + 96;
  v10 = *(int *)(a1 + 112);
  v25 = v10;
  v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v25);
  if (v11 != v8)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v11 + 3), (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  v12 = *(char **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v12 >= v13)
  {
    v15 = *(char **)(a1 + 64);
    v16 = (v12 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)v15;
    v18 = (uint64_t)(v13 - (_QWORD)v15) >> 1;
    if (v18 <= v16 + 1)
      v18 = v16 + 1;
    v19 = v17 >= 0x7FFFFFFFFFFFFFFCLL;
    v20 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v19)
      v20 = v18;
    if (v20)
    {
      v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
      v15 = *(char **)(a1 + 64);
      v12 = *(char **)(a1 + 72);
    }
    else
    {
      v21 = 0;
    }
    v22 = (_DWORD *)(v20 + 4 * v16);
    v23 = v20 + 4 * v21;
    *v22 = *(_DWORD *)(a1 + 116);
    v14 = v22 + 1;
    while (v12 != v15)
    {
      v24 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--v22 = v24;
    }
    *(_QWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v23;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_DWORD *)v12 = *(_DWORD *)(a1 + 116);
    v14 = v12 + 4;
  }
  *(_QWORD *)(a1 + 72) = v14;
}

void sub_1915C0BE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if ((int)*a2 <= (int)*result)
  {
    if ((int)v5 > (int)v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if ((int)*a2 > (int)*result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if ((int)v5 <= (int)v3)
    {
      *result = v3;
      *a2 = v4;
      if ((int)*a3 <= (int)v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a2, a3);
  v9 = *a3;
  if ((int)*a4 > (int)*a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if ((int)*a3 > (int)*a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if ((int)*a2 > (int)*a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if ((int)v6 > (int)*a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if ((int)v20 > (int)v21)
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if ((int)*v19 > (int)*v18)
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if ((int)v22 > (int)*v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if ((int)v22 > (int)*a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if ((int)*v9 > (int)*v8)
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if ((int)v12 <= (int)v13)
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1915C0F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915C1208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context40transform_reshape_like_to_static_reshapeEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (***v22)(_QWORD);
  std::__shared_weak_count *v23;
  _QWORD *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  std::string *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  std::string __str;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  void *__p;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string v67;
  _BYTE v68[24];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  std::string v72;
  uint64_t v73;
  std::string v74;
  __int128 v75;

  *(_QWORD *)&v75 = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(a1 + 48);
  if (*(_QWORD *)(a2->i64[0] + 8) == v2 || v2 == 0)
  {
    v71 = 0u;
    v70 = 0u;
    v69 = 0u;
    *(_DWORD *)v68 = a2[3].i32[2];
    *(_QWORD *)&v68[8] = 0;
    *(_QWORD *)&v68[16] = 0;
    v6 = a2[2].u64[1];
    if (v6 >= a2[3].i64[0])
    {
      v7 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v68);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v6, (uint64_t)v68);
      v7 = v6 + 72;
      a2[2].i64[1] = v6 + 72;
    }
    a2[2].i64[1] = v7;
    *(_QWORD *)&v57 = (char *)&v70 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    *(_QWORD *)&v57 = &v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    v8 = *(std::__shared_weak_count **)&v68[16];
    if (*(_QWORD *)&v68[16])
    {
      v9 = (unint64_t *)(*(_QWORD *)&v68[16] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = **(_QWORD **)(a1 + 40) + 56;
    v12 = a2[3].i32[2];
    *(_QWORD *)v68 = v12;
    v13 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, v68)[3];
    v14 = **(_QWORD **)(a1 + 40) + 96;
    v15 = a2[3].i32[2];
    *(_QWORD *)v68 = v15;
    v16 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, v68)[3];
    Espresso::abstract_engine_factory::shared(&v65);
    v17 = v65;
    v18 = a2->i64[0];
    std::string::basic_string[abi:ne180100]<0>(&v67, "reshape");
    v19 = std::map<std::string,Espresso::blob_numerical_properties>::at(**(_QWORD **)(a1 + 40) + 184, v16);
    v20 = *(_OWORD *)(v19 + 16);
    v21 = *(_QWORD *)(v19 + 32);
    v57 = *(_OWORD *)v19;
    v58 = v20;
    v59 = v21;
    __p = 0;
    v61 = 0;
    v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v19 + 40), *(_QWORD *)(v19 + 48), (uint64_t)(*(_QWORD *)(v19 + 48) - *(_QWORD *)(v19 + 40)) >> 2);
    *(_QWORD *)&v69 = 0;
    WORD4(v69) = 1;
    HIDWORD(v69) = 2;
    *(_OWORD *)v68 = v57;
    *(_QWORD *)&v68[16] = v58;
    v22 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a2->i64[0] + 8) + 8);
    LODWORD(__str.__r_.__value_.__l.__data_) = (**v22)(v22);
    Espresso::abstract_engine_factory::make_kernel_priv(v17, v18 + 8, (uint64_t)&v67, (uint64_t)v68, (int *)&__str);
    if (__p)
    {
      v61 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    v24 = v63;
    v23 = v64;
    if (v64)
    {
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    v27 = (char *)(*(uint64_t (**)(_QWORD *))(*v24 + 272))(v24);
    std::string::basic_string[abi:ne180100]<0>(&__str, v27);
    v28 = a2[1].i64[0];
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v29 = *v13;
      v74.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v29;
    }
    v53 = 0;
    v54 = 0;
    v55 = 0;
    *(_QWORD *)v68 = &v53;
    v68[8] = 0;
    v53 = (std::string *)operator new(0x18uLL);
    v54 = v53;
    v55 = v53 + 1;
    v54 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55, (__int128 *)&v74, &v75, v53);
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
    }
    else
    {
      v30 = *v16;
      v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v30;
    }
    v50 = 0;
    v51 = 0;
    v52 = 0;
    *(_QWORD *)v68 = &v50;
    v68[8] = 0;
    v50 = (std::string *)operator new(0x18uLL);
    v51 = v50;
    v52 = v50 + 1;
    v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (__int128 *)&v72, (__int128 *)&v73, v50);
    *(_DWORD *)v68 = 0;
    *(_OWORD *)&v68[8] = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v31 = (char *)operator new(0xF8uLL);
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = 0;
    *(_QWORD *)v31 = &off_1E2DBF0D0;
    *((_QWORD *)v31 + 3) = &off_1E2DA1A38;
    *(_OWORD *)(v31 + 56) = 0u;
    *(_OWORD *)(v31 + 72) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *(_OWORD *)(v31 + 120) = 0u;
    *(_OWORD *)(v31 + 136) = 0u;
    *(_OWORD *)(v31 + 152) = 0u;
    *(_OWORD *)(v31 + 40) = 0u;
    v32 = (std::string *)(v31 + 40);
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 161) = 0u;
    *((_OWORD *)v31 + 13) = 0u;
    *((_OWORD *)v31 + 14) = 0u;
    *((_QWORD *)v31 + 30) = 0;
    *(_QWORD *)&v68[8] = v31 + 24;
    *(_QWORD *)&v68[16] = v31;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v31 + 11, (uint64_t)v24, (uint64_t)v23);
    std::string::operator=(v32, (const std::string *)(v28 + 16));
    std::string::operator=((std::string *)(*(_QWORD *)&v68[8] + 40), &__str);
    v33 = (***(uint64_t (****)(_QWORD))(v24[1] + 8))(*(_QWORD *)(v24[1] + 8));
    v34 = *(_QWORD *)&v68[8];
    *(_DWORD *)(*(_QWORD *)&v68[8] + 8) = v33;
    v35 = a2[1].i64[0];
    if (v35)
    {
      *(_DWORD *)(v34 + 12) = *(_DWORD *)(v35 + 12);
      if (*(char *)(v35 + 223) < 0)
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v35 + 200), *(_QWORD *)(v35 + 208));
      else
        v67 = *(std::string *)(v35 + 200);
      std::string::operator=((std::string *)(v34 + 200), &v67);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
    }
    else
    {
      v36 = *(_QWORD *)(a2[4].i64[0] + 32);
      if (*(_QWORD *)(a2[4].i64[0] + 40) != v36)
        *(_DWORD *)(v34 + 12) = *(_DWORD *)(*(_QWORD *)v36 + 12);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v69, v53, v54, 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v53) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v70 + 8, v50, v51, 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)v50) >> 3));
    *(_DWORD *)v68 = a2[3].i32[2];
    v37 = a2[2].u64[1];
    if (v37 >= a2[3].i64[0])
    {
      v38 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v68);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v68);
      v38 = v37 + 72;
      a2[2].i64[1] = v37 + 72;
    }
    a2[2].i64[1] = v38;
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    v39 = *(std::__shared_weak_count **)&v68[16];
    if (*(_QWORD *)&v68[16])
    {
      v40 = (unint64_t *)(*(_QWORD *)&v68[16] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    *(_QWORD *)v68 = &v50;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    *(_QWORD *)v68 = &v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v23)
    {
      v42 = (unint64_t *)&v23->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    **(_BYTE **)(a1 + 32) = 1;
    v44 = v64;
    if (v64)
    {
      v45 = (unint64_t *)&v64->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v66;
    if (v66)
    {
      v48 = (unint64_t *)&v66->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
}

void sub_1915C18E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char *a41)
{
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a41);
  a41 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (*(char *)(v42 - 121) < 0)
    operator delete(*(void **)(v42 - 144));
  a41 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  if (a21 < 0)
    operator delete(__p);
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v46 = a31;
  if (a31)
  {
    v47 = (unint64_t *)&a31->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = a33;
  if (a33)
  {
    v50 = (unint64_t *)&a33->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c104_ZTSKZN8Espresso17ANECompilerEngine7context40transform_reshape_like_to_static_reshapeEPNS_3netEPS1_E3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void Espresso::blob<unsigned char,4>::make(_QWORD *a1, int a2, int a3)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(a1, a2, a3, 1, 1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reshape_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  size_t v11;
  void *v12;

  v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E2DBEDF8;
  v10[3] = &off_1E2DA12B0;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  v11 = a3 * (uint64_t)a2 * a4 * a5;
  v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  v10[6] = v12;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1915C1C04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context29decompose_layer_normalizationEPNS_3netEPS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;
  std::string v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  std::string v49;
  std::string *v50;

  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_QWORD *)(*(_QWORD *)a2 + 8) == v2 || v2 == 0) && (!v2 || *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) == v2))
  {
    v7 = *(_QWORD *)(a1 + 40) + 56;
    v8 = *(int *)(a2 + 112);
    *(_QWORD *)&v43 = *(int *)(a2 + 112);
    v9 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v8, &v43)[3];
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v49.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v10;
    }
    v11 = *(_QWORD *)(a1 + 40);
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v11 + 192), &v49))
    {
      *(_QWORD *)&v36 = &v49;
      v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v11 + 184), &v49, (__int128 **)&v36);
      v13 = *(_OWORD *)(v12 + 72);
      v43 = *(_OWORD *)(v12 + 56);
      v44 = v13;
      v14 = (const void *)*((_QWORD *)v12 + 12);
      v45 = *((_QWORD *)v12 + 11);
      v46 = 0;
      v47 = 0;
      v48 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v14, *((_QWORD *)v12 + 13), (uint64_t)(*((_QWORD *)v12 + 13) - (_QWORD)v14) >> 2);
      v15 = *(_QWORD *)(a1 + 40) + 56;
      v16 = *(int *)(a2 + 116);
      *(_QWORD *)&v36 = v16;
      v17 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, v16, &v36)[3];
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
      }
      else
      {
        v18 = *v17;
        v42.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v18;
      }
      v19 = *(_QWORD *)(a1 + 40);
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v19 + 192), &v42))
      {
        v50 = &v42;
        v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 184), &v42, (__int128 **)&v50);
        v21 = *(_OWORD *)(v20 + 72);
        v36 = *(_OWORD *)(v20 + 56);
        v37 = v21;
        v22 = (const void *)*((_QWORD *)v20 + 12);
        v38 = *((_QWORD *)v20 + 11);
        __p = 0;
        v40 = 0;
        v41 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v22, *((_QWORD *)v20 + 13), (uint64_t)(*((_QWORD *)v20 + 13) - (_QWORD)v22) >> 2);
        v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 320))(*(_QWORD *)(a2 + 16));
        if (*(_DWORD *)(v23 + 8) == 2
          && v36 == __PAIR128__(v43, 0x100000001)
          && (_DWORD)v37 == DWORD2(v43)
          && DWORD1(v44) == 3
          && (DWORD1(v37) == 5 || DWORD1(v37) == -1 && (_DWORD)v37 != 1))
        {
          *(_DWORD *)(v23 + 8) = 0;
          v24 = *(_QWORD *)(a1 + 40);
          v25 = *(int *)(a2 + 112);
          v35 = v25;
          v50 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24 + 56, v25, &v35)[3];
          v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v24 + 184), v50, (__int128 **)&v50);
          v27 = *(_QWORD *)(a1 + 40);
          v28 = *(int *)(a2 + 112);
          v34 = v28;
          v50 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27 + 96, v28, &v34)[3];
          v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v27 + 184), v50, (__int128 **)&v50);
          Espresso::layer_shape::operator=((uint64_t)(v29 + 56), (__int128 *)(v26 + 56));
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 32);
          v31 = *(int *)(a2 + 112);
          v32 = *(int *)(a2 + 116);
          v33 = *(_OWORD *)(v30 + 16 * v31);
          *(_OWORD *)(v30 + 16 * v31) = *(_OWORD *)(v30 + 16 * v32);
          *(_OWORD *)(v30 + 16 * v32) = v33;
        }
        if (__p)
        {
          v40 = __p;
          operator delete(__p);
        }
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_1915C1F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;

  if (__p)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a31)
    operator delete(a31);
  if (*(char *)(v32 - 57) < 0)
    operator delete(*(void **)(v32 - 80));
  _Unwind_Resume(exception_object);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_load_constant_kernel,Espresso::base_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void ___ZN8Espresso17ANECompilerEngine7context29decompose_layer_normalizationEPNS_3netEPS1__block_invoke_2(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  int *v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  size_t size;
  std::string *v24;
  std::string *v25;
  int v26;
  size_t v27;
  _BYTE *v28;
  std::string *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void **v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  size_t v48;
  __int128 *p_lpsrc;
  std::string *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  char *v55;
  __int128 v56;
  const void *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t **v60;
  char *v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void **v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  size_t v87;
  std::string *v88;
  std::string *v89;
  uint64_t i;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t **v94;
  char *v95;
  __int128 v96;
  const void *v97;
  uint64_t **v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t j;
  void *v105;
  uint64_t **v106;
  char *v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  int v115;
  size_t v116;
  _BYTE *v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void **v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  size_t v137;
  __int128 *v138;
  std::string *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t **v143;
  char *v144;
  __int128 v145;
  const void *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t **v149;
  char *v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  __int128 v161;
  const void *v162;
  int v163;
  size_t v164;
  __int128 *v165;
  std::string *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  void *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  size_t v185;
  _BYTE *v186;
  std::string *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t **v191;
  char *v192;
  __int128 v193;
  const void *v194;
  uint64_t v195;
  __int128 v196;
  uint64_t **v197;
  char *v198;
  __int128 v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  size_t v206;
  _BYTE *v207;
  std::string *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void **v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  void *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  size_t v227;
  __int128 *v228;
  std::string *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t **v233;
  char *v234;
  __int128 v235;
  const void *v236;
  uint64_t v237;
  __int128 v238;
  uint64_t **v239;
  char *v240;
  __int128 v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  size_t v248;
  _BYTE *v249;
  std::string *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  void **v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  void *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  size_t v269;
  __int128 *v270;
  std::string *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t **v275;
  char *v276;
  __int128 v277;
  const void *v278;
  uint64_t v279;
  __int128 v280;
  uint64_t **v281;
  char *v282;
  __int128 v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  void **v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  void *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  size_t v308;
  std::string *v309;
  std::string *v310;
  uint64_t k;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  uint64_t v320[2];
  uint64_t v321[2];
  uint64_t v322[2];
  uint64_t v323[2];
  uint64_t v324;
  uint64_t v325;
  std::string v326;
  char v327;
  int v328;
  int v329;
  uint64_t v330[2];
  uint64_t v331[2];
  uint64_t v332[2];
  uint64_t v333;
  uint64_t v334;
  std::string __p;
  std::string v336;
  std::string v337;
  std::string v338;
  std::string v339;
  std::string __str;
  std::string v341;
  std::string *v342;
  std::__shared_weak_count *v343;
  _BYTE v344[32];
  unint64_t v345;
  void *v346[3];
  std::string v347;
  uint64_t v348;
  _BYTE v349[40];
  void *__src[2];
  _QWORD v351[6];
  uint64_t v352;
  _QWORD v353[2];
  __int128 lpsrc;
  _BYTE v355[24];
  void *v356;
  __int128 v357;
  std::string v358;
  uint64_t v359;
  std::string v360;
  uint64_t v361;
  std::string v362;
  __int128 v363;

  *(_QWORD *)&v363 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    v6 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
    if (v6[1] == 1)
    {
      v7 = *v6;
      v8 = v6[2];
      *(_OWORD *)v351 = 0u;
      *(_OWORD *)__src = 0u;
      *(_DWORD *)v349 = a2[3].i32[2];
      memset(&v349[8], 0, 32);
      v9 = a2[2].u64[1];
      if (v9 >= a2[3].i64[0])
      {
        v10 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v349);
      }
      else
      {
        std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v349);
        v10 = v9 + 72;
        a2[2].i64[1] = v9 + 72;
      }
      a2[2].i64[1] = v10;
      *(_QWORD *)&lpsrc = &__src[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
      *(_QWORD *)&lpsrc = &v349[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
      v11 = *(std::__shared_weak_count **)&v349[16];
      if (*(_QWORD *)&v349[16])
      {
        v12 = (unint64_t *)(*(_QWORD *)&v349[16] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = *(_QWORD *)(a1 + 40) + 96;
      v15 = a2[3].i32[2];
      *(_QWORD *)v349 = v15;
      v16 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, v349)[3];
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
      }
      else
      {
        v17 = *v16;
        v341.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
        *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v17;
      }
      v18 = *(_QWORD *)(a1 + 40) + 56;
      v19 = a2[3].i32[2];
      *(_QWORD *)v349 = v19;
      v20 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, v19, v349)[3];
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v21 = *v20;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v21;
      }
      v22 = a2[1].i64[0];
      if (*(char *)(v22 + 39) < 0)
        std::string::__init_copy_ctor_external(&v339, *(const std::string::value_type **)(v22 + 16), *(_QWORD *)(v22 + 24));
      else
        v339 = *(std::string *)(v22 + 16);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v338, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v338 = __str;
      if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v341.__r_.__value_.__r.__words[2]);
      else
        size = v341.__r_.__value_.__l.__size_;
      v24 = &v337;
      std::string::basic_string[abi:ne180100]((uint64_t)&v337, size + 9);
      if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v337.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v341;
        else
          v25 = (std::string *)v341.__r_.__value_.__r.__words[0];
        memmove(v24, v25, size);
      }
      strcpy((char *)v24 + size, "__@x_mean");
      memset(&v336, 0, sizeof(v336));
      memset(&__p, 0, sizeof(__p));
      *(_QWORD *)&v344[8] = 0x100000007;
      *(_QWORD *)&v344[16] = 0;
      *(_QWORD *)&v344[24] = 0;
      v345 = 0xFFFFFFFF00000000;
      LOBYTE(v346[0]) = 0;
      *(_QWORD *)v344 = 0x358637BD00000001;
      v26 = 1;
      switch(v8)
      {
        case 0:
          goto LABEL_40;
        case 1:
          v26 = 3;
          goto LABEL_40;
        case 2:
          goto LABEL_41;
        case 3:
          v26 = 31;
LABEL_40:
          *(_DWORD *)&v344[8] = v26;
LABEL_41:
          std::string::operator=(&v336, &__str);
          if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
          else
            v27 = v341.__r_.__value_.__l.__size_;
          v28 = v349;
          std::string::basic_string[abi:ne180100]((uint64_t)v349, v27 + 14);
          if (v349[23] < 0)
            v28 = *(_BYTE **)v349;
          if (v27)
          {
            if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v29 = &v341;
            else
              v29 = (std::string *)v341.__r_.__value_.__r.__words[0];
            memmove(v28, v29, v27);
          }
          strcpy(&v28[v27], "__@reduce_mean");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = *(std::string *)v349;
          v30 = *(_QWORD *)(a1 + 40);
          v32 = *(void ***)(v30 + 16);
          v31 = *(std::__shared_weak_count **)(v30 + 24);
          v342 = (std::string *)v32;
          v343 = v31;
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
          }
          Espresso::abstract_engine_factory::shared(&v326);
          v35 = v326.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(v349, "reduce");
          LODWORD(v362.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v342->__r_.__value_.__l.__size_)((void *)v342->__r_.__value_.__l.__size_);
          Espresso::abstract_engine_factory::make_kernel_priv(v35, (uint64_t)&v342, (uint64_t)v349, (uint64_t)v344, (int *)&v362);
          if ((_QWORD)lpsrc
          {
            v333 = (uint64_t)v36;
            v334 = *((_QWORD *)&lpsrc + 1);
            if (*((_QWORD *)&lpsrc + 1))
            {
              v37 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
          }
          else
          {
            v333 = 0;
            v334 = 0;
          }
          v39 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
          if (*((_QWORD *)&lpsrc + 1))
          {
            v40 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          if ((v349[23] & 0x80000000) != 0)
            operator delete(*(void **)v349);
          v42 = (std::__shared_weak_count *)v326.__r_.__value_.__l.__size_;
          if (v326.__r_.__value_.__l.__size_)
          {
            v43 = (unint64_t *)(v326.__r_.__value_.__l.__size_ + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = (std::__shared_weak_count *)v334;
          v332[0] = v333;
          v332[1] = v334;
          if (v334)
          {
            v46 = (unint64_t *)(v334 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          std::string::basic_string[abi:ne180100]<0>(v349, "reduce");
          if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v48 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
          else
            v48 = v339.__r_.__value_.__l.__size_;
          p_lpsrc = &lpsrc;
          std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v48 + 14);
          if (v355[7] < 0)
            p_lpsrc = (__int128 *)lpsrc;
          if (v48)
          {
            if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v50 = &v339;
            else
              v50 = (std::string *)v339.__r_.__value_.__r.__words[0];
            memmove(p_lpsrc, v50, v48);
          }
          strcpy((char *)p_lpsrc + v48, "__@reduce_mean");
          if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v362, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
          else
            v362 = v336;
          memset(&v326, 0, sizeof(v326));
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
          v360.__r_.__value_.__s.__data_[8] = 0;
          v326.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v326.__r_.__value_.__l.__size_ = v326.__r_.__value_.__r.__words[0];
          v326.__r_.__value_.__r.__words[2] = v326.__r_.__value_.__r.__words[0] + 24;
          v326.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v326.__r_.__value_.__r.__words[2], (__int128 *)&v362, &v363, (std::string *)v326.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v358, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v358 = __p;
          memset(&v360, 0, sizeof(v360));
          v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
          v347.__r_.__value_.__s.__data_[8] = 0;
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v360.__r_.__value_.__l.__size_ = v360.__r_.__value_.__r.__words[0];
          v360.__r_.__value_.__r.__words[2] = v360.__r_.__value_.__r.__words[0] + 24;
          v360.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360.__r_.__value_.__r.__words[2], (__int128 *)&v358, (__int128 *)&v359, (std::string *)v360.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v332, (const std::string *)v349, (const std::string *)&lpsrc, (std::string **)&v326, (std::string **)&v360);
          v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v358.__r_.__value_.__l.__data_);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
          if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v362.__r_.__value_.__l.__data_);
          if ((v355[7] & 0x80000000) != 0)
            operator delete((void *)lpsrc);
          if ((v349[23] & 0x80000000) != 0)
            operator delete(*(void **)v349);
          if (v45)
          {
            v51 = (unint64_t *)&v45->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v53 = v333;
          v54 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
          v55 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, &v336, (__int128 **)&v360);
          v56 = *(_OWORD *)(v55 + 72);
          lpsrc = *(_OWORD *)(v55 + 56);
          *(_OWORD *)v355 = v56;
          v57 = (const void *)*((_QWORD *)v55 + 12);
          *(_QWORD *)&v355[16] = *((_QWORD *)v55 + 11);
          v356 = 0;
          v357 = 0uLL;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v356, v57, *((_QWORD *)v55 + 13), (uint64_t)(*((_QWORD *)v55 + 13) - (_QWORD)v57) >> 2);
          memset(&v362, 0, sizeof(v362));
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
          v360.__r_.__value_.__s.__data_[8] = 0;
          v362.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
          v362.__r_.__value_.__l.__size_ = v362.__r_.__value_.__r.__words[0];
          v362.__r_.__value_.__r.__words[2] = v362.__r_.__value_.__r.__words[0] + 64;
          v362.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v362.__r_.__value_.__r.__words[2], &lpsrc, (__int128 *)&v358, (uint64_t)v362.__r_.__value_.__l.__data_);
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v53 + 64))(&v326, v53, &v362);
          v58 = *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 32);
          v59 = *(_OWORD *)(v326.__r_.__value_.__r.__words[0] + 16);
          *(_OWORD *)v349 = *(_OWORD *)v326.__r_.__value_.__l.__data_;
          *(_OWORD *)&v349[16] = v59;
          *(_QWORD *)&v349[32] = v58;
          *(_OWORD *)__src = 0uLL;
          v351[0] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, *(const void **)(v326.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 40)) >> 2);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
          if (v356)
          {
            *(_QWORD *)&v357 = v356;
            operator delete(v356);
          }
          v60 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
          *(_QWORD *)&lpsrc = &__p;
          v61 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60, &__p, (__int128 **)&lpsrc);
          v62 = *(_OWORD *)&v349[16];
          *(_OWORD *)(v61 + 56) = *(_OWORD *)v349;
          *(_OWORD *)(v61 + 72) = v62;
          *((_QWORD *)v61 + 11) = *(_QWORD *)&v349[32];
          if (v61 + 56 != v349)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v61 + 96, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
          if (__src[0])
          {
            __src[1] = __src[0];
            operator delete(__src[0]);
          }
          v63 = (std::__shared_weak_count *)v334;
          if (v334)
          {
            v64 = (unint64_t *)(v334 + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v66 = v343;
          if (v343)
          {
            v67 = (unint64_t *)&v343->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          *(_QWORD *)&v344[16] = 897988541;
          v344[24] = 0;
          *(void **)((char *)v346 + 4) = 0;
          *(_QWORD *)v344 = 33;
          *(_QWORD *)&v344[8] = 1065353216;
          std::string::operator=(&v336, &__p);
          std::string::operator=(&__p, &v337);
          v69 = *(_QWORD *)(a1 + 40);
          v71 = *(void ***)(v69 + 16);
          v70 = *(std::__shared_weak_count **)(v69 + 24);
          v342 = (std::string *)v71;
          v343 = v70;
          if (v70)
          {
            v72 = (unint64_t *)&v70->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          Espresso::abstract_engine_factory::shared(&v326);
          v74 = v326.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(v349, "elementwise");
          LODWORD(v362.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v342->__r_.__value_.__l.__size_)((void *)v342->__r_.__value_.__l.__size_);
          Espresso::abstract_engine_factory::make_kernel_priv(v74, (uint64_t)&v342, (uint64_t)v349, (uint64_t)v344, (int *)&v362);
          if ((_QWORD)lpsrc
          {
            v333 = (uint64_t)v75;
            v334 = *((_QWORD *)&lpsrc + 1);
            if (*((_QWORD *)&lpsrc + 1))
            {
              v76 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
              do
                v77 = __ldxr(v76);
              while (__stxr(v77 + 1, v76));
            }
          }
          else
          {
            v333 = 0;
            v334 = 0;
          }
          v78 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
          if (*((_QWORD *)&lpsrc + 1))
          {
            v79 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          if ((v349[23] & 0x80000000) != 0)
            operator delete(*(void **)v349);
          v81 = (std::__shared_weak_count *)v326.__r_.__value_.__l.__size_;
          if (v326.__r_.__value_.__l.__size_)
          {
            v82 = (unint64_t *)(v326.__r_.__value_.__l.__size_ + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          v84 = (std::__shared_weak_count *)v334;
          v331[0] = v333;
          v331[1] = v334;
          if (v334)
          {
            v85 = (unint64_t *)(v334 + 8);
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
          if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
          else
            v87 = v339.__r_.__value_.__l.__size_;
          v88 = &v326;
          std::string::basic_string[abi:ne180100]((uint64_t)&v326, v87 + 9);
          if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v88 = (std::string *)v326.__r_.__value_.__r.__words[0];
          if (v87)
          {
            if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v89 = &v339;
            else
              v89 = (std::string *)v339.__r_.__value_.__r.__words[0];
            memmove(v88, v89, v87);
          }
          strcpy((char *)v88 + v87, "__@x_mean");
          if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)v349, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
          else
            *(std::string *)v349 = v338;
          if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v349[24], v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v349[24] = *(_OWORD *)&v336.__r_.__value_.__l.__data_;
            __src[0] = (void *)v336.__r_.__value_.__r.__words[2];
          }
          memset(&v362, 0, sizeof(v362));
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
          v360.__r_.__value_.__s.__data_[8] = 0;
          v362.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          v362.__r_.__value_.__l.__size_ = v362.__r_.__value_.__r.__words[0];
          v362.__r_.__value_.__r.__words[2] = v362.__r_.__value_.__r.__words[0] + 48;
          v362.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v362.__r_.__value_.__r.__words[2], (__int128 *)v349, (__int128 *)&__src[1], (std::string *)v362.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v358, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v358 = __p;
          memset(&v360, 0, sizeof(v360));
          v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
          v347.__r_.__value_.__s.__data_[8] = 0;
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v360.__r_.__value_.__l.__size_ = v360.__r_.__value_.__r.__words[0];
          v360.__r_.__value_.__r.__words[2] = v360.__r_.__value_.__r.__words[0] + 24;
          v360.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360.__r_.__value_.__r.__words[2], (__int128 *)&v358, (__int128 *)&v359, (std::string *)v360.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v331, (const std::string *)&lpsrc, &v326, (std::string **)&v362, (std::string **)&v360);
          v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v358.__r_.__value_.__l.__data_);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
          for (i = 0; i != -6; i -= 3)
          {
            if (SHIBYTE(__src[i]) < 0)
              operator delete(*(void **)&v349[i * 8 + 24]);
          }
          if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v326.__r_.__value_.__l.__data_);
          if ((v355[7] & 0x80000000) != 0)
            operator delete((void *)lpsrc);
          if (v84)
          {
            v91 = (unint64_t *)&v84->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v93 = v333;
          v94 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
          v95 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v94, &v338, (__int128 **)&v360);
          v96 = *(_OWORD *)(v95 + 72);
          *(_OWORD *)v349 = *(_OWORD *)(v95 + 56);
          *(_OWORD *)&v349[16] = v96;
          v97 = (const void *)*((_QWORD *)v95 + 12);
          *(_QWORD *)&v349[32] = *((_QWORD *)v95 + 11);
          *(_OWORD *)__src = 0uLL;
          v351[0] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, v97, *((_QWORD *)v95 + 13), (uint64_t)(*((_QWORD *)v95 + 13) - (_QWORD)v97) >> 2);
          v98 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
          v99 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v98, &v336, (__int128 **)&v360);
          v100 = *(_OWORD *)(v99 + 72);
          v101 = *((_QWORD *)v99 + 11);
          *(_OWORD *)&v351[1] = *(_OWORD *)(v99 + 56);
          *(_OWORD *)&v351[3] = v100;
          v351[5] = v101;
          v352 = 0;
          v353[1] = 0;
          v353[0] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v352, *((const void **)v99 + 12), *((_QWORD *)v99 + 13), (uint64_t)(*((_QWORD *)v99 + 13) - *((_QWORD *)v99 + 12)) >> 2);
          memset(&v362, 0, sizeof(v362));
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
          v360.__r_.__value_.__s.__data_[8] = 0;
          v362.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x80uLL);
          v362.__r_.__value_.__l.__size_ = v362.__r_.__value_.__r.__words[0];
          v362.__r_.__value_.__r.__words[2] = v362.__r_.__value_.__r.__words[0] + 128;
          v362.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v362.__r_.__value_.__r.__words[2], (__int128 *)v349, &lpsrc, (uint64_t)v362.__r_.__value_.__l.__data_);
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v93 + 64))(&v326, v93, &v362);
          v102 = *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 32);
          v103 = *(_OWORD *)(v326.__r_.__value_.__r.__words[0] + 16);
          lpsrc = *(_OWORD *)v326.__r_.__value_.__l.__data_;
          *(_OWORD *)v355 = v103;
          *(_QWORD *)&v355[16] = v102;
          v356 = 0;
          v357 = 0uLL;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v356, *(const void **)(v326.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 40)) >> 2);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
          for (j = 0; j != -16; j -= 8)
          {
            v105 = (void *)v353[j - 1];
            if (v105)
            {
              v353[j] = v105;
              operator delete(v105);
            }
          }
          v106 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
          *(_QWORD *)v349 = &__p;
          v107 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v106, &__p, (__int128 **)v349);
          v108 = *(_OWORD *)v355;
          *(_OWORD *)(v107 + 56) = lpsrc;
          *(_OWORD *)(v107 + 72) = v108;
          *((_QWORD *)v107 + 11) = *(_QWORD *)&v355[16];
          if (v107 + 56 != (char *)&lpsrc)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v107 + 96, (char *)v356, v357, (uint64_t)(v357 - (_QWORD)v356) >> 2);
          if (v356)
          {
            *(_QWORD *)&v357 = v356;
            operator delete(v356);
          }
          v109 = (std::__shared_weak_count *)v334;
          if (v334)
          {
            v110 = (unint64_t *)(v334 + 8);
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          v112 = v343;
          if (v343)
          {
            v113 = (unint64_t *)&v343->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          *(_QWORD *)&v344[8] = 0x100000007;
          *(_QWORD *)&v344[16] = 0;
          *(_QWORD *)&v344[24] = 0;
          v345 = 0xFFFFFFFF00000000;
          LOBYTE(v346[0]) = 0;
          *(_QWORD *)v344 = 0x358637BD00000004;
          v115 = 1;
          switch(v8)
          {
            case 0:
              goto LABEL_203;
            case 1:
              v115 = 3;
              goto LABEL_203;
            case 2:
              goto LABEL_204;
            case 3:
              v115 = 31;
LABEL_203:
              *(_DWORD *)&v344[8] = v115;
LABEL_204:
              std::string::operator=(&v336, &__p);
              if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v116 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
              else
                v116 = v341.__r_.__value_.__l.__size_;
              v117 = v349;
              std::string::basic_string[abi:ne180100]((uint64_t)v349, v116 + 15);
              if (v349[23] < 0)
                v117 = *(_BYTE **)v349;
              if (v116)
              {
                if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v118 = &v341;
                else
                  v118 = (std::string *)v341.__r_.__value_.__r.__words[0];
                memmove(v117, v118, v116);
              }
              strcpy(&v117[v116], "__@reduce_sumsq");
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __p = *(std::string *)v349;
              v119 = *(_QWORD *)(a1 + 40);
              v121 = *(void ***)(v119 + 16);
              v120 = *(std::__shared_weak_count **)(v119 + 24);
              v342 = (std::string *)v121;
              v343 = v120;
              if (v120)
              {
                v122 = (unint64_t *)&v120->__shared_owners_;
                do
                  v123 = __ldxr(v122);
                while (__stxr(v123 + 1, v122));
              }
              Espresso::abstract_engine_factory::shared(&v326);
              v124 = v326.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(v349, "reduce");
              LODWORD(v362.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v342->__r_.__value_.__l.__size_)((void *)v342->__r_.__value_.__l.__size_);
              Espresso::abstract_engine_factory::make_kernel_priv(v124, (uint64_t)&v342, (uint64_t)v349, (uint64_t)v344, (int *)&v362);
              if ((_QWORD)lpsrc
              {
                v333 = (uint64_t)v125;
                v334 = *((_QWORD *)&lpsrc + 1);
                if (*((_QWORD *)&lpsrc + 1))
                {
                  v126 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
                  do
                    v127 = __ldxr(v126);
                  while (__stxr(v127 + 1, v126));
                }
              }
              else
              {
                v333 = 0;
                v334 = 0;
              }
              v128 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
              if (*((_QWORD *)&lpsrc + 1))
              {
                v129 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
              if ((v349[23] & 0x80000000) != 0)
                operator delete(*(void **)v349);
              v131 = (std::__shared_weak_count *)v326.__r_.__value_.__l.__size_;
              if (v326.__r_.__value_.__l.__size_)
              {
                v132 = (unint64_t *)(v326.__r_.__value_.__l.__size_ + 8);
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                  std::__shared_weak_count::__release_weak(v131);
                }
              }
              v134 = (std::__shared_weak_count *)v334;
              v330[0] = v333;
              v330[1] = v334;
              if (v334)
              {
                v135 = (unint64_t *)(v334 + 8);
                do
                  v136 = __ldxr(v135);
                while (__stxr(v136 + 1, v135));
              }
              std::string::basic_string[abi:ne180100]<0>(v349, "reduce");
              if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v137 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
              else
                v137 = v339.__r_.__value_.__l.__size_;
              v138 = &lpsrc;
              std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v137 + 15);
              if (v355[7] < 0)
                v138 = (__int128 *)lpsrc;
              if (v137)
              {
                if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v139 = &v339;
                else
                  v139 = (std::string *)v339.__r_.__value_.__r.__words[0];
                memmove(v138, v139, v137);
              }
              strcpy((char *)v138 + v137, "__@reduce_sumsq");
              if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v362, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
              else
                v362 = v336;
              memset(&v326, 0, sizeof(v326));
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              v360.__r_.__value_.__s.__data_[8] = 0;
              v326.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v326.__r_.__value_.__l.__size_ = v326.__r_.__value_.__r.__words[0];
              v326.__r_.__value_.__r.__words[2] = v326.__r_.__value_.__r.__words[0] + 24;
              v326.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v326.__r_.__value_.__r.__words[2], (__int128 *)&v362, &v363, (std::string *)v326.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v358, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v358 = __p;
              memset(&v360, 0, sizeof(v360));
              v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              v347.__r_.__value_.__s.__data_[8] = 0;
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v360.__r_.__value_.__l.__size_ = v360.__r_.__value_.__r.__words[0];
              v360.__r_.__value_.__r.__words[2] = v360.__r_.__value_.__r.__words[0] + 24;
              v360.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360.__r_.__value_.__r.__words[2], (__int128 *)&v358, (__int128 *)&v359, (std::string *)v360.__r_.__value_.__l.__data_);
              Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v330, (const std::string *)v349, (const std::string *)&lpsrc, (std::string **)&v326, (std::string **)&v360);
              v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
              if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v358.__r_.__value_.__l.__data_);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v362.__r_.__value_.__l.__data_);
              if ((v355[7] & 0x80000000) != 0)
                operator delete((void *)lpsrc);
              if ((v349[23] & 0x80000000) != 0)
                operator delete(*(void **)v349);
              if (v134)
              {
                v140 = (unint64_t *)&v134->__shared_owners_;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                  std::__shared_weak_count::__release_weak(v134);
                }
              }
              v142 = v333;
              v143 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
              v144 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, &v336, (__int128 **)&v360);
              v145 = *(_OWORD *)(v144 + 72);
              lpsrc = *(_OWORD *)(v144 + 56);
              *(_OWORD *)v355 = v145;
              v146 = (const void *)*((_QWORD *)v144 + 12);
              *(_QWORD *)&v355[16] = *((_QWORD *)v144 + 11);
              v356 = 0;
              v357 = 0uLL;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v356, v146, *((_QWORD *)v144 + 13), (uint64_t)(*((_QWORD *)v144 + 13) - (_QWORD)v146) >> 2);
              memset(&v362, 0, sizeof(v362));
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              v360.__r_.__value_.__s.__data_[8] = 0;
              v362.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
              v362.__r_.__value_.__l.__size_ = v362.__r_.__value_.__r.__words[0];
              v362.__r_.__value_.__r.__words[2] = v362.__r_.__value_.__r.__words[0] + 64;
              v362.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v362.__r_.__value_.__r.__words[2], &lpsrc, (__int128 *)&v358, (uint64_t)v362.__r_.__value_.__l.__data_);
              (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v142 + 64))(&v326, v142, &v362);
              v147 = *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 32);
              v148 = *(_OWORD *)(v326.__r_.__value_.__r.__words[0] + 16);
              *(_OWORD *)v349 = *(_OWORD *)v326.__r_.__value_.__l.__data_;
              *(_OWORD *)&v349[16] = v148;
              *(_QWORD *)&v349[32] = v147;
              *(_OWORD *)__src = 0uLL;
              v351[0] = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, *(const void **)(v326.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 40)) >> 2);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              if (v356)
              {
                *(_QWORD *)&v357 = v356;
                operator delete(v356);
              }
              v149 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              *(_QWORD *)&lpsrc = &__p;
              v150 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v149, &__p, (__int128 **)&lpsrc);
              v151 = *(_OWORD *)&v349[16];
              *(_OWORD *)(v150 + 56) = *(_OWORD *)v349;
              *(_OWORD *)(v150 + 72) = v151;
              *((_QWORD *)v150 + 11) = *(_QWORD *)&v349[32];
              if (v150 + 56 != v349)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v150 + 96, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
              if (__src[0])
              {
                __src[1] = __src[0];
                operator delete(__src[0]);
              }
              v152 = (std::__shared_weak_count *)v334;
              if (v334)
              {
                v153 = (unint64_t *)(v334 + 8);
                do
                  v154 = __ldaxr(v153);
                while (__stlxr(v154 - 1, v153));
                if (!v154)
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
              }
              v155 = v343;
              if (v343)
              {
                v156 = (unint64_t *)&v343->__shared_owners_;
                do
                  v157 = __ldaxr(v156);
                while (__stlxr(v157 - 1, v156));
                if (!v157)
                {
                  ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                  std::__shared_weak_count::__release_weak(v155);
                }
              }
              v326.__r_.__value_.__r.__words[2] = 897988541;
              v327 = 0;
              v328 = 0;
              v329 = 0;
              v326.__r_.__value_.__r.__words[0] = 1;
              v326.__r_.__value_.__l.__size_ = 1065353216;
              v158 = *(_QWORD *)(a1 + 40);
              v159 = a2[3].i32[2];
              *(_QWORD *)v344 = v159;
              *(_QWORD *)&lpsrc = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v158 + 56, v159, v344)[3];
              v160 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v158 + 184), (_QWORD *)lpsrc, (__int128 **)&lpsrc);
              v161 = *(_OWORD *)(v160 + 72);
              *(_OWORD *)v349 = *(_OWORD *)(v160 + 56);
              *(_OWORD *)&v349[16] = v161;
              v162 = (const void *)*((_QWORD *)v160 + 12);
              *(_QWORD *)&v349[32] = *((_QWORD *)v160 + 11);
              *(_OWORD *)__src = 0uLL;
              v351[0] = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, v162, *((_QWORD *)v160 + 13), (uint64_t)(*((_QWORD *)v160 + 13) - (_QWORD)v162) >> 2);
              switch(v8)
              {
                case 0:
                  v163 = *(_DWORD *)v349;
                  break;
                case 1:
                  v163 = *(_DWORD *)&v349[4] * *(_DWORD *)v349;
                  break;
                case 2:
                  v163 = *(_DWORD *)&v349[4] * *(_DWORD *)v349 * *(_DWORD *)&v349[8];
                  break;
                case 3:
                  v163 = *(_DWORD *)&v349[4] * *(_DWORD *)v349 * *(_DWORD *)&v349[8] * *(_DWORD *)&v349[12];
                  break;
                default:
                  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("L2-Norm Axis has to be within [0-3]");
              }
              *(float *)&v326.__r_.__value_.__r.__words[1] = 1.0 / (float)v163;
              std::string::operator=(&v336, &__p);
              if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v164 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
              else
                v164 = v341.__r_.__value_.__l.__size_;
              v165 = &lpsrc;
              std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v164 + 15);
              if (v355[7] < 0)
                v165 = (__int128 *)lpsrc;
              if (v164)
              {
                if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v166 = &v341;
                else
                  v166 = (std::string *)v341.__r_.__value_.__r.__words[0];
                memmove(v165, v166, v164);
              }
              strcpy((char *)v165 + v164, "__@ew_div_count");
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = lpsrc;
              __p.__r_.__value_.__r.__words[2] = *(_QWORD *)v355;
              v167 = *(_QWORD *)(a1 + 40);
              v169 = *(_QWORD *)(v167 + 16);
              v168 = *(_QWORD *)(v167 + 24);
              v333 = v169;
              v334 = v168;
              if (v168)
              {
                v170 = (unint64_t *)(v168 + 8);
                do
                  v171 = __ldxr(v170);
                while (__stxr(v171 + 1, v170));
              }
              Espresso::abstract_engine_factory::shared(&v362);
              v172 = v362.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
              LODWORD(v360.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v333 + 8))(*(_QWORD *)(v333 + 8));
              Espresso::abstract_engine_factory::make_kernel_priv(v172, (uint64_t)&v333, (uint64_t)&lpsrc, (uint64_t)&v326, (int *)&v360);
              if (*(_QWORD *)v344
              {
                v324 = (uint64_t)v173;
                v325 = *(_QWORD *)&v344[8];
                if (*(_QWORD *)&v344[8])
                {
                  v174 = (unint64_t *)(*(_QWORD *)&v344[8] + 8);
                  do
                    v175 = __ldxr(v174);
                  while (__stxr(v175 + 1, v174));
                }
              }
              else
              {
                v324 = 0;
                v325 = 0;
              }
              v176 = *(std::__shared_weak_count **)&v344[8];
              if (*(_QWORD *)&v344[8])
              {
                v177 = (unint64_t *)(*(_QWORD *)&v344[8] + 8);
                do
                  v178 = __ldaxr(v177);
                while (__stlxr(v178 - 1, v177));
                if (!v178)
                {
                  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                  std::__shared_weak_count::__release_weak(v176);
                }
              }
              if ((v355[7] & 0x80000000) != 0)
                operator delete((void *)lpsrc);
              v179 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
              if (v362.__r_.__value_.__l.__size_)
              {
                v180 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                do
                  v181 = __ldaxr(v180);
                while (__stlxr(v181 - 1, v180));
                if (!v181)
                {
                  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                  std::__shared_weak_count::__release_weak(v179);
                }
              }
              v182 = (std::__shared_weak_count *)v325;
              v323[0] = v324;
              v323[1] = v325;
              if (v325)
              {
                v183 = (unint64_t *)(v325 + 8);
                do
                  v184 = __ldxr(v183);
                while (__stxr(v184 + 1, v183));
              }
              std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
              if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v185 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
              else
                v185 = v339.__r_.__value_.__l.__size_;
              v186 = v344;
              std::string::basic_string[abi:ne180100]((uint64_t)v344, v185 + 15);
              if (v344[23] < 0)
                v186 = *(_BYTE **)v344;
              if (v185)
              {
                if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v187 = &v339;
                else
                  v187 = (std::string *)v339.__r_.__value_.__r.__words[0];
                memmove(v186, v187, v185);
              }
              strcpy(&v186[v185], "__@ew_div_count");
              if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v360, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
              else
                v360 = v336;
              memset(&v362, 0, sizeof(v362));
              v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              v358.__r_.__value_.__s.__data_[8] = 0;
              v362.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v362.__r_.__value_.__l.__size_ = v362.__r_.__value_.__r.__words[0];
              v362.__r_.__value_.__r.__words[2] = v362.__r_.__value_.__r.__words[0] + 24;
              v362.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v362.__r_.__value_.__r.__words[2], (__int128 *)&v360, (__int128 *)&v361, (std::string *)v362.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v347, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v347 = __p;
              memset(&v358, 0, sizeof(v358));
              v342 = &v358;
              LOBYTE(v343) = 0;
              v358.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
              v358.__r_.__value_.__r.__words[2] = v358.__r_.__value_.__r.__words[0] + 24;
              v358.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v358.__r_.__value_.__r.__words[2], (__int128 *)&v347, (__int128 *)&v348, (std::string *)v358.__r_.__value_.__l.__data_);
              Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v323, (const std::string *)&lpsrc, (const std::string *)v344, (std::string **)&v362, (std::string **)&v358);
              v342 = &v358;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v342);
              if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v347.__r_.__value_.__l.__data_);
              v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
              if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v360.__r_.__value_.__l.__data_);
              if ((v344[23] & 0x80000000) != 0)
                operator delete(*(void **)v344);
              if ((v355[7] & 0x80000000) != 0)
                operator delete((void *)lpsrc);
              if (v182)
              {
                v188 = (unint64_t *)&v182->__shared_owners_;
                do
                  v189 = __ldaxr(v188);
                while (__stlxr(v189 - 1, v188));
                if (!v189)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
              v190 = v324;
              v191 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
              v192 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v191, &v336, (__int128 **)&v358);
              v193 = *(_OWORD *)(v192 + 72);
              *(_OWORD *)v344 = *(_OWORD *)(v192 + 56);
              *(_OWORD *)&v344[16] = v193;
              v194 = (const void *)*((_QWORD *)v192 + 12);
              v345 = *((_QWORD *)v192 + 11);
              memset(v346, 0, sizeof(v346));
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v346, v194, *((_QWORD *)v192 + 13), (uint64_t)(*((_QWORD *)v192 + 13) - (_QWORD)v194) >> 2);
              memset(&v360, 0, sizeof(v360));
              v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              v358.__r_.__value_.__s.__data_[8] = 0;
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
              v360.__r_.__value_.__l.__size_ = v360.__r_.__value_.__r.__words[0];
              v360.__r_.__value_.__r.__words[2] = v360.__r_.__value_.__r.__words[0] + 64;
              v360.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v360.__r_.__value_.__r.__words[2], (__int128 *)v344, (__int128 *)&v347, (uint64_t)v360.__r_.__value_.__l.__data_);
              (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v190 + 64))(&v362, v190, &v360);
              v195 = *(_QWORD *)(v362.__r_.__value_.__r.__words[0] + 32);
              v196 = *(_OWORD *)(v362.__r_.__value_.__r.__words[0] + 16);
              lpsrc = *(_OWORD *)v362.__r_.__value_.__l.__data_;
              *(_OWORD *)v355 = v196;
              *(_QWORD *)&v355[16] = v195;
              v356 = 0;
              v357 = 0uLL;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v356, *(const void **)(v362.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v362.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v362.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v362.__r_.__value_.__r.__words[0] + 40)) >> 2);
              v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
              v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
              if (v346[0])
              {
                v346[1] = v346[0];
                operator delete(v346[0]);
              }
              v197 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              *(_QWORD *)v344 = &__p;
              v198 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v197, &__p, (__int128 **)v344);
              v199 = *(_OWORD *)v355;
              *(_OWORD *)(v198 + 56) = lpsrc;
              *(_OWORD *)(v198 + 72) = v199;
              *((_QWORD *)v198 + 11) = *(_QWORD *)&v355[16];
              if (v198 + 56 != (char *)&lpsrc)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v198 + 96, (char *)v356, v357, (uint64_t)(v357 - (_QWORD)v356) >> 2);
              if (v356)
              {
                *(_QWORD *)&v357 = v356;
                operator delete(v356);
              }
              v200 = (std::__shared_weak_count *)v325;
              if (v325)
              {
                v201 = (unint64_t *)(v325 + 8);
                do
                  v202 = __ldaxr(v201);
                while (__stlxr(v202 - 1, v201));
                if (!v202)
                {
                  ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                  std::__shared_weak_count::__release_weak(v200);
                }
              }
              v203 = (std::__shared_weak_count *)v334;
              if (v334)
              {
                v204 = (unint64_t *)(v334 + 8);
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              if (__src[0])
              {
                __src[1] = __src[0];
                operator delete(__src[0]);
              }
              *(_QWORD *)&v344[12] = 0x358637BD00000000;
              *(_DWORD *)&v344[20] = 0;
              v344[24] = 0;
              *(void **)((char *)v346 + 4) = 0;
              *(_QWORD *)v344 = 0;
              *(_DWORD *)&v344[8] = v7;
              std::string::operator=(&v336, &__p);
              if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v206 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
              else
                v206 = v341.__r_.__value_.__l.__size_;
              v207 = v349;
              std::string::basic_string[abi:ne180100]((uint64_t)v349, v206 + 13);
              if (v349[23] < 0)
                v207 = *(_BYTE **)v349;
              if (v206)
              {
                if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v208 = &v341;
                else
                  v208 = (std::string *)v341.__r_.__value_.__r.__words[0];
                memmove(v207, v208, v206);
              }
              strcpy(&v207[v206], "__@ew_add_eps");
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __p = *(std::string *)v349;
              v209 = *(_QWORD *)(a1 + 40);
              v211 = *(void ***)(v209 + 16);
              v210 = *(std::__shared_weak_count **)(v209 + 24);
              v342 = (std::string *)v211;
              v343 = v210;
              if (v210)
              {
                v212 = (unint64_t *)&v210->__shared_owners_;
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
              }
              Espresso::abstract_engine_factory::shared(&v326);
              v214 = v326.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(v349, "elementwise");
              LODWORD(v362.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v342->__r_.__value_.__l.__size_)((void *)v342->__r_.__value_.__l.__size_);
              Espresso::abstract_engine_factory::make_kernel_priv(v214, (uint64_t)&v342, (uint64_t)v349, (uint64_t)v344, (int *)&v362);
              if ((_QWORD)lpsrc
              {
                v333 = (uint64_t)v215;
                v334 = *((_QWORD *)&lpsrc + 1);
                if (*((_QWORD *)&lpsrc + 1))
                {
                  v216 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
                  do
                    v217 = __ldxr(v216);
                  while (__stxr(v217 + 1, v216));
                }
              }
              else
              {
                v333 = 0;
                v334 = 0;
              }
              v218 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
              if (*((_QWORD *)&lpsrc + 1))
              {
                v219 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
                do
                  v220 = __ldaxr(v219);
                while (__stlxr(v220 - 1, v219));
                if (!v220)
                {
                  ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                  std::__shared_weak_count::__release_weak(v218);
                }
              }
              if ((v349[23] & 0x80000000) != 0)
                operator delete(*(void **)v349);
              v221 = (std::__shared_weak_count *)v326.__r_.__value_.__l.__size_;
              if (v326.__r_.__value_.__l.__size_)
              {
                v222 = (unint64_t *)(v326.__r_.__value_.__l.__size_ + 8);
                do
                  v223 = __ldaxr(v222);
                while (__stlxr(v223 - 1, v222));
                if (!v223)
                {
                  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                  std::__shared_weak_count::__release_weak(v221);
                }
              }
              v224 = (std::__shared_weak_count *)v334;
              v322[0] = v333;
              v322[1] = v334;
              if (v334)
              {
                v225 = (unint64_t *)(v334 + 8);
                do
                  v226 = __ldxr(v225);
                while (__stxr(v226 + 1, v225));
              }
              std::string::basic_string[abi:ne180100]<0>(v349, "elementwise");
              if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v227 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
              else
                v227 = v339.__r_.__value_.__l.__size_;
              v228 = &lpsrc;
              std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v227 + 13);
              if (v355[7] < 0)
                v228 = (__int128 *)lpsrc;
              if (v227)
              {
                if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v229 = &v339;
                else
                  v229 = (std::string *)v339.__r_.__value_.__r.__words[0];
                memmove(v228, v229, v227);
              }
              strcpy((char *)v228 + v227, "__@ew_add_eps");
              if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v362, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
              else
                v362 = v336;
              memset(&v326, 0, sizeof(v326));
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              v360.__r_.__value_.__s.__data_[8] = 0;
              v326.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v326.__r_.__value_.__l.__size_ = v326.__r_.__value_.__r.__words[0];
              v326.__r_.__value_.__r.__words[2] = v326.__r_.__value_.__r.__words[0] + 24;
              v326.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v326.__r_.__value_.__r.__words[2], (__int128 *)&v362, &v363, (std::string *)v326.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v358, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v358 = __p;
              memset(&v360, 0, sizeof(v360));
              v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              v347.__r_.__value_.__s.__data_[8] = 0;
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v360.__r_.__value_.__l.__size_ = v360.__r_.__value_.__r.__words[0];
              v360.__r_.__value_.__r.__words[2] = v360.__r_.__value_.__r.__words[0] + 24;
              v360.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360.__r_.__value_.__r.__words[2], (__int128 *)&v358, (__int128 *)&v359, (std::string *)v360.__r_.__value_.__l.__data_);
              Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v322, (const std::string *)v349, (const std::string *)&lpsrc, (std::string **)&v326, (std::string **)&v360);
              v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
              if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v358.__r_.__value_.__l.__data_);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v362.__r_.__value_.__l.__data_);
              if ((v355[7] & 0x80000000) != 0)
                operator delete((void *)lpsrc);
              if ((v349[23] & 0x80000000) != 0)
                operator delete(*(void **)v349);
              if (v224)
              {
                v230 = (unint64_t *)&v224->__shared_owners_;
                do
                  v231 = __ldaxr(v230);
                while (__stlxr(v231 - 1, v230));
                if (!v231)
                {
                  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                  std::__shared_weak_count::__release_weak(v224);
                }
              }
              v232 = v333;
              v233 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
              v234 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v233, &v336, (__int128 **)&v360);
              v235 = *(_OWORD *)(v234 + 72);
              lpsrc = *(_OWORD *)(v234 + 56);
              *(_OWORD *)v355 = v235;
              v236 = (const void *)*((_QWORD *)v234 + 12);
              *(_QWORD *)&v355[16] = *((_QWORD *)v234 + 11);
              v356 = 0;
              v357 = 0uLL;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v356, v236, *((_QWORD *)v234 + 13), (uint64_t)(*((_QWORD *)v234 + 13) - (_QWORD)v236) >> 2);
              memset(&v362, 0, sizeof(v362));
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              v360.__r_.__value_.__s.__data_[8] = 0;
              v362.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
              v362.__r_.__value_.__l.__size_ = v362.__r_.__value_.__r.__words[0];
              v362.__r_.__value_.__r.__words[2] = v362.__r_.__value_.__r.__words[0] + 64;
              v362.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v362.__r_.__value_.__r.__words[2], &lpsrc, (__int128 *)&v358, (uint64_t)v362.__r_.__value_.__l.__data_);
              (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v232 + 64))(&v326, v232, &v362);
              v237 = *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 32);
              v238 = *(_OWORD *)(v326.__r_.__value_.__r.__words[0] + 16);
              *(_OWORD *)v349 = *(_OWORD *)v326.__r_.__value_.__l.__data_;
              *(_OWORD *)&v349[16] = v238;
              *(_QWORD *)&v349[32] = v237;
              *(_OWORD *)__src = 0uLL;
              v351[0] = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, *(const void **)(v326.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 40)) >> 2);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              if (v356)
              {
                *(_QWORD *)&v357 = v356;
                operator delete(v356);
              }
              v239 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              *(_QWORD *)&lpsrc = &__p;
              v240 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v239, &__p, (__int128 **)&lpsrc);
              v241 = *(_OWORD *)&v349[16];
              *(_OWORD *)(v240 + 56) = *(_OWORD *)v349;
              *(_OWORD *)(v240 + 72) = v241;
              *((_QWORD *)v240 + 11) = *(_QWORD *)&v349[32];
              if (v240 + 56 != v349)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v240 + 96, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
              if (__src[0])
              {
                __src[1] = __src[0];
                operator delete(__src[0]);
              }
              v242 = (std::__shared_weak_count *)v334;
              if (v334)
              {
                v243 = (unint64_t *)(v334 + 8);
                do
                  v244 = __ldaxr(v243);
                while (__stlxr(v244 - 1, v243));
                if (!v244)
                {
                  ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                  std::__shared_weak_count::__release_weak(v242);
                }
              }
              v245 = v343;
              if (v343)
              {
                v246 = (unint64_t *)&v343->__shared_owners_;
                do
                  v247 = __ldaxr(v246);
                while (__stlxr(v247 - 1, v246));
                if (!v247)
                {
                  ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                  std::__shared_weak_count::__release_weak(v245);
                }
              }
              *(_QWORD *)&v344[16] = 897988541;
              v344[24] = 0;
              *(void **)((char *)v346 + 4) = 0;
              *(_QWORD *)v344 = 12;
              *(_QWORD *)&v344[8] = 1065353216;
              std::string::operator=(&v336, &__p);
              if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v248 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
              else
                v248 = v341.__r_.__value_.__l.__size_;
              v249 = v349;
              std::string::basic_string[abi:ne180100]((uint64_t)v349, v248 + 11);
              if (v349[23] < 0)
                v249 = *(_BYTE **)v349;
              if (v248)
              {
                if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v250 = &v341;
                else
                  v250 = (std::string *)v341.__r_.__value_.__r.__words[0];
                memmove(v249, v250, v248);
              }
              strcpy(&v249[v248], "__@ew_rsqrt");
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __p = *(std::string *)v349;
              v251 = *(_QWORD *)(a1 + 40);
              v253 = *(void ***)(v251 + 16);
              v252 = *(std::__shared_weak_count **)(v251 + 24);
              v342 = (std::string *)v253;
              v343 = v252;
              if (v252)
              {
                v254 = (unint64_t *)&v252->__shared_owners_;
                do
                  v255 = __ldxr(v254);
                while (__stxr(v255 + 1, v254));
              }
              Espresso::abstract_engine_factory::shared(&v326);
              v256 = v326.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(v349, "elementwise");
              LODWORD(v362.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v342->__r_.__value_.__l.__size_)((void *)v342->__r_.__value_.__l.__size_);
              Espresso::abstract_engine_factory::make_kernel_priv(v256, (uint64_t)&v342, (uint64_t)v349, (uint64_t)v344, (int *)&v362);
              if ((_QWORD)lpsrc
              {
                v333 = (uint64_t)v257;
                v334 = *((_QWORD *)&lpsrc + 1);
                if (*((_QWORD *)&lpsrc + 1))
                {
                  v258 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
                  do
                    v259 = __ldxr(v258);
                  while (__stxr(v259 + 1, v258));
                }
              }
              else
              {
                v333 = 0;
                v334 = 0;
              }
              v260 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
              if (*((_QWORD *)&lpsrc + 1))
              {
                v261 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
                do
                  v262 = __ldaxr(v261);
                while (__stlxr(v262 - 1, v261));
                if (!v262)
                {
                  ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                  std::__shared_weak_count::__release_weak(v260);
                }
              }
              if ((v349[23] & 0x80000000) != 0)
                operator delete(*(void **)v349);
              v263 = (std::__shared_weak_count *)v326.__r_.__value_.__l.__size_;
              if (v326.__r_.__value_.__l.__size_)
              {
                v264 = (unint64_t *)(v326.__r_.__value_.__l.__size_ + 8);
                do
                  v265 = __ldaxr(v264);
                while (__stlxr(v265 - 1, v264));
                if (!v265)
                {
                  ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                  std::__shared_weak_count::__release_weak(v263);
                }
              }
              v266 = (std::__shared_weak_count *)v334;
              v321[0] = v333;
              v321[1] = v334;
              if (v334)
              {
                v267 = (unint64_t *)(v334 + 8);
                do
                  v268 = __ldxr(v267);
                while (__stxr(v268 + 1, v267));
              }
              std::string::basic_string[abi:ne180100]<0>(v349, "elementwise");
              if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v269 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
              else
                v269 = v339.__r_.__value_.__l.__size_;
              v270 = &lpsrc;
              std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v269 + 11);
              if (v355[7] < 0)
                v270 = (__int128 *)lpsrc;
              if (v269)
              {
                if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v271 = &v339;
                else
                  v271 = (std::string *)v339.__r_.__value_.__r.__words[0];
                memmove(v270, v271, v269);
              }
              strcpy((char *)v270 + v269, "__@ew_rsqrt");
              if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v362, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
              else
                v362 = v336;
              memset(&v326, 0, sizeof(v326));
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              v360.__r_.__value_.__s.__data_[8] = 0;
              v326.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v326.__r_.__value_.__l.__size_ = v326.__r_.__value_.__r.__words[0];
              v326.__r_.__value_.__r.__words[2] = v326.__r_.__value_.__r.__words[0] + 24;
              v326.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v326.__r_.__value_.__r.__words[2], (__int128 *)&v362, &v363, (std::string *)v326.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v358, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v358 = __p;
              memset(&v360, 0, sizeof(v360));
              v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              v347.__r_.__value_.__s.__data_[8] = 0;
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v360.__r_.__value_.__l.__size_ = v360.__r_.__value_.__r.__words[0];
              v360.__r_.__value_.__r.__words[2] = v360.__r_.__value_.__r.__words[0] + 24;
              v360.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360.__r_.__value_.__r.__words[2], (__int128 *)&v358, (__int128 *)&v359, (std::string *)v360.__r_.__value_.__l.__data_);
              Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v321, (const std::string *)v349, (const std::string *)&lpsrc, (std::string **)&v326, (std::string **)&v360);
              v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
              if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v358.__r_.__value_.__l.__data_);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v362.__r_.__value_.__l.__data_);
              if ((v355[7] & 0x80000000) != 0)
                operator delete((void *)lpsrc);
              if ((v349[23] & 0x80000000) != 0)
                operator delete(*(void **)v349);
              if (v266)
              {
                v272 = (unint64_t *)&v266->__shared_owners_;
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                  std::__shared_weak_count::__release_weak(v266);
                }
              }
              v274 = v333;
              v275 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
              v276 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v275, &v336, (__int128 **)&v360);
              v277 = *(_OWORD *)(v276 + 72);
              lpsrc = *(_OWORD *)(v276 + 56);
              *(_OWORD *)v355 = v277;
              v278 = (const void *)*((_QWORD *)v276 + 12);
              *(_QWORD *)&v355[16] = *((_QWORD *)v276 + 11);
              v356 = 0;
              v357 = 0uLL;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v356, v278, *((_QWORD *)v276 + 13), (uint64_t)(*((_QWORD *)v276 + 13) - (_QWORD)v278) >> 2);
              memset(&v362, 0, sizeof(v362));
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              v360.__r_.__value_.__s.__data_[8] = 0;
              v362.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
              v362.__r_.__value_.__l.__size_ = v362.__r_.__value_.__r.__words[0];
              v362.__r_.__value_.__r.__words[2] = v362.__r_.__value_.__r.__words[0] + 64;
              v362.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v362.__r_.__value_.__r.__words[2], &lpsrc, (__int128 *)&v358, (uint64_t)v362.__r_.__value_.__l.__data_);
              (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v274 + 64))(&v326, v274, &v362);
              v279 = *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 32);
              v280 = *(_OWORD *)(v326.__r_.__value_.__r.__words[0] + 16);
              *(_OWORD *)v349 = *(_OWORD *)v326.__r_.__value_.__l.__data_;
              *(_OWORD *)&v349[16] = v280;
              *(_QWORD *)&v349[32] = v279;
              *(_OWORD *)__src = 0uLL;
              v351[0] = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, *(const void **)(v326.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v326.__r_.__value_.__r.__words[0] + 40)) >> 2);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              if (v356)
              {
                *(_QWORD *)&v357 = v356;
                operator delete(v356);
              }
              v281 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
              *(_QWORD *)&lpsrc = &__p;
              v282 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v281, &__p, (__int128 **)&lpsrc);
              v283 = *(_OWORD *)&v349[16];
              *(_OWORD *)(v282 + 56) = *(_OWORD *)v349;
              *(_OWORD *)(v282 + 72) = v283;
              *((_QWORD *)v282 + 11) = *(_QWORD *)&v349[32];
              if (v282 + 56 != v349)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v282 + 96, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
              if (__src[0])
              {
                __src[1] = __src[0];
                operator delete(__src[0]);
              }
              v284 = (std::__shared_weak_count *)v334;
              if (v334)
              {
                v285 = (unint64_t *)(v334 + 8);
                do
                  v286 = __ldaxr(v285);
                while (__stlxr(v286 - 1, v285));
                if (!v286)
                {
                  ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                  std::__shared_weak_count::__release_weak(v284);
                }
              }
              v287 = v343;
              if (v343)
              {
                v288 = (unint64_t *)&v343->__shared_owners_;
                do
                  v289 = __ldaxr(v288);
                while (__stlxr(v289 - 1, v288));
                if (!v289)
                {
                  ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                  std::__shared_weak_count::__release_weak(v287);
                }
              }
              *(_QWORD *)&v349[16] = 897988541;
              v349[24] = 0;
              *(void **)((char *)__src + 4) = 0;
              *(_QWORD *)&v349[8] = 1065353216;
              *(_QWORD *)v349 = 1;
              std::string::operator=(&v336, &__p);
              std::string::operator=(&__p, &v341);
              v290 = *(_QWORD *)(a1 + 40);
              v292 = *(void ***)(v290 + 16);
              v291 = *(std::__shared_weak_count **)(v290 + 24);
              v342 = (std::string *)v292;
              v343 = v291;
              if (v291)
              {
                v293 = (unint64_t *)&v291->__shared_owners_;
                do
                  v294 = __ldxr(v293);
                while (__stxr(v294 + 1, v293));
              }
              Espresso::abstract_engine_factory::shared(&v326);
              v295 = v326.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
              LODWORD(v362.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v342->__r_.__value_.__l.__size_)((void *)v342->__r_.__value_.__l.__size_);
              Espresso::abstract_engine_factory::make_kernel_priv(v295, (uint64_t)&v342, (uint64_t)&lpsrc, (uint64_t)v349, (int *)&v362);
              if (*(_QWORD *)v344
              {
                v333 = (uint64_t)v296;
                v334 = *(_QWORD *)&v344[8];
                if (*(_QWORD *)&v344[8])
                {
                  v297 = (unint64_t *)(*(_QWORD *)&v344[8] + 8);
                  do
                    v298 = __ldxr(v297);
                  while (__stxr(v298 + 1, v297));
                }
              }
              else
              {
                v333 = 0;
                v334 = 0;
              }
              v299 = *(std::__shared_weak_count **)&v344[8];
              if (*(_QWORD *)&v344[8])
              {
                v300 = (unint64_t *)(*(_QWORD *)&v344[8] + 8);
                do
                  v301 = __ldaxr(v300);
                while (__stlxr(v301 - 1, v300));
                if (!v301)
                {
                  ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                  std::__shared_weak_count::__release_weak(v299);
                }
              }
              if ((v355[7] & 0x80000000) != 0)
                operator delete((void *)lpsrc);
              v302 = (std::__shared_weak_count *)v326.__r_.__value_.__l.__size_;
              if (v326.__r_.__value_.__l.__size_)
              {
                v303 = (unint64_t *)(v326.__r_.__value_.__l.__size_ + 8);
                do
                  v304 = __ldaxr(v303);
                while (__stlxr(v304 - 1, v303));
                if (!v304)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v302);
                }
              }
              v305 = (std::__shared_weak_count *)v334;
              v320[0] = v333;
              v320[1] = v334;
              if (v334)
              {
                v306 = (unint64_t *)(v334 + 8);
                do
                  v307 = __ldxr(v306);
                while (__stxr(v307 + 1, v306));
              }
              std::string::basic_string[abi:ne180100]<0>(v344, "elementwise");
              if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v308 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
              else
                v308 = v339.__r_.__value_.__l.__size_;
              v309 = &v326;
              std::string::basic_string[abi:ne180100]((uint64_t)&v326, v308 + 9);
              if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v309 = (std::string *)v326.__r_.__value_.__r.__words[0];
              if (v308)
              {
                if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v310 = &v339;
                else
                  v310 = (std::string *)v339.__r_.__value_.__r.__words[0];
                memmove(v309, v310, v308);
              }
              strcpy((char *)v309 + v308, "__@x_mean");
              if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&lpsrc, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
              }
              else
              {
                lpsrc = *(_OWORD *)&v337.__r_.__value_.__l.__data_;
                *(_QWORD *)v355 = *((_QWORD *)&v337.__r_.__value_.__l + 2);
              }
              if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v355[8], v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v355[8] = *(_OWORD *)&v336.__r_.__value_.__l.__data_;
                v356 = (void *)v336.__r_.__value_.__r.__words[2];
              }
              memset(&v362, 0, sizeof(v362));
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              v360.__r_.__value_.__s.__data_[8] = 0;
              v362.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
              v362.__r_.__value_.__l.__size_ = v362.__r_.__value_.__r.__words[0];
              v362.__r_.__value_.__r.__words[2] = v362.__r_.__value_.__r.__words[0] + 48;
              v362.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v362.__r_.__value_.__r.__words[2], &lpsrc, &v357, (std::string *)v362.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v358, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v358 = __p;
              memset(&v360, 0, sizeof(v360));
              v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              v347.__r_.__value_.__s.__data_[8] = 0;
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v360.__r_.__value_.__l.__size_ = v360.__r_.__value_.__r.__words[0];
              v360.__r_.__value_.__r.__words[2] = v360.__r_.__value_.__r.__words[0] + 24;
              v360.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360.__r_.__value_.__r.__words[2], (__int128 *)&v358, (__int128 *)&v359, (std::string *)v360.__r_.__value_.__l.__data_);
              Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v320, (const std::string *)v344, &v326, (std::string **)&v362, (std::string **)&v360);
              v347.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
              if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v358.__r_.__value_.__l.__data_);
              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
              for (k = 0; k != -48; k -= 24)
              {
                if (*((char *)&v356 + k + 7) < 0)
                  operator delete(*(void **)&v355[k + 8]);
              }
              if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v326.__r_.__value_.__l.__data_);
              if ((v344[23] & 0x80000000) != 0)
                operator delete(*(void **)v344);
              if (v305)
              {
                v312 = (unint64_t *)&v305->__shared_owners_;
                do
                  v313 = __ldaxr(v312);
                while (__stlxr(v313 - 1, v312));
                if (!v313)
                {
                  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                  std::__shared_weak_count::__release_weak(v305);
                }
              }
              v314 = (std::__shared_weak_count *)v334;
              if (v334)
              {
                v315 = (unint64_t *)(v334 + 8);
                do
                  v316 = __ldaxr(v315);
                while (__stlxr(v316 - 1, v315));
                if (!v316)
                {
                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                  std::__shared_weak_count::__release_weak(v314);
                }
              }
              v317 = v343;
              if (v343)
              {
                v318 = (unint64_t *)&v343->__shared_owners_;
                do
                  v319 = __ldaxr(v318);
                while (__stlxr(v319 - 1, v318));
                if (!v319)
                {
                  ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                  std::__shared_weak_count::__release_weak(v317);
                }
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v336.__r_.__value_.__l.__data_);
              if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v337.__r_.__value_.__l.__data_);
              if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v338.__r_.__value_.__l.__data_);
              if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v339.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v341.__r_.__value_.__l.__data_);
              break;
            default:
              Espresso::throw_exception_selector<Espresso::invalid_argument_error>("L2-Norm Axis has to be within [0-3]");
          }
          return;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("L2-Norm Axis has to be within [0-3]");
      }
    }
  }
}

void sub_1915C4F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a71;
  char a72;
  void *a73;
  char a74;
  uint64_t a75;
  void *a76;
  char a77;
  uint64_t v77;
  uint64_t v79;

  *(_QWORD *)(v77 - 192) = v77 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v77 - 192));
  v79 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x290] + v79 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x290] + v79 + 24));
    v79 -= 24;
    if (v79 == -48)
    {
      if (a25 < 0)
        operator delete(__p);
      if (a77 < 0)
        operator delete(a76);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a75);
      if (a43 < 0)
        operator delete(a38);
      if (a50 < 0)
        operator delete(a45);
      if (a56 < 0)
        operator delete(a51);
      if (a62 < 0)
        operator delete(a57);
      if (a69 < 0)
        operator delete(a64);
      if (a72 < 0)
        operator delete(a71);
      if (a74 < 0)
        operator delete(a73);
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915C5A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context18handle_cast_kernelEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string::size_type size;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  std::string *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  char *v73;
  char *v74;
  void *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  float v79;
  uint64_t **v80;
  int v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  void *v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  float v92;
  uint64_t **v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::string::size_type v102;
  std::string *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t **v106;
  char *v107;
  void *v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t **v112;
  std::string *v113;
  std::string *v114;
  std::string *v115;
  std::string *v116;
  std::string *v117;
  std::string *v118;
  std::string v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  int v122;
  std::string __str;
  std::string v124;
  std::string lpsrc;
  void *__p;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  std::string v131;
  uint64_t v132;
  std::string v133;
  __int128 v134;

  *(_QWORD *)&v134 = *MEMORY[0x1E0C80C00];
  v3 = **(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) != v3 && v3 != 0)
    return;
  v6 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
  v7 = **(_QWORD **)(a1 + 40) + 96;
  v8 = a2[3].i32[2];
  __p = (void *)v8;
  v9 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v8, &__p)[3];
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    v124.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v10;
  }
  v11 = **(_QWORD **)(a1 + 40) + 56;
  v12 = a2[3].i32[2];
  __p = (void *)v12;
  v13 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &__p)[3];
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v14 = *v13;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  }
  v130 = 0u;
  v129 = 0u;
  v128 = 0u;
  LODWORD(__p) = a2[3].i32[2];
  v127 = 0uLL;
  v15 = a2[2].u64[1];
  if (v15 >= a2[3].i64[0])
  {
    v16 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&__p);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&__p);
    v16 = v15 + 72;
    a2[2].i64[1] = v15 + 72;
  }
  a2[2].i64[1] = v16;
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(_QWORD *)(a1 + 48);
  __p = &__str;
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)&__str, (__int128 **)&__p);
  v22 = **(_QWORD **)(a1 + 40);
  if (*((_QWORD *)v21 + 6) - *((_QWORD *)v21 + 5) <= 8uLL
    && (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v22 + 240), &__str)|| !std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v22 + 264), &v124)))
  {
    v31 = *(_QWORD *)(a1 + 48);
    __p = &v124;
    v32 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (unsigned __int8 *)&v124, (__int128 **)&__p);
    if (*((_QWORD *)v32 + 6) - *((_QWORD *)v32 + 5) > 8uLL
      || std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(**(_QWORD **)(a1 + 40) + 240), &__str))
    {
      v33 = *(_QWORD *)(a1 + 48);
      __p = &v124;
      v34 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)&v124, (__int128 **)&__p);
      v35 = (char *)*((_QWORD *)v34 + 5);
      v36 = (char *)*((_QWORD *)v34 + 6);
      if (v35 == v36)
        goto LABEL_56;
      while (1)
      {
        v37 = **(_QWORD **)(a1 + 40) + 56;
        __p = v35;
        v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v37, (unint64_t *)v35, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        v39 = v38[3];
        v40 = v38[4];
        while (v39 != v40)
        {
          v41 = *(unsigned __int8 *)(v39 + 23);
          if ((v41 & 0x80u) == 0)
            v42 = *(unsigned __int8 *)(v39 + 23);
          else
            v42 = *(_QWORD *)(v39 + 8);
          size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v124.__r_.__value_.__l.__size_;
          if (v42 == size)
          {
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v124;
            else
              v44 = (std::string *)v124.__r_.__value_.__r.__words[0];
            if ((v41 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v39, v44, *(_QWORD *)(v39 + 8)))
                goto LABEL_54;
LABEL_53:
              std::string::operator=((std::string *)v39, &__str);
              goto LABEL_54;
            }
            if (!*(_BYTE *)(v39 + 23))
              goto LABEL_53;
            v45 = 0;
            while (*(unsigned __int8 *)(v39 + v45) == v44->__r_.__value_.__s.__data_[v45])
            {
              if (v41 == ++v45)
                goto LABEL_53;
            }
          }
LABEL_54:
          v39 += 24;
        }
        v35 += 8;
        if (v35 == v36)
        {
LABEL_56:
          v46 = **(_QWORD **)(a1 + 40);
          v47 = (uint64_t **)(v46 + 352);
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v46 + 360), &__str))
          {
            __p = &__str;
            v48 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
            goto LABEL_154;
          }
          __p = &__str;
          v87 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
          *((_DWORD *)v87 + 14) = 1065353216;
          *(_QWORD *)(v87 + 60) = 0xFFFFFFFF00000000;
          *((_DWORD *)v87 + 17) = 1;
          v89 = v87 + 72;
          v88 = (void *)*((_QWORD *)v87 + 9);
          if (v88)
          {
            *((_QWORD *)v87 + 10) = v88;
            operator delete(v88);
            *v89 = 0;
            v89[1] = 0;
            v89[2] = 0;
          }
          *v89 = 0;
          v89[1] = 0;
          v89[2] = 0;
          v90 = *(uint64_t **)(a1 + 40);
          v91 = *v90;
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*v90 + 360), &v124))
          {
            __p = &v124;
            v92 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v91 + 352), &v124, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 14);
            v93 = (uint64_t **)(**(_QWORD **)(a1 + 40) + 352);
            __p = &v124;
            v94 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v93, &v124, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 15);
            v91 = **(_QWORD **)(a1 + 40);
          }
          else
          {
            v94 = 0;
            v92 = 1.0;
          }
          __p = &__str;
          v48 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v91 + 352), &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
LABEL_153:
          *((float *)v48 + 14) = v92;
          *((_DWORD *)v48 + 15) = v94;
          goto LABEL_154;
        }
      }
    }
    lpsrc.__r_.__value_.__r.__words[0] = 0;
    v95 = *(_QWORD *)(a1 + 56);
    __p = &__str;
    lpsrc.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, (uint64_t)&__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[5];
    v96 = **(_QWORD **)(a1 + 40) + 96;
    __p = &lpsrc;
    v97 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v96, (unint64_t *)&lpsrc, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
    v98 = v97[3];
    v99 = v97[4];
    if (v98 == v99)
    {
LABEL_149:
      v105 = **(_QWORD **)(a1 + 40);
      v106 = (uint64_t **)(v105 + 352);
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v105 + 360), &v124))
      {
        __p = &v124;
        v107 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v106, &v124, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
        *((_DWORD *)v107 + 14) = 1065353216;
        *(_QWORD *)(v107 + 60) = 0xFFFFFFFF00000000;
        *((_DWORD *)v107 + 17) = 1;
        v109 = v107 + 72;
        v108 = (void *)*((_QWORD *)v107 + 9);
        if (v108)
        {
          *((_QWORD *)v107 + 10) = v108;
          operator delete(v108);
          *v109 = 0;
          v109[1] = 0;
          v109[2] = 0;
        }
        *v109 = 0;
        v109[1] = 0;
        v109[2] = 0;
        v110 = *(uint64_t **)(a1 + 40);
        v111 = *v110;
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*v110 + 360), &__str))
        {
          __p = &__str;
          v92 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v111 + 352), &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 14);
          v112 = (uint64_t **)(**(_QWORD **)(a1 + 40) + 352);
          __p = &__str;
          v94 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v112, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 15);
          v111 = **(_QWORD **)(a1 + 40);
        }
        else
        {
          v94 = 0;
          v92 = 1.0;
        }
        __p = &v124;
        v48 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v111 + 352), &v124, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
        goto LABEL_153;
      }
      __p = &v124;
      v48 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v106, &v124, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
LABEL_154:
      *((_DWORD *)v48 + 16) = v6;
      goto LABEL_155;
    }
    while (1)
    {
      v100 = *(unsigned __int8 *)(v98 + 23);
      if ((v100 & 0x80u) == 0)
        v101 = *(unsigned __int8 *)(v98 + 23);
      else
        v101 = *(_QWORD *)(v98 + 8);
      v102 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v102 = __str.__r_.__value_.__l.__size_;
      if (v101 != v102)
        goto LABEL_148;
      v103 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__str
           : (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v100 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)v98, v103, *(_QWORD *)(v98 + 8)))
        goto LABEL_147;
LABEL_148:
      v98 += 24;
      if (v98 == v99)
        goto LABEL_149;
    }
    if (*(_BYTE *)(v98 + 23))
    {
      v104 = 0;
      while (*(unsigned __int8 *)(v98 + v104) == v103->__r_.__value_.__s.__data_[v104])
      {
        if (v100 == ++v104)
          goto LABEL_147;
      }
      goto LABEL_148;
    }
LABEL_147:
    std::string::operator=((std::string *)v98, &v124);
    goto LABEL_148;
  }
  v122 = 0;
  v23 = *(std::__shared_weak_count **)(v22 + 24);
  v120 = *(_QWORD *)(v22 + 16);
  v121 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  Espresso::abstract_engine_factory::shared(&v119);
  v26 = v119.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "copy");
  LODWORD(v116) = (***(uint64_t (****)(_QWORD))(v120 + 8))(*(_QWORD *)(v120 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v26, (uint64_t)&v120, (uint64_t)&__p, (uint64_t)&v122, (int *)&v116);
  if (lpsrc.__r_.__value_.__r.__words[0])
  {
    if (v27)
    {
      v28 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v29 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      goto LABEL_60;
    }
  }
  else
  {
    v27 = 0;
  }
  v28 = 0;
LABEL_60:
  v49 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v50 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  v52 = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
  if (v119.__r_.__value_.__l.__size_)
  {
    v53 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v28)
  {
    v55 = (unint64_t *)&v28->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  std::string::basic_string[abi:ne180100]<0>(&v119, "copy");
  v57 = a2[1].i64[0];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v133, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v133 = __str;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  __p = &v116;
  LOBYTE(v127) = 0;
  v116 = (std::string *)operator new(0x18uLL);
  v117 = v116;
  v118 = v116 + 1;
  v117 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v118, (__int128 *)&v133, &v134, v116);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v131, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v131 = v124;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  __p = &v113;
  LOBYTE(v127) = 0;
  v113 = (std::string *)operator new(0x18uLL);
  v114 = v113;
  v115 = v113 + 1;
  v114 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v115, (__int128 *)&v131, (__int128 *)&v132, v113);
  LODWORD(__p) = 0;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v58 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v58 + 1) = 0;
  *((_QWORD *)v58 + 2) = 0;
  *(_QWORD *)v58 = &off_1E2DBF0D0;
  *((_QWORD *)v58 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v58 + 56) = 0u;
  *(_OWORD *)(v58 + 72) = 0u;
  *(_OWORD *)(v58 + 104) = 0u;
  *(_OWORD *)(v58 + 120) = 0u;
  *(_OWORD *)(v58 + 136) = 0u;
  *(_OWORD *)(v58 + 152) = 0u;
  *(_OWORD *)(v58 + 40) = 0u;
  v59 = (std::string *)(v58 + 40);
  *(_OWORD *)(v58 + 88) = 0u;
  *(_OWORD *)(v58 + 161) = 0u;
  *((_OWORD *)v58 + 13) = 0u;
  *((_OWORD *)v58 + 14) = 0u;
  *((_QWORD *)v58 + 30) = 0;
  *(_QWORD *)&v127 = v58 + 24;
  *((_QWORD *)&v127 + 1) = v58;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v58 + 11, (uint64_t)v27, (uint64_t)v28);
  std::string::operator=(v59, (const std::string *)(v57 + 16));
  std::string::operator=((std::string *)(v127 + 40), &v119);
  v60 = (***(uint64_t (****)(_QWORD))(v27[1] + 8))(*(_QWORD *)(v27[1] + 8));
  v61 = v127;
  *(_DWORD *)(v127 + 8) = v60;
  v62 = a2[1].i64[0];
  if (v62)
  {
    *(_DWORD *)(v61 + 12) = *(_DWORD *)(v62 + 12);
    if (*(char *)(v62 + 223) < 0)
      std::string::__init_copy_ctor_external(&lpsrc, *(const std::string::value_type **)(v62 + 200), *(_QWORD *)(v62 + 208));
    else
      lpsrc = *(std::string *)(v62 + 200);
    std::string::operator=((std::string *)(v61 + 200), &lpsrc);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
  }
  else
  {
    v63 = *(_QWORD *)(a2[4].i64[0] + 32);
    if (*(_QWORD *)(a2[4].i64[0] + 40) != v63)
      *(_DWORD *)(v61 + 12) = *(_DWORD *)(*(_QWORD *)v63 + 12);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v128, v116, v117, 0xAAAAAAAAAAAAAAABLL * (((char *)v117 - (char *)v116) >> 3));
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v129 + 8, v113, v114, 0xAAAAAAAAAAAAAAABLL * (((char *)v114 - (char *)v113) >> 3));
  LODWORD(__p) = a2[3].i32[2];
  v64 = a2[2].u64[1];
  if (v64 >= a2[3].i64[0])
  {
    v65 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&__p);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&__p);
    v65 = v64 + 72;
    a2[2].i64[1] = v64 + 72;
  }
  a2[2].i64[1] = v65;
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  __p = &v113;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  __p = &v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (v28)
  {
    v69 = (unint64_t *)&v28->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v71 = **(_QWORD **)(a1 + 40);
  v72 = (uint64_t **)(v71 + 352);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v71 + 360), &v124))
  {
    __p = &v124;
    v73 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v72, &v124, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  }
  else
  {
    __p = &v124;
    v74 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v72, &v124, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    *((_DWORD *)v74 + 14) = 1065353216;
    *(_QWORD *)(v74 + 60) = 0xFFFFFFFF00000000;
    *((_DWORD *)v74 + 17) = 1;
    v76 = v74 + 72;
    v75 = (void *)*((_QWORD *)v74 + 9);
    if (v75)
    {
      *((_QWORD *)v74 + 10) = v75;
      operator delete(v75);
      *v76 = 0;
      v76[1] = 0;
      v76[2] = 0;
    }
    *v76 = 0;
    v76[1] = 0;
    v76[2] = 0;
    v77 = *(uint64_t **)(a1 + 40);
    v78 = *v77;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*v77 + 360), &__str))
    {
      __p = &__str;
      v79 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v78 + 352), &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 14);
      v80 = (uint64_t **)(**(_QWORD **)(a1 + 40) + 352);
      __p = &__str;
      v81 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v80, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 15);
      v78 = **(_QWORD **)(a1 + 40);
    }
    else
    {
      v81 = 0;
      v79 = 1.0;
    }
    __p = &v124;
    v73 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v78 + 352), &v124, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    *((float *)v73 + 14) = v79;
    *((_DWORD *)v73 + 15) = v81;
  }
  *((_DWORD *)v73 + 16) = v6;
  if (v28)
  {
    v82 = (unint64_t *)&v28->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v84 = v121;
  if (v121)
  {
    v85 = (unint64_t *)&v121->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
LABEL_155:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
}

void sub_1915C68B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a29 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_ea8_32c82_ZTSKZN8Espresso17ANECompilerEngine7context18handle_cast_kernelEPNS_3netEPS1_E3__0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v3;
  return result;
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAA60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::ANECompilerEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0xF0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9E90;
  result.n128_u64[0] = Espresso::ANECompilerEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

__n128 Espresso::ANECompilerEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBAAD0;
  v5 = Espresso::abstract_context::abstract_context((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D7D5C8;
  *((_BYTE *)v4 + 96) = 1;
  *((_BYTE *)v4 + 80) = 1;
  *((_BYTE *)v4 + 148) = 1;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1915C6C20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::engine::post_check_valid_kernels_hook(Espresso::ANECompilerEngine::engine *this)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t i;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_QWORD *)this + 14))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(*((_QWORD **)this + 13));
    *((_QWORD *)this + 13) = 0;
    v3 = *((_QWORD *)this + 12);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)this + 11) + 8 * i) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  std::mutex::unlock(v2);
}

void Espresso::ANECompilerEngine::engine::~engine(Espresso::ANECompilerEngine::engine *this)
{
  std::mutex *v2;

  *(_QWORD *)this = off_1E2D7D570;
  v2 = (std::mutex *)((char *)this + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 88);
  std::mutex::~mutex(v2);
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  std::mutex *v2;

  *(_QWORD *)this = off_1E2D7D570;
  v2 = (std::mutex *)((char *)this + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 88);
  std::mutex::~mutex(v2);
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_61@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 result;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA590;
  v7 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v7;
  v17 = *(_QWORD *)(a2 + 32);
  Espresso::ANECompilerEngine::space_to_batch_kernel::space_to_batch_kernel((uint64_t)(v6 + 3), a1, (uint64_t)v16);
  v8 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v15 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v15 + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 43), &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C6E44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_QWORD *)a2)
  {
    {
      v4 = *a2;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v5 = *(std::__shared_weak_count **)(a1 + 200);
      *(_OWORD *)(a1 + 192) = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::space_to_batch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::space_to_batch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::space_to_batch_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_60@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA948;
  Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::mix_sequence_repeat_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C701C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_59@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA9B8;
  Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::mix_non_maximum_suppression_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 45), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C7164(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA9B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA9B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_58@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA868;
  Espresso::ANECompilerEngine::space_to_depth_kernel::space_to_depth_kernel((uint64_t)(v6 + 3), a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  v6[3] = &off_1E2D7C318;
  v6[40] = &unk_1E2D7C478;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C72C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_space_to_depth_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_57@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA980;
  Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::mix_furthest_point_sampling_kernel((uint64_t)(v6 + 3), a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C7410(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_56@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA328;
  Espresso::ANECompilerEngine::mix_squeeze_kernel::mix_squeeze_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 56), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C7558(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_squeeze_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_55@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA670;
  Espresso::ANECompilerEngine::mix_expand_dims_kernel::mix_expand_dims_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 55), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C76A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_expand_dims_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_54@<Q0>(_QWORD *a1@<X1>, __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA750;
  Espresso::ANECompilerEngine::mix_batch_matmul_kernel::mix_batch_matmul_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C77E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_53@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __n128 result;
  __int128 v18;

  v6 = (char *)operator new(0x368uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBA7F8;
  Espresso::ANECompilerEngine::inner_product_kernel::inner_product_kernel((uint64_t)(v6 + 24), a1, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D7BE48;
  *((_QWORD *)v6 + 71) = &unk_1E2D7C078;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v7;
  *((_DWORD *)v6 + 114) = *(_DWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 440) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v10;
  v11 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v18 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v18 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 568), &v18);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C7970(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_52@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x2A8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA398;
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::mix_deconv3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 56), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C7AB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_deconv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_deconv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_deconv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_51@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA788;
  Espresso::ANECompilerEngine::mix_l2_normalize_kernel::mix_l2_normalize_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C7C00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_l2_normalize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_50@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA280;
  Espresso::ANECompilerEngine::flatten_kernel::flatten_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D782F8;
  v6[39] = &unk_1E2D78458;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C7D5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x228uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9F00;
  Espresso::ANECompilerEngine::crop_kernel::crop_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D75A40;
  v6[40] = &unk_1E2D75BA0;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C7EB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x2A8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA0F8;
  Espresso::ANECompilerEngine::mix_conv3d_kernel::mix_conv3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 56), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8000(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA0F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA0F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_conv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x248uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA168;
  Espresso::ANECompilerEngine::mix_pool3d_kernel::mix_pool3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 46), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8148(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA558;
  Espresso::ANECompilerEngine::mix_softmax_nd_kernel::mix_softmax_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8290(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = (char *)operator new(0x228uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBA2F0;
  Espresso::ANECompilerEngine::softmax_kernel::softmax_kernel((uint64_t)(v8 + 24), a1, a3, (uint64_t)a2);
  *((_QWORD *)v8 + 3) = &off_1E2D786F8;
  *((_QWORD *)v8 + 42) = &unk_1E2D78858;
  *((_OWORD *)v8 + 19) = *a2;
  *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 336), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915C8408(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA2F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA2F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x2A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9F38;
  Espresso::ANECompilerEngine::pool_kernel::pool_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D75C40;
  v6[57] = &unk_1E2D75DE0;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 57), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8564(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA638;
  Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D7AE38;
  v6[45] = &unk_1E2D7AFA8;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 45), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C86C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA7C0;
  Espresso::ANECompilerEngine::mix_reshape_like_kernel::mix_reshape_like_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 44), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8808(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA7C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA7C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_like_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA2B8;
  Espresso::ANECompilerEngine::reshape_kernel::reshape_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D784F8;
  v6[43] = &unk_1E2D78658;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 43), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8964(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA2B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA2B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA1A0;
  Espresso::ANECompilerEngine::reduce_kernel::reduce_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D779B8;
  v6[44] = &unk_1E2D77B18;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 44), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 result;
  __int128 v17;

  v8 = operator new(0x238uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBA478;
  Espresso::ANECompilerEngine::broadcast_kernel::broadcast_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D79BC8;
  v8[43] = &unk_1E2D79D28;
  v9 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v9;
  *((_BYTE *)v8 + 336) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v17 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v17 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 43), &v17);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915C8BE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_broadcast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_broadcast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_broadcast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = (char *)operator new(0x298uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBA520;
  Espresso::ANECompilerEngine::activation_kernel::activation_kernel((uint64_t)(v6 + 24), a1, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D7A1C8;
  *((_QWORD *)v6 + 52) = &unk_1E2D7A390;
  *(_OWORD *)(v6 + 648) = 0u;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 416), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8D4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA910;
  Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::mix_instancenorm_1d_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 45), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8E94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA3D0;
  Espresso::ANECompilerEngine::mix_stack_nd_kernel::mix_stack_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C8FDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA3D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA3D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = operator new(0x230uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB9F70;
  Espresso::ANECompilerEngine::mix_tile_kernel::mix_tile_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 41), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915C912C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_tile_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA5C8;
  Espresso::ANECompilerEngine::stir_gather_nd_kernel::stir_gather_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C9274(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA5C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA5C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x228uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA4B0;
  Espresso::ANECompilerEngine::stir_resample_kernel::stir_resample_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 42), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C93BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA4B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA4B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA9F0;
  Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::stir_resize_nearest_neighbor_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C9504(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA9F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA9F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBAA28;
  Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::stir_spatial_transformer_affine_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 41), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C964C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAA28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAA28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x228uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA718;
  Espresso::ANECompilerEngine::mix_array_gather_kernel::mix_array_gather_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 42), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C9794(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_array_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_array_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_array_gather_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA130;
  Espresso::ANECompilerEngine::mix_gather_kernel::mix_gather_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 41), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C98DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = operator new(0x270uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBA8A0;
  Espresso::ANECompilerEngine::general_slice_kernel::general_slice_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D7C518;
  v8[51] = &unk_1E2D7C678;
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 51), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915C99F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA8A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA8A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA1D8;
  Espresso::ANECompilerEngine::slice_kernel::slice_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D77BB8;
  v6[41] = &unk_1E2D77D18;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 41), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C9B4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA1D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA1D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x258uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA8D8;
  Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::mix_crop_and_resize_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 48), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C9C94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(_QWORD *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA360;
  Espresso::ANECompilerEngine::chop_argsort_kernel::chop_argsort_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C9DDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::chop_argsort_kernel::chop_argsort_kernel(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  int v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_BYTE *)(v5 + 284) = 1;
  *(_QWORD *)v5 = off_1E2D8D4B8;
  v6 = *a3;
  *(_BYTE *)(v5 + 284) = *((_BYTE *)a3 + 4);
  *(_DWORD *)(v5 + 280) = v6;
  LOBYTE(v6) = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_BYTE *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D78AF8;
  *(_QWORD *)(v5 + 288) = &unk_1E2D78C58;
  return result;
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_argsort_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_argsort_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_argsort_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA088;
  Espresso::ANECompilerEngine::mix_topk_kernel::mix_topk_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D76CD8;
  v6[40] = &unk_1E2D76E38;
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915C9FEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_topk_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA0C0;
  Espresso::ANECompilerEngine::transpose_kernel::transpose_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 41), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CA134(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(_QWORD *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9EC8;
  Espresso::ANECompilerEngine::degamma_kernel::degamma_kernel((uint64_t)(v6 + 3), a1, *a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CA22C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::degamma_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::degamma_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::degamma_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9FA8;
  Espresso::ANECompilerEngine::plane_rw_kernel::plane_rw_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CA374(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::plane_rw_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::plane_rw_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::plane_rw_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = operator new(0x2B8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBA830;
  Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::tunneled_ane_unit_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 60), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915CA4C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_unit_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_unit_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_unit_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = operator new(0x320uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBA6E0;
  Espresso::ANECompilerEngine::tunneled_ane_op_kernel::tunneled_ane_op_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 73), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915CA614(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA6E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA6E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(_QWORD *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA4E8;
  Espresso::ANECompilerEngine::general_concat_kernel::general_concat_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CA75C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA4E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA4E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9D40;
  Espresso::ANECompilerEngine::fill_kernel::fill_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 43), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CA8A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::fill_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(_QWORD *a1@<X1>, const std::string *a2@<X2>, __n128 *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x268uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB9E58;
  Espresso::ANECompilerEngine::einsum_kernel::einsum_kernel((char *)v6 + 24, a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)v6 + 400, &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CA9EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::einsum_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x318uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA6A8;
  Espresso::ANECompilerEngine::tensor_zero_pad_kernel::tensor_zero_pad_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 72), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CAB34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tensor_zero_pad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = operator new(0x270uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBA600;
  Espresso::ANECompilerEngine::general_padding_kernel::general_padding_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 48), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915CAC84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9CD0;
  Espresso::ANECompilerEngine::cast_kernel::cast_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CADCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::cast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9E20;
  Espresso::ANECompilerEngine::dev_op_kernel::dev_op_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 55), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CAF14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = operator new(0x410uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB9FE0;
  Espresso::ANECompilerEngine::split_nd_kernel::split_nd_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 103), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915CB064(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x258uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9DB0;
  Espresso::ANECompilerEngine::split_kernel::split_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 45), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CB1AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::cf_end_kernel_cpu,std::allocator<Espresso::cf_end_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_end_params_t const&,void>((uint64_t *)&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9D08;
  Espresso::ANECompilerEngine::copy_kernel::copy_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CB35C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = operator new(0x270uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBA440;
  Espresso::ANECompilerEngine::load_constant_kernel::load_constant_kernel(v8 + 3, a1, a3, a2);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 51), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915CB4AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::load_constant_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::load_constant_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::load_constant_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;

  v8 = operator new(0x268uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBA018;
  Espresso::ANECompilerEngine::upsample_kernel::upsample_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v16 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 47), &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915CB5FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA050;
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 53), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CB744(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA408;
  Espresso::ANECompilerEngine::deconvolution_kernel::deconvolution_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 73), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CB88C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::deconvolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x248uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9DE8;
  Espresso::ANECompilerEngine::concat_kernel::concat_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 46), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CB9D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA210;
  Espresso::ANECompilerEngine::convolution_kernel::convolution_kernel((uint64_t)(v6 + 3), a1, a2);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(*a1 + 8);
  *((_QWORD *)&v14 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 73), &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915CBB1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_pointer<void *,int (*)(void *),std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<void *,int (*)(void *),std::allocator<void>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000191AA3F41))
    return a1 + 32;
  else
    return 0;
}

void Espresso::CVAEngine::blob_container::~blob_container(Espresso::CVAEngine::blob_container *this)
{
  Espresso::HXEngine::blob_container::~blob_container(this);
  JUMPOUT(0x19401CD90);
}

CVPixelBufferRef Espresso::CVAEngine::blob_container::force_allocate(CVPixelBufferRef this, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, BOOL a7, unsigned int a8)
{
  CVPixelBufferRef v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  if (!*((_QWORD *)this + 21))
  {
    v8 = this;
    this = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)(*((_DWORD *)this + 4) * *((_DWORD *)this + 2)), *((_DWORD *)this + 3), 10, a4, a5, a6, a7, a8, v9, HIDWORD(v9), v10, v11);
    *((_QWORD *)v8 + 21) = this;
  }
  return this;
}

void Espresso::zephyr::graph_t::~graph_t(Espresso::zephyr::graph_t *this)
{
  Espresso::zephyr::graph_t::~graph_t(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E2DA4188;
  v2 = (char *)*((_QWORD *)this + 11);
  v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    do
    {
      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>((uint64_t *)(*((_QWORD *)v2 + 4) + 56), (unint64_t)this);
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::__tree<int>::destroy(*((_QWORD **)this + 12));
  std::__tree<int>::destroy(*((_QWORD **)this + 9));
  std::__tree<int>::destroy(*((_QWORD **)this + 6));
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void Espresso::zephyr::graph_t::insert_node(unint64_t this, Espresso::zephyr::node_t *a2)
{
  unint64_t v2;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;

  v5 = (uint64_t **)(this + 88);
  v6 = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>(this + 88, &v28, (unint64_t *)a2);
  if (!*v6)
  {
    v7 = v6;
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)a2;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, v28, v7, v8);
  }
  v9 = (uint64_t *)((char *)a2 + 56);
  v10 = 0x9DDFEA08EB382D69 * (((8 * this) + 8) ^ HIDWORD(this));
  v11 = 0x9DDFEA08EB382D69 * (HIDWORD(this) ^ (v10 >> 47) ^ v10);
  v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
  v13 = *((_QWORD *)a2 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      if (v12 >= v13)
        v2 = v12 % v13;
    }
    else
    {
      v2 = v12 & (v13 - 1);
    }
    v15 = *(_QWORD **)(*v9 + 8 * v2);
    if (v15)
    {
      for (i = (_QWORD *)*v15; i; i = (_QWORD *)*i)
      {
        v17 = i[1];
        if (v17 == v12)
        {
          if (i[2] == this)
            return;
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13)
              v17 %= v13;
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v2)
            break;
        }
      }
    }
  }
  v18 = operator new(0x18uLL);
  *v18 = 0;
  v18[1] = v12;
  v18[2] = this;
  v19 = (float)(unint64_t)(*((_QWORD *)a2 + 10) + 1);
  v20 = *((float *)a2 + 22);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)a2 + 56, v24);
    v13 = *((_QWORD *)a2 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v2 = v12 % v13;
      else
        v2 = v12;
    }
    else
    {
      v2 = (v13 - 1) & v12;
    }
  }
  v25 = *v9;
  v26 = *(_QWORD **)(*v9 + 8 * v2);
  if (v26)
  {
    *v18 = *v26;
LABEL_40:
    *v26 = v18;
    goto LABEL_41;
  }
  *v18 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v18;
  *(_QWORD *)(v25 + 8 * v2) = (char *)a2 + 72;
  if (*v18)
  {
    v27 = *(_QWORD *)(*v18 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v27 >= v13)
        v27 %= v13;
    }
    else
    {
      v27 &= v13 - 1;
    }
    v26 = (_QWORD *)(*v9 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*((_QWORD *)a2 + 10);
}

void sub_1915CBF68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL Espresso::zephyr::graph_t::remove_node(Espresso::zephyr::graph_t *this, Espresso::zephyr::node_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t **v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = (uint64_t *)((char *)this + 96);
  v4 = (uint64_t *)*((_QWORD *)this + 12);
  v6 = std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>((uint64_t)v4, (unint64_t *)a2);
  if (v4)
  {
    v7 = v5;
    v8 = v4;
    do
    {
      v9 = (_QWORD *)v8[4];
      if (v9)
        v9 = (_QWORD *)*v9;
      if (a2)
        v10 = *(_QWORD *)a2;
      else
        v10 = 0;
      v11 = (unint64_t)v9 >= v10;
      if ((unint64_t)v9 >= v10)
        v12 = (uint64_t **)v8;
      else
        v12 = (uint64_t **)(v8 + 1);
      if (v11)
        v7 = v8;
      v8 = *v12;
    }
    while (*v12);
    if (v7 != v5)
    {
      if (a2)
        v13 = *(_QWORD *)a2;
      else
        v13 = 0;
      v14 = (_QWORD *)v7[4];
      if (v14)
        v14 = (_QWORD *)*v14;
      if (v13 >= (unint64_t)v14)
      {
        v15 = (uint64_t *)v7[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          v17 = v7;
          do
          {
            v16 = (uint64_t *)v17[2];
            v18 = *v16 == (_QWORD)v17;
            v17 = v16;
          }
          while (!v18);
        }
        if (*((uint64_t **)this + 11) == v7)
          *((_QWORD *)this + 11) = v16;
        --*((_QWORD *)this + 13);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v7);
        operator delete(v7);
      }
    }
  }
  while (1)
  {
    v19 = *((_QWORD *)a2 + 15);
    v20 = *((_QWORD *)a2 + 16);
    if (v19 == v20)
      break;
    Espresso::zephyr::node_t::erase_input_at(a2, ((v20 - v19) >> 3) - 1);
  }
  v22 = *((_QWORD *)a2 + 12);
  v21 = *((_QWORD *)a2 + 13);
  while (v22 != v21)
  {
    v24 = *(_QWORD *)(v21 - 8);
    v21 -= 8;
    v23 = v24;
    *((_QWORD *)a2 + 13) = v21;
    if (*(Espresso::zephyr::node_t **)(v24 + 80) == a2)
      *(_QWORD *)(v23 + 80) = 0;
    v22 = *((_QWORD *)a2 + 12);
  }
  std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>((uint64_t *)a2 + 7, (unint64_t)this);
  return v6 != 0;
}

uint64_t std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(uint64_t result, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  if (result)
  {
    v2 = (_QWORD *)result;
    result = 1;
    do
    {
      if (a2)
        v3 = *a2;
      else
        v3 = 0;
      v4 = (_QWORD *)v2[4];
      if (!v4 || (v4 = (_QWORD *)*v4, v3 >= (unint64_t)v4))
      {
        if (a2)
          v5 = *a2;
        else
          v5 = 0;
        if ((unint64_t)v4 >= v5)
          return result;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    return 0;
  }
  return result;
}

_QWORD *Espresso::zephyr::graph_t::graph_t(_QWORD *result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;

  v2 = *(unint64_t **)(a2 + 24);
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *result = &off_1E2DA4188;
  result[1] = v3;
  result[6] = 0;
  result[4] = a2;
  result[5] = result + 6;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  result[13] = 0;
  result[12] = 0;
  result[10] = 0;
  result[11] = result + 12;
  return result;
}

{
  unint64_t *v2;
  unint64_t v3;

  v2 = *(unint64_t **)(a2 + 24);
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *result = &off_1E2DA4188;
  result[1] = v3;
  result[6] = 0;
  result[4] = a2;
  result[5] = result + 6;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  result[13] = 0;
  result[12] = 0;
  result[10] = 0;
  result[11] = result + 12;
  return result;
}

_QWORD *Espresso::zephyr::graph_t::live_inputs(Espresso::zephyr::graph_t *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v17 = 0;
  v18 = 0;
  v16 = (uint64_t *)&v17;
  v2 = (uint64_t *)*((_QWORD *)this + 11);
  v3 = (uint64_t *)((char *)this + 96);
  if (v2 != (uint64_t *)((char *)this + 96))
  {
    do
    {
      v4 = v2[4];
      v5 = *(uint64_t **)(v4 + 120);
      v6 = *(uint64_t **)(v4 + 128);
      while (v5 != v6)
      {
        v7 = *v5;
        v19 = v7;
        if (!std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*v3, *(unint64_t **)(v7 + 80)))std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(&v16, (unint64_t *)v7, &v19);
        ++v5;
      }
      v8 = (uint64_t *)v2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v2[2];
          v10 = *v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != v3);
  }
  v11 = (_QWORD *)((char *)this + 48);
  std::__tree<int>::destroy(*((_QWORD **)this + 6));
  v12 = v17;
  *((_QWORD *)this + 5) = v16;
  v13 = (_QWORD *)((char *)this + 40);
  *v11 = v12;
  v14 = v18;
  v13[2] = v18;
  if (v14)
  {
    v12[2] = v11;
    v16 = (uint64_t *)&v17;
    v17 = 0;
    v18 = 0;
    v12 = 0;
  }
  else
  {
    *v13 = v11;
  }
  std::__tree<int>::destroy(v12);
  return v13;
}

void sub_1915CC3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<int>::destroy(a10);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::zephyr::graph_t::live_outputs(Espresso::zephyr::graph_t *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t **v5;
  unint64_t **v6;
  unint64_t *v7;
  unint64_t **v8;
  unint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;

  v20 = 0;
  v21 = 0;
  v19 = (uint64_t *)&v20;
  v2 = (uint64_t *)*((_QWORD *)this + 11);
  v3 = (uint64_t *)((char *)this + 96);
  if (v2 != (uint64_t *)((char *)this + 96))
  {
    do
    {
      v4 = v2[4];
      v5 = *(unint64_t ***)(v4 + 96);
      v6 = *(unint64_t ***)(v4 + 104);
      while (v5 != v6)
      {
        v7 = *v5;
        v22 = v7;
        v8 = (unint64_t **)v7[7];
        v9 = (unint64_t **)v7[8];
        if (v8 != v9)
        {
          v10 = *v3;
          while (std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(v10, *v8))
          {
            v8 += 2;
            if (v8 == v9)
              goto LABEL_10;
          }
          std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(&v19, v7, (uint64_t *)&v22);
        }
LABEL_10:
        ++v5;
      }
      v11 = (uint64_t *)v2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t *)v2[2];
          v13 = *v12 == (_QWORD)v2;
          v2 = v12;
        }
        while (!v13);
      }
      v2 = v12;
    }
    while (v12 != v3);
  }
  v14 = (_QWORD *)((char *)this + 72);
  std::__tree<int>::destroy(*((_QWORD **)this + 9));
  v15 = v20;
  *((_QWORD *)this + 8) = v19;
  v16 = (_QWORD *)((char *)this + 64);
  *v14 = v15;
  v17 = v21;
  v16[2] = v21;
  if (v17)
  {
    v15[2] = v14;
    v19 = (uint64_t *)&v20;
    v20 = 0;
    v21 = 0;
    v15 = 0;
  }
  else
  {
    *v16 = v14;
  }
  std::__tree<int>::destroy(v15);
  return v16;
}

void sub_1915CC524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<int>::destroy(a10);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::zephyr::graph_t::create_topologically_ordered_block@<X0>(Espresso::zephyr::graph_t *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::function_t *,void>(a2, *((_QWORD *)this + 4));
  v5 = (char *)*((_QWORD *)this + 11);
  v6 = (char *)this + 96;
  if (v5 != v6)
  {
    do
    {
      v7 = *((_QWORD *)v5 + 4);
      v16[0] = &off_1E2DB37B8;
      v16[1] = a2;
      v17 = v16;
      v14[0] = &off_1E2DB3810;
      v14[1] = a2;
      v15 = v14;
      Espresso::zephyr::node_def_dfs(v7, (uint64_t)v16, (uint64_t)v14);
      v8 = v15;
      if (v15 == v14)
      {
        v8 = v14;
        v9 = 4;
      }
      else
      {
        if (!v15)
          goto LABEL_7;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_7:
      result = v17;
      if (v17 == v16)
      {
        result = v16;
        v10 = 4;
        goto LABEL_11;
      }
      if (v17)
      {
        v10 = 5;
LABEL_11:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
      }
      v11 = (char *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v5 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != v6);
  }
  return result;
}

void sub_1915CC690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

_OWORD *std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::function_t *,void>(_QWORD *a1, uint64_t a2)
{
  _OWORD *result;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0xA0uLL);
  *(_OWORD *)((char *)result + 8) = 0u;
  *(_QWORD *)result = &off_1E2DC1050;
  v5 = *(unint64_t **)(a2 + 24);
  result[2] = 0u;
  *((_QWORD *)result + 6) = v5;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)result + 4) = v6;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 7) = a2;
  *((_QWORD *)result + 8) = (char *)result + 72;
  *((_QWORD *)result + 12) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = result + 6;
  *((_QWORD *)result + 15) = 0;
  *((_QWORD *)result + 13) = 0;
  *((_QWORD *)result + 14) = (char *)result + 120;
  *((_QWORD *)result + 3) = &off_1E2DA4130;
  *((_QWORD *)result + 16) = 0;
  *((_QWORD *)result + 17) = (char *)result + 136;
  *((_QWORD *)result + 18) = (char *)result + 136;
  *((_QWORD *)result + 19) = 0;
  *a1 = (char *)result + 24;
  a1[1] = result;
  return result;
}

void std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3810;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3810;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK8Espresso6zephyr7graph_t34create_topologically_ordered_blockEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB37B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB37B8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, unint64_t **a2)
{
  return std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 96), *a2) == 0;
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK8Espresso6zephyr7graph_t34create_topologically_ordered_blockEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void Espresso::MPSGraphEngine::Kernels::softmax_kernel::~softmax_kernel(Espresso::MPSGraphEngine::Kernels::softmax_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::softmax_kernel::is_valid_for_engine(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  BOOL v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void *v28[2];
  char v29;
  int64x2_t *v30;
  std::__shared_weak_count *v31;
  void *v32[2];
  unsigned int v33;
  std::string __p;
  _BYTE v35[24];
  _BYTE v36[32];
  std::__shared_weak_count *v37;
  int64x2_t *v38;
  uint64_t v39;
  void **v40;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 64 && *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24) == 64)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v32, *(const Espresso::layer_shape **)a3, 0);
    v8 = v33 > 3 && (a1[304] | a1[306]) == 0 && a1[305] != 0 && a1[307] == 0;
    v9 = v8;
    if (!v8)
    {
      v10 = *(std::__shared_weak_count **)(a2 + 8);
      v30 = *(int64x2_t **)a2;
      v31 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v28, "[Dispatch::MPSGraph::softmax_kernel] unsupported configuration");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v28, a3, 0);
      Espresso::emit_kernel_validation_warning(&v30, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v13 = v37;
      if (v37)
      {
        v14 = (unint64_t *)&v37->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v40 = (void **)v36;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
      v40 = (void **)v35;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v40);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v29 < 0)
        operator delete(v28[0]);
      v16 = v31;
      if (v31)
      {
        v17 = (unint64_t *)&v31->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 8);
    v38 = *(int64x2_t **)a2;
    v39 = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "[Dispatch::MPSGraph::softmax_kernel] unsupported: layer supports 1 input and 1 output only");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v32, a3, 0);
    Espresso::emit_kernel_validation_warning(&v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v28[0] = v36;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
    v28[0] = v35;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33) < 0)
      operator delete(v32[0]);
    v9 = v39;
    if (v39)
    {
      v25 = (unint64_t *)(v39 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
      }
      return 0;
    }
  }
  return v9;
}

void sub_1915CCC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a24);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1915CCE20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1915CD77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51)
{
  void *v51;
  void *v52;
  void *v53;

  _Unwind_Resume(a1);
}

void sub_1915CDD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  void *v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);

  _Unwind_Resume(a1);
}

void sub_1915CDE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1915CE0C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1915CE42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__39(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__38(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __assign_helper_atomic_property__7928(uint64_t result, uint64_t **a2)
{
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((uint64_t **)result != a2)
  {
    v2 = (void **)result;
    v4 = *a2;
    v3 = a2[1];
    v5 = (char *)v3 - (char *)*a2;
    v6 = v5 >> 4;
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD **)result;
    if (v5 >> 4 > (unint64_t)((v7 - *(_QWORD *)result) >> 4))
    {
      if (v8)
      {
        v9 = *(_QWORD *)(result + 8);
        v10 = v8;
        if ((_QWORD *)v9 != v8)
        {
          do
            v9 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9 - 16);
          while ((_QWORD *)v9 != v8);
          v10 = *v2;
        }
        v2[1] = v8;
        operator delete(v10);
        v7 = 0;
        *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if (v5 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = v7 >> 3;
      if (v7 >> 3 <= v6)
        v11 = v5 >> 4;
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      result = (uint64_t)std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](v2, v12);
      v13 = (uint64_t *)v2[1];
      while (v4 != v3)
      {
        v14 = v4[1];
        *v13 = *v4;
        v13[1] = v14;
        if (v14)
        {
          v15 = (unint64_t *)(v14 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v4 += 2;
        v13 += 2;
      }
LABEL_30:
      v2[1] = v13;
      return result;
    }
    result = *(_QWORD *)(result + 8);
    v17 = (result - (uint64_t)v8) >> 4;
    if (v17 < v6)
    {
      v18 = &v4[2 * v17];
      if ((_QWORD *)result != v8)
      {
        do
        {
          v19 = *v4;
          v20 = v4[1];
          v4 += 2;
          result = (uint64_t)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, v19, v20);
          v8 += 2;
        }
        while (v4 != v18);
        v8 = v2[1];
      }
      v13 = v8;
      if (v18 != v3)
      {
        v13 = v8;
        do
        {
          v21 = v18[1];
          *v13 = *v18;
          v13[1] = v21;
          if (v21)
          {
            v22 = (unint64_t *)(v21 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v18 += 2;
          v13 += 2;
        }
        while (v18 != v3);
      }
      goto LABEL_30;
    }
    if (v4 != v3)
    {
      do
      {
        v24 = *v4;
        v25 = v4[1];
        v4 += 2;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, v24, v25);
        v8 += 2;
      }
      while (v4 != v3);
      result = (uint64_t)v2[1];
    }
    while ((_QWORD *)result != v8)
      result = std::shared_ptr<void>::~shared_ptr[abi:ne180100](result - 16);
    v2[1] = v8;
  }
  return result;
}

char *__copy_helper_atomic_property__7930(char *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (v3 != *(_QWORD **)a2)
  {
    v4 = result;
    result = std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](result, ((uint64_t)v3 - *(_QWORD *)a2) >> 4);
    v5 = (_QWORD *)*((_QWORD *)v4 + 1);
    do
    {
      *v5 = *v2;
      v6 = v2[1];
      v5[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v2 += 2;
      v5 += 2;
    }
    while (v2 != v3);
    *((_QWORD *)v4 + 1) = v5;
  }
  return result;
}

void sub_1915CE868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1915CE8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_ea8_32c46_ZTSNSt3__110shared_ptrIN8Espresso8blob_cpuEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c46_ZTSNSt3__110shared_ptrIN8Espresso8blob_cpuEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void Espresso::write_blob_storage_out_v1::~write_blob_storage_out_v1(Espresso::write_blob_storage_out_v1 *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void Espresso::V9Engine::blob_container::~blob_container(id *this, void *a2)
{
  Espresso::V9Engine::blob_container::~blob_container(this, a2);
  JUMPOUT(0x19401CD90);
}

{
  void *v3;

  *this = &off_1E2DA4DD8;
  Espresso::on_dealloc((Espresso *)this, a2);

  Espresso::MetalLowmemEngine::blob_container::~blob_container(this, v3);
}

void Espresso::V9Engine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  int v15;
  uint64_t v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  id *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  id v32;
  unint64_t v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  signed int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id *v49;
  id *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  int v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  int v63;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  std::runtime_error *v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  std::string::size_type size;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  std::runtime_error *v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  _BOOL4 v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  void *v112;
  std::__shared_weak_count *v113;
  const void *v114;
  std::string::size_type v115;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), *a3, a3[1]);
  v6 = *a3;
  if (v6)
  {
    v8 = v7;
    v114 = 0;
    v115 = 0;
    if (v7)
    {
      v103 = *((_BYTE *)v7 + 88) != 0;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v114, v7[13], v7[14]);
    }
    else
    {
      v103 = 0;
    }
  }
  else
  {
    v8 = 0;
    v103 = 0;
    v114 = 0;
    v115 = 0;
  }
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  v12 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 20);
  v13 = *(_DWORD *)(a1 + 24);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (v6 && *(_BYTE *)(v6 + 8))
    v15 = *(_DWORD *)(v6 + 12);
  v17 = (void **)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 200) = v15;
  if (v16 || (v18 = *(void **)(a1 + 168)) != 0)
  {
    Espresso::on_dealloc((Espresso *)a1, v14);
    v18 = *(void **)(a1 + 168);
  }
  *(_QWORD *)(a1 + 168) = 0;

  v19 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;

  v20 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;

  v21 = v13 * v11;
  if (v21 * v9 * v10 * v12)
  {
    v22 = 4;
    if (v15 == 1)
      v22 = 2;
    *(_QWORD *)(a1 + 208) = v22;
    v23 = *(const void **)(a1 + 72);
    if (!v23
    {
      v112 = 0;
      v113 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v25 = *(std::__shared_weak_count **)(a1 + 80);
    v112 = v24;
    v113 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
      v23 = *(const void **)(a1 + 72);
      if (!v23)
        goto LABEL_73;
    }
    if (!v28)
    {
LABEL_73:
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = 0uLL;
      v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v72, "Espresso: wrong_context_type");
      v72->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v29 = *(std::__shared_weak_count **)(a1 + 80);
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    v111.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = v28[18];
      do
        v33 = __ldaxr(v30);
      while (__stlxr(v33 - 1, v30));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      v32 = v28[18];
    }
    v34 = *(_DWORD *)(a1 + 16);
    v35 = *(_DWORD *)(a1 + 12);
    v37 = v34 - 1;
    v36 = v34 < 1;
    v38 = v34 + 2;
    if (!v36)
      v38 = v37;
    v39 = ((uint64_t)v38 >> 2) + 1;
    v40 = *(_QWORD *)(a1 + 208);
    v41 = 4 * v39 * v40;
    v42 = v41 * *(_DWORD *)(a1 + 8);
    v43 = v42 - 1;
    v36 = v42 < 1;
    v44 = v42 + 62;
    if (!v36)
      v44 = v43;
    v45 = (v44 & 0xFFFFFFC0) + 64;
    *(_DWORD *)(a1 + 232) = v41;
    *(_DWORD *)(a1 + 236) = v45;
    v46 = v45;
    v47 = v35 * (uint64_t)v45;
    *(_DWORD *)(a1 + 240) = v40;
    *(_DWORD *)(a1 + 244) = v47;
    *(_DWORD *)(a1 + 256) = (int)v40 / v40;
    *(_DWORD *)(a1 + 248) = v41 / v40;
    *(_DWORD *)(a1 + 252) = v46 / v40;
    *(_DWORD *)(a1 + 260) = v47 / v40;
    v48 = (int)v47 * v21;
    if (v103)
    {
      v8[12] = v48;
    }
    else
    {
      if (v114)
      {
        v50 = v49;
        if (v49)
        {
          v51 = (std::__shared_weak_count *)v115;
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          v111.__r_.__value_.__l.__size_ = v115;
          if (v115)
          {
            v52 = (unint64_t *)(v115 + 8);
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
          }
        }
        else
        {
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = 0uLL;
          NSLog(CFSTR("TODO Error aliasing %s %d"), "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/Spectre/V9/v9_blob_container.mm", 103);
          v51 = 0;
        }
        objc_storeStrong((id *)(a1 + 160), v50[20]);
        if (v51)
        {
          v54 = (unint64_t *)&v51->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      if (!*v17)
      {
        Espresso::on_alloc((Espresso *)a1, (void *)v48);
        v56 = objc_msgSend(v32, "newBufferWithLength:options:", v48, 32);
        v57 = *v17;
        *v17 = (void *)v56;

      }
      v58 = *(_DWORD *)(a1 + 236);
      *(_DWORD *)(a1 + 204) = v58;
      if ((v58 & 0x3F) == 0)
      {
        v59 = (void *)objc_opt_new();
        objc_msgSend(v59, "setHeight:", *(int *)(a1 + 12) * (uint64_t)v21);
        objc_msgSend(v59, "setWidth:", *(int *)(a1 + 8) * (uint64_t)(int)v39);
        objc_msgSend(v59, "setPixelFormat:", 115);
        objc_msgSend(v59, "setUsage:", 3);
        objc_msgSend(v59, "setTextureType:", 2);
        objc_msgSend(v59, "setResourceOptions:", 32);
        v60 = objc_msgSend(*(id *)(a1 + 160), "newTextureWithDescriptor:offset:bytesPerRow:", v59, 0, *(int *)(a1 + 204));
        v61 = *(void **)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v60;

        if (!*(_QWORD *)(a1 + 168))
        {
          v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v106, objc_msgSend(v59, "width"));
          v74 = std::string::insert(&v106, 0, "Error creating texture ");
          v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v107.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          v76 = std::string::append(&v107, "/");
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v108.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v105, objc_msgSend(v59, "height"));
          if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = &v105;
          else
            v78 = (std::string *)v105.__r_.__value_.__r.__words[0];
          if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
          else
            size = v105.__r_.__value_.__l.__size_;
          v80 = std::string::append(&v108, (const std::string::value_type *)v78, size);
          v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v109.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          v82 = std::string::append(&v109, "/");
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v104, *(_DWORD *)(a1 + 204));
          if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v84 = &v104;
          else
            v84 = (std::string *)v104.__r_.__value_.__r.__words[0];
          if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
          else
            v85 = v104.__r_.__value_.__l.__size_;
          v86 = std::string::append(&v110, (const std::string::value_type *)v84, v85);
          v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          v111.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v73, &v111);
          __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if ((v39 & 1) == 0)
        {
          v62 = (void *)objc_opt_new();

          objc_msgSend(v62, "setHeight:", *(int *)(a1 + 12) * (uint64_t)v21);
          if ((int)v39 >= 0)
            v63 = v39;
          else
            v63 = v39 + 1;
          objc_msgSend(v62, "setWidth:", *(int *)(a1 + 8) * (uint64_t)(v63 >> 1));
          objc_msgSend(v62, "setPixelFormat:", 125);
          objc_msgSend(v62, "setUsage:", 3);
          objc_msgSend(v62, "setTextureType:", 2);
          objc_msgSend(v62, "setResourceOptions:", 32);
          v64 = objc_msgSend(*(id *)(a1 + 160), "newTextureWithDescriptor:offset:bytesPerRow:", v62, 0, *(int *)(a1 + 204));
          v65 = *(void **)(a1 + 264);
          *(_QWORD *)(a1 + 264) = v64;

          if (!*(_QWORD *)(a1 + 264))
          {
            v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v106, objc_msgSend(v62, "width"));
            v89 = std::string::insert(&v106, 0, "Error creating texture ");
            v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            v107.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            v91 = std::string::append(&v107, "/");
            v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
            v108.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v92;
            v91->__r_.__value_.__l.__size_ = 0;
            v91->__r_.__value_.__r.__words[2] = 0;
            v91->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v105, objc_msgSend(v62, "height"));
            if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &v105;
            else
              v93 = (std::string *)v105.__r_.__value_.__r.__words[0];
            if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
            else
              v94 = v105.__r_.__value_.__l.__size_;
            v95 = std::string::append(&v108, (const std::string::value_type *)v93, v94);
            v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
            v109.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v96;
            v95->__r_.__value_.__l.__size_ = 0;
            v95->__r_.__value_.__r.__words[2] = 0;
            v95->__r_.__value_.__r.__words[0] = 0;
            v97 = std::string::append(&v109, "/");
            v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
            v110.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v98;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v97->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v104, *(_DWORD *)(a1 + 204));
            if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = &v104;
            else
              v99 = (std::string *)v104.__r_.__value_.__r.__words[0];
            if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
            else
              v100 = v104.__r_.__value_.__l.__size_;
            v101 = std::string::append(&v110, (const std::string::value_type *)v99, v100);
            v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
            v111.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v102;
            v101->__r_.__value_.__l.__size_ = 0;
            v101->__r_.__value_.__r.__words[2] = 0;
            v101->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v88, &v111);
            __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v59 = v62;
        }

      }
    }

    if (v113)
    {
      v66 = &v113->__shared_owners_;
      do
        v67 = __ldaxr((unint64_t *)v66);
      while (__stlxr(v67 - 1, (unint64_t *)v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
  }
  else if (v103)
  {
    v8[12] = 0;
  }
  v68 = (std::__shared_weak_count *)v115;
  if (v115)
  {
    v69 = (unint64_t *)(v115 + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_1915CF268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  void *v57;
  void *v58;
  int v59;
  uint64_t v60;

  if (*(char *)(v60 - 137) < 0)
    operator delete(*(void **)(v60 - 160));
  if (a17 < 0)
    operator delete(__p);
  if (a56 < 0)
    operator delete(a51);
  if (a49 < 0)
    operator delete(a44);
  if (a23 < 0)
    operator delete(a18);
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
    operator delete(a30);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v59 & 1) == 0)
    {
LABEL_20:

      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v60 - 128);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v60 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v57);
  goto LABEL_20;
}

uint64_t Espresso::V9Engine::blob_container::platform(Espresso::V9Engine::blob_container *this)
{
  return (***(uint64_t (****)(_QWORD))(*((_QWORD *)this + 9) + 8))(*(_QWORD *)(*((_QWORD *)this + 9) + 8));
}

uint64_t Espresso::V9Engine::blob_container::compute_path(Espresso::V9Engine::blob_container *this)
{
  return *((unsigned int *)this + 50);
}

void Espresso::V9Engine::blob_container::__copy_to_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  const void *v4;
  id *v7;
  int32x2_t v8;
  unint64_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  __int32 v40;
  __int32 v41;
  __int32 v42;
  __int32 v43;
  __int32 v44;
  __int32 v45;
  int v46;
  int v47;
  unsigned int v48;
  id v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int32x2_t v66;
  int32x2_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::runtime_error *exception;
  std::runtime_error *v76;
  std::runtime_error *v77;
  int64x2_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  int64x2_t *v82;
  std::__shared_weak_count *v83;
  id *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  int64x2_t v87;
  uint64_t v88;
  int64x2_t *v89;
  int v90;
  int v91;
  __int128 v92;
  int64x2_t *v93;
  std::__shared_weak_count *v94;
  id *v95;
  std::__shared_weak_count *v96;

  v4 = (const void *)a1[9];
  if (!v4
  {
    v95 = 0;
    v96 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = a1[10];
  v95 = v7;
  v96 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(*(_QWORD *)&v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (!*(_QWORD *)a2
  {
    v93 = 0;
    v94 = 0;
    v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "Espresso: wrong_batch_type");
    v76->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v12 = v11;
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  v93 = v11;
  v94 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *a3;
  if (!*a3)
  {
    (*(void (**)(uint64_t *__return_ptr, int32x2_t *))(*(_QWORD *)a1 + 56))(&v86, a1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v86);
    v17 = (std::__shared_weak_count *)v87.i64[0];
    if (v87.i64[0])
    {
      v18 = (unint64_t *)(v87.i64[0] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v12 = v93;
    v16 = *a3;
  }
  v20 = a3[1];
  *(_QWORD *)&v92 = v16;
  *((_QWORD *)&v92 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = v12[11].u64[0];
  v24 = (uint64_t *)v12[10].i64[1];
  if ((unint64_t)v24 >= v23)
  {
    v26 = v12[10].i64[0];
    v27 = ((uint64_t)v24 - v26) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v29 = v23 - v26;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v89 = v12 + 11;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v30);
    v33 = &v31[16 * v27];
    *(_OWORD *)v33 = v92;
    v35 = (_QWORD *)v12[10].i64[0];
    v34 = (_QWORD *)v12[10].i64[1];
    if (v34 == v35)
    {
      v38 = vdupq_n_s64((unint64_t)v34);
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 2;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *v34 = 0;
        v34[1] = 0;
      }
      while (v34 != v35);
      v38 = v12[10];
    }
    v25 = v33 + 16;
    v12[10].i64[0] = (uint64_t)v36;
    v12[10].i64[1] = (uint64_t)(v33 + 16);
    v87 = v38;
    v39 = v12[11].i64[0];
    v12[11].i64[0] = (uint64_t)&v31[16 * v32];
    v88 = v39;
    v86 = v38.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v86);
  }
  else
  {
    *v24 = v16;
    v24[1] = v20;
    v25 = v24 + 2;
  }
  v12[10].i64[1] = (uint64_t)v25;
  v40 = a1[32].i32[1];
  v41 = a1[31].i32[1];
  v43 = a1[2].i32[1];
  v42 = a1[3].i32[0];
  v45 = a1[1].i32[0];
  v44 = a1[1].i32[1];
  v46 = a1[2].i32[0];
  v47 = v46 - 1;
  if (v46 < 1)
    v47 = v46 + 2;
  v48 = (v47 & 0xFFFFFFFC) + 4;
  LODWORD(v86) = a1[1].i32[0];
  HIDWORD(v86) = v44;
  v87.i32[0] = v46;
  v87.i32[1] = v42 * v43;
  v87.i64[1] = __PAIR64__(v41, v48);
  LODWORD(v88) = 1;
  HIDWORD(v88) = v40;
  LODWORD(v89) = 1;
  HIDWORD(v89) = v45;
  v90 = v44 * v45;
  v91 = v44 * v45 * v46;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v92, (uint64_t)v12);
  v49 = (id)v92;
  if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a1 + 32))(a1) != 1)
  {
    v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "not impl");
    __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v95[20], "kernelForFunction:cacheString:withConstants:", "v9_host_io_half_to_float", 0, 0);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "setComputePipelineState:", v50);
  v84 = v95;
  v85 = v96;
  if (v96)
  {
    v51 = (unint64_t *)&v96->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = v94;
  v82 = v12;
  v83 = v94;
  if (v94)
  {
    v54 = (unint64_t *)&v94->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t)&v84, v12, a3);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  if (v53)
  {
    v57 = (unint64_t *)&v53->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v59 = v85;
  if (v85)
  {
    v60 = (unint64_t *)&v85->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  objc_msgSend(v49, "setBuffer:offset:atIndex:", *(_QWORD *)&a1[20], 0, 0);
  objc_msgSend(v49, "setBuffer:offset:atIndex:", v56, 0, 1);
  objc_msgSend(v49, "setBytes:length:atIndex:", &v86, 48, 2);
  v62 = a1[2].i32[1] * v48 * a1[3].i32[0];
  v64 = v62 - 1;
  v63 = v62 < 1;
  v65 = v62 + 2;
  if (!v63)
    v65 = v64;
  v66 = vadd_s32(a1[1], (int32x2_t)-1);
  v67 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v66, (uint32x2_t)vcltz_s32(v66), 0x1EuLL), 2uLL);
  *(_QWORD *)&v68 = v67.i32[0];
  *((_QWORD *)&v68 + 1) = v67.i32[1];
  v80 = v68;
  v81 = (v65 >> 2) + 1;
  v78 = vdupq_n_s64(4uLL);
  v79 = 4;
  objc_msgSend(v49, "dispatchThreadgroups:threadsPerThreadgroup:", &v80, &v78);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)&v92);
  v69 = v94;
  if (v94)
  {
    v70 = (unint64_t *)&v94->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v96;
  if (v96)
  {
    v73 = (unint64_t *)&v96->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_1915CFAAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::blob_container::__copy_from_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  const void *v4;
  id *v7;
  int32x2_t v8;
  unint64_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  uint64_t v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v41;
  __int32 v42;
  int v43;
  int v44;
  unsigned int v45;
  id v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  int v61;
  int32x2_t v62;
  int32x2_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  std::runtime_error *v73;
  int64x2_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int64x2_t *v78;
  std::__shared_weak_count *v79;
  id *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  int64x2_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  __int32 v87;
  __int128 v88;
  int64x2_t *v89;
  std::__shared_weak_count *v90;
  id *v91;
  std::__shared_weak_count *v92;

  v4 = (const void *)a1[9];
  if (!v4
  {
    v91 = 0;
    v92 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = a1[10];
  v91 = v7;
  v92 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(*(_QWORD *)&v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (!*(_QWORD *)a2
  {
    v89 = 0;
    v90 = 0;
    v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v72, "Espresso: wrong_batch_type");
    v72->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v12 = v11;
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  v89 = v11;
  v90 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *a3;
  v17 = a3[1];
  *(_QWORD *)&v88 = *a3;
  *((_QWORD *)&v88 + 1) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = v11[11].u64[0];
  v21 = (uint64_t *)v11[10].i64[1];
  if ((unint64_t)v21 >= v20)
  {
    v23 = v11[10].i64[0];
    v24 = ((uint64_t)v21 - v23) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v26 = v20 - v23;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v85 = (unint64_t)&v12[11];
    v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v27);
    v30 = &v28[16 * v24];
    *(_OWORD *)v30 = v88;
    v32 = (_QWORD *)v12[10].i64[0];
    v31 = (_QWORD *)v12[10].i64[1];
    if (v31 == v32)
    {
      v35 = vdupq_n_s64((unint64_t)v31);
      v33 = &v28[16 * v24];
    }
    else
    {
      v33 = &v28[16 * v24];
      do
      {
        v34 = *((_OWORD *)v31 - 1);
        v31 -= 2;
        *((_OWORD *)v33 - 1) = v34;
        v33 -= 16;
        *v31 = 0;
        v31[1] = 0;
      }
      while (v31 != v32);
      v35 = v12[10];
    }
    v22 = v30 + 16;
    v12[10].i64[0] = (uint64_t)v33;
    v12[10].i64[1] = (uint64_t)(v30 + 16);
    v83 = v35;
    v36 = v12[11].i64[0];
    v12[11].i64[0] = (uint64_t)&v28[16 * v29];
    v84 = v36;
    v82 = v35.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v82);
  }
  else
  {
    *v21 = v16;
    v21[1] = v17;
    v22 = v21 + 2;
  }
  v12[10].i64[1] = (uint64_t)v22;
  v37 = a1[32].i32[1];
  v38 = a1[31].i32[1];
  v40 = a1[2].i32[1];
  v39 = a1[3].i32[0];
  v42 = a1[1].i32[0];
  v41 = a1[1].i32[1];
  v43 = a1[2].i32[0];
  v44 = v43 - 1;
  if (v43 < 1)
    v44 = v43 + 2;
  v45 = (v44 & 0xFFFFFFFC) + 4;
  LODWORD(v82) = a1[1].i32[0];
  HIDWORD(v82) = v41;
  v83.i32[0] = v43;
  v83.i32[1] = v39 * v40;
  v83.i32[2] = 1;
  v83.i32[3] = v42;
  LODWORD(v84) = v41 * v42;
  HIDWORD(v84) = v41 * v42 * v43;
  v85 = __PAIR64__(v38, v45);
  v86 = 1;
  v87 = v37;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v88, (uint64_t)v12);
  v46 = (id)v88;
  if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a1 + 32))(a1) != 1)
  {
    v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "not impl");
    __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v91[20], "kernelForFunction:cacheString:withConstants:", "v9_host_io_float_to_half", 0, 0);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setComputePipelineState:", v47);
  v80 = v91;
  v81 = v92;
  if (v92)
  {
    v48 = (unint64_t *)&v92->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v78 = v12;
  v79 = v13;
  if (v13)
  {
    v50 = (unint64_t *)&v13->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>((uint64_t)&v80, v12, a3);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v53 = (unint64_t *)&v13->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v55 = v81;
  if (v81)
  {
    v56 = (unint64_t *)&v81->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  objc_msgSend(v46, "setBuffer:offset:atIndex:", v52, 0, 0);
  objc_msgSend(v46, "setBuffer:offset:atIndex:", *(_QWORD *)&a1[20], 0, 1);
  objc_msgSend(v46, "setBytes:length:atIndex:", &v82, 48, 2);
  v58 = a1[2].i32[1] * v45 * a1[3].i32[0];
  v60 = v58 - 1;
  v59 = v58 < 1;
  v61 = v58 + 2;
  if (!v59)
    v61 = v60;
  v62 = vadd_s32(a1[1], (int32x2_t)-1);
  v63 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v62, (uint32x2_t)vcltz_s32(v62), 0x1EuLL), 2uLL);
  *(_QWORD *)&v64 = v63.i32[0];
  *((_QWORD *)&v64 + 1) = v63.i32[1];
  v76 = v64;
  v77 = (v61 >> 2) + 1;
  v74 = vdupq_n_s64(4uLL);
  v75 = 4;
  objc_msgSend(v46, "dispatchThreadgroups:threadsPerThreadgroup:", &v76, &v74);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)&v88);
  v65 = v90;
  if (v90)
  {
    v66 = (unint64_t *)&v90->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v92;
  if (v92)
  {
    v69 = (unint64_t *)&v92->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_1915D008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  void *v19;
  void *v20;
  uint64_t v21;

  __cxa_free_exception(v20);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v21 - 128));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 96);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::blob_container::unsafe_opaque_raw_pointer(Espresso::MetalLowmemEngine::blob_container *this)
{
  return *((_QWORD *)this + 21);
}

BOOL Espresso::V9Engine::blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v10, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v5 = v10;
  if (v10)
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 != 0;
}

void sub_1915D01D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void cast_kernel_qsim::~cast_kernel_qsim(cast_kernel_qsim *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void cast_kernel_qsim::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  const void *v16;
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Espresso *v30;
  void *v31;
  __n128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char v43[16];
  int v44;
  void *__p;
  void *v46;
  char v47[12];
  int v48;
  void *v49;
  void *v50;
  char v51[8];
  int v52;
  void *v53;
  void *v54;
  char v55[4];
  int v56;
  void *v57;
  void *v58;
  int v59[10];
  void *v60;
  void *v61;
  char *v62;
  std::__shared_weak_count *v63;
  void *v64;
  std::__shared_weak_count *v65;
  void *v66;
  std::__shared_weak_count *v67;

  v5 = *a4;
  v4 = a4[1];
  if (v4 - *a4 != a3[1] - *a3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("cast_kernel_qsim: mismatching input blobs");
  if (v4 != v5)
  {
    v8 = 0;
    do
    {
      v9 = *(const void **)(v5 + 16 * v8);
      if (v9
      {
        v11 = (uint64_t)v10;
        v66 = v10;
        v12 = *(std::__shared_weak_count **)(v5 + 16 * v8 + 8);
        v67 = v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
      }
      else
      {
        v11 = 0;
        v66 = 0;
        v67 = 0;
      }
      v15 = *a3;
      v16 = *(const void **)(*a3 + 16 * v8);
      if (v16
      {
        v18 = (uint64_t)v17;
        v64 = v17;
        v19 = *(std::__shared_weak_count **)(v15 + 16 * v8 + 8);
        v65 = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
      }
      else
      {
        v18 = 0;
        v64 = 0;
        v65 = 0;
      }
      v22 = *(_DWORD *)(a1 + 280);
      if (v22 >= 3 && v22 != 4)
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("cast_kernel_qsim missing mode");
      if (*(_DWORD *)(v18 + 224) != v22)
        *(_DWORD *)(v18 + 224) = v22;
      Espresso::abstract_blob_container::shape((char *)v59, v18);
      Espresso::abstract_blob_container::shape(v55, v18);
      Espresso::abstract_blob_container::shape(v51, v18);
      Espresso::abstract_blob_container::shape(v47, v18);
      Espresso::abstract_blob_container::shape(v43, v18);
      v24 = operator new(0x60uLL);
      v24[1] = 0;
      v24[2] = 0;
      *v24 = &off_1E2DBECA8;
      v24[3] = &off_1E2DA11F0;
      v25 = v59[0];
      v26 = v56;
      v27 = v52;
      v28 = v48;
      v29 = v44;
      *((_OWORD *)v24 + 4) = 0u;
      *((_OWORD *)v24 + 5) = 0u;
      *((_DWORD *)v24 + 8) = v25;
      *((_DWORD *)v24 + 9) = v26;
      *((_DWORD *)v24 + 10) = v27;
      *((_DWORD *)v24 + 11) = v28;
      v30 = (Espresso *)(4 * v25 * (uint64_t)v26 * v27 * v28 * v29);
      v31 = Espresso::kern_alloc_uninitialized(v30);
      bzero(v31, (size_t)v30);
      v24[6] = v31;
      *((_BYTE *)v24 + 56) = 1;
      v62 = (char *)(v24 + 3);
      v63 = (std::__shared_weak_count *)v24;
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
      if (v49)
      {
        v50 = v49;
        operator delete(v49);
      }
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v57)
      {
        v58 = v57;
        operator delete(v57);
      }
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      Espresso::QuantSimEngine::blob_container::copy_to_fp32(v11, (uint64_t)&v62, 1.0);
      v32.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v18, (uint64_t)&v62, 1.0);
      v33 = v63;
      if (v63)
      {
        v34 = (unint64_t *)&v63->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v32);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v65;
      if (v65)
      {
        v37 = (unint64_t *)&v65->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v32);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = v67;
      if (v67)
      {
        v40 = (unint64_t *)&v67->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v32);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      ++v8;
      v5 = *a4;
    }
    while (v8 < (a4[1] - *a4) >> 4);
  }
}

void sub_1915D05B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 104);
  _Unwind_Resume(a1);
}

void Espresso::QuantSimEngine::blob_container::copy_to_fp32(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *height;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  vDSP_Length v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  vDSP_Length v19;
  uint64_t v20;
  uint64_t v21;
  const unsigned __int8 *v22;
  vDSP_Length v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  vImagePixelCount v30;
  uint64_t v31;
  std::runtime_error *exception;
  float __B;
  vImage_Buffer dest;
  vImage_Buffer src;

  if (!*(_QWORD *)a2)
  {
    v8 = *(_DWORD *)(a1 + 24);
    if (v8 <= 1)
      v8 = 1;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&src, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v8 * *(_DWORD *)(a1 + 20));
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a2, (__int128 *)&src);
    height = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v10 = (unint64_t *)(src.height + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
  }
  __B = 1.0 / a3;
  switch(*(_DWORD *)(a1 + 224))
  {
    case 0:
      v6 = 0;
      v7 = *(int *)(*(_QWORD *)a2 + 8);
      do
      {
        v7 *= *(int *)(*(_QWORD *)a2 + 12 + v6);
        v6 += 4;
      }
      while (v6 != 12);
      memcpy(*(void **)(*(_QWORD *)a2 + 24), *(const void **)(*(_QWORD *)(a1 + 160) + 24), 4 * v7);
      return;
    case 1:
      v26 = 0;
      v27 = *(_QWORD *)(a1 + 176);
      v28 = *(void **)(v27 + 24);
      v29 = *(void **)(*(_QWORD *)a2 + 24);
      v30 = *(int *)(v27 + 8);
      v31 = v27 + 12;
      do
      {
        v30 *= *(int *)(v31 + v26);
        v26 += 4;
      }
      while (v26 != 12);
      src.data = v28;
      src.height = 1;
      src.width = v30;
      src.rowBytes = 2 * v30;
      dest.data = v29;
      dest.height = 1;
      dest.width = v30;
      dest.rowBytes = 4 * v30;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      return;
    case 2:
      v12 = 0;
      v13 = *(_QWORD *)(a1 + 208);
      v14 = *(const char **)(v13 + 24);
      v15 = *(int *)(v13 + 8);
      v16 = v13 + 12;
      do
      {
        v15 *= *(int *)(v16 + v12);
        v12 += 4;
      }
      while (v12 != 12);
      vDSP_vflt8(v14, 1, *(float **)(*(_QWORD *)a2 + 24), 1, v15);
      v17 = 0;
      v18 = *(float **)(*(_QWORD *)a2 + 24);
      v19 = *(int *)(*(_QWORD *)a2 + 8);
      do
      {
        v19 *= *(int *)(*(_QWORD *)a2 + 12 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      goto LABEL_22;
    case 4:
      v20 = 0;
      v21 = *(_QWORD *)(a1 + 192);
      v22 = *(const unsigned __int8 **)(v21 + 24);
      v23 = *(int *)(v21 + 8);
      v24 = v21 + 12;
      do
      {
        v23 *= *(int *)(v24 + v20);
        v20 += 4;
      }
      while (v20 != 12);
      vDSP_vfltu8(v22, 1, *(float **)(*(_QWORD *)a2 + 24), 1, v23);
      v25 = 0;
      v18 = *(float **)(*(_QWORD *)a2 + 24);
      v19 = *(int *)(*(_QWORD *)a2 + 8);
      do
      {
        v19 *= *(int *)(*(_QWORD *)a2 + 12 + v25);
        v25 += 4;
      }
      while (v25 != 12);
LABEL_22:
      vDSP_vsmul(v18, 1, &__B, v18, 1, v19);
      return;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::invalid_argument_error::invalid_argument_error(exception);
  }
}

void sub_1915D0910(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 Espresso::QuantSimEngine::blob_container::copy_from_fp32@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float _S0@<S0>)
{
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  vDSP_Length v14;
  uint64_t v15;
  vDSP_Length v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  vDSP_Length v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  vDSP_Length v30;
  uint64_t v31;
  vDSP_Length v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  vDSP_Length v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  std::runtime_error *exception;
  int v52;
  float v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  float __B;

  __B = _S0;
  switch(*(_DWORD *)(a1 + 224))
  {
    case 0:
      v5 = 0;
      v6 = *(void **)(*(_QWORD *)(a1 + 160) + 24);
      v7 = *(const void **)(*(_QWORD *)a2 + 24);
      v8 = *(int *)(*(_QWORD *)a2 + 8);
      do
      {
        v8 *= *(int *)(*(_QWORD *)a2 + 12 + v5);
        v5 += 4;
      }
      while (v5 != 12);
      memcpy(v6, v7, 4 * v8);
      return LOWORD(_S0);
    case 1:
      v39 = 0;
      v40 = *(float **)(*(_QWORD *)a2 + 24);
      v41 = *(_QWORD *)(a1 + 176);
      v42 = *(_WORD **)(v41 + 24);
      v43 = *(int *)(v41 + 8);
      v44 = v41 + 12;
      do
      {
        v43 *= *(int *)(v44 + v39);
        v39 += 4;
      }
      while (v39 != 12);
      for (; v43; --v43)
      {
        v45 = *v40++;
        _S0 = v45;
        __asm { FCVT            H0, S0 }
        *v42++ = LOWORD(_S0);
      }
      return LOWORD(_S0);
    case 2:
      v9 = *(_DWORD *)(a1 + 24);
      if (v9 <= 1)
        v9 = 1;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v54, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v9 * *(_DWORD *)(a1 + 20));
      v10 = 0;
      v11 = v54;
      v12 = *(int *)(v54 + 8);
      do
      {
        v12 *= *(int *)(v54 + 12 + v10);
        v10 += 4;
      }
      while (v10 != 12);
      memcpy(*(void **)(v54 + 24), *(const void **)(*(_QWORD *)a2 + 24), 4 * v12);
      v13 = 0;
      v14 = *(int *)(*(_QWORD *)a2 + 8);
      do
      {
        v14 *= *(int *)(*(_QWORD *)a2 + 12 + v13);
        v13 += 4;
      }
      while (v13 != 12);
      vDSP_vsmul(*(const float **)(v11 + 24), 1, &__B, *(float **)(v11 + 24), 1, v14);
      v15 = 0;
      v52 = 1123942400;
      v53 = -128.0;
      v16 = *(int *)(v11 + 8);
      do
      {
        v16 *= *(int *)(v11 + 12 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      vDSP_vclip(*(const float **)(v11 + 24), 1, &v53, (const float *)&v52, *(float **)(v11 + 24), 1, v16);
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 208);
      v19 = *(char **)(v18 + 24);
      v20 = *(int *)(v18 + 8);
      v21 = v18 + 12;
      do
      {
        v20 *= *(int *)(v21 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      vDSP_vfixr8(*(const float **)(v11 + 24), 1, v19, 1, v20);
      v22 = v55;
      if (!v55)
        return LOWORD(_S0);
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      break;
    case 4:
      v25 = *(_DWORD *)(a1 + 24);
      if (v25 <= 1)
        v25 = 1;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v54, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v25 * *(_DWORD *)(a1 + 20));
      v26 = 0;
      v27 = v54;
      v28 = *(int *)(v54 + 8);
      do
      {
        v28 *= *(int *)(v54 + 12 + v26);
        v26 += 4;
      }
      while (v26 != 12);
      memcpy(*(void **)(v54 + 24), *(const void **)(*(_QWORD *)a2 + 24), 4 * v28);
      v29 = 0;
      v30 = *(int *)(*(_QWORD *)a2 + 8);
      do
      {
        v30 *= *(int *)(*(_QWORD *)a2 + 12 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(*(const float **)(v27 + 24), 1, &__B, *(float **)(v27 + 24), 1, v30);
      v31 = 0;
      v52 = 1132396544;
      v53 = 0.0;
      v32 = *(int *)(v27 + 8);
      do
      {
        v32 *= *(int *)(v27 + 12 + v31);
        v31 += 4;
      }
      while (v31 != 12);
      vDSP_vclip(*(const float **)(v27 + 24), 1, &v53, (const float *)&v52, *(float **)(v27 + 24), 1, v32);
      v33 = 0;
      v34 = *(_QWORD *)(a1 + 192);
      v35 = *(unsigned __int8 **)(v34 + 24);
      v36 = *(int *)(v34 + 8);
      v37 = v34 + 12;
      do
      {
        v36 *= *(int *)(v37 + v33);
        v33 += 4;
      }
      while (v33 != 12);
      vDSP_vfixru8(*(const float **)(v27 + 24), 1, v35, 1, v36);
      v22 = v55;
      if (!v55)
        return LOWORD(_S0);
      v38 = (unint64_t *)&v55->__shared_owners_;
      do
        v24 = __ldaxr(v38);
      while (__stlxr(v24 - 1, v38));
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::invalid_argument_error::invalid_argument_error(exception);
  }
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return LOWORD(_S0);
}

void sub_1915D0CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void Espresso::QuantSimEngine::context::~context(id *this)
{
  *this = &off_1E2D5F9E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  Espresso::abstract_context::~abstract_context(this);
}

{
  *this = &off_1E2D5F9E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  Espresso::abstract_context::~abstract_context(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::QuantSimEngine::context::network_transform_pre_allocation(Espresso::QuantSimEngine::context *this, Espresso::net *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  Espresso::QuantSimEngine::context **v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  float v17;
  _QWORD *v19;
  float *v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Espresso::QuantSimEngine::context **v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  float v35;
  unint64_t *v36;
  unint64_t v37;
  float v38;
  uint64_t **v39;
  __int128 v40;
  void *__p;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;

  v44 = 0;
  v3 = *((_QWORD *)a2 + 4);
  v2 = *((_QWORD *)a2 + 5);
  if (v2 == v3)
    return;
  v6 = 0;
  v39 = (uint64_t **)((char *)a2 + 352);
  v7 = (char *)a2 + 56;
  do
  {
    v8 = *(_QWORD *)(v3 + 16 * v6);
    v9 = *(Espresso::QuantSimEngine::context ***)(v8 + 64);
    if (!this || v9[1] == this)
    {
      if (!v10)
      {
LABEL_28:
        v6 = v44;
        v3 = *((_QWORD *)a2 + 4);
        v2 = *((_QWORD *)a2 + 5);
        goto LABEL_29;
      }
      v11 = *(std::__shared_weak_count **)(v8 + 72);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 320))(v10);
      *(_QWORD *)&v40 = &v44;
      v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), (_QWORD *)v15[3]))
      {
        v45 = &v44;
        v45 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45)[3];
        v16 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, v45, (uint64_t)&std::piecewise_construct, (__int128 **)&v45);
        v40 = *(_OWORD *)(v16 + 56);
        v42 = 0;
        v43 = 0;
        __p = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v16 + 9), *((_QWORD *)v16 + 10), (uint64_t)(*((_QWORD *)v16 + 10) - *((_QWORD *)v16 + 9)) >> 2);
        v17 = *(float *)&v40;
        if (__p)
        {
          v42 = __p;
          operator delete(__p);
        }
      }
      else
      {
        v17 = 1.0;
      }
      if (*(_DWORD *)v14 > 0x22u || ((1 << *(_DWORD *)v14) & 0x400000075) == 0)
      {
        if (*(_DWORD *)v14 == 119)
        {
          *(_QWORD *)&v40 = &v44;
          v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
          if (v21[4] - v21[3] == 24)
          {
            *(float *)(v14 + 8) = v17 * *(float *)(v14 + 8);
            v20 = (float *)(v14 + 12);
            goto LABEL_19;
          }
        }
      }
      else
      {
        *(_QWORD *)&v40 = &v44;
        v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
        if (v19[4] - v19[3] == 24)
        {
          v20 = (float *)(v14 + 8);
LABEL_19:
          *v20 = v17 * *v20;
        }
      }
      if (v11)
      {
        v22 = (unint64_t *)&v11->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      goto LABEL_28;
    }
LABEL_29:
    v44 = ++v6;
  }
  while (v6 < (v2 - v3) >> 4);
  v44 = 0;
  if (v2 != v3)
  {
    v24 = 0;
    do
    {
      v25 = *(_QWORD *)(v3 + 16 * v24);
      v26 = *(Espresso::QuantSimEngine::context ***)(v25 + 64);
      if (!this || v26[1] == this)
      {
        if (v27)
        {
          v28 = *(std::__shared_weak_count **)(v25 + 72);
          if (v28)
          {
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 384))(v27);
          if (*(_DWORD *)v31 == 14)
          {
            *(_QWORD *)&v40 = &v44;
            v32 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
            if (v32[4] - v32[3] == 24)
            {
              *(_QWORD *)&v40 = &v44;
              v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
              if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), (_QWORD *)v33[3]))
              {
                v45 = &v44;
                v45 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45)[3];
                v34 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v45, (uint64_t)&std::piecewise_construct, (__int128 **)&v45);
                v40 = *(_OWORD *)(v34 + 56);
                v42 = 0;
                v43 = 0;
                __p = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v34 + 9), *((_QWORD *)v34 + 10), (uint64_t)(*((_QWORD *)v34 + 10) - *((_QWORD *)v34 + 9)) >> 2);
                v35 = *(float *)&v40;
                if (__p)
                {
                  v42 = __p;
                  v38 = *(float *)&v40;
                  operator delete(__p);
                  v35 = v38;
                }
              }
              else
              {
                v35 = 1.0;
              }
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v35);
            }
          }
          if (v28)
          {
            v36 = (unint64_t *)&v28->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        v24 = v44;
        v3 = *((_QWORD *)a2 + 4);
        v2 = *((_QWORD *)a2 + 5);
      }
      v44 = ++v24;
    }
    while (v24 < (v2 - v3) >> 4);
  }
}

void sub_1915D11CC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::QuantSimEngine::context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0xFu) & (0x17u >> *a2);
}

void Espresso::QuantSimEngine::blob_container::~blob_container(Espresso::QuantSimEngine::blob_container *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E2D66E68;
  v2 = (char *)this + 160;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D66E68;
  v2 = (char *)this + 160;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  Espresso::abstract_blob_container::~abstract_blob_container(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::QuantSimEngine::blob_container::resize(Espresso::abstract_blob_container *a1, const Espresso::layer_shape *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  std::runtime_error *exception;
  __int128 v27;

  Espresso::abstract_blob_container::set_shape(a1, a2);
  v27 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 160, &v27);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v27 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 176, &v27);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 192, &v27);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v27 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 208, &v27);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *((_DWORD *)a1 + 2);
  v16 = *((_DWORD *)a1 + 3);
  v17 = *((int *)a1 + 4);
  v18 = *((int *)a1 + 5);
  v19 = *((int *)a1 + 6);
  if (v16 * (uint64_t)v15 * v17 * v18 * v19)
  {
    switch(*((_DWORD *)a1 + 56))
    {
      case 0:
        if ((int)v19 <= 1)
          LODWORD(v19) = 1;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v27, v15, v16, v17, v19 * v18);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 160, &v27);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (!*((_QWORD *)&v27 + 1))
          return;
        v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        break;
      case 1:
        if ((int)v19 <= 1)
          LODWORD(v19) = 1;
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v27, v15, v16, v17, v19 * v18);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 176, &v27);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (!*((_QWORD *)&v27 + 1))
          return;
        v25 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v22 = __ldaxr(v25);
        while (__stlxr(v22 - 1, v25));
        break;
      case 2:
        if ((int)v19 <= 1)
          LODWORD(v19) = 1;
        std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int &,int &,int &,int &,void>(&v27, v15, v16, v17, v19 * v18);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 208, &v27);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (!*((_QWORD *)&v27 + 1))
          return;
        v23 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v22 = __ldaxr(v23);
        while (__stlxr(v22 - 1, v23));
        break;
      case 4:
        if ((int)v19 <= 1)
          LODWORD(v19) = 1;
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&v27, v15, v16, v17, v19 * v18);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + 192, &v27);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (!*((_QWORD *)&v27 + 1))
          return;
        v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v22 = __ldaxr(v24);
        while (__stlxr(v22 - 1, v24));
        break;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_argument_error::invalid_argument_error(exception);
    }
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1915D15F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::QuantSimEngine::blob_container::platform(Espresso::QuantSimEngine::blob_container *this)
{
  return 0;
}

uint64_t Espresso::QuantSimEngine::blob_container::compute_path(Espresso::QuantSimEngine::blob_container *this)
{
  return *((unsigned int *)this + 56);
}

void Espresso::QuantSimEngine::blob_container::__copy_to_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso::QuantSimEngine::blob_container::copy_to_fp32(a1, a3, *(float *)(a1 + 112));
}

double Espresso::QuantSimEngine::blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = Espresso::QuantSimEngine::blob_container::copy_from_fp32(a1, a3, *(float *)(a1 + 112));
  return result;
}

BOOL Espresso::QuantSimEngine::blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v10, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v5 = v10;
  if (v10)
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 != 0;
}

void sub_1915D16D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 Espresso::QuantSimEngine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  v6 = (char *)operator new(0x100uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB8060;
  *((_DWORD *)v6 + 13) = -1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  v8 = *a1;
  v7 = a1[1];
  *((_QWORD *)v6 + 11) = 0;
  *((_QWORD *)v6 + 12) = v8;
  *((_QWORD *)v6 + 13) = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 15) = 0;
  *((_DWORD *)v6 + 32) = 0;
  *((_DWORD *)v6 + 34) = 1065353216;
  *(_QWORD *)(v6 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v6 + 37) = 1;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_DWORD *)v6 + 12) = 0;
  *(_OWORD *)(v6 + 152) = 0uLL;
  *(_OWORD *)(v6 + 168) = 0uLL;
  *((_QWORD *)v6 + 3) = &off_1E2D66E68;
  *(_OWORD *)(v6 + 184) = 0uLL;
  *(_OWORD *)(v6 + 200) = 0uLL;
  *(_OWORD *)(v6 + 216) = 0uLL;
  *(_OWORD *)(v6 + 232) = 0uLL;
  *((_DWORD *)v6 + 62) = a2;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

__n128 Espresso::QuantSimEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0xB8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB80D0;
  v5 = Espresso::context_cpu::context_cpu((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D66FA0;
  *((_BYTE *)v4 + 80) = 1;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1915D182C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::QuantSimEngine::engine::~engine(Espresso::QuantSimEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_94@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB5660;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D56240;
  v6[38] = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915D1924(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cast_kernel_qsim>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cast_kernel_qsim>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<cast_kernel_qsim>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_93@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::loopkit_kernel_cpu,std::allocator<Espresso::loopkit_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::loopkit_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_92@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_91@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_90@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __n128 result;

  v8 = operator new(0x160uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB54D8;
  Espresso::furthest_point_sampling_kernel_cpu::furthest_point_sampling_kernel_cpu((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D55798;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915D1AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D55798;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D55798;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[38];
  v99[0] = a1[37];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[38];
  v98[0] = a1[37];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::furthest_point_sampling_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (uint64_t)v101);
  v40 = a1[39];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[40];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[38];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915D2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915D25E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_furthest_point_sampling_kernel::kernel_type_str(Espresso::generic_furthest_point_sampling_kernel *this)
{
  return "furthest_point_sampling";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::furthest_point_sampling_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915D2B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>(uint64_t a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("post scale dim != 1 or channel size: %zu / %d", a1, a2);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB54D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB54D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_89@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5548;
  Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  v7 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v6 + 25) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v6 + 26) = v7;
  *(_QWORD *)(v6 + 431) = *(_QWORD *)(a2 + 127);
  v8 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v10;
  *((_QWORD *)v6 + 3) = &off_1E2D55A48;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 55, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915D2CF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D55A48;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D55A48;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  float __B;
  _QWORD v40[2];
  _QWORD v41[2];
  char *v42[3];
  char *v43[3];

  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 424);
  v41[0] = *(_QWORD *)(a1 + 416);
  v41[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::convert_layer_data_to_fp32(v41, v43, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(_QWORD *)(a1 + 416);
  v14 = *(std::__shared_weak_count **)(a1 + 424);
  v40[0] = v13;
  v40[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::convert_layer_data_to_fp32(v40, v42, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v43[0][16 * v20];
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v38 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (v38)
        {
          v36 = (unint64_t *)&v38->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("fused_inner_product_grad: Layer supposed to be unpacked on CPU engine");
}

void sub_1915D3074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = &a19;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a19 = (void **)(v19 - 72);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 432;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915D344C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_fused_inner_product_grad_kernel::kernel_type_str(Espresso::generic_fused_inner_product_grad_kernel *this)
{
  return "fused_inner_product_grad";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915D39BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_88@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;

  v6 = operator new(0x200uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB54A0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 38));
  v7 = a2[9];
  *((_OWORD *)v6 + 27) = a2[8];
  *((_OWORD *)v6 + 28) = v7;
  *(_OWORD *)(v8 + 156) = *(_OWORD *)((char *)a2 + 156);
  v9 = a2[5];
  *((_OWORD *)v6 + 23) = a2[4];
  *((_OWORD *)v6 + 24) = v9;
  v10 = a2[7];
  *((_OWORD *)v6 + 25) = a2[6];
  *((_OWORD *)v6 + 26) = v10;
  v11 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v11;
  v12 = a2[3];
  *((_OWORD *)v6 + 21) = a2[2];
  *((_OWORD *)v6 + 22) = v12;
  v6[3] = &off_1E2D55640;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 60, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915D3B48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D55640;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 472);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 456);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D55640;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 472);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 456);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  float __B;
  _QWORD v40[2];
  _QWORD v41[2];
  char *v42[3];
  char *v43[3];

  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 464);
  v41[0] = *(_QWORD *)(a1 + 456);
  v41[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::convert_layer_data_to_fp32(v41, v43, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(_QWORD *)(a1 + 456);
  v14 = *(std::__shared_weak_count **)(a1 + 464);
  v40[0] = v13;
  v40[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::convert_layer_data_to_fp32(v40, v42, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v43[0][16 * v20];
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v38 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (v38)
        {
          v36 = (unint64_t *)&v38->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("fused_convolution_grad: Layer supposed to be unpacked on CPU engine");
}

void sub_1915D3EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = &a19;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a19 = (void **)(v19 - 72);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 472;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915D429C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_fused_convolution_grad_kernel::kernel_type_str(Espresso::generic_fused_convolution_grad_kernel *this)
{
  return "fused_convolution_grad";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::fused_convolution_grad_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915D480C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB54A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB54A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_87@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5350;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 45) = 0;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D54D50;
  v7 = a2[1];
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 344) = v7;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 47, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915D497C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::~wrapper_kernel(Espresso::generic_static_dequantize_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D54D50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  Espresso::generic_static_dequantize_kernel::~generic_static_dequantize_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D54D50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  Espresso::generic_static_dequantize_kernel::~generic_static_dequantize_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[45];
  v99[0] = a1[44];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[45];
  v98[0] = a1[44];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::static_dequantize_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t)v101);
  v40 = a1[46];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[47];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[45];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915D50EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_named_weights<Espresso::static_dequantize_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void *wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::__set_weight_raw_blob(void *a1, uint64_t a2, unsigned __int8 **a3, const void *a4, unint64_t a5)
{
  unsigned __int8 **v7;
  void *result;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = a3;
  result = Espresso::generic_static_dequantize_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5);
  v10 = *((char *)v7 + 23);
  if (v10 < 0)
  {
    if (v7[1] != (unsigned __int8 *)10)
      return result;
    v7 = (unsigned __int8 **)*v7;
  }
  else if (v10 != 10)
  {
    return result;
  }
  if (*v7 == (unsigned __int8 *)0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = (uint64_t)a1 + 368;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
  return result;
}

void sub_1915D54D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 **v2;
  int v4;

  v2 = a2;
  if (Espresso::generic_static_dequantize_kernel::supports_weight_key(a1, a2))
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != (unsigned __int8 *)10)
      return 0;
    v2 = (unsigned __int8 **)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == (unsigned __int8 *)0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

const char *Espresso::generic_static_dequantize_kernel::kernel_type_str(Espresso::generic_static_dequantize_kernel *this)
{
  return "static_dequantize";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::static_dequantize_params_t,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915D5A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_86@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB5200;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  v6[3] = &off_1E2D544E0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915D5BD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D544E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D544E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[38];
  v99[0] = a1[37];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[38];
  v98[0] = a1[37];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::static_quantize_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (_QWORD **)v101);
  v40 = a1[39];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[40];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[38];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915D6344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915D66FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_static_quantize_kernel::kernel_type_str(Espresso::generic_static_quantize_kernel *this)
{
  return "static_quantize";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::static_quantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915D6C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_85@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x170uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4F60;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)((char *)a2 + 12);
  *((_QWORD *)v6 + 3) = &off_1E2D53480;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 42, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915D6DD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D53480;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D53480;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 320);
  v99[0] = *(_QWORD *)(a1 + 312);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 320);
  v98[0] = *(_QWORD *)(a1 + 312);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::slice_update_kernel_cpu::__launch((unsigned int *)a1, v16, v100, (uint64_t)v101);
  v40 = *(_QWORD *)(a1 + 328);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(a1 + 336);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 320);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915D7544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 328;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915D78FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_slice_update_kernel::kernel_type_str(Espresso::generic_slice_update_kernel *this)
{
  return "slice_update";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::slice_update_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915D7E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_84@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB47B8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 48) = 0;
  *((_QWORD *)v6 + 49) = 0;
  *((_QWORD *)v6 + 50) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D50408;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  v6[308] = *(_BYTE *)(a2 + 4);
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 51, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915D7FE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E2D50408;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 384);
  *(_QWORD *)a1 = &off_1E2D82888;
  v2 = (void *)*((_QWORD *)a1 + 39);
  if (v2)
  {
    *((_QWORD *)a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)a1 + 36);
  if (v3)
  {
    *((_QWORD *)a1 + 37) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(a1);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E2D50408;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 384);
  *(_QWORD *)a1 = &off_1E2D82888;
  v2 = (void *)*((_QWORD *)a1 + 39);
  if (v2)
  {
    *((_QWORD *)a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)a1 + 36);
  if (v3)
  {
    *((_QWORD *)a1 + 37) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[49];
  v99[0] = a1[48];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[49];
  v98[0] = a1[48];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::argsort_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t **)v101);
  v40 = a1[50];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[51];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[49];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915D87AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 400;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915D8B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915D90C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB47B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB47B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_83@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v6 = (char *)operator new(0x200uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4668;
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v9;
  *((_QWORD *)v6 + 3) = &off_1E2D4FB70;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 60, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915D923C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::~wrapper_kernel(Espresso::generic_conv3d_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4FB70;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 472);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 456);
  *(_QWORD *)a1 = off_1E2D8CB98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 424);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4FB70;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 472);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 456);
  *(_QWORD *)a1 = off_1E2D8CB98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 424);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 464);
  v99[0] = *(_QWORD *)(a1 + 456);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 464);
  v98[0] = *(_QWORD *)(a1 + 456);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::conv3d_kernel_cpu::__launch((int *)a1, v16, (uint64_t)v100, (uint64_t)v101);
  v40 = *(_QWORD *)(a1 + 472);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(a1 + 480);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 464);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915D99E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(a1 + 440));
}

void wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  unsigned __int8 **v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  Espresso::conv3d_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != (unsigned __int8 *)10)
      return;
    v8 = (unsigned __int8 **)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == (unsigned __int8 *)0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = a1 + 472;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_1915D9DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL8 result;
  int v5;

  v2 = a2[23];
  if (((char)a2[23] & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      v5 = *a2;
      return v5 == 87 || v5 == 98;
    }
    if (v2 != 10)
      return 0;
    return *(_QWORD *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
  }
  if (*((_QWORD *)a2 + 1) != 1)
  {
    if (*((_QWORD *)a2 + 1) != 10)
      return 0;
    goto LABEL_15;
  }
  v3 = **(unsigned __int8 **)a2;
  result = 1;
  if (v3 != 87 && v3 != 98)
  {
    result = 0;
    if ((v2 & 0x80) != 0 && *((_QWORD *)a2 + 1) == 10)
    {
LABEL_15:
      a2 = *(unsigned __int8 **)a2;
      return *(_QWORD *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
    }
  }
  return result;
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::get_weights_blob(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;

  if (a2 == 1)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, a1 + 1, a1 + 53);
    goto LABEL_5;
  }
  if (!a2)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,5>>>((uint64_t *)&v4, a1 + 1, a1 + 55);
LABEL_5:
    *(_OWORD *)a3 = v4;
    return;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::num_weights_blob(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 304))
    return 2;
  else
    return 1;
}

_QWORD *Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 424), *a2, a2[1]);
  *(_DWORD *)(a1 + 304) = *a2 != 0;
  return result;
}

_QWORD *Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 440), *a2, a2[1]);
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::get_biases@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 432);
  *a2 = *(_QWORD *)(result + 424);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::get_weights@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 448);
  *a2 = *(_QWORD *)(result + 440);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,5>>>(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  __int128 v29;

  v6 = operator new(0x118uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1868;
  *a1 = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 3), a2);
  a1[1] = (uint64_t)v6;
  v8 = *a3;
  v7 = a3[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v6[32];
  v6[31] = v8;
  v6[32] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = operator new(0x60uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E2DBECA8;
  v14[3] = &off_1E2DA11F0;
  v14[5] = 0;
  v14[6] = 0;
  v14[4] = 0;
  *((_BYTE *)v14 + 56) = 0;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *(_QWORD *)&v29 = v14 + 3;
  *((_QWORD *)&v29 + 1) = v14;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 23), &v29);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = 0;
  v19 = (_DWORD *)*a1;
  v20 = *(_QWORD *)(*a1 + 160);
  *(_QWORD *)&v21 = 0x100000001;
  *((_QWORD *)&v21 + 1) = 0x100000001;
  *(_OWORD *)(v20 + 8) = v21;
  v22 = *a3;
  v23 = *a3 + 8;
  do
  {
    *(_DWORD *)(v20 + 8 + v18) = *(_DWORD *)(v23 + v18);
    v18 += 4;
  }
  while (v18 != 16);
  v24 = 0;
  *(_DWORD *)(v20 + 20) = 1;
  v25 = *(int *)(v22 + 8);
  do
  {
    v25 *= *(int *)(v22 + 12 + v24);
    v24 += 4;
  }
  while (v24 != 16);
  v26 = 0;
  v27 = *(_DWORD *)(v20 + 8);
  v28 = v27;
  do
  {
    v28 *= *(int *)(v20 + 12 + v26);
    v26 += 4;
  }
  while (v26 != 12);
  *(_DWORD *)(v20 + 20) = v25 / v28;
  v19[2] = v27;
  v19[3] = *(_DWORD *)(v20 + 12);
  v19[4] = *(_DWORD *)(v20 + 16);
  v19[5] = *(_DWORD *)(v20 + 20);
  v19[6] = 1;
  *(_QWORD *)(v20 + 24) = *(_QWORD *)(v22 + 32);
  *(_BYTE *)(v20 + 32) = 0;
}

void sub_1915DA304(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

__n128 Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  int v22;
  __int128 v23;

  v6 = operator new(0x118uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1868;
  *a1 = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 3), a2);
  a1[1] = (uint64_t)v6;
  v8 = *a3;
  v7 = a3[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v6[32];
  v6[31] = v8;
  v6[32] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = operator new(0x60uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E2DBECA8;
  v14[3] = &off_1E2DA11F0;
  v14[5] = 0;
  v14[6] = 0;
  v14[4] = 0;
  *((_BYTE *)v14 + 56) = 0;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *(_QWORD *)&v23 = v14 + 3;
  *((_QWORD *)&v23 + 1) = v14;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 23), &v23);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (_DWORD *)*a1;
  v19 = *(_QWORD *)(*a1 + 160);
  result.n128_u64[0] = 0x100000001;
  result.n128_u64[1] = 0x100000001;
  *(__n128 *)(v19 + 8) = result;
  v21 = *a3;
  v22 = *(_DWORD *)(*a3 + 8);
  *(_DWORD *)(v19 + 8) = v22;
  v18[2] = v22;
  v18[3] = *(_DWORD *)(v19 + 12);
  v18[4] = *(_DWORD *)(v19 + 16);
  v18[5] = *(_DWORD *)(v19 + 20);
  v18[6] = 1;
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v21 + 16);
  *(_BYTE *)(v19 + 32) = 0;
  return result;
}

void sub_1915DA49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915DA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_82@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;

  v6 = (char *)operator new(0x190uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4748;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v7;
  *((_OWORD *)v6 + 21) = a2[2];
  *(_OWORD *)(v6 + 348) = *(_OWORD *)((char *)a2 + 44);
  *((_QWORD *)v6 + 3) = &off_1E2D50158;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 46, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915DA9B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D50158;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D50158;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[44];
  v99[0] = a1[43];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[44];
  v98[0] = a1[43];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::pool3d_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (uint64_t)v101);
  v40 = a1[45];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[46];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[44];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915DB124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 360;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915DB4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_pool3d_kernel::kernel_type_str(Espresso::generic_pool3d_kernel *this)
{
  return "pool3d";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::pool3d_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915DBA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_81@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __n128 result;

  v8 = (char *)operator new(0x228uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB50B0;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 38) = v8 + 312;
  *((_QWORD *)v8 + 39) = 0;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *((_DWORD *)v8 + 94) = 1065353216;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = 1065353216;
  *((_DWORD *)v8 + 85) = a3;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  v9 = *a2;
  v8[336] = *((_BYTE *)a2 + 8);
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 41) = v9;
  *((_QWORD *)v8 + 3) = &off_1E2D53C90;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 536) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v8 + 65, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915DBBE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D53C90;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 512);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 496);
  *(_QWORD *)a1 = &off_1E2D92F38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 464);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D53C90;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 512);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 496);
  *(_QWORD *)a1 = &off_1E2D92F38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 464);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  float __B;
  _QWORD v40[2];
  _QWORD v41[2];
  char *v42[3];
  char *v43[3];

  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 504);
  v41[0] = *(_QWORD *)(a1 + 496);
  v41[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::convert_layer_data_to_fp32(v41, v43, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(_QWORD *)(a1 + 496);
  v14 = *(std::__shared_weak_count **)(a1 + 504);
  v40[0] = v13;
  v40[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::convert_layer_data_to_fp32(v40, v42, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v43[0][16 * v20];
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v38 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (v38)
        {
          v36 = (unint64_t *)&v38->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("self_attention: Layer supposed to be unpacked on CPU engine");
}

void sub_1915DBFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = &a19;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a19 = (void **)(v19 - 72);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t *v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  Espresso::self_attention_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != 10)
      return;
    v8 = (uint64_t *)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = a1 + 512;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_1915DC3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;

  v2 = a2;
  if (Espresso::self_attention_kernel_cpu::supports_weight_key(a1, a2))
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (*((_QWORD *)v2 + 1) != 10)
      return 0;
    v2 = *(_DWORD **)v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *(_QWORD *)v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915DC938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB50B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB50B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_80@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __n128 result;

  v8 = (char *)operator new(0x208uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB5388;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 38) = v8 + 312;
  *((_QWORD *)v8 + 39) = 0;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *((_DWORD *)v8 + 94) = 1065353216;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = 1065353216;
  *((_DWORD *)v8 + 85) = a3;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  v9 = *a2;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 41) = v9;
  *((_DWORD *)v8 + 84) = *((_DWORD *)a2 + 2);
  *((_QWORD *)v8 + 3) = &off_1E2D54EE8;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v8 + 61, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1915DCAC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D54EE8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 464);
  *(_QWORD *)a1 = &off_1E2D99348;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D54EE8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 464);
  *(_QWORD *)a1 = &off_1E2D99348;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  float __B;
  _QWORD v40[2];
  _QWORD v41[2];
  char *v42[3];
  char *v43[3];

  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 472);
  v41[0] = *(_QWORD *)(a1 + 464);
  v41[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::convert_layer_data_to_fp32(v41, v43, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(_QWORD *)(a1 + 464);
  v14 = *(std::__shared_weak_count **)(a1 + 472);
  v40[0] = v13;
  v40[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::convert_layer_data_to_fp32(v40, v42, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v43[0][16 * v20];
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v38 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (v38)
        {
          v36 = (unint64_t *)&v38->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("bahdanau_attention: Layer supposed to be unpacked on CPU engine");
}

void sub_1915DCE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = &a19;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a19 = (void **)(v19 - 72);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _BYTE *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  _BYTE *v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  Espresso::bahdanau_attention_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = (char)v8[23];
  if (v10 < 0)
  {
    if (*((_QWORD *)v8 + 1) != 10)
      return;
    v8 = *(_BYTE **)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(_QWORD *)v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = a1 + 480;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_1915DD278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 **v2;
  int v4;

  v2 = a2;
  if ((Espresso::bahdanau_attention_kernel_cpu::supports_weight_key(a1, a2) & 1) != 0)
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != (unsigned __int8 *)10)
      return 0;
    v2 = (unsigned __int8 **)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == (unsigned __int8 *)0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915DD7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_79@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB5318;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v7 = *a2;
  v6[3] = &off_1E2D54BF8;
  *((_OWORD *)v6 + 19) = v7;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915DD958(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D54BF8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D54BF8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 304);
  v99[0] = *(_QWORD *)(a1 + 296);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 304);
  v98[0] = *(_QWORD *)(a1 + 296);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::local_correlation_kernel_cpu::__launch((_DWORD *)a1, v16, (uint64_t)v100, (uint64_t)v101);
  v40 = *(_QWORD *)(a1 + 312);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(a1 + 320);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 304);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915DE0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915DE480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915DE9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_78@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5040;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  *((_WORD *)v6 + 154) = *(_WORD *)(a2 + 4);
  *((_QWORD *)v6 + 3) = &off_1E2D539E0;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915DEB44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D539E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D539E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v99[0] = a1[36];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::grid_sampling_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, v101);
  v40 = a1[38];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[39];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[37];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915DF2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915DF66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915DFBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_77@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x1C0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5468;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D55498;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  v7 = *a2;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 41) = v7;
  *((_DWORD *)v6 + 84) = *((_DWORD *)a2 + 2);
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 52, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915DFD44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::~wrapper_kernel(Espresso::generic_sparse_inner_product_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D55498;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 408);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  *(_QWORD *)a1 = &off_1E2D9C700;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D55498;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 408);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  *(_QWORD *)a1 = &off_1E2D9C700;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[50];
  v99[0] = a1[49];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[50];
  v98[0] = a1[49];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::sparse_inner_product_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (uint64_t)v101);
  v40 = a1[51];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[52];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[50];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915E04FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_weights<Espresso::sparse_inner_product_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const char *a3, const void *a4, unint64_t a5)
{
  const char *v7;
  int v9;
  uint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error *exception;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string v38;
  _QWORD v39[2];
  unsigned __int8 v40;
  _QWORD v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;

  v7 = a3;
  Espresso::sparse_inner_product_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, (uint64_t)a4, a5);
  v9 = v7[23];
  if (v9 < 0)
  {
    if (*((_QWORD *)v7 + 1) != 10)
      return;
    v7 = *(const char **)v7;
  }
  else if (v9 != 10)
  {
    return;
  }
  if (*(_QWORD *)v7 == 0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v11 = a1 + 408;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v11, (__int128 *)&v51);
    size = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
    if (v51.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v11 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::string::append(&v45, "/blob=");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*(_QWORD *)v11 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v43;
      else
        v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        v21 = v43.__r_.__value_.__l.__size_;
      v22 = std::string::append(&v46, (const std::string::value_type *)v20, v21);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0)
        v24 = (const std::string::value_type *)v41;
      else
        v24 = (const std::string::value_type *)v41[0];
      if ((v42 & 0x80u) == 0)
        v25 = v42;
      else
        v25 = v41[1];
      v26 = std::string::append(&v47, v24, v25);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0)
        v30 = (const std::string::value_type *)v39;
      else
        v30 = (const std::string::value_type *)v39[0];
      if ((v40 & 0x80u) == 0)
        v31 = v40;
      else
        v31 = v39[1];
      v32 = std::string::append(&v49, v30, v31);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v38;
      else
        v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      else
        v35 = v38.__r_.__value_.__l.__size_;
      v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v11 + 16), a4, a5);
  }
}

void sub_1915E08E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;

  v2 = a2;
  if (Espresso::sparse_inner_product_kernel_cpu::supports_weight_key(a1, a2))
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10)
      return 0;
    v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

const char *Espresso::generic_sparse_inner_product_kernel::kernel_type_str(Espresso::generic_sparse_inner_product_kernel *this)
{
  return "sparse_inner_product";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sparse_inner_product_params_t,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E0E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_76@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x218uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB46D8;
  Espresso::dev_op_kernel_cpu::dev_op_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D4FEA8;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 63, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915E0FDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::~wrapper_kernel(Espresso::dev_op_kernel_cpu *a1)
{
  *(_QWORD *)a1 = &off_1E2D4FEA8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 496);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 480);
  Espresso::dev_op_kernel_cpu::~dev_op_kernel_cpu(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4FEA8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 496);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 480);
  Espresso::dev_op_kernel_cpu::~dev_op_kernel_cpu(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::__launch(Espresso::dev_op_kernel_cpu *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  Espresso::dev_op_kernel_cpu *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 61);
  v99[0] = *((_QWORD *)a1 + 60);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 61);
  v98[0] = *((_QWORD *)a1 + 60);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::dev_op_kernel_cpu::__launch(a1, v16, v100, v101);
  v40 = *((_QWORD *)a1 + 62);
  if (v40)
  {
    v41 = (std::__shared_weak_count *)*((_QWORD *)a1 + 63);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)a1 + 61);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915E174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 496;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915E1B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E2060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB46D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB46D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_75@<Q0>(uint64_t *a1@<X1>, _WORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB46A0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_WORD *)v6 + 152) = *a2;
  *((_QWORD *)v6 + 3) = &off_1E2D4FD50;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915E21C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4FD50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4FD50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v99[0] = a1[36];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::cumsum_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (uint64_t **)v101);
  v40 = a1[38];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[39];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[37];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915E2930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915E2CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cumsum_kernel::kernel_type_str(Espresso::generic_cumsum_kernel *this)
{
  return "cumsum";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cumsum_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E3258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB46A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB46A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_74@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4978;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v7 = *a2;
  v6[3] = &off_1E2D50F28;
  *((_OWORD *)v6 + 19) = v7;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915E33B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D50F28;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D50F28;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 304);
  v99[0] = *(_QWORD *)(a1 + 296);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 304);
  v98[0] = *(_QWORD *)(a1 + 296);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::one_hot_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t **)v101);
  v41 = *(_QWORD *)(v95 + 312);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 320);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 304);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915E3B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915E3EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E4444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_73@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x158uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DB53F8;
  Espresso::base_kernel::base_kernel((uint64_t)(v4 + 24), a1);
  *((_QWORD *)v4 + 3) = &off_1E2D551E8;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v4 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1915E4590(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D551E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D551E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void **v43;
  void **v44;
  void **v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int *v51;
  float *v52;
  vDSP_Length v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  vDSP_Length v59;
  vDSP_Length v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  const void *v73;
  void **v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void **v79;
  const void *v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  _QWORD *v93;
  uint64_t *v94;
  std::__shared_weak_count *v95;
  float __B;
  _QWORD v97[2];
  _QWORD v98[2];
  void **v99[3];
  char *v100[3];
  void *v101;
  std::__shared_weak_count *v102;
  void ***v103;
  std::__shared_weak_count *v104;

  v5 = a3;
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::convert_layer_data_to_fp32(v98, v100, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v97[0] = a1[36];
  v97[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::convert_layer_data_to_fp32(v97, (char **)v99, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v100[0][16 * v20];
        v103 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v104 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v101 = (void *)v26;
        v102 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v104;
        if (v104)
        {
          v37 = (unint64_t *)&v104->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = a1[38];
  if (v39)
  {
    v40 = (std::__shared_weak_count *)a1[39];
    v95 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = v99[0];
    if (*v99[0]
    {
      v45 = v44;
      v46 = (std::__shared_weak_count *)v43[1];
      v103 = (void ***)v44;
      v104 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
    }
    else
    {
      v46 = 0;
      v45 = 0;
      v103 = 0;
      v104 = 0;
    }
    v93 = a1;
    v94 = v5;
    LODWORD(v49) = *(_DWORD *)(v39 + 8);
    v92 = v46;
    if ((_DWORD)v49 == 1)
    {
      v50 = 0;
      v51 = (int *)v45[20];
      v52 = (float *)*((_QWORD *)v51 + 3);
      v53 = v51[2];
      v54 = v51 + 3;
      do
        v53 *= v54[v50++];
      while (v50 != 3);
      vDSP_vsmul(v52, 1, *(const float **)(v39 + 16), v52, 1, v53);
    }
    else
    {
      v55 = *((_DWORD *)v45 + 4);
      if ((_DWORD)v49 != v55)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v49, v55);
      v56 = *((_DWORD *)v45 + 5);
      if (v56)
      {
        v57 = 0;
        v58 = 0;
        v59 = *((int *)v45 + 2) * (uint64_t)*((int *)v45 + 3);
        v60 = 4 * (int)v49 * v59;
        do
        {
          if ((_DWORD)v49)
          {
            v61 = 0;
            v62 = 0;
            v63 = v57;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v45[20] + 3) + v63), 1, (const float *)(*(_QWORD *)(v39 + 16) + v61), (float *)(*((_QWORD *)v45[20] + 3) + v63), 1, v59);
              ++v62;
              v49 = *((int *)v45 + 4);
              v61 += 4;
              v63 += 4 * v59;
            }
            while (v62 < v49);
            v56 = *((_DWORD *)v45 + 5);
          }
          ++v58;
          v57 += v60;
        }
        while (v58 < v56);
      }
    }
    a1 = v93;
    v5 = v94;
    if (v92)
    {
      v64 = (unint64_t *)&v92->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v95)
    {
      v66 = (unint64_t *)&v95->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  v68 = (std::__shared_weak_count *)a1[37];
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v71 = *v5;
  if (v5[1] != *v5)
  {
    v72 = 0;
    do
    {
      v73 = *(const void **)(v71 + 16 * v72);
      if (v73
      {
        v75 = (uint64_t)v74;
        v103 = (void ***)v74;
        v76 = *(std::__shared_weak_count **)(v71 + 16 * v72 + 8);
        v104 = v76;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
      }
      else
      {
        v75 = 0;
        v103 = 0;
        v104 = 0;
      }
      v79 = v99[0];
      v80 = v99[0][2 * v72];
      if (v80
      {
        v101 = v81;
        v82 = (std::__shared_weak_count *)v79[2 * v72 + 1];
        v102 = v82;
        if (v82)
        {
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
      }
      else
      {
        v82 = 0;
        v81 = 0;
        v101 = 0;
        v102 = 0;
      }
      v16.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v75, (uint64_t)v81 + 160, 1.0);
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v16);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v87 = v104;
      if (v104)
      {
        v88 = (unint64_t *)&v104->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v87->__on_zero_shared)(v87, v16);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      ++v72;
      v71 = *v5;
    }
    while (v72 < (v5[1] - *v5) >> 4);
  }
  if (v68)
  {
    v90 = (unint64_t *)&v68->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v68->__on_zero_shared)(v68, v16);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v103 = v99;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v99[0] = (void **)v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v99);
}

void sub_1915E4CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915E50A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_precompiled_segment_kernel::kernel_type_str(Espresso::generic_precompiled_segment_kernel *this)
{
  return "precompiled_segment";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::precompiled_segment_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E5618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB53F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB53F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_72@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  __n128 result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB4940;
  Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[39] = 0;
  v4[40] = 0;
  v4[41] = 0;
  v4[3] = &off_1E2D50DD0;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4 + 42, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v4 + 3);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1915E5768(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E2D50DD0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  *(_QWORD *)a1 = &off_1E2D83B00;
  v2 = (void *)*((_QWORD *)a1 + 36);
  if (v2)
  {
    *((_QWORD *)a1 + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(a1);
}

{
  void *v2;

  *(_QWORD *)a1 = &off_1E2D50DD0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  *(_QWORD *)a1 = &off_1E2D83B00;
  v2 = (void *)*((_QWORD *)a1 + 36);
  if (v2)
  {
    *((_QWORD *)a1 + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[40];
  v99[0] = a1[39];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[40];
  v98[0] = a1[39];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::nonzero_kernel_cpu::__launch(a1, v16, (uint64_t **)v100, (uint64_t **)v101);
  v40 = a1[41];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[42];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[40];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915E5F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 328;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915E62C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

uint64_t Espresso::generic_nonzero_kernel::has_dynamic_top_shape(Espresso::generic_nonzero_kernel *this)
{
  return 1;
}

const char *Espresso::generic_nonzero_kernel::kernel_type_str(Espresso::generic_nonzero_kernel *this)
{
  return "nonzero";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::nonzero_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_71@<Q0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4CF8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 41) = 0;
  *((_QWORD *)v6 + 42) = 0;
  *((_QWORD *)v6 + 38) = *a2;
  *(_QWORD *)(v6 + 310) = *(_QWORD *)((char *)a2 + 6);
  *((_QWORD *)v6 + 3) = &off_1E2D52548;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 43, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915E69B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E2D52548;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  *(_QWORD *)a1 = &off_1E2D8C210;
  v2 = (void *)*((_QWORD *)a1 + 37);
  if (v2)
  {
    *((_QWORD *)a1 + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(a1);
}

{
  void *v2;

  *(_QWORD *)a1 = &off_1E2D52548;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  *(_QWORD *)a1 = &off_1E2D8C210;
  v2 = (void *)*((_QWORD *)a1 + 37);
  if (v2)
  {
    *((_QWORD *)a1 + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[41];
  v99[0] = a1[40];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[41];
  v98[0] = a1[40];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::scatter_nd_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t **)v101);
  v40 = a1[42];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[43];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[41];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915E715C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 336;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915E7514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E7A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_70@<Q0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4BE0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 41) = 0;
  *((_QWORD *)v6 + 42) = 0;
  *((_QWORD *)v6 + 38) = *a2;
  *(_QWORD *)(v6 + 310) = *(_QWORD *)((char *)a2 + 6);
  *((_QWORD *)v6 + 3) = &off_1E2D51E48;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 43, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915E7BE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E2D51E48;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  *(_QWORD *)a1 = &off_1E2D86598;
  v2 = (void *)*((_QWORD *)a1 + 37);
  if (v2)
  {
    *((_QWORD *)a1 + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(a1);
}

{
  void *v2;

  *(_QWORD *)a1 = &off_1E2D51E48;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  *(_QWORD *)a1 = &off_1E2D86598;
  v2 = (void *)*((_QWORD *)a1 + 37);
  if (v2)
  {
    *((_QWORD *)a1 + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[41];
  v99[0] = a1[40];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[41];
  v98[0] = a1[40];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::gather_nd_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t **)v101);
  v40 = a1[42];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[43];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[41];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915E838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 336;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915E8744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E8CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_69@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x218uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5510;
  Espresso::non_maximum_suppression_kernel_cpu::non_maximum_suppression_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D558F0;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 63, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915E8DFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::~wrapper_kernel(Espresso::non_maximum_suppression_kernel_cpu *a1)
{
  *(_QWORD *)a1 = &off_1E2D558F0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 496);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 480);
  Espresso::non_maximum_suppression_kernel_cpu::~non_maximum_suppression_kernel_cpu(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D558F0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 496);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 480);
  Espresso::non_maximum_suppression_kernel_cpu::~non_maximum_suppression_kernel_cpu(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[61];
  v99[0] = a1[60];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[61];
  v98[0] = a1[60];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::non_maximum_suppression_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t **)v101);
  v40 = a1[62];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[63];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[61];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915E956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 496;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915E9924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_non_maximum_suppression_kernel::kernel_type_str(Espresso::generic_non_maximum_suppression_kernel *this)
{
  return "non_maximum_suppression";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::non_maximum_suppression_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915E9E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void Espresso::non_maximum_suppression_kernel_cpu::~non_maximum_suppression_kernel_cpu(Espresso::non_maximum_suppression_kernel_cpu *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E2D9E7B8;
  v2 = (void *)*((_QWORD *)this + 57);
  if (v2)
  {
    *((_QWORD *)this + 58) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 54);
  if (v3)
  {
    *((_QWORD *)this + 55) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 51);
  if (v4)
  {
    *((_QWORD *)this + 52) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 48);
  if (v5)
  {
    *((_QWORD *)this + 49) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 45);
  if (v6)
  {
    *((_QWORD *)this + 46) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 42);
  if (v7)
  {
    *((_QWORD *)this + 43) = v7;
    operator delete(v7);
  }
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(this);
}

{
  Espresso::non_maximum_suppression_kernel_cpu::~non_maximum_suppression_kernel_cpu(this);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_68@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4320;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v7 = *a2;
  v6[3] = &off_1E2D4E6C8;
  *((_OWORD *)v6 + 19) = v7;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915EA07C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4E6C8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4E6C8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[38];
  v99[0] = a1[37];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[38];
  v98[0] = a1[37];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::adam_kernel_cpu::__launch((uint64_t)a1, v16, v100, v101);
  v40 = a1[39];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[40];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[38];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915EA7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915EABA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915EB100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_67@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB42E8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  v6[3] = &off_1E2D4E570;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915EB264(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4E570;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4E570;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[38];
  v99[0] = a1[37];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[38];
  v98[0] = a1[37];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::sgd_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t *)v101);
  v40 = a1[39];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[40];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[38];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915EB9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915EBD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915EC2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB42E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB42E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_66@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4FD0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = *(_QWORD *)a2;
  *((_BYTE *)v6 + 312) = *(_BYTE *)(a2 + 8);
  v6[3] = &off_1E2D53730;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915EC44C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D53730;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D53730;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[38];
  v99[0] = a1[37];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[38];
  v98[0] = a1[37];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::cross_entropy_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t)v101);
  v40 = a1[39];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[40];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[38];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915ECBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915ECF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cross_entropy_kernel::kernel_type_str(Espresso::generic_cross_entropy_kernel *this)
{
  return "cross_entropy";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cross_entropy_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915ED4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_65@<Q0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4EB8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = *a2;
  *((_QWORD *)v6 + 3) = &off_1E2D53078;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915ED644(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D53078;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D53078;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v99[0] = a1[36];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::reverse_seq_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t **)v101);
  v40 = a1[38];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[39];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[37];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915EDDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915EE16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_reverse_seq_kernel::kernel_type_str(Espresso::generic_reverse_seq_kernel *this)
{
  return "reverse_seq";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::reverse_seq_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915EE6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_64@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB51C8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  v6[3] = &off_1E2D54388;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915EE840(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D54388;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D54388;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 304);
  v99[0] = *(_QWORD *)(a1 + 296);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 304);
  v98[0] = *(_QWORD *)(a1 + 296);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::sliding_windows_kernel_cpu::__launch((_DWORD *)a1, v16, (uint64_t **)v100, (uint64_t **)v101);
  v40 = *(_QWORD *)(a1 + 312);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(a1 + 320);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 304);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915EEFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915EF368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_sliding_windows_kernel::kernel_type_str(Espresso::generic_sliding_windows_kernel *this)
{
  return "sliding_windows";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sliding_windows_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915EF8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB51C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB51C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_63@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4D30;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[39] = 0;
  v6[40] = 0;
  v6[41] = 0;
  *((_DWORD *)v6 + 76) = *a2;
  v6[3] = &off_1E2D526A0;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 42, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915EFA3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E2D526A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  *(_QWORD *)a1 = &off_1E2D8C3A8;
  v2 = (void *)*((_QWORD *)a1 + 36);
  if (v2)
  {
    *((_QWORD *)a1 + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(a1);
}

{
  void *v2;

  *(_QWORD *)a1 = &off_1E2D526A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  *(_QWORD *)a1 = &off_1E2D8C3A8;
  v2 = (void *)*((_QWORD *)a1 + 36);
  if (v2)
  {
    *((_QWORD *)a1 + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[40];
  v99[0] = a1[39];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[40];
  v98[0] = a1[39];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::softmax_nd_kernel_cpu::__launch((uint64_t)a1, v16, v100, (_QWORD **)v101);
  v40 = a1[41];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[42];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[40];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915F01E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 328;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915F059C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F0AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_62@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4588;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v7;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v6 + 88) = *(_DWORD *)(a2 + 48);
  *((_QWORD *)v6 + 3) = &off_1E2D4F5F0;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 45, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915F0C68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4F5F0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4F5F0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[43];
  v99[0] = a1[42];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[43];
  v98[0] = a1[42];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::split_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t)v101);
  v40 = a1[44];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[45];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[43];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915F13D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 352;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915F1790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F1CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_61@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x388uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4A90;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  *(_OWORD *)(v6 + 824) = 0u;
  memcpy(v6 + 304, a2, 0x208uLL);
  *((_QWORD *)v6 + 3) = &off_1E2D515E0;
  *(_OWORD *)(v6 + 872) = 0u;
  *(_OWORD *)(v6 + 888) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 109, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915F1E5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E2D515E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 864);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 848);
  *(_QWORD *)a1 = &off_1E2D856D8;
  v2 = (void *)*((_QWORD *)a1 + 103);
  if (v2)
  {
    *((_QWORD *)a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)a1 + 100);
  if (v3)
  {
    *((_QWORD *)a1 + 101) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(a1);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E2D515E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 864);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 848);
  *(_QWORD *)a1 = &off_1E2D856D8;
  v2 = (void *)*((_QWORD *)a1 + 103);
  if (v2)
  {
    *((_QWORD *)a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)a1 + 100);
  if (v3)
  {
    *((_QWORD *)a1 + 101) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[107];
  v99[0] = a1[106];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[107];
  v98[0] = a1[106];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::split_nd_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t *)v100, (uint64_t **)v101);
  v40 = a1[108];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[109];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[107];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915F2630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 864;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915F29E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F2F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_60@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4AC8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 47) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D51738;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *((_DWORD *)v6 + 76) = *a2;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 48, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915F30B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::~wrapper_kernel(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)a1 = &off_1E2D51738;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 376);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 360);
  *(_QWORD *)a1 = &off_1E2D85830;
  v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(_QWORD *)(a1 + 344) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 312);
  if (v3)
  {
    *(_QWORD *)(a1 + 320) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a1 + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)a1 = &off_1E2D51738;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 376);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 360);
  *(_QWORD *)a1 = &off_1E2D85830;
  v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(_QWORD *)(a1 + 344) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 312);
  if (v3)
  {
    *(_QWORD *)(a1 + 320) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a1 + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[46];
  v99[0] = a1[45];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[46];
  v98[0] = a1[45];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::stack_nd_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t *)v101);
  v40 = a1[47];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[48];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[46];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915F38A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 376;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915F3C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_stack_nd_kernel::kernel_type_str(Espresso::generic_stack_nd_kernel *this)
{
  return "stack_nd";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::stack_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F41D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_59@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v6 = (char *)operator new(0x248uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5008;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v7;
  *((_DWORD *)v6 + 100) = *(_DWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v9;
  *((_QWORD *)v6 + 3) = &off_1E2D53888;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 69, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915F4358(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::~wrapper_kernel(a1);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &off_1E2D53888;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 544);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 528);
  *(_QWORD *)a1 = &off_1E2D90DD0;
  v2 = (void *)*((_QWORD *)a1 + 63);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)a1 + 60);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)a1 + 57);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)a1 + 54);
  if (v5)
  {
    *((_QWORD *)a1 + 55) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)a1 + 51);
  if (v6)
  {
    *((_QWORD *)a1 + 52) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)a1 + 48);
  if (v7)
  {
    *((_QWORD *)a1 + 49) = v7;
    operator delete(v7);
  }
  Espresso::base_kernel::~base_kernel(a1);
}

void wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 536);
  v99[0] = *(_QWORD *)(a1 + 528);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 536);
  v98[0] = *(_QWORD *)(a1 + 528);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::general_slice_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t **)v101);
  v41 = *(_QWORD *)(v95 + 544);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 552);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 536);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

